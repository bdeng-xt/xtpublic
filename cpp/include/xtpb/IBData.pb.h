// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IBData.proto

#ifndef PROTOBUF_IBData_2eproto__INCLUDED
#define PROTOBUF_IBData_2eproto__INCLUDED

#include <string>
#include "XTConfig.h"
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace IB {

// Internal implementation detail -- do not call these.
void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
void protobuf_AssignDesc_IBData_2eproto();
void protobuf_ShutdownFile_IBData_2eproto();

class IBBarData;
class IBCodeMsgPair;
class IBComboLeg;
class IBCommissionReport;
class IBContract;
class IBContractDetails;
class IBExecution;
class IBExecutionFilter;
class IBOrder;
class IBOrderComboLeg;
class IBOrderConditionData;
class IBOrderState;
class IBPBTagMsg;
class IBScanData;
class IBScannerSubscription;
class IBSoftDollarTier;
class IBTagValue;
class IBUnderComp;

// ===================================================================

class XT_COMMON_API IBTagValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBTagValue) */ {
 public:
  IBTagValue();
  virtual ~IBTagValue();

  IBTagValue(const IBTagValue& from);

  inline IBTagValue& operator=(const IBTagValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBTagValue& default_instance();

  void Swap(IBTagValue* other);

  // implements Message ----------------------------------------------

  inline IBTagValue* New() const { return New(NULL); }

  IBTagValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBTagValue& from);
  void MergeFrom(const IBTagValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBTagValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tag = 1;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:IB.IBTagValue)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBTagValue* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBCodeMsgPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBCodeMsgPair) */ {
 public:
  IBCodeMsgPair();
  virtual ~IBCodeMsgPair();

  IBCodeMsgPair(const IBCodeMsgPair& from);

  inline IBCodeMsgPair& operator=(const IBCodeMsgPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBCodeMsgPair& default_instance();

  void Swap(IBCodeMsgPair* other);

  // implements Message ----------------------------------------------

  inline IBCodeMsgPair* New() const { return New(NULL); }

  IBCodeMsgPair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBCodeMsgPair& from);
  void MergeFrom(const IBCodeMsgPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBCodeMsgPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errorCode = 1;
  bool has_errorcode() const;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string errorMsg = 2;
  bool has_errormsg() const;
  void clear_errormsg();
  static const int kErrorMsgFieldNumber = 2;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);

  // @@protoc_insertion_point(class_scope:IB.IBCodeMsgPair)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  ::google::protobuf::int32 errorcode_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBCodeMsgPair* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBBarData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBBarData) */ {
 public:
  IBBarData();
  virtual ~IBBarData();

  IBBarData(const IBBarData& from);

  inline IBBarData& operator=(const IBBarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBBarData& default_instance();

  void Swap(IBBarData* other);

  // implements Message ----------------------------------------------

  inline IBBarData* New() const { return New(NULL); }

  IBBarData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBBarData& from);
  void MergeFrom(const IBBarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBBarData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional double open = 2;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  double open() const;
  void set_open(double value);

  // optional double high = 3;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 3;
  double high() const;
  void set_high(double value);

  // optional double low = 4;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 4;
  double low() const;
  void set_low(double value);

  // optional double close = 5;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 5;
  double close() const;
  void set_close(double value);

  // optional int32 volume = 6;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional double average = 7;
  bool has_average() const;
  void clear_average();
  static const int kAverageFieldNumber = 7;
  double average() const;
  void set_average(double value);

  // optional string hasGaps = 8;
  bool has_hasgaps() const;
  void clear_hasgaps();
  static const int kHasGapsFieldNumber = 8;
  const ::std::string& hasgaps() const;
  void set_hasgaps(const ::std::string& value);
  void set_hasgaps(const char* value);
  void set_hasgaps(const char* value, size_t size);
  ::std::string* mutable_hasgaps();
  ::std::string* release_hasgaps();
  void set_allocated_hasgaps(::std::string* hasgaps);

  // optional int32 barCount = 9;
  bool has_barcount() const;
  void clear_barcount();
  static const int kBarCountFieldNumber = 9;
  ::google::protobuf::int32 barcount() const;
  void set_barcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IB.IBBarData)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_average();
  inline void clear_has_average();
  inline void set_has_hasgaps();
  inline void clear_has_hasgaps();
  inline void set_has_barcount();
  inline void clear_has_barcount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  double open_;
  double high_;
  double low_;
  double close_;
  double average_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 barcount_;
  ::google::protobuf::internal::ArenaStringPtr hasgaps_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBBarData* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBComboLeg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBComboLeg) */ {
 public:
  IBComboLeg();
  virtual ~IBComboLeg();

  IBComboLeg(const IBComboLeg& from);

  inline IBComboLeg& operator=(const IBComboLeg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBComboLeg& default_instance();

  void Swap(IBComboLeg* other);

  // implements Message ----------------------------------------------

  inline IBComboLeg* New() const { return New(NULL); }

  IBComboLeg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBComboLeg& from);
  void MergeFrom(const IBComboLeg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBComboLeg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 conId = 1;
  bool has_conid() const;
  void clear_conid();
  static const int kConIdFieldNumber = 1;
  ::google::protobuf::int32 conid() const;
  void set_conid(::google::protobuf::int32 value);

  // optional int32 ratio = 2;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 2;
  ::google::protobuf::int32 ratio() const;
  void set_ratio(::google::protobuf::int32 value);

  // optional string action = 3;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 3;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // optional string exchange = 4;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 4;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional int32 openClose = 5;
  bool has_openclose() const;
  void clear_openclose();
  static const int kOpenCloseFieldNumber = 5;
  ::google::protobuf::int32 openclose() const;
  void set_openclose(::google::protobuf::int32 value);

  // optional int32 shortSaleSlot = 6;
  bool has_shortsaleslot() const;
  void clear_shortsaleslot();
  static const int kShortSaleSlotFieldNumber = 6;
  ::google::protobuf::int32 shortsaleslot() const;
  void set_shortsaleslot(::google::protobuf::int32 value);

  // optional string designatedLocation = 7;
  bool has_designatedlocation() const;
  void clear_designatedlocation();
  static const int kDesignatedLocationFieldNumber = 7;
  const ::std::string& designatedlocation() const;
  void set_designatedlocation(const ::std::string& value);
  void set_designatedlocation(const char* value);
  void set_designatedlocation(const char* value, size_t size);
  ::std::string* mutable_designatedlocation();
  ::std::string* release_designatedlocation();
  void set_allocated_designatedlocation(::std::string* designatedlocation);

  // optional int32 exemptCode = 8;
  bool has_exemptcode() const;
  void clear_exemptcode();
  static const int kExemptCodeFieldNumber = 8;
  ::google::protobuf::int32 exemptcode() const;
  void set_exemptcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IB.IBComboLeg)
 private:
  inline void set_has_conid();
  inline void clear_has_conid();
  inline void set_has_ratio();
  inline void clear_has_ratio();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_openclose();
  inline void clear_has_openclose();
  inline void set_has_shortsaleslot();
  inline void clear_has_shortsaleslot();
  inline void set_has_designatedlocation();
  inline void clear_has_designatedlocation();
  inline void set_has_exemptcode();
  inline void clear_has_exemptcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 conid_;
  ::google::protobuf::int32 ratio_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 openclose_;
  ::google::protobuf::int32 shortsaleslot_;
  ::google::protobuf::internal::ArenaStringPtr designatedlocation_;
  ::google::protobuf::int32 exemptcode_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBComboLeg* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBSoftDollarTier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBSoftDollarTier) */ {
 public:
  IBSoftDollarTier();
  virtual ~IBSoftDollarTier();

  IBSoftDollarTier(const IBSoftDollarTier& from);

  inline IBSoftDollarTier& operator=(const IBSoftDollarTier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBSoftDollarTier& default_instance();

  void Swap(IBSoftDollarTier* other);

  // implements Message ----------------------------------------------

  inline IBSoftDollarTier* New() const { return New(NULL); }

  IBSoftDollarTier* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBSoftDollarTier& from);
  void MergeFrom(const IBSoftDollarTier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBSoftDollarTier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // optional string displayName = 3;
  bool has_displayname() const;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& displayname() const;
  void set_displayname(const ::std::string& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  ::std::string* mutable_displayname();
  ::std::string* release_displayname();
  void set_allocated_displayname(::std::string* displayname);

  // @@protoc_insertion_point(class_scope:IB.IBSoftDollarTier)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_displayname();
  inline void clear_has_displayname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  ::google::protobuf::internal::ArenaStringPtr displayname_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBSoftDollarTier* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBUnderComp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBUnderComp) */ {
 public:
  IBUnderComp();
  virtual ~IBUnderComp();

  IBUnderComp(const IBUnderComp& from);

  inline IBUnderComp& operator=(const IBUnderComp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBUnderComp& default_instance();

  void Swap(IBUnderComp* other);

  // implements Message ----------------------------------------------

  inline IBUnderComp* New() const { return New(NULL); }

  IBUnderComp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBUnderComp& from);
  void MergeFrom(const IBUnderComp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBUnderComp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 conId = 1;
  bool has_conid() const;
  void clear_conid();
  static const int kConIdFieldNumber = 1;
  ::google::protobuf::int32 conid() const;
  void set_conid(::google::protobuf::int32 value);

  // optional double delta = 2;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 2;
  double delta() const;
  void set_delta(double value);

  // optional double price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  double price() const;
  void set_price(double value);

  // @@protoc_insertion_point(class_scope:IB.IBUnderComp)
 private:
  inline void set_has_conid();
  inline void clear_has_conid();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double delta_;
  double price_;
  ::google::protobuf::int32 conid_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBUnderComp* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBContract) */ {
 public:
  IBContract();
  virtual ~IBContract();

  IBContract(const IBContract& from);

  inline IBContract& operator=(const IBContract& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBContract& default_instance();

  void Swap(IBContract* other);

  // implements Message ----------------------------------------------

  inline IBContract* New() const { return New(NULL); }

  IBContract* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBContract& from);
  void MergeFrom(const IBContract& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 conId = 1;
  bool has_conid() const;
  void clear_conid();
  static const int kConIdFieldNumber = 1;
  ::google::protobuf::int32 conid() const;
  void set_conid(::google::protobuf::int32 value);

  // optional string symbol = 2;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string secType = 3;
  bool has_sectype() const;
  void clear_sectype();
  static const int kSecTypeFieldNumber = 3;
  const ::std::string& sectype() const;
  void set_sectype(const ::std::string& value);
  void set_sectype(const char* value);
  void set_sectype(const char* value, size_t size);
  ::std::string* mutable_sectype();
  ::std::string* release_sectype();
  void set_allocated_sectype(::std::string* sectype);

  // optional string lastTradeDateOrContractMonth = 4;
  bool has_lasttradedateorcontractmonth() const;
  void clear_lasttradedateorcontractmonth();
  static const int kLastTradeDateOrContractMonthFieldNumber = 4;
  const ::std::string& lasttradedateorcontractmonth() const;
  void set_lasttradedateorcontractmonth(const ::std::string& value);
  void set_lasttradedateorcontractmonth(const char* value);
  void set_lasttradedateorcontractmonth(const char* value, size_t size);
  ::std::string* mutable_lasttradedateorcontractmonth();
  ::std::string* release_lasttradedateorcontractmonth();
  void set_allocated_lasttradedateorcontractmonth(::std::string* lasttradedateorcontractmonth);

  // optional string expiry = 5;
  bool has_expiry() const;
  void clear_expiry();
  static const int kExpiryFieldNumber = 5;
  const ::std::string& expiry() const;
  void set_expiry(const ::std::string& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  ::std::string* mutable_expiry();
  ::std::string* release_expiry();
  void set_allocated_expiry(::std::string* expiry);

  // optional double strike = 6;
  bool has_strike() const;
  void clear_strike();
  static const int kStrikeFieldNumber = 6;
  double strike() const;
  void set_strike(double value);

  // optional string right = 7;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 7;
  const ::std::string& right() const;
  void set_right(const ::std::string& value);
  void set_right(const char* value);
  void set_right(const char* value, size_t size);
  ::std::string* mutable_right();
  ::std::string* release_right();
  void set_allocated_right(::std::string* right);

  // optional string multiplier = 8;
  bool has_multiplier() const;
  void clear_multiplier();
  static const int kMultiplierFieldNumber = 8;
  const ::std::string& multiplier() const;
  void set_multiplier(const ::std::string& value);
  void set_multiplier(const char* value);
  void set_multiplier(const char* value, size_t size);
  ::std::string* mutable_multiplier();
  ::std::string* release_multiplier();
  void set_allocated_multiplier(::std::string* multiplier);

  // optional string exchange = 9;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 9;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string primaryExchange = 10;
  bool has_primaryexchange() const;
  void clear_primaryexchange();
  static const int kPrimaryExchangeFieldNumber = 10;
  const ::std::string& primaryexchange() const;
  void set_primaryexchange(const ::std::string& value);
  void set_primaryexchange(const char* value);
  void set_primaryexchange(const char* value, size_t size);
  ::std::string* mutable_primaryexchange();
  ::std::string* release_primaryexchange();
  void set_allocated_primaryexchange(::std::string* primaryexchange);

  // optional string currency = 11;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 11;
  const ::std::string& currency() const;
  void set_currency(const ::std::string& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  ::std::string* mutable_currency();
  ::std::string* release_currency();
  void set_allocated_currency(::std::string* currency);

  // optional string localSymbol = 12;
  bool has_localsymbol() const;
  void clear_localsymbol();
  static const int kLocalSymbolFieldNumber = 12;
  const ::std::string& localsymbol() const;
  void set_localsymbol(const ::std::string& value);
  void set_localsymbol(const char* value);
  void set_localsymbol(const char* value, size_t size);
  ::std::string* mutable_localsymbol();
  ::std::string* release_localsymbol();
  void set_allocated_localsymbol(::std::string* localsymbol);

  // optional string tradingClass = 13;
  bool has_tradingclass() const;
  void clear_tradingclass();
  static const int kTradingClassFieldNumber = 13;
  const ::std::string& tradingclass() const;
  void set_tradingclass(const ::std::string& value);
  void set_tradingclass(const char* value);
  void set_tradingclass(const char* value, size_t size);
  ::std::string* mutable_tradingclass();
  ::std::string* release_tradingclass();
  void set_allocated_tradingclass(::std::string* tradingclass);

  // optional bool includeExpired = 14;
  bool has_includeexpired() const;
  void clear_includeexpired();
  static const int kIncludeExpiredFieldNumber = 14;
  bool includeexpired() const;
  void set_includeexpired(bool value);

  // optional string secIdType = 15;
  bool has_secidtype() const;
  void clear_secidtype();
  static const int kSecIdTypeFieldNumber = 15;
  const ::std::string& secidtype() const;
  void set_secidtype(const ::std::string& value);
  void set_secidtype(const char* value);
  void set_secidtype(const char* value, size_t size);
  ::std::string* mutable_secidtype();
  ::std::string* release_secidtype();
  void set_allocated_secidtype(::std::string* secidtype);

  // optional string secId = 16;
  bool has_secid() const;
  void clear_secid();
  static const int kSecIdFieldNumber = 16;
  const ::std::string& secid() const;
  void set_secid(const ::std::string& value);
  void set_secid(const char* value);
  void set_secid(const char* value, size_t size);
  ::std::string* mutable_secid();
  ::std::string* release_secid();
  void set_allocated_secid(::std::string* secid);

  // optional string comboLegsDescrip = 17;
  bool has_combolegsdescrip() const;
  void clear_combolegsdescrip();
  static const int kComboLegsDescripFieldNumber = 17;
  const ::std::string& combolegsdescrip() const;
  void set_combolegsdescrip(const ::std::string& value);
  void set_combolegsdescrip(const char* value);
  void set_combolegsdescrip(const char* value, size_t size);
  ::std::string* mutable_combolegsdescrip();
  ::std::string* release_combolegsdescrip();
  void set_allocated_combolegsdescrip(::std::string* combolegsdescrip);

  // repeated .IB.IBComboLeg comboLegs = 18;
  int combolegs_size() const;
  void clear_combolegs();
  static const int kComboLegsFieldNumber = 18;
  const ::IB::IBComboLeg& combolegs(int index) const;
  ::IB::IBComboLeg* mutable_combolegs(int index);
  ::IB::IBComboLeg* add_combolegs();
  ::google::protobuf::RepeatedPtrField< ::IB::IBComboLeg >*
      mutable_combolegs();
  const ::google::protobuf::RepeatedPtrField< ::IB::IBComboLeg >&
      combolegs() const;

  // optional .IB.IBUnderComp undlyComp = 19;
  bool has_undlycomp() const;
  void clear_undlycomp();
  static const int kUndlyCompFieldNumber = 19;
  const ::IB::IBUnderComp& undlycomp() const;
  ::IB::IBUnderComp* mutable_undlycomp();
  ::IB::IBUnderComp* release_undlycomp();
  void set_allocated_undlycomp(::IB::IBUnderComp* undlycomp);

  // @@protoc_insertion_point(class_scope:IB.IBContract)
 private:
  inline void set_has_conid();
  inline void clear_has_conid();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_sectype();
  inline void clear_has_sectype();
  inline void set_has_lasttradedateorcontractmonth();
  inline void clear_has_lasttradedateorcontractmonth();
  inline void set_has_expiry();
  inline void clear_has_expiry();
  inline void set_has_strike();
  inline void clear_has_strike();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_multiplier();
  inline void clear_has_multiplier();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_primaryexchange();
  inline void clear_has_primaryexchange();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_localsymbol();
  inline void clear_has_localsymbol();
  inline void set_has_tradingclass();
  inline void clear_has_tradingclass();
  inline void set_has_includeexpired();
  inline void clear_has_includeexpired();
  inline void set_has_secidtype();
  inline void clear_has_secidtype();
  inline void set_has_secid();
  inline void clear_has_secid();
  inline void set_has_combolegsdescrip();
  inline void clear_has_combolegsdescrip();
  inline void set_has_undlycomp();
  inline void clear_has_undlycomp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr sectype_;
  ::google::protobuf::internal::ArenaStringPtr lasttradedateorcontractmonth_;
  ::google::protobuf::internal::ArenaStringPtr expiry_;
  double strike_;
  ::google::protobuf::internal::ArenaStringPtr right_;
  ::google::protobuf::int32 conid_;
  bool includeexpired_;
  ::google::protobuf::internal::ArenaStringPtr multiplier_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr primaryexchange_;
  ::google::protobuf::internal::ArenaStringPtr currency_;
  ::google::protobuf::internal::ArenaStringPtr localsymbol_;
  ::google::protobuf::internal::ArenaStringPtr tradingclass_;
  ::google::protobuf::internal::ArenaStringPtr secidtype_;
  ::google::protobuf::internal::ArenaStringPtr secid_;
  ::google::protobuf::internal::ArenaStringPtr combolegsdescrip_;
  ::google::protobuf::RepeatedPtrField< ::IB::IBComboLeg > combolegs_;
  ::IB::IBUnderComp* undlycomp_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBContract* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBContractDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBContractDetails) */ {
 public:
  IBContractDetails();
  virtual ~IBContractDetails();

  IBContractDetails(const IBContractDetails& from);

  inline IBContractDetails& operator=(const IBContractDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBContractDetails& default_instance();

  void Swap(IBContractDetails* other);

  // implements Message ----------------------------------------------

  inline IBContractDetails* New() const { return New(NULL); }

  IBContractDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBContractDetails& from);
  void MergeFrom(const IBContractDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBContractDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .IB.IBContract summary = 1;
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 1;
  const ::IB::IBContract& summary() const;
  ::IB::IBContract* mutable_summary();
  ::IB::IBContract* release_summary();
  void set_allocated_summary(::IB::IBContract* summary);

  // optional string marketName = 2;
  bool has_marketname() const;
  void clear_marketname();
  static const int kMarketNameFieldNumber = 2;
  const ::std::string& marketname() const;
  void set_marketname(const ::std::string& value);
  void set_marketname(const char* value);
  void set_marketname(const char* value, size_t size);
  ::std::string* mutable_marketname();
  ::std::string* release_marketname();
  void set_allocated_marketname(::std::string* marketname);

  // optional double minTick = 3;
  bool has_mintick() const;
  void clear_mintick();
  static const int kMinTickFieldNumber = 3;
  double mintick() const;
  void set_mintick(double value);

  // optional string orderTypes = 4;
  bool has_ordertypes() const;
  void clear_ordertypes();
  static const int kOrderTypesFieldNumber = 4;
  const ::std::string& ordertypes() const;
  void set_ordertypes(const ::std::string& value);
  void set_ordertypes(const char* value);
  void set_ordertypes(const char* value, size_t size);
  ::std::string* mutable_ordertypes();
  ::std::string* release_ordertypes();
  void set_allocated_ordertypes(::std::string* ordertypes);

  // optional string validExchanges = 5;
  bool has_validexchanges() const;
  void clear_validexchanges();
  static const int kValidExchangesFieldNumber = 5;
  const ::std::string& validexchanges() const;
  void set_validexchanges(const ::std::string& value);
  void set_validexchanges(const char* value);
  void set_validexchanges(const char* value, size_t size);
  ::std::string* mutable_validexchanges();
  ::std::string* release_validexchanges();
  void set_allocated_validexchanges(::std::string* validexchanges);

  // optional int32 priceMagnifier = 6;
  bool has_pricemagnifier() const;
  void clear_pricemagnifier();
  static const int kPriceMagnifierFieldNumber = 6;
  ::google::protobuf::int32 pricemagnifier() const;
  void set_pricemagnifier(::google::protobuf::int32 value);

  // optional int32 underConId = 7;
  bool has_underconid() const;
  void clear_underconid();
  static const int kUnderConIdFieldNumber = 7;
  ::google::protobuf::int32 underconid() const;
  void set_underconid(::google::protobuf::int32 value);

  // optional string longName = 8;
  bool has_longname() const;
  void clear_longname();
  static const int kLongNameFieldNumber = 8;
  const ::std::string& longname() const;
  void set_longname(const ::std::string& value);
  void set_longname(const char* value);
  void set_longname(const char* value, size_t size);
  ::std::string* mutable_longname();
  ::std::string* release_longname();
  void set_allocated_longname(::std::string* longname);

  // optional string contractMonth = 9;
  bool has_contractmonth() const;
  void clear_contractmonth();
  static const int kContractMonthFieldNumber = 9;
  const ::std::string& contractmonth() const;
  void set_contractmonth(const ::std::string& value);
  void set_contractmonth(const char* value);
  void set_contractmonth(const char* value, size_t size);
  ::std::string* mutable_contractmonth();
  ::std::string* release_contractmonth();
  void set_allocated_contractmonth(::std::string* contractmonth);

  // optional string industry = 10;
  bool has_industry() const;
  void clear_industry();
  static const int kIndustryFieldNumber = 10;
  const ::std::string& industry() const;
  void set_industry(const ::std::string& value);
  void set_industry(const char* value);
  void set_industry(const char* value, size_t size);
  ::std::string* mutable_industry();
  ::std::string* release_industry();
  void set_allocated_industry(::std::string* industry);

  // optional string category = 11;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 11;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // optional string subcategory = 12;
  bool has_subcategory() const;
  void clear_subcategory();
  static const int kSubcategoryFieldNumber = 12;
  const ::std::string& subcategory() const;
  void set_subcategory(const ::std::string& value);
  void set_subcategory(const char* value);
  void set_subcategory(const char* value, size_t size);
  ::std::string* mutable_subcategory();
  ::std::string* release_subcategory();
  void set_allocated_subcategory(::std::string* subcategory);

  // optional string timeZoneId = 13;
  bool has_timezoneid() const;
  void clear_timezoneid();
  static const int kTimeZoneIdFieldNumber = 13;
  const ::std::string& timezoneid() const;
  void set_timezoneid(const ::std::string& value);
  void set_timezoneid(const char* value);
  void set_timezoneid(const char* value, size_t size);
  ::std::string* mutable_timezoneid();
  ::std::string* release_timezoneid();
  void set_allocated_timezoneid(::std::string* timezoneid);

  // optional string tradingHours = 14;
  bool has_tradinghours() const;
  void clear_tradinghours();
  static const int kTradingHoursFieldNumber = 14;
  const ::std::string& tradinghours() const;
  void set_tradinghours(const ::std::string& value);
  void set_tradinghours(const char* value);
  void set_tradinghours(const char* value, size_t size);
  ::std::string* mutable_tradinghours();
  ::std::string* release_tradinghours();
  void set_allocated_tradinghours(::std::string* tradinghours);

  // optional string liquidHours = 15;
  bool has_liquidhours() const;
  void clear_liquidhours();
  static const int kLiquidHoursFieldNumber = 15;
  const ::std::string& liquidhours() const;
  void set_liquidhours(const ::std::string& value);
  void set_liquidhours(const char* value);
  void set_liquidhours(const char* value, size_t size);
  ::std::string* mutable_liquidhours();
  ::std::string* release_liquidhours();
  void set_allocated_liquidhours(::std::string* liquidhours);

  // optional string evRule = 16;
  bool has_evrule() const;
  void clear_evrule();
  static const int kEvRuleFieldNumber = 16;
  const ::std::string& evrule() const;
  void set_evrule(const ::std::string& value);
  void set_evrule(const char* value);
  void set_evrule(const char* value, size_t size);
  ::std::string* mutable_evrule();
  ::std::string* release_evrule();
  void set_allocated_evrule(::std::string* evrule);

  // optional double evMultiplier = 17;
  bool has_evmultiplier() const;
  void clear_evmultiplier();
  static const int kEvMultiplierFieldNumber = 17;
  double evmultiplier() const;
  void set_evmultiplier(double value);

  // repeated .IB.IBTagValue secIdList = 18;
  int secidlist_size() const;
  void clear_secidlist();
  static const int kSecIdListFieldNumber = 18;
  const ::IB::IBTagValue& secidlist(int index) const;
  ::IB::IBTagValue* mutable_secidlist(int index);
  ::IB::IBTagValue* add_secidlist();
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
      mutable_secidlist();
  const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
      secidlist() const;

  // optional string cusip = 19;
  bool has_cusip() const;
  void clear_cusip();
  static const int kCusipFieldNumber = 19;
  const ::std::string& cusip() const;
  void set_cusip(const ::std::string& value);
  void set_cusip(const char* value);
  void set_cusip(const char* value, size_t size);
  ::std::string* mutable_cusip();
  ::std::string* release_cusip();
  void set_allocated_cusip(::std::string* cusip);

  // optional string ratings = 20;
  bool has_ratings() const;
  void clear_ratings();
  static const int kRatingsFieldNumber = 20;
  const ::std::string& ratings() const;
  void set_ratings(const ::std::string& value);
  void set_ratings(const char* value);
  void set_ratings(const char* value, size_t size);
  ::std::string* mutable_ratings();
  ::std::string* release_ratings();
  void set_allocated_ratings(::std::string* ratings);

  // optional string descAppend = 21;
  bool has_descappend() const;
  void clear_descappend();
  static const int kDescAppendFieldNumber = 21;
  const ::std::string& descappend() const;
  void set_descappend(const ::std::string& value);
  void set_descappend(const char* value);
  void set_descappend(const char* value, size_t size);
  ::std::string* mutable_descappend();
  ::std::string* release_descappend();
  void set_allocated_descappend(::std::string* descappend);

  // optional string bondType = 22;
  bool has_bondtype() const;
  void clear_bondtype();
  static const int kBondTypeFieldNumber = 22;
  const ::std::string& bondtype() const;
  void set_bondtype(const ::std::string& value);
  void set_bondtype(const char* value);
  void set_bondtype(const char* value, size_t size);
  ::std::string* mutable_bondtype();
  ::std::string* release_bondtype();
  void set_allocated_bondtype(::std::string* bondtype);

  // optional string couponType = 23;
  bool has_coupontype() const;
  void clear_coupontype();
  static const int kCouponTypeFieldNumber = 23;
  const ::std::string& coupontype() const;
  void set_coupontype(const ::std::string& value);
  void set_coupontype(const char* value);
  void set_coupontype(const char* value, size_t size);
  ::std::string* mutable_coupontype();
  ::std::string* release_coupontype();
  void set_allocated_coupontype(::std::string* coupontype);

  // optional bool callable = 24;
  bool has_callable() const;
  void clear_callable();
  static const int kCallableFieldNumber = 24;
  bool callable() const;
  void set_callable(bool value);

  // optional bool putable = 25;
  bool has_putable() const;
  void clear_putable();
  static const int kPutableFieldNumber = 25;
  bool putable() const;
  void set_putable(bool value);

  // optional double coupon = 26;
  bool has_coupon() const;
  void clear_coupon();
  static const int kCouponFieldNumber = 26;
  double coupon() const;
  void set_coupon(double value);

  // optional bool convertible = 27;
  bool has_convertible() const;
  void clear_convertible();
  static const int kConvertibleFieldNumber = 27;
  bool convertible() const;
  void set_convertible(bool value);

  // optional string maturity = 28;
  bool has_maturity() const;
  void clear_maturity();
  static const int kMaturityFieldNumber = 28;
  const ::std::string& maturity() const;
  void set_maturity(const ::std::string& value);
  void set_maturity(const char* value);
  void set_maturity(const char* value, size_t size);
  ::std::string* mutable_maturity();
  ::std::string* release_maturity();
  void set_allocated_maturity(::std::string* maturity);

  // optional string issueDate = 29;
  bool has_issuedate() const;
  void clear_issuedate();
  static const int kIssueDateFieldNumber = 29;
  const ::std::string& issuedate() const;
  void set_issuedate(const ::std::string& value);
  void set_issuedate(const char* value);
  void set_issuedate(const char* value, size_t size);
  ::std::string* mutable_issuedate();
  ::std::string* release_issuedate();
  void set_allocated_issuedate(::std::string* issuedate);

  // optional string nextOptionDate = 30;
  bool has_nextoptiondate() const;
  void clear_nextoptiondate();
  static const int kNextOptionDateFieldNumber = 30;
  const ::std::string& nextoptiondate() const;
  void set_nextoptiondate(const ::std::string& value);
  void set_nextoptiondate(const char* value);
  void set_nextoptiondate(const char* value, size_t size);
  ::std::string* mutable_nextoptiondate();
  ::std::string* release_nextoptiondate();
  void set_allocated_nextoptiondate(::std::string* nextoptiondate);

  // optional string nextOptionType = 31;
  bool has_nextoptiontype() const;
  void clear_nextoptiontype();
  static const int kNextOptionTypeFieldNumber = 31;
  const ::std::string& nextoptiontype() const;
  void set_nextoptiontype(const ::std::string& value);
  void set_nextoptiontype(const char* value);
  void set_nextoptiontype(const char* value, size_t size);
  ::std::string* mutable_nextoptiontype();
  ::std::string* release_nextoptiontype();
  void set_allocated_nextoptiontype(::std::string* nextoptiontype);

  // optional bool nextOptionPartial = 32;
  bool has_nextoptionpartial() const;
  void clear_nextoptionpartial();
  static const int kNextOptionPartialFieldNumber = 32;
  bool nextoptionpartial() const;
  void set_nextoptionpartial(bool value);

  // optional string notes = 33;
  bool has_notes() const;
  void clear_notes();
  static const int kNotesFieldNumber = 33;
  const ::std::string& notes() const;
  void set_notes(const ::std::string& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  ::std::string* mutable_notes();
  ::std::string* release_notes();
  void set_allocated_notes(::std::string* notes);

  // @@protoc_insertion_point(class_scope:IB.IBContractDetails)
 private:
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_marketname();
  inline void clear_has_marketname();
  inline void set_has_mintick();
  inline void clear_has_mintick();
  inline void set_has_ordertypes();
  inline void clear_has_ordertypes();
  inline void set_has_validexchanges();
  inline void clear_has_validexchanges();
  inline void set_has_pricemagnifier();
  inline void clear_has_pricemagnifier();
  inline void set_has_underconid();
  inline void clear_has_underconid();
  inline void set_has_longname();
  inline void clear_has_longname();
  inline void set_has_contractmonth();
  inline void clear_has_contractmonth();
  inline void set_has_industry();
  inline void clear_has_industry();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_subcategory();
  inline void clear_has_subcategory();
  inline void set_has_timezoneid();
  inline void clear_has_timezoneid();
  inline void set_has_tradinghours();
  inline void clear_has_tradinghours();
  inline void set_has_liquidhours();
  inline void clear_has_liquidhours();
  inline void set_has_evrule();
  inline void clear_has_evrule();
  inline void set_has_evmultiplier();
  inline void clear_has_evmultiplier();
  inline void set_has_cusip();
  inline void clear_has_cusip();
  inline void set_has_ratings();
  inline void clear_has_ratings();
  inline void set_has_descappend();
  inline void clear_has_descappend();
  inline void set_has_bondtype();
  inline void clear_has_bondtype();
  inline void set_has_coupontype();
  inline void clear_has_coupontype();
  inline void set_has_callable();
  inline void clear_has_callable();
  inline void set_has_putable();
  inline void clear_has_putable();
  inline void set_has_coupon();
  inline void clear_has_coupon();
  inline void set_has_convertible();
  inline void clear_has_convertible();
  inline void set_has_maturity();
  inline void clear_has_maturity();
  inline void set_has_issuedate();
  inline void clear_has_issuedate();
  inline void set_has_nextoptiondate();
  inline void clear_has_nextoptiondate();
  inline void set_has_nextoptiontype();
  inline void clear_has_nextoptiontype();
  inline void set_has_nextoptionpartial();
  inline void clear_has_nextoptionpartial();
  inline void set_has_notes();
  inline void clear_has_notes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::IB::IBContract* summary_;
  ::google::protobuf::internal::ArenaStringPtr marketname_;
  double mintick_;
  ::google::protobuf::internal::ArenaStringPtr ordertypes_;
  ::google::protobuf::internal::ArenaStringPtr validexchanges_;
  ::google::protobuf::int32 pricemagnifier_;
  ::google::protobuf::int32 underconid_;
  ::google::protobuf::internal::ArenaStringPtr longname_;
  ::google::protobuf::internal::ArenaStringPtr contractmonth_;
  ::google::protobuf::internal::ArenaStringPtr industry_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr subcategory_;
  ::google::protobuf::internal::ArenaStringPtr timezoneid_;
  ::google::protobuf::internal::ArenaStringPtr tradinghours_;
  ::google::protobuf::internal::ArenaStringPtr liquidhours_;
  ::google::protobuf::internal::ArenaStringPtr evrule_;
  double evmultiplier_;
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue > secidlist_;
  ::google::protobuf::internal::ArenaStringPtr cusip_;
  ::google::protobuf::internal::ArenaStringPtr ratings_;
  ::google::protobuf::internal::ArenaStringPtr descappend_;
  ::google::protobuf::internal::ArenaStringPtr bondtype_;
  ::google::protobuf::internal::ArenaStringPtr coupontype_;
  double coupon_;
  ::google::protobuf::internal::ArenaStringPtr maturity_;
  ::google::protobuf::internal::ArenaStringPtr issuedate_;
  ::google::protobuf::internal::ArenaStringPtr nextoptiondate_;
  ::google::protobuf::internal::ArenaStringPtr nextoptiontype_;
  ::google::protobuf::internal::ArenaStringPtr notes_;
  bool callable_;
  bool putable_;
  bool convertible_;
  bool nextoptionpartial_;
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBContractDetails* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBScanData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBScanData) */ {
 public:
  IBScanData();
  virtual ~IBScanData();

  IBScanData(const IBScanData& from);

  inline IBScanData& operator=(const IBScanData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBScanData& default_instance();

  void Swap(IBScanData* other);

  // implements Message ----------------------------------------------

  inline IBScanData* New() const { return New(NULL); }

  IBScanData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBScanData& from);
  void MergeFrom(const IBScanData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBScanData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .IB.IBContractDetails contract = 1;
  bool has_contract() const;
  void clear_contract();
  static const int kContractFieldNumber = 1;
  const ::IB::IBContractDetails& contract() const;
  ::IB::IBContractDetails* mutable_contract();
  ::IB::IBContractDetails* release_contract();
  void set_allocated_contract(::IB::IBContractDetails* contract);

  // optional int32 rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // optional string distance = 3;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  const ::std::string& distance() const;
  void set_distance(const ::std::string& value);
  void set_distance(const char* value);
  void set_distance(const char* value, size_t size);
  ::std::string* mutable_distance();
  ::std::string* release_distance();
  void set_allocated_distance(::std::string* distance);

  // optional string benchmark = 4;
  bool has_benchmark() const;
  void clear_benchmark();
  static const int kBenchmarkFieldNumber = 4;
  const ::std::string& benchmark() const;
  void set_benchmark(const ::std::string& value);
  void set_benchmark(const char* value);
  void set_benchmark(const char* value, size_t size);
  ::std::string* mutable_benchmark();
  ::std::string* release_benchmark();
  void set_allocated_benchmark(::std::string* benchmark);

  // optional string projection = 5;
  bool has_projection() const;
  void clear_projection();
  static const int kProjectionFieldNumber = 5;
  const ::std::string& projection() const;
  void set_projection(const ::std::string& value);
  void set_projection(const char* value);
  void set_projection(const char* value, size_t size);
  ::std::string* mutable_projection();
  ::std::string* release_projection();
  void set_allocated_projection(::std::string* projection);

  // optional string legsStr = 6;
  bool has_legsstr() const;
  void clear_legsstr();
  static const int kLegsStrFieldNumber = 6;
  const ::std::string& legsstr() const;
  void set_legsstr(const ::std::string& value);
  void set_legsstr(const char* value);
  void set_legsstr(const char* value, size_t size);
  ::std::string* mutable_legsstr();
  ::std::string* release_legsstr();
  void set_allocated_legsstr(::std::string* legsstr);

  // @@protoc_insertion_point(class_scope:IB.IBScanData)
 private:
  inline void set_has_contract();
  inline void clear_has_contract();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_benchmark();
  inline void clear_has_benchmark();
  inline void set_has_projection();
  inline void clear_has_projection();
  inline void set_has_legsstr();
  inline void clear_has_legsstr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IB::IBContractDetails* contract_;
  ::google::protobuf::internal::ArenaStringPtr distance_;
  ::google::protobuf::internal::ArenaStringPtr benchmark_;
  ::google::protobuf::internal::ArenaStringPtr projection_;
  ::google::protobuf::internal::ArenaStringPtr legsstr_;
  ::google::protobuf::int32 rank_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBScanData* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBCommissionReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBCommissionReport) */ {
 public:
  IBCommissionReport();
  virtual ~IBCommissionReport();

  IBCommissionReport(const IBCommissionReport& from);

  inline IBCommissionReport& operator=(const IBCommissionReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBCommissionReport& default_instance();

  void Swap(IBCommissionReport* other);

  // implements Message ----------------------------------------------

  inline IBCommissionReport* New() const { return New(NULL); }

  IBCommissionReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBCommissionReport& from);
  void MergeFrom(const IBCommissionReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBCommissionReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string execId = 1;
  bool has_execid() const;
  void clear_execid();
  static const int kExecIdFieldNumber = 1;
  const ::std::string& execid() const;
  void set_execid(const ::std::string& value);
  void set_execid(const char* value);
  void set_execid(const char* value, size_t size);
  ::std::string* mutable_execid();
  ::std::string* release_execid();
  void set_allocated_execid(::std::string* execid);

  // optional double commission = 2;
  bool has_commission() const;
  void clear_commission();
  static const int kCommissionFieldNumber = 2;
  double commission() const;
  void set_commission(double value);

  // optional string currency = 3;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 3;
  const ::std::string& currency() const;
  void set_currency(const ::std::string& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  ::std::string* mutable_currency();
  ::std::string* release_currency();
  void set_allocated_currency(::std::string* currency);

  // optional double realizedPNL = 4;
  bool has_realizedpnl() const;
  void clear_realizedpnl();
  static const int kRealizedPNLFieldNumber = 4;
  double realizedpnl() const;
  void set_realizedpnl(double value);

  // optional double yieldValue = 5;
  bool has_yieldvalue() const;
  void clear_yieldvalue();
  static const int kYieldValueFieldNumber = 5;
  double yieldvalue() const;
  void set_yieldvalue(double value);

  // optional int32 yieldRedemptionDate = 6;
  bool has_yieldredemptiondate() const;
  void clear_yieldredemptiondate();
  static const int kYieldRedemptionDateFieldNumber = 6;
  ::google::protobuf::int32 yieldredemptiondate() const;
  void set_yieldredemptiondate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IB.IBCommissionReport)
 private:
  inline void set_has_execid();
  inline void clear_has_execid();
  inline void set_has_commission();
  inline void clear_has_commission();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_realizedpnl();
  inline void clear_has_realizedpnl();
  inline void set_has_yieldvalue();
  inline void clear_has_yieldvalue();
  inline void set_has_yieldredemptiondate();
  inline void clear_has_yieldredemptiondate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr execid_;
  double commission_;
  ::google::protobuf::internal::ArenaStringPtr currency_;
  double realizedpnl_;
  double yieldvalue_;
  ::google::protobuf::int32 yieldredemptiondate_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBCommissionReport* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBExecution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBExecution) */ {
 public:
  IBExecution();
  virtual ~IBExecution();

  IBExecution(const IBExecution& from);

  inline IBExecution& operator=(const IBExecution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBExecution& default_instance();

  void Swap(IBExecution* other);

  // implements Message ----------------------------------------------

  inline IBExecution* New() const { return New(NULL); }

  IBExecution* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBExecution& from);
  void MergeFrom(const IBExecution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string execId = 1;
  bool has_execid() const;
  void clear_execid();
  static const int kExecIdFieldNumber = 1;
  const ::std::string& execid() const;
  void set_execid(const ::std::string& value);
  void set_execid(const char* value);
  void set_execid(const char* value, size_t size);
  ::std::string* mutable_execid();
  ::std::string* release_execid();
  void set_allocated_execid(::std::string* execid);

  // optional string time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string acctNumber = 3;
  bool has_acctnumber() const;
  void clear_acctnumber();
  static const int kAcctNumberFieldNumber = 3;
  const ::std::string& acctnumber() const;
  void set_acctnumber(const ::std::string& value);
  void set_acctnumber(const char* value);
  void set_acctnumber(const char* value, size_t size);
  ::std::string* mutable_acctnumber();
  ::std::string* release_acctnumber();
  void set_allocated_acctnumber(::std::string* acctnumber);

  // optional string exchange = 4;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 4;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string side = 5;
  bool has_side() const;
  void clear_side();
  static const int kSideFieldNumber = 5;
  const ::std::string& side() const;
  void set_side(const ::std::string& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  ::std::string* mutable_side();
  ::std::string* release_side();
  void set_allocated_side(::std::string* side);

  // optional int32 shares = 6;
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 6;
  ::google::protobuf::int32 shares() const;
  void set_shares(::google::protobuf::int32 value);

  // optional double price = 7;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  double price() const;
  void set_price(double value);

  // optional int32 permId = 8;
  bool has_permid() const;
  void clear_permid();
  static const int kPermIdFieldNumber = 8;
  ::google::protobuf::int32 permid() const;
  void set_permid(::google::protobuf::int32 value);

  // optional int32 clientId = 9;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 9;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // optional int32 orderId = 10;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderIdFieldNumber = 10;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // optional int32 liquidation = 11;
  bool has_liquidation() const;
  void clear_liquidation();
  static const int kLiquidationFieldNumber = 11;
  ::google::protobuf::int32 liquidation() const;
  void set_liquidation(::google::protobuf::int32 value);

  // optional int32 cumQty = 12;
  bool has_cumqty() const;
  void clear_cumqty();
  static const int kCumQtyFieldNumber = 12;
  ::google::protobuf::int32 cumqty() const;
  void set_cumqty(::google::protobuf::int32 value);

  // optional double avgPrice = 13;
  bool has_avgprice() const;
  void clear_avgprice();
  static const int kAvgPriceFieldNumber = 13;
  double avgprice() const;
  void set_avgprice(double value);

  // optional string orderRef = 14;
  bool has_orderref() const;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 14;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // optional string evRule = 15;
  bool has_evrule() const;
  void clear_evrule();
  static const int kEvRuleFieldNumber = 15;
  const ::std::string& evrule() const;
  void set_evrule(const ::std::string& value);
  void set_evrule(const char* value);
  void set_evrule(const char* value, size_t size);
  ::std::string* mutable_evrule();
  ::std::string* release_evrule();
  void set_allocated_evrule(::std::string* evrule);

  // optional double evMultiplier = 16;
  bool has_evmultiplier() const;
  void clear_evmultiplier();
  static const int kEvMultiplierFieldNumber = 16;
  double evmultiplier() const;
  void set_evmultiplier(double value);

  // optional string modelCode = 17;
  bool has_modelcode() const;
  void clear_modelcode();
  static const int kModelCodeFieldNumber = 17;
  const ::std::string& modelcode() const;
  void set_modelcode(const ::std::string& value);
  void set_modelcode(const char* value);
  void set_modelcode(const char* value, size_t size);
  ::std::string* mutable_modelcode();
  ::std::string* release_modelcode();
  void set_allocated_modelcode(::std::string* modelcode);

  // @@protoc_insertion_point(class_scope:IB.IBExecution)
 private:
  inline void set_has_execid();
  inline void clear_has_execid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_acctnumber();
  inline void clear_has_acctnumber();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_shares();
  inline void clear_has_shares();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_permid();
  inline void clear_has_permid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_liquidation();
  inline void clear_has_liquidation();
  inline void set_has_cumqty();
  inline void clear_has_cumqty();
  inline void set_has_avgprice();
  inline void clear_has_avgprice();
  inline void set_has_orderref();
  inline void clear_has_orderref();
  inline void set_has_evrule();
  inline void clear_has_evrule();
  inline void set_has_evmultiplier();
  inline void clear_has_evmultiplier();
  inline void set_has_modelcode();
  inline void clear_has_modelcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr execid_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr acctnumber_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr side_;
  double price_;
  ::google::protobuf::int32 shares_;
  ::google::protobuf::int32 permid_;
  ::google::protobuf::int32 clientid_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 liquidation_;
  ::google::protobuf::int32 cumqty_;
  double avgprice_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::internal::ArenaStringPtr evrule_;
  double evmultiplier_;
  ::google::protobuf::internal::ArenaStringPtr modelcode_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBExecution* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBExecutionFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBExecutionFilter) */ {
 public:
  IBExecutionFilter();
  virtual ~IBExecutionFilter();

  IBExecutionFilter(const IBExecutionFilter& from);

  inline IBExecutionFilter& operator=(const IBExecutionFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBExecutionFilter& default_instance();

  void Swap(IBExecutionFilter* other);

  // implements Message ----------------------------------------------

  inline IBExecutionFilter* New() const { return New(NULL); }

  IBExecutionFilter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBExecutionFilter& from);
  void MergeFrom(const IBExecutionFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBExecutionFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 clientId = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // optional string acctCode = 2;
  bool has_acctcode() const;
  void clear_acctcode();
  static const int kAcctCodeFieldNumber = 2;
  const ::std::string& acctcode() const;
  void set_acctcode(const ::std::string& value);
  void set_acctcode(const char* value);
  void set_acctcode(const char* value, size_t size);
  ::std::string* mutable_acctcode();
  ::std::string* release_acctcode();
  void set_allocated_acctcode(::std::string* acctcode);

  // optional string time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string symbol = 4;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 4;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string secType = 5;
  bool has_sectype() const;
  void clear_sectype();
  static const int kSecTypeFieldNumber = 5;
  const ::std::string& sectype() const;
  void set_sectype(const ::std::string& value);
  void set_sectype(const char* value);
  void set_sectype(const char* value, size_t size);
  ::std::string* mutable_sectype();
  ::std::string* release_sectype();
  void set_allocated_sectype(::std::string* sectype);

  // optional string exchange = 6;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 6;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string side = 7;
  bool has_side() const;
  void clear_side();
  static const int kSideFieldNumber = 7;
  const ::std::string& side() const;
  void set_side(const ::std::string& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  ::std::string* mutable_side();
  ::std::string* release_side();
  void set_allocated_side(::std::string* side);

  // @@protoc_insertion_point(class_scope:IB.IBExecutionFilter)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_acctcode();
  inline void clear_has_acctcode();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_sectype();
  inline void clear_has_sectype();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_side();
  inline void clear_has_side();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr acctcode_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr sectype_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr side_;
  ::google::protobuf::int32 clientid_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBExecutionFilter* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBOrderState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBOrderState) */ {
 public:
  IBOrderState();
  virtual ~IBOrderState();

  IBOrderState(const IBOrderState& from);

  inline IBOrderState& operator=(const IBOrderState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBOrderState& default_instance();

  void Swap(IBOrderState* other);

  // implements Message ----------------------------------------------

  inline IBOrderState* New() const { return New(NULL); }

  IBOrderState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBOrderState& from);
  void MergeFrom(const IBOrderState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBOrderState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string initMargin = 2;
  bool has_initmargin() const;
  void clear_initmargin();
  static const int kInitMarginFieldNumber = 2;
  const ::std::string& initmargin() const;
  void set_initmargin(const ::std::string& value);
  void set_initmargin(const char* value);
  void set_initmargin(const char* value, size_t size);
  ::std::string* mutable_initmargin();
  ::std::string* release_initmargin();
  void set_allocated_initmargin(::std::string* initmargin);

  // optional string maintMargin = 3;
  bool has_maintmargin() const;
  void clear_maintmargin();
  static const int kMaintMarginFieldNumber = 3;
  const ::std::string& maintmargin() const;
  void set_maintmargin(const ::std::string& value);
  void set_maintmargin(const char* value);
  void set_maintmargin(const char* value, size_t size);
  ::std::string* mutable_maintmargin();
  ::std::string* release_maintmargin();
  void set_allocated_maintmargin(::std::string* maintmargin);

  // optional string equityWithLoan = 4;
  bool has_equitywithloan() const;
  void clear_equitywithloan();
  static const int kEquityWithLoanFieldNumber = 4;
  const ::std::string& equitywithloan() const;
  void set_equitywithloan(const ::std::string& value);
  void set_equitywithloan(const char* value);
  void set_equitywithloan(const char* value, size_t size);
  ::std::string* mutable_equitywithloan();
  ::std::string* release_equitywithloan();
  void set_allocated_equitywithloan(::std::string* equitywithloan);

  // optional double commission = 5;
  bool has_commission() const;
  void clear_commission();
  static const int kCommissionFieldNumber = 5;
  double commission() const;
  void set_commission(double value);

  // optional double minCommission = 6;
  bool has_mincommission() const;
  void clear_mincommission();
  static const int kMinCommissionFieldNumber = 6;
  double mincommission() const;
  void set_mincommission(double value);

  // optional double maxCommission = 7;
  bool has_maxcommission() const;
  void clear_maxcommission();
  static const int kMaxCommissionFieldNumber = 7;
  double maxcommission() const;
  void set_maxcommission(double value);

  // optional string commissionCurrency = 8;
  bool has_commissioncurrency() const;
  void clear_commissioncurrency();
  static const int kCommissionCurrencyFieldNumber = 8;
  const ::std::string& commissioncurrency() const;
  void set_commissioncurrency(const ::std::string& value);
  void set_commissioncurrency(const char* value);
  void set_commissioncurrency(const char* value, size_t size);
  ::std::string* mutable_commissioncurrency();
  ::std::string* release_commissioncurrency();
  void set_allocated_commissioncurrency(::std::string* commissioncurrency);

  // optional string warningText = 9;
  bool has_warningtext() const;
  void clear_warningtext();
  static const int kWarningTextFieldNumber = 9;
  const ::std::string& warningtext() const;
  void set_warningtext(const ::std::string& value);
  void set_warningtext(const char* value);
  void set_warningtext(const char* value, size_t size);
  ::std::string* mutable_warningtext();
  ::std::string* release_warningtext();
  void set_allocated_warningtext(::std::string* warningtext);

  // @@protoc_insertion_point(class_scope:IB.IBOrderState)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_initmargin();
  inline void clear_has_initmargin();
  inline void set_has_maintmargin();
  inline void clear_has_maintmargin();
  inline void set_has_equitywithloan();
  inline void clear_has_equitywithloan();
  inline void set_has_commission();
  inline void clear_has_commission();
  inline void set_has_mincommission();
  inline void clear_has_mincommission();
  inline void set_has_maxcommission();
  inline void clear_has_maxcommission();
  inline void set_has_commissioncurrency();
  inline void clear_has_commissioncurrency();
  inline void set_has_warningtext();
  inline void clear_has_warningtext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr initmargin_;
  ::google::protobuf::internal::ArenaStringPtr maintmargin_;
  ::google::protobuf::internal::ArenaStringPtr equitywithloan_;
  double commission_;
  double mincommission_;
  double maxcommission_;
  ::google::protobuf::internal::ArenaStringPtr commissioncurrency_;
  ::google::protobuf::internal::ArenaStringPtr warningtext_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBOrderState* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBScannerSubscription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBScannerSubscription) */ {
 public:
  IBScannerSubscription();
  virtual ~IBScannerSubscription();

  IBScannerSubscription(const IBScannerSubscription& from);

  inline IBScannerSubscription& operator=(const IBScannerSubscription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBScannerSubscription& default_instance();

  void Swap(IBScannerSubscription* other);

  // implements Message ----------------------------------------------

  inline IBScannerSubscription* New() const { return New(NULL); }

  IBScannerSubscription* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBScannerSubscription& from);
  void MergeFrom(const IBScannerSubscription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBScannerSubscription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 numberOfRows = 1;
  bool has_numberofrows() const;
  void clear_numberofrows();
  static const int kNumberOfRowsFieldNumber = 1;
  ::google::protobuf::int32 numberofrows() const;
  void set_numberofrows(::google::protobuf::int32 value);

  // optional string instrument = 2;
  bool has_instrument() const;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 2;
  const ::std::string& instrument() const;
  void set_instrument(const ::std::string& value);
  void set_instrument(const char* value);
  void set_instrument(const char* value, size_t size);
  ::std::string* mutable_instrument();
  ::std::string* release_instrument();
  void set_allocated_instrument(::std::string* instrument);

  // optional string locationCode = 3;
  bool has_locationcode() const;
  void clear_locationcode();
  static const int kLocationCodeFieldNumber = 3;
  const ::std::string& locationcode() const;
  void set_locationcode(const ::std::string& value);
  void set_locationcode(const char* value);
  void set_locationcode(const char* value, size_t size);
  ::std::string* mutable_locationcode();
  ::std::string* release_locationcode();
  void set_allocated_locationcode(::std::string* locationcode);

  // optional string scanCode = 4;
  bool has_scancode() const;
  void clear_scancode();
  static const int kScanCodeFieldNumber = 4;
  const ::std::string& scancode() const;
  void set_scancode(const ::std::string& value);
  void set_scancode(const char* value);
  void set_scancode(const char* value, size_t size);
  ::std::string* mutable_scancode();
  ::std::string* release_scancode();
  void set_allocated_scancode(::std::string* scancode);

  // optional double abovePrice = 5;
  bool has_aboveprice() const;
  void clear_aboveprice();
  static const int kAbovePriceFieldNumber = 5;
  double aboveprice() const;
  void set_aboveprice(double value);

  // optional double belowPrice = 6;
  bool has_belowprice() const;
  void clear_belowprice();
  static const int kBelowPriceFieldNumber = 6;
  double belowprice() const;
  void set_belowprice(double value);

  // optional int32 aboveVolume = 7;
  bool has_abovevolume() const;
  void clear_abovevolume();
  static const int kAboveVolumeFieldNumber = 7;
  ::google::protobuf::int32 abovevolume() const;
  void set_abovevolume(::google::protobuf::int32 value);

  // optional double marketCapAbove = 8;
  bool has_marketcapabove() const;
  void clear_marketcapabove();
  static const int kMarketCapAboveFieldNumber = 8;
  double marketcapabove() const;
  void set_marketcapabove(double value);

  // optional double marketCapBelow = 9;
  bool has_marketcapbelow() const;
  void clear_marketcapbelow();
  static const int kMarketCapBelowFieldNumber = 9;
  double marketcapbelow() const;
  void set_marketcapbelow(double value);

  // optional string moodyRatingAbove = 10;
  bool has_moodyratingabove() const;
  void clear_moodyratingabove();
  static const int kMoodyRatingAboveFieldNumber = 10;
  const ::std::string& moodyratingabove() const;
  void set_moodyratingabove(const ::std::string& value);
  void set_moodyratingabove(const char* value);
  void set_moodyratingabove(const char* value, size_t size);
  ::std::string* mutable_moodyratingabove();
  ::std::string* release_moodyratingabove();
  void set_allocated_moodyratingabove(::std::string* moodyratingabove);

  // optional string moodyRatingBelow = 11;
  bool has_moodyratingbelow() const;
  void clear_moodyratingbelow();
  static const int kMoodyRatingBelowFieldNumber = 11;
  const ::std::string& moodyratingbelow() const;
  void set_moodyratingbelow(const ::std::string& value);
  void set_moodyratingbelow(const char* value);
  void set_moodyratingbelow(const char* value, size_t size);
  ::std::string* mutable_moodyratingbelow();
  ::std::string* release_moodyratingbelow();
  void set_allocated_moodyratingbelow(::std::string* moodyratingbelow);

  // optional string spRatingAbove = 12;
  bool has_spratingabove() const;
  void clear_spratingabove();
  static const int kSpRatingAboveFieldNumber = 12;
  const ::std::string& spratingabove() const;
  void set_spratingabove(const ::std::string& value);
  void set_spratingabove(const char* value);
  void set_spratingabove(const char* value, size_t size);
  ::std::string* mutable_spratingabove();
  ::std::string* release_spratingabove();
  void set_allocated_spratingabove(::std::string* spratingabove);

  // optional string spRatingBelow = 13;
  bool has_spratingbelow() const;
  void clear_spratingbelow();
  static const int kSpRatingBelowFieldNumber = 13;
  const ::std::string& spratingbelow() const;
  void set_spratingbelow(const ::std::string& value);
  void set_spratingbelow(const char* value);
  void set_spratingbelow(const char* value, size_t size);
  ::std::string* mutable_spratingbelow();
  ::std::string* release_spratingbelow();
  void set_allocated_spratingbelow(::std::string* spratingbelow);

  // optional string maturityDateAbove = 14;
  bool has_maturitydateabove() const;
  void clear_maturitydateabove();
  static const int kMaturityDateAboveFieldNumber = 14;
  const ::std::string& maturitydateabove() const;
  void set_maturitydateabove(const ::std::string& value);
  void set_maturitydateabove(const char* value);
  void set_maturitydateabove(const char* value, size_t size);
  ::std::string* mutable_maturitydateabove();
  ::std::string* release_maturitydateabove();
  void set_allocated_maturitydateabove(::std::string* maturitydateabove);

  // optional string maturityDateBelow = 15;
  bool has_maturitydatebelow() const;
  void clear_maturitydatebelow();
  static const int kMaturityDateBelowFieldNumber = 15;
  const ::std::string& maturitydatebelow() const;
  void set_maturitydatebelow(const ::std::string& value);
  void set_maturitydatebelow(const char* value);
  void set_maturitydatebelow(const char* value, size_t size);
  ::std::string* mutable_maturitydatebelow();
  ::std::string* release_maturitydatebelow();
  void set_allocated_maturitydatebelow(::std::string* maturitydatebelow);

  // optional double couponRateAbove = 16;
  bool has_couponrateabove() const;
  void clear_couponrateabove();
  static const int kCouponRateAboveFieldNumber = 16;
  double couponrateabove() const;
  void set_couponrateabove(double value);

  // optional double couponRateBelow = 17;
  bool has_couponratebelow() const;
  void clear_couponratebelow();
  static const int kCouponRateBelowFieldNumber = 17;
  double couponratebelow() const;
  void set_couponratebelow(double value);

  // optional int32 excludeConvertible = 18;
  bool has_excludeconvertible() const;
  void clear_excludeconvertible();
  static const int kExcludeConvertibleFieldNumber = 18;
  ::google::protobuf::int32 excludeconvertible() const;
  void set_excludeconvertible(::google::protobuf::int32 value);

  // optional int32 averageOptionVolumeAbove = 19;
  bool has_averageoptionvolumeabove() const;
  void clear_averageoptionvolumeabove();
  static const int kAverageOptionVolumeAboveFieldNumber = 19;
  ::google::protobuf::int32 averageoptionvolumeabove() const;
  void set_averageoptionvolumeabove(::google::protobuf::int32 value);

  // optional string scannerSettingPairs = 20;
  bool has_scannersettingpairs() const;
  void clear_scannersettingpairs();
  static const int kScannerSettingPairsFieldNumber = 20;
  const ::std::string& scannersettingpairs() const;
  void set_scannersettingpairs(const ::std::string& value);
  void set_scannersettingpairs(const char* value);
  void set_scannersettingpairs(const char* value, size_t size);
  ::std::string* mutable_scannersettingpairs();
  ::std::string* release_scannersettingpairs();
  void set_allocated_scannersettingpairs(::std::string* scannersettingpairs);

  // optional string stockTypeFilter = 21;
  bool has_stocktypefilter() const;
  void clear_stocktypefilter();
  static const int kStockTypeFilterFieldNumber = 21;
  const ::std::string& stocktypefilter() const;
  void set_stocktypefilter(const ::std::string& value);
  void set_stocktypefilter(const char* value);
  void set_stocktypefilter(const char* value, size_t size);
  ::std::string* mutable_stocktypefilter();
  ::std::string* release_stocktypefilter();
  void set_allocated_stocktypefilter(::std::string* stocktypefilter);

  // @@protoc_insertion_point(class_scope:IB.IBScannerSubscription)
 private:
  inline void set_has_numberofrows();
  inline void clear_has_numberofrows();
  inline void set_has_instrument();
  inline void clear_has_instrument();
  inline void set_has_locationcode();
  inline void clear_has_locationcode();
  inline void set_has_scancode();
  inline void clear_has_scancode();
  inline void set_has_aboveprice();
  inline void clear_has_aboveprice();
  inline void set_has_belowprice();
  inline void clear_has_belowprice();
  inline void set_has_abovevolume();
  inline void clear_has_abovevolume();
  inline void set_has_marketcapabove();
  inline void clear_has_marketcapabove();
  inline void set_has_marketcapbelow();
  inline void clear_has_marketcapbelow();
  inline void set_has_moodyratingabove();
  inline void clear_has_moodyratingabove();
  inline void set_has_moodyratingbelow();
  inline void clear_has_moodyratingbelow();
  inline void set_has_spratingabove();
  inline void clear_has_spratingabove();
  inline void set_has_spratingbelow();
  inline void clear_has_spratingbelow();
  inline void set_has_maturitydateabove();
  inline void clear_has_maturitydateabove();
  inline void set_has_maturitydatebelow();
  inline void clear_has_maturitydatebelow();
  inline void set_has_couponrateabove();
  inline void clear_has_couponrateabove();
  inline void set_has_couponratebelow();
  inline void clear_has_couponratebelow();
  inline void set_has_excludeconvertible();
  inline void clear_has_excludeconvertible();
  inline void set_has_averageoptionvolumeabove();
  inline void clear_has_averageoptionvolumeabove();
  inline void set_has_scannersettingpairs();
  inline void clear_has_scannersettingpairs();
  inline void set_has_stocktypefilter();
  inline void clear_has_stocktypefilter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr instrument_;
  ::google::protobuf::internal::ArenaStringPtr locationcode_;
  ::google::protobuf::internal::ArenaStringPtr scancode_;
  ::google::protobuf::int32 numberofrows_;
  ::google::protobuf::int32 abovevolume_;
  double aboveprice_;
  double belowprice_;
  double marketcapabove_;
  double marketcapbelow_;
  ::google::protobuf::internal::ArenaStringPtr moodyratingabove_;
  ::google::protobuf::internal::ArenaStringPtr moodyratingbelow_;
  ::google::protobuf::internal::ArenaStringPtr spratingabove_;
  ::google::protobuf::internal::ArenaStringPtr spratingbelow_;
  ::google::protobuf::internal::ArenaStringPtr maturitydateabove_;
  ::google::protobuf::internal::ArenaStringPtr maturitydatebelow_;
  double couponrateabove_;
  double couponratebelow_;
  ::google::protobuf::int32 excludeconvertible_;
  ::google::protobuf::int32 averageoptionvolumeabove_;
  ::google::protobuf::internal::ArenaStringPtr scannersettingpairs_;
  ::google::protobuf::internal::ArenaStringPtr stocktypefilter_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBScannerSubscription* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBOrderComboLeg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBOrderComboLeg) */ {
 public:
  IBOrderComboLeg();
  virtual ~IBOrderComboLeg();

  IBOrderComboLeg(const IBOrderComboLeg& from);

  inline IBOrderComboLeg& operator=(const IBOrderComboLeg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBOrderComboLeg& default_instance();

  void Swap(IBOrderComboLeg* other);

  // implements Message ----------------------------------------------

  inline IBOrderComboLeg* New() const { return New(NULL); }

  IBOrderComboLeg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBOrderComboLeg& from);
  void MergeFrom(const IBOrderComboLeg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBOrderComboLeg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double price = 1;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  double price() const;
  void set_price(double value);

  // @@protoc_insertion_point(class_scope:IB.IBOrderComboLeg)
 private:
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double price_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBOrderComboLeg* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBOrderConditionData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBOrderConditionData) */ {
 public:
  IBOrderConditionData();
  virtual ~IBOrderConditionData();

  IBOrderConditionData(const IBOrderConditionData& from);

  inline IBOrderConditionData& operator=(const IBOrderConditionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBOrderConditionData& default_instance();

  void Swap(IBOrderConditionData* other);

  // implements Message ----------------------------------------------

  inline IBOrderConditionData* New() const { return New(NULL); }

  IBOrderConditionData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBOrderConditionData& from);
  void MergeFrom(const IBOrderConditionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBOrderConditionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typevalue = 1;
  bool has_typevalue() const;
  void clear_typevalue();
  static const int kTypevalueFieldNumber = 1;
  ::google::protobuf::int32 typevalue() const;
  void set_typevalue(::google::protobuf::int32 value);

  // optional bool isConjunctionConnection = 2;
  bool has_isconjunctionconnection() const;
  void clear_isconjunctionconnection();
  static const int kIsConjunctionConnectionFieldNumber = 2;
  bool isconjunctionconnection() const;
  void set_isconjunctionconnection(bool value);

  // @@protoc_insertion_point(class_scope:IB.IBOrderConditionData)
 private:
  inline void set_has_typevalue();
  inline void clear_has_typevalue();
  inline void set_has_isconjunctionconnection();
  inline void clear_has_isconjunctionconnection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 typevalue_;
  bool isconjunctionconnection_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBOrderConditionData* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBOrder) */ {
 public:
  IBOrder();
  virtual ~IBOrder();

  IBOrder(const IBOrder& from);

  inline IBOrder& operator=(const IBOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBOrder& default_instance();

  void Swap(IBOrder* other);

  // implements Message ----------------------------------------------

  inline IBOrder* New() const { return New(NULL); }

  IBOrder* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBOrder& from);
  void MergeFrom(const IBOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 orderId = 1;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderIdFieldNumber = 1;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // optional int32 clientId = 2;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // optional int32 permId = 3;
  bool has_permid() const;
  void clear_permid();
  static const int kPermIdFieldNumber = 3;
  ::google::protobuf::int32 permid() const;
  void set_permid(::google::protobuf::int32 value);

  // optional string action = 4;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 4;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // optional int32 totalQuantity = 5;
  bool has_totalquantity() const;
  void clear_totalquantity();
  static const int kTotalQuantityFieldNumber = 5;
  ::google::protobuf::int32 totalquantity() const;
  void set_totalquantity(::google::protobuf::int32 value);

  // optional string orderType = 6;
  bool has_ordertype() const;
  void clear_ordertype();
  static const int kOrderTypeFieldNumber = 6;
  const ::std::string& ordertype() const;
  void set_ordertype(const ::std::string& value);
  void set_ordertype(const char* value);
  void set_ordertype(const char* value, size_t size);
  ::std::string* mutable_ordertype();
  ::std::string* release_ordertype();
  void set_allocated_ordertype(::std::string* ordertype);

  // optional double lmtPrice = 7;
  bool has_lmtprice() const;
  void clear_lmtprice();
  static const int kLmtPriceFieldNumber = 7;
  double lmtprice() const;
  void set_lmtprice(double value);

  // optional double auxPrice = 8;
  bool has_auxprice() const;
  void clear_auxprice();
  static const int kAuxPriceFieldNumber = 8;
  double auxprice() const;
  void set_auxprice(double value);

  // optional string tif = 9;
  bool has_tif() const;
  void clear_tif();
  static const int kTifFieldNumber = 9;
  const ::std::string& tif() const;
  void set_tif(const ::std::string& value);
  void set_tif(const char* value);
  void set_tif(const char* value, size_t size);
  ::std::string* mutable_tif();
  ::std::string* release_tif();
  void set_allocated_tif(::std::string* tif);

  // optional string activeStartTime = 10;
  bool has_activestarttime() const;
  void clear_activestarttime();
  static const int kActiveStartTimeFieldNumber = 10;
  const ::std::string& activestarttime() const;
  void set_activestarttime(const ::std::string& value);
  void set_activestarttime(const char* value);
  void set_activestarttime(const char* value, size_t size);
  ::std::string* mutable_activestarttime();
  ::std::string* release_activestarttime();
  void set_allocated_activestarttime(::std::string* activestarttime);

  // optional string activeStopTime = 11;
  bool has_activestoptime() const;
  void clear_activestoptime();
  static const int kActiveStopTimeFieldNumber = 11;
  const ::std::string& activestoptime() const;
  void set_activestoptime(const ::std::string& value);
  void set_activestoptime(const char* value);
  void set_activestoptime(const char* value, size_t size);
  ::std::string* mutable_activestoptime();
  ::std::string* release_activestoptime();
  void set_allocated_activestoptime(::std::string* activestoptime);

  // optional string ocaGroup = 12;
  bool has_ocagroup() const;
  void clear_ocagroup();
  static const int kOcaGroupFieldNumber = 12;
  const ::std::string& ocagroup() const;
  void set_ocagroup(const ::std::string& value);
  void set_ocagroup(const char* value);
  void set_ocagroup(const char* value, size_t size);
  ::std::string* mutable_ocagroup();
  ::std::string* release_ocagroup();
  void set_allocated_ocagroup(::std::string* ocagroup);

  // optional int32 ocaType = 13;
  bool has_ocatype() const;
  void clear_ocatype();
  static const int kOcaTypeFieldNumber = 13;
  ::google::protobuf::int32 ocatype() const;
  void set_ocatype(::google::protobuf::int32 value);

  // optional string orderRef = 14;
  bool has_orderref() const;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 14;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // optional bool transmit = 15;
  bool has_transmit() const;
  void clear_transmit();
  static const int kTransmitFieldNumber = 15;
  bool transmit() const;
  void set_transmit(bool value);

  // optional int32 parentId = 16;
  bool has_parentid() const;
  void clear_parentid();
  static const int kParentIdFieldNumber = 16;
  ::google::protobuf::int32 parentid() const;
  void set_parentid(::google::protobuf::int32 value);

  // optional bool blockOrder = 17;
  bool has_blockorder() const;
  void clear_blockorder();
  static const int kBlockOrderFieldNumber = 17;
  bool blockorder() const;
  void set_blockorder(bool value);

  // optional bool sweepToFill = 18;
  bool has_sweeptofill() const;
  void clear_sweeptofill();
  static const int kSweepToFillFieldNumber = 18;
  bool sweeptofill() const;
  void set_sweeptofill(bool value);

  // optional int32 displaySize = 19;
  bool has_displaysize() const;
  void clear_displaysize();
  static const int kDisplaySizeFieldNumber = 19;
  ::google::protobuf::int32 displaysize() const;
  void set_displaysize(::google::protobuf::int32 value);

  // optional int32 triggerMethod = 20;
  bool has_triggermethod() const;
  void clear_triggermethod();
  static const int kTriggerMethodFieldNumber = 20;
  ::google::protobuf::int32 triggermethod() const;
  void set_triggermethod(::google::protobuf::int32 value);

  // optional bool outsideRth = 21;
  bool has_outsiderth() const;
  void clear_outsiderth();
  static const int kOutsideRthFieldNumber = 21;
  bool outsiderth() const;
  void set_outsiderth(bool value);

  // optional bool hidden = 22;
  bool has_hidden() const;
  void clear_hidden();
  static const int kHiddenFieldNumber = 22;
  bool hidden() const;
  void set_hidden(bool value);

  // optional string goodAfterTime = 23;
  bool has_goodaftertime() const;
  void clear_goodaftertime();
  static const int kGoodAfterTimeFieldNumber = 23;
  const ::std::string& goodaftertime() const;
  void set_goodaftertime(const ::std::string& value);
  void set_goodaftertime(const char* value);
  void set_goodaftertime(const char* value, size_t size);
  ::std::string* mutable_goodaftertime();
  ::std::string* release_goodaftertime();
  void set_allocated_goodaftertime(::std::string* goodaftertime);

  // optional string goodTillDate = 24;
  bool has_goodtilldate() const;
  void clear_goodtilldate();
  static const int kGoodTillDateFieldNumber = 24;
  const ::std::string& goodtilldate() const;
  void set_goodtilldate(const ::std::string& value);
  void set_goodtilldate(const char* value);
  void set_goodtilldate(const char* value, size_t size);
  ::std::string* mutable_goodtilldate();
  ::std::string* release_goodtilldate();
  void set_allocated_goodtilldate(::std::string* goodtilldate);

  // optional string rule80A = 25;
  bool has_rule80a() const;
  void clear_rule80a();
  static const int kRule80AFieldNumber = 25;
  const ::std::string& rule80a() const;
  void set_rule80a(const ::std::string& value);
  void set_rule80a(const char* value);
  void set_rule80a(const char* value, size_t size);
  ::std::string* mutable_rule80a();
  ::std::string* release_rule80a();
  void set_allocated_rule80a(::std::string* rule80a);

  // optional bool allOrNone = 26;
  bool has_allornone() const;
  void clear_allornone();
  static const int kAllOrNoneFieldNumber = 26;
  bool allornone() const;
  void set_allornone(bool value);

  // optional int32 minQty = 27;
  bool has_minqty() const;
  void clear_minqty();
  static const int kMinQtyFieldNumber = 27;
  ::google::protobuf::int32 minqty() const;
  void set_minqty(::google::protobuf::int32 value);

  // optional double percentOffset = 28;
  bool has_percentoffset() const;
  void clear_percentoffset();
  static const int kPercentOffsetFieldNumber = 28;
  double percentoffset() const;
  void set_percentoffset(double value);

  // optional bool overridePercentageConstraints = 29;
  bool has_overridepercentageconstraints() const;
  void clear_overridepercentageconstraints();
  static const int kOverridePercentageConstraintsFieldNumber = 29;
  bool overridepercentageconstraints() const;
  void set_overridepercentageconstraints(bool value);

  // optional double trailStopPrice = 30;
  bool has_trailstopprice() const;
  void clear_trailstopprice();
  static const int kTrailStopPriceFieldNumber = 30;
  double trailstopprice() const;
  void set_trailstopprice(double value);

  // optional double trailingPercent = 31;
  bool has_trailingpercent() const;
  void clear_trailingpercent();
  static const int kTrailingPercentFieldNumber = 31;
  double trailingpercent() const;
  void set_trailingpercent(double value);

  // optional string faGroup = 32;
  bool has_fagroup() const;
  void clear_fagroup();
  static const int kFaGroupFieldNumber = 32;
  const ::std::string& fagroup() const;
  void set_fagroup(const ::std::string& value);
  void set_fagroup(const char* value);
  void set_fagroup(const char* value, size_t size);
  ::std::string* mutable_fagroup();
  ::std::string* release_fagroup();
  void set_allocated_fagroup(::std::string* fagroup);

  // optional string faProfile = 33;
  bool has_faprofile() const;
  void clear_faprofile();
  static const int kFaProfileFieldNumber = 33;
  const ::std::string& faprofile() const;
  void set_faprofile(const ::std::string& value);
  void set_faprofile(const char* value);
  void set_faprofile(const char* value, size_t size);
  ::std::string* mutable_faprofile();
  ::std::string* release_faprofile();
  void set_allocated_faprofile(::std::string* faprofile);

  // optional string faMethod = 34;
  bool has_famethod() const;
  void clear_famethod();
  static const int kFaMethodFieldNumber = 34;
  const ::std::string& famethod() const;
  void set_famethod(const ::std::string& value);
  void set_famethod(const char* value);
  void set_famethod(const char* value, size_t size);
  ::std::string* mutable_famethod();
  ::std::string* release_famethod();
  void set_allocated_famethod(::std::string* famethod);

  // optional string faPercentage = 35;
  bool has_fapercentage() const;
  void clear_fapercentage();
  static const int kFaPercentageFieldNumber = 35;
  const ::std::string& fapercentage() const;
  void set_fapercentage(const ::std::string& value);
  void set_fapercentage(const char* value);
  void set_fapercentage(const char* value, size_t size);
  ::std::string* mutable_fapercentage();
  ::std::string* release_fapercentage();
  void set_allocated_fapercentage(::std::string* fapercentage);

  // optional string openClose = 36;
  bool has_openclose() const;
  void clear_openclose();
  static const int kOpenCloseFieldNumber = 36;
  const ::std::string& openclose() const;
  void set_openclose(const ::std::string& value);
  void set_openclose(const char* value);
  void set_openclose(const char* value, size_t size);
  ::std::string* mutable_openclose();
  ::std::string* release_openclose();
  void set_allocated_openclose(::std::string* openclose);

  // optional int32 origin = 37;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 37;
  ::google::protobuf::int32 origin() const;
  void set_origin(::google::protobuf::int32 value);

  // optional int32 shortSaleSlot = 38;
  bool has_shortsaleslot() const;
  void clear_shortsaleslot();
  static const int kShortSaleSlotFieldNumber = 38;
  ::google::protobuf::int32 shortsaleslot() const;
  void set_shortsaleslot(::google::protobuf::int32 value);

  // optional string designatedLocation = 39;
  bool has_designatedlocation() const;
  void clear_designatedlocation();
  static const int kDesignatedLocationFieldNumber = 39;
  const ::std::string& designatedlocation() const;
  void set_designatedlocation(const ::std::string& value);
  void set_designatedlocation(const char* value);
  void set_designatedlocation(const char* value, size_t size);
  ::std::string* mutable_designatedlocation();
  ::std::string* release_designatedlocation();
  void set_allocated_designatedlocation(::std::string* designatedlocation);

  // optional int32 exemptCode = 40;
  bool has_exemptcode() const;
  void clear_exemptcode();
  static const int kExemptCodeFieldNumber = 40;
  ::google::protobuf::int32 exemptcode() const;
  void set_exemptcode(::google::protobuf::int32 value);

  // optional double discretionaryAmt = 41;
  bool has_discretionaryamt() const;
  void clear_discretionaryamt();
  static const int kDiscretionaryAmtFieldNumber = 41;
  double discretionaryamt() const;
  void set_discretionaryamt(double value);

  // optional bool eTradeOnly = 42;
  bool has_etradeonly() const;
  void clear_etradeonly();
  static const int kETradeOnlyFieldNumber = 42;
  bool etradeonly() const;
  void set_etradeonly(bool value);

  // optional bool firmQuoteOnly = 43;
  bool has_firmquoteonly() const;
  void clear_firmquoteonly();
  static const int kFirmQuoteOnlyFieldNumber = 43;
  bool firmquoteonly() const;
  void set_firmquoteonly(bool value);

  // optional double nbboPriceCap = 44;
  bool has_nbbopricecap() const;
  void clear_nbbopricecap();
  static const int kNbboPriceCapFieldNumber = 44;
  double nbbopricecap() const;
  void set_nbbopricecap(double value);

  // optional bool optOutSmartRouting = 45;
  bool has_optoutsmartrouting() const;
  void clear_optoutsmartrouting();
  static const int kOptOutSmartRoutingFieldNumber = 45;
  bool optoutsmartrouting() const;
  void set_optoutsmartrouting(bool value);

  // optional int32 auctionStrategy = 46;
  bool has_auctionstrategy() const;
  void clear_auctionstrategy();
  static const int kAuctionStrategyFieldNumber = 46;
  ::google::protobuf::int32 auctionstrategy() const;
  void set_auctionstrategy(::google::protobuf::int32 value);

  // optional double startingPrice = 47;
  bool has_startingprice() const;
  void clear_startingprice();
  static const int kStartingPriceFieldNumber = 47;
  double startingprice() const;
  void set_startingprice(double value);

  // optional double stockRefPrice = 48;
  bool has_stockrefprice() const;
  void clear_stockrefprice();
  static const int kStockRefPriceFieldNumber = 48;
  double stockrefprice() const;
  void set_stockrefprice(double value);

  // optional double delta = 49;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 49;
  double delta() const;
  void set_delta(double value);

  // optional double stockRangeLower = 50;
  bool has_stockrangelower() const;
  void clear_stockrangelower();
  static const int kStockRangeLowerFieldNumber = 50;
  double stockrangelower() const;
  void set_stockrangelower(double value);

  // optional double stockRangeUpper = 51;
  bool has_stockrangeupper() const;
  void clear_stockrangeupper();
  static const int kStockRangeUpperFieldNumber = 51;
  double stockrangeupper() const;
  void set_stockrangeupper(double value);

  // optional bool randomizeSize = 52;
  bool has_randomizesize() const;
  void clear_randomizesize();
  static const int kRandomizeSizeFieldNumber = 52;
  bool randomizesize() const;
  void set_randomizesize(bool value);

  // optional bool randomizePrice = 53;
  bool has_randomizeprice() const;
  void clear_randomizeprice();
  static const int kRandomizePriceFieldNumber = 53;
  bool randomizeprice() const;
  void set_randomizeprice(bool value);

  // optional double volatility = 54;
  bool has_volatility() const;
  void clear_volatility();
  static const int kVolatilityFieldNumber = 54;
  double volatility() const;
  void set_volatility(double value);

  // optional int32 volatilityType = 55;
  bool has_volatilitytype() const;
  void clear_volatilitytype();
  static const int kVolatilityTypeFieldNumber = 55;
  ::google::protobuf::int32 volatilitytype() const;
  void set_volatilitytype(::google::protobuf::int32 value);

  // optional string deltaNeutralOrderType = 56;
  bool has_deltaneutralordertype() const;
  void clear_deltaneutralordertype();
  static const int kDeltaNeutralOrderTypeFieldNumber = 56;
  const ::std::string& deltaneutralordertype() const;
  void set_deltaneutralordertype(const ::std::string& value);
  void set_deltaneutralordertype(const char* value);
  void set_deltaneutralordertype(const char* value, size_t size);
  ::std::string* mutable_deltaneutralordertype();
  ::std::string* release_deltaneutralordertype();
  void set_allocated_deltaneutralordertype(::std::string* deltaneutralordertype);

  // optional double deltaNeutralAuxPrice = 57;
  bool has_deltaneutralauxprice() const;
  void clear_deltaneutralauxprice();
  static const int kDeltaNeutralAuxPriceFieldNumber = 57;
  double deltaneutralauxprice() const;
  void set_deltaneutralauxprice(double value);

  // optional int32 deltaNeutralConId = 58;
  bool has_deltaneutralconid() const;
  void clear_deltaneutralconid();
  static const int kDeltaNeutralConIdFieldNumber = 58;
  ::google::protobuf::int32 deltaneutralconid() const;
  void set_deltaneutralconid(::google::protobuf::int32 value);

  // optional string deltaNeutralSettlingFirm = 59;
  bool has_deltaneutralsettlingfirm() const;
  void clear_deltaneutralsettlingfirm();
  static const int kDeltaNeutralSettlingFirmFieldNumber = 59;
  const ::std::string& deltaneutralsettlingfirm() const;
  void set_deltaneutralsettlingfirm(const ::std::string& value);
  void set_deltaneutralsettlingfirm(const char* value);
  void set_deltaneutralsettlingfirm(const char* value, size_t size);
  ::std::string* mutable_deltaneutralsettlingfirm();
  ::std::string* release_deltaneutralsettlingfirm();
  void set_allocated_deltaneutralsettlingfirm(::std::string* deltaneutralsettlingfirm);

  // optional string deltaNeutralClearingAccount = 60;
  bool has_deltaneutralclearingaccount() const;
  void clear_deltaneutralclearingaccount();
  static const int kDeltaNeutralClearingAccountFieldNumber = 60;
  const ::std::string& deltaneutralclearingaccount() const;
  void set_deltaneutralclearingaccount(const ::std::string& value);
  void set_deltaneutralclearingaccount(const char* value);
  void set_deltaneutralclearingaccount(const char* value, size_t size);
  ::std::string* mutable_deltaneutralclearingaccount();
  ::std::string* release_deltaneutralclearingaccount();
  void set_allocated_deltaneutralclearingaccount(::std::string* deltaneutralclearingaccount);

  // optional string deltaNeutralClearingIntent = 61;
  bool has_deltaneutralclearingintent() const;
  void clear_deltaneutralclearingintent();
  static const int kDeltaNeutralClearingIntentFieldNumber = 61;
  const ::std::string& deltaneutralclearingintent() const;
  void set_deltaneutralclearingintent(const ::std::string& value);
  void set_deltaneutralclearingintent(const char* value);
  void set_deltaneutralclearingintent(const char* value, size_t size);
  ::std::string* mutable_deltaneutralclearingintent();
  ::std::string* release_deltaneutralclearingintent();
  void set_allocated_deltaneutralclearingintent(::std::string* deltaneutralclearingintent);

  // optional string deltaNeutralOpenClose = 62;
  bool has_deltaneutralopenclose() const;
  void clear_deltaneutralopenclose();
  static const int kDeltaNeutralOpenCloseFieldNumber = 62;
  const ::std::string& deltaneutralopenclose() const;
  void set_deltaneutralopenclose(const ::std::string& value);
  void set_deltaneutralopenclose(const char* value);
  void set_deltaneutralopenclose(const char* value, size_t size);
  ::std::string* mutable_deltaneutralopenclose();
  ::std::string* release_deltaneutralopenclose();
  void set_allocated_deltaneutralopenclose(::std::string* deltaneutralopenclose);

  // optional bool deltaNeutralShortSale = 63;
  bool has_deltaneutralshortsale() const;
  void clear_deltaneutralshortsale();
  static const int kDeltaNeutralShortSaleFieldNumber = 63;
  bool deltaneutralshortsale() const;
  void set_deltaneutralshortsale(bool value);

  // optional int32 deltaNeutralShortSaleSlot = 64;
  bool has_deltaneutralshortsaleslot() const;
  void clear_deltaneutralshortsaleslot();
  static const int kDeltaNeutralShortSaleSlotFieldNumber = 64;
  ::google::protobuf::int32 deltaneutralshortsaleslot() const;
  void set_deltaneutralshortsaleslot(::google::protobuf::int32 value);

  // optional string deltaNeutralDesignatedLocation = 65;
  bool has_deltaneutraldesignatedlocation() const;
  void clear_deltaneutraldesignatedlocation();
  static const int kDeltaNeutralDesignatedLocationFieldNumber = 65;
  const ::std::string& deltaneutraldesignatedlocation() const;
  void set_deltaneutraldesignatedlocation(const ::std::string& value);
  void set_deltaneutraldesignatedlocation(const char* value);
  void set_deltaneutraldesignatedlocation(const char* value, size_t size);
  ::std::string* mutable_deltaneutraldesignatedlocation();
  ::std::string* release_deltaneutraldesignatedlocation();
  void set_allocated_deltaneutraldesignatedlocation(::std::string* deltaneutraldesignatedlocation);

  // optional bool continuousUpdate = 66;
  bool has_continuousupdate() const;
  void clear_continuousupdate();
  static const int kContinuousUpdateFieldNumber = 66;
  bool continuousupdate() const;
  void set_continuousupdate(bool value);

  // optional int32 referencePriceType = 67;
  bool has_referencepricetype() const;
  void clear_referencepricetype();
  static const int kReferencePriceTypeFieldNumber = 67;
  ::google::protobuf::int32 referencepricetype() const;
  void set_referencepricetype(::google::protobuf::int32 value);

  // optional double basisPoints = 68;
  bool has_basispoints() const;
  void clear_basispoints();
  static const int kBasisPointsFieldNumber = 68;
  double basispoints() const;
  void set_basispoints(double value);

  // optional int32 basisPointsType = 69;
  bool has_basispointstype() const;
  void clear_basispointstype();
  static const int kBasisPointsTypeFieldNumber = 69;
  ::google::protobuf::int32 basispointstype() const;
  void set_basispointstype(::google::protobuf::int32 value);

  // optional int32 scaleInitLevelSize = 70;
  bool has_scaleinitlevelsize() const;
  void clear_scaleinitlevelsize();
  static const int kScaleInitLevelSizeFieldNumber = 70;
  ::google::protobuf::int32 scaleinitlevelsize() const;
  void set_scaleinitlevelsize(::google::protobuf::int32 value);

  // optional int32 scaleSubsLevelSize = 71;
  bool has_scalesubslevelsize() const;
  void clear_scalesubslevelsize();
  static const int kScaleSubsLevelSizeFieldNumber = 71;
  ::google::protobuf::int32 scalesubslevelsize() const;
  void set_scalesubslevelsize(::google::protobuf::int32 value);

  // optional double scalePriceIncrement = 72;
  bool has_scalepriceincrement() const;
  void clear_scalepriceincrement();
  static const int kScalePriceIncrementFieldNumber = 72;
  double scalepriceincrement() const;
  void set_scalepriceincrement(double value);

  // optional double scalePriceAdjustValue = 73;
  bool has_scalepriceadjustvalue() const;
  void clear_scalepriceadjustvalue();
  static const int kScalePriceAdjustValueFieldNumber = 73;
  double scalepriceadjustvalue() const;
  void set_scalepriceadjustvalue(double value);

  // optional int32 scalePriceAdjustInterval = 74;
  bool has_scalepriceadjustinterval() const;
  void clear_scalepriceadjustinterval();
  static const int kScalePriceAdjustIntervalFieldNumber = 74;
  ::google::protobuf::int32 scalepriceadjustinterval() const;
  void set_scalepriceadjustinterval(::google::protobuf::int32 value);

  // optional double scaleProfitOffset = 75;
  bool has_scaleprofitoffset() const;
  void clear_scaleprofitoffset();
  static const int kScaleProfitOffsetFieldNumber = 75;
  double scaleprofitoffset() const;
  void set_scaleprofitoffset(double value);

  // optional bool scaleAutoReset = 76;
  bool has_scaleautoreset() const;
  void clear_scaleautoreset();
  static const int kScaleAutoResetFieldNumber = 76;
  bool scaleautoreset() const;
  void set_scaleautoreset(bool value);

  // optional int32 scaleInitPosition = 77;
  bool has_scaleinitposition() const;
  void clear_scaleinitposition();
  static const int kScaleInitPositionFieldNumber = 77;
  ::google::protobuf::int32 scaleinitposition() const;
  void set_scaleinitposition(::google::protobuf::int32 value);

  // optional int32 scaleInitFillQty = 78;
  bool has_scaleinitfillqty() const;
  void clear_scaleinitfillqty();
  static const int kScaleInitFillQtyFieldNumber = 78;
  ::google::protobuf::int32 scaleinitfillqty() const;
  void set_scaleinitfillqty(::google::protobuf::int32 value);

  // optional bool scaleRandomPercent = 79;
  bool has_scalerandompercent() const;
  void clear_scalerandompercent();
  static const int kScaleRandomPercentFieldNumber = 79;
  bool scalerandompercent() const;
  void set_scalerandompercent(bool value);

  // optional string scaleTable = 80;
  bool has_scaletable() const;
  void clear_scaletable();
  static const int kScaleTableFieldNumber = 80;
  const ::std::string& scaletable() const;
  void set_scaletable(const ::std::string& value);
  void set_scaletable(const char* value);
  void set_scaletable(const char* value, size_t size);
  ::std::string* mutable_scaletable();
  ::std::string* release_scaletable();
  void set_allocated_scaletable(::std::string* scaletable);

  // optional string hedgeType = 81;
  bool has_hedgetype() const;
  void clear_hedgetype();
  static const int kHedgeTypeFieldNumber = 81;
  const ::std::string& hedgetype() const;
  void set_hedgetype(const ::std::string& value);
  void set_hedgetype(const char* value);
  void set_hedgetype(const char* value, size_t size);
  ::std::string* mutable_hedgetype();
  ::std::string* release_hedgetype();
  void set_allocated_hedgetype(::std::string* hedgetype);

  // optional string hedgeParam = 82;
  bool has_hedgeparam() const;
  void clear_hedgeparam();
  static const int kHedgeParamFieldNumber = 82;
  const ::std::string& hedgeparam() const;
  void set_hedgeparam(const ::std::string& value);
  void set_hedgeparam(const char* value);
  void set_hedgeparam(const char* value, size_t size);
  ::std::string* mutable_hedgeparam();
  ::std::string* release_hedgeparam();
  void set_allocated_hedgeparam(::std::string* hedgeparam);

  // optional string account = 83;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 83;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string settlingFirm = 84;
  bool has_settlingfirm() const;
  void clear_settlingfirm();
  static const int kSettlingFirmFieldNumber = 84;
  const ::std::string& settlingfirm() const;
  void set_settlingfirm(const ::std::string& value);
  void set_settlingfirm(const char* value);
  void set_settlingfirm(const char* value, size_t size);
  ::std::string* mutable_settlingfirm();
  ::std::string* release_settlingfirm();
  void set_allocated_settlingfirm(::std::string* settlingfirm);

  // optional string clearingAccount = 85;
  bool has_clearingaccount() const;
  void clear_clearingaccount();
  static const int kClearingAccountFieldNumber = 85;
  const ::std::string& clearingaccount() const;
  void set_clearingaccount(const ::std::string& value);
  void set_clearingaccount(const char* value);
  void set_clearingaccount(const char* value, size_t size);
  ::std::string* mutable_clearingaccount();
  ::std::string* release_clearingaccount();
  void set_allocated_clearingaccount(::std::string* clearingaccount);

  // optional string clearingIntent = 86;
  bool has_clearingintent() const;
  void clear_clearingintent();
  static const int kClearingIntentFieldNumber = 86;
  const ::std::string& clearingintent() const;
  void set_clearingintent(const ::std::string& value);
  void set_clearingintent(const char* value);
  void set_clearingintent(const char* value, size_t size);
  ::std::string* mutable_clearingintent();
  ::std::string* release_clearingintent();
  void set_allocated_clearingintent(::std::string* clearingintent);

  // optional string algoStrategy = 87;
  bool has_algostrategy() const;
  void clear_algostrategy();
  static const int kAlgoStrategyFieldNumber = 87;
  const ::std::string& algostrategy() const;
  void set_algostrategy(const ::std::string& value);
  void set_algostrategy(const char* value);
  void set_algostrategy(const char* value, size_t size);
  ::std::string* mutable_algostrategy();
  ::std::string* release_algostrategy();
  void set_allocated_algostrategy(::std::string* algostrategy);

  // repeated .IB.IBTagValue algoParams = 88;
  int algoparams_size() const;
  void clear_algoparams();
  static const int kAlgoParamsFieldNumber = 88;
  const ::IB::IBTagValue& algoparams(int index) const;
  ::IB::IBTagValue* mutable_algoparams(int index);
  ::IB::IBTagValue* add_algoparams();
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
      mutable_algoparams();
  const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
      algoparams() const;

  // repeated .IB.IBTagValue smartComboRoutingParams = 89;
  int smartcomboroutingparams_size() const;
  void clear_smartcomboroutingparams();
  static const int kSmartComboRoutingParamsFieldNumber = 89;
  const ::IB::IBTagValue& smartcomboroutingparams(int index) const;
  ::IB::IBTagValue* mutable_smartcomboroutingparams(int index);
  ::IB::IBTagValue* add_smartcomboroutingparams();
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
      mutable_smartcomboroutingparams();
  const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
      smartcomboroutingparams() const;

  // optional string algoId = 90;
  bool has_algoid() const;
  void clear_algoid();
  static const int kAlgoIdFieldNumber = 90;
  const ::std::string& algoid() const;
  void set_algoid(const ::std::string& value);
  void set_algoid(const char* value);
  void set_algoid(const char* value, size_t size);
  ::std::string* mutable_algoid();
  ::std::string* release_algoid();
  void set_allocated_algoid(::std::string* algoid);

  // optional bool whatIf = 91;
  bool has_whatif() const;
  void clear_whatif();
  static const int kWhatIfFieldNumber = 91;
  bool whatif() const;
  void set_whatif(bool value);

  // optional bool notHeld = 92;
  bool has_notheld() const;
  void clear_notheld();
  static const int kNotHeldFieldNumber = 92;
  bool notheld() const;
  void set_notheld(bool value);

  // optional bool solicited = 93;
  bool has_solicited() const;
  void clear_solicited();
  static const int kSolicitedFieldNumber = 93;
  bool solicited() const;
  void set_solicited(bool value);

  // optional string modelCode = 94;
  bool has_modelcode() const;
  void clear_modelcode();
  static const int kModelCodeFieldNumber = 94;
  const ::std::string& modelcode() const;
  void set_modelcode(const ::std::string& value);
  void set_modelcode(const char* value);
  void set_modelcode(const char* value, size_t size);
  ::std::string* mutable_modelcode();
  ::std::string* release_modelcode();
  void set_allocated_modelcode(::std::string* modelcode);

  // repeated .IB.IBOrderComboLeg orderComboLegs = 95;
  int ordercombolegs_size() const;
  void clear_ordercombolegs();
  static const int kOrderComboLegsFieldNumber = 95;
  const ::IB::IBOrderComboLeg& ordercombolegs(int index) const;
  ::IB::IBOrderComboLeg* mutable_ordercombolegs(int index);
  ::IB::IBOrderComboLeg* add_ordercombolegs();
  ::google::protobuf::RepeatedPtrField< ::IB::IBOrderComboLeg >*
      mutable_ordercombolegs();
  const ::google::protobuf::RepeatedPtrField< ::IB::IBOrderComboLeg >&
      ordercombolegs() const;

  // repeated .IB.IBTagValue orderMiscOptions = 96;
  int ordermiscoptions_size() const;
  void clear_ordermiscoptions();
  static const int kOrderMiscOptionsFieldNumber = 96;
  const ::IB::IBTagValue& ordermiscoptions(int index) const;
  ::IB::IBTagValue* mutable_ordermiscoptions(int index);
  ::IB::IBTagValue* add_ordermiscoptions();
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
      mutable_ordermiscoptions();
  const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
      ordermiscoptions() const;

  // optional int32 referenceContractId = 97;
  bool has_referencecontractid() const;
  void clear_referencecontractid();
  static const int kReferenceContractIdFieldNumber = 97;
  ::google::protobuf::int32 referencecontractid() const;
  void set_referencecontractid(::google::protobuf::int32 value);

  // optional double peggedChangeAmount = 98;
  bool has_peggedchangeamount() const;
  void clear_peggedchangeamount();
  static const int kPeggedChangeAmountFieldNumber = 98;
  double peggedchangeamount() const;
  void set_peggedchangeamount(double value);

  // optional bool isPeggedChangeAmountDecrease = 99;
  bool has_ispeggedchangeamountdecrease() const;
  void clear_ispeggedchangeamountdecrease();
  static const int kIsPeggedChangeAmountDecreaseFieldNumber = 99;
  bool ispeggedchangeamountdecrease() const;
  void set_ispeggedchangeamountdecrease(bool value);

  // optional double referenceChangeAmount = 100;
  bool has_referencechangeamount() const;
  void clear_referencechangeamount();
  static const int kReferenceChangeAmountFieldNumber = 100;
  double referencechangeamount() const;
  void set_referencechangeamount(double value);

  // optional string referenceExchangeId = 101;
  bool has_referenceexchangeid() const;
  void clear_referenceexchangeid();
  static const int kReferenceExchangeIdFieldNumber = 101;
  const ::std::string& referenceexchangeid() const;
  void set_referenceexchangeid(const ::std::string& value);
  void set_referenceexchangeid(const char* value);
  void set_referenceexchangeid(const char* value, size_t size);
  ::std::string* mutable_referenceexchangeid();
  ::std::string* release_referenceexchangeid();
  void set_allocated_referenceexchangeid(::std::string* referenceexchangeid);

  // optional string adjustedOrderType = 102;
  bool has_adjustedordertype() const;
  void clear_adjustedordertype();
  static const int kAdjustedOrderTypeFieldNumber = 102;
  const ::std::string& adjustedordertype() const;
  void set_adjustedordertype(const ::std::string& value);
  void set_adjustedordertype(const char* value);
  void set_adjustedordertype(const char* value, size_t size);
  ::std::string* mutable_adjustedordertype();
  ::std::string* release_adjustedordertype();
  void set_allocated_adjustedordertype(::std::string* adjustedordertype);

  // optional double triggerPrice = 103;
  bool has_triggerprice() const;
  void clear_triggerprice();
  static const int kTriggerPriceFieldNumber = 103;
  double triggerprice() const;
  void set_triggerprice(double value);

  // optional double adjustedStopPrice = 104;
  bool has_adjustedstopprice() const;
  void clear_adjustedstopprice();
  static const int kAdjustedStopPriceFieldNumber = 104;
  double adjustedstopprice() const;
  void set_adjustedstopprice(double value);

  // optional double adjustedStopLimitPrice = 105;
  bool has_adjustedstoplimitprice() const;
  void clear_adjustedstoplimitprice();
  static const int kAdjustedStopLimitPriceFieldNumber = 105;
  double adjustedstoplimitprice() const;
  void set_adjustedstoplimitprice(double value);

  // optional double adjustedTrailingAmount = 106;
  bool has_adjustedtrailingamount() const;
  void clear_adjustedtrailingamount();
  static const int kAdjustedTrailingAmountFieldNumber = 106;
  double adjustedtrailingamount() const;
  void set_adjustedtrailingamount(double value);

  // optional int32 adjustableTrailingUnit = 107;
  bool has_adjustabletrailingunit() const;
  void clear_adjustabletrailingunit();
  static const int kAdjustableTrailingUnitFieldNumber = 107;
  ::google::protobuf::int32 adjustabletrailingunit() const;
  void set_adjustabletrailingunit(::google::protobuf::int32 value);

  // optional double lmtPriceOffset = 108;
  bool has_lmtpriceoffset() const;
  void clear_lmtpriceoffset();
  static const int kLmtPriceOffsetFieldNumber = 108;
  double lmtpriceoffset() const;
  void set_lmtpriceoffset(double value);

  // repeated .IB.IBOrderConditionData conditions = 109;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 109;
  const ::IB::IBOrderConditionData& conditions(int index) const;
  ::IB::IBOrderConditionData* mutable_conditions(int index);
  ::IB::IBOrderConditionData* add_conditions();
  ::google::protobuf::RepeatedPtrField< ::IB::IBOrderConditionData >*
      mutable_conditions();
  const ::google::protobuf::RepeatedPtrField< ::IB::IBOrderConditionData >&
      conditions() const;

  // optional bool conditionsCancelOrder = 110;
  bool has_conditionscancelorder() const;
  void clear_conditionscancelorder();
  static const int kConditionsCancelOrderFieldNumber = 110;
  bool conditionscancelorder() const;
  void set_conditionscancelorder(bool value);

  // optional bool conditionsIgnoreRth = 111;
  bool has_conditionsignorerth() const;
  void clear_conditionsignorerth();
  static const int kConditionsIgnoreRthFieldNumber = 111;
  bool conditionsignorerth() const;
  void set_conditionsignorerth(bool value);

  // optional string extOperator = 112;
  bool has_extoperator() const;
  void clear_extoperator();
  static const int kExtOperatorFieldNumber = 112;
  const ::std::string& extoperator() const;
  void set_extoperator(const ::std::string& value);
  void set_extoperator(const char* value);
  void set_extoperator(const char* value, size_t size);
  ::std::string* mutable_extoperator();
  ::std::string* release_extoperator();
  void set_allocated_extoperator(::std::string* extoperator);

  // optional .IB.IBSoftDollarTier softDollarTier = 113;
  bool has_softdollartier() const;
  void clear_softdollartier();
  static const int kSoftDollarTierFieldNumber = 113;
  const ::IB::IBSoftDollarTier& softdollartier() const;
  ::IB::IBSoftDollarTier* mutable_softdollartier();
  ::IB::IBSoftDollarTier* release_softdollartier();
  void set_allocated_softdollartier(::IB::IBSoftDollarTier* softdollartier);

  // @@protoc_insertion_point(class_scope:IB.IBOrder)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_permid();
  inline void clear_has_permid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_totalquantity();
  inline void clear_has_totalquantity();
  inline void set_has_ordertype();
  inline void clear_has_ordertype();
  inline void set_has_lmtprice();
  inline void clear_has_lmtprice();
  inline void set_has_auxprice();
  inline void clear_has_auxprice();
  inline void set_has_tif();
  inline void clear_has_tif();
  inline void set_has_activestarttime();
  inline void clear_has_activestarttime();
  inline void set_has_activestoptime();
  inline void clear_has_activestoptime();
  inline void set_has_ocagroup();
  inline void clear_has_ocagroup();
  inline void set_has_ocatype();
  inline void clear_has_ocatype();
  inline void set_has_orderref();
  inline void clear_has_orderref();
  inline void set_has_transmit();
  inline void clear_has_transmit();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_blockorder();
  inline void clear_has_blockorder();
  inline void set_has_sweeptofill();
  inline void clear_has_sweeptofill();
  inline void set_has_displaysize();
  inline void clear_has_displaysize();
  inline void set_has_triggermethod();
  inline void clear_has_triggermethod();
  inline void set_has_outsiderth();
  inline void clear_has_outsiderth();
  inline void set_has_hidden();
  inline void clear_has_hidden();
  inline void set_has_goodaftertime();
  inline void clear_has_goodaftertime();
  inline void set_has_goodtilldate();
  inline void clear_has_goodtilldate();
  inline void set_has_rule80a();
  inline void clear_has_rule80a();
  inline void set_has_allornone();
  inline void clear_has_allornone();
  inline void set_has_minqty();
  inline void clear_has_minqty();
  inline void set_has_percentoffset();
  inline void clear_has_percentoffset();
  inline void set_has_overridepercentageconstraints();
  inline void clear_has_overridepercentageconstraints();
  inline void set_has_trailstopprice();
  inline void clear_has_trailstopprice();
  inline void set_has_trailingpercent();
  inline void clear_has_trailingpercent();
  inline void set_has_fagroup();
  inline void clear_has_fagroup();
  inline void set_has_faprofile();
  inline void clear_has_faprofile();
  inline void set_has_famethod();
  inline void clear_has_famethod();
  inline void set_has_fapercentage();
  inline void clear_has_fapercentage();
  inline void set_has_openclose();
  inline void clear_has_openclose();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_shortsaleslot();
  inline void clear_has_shortsaleslot();
  inline void set_has_designatedlocation();
  inline void clear_has_designatedlocation();
  inline void set_has_exemptcode();
  inline void clear_has_exemptcode();
  inline void set_has_discretionaryamt();
  inline void clear_has_discretionaryamt();
  inline void set_has_etradeonly();
  inline void clear_has_etradeonly();
  inline void set_has_firmquoteonly();
  inline void clear_has_firmquoteonly();
  inline void set_has_nbbopricecap();
  inline void clear_has_nbbopricecap();
  inline void set_has_optoutsmartrouting();
  inline void clear_has_optoutsmartrouting();
  inline void set_has_auctionstrategy();
  inline void clear_has_auctionstrategy();
  inline void set_has_startingprice();
  inline void clear_has_startingprice();
  inline void set_has_stockrefprice();
  inline void clear_has_stockrefprice();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_stockrangelower();
  inline void clear_has_stockrangelower();
  inline void set_has_stockrangeupper();
  inline void clear_has_stockrangeupper();
  inline void set_has_randomizesize();
  inline void clear_has_randomizesize();
  inline void set_has_randomizeprice();
  inline void clear_has_randomizeprice();
  inline void set_has_volatility();
  inline void clear_has_volatility();
  inline void set_has_volatilitytype();
  inline void clear_has_volatilitytype();
  inline void set_has_deltaneutralordertype();
  inline void clear_has_deltaneutralordertype();
  inline void set_has_deltaneutralauxprice();
  inline void clear_has_deltaneutralauxprice();
  inline void set_has_deltaneutralconid();
  inline void clear_has_deltaneutralconid();
  inline void set_has_deltaneutralsettlingfirm();
  inline void clear_has_deltaneutralsettlingfirm();
  inline void set_has_deltaneutralclearingaccount();
  inline void clear_has_deltaneutralclearingaccount();
  inline void set_has_deltaneutralclearingintent();
  inline void clear_has_deltaneutralclearingintent();
  inline void set_has_deltaneutralopenclose();
  inline void clear_has_deltaneutralopenclose();
  inline void set_has_deltaneutralshortsale();
  inline void clear_has_deltaneutralshortsale();
  inline void set_has_deltaneutralshortsaleslot();
  inline void clear_has_deltaneutralshortsaleslot();
  inline void set_has_deltaneutraldesignatedlocation();
  inline void clear_has_deltaneutraldesignatedlocation();
  inline void set_has_continuousupdate();
  inline void clear_has_continuousupdate();
  inline void set_has_referencepricetype();
  inline void clear_has_referencepricetype();
  inline void set_has_basispoints();
  inline void clear_has_basispoints();
  inline void set_has_basispointstype();
  inline void clear_has_basispointstype();
  inline void set_has_scaleinitlevelsize();
  inline void clear_has_scaleinitlevelsize();
  inline void set_has_scalesubslevelsize();
  inline void clear_has_scalesubslevelsize();
  inline void set_has_scalepriceincrement();
  inline void clear_has_scalepriceincrement();
  inline void set_has_scalepriceadjustvalue();
  inline void clear_has_scalepriceadjustvalue();
  inline void set_has_scalepriceadjustinterval();
  inline void clear_has_scalepriceadjustinterval();
  inline void set_has_scaleprofitoffset();
  inline void clear_has_scaleprofitoffset();
  inline void set_has_scaleautoreset();
  inline void clear_has_scaleautoreset();
  inline void set_has_scaleinitposition();
  inline void clear_has_scaleinitposition();
  inline void set_has_scaleinitfillqty();
  inline void clear_has_scaleinitfillqty();
  inline void set_has_scalerandompercent();
  inline void clear_has_scalerandompercent();
  inline void set_has_scaletable();
  inline void clear_has_scaletable();
  inline void set_has_hedgetype();
  inline void clear_has_hedgetype();
  inline void set_has_hedgeparam();
  inline void clear_has_hedgeparam();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_settlingfirm();
  inline void clear_has_settlingfirm();
  inline void set_has_clearingaccount();
  inline void clear_has_clearingaccount();
  inline void set_has_clearingintent();
  inline void clear_has_clearingintent();
  inline void set_has_algostrategy();
  inline void clear_has_algostrategy();
  inline void set_has_algoid();
  inline void clear_has_algoid();
  inline void set_has_whatif();
  inline void clear_has_whatif();
  inline void set_has_notheld();
  inline void clear_has_notheld();
  inline void set_has_solicited();
  inline void clear_has_solicited();
  inline void set_has_modelcode();
  inline void clear_has_modelcode();
  inline void set_has_referencecontractid();
  inline void clear_has_referencecontractid();
  inline void set_has_peggedchangeamount();
  inline void clear_has_peggedchangeamount();
  inline void set_has_ispeggedchangeamountdecrease();
  inline void clear_has_ispeggedchangeamountdecrease();
  inline void set_has_referencechangeamount();
  inline void clear_has_referencechangeamount();
  inline void set_has_referenceexchangeid();
  inline void clear_has_referenceexchangeid();
  inline void set_has_adjustedordertype();
  inline void clear_has_adjustedordertype();
  inline void set_has_triggerprice();
  inline void clear_has_triggerprice();
  inline void set_has_adjustedstopprice();
  inline void clear_has_adjustedstopprice();
  inline void set_has_adjustedstoplimitprice();
  inline void clear_has_adjustedstoplimitprice();
  inline void set_has_adjustedtrailingamount();
  inline void clear_has_adjustedtrailingamount();
  inline void set_has_adjustabletrailingunit();
  inline void clear_has_adjustabletrailingunit();
  inline void set_has_lmtpriceoffset();
  inline void clear_has_lmtpriceoffset();
  inline void set_has_conditionscancelorder();
  inline void clear_has_conditionscancelorder();
  inline void set_has_conditionsignorerth();
  inline void clear_has_conditionsignorerth();
  inline void set_has_extoperator();
  inline void clear_has_extoperator();
  inline void set_has_softdollartier();
  inline void clear_has_softdollartier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[4];
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 clientid_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::int32 permid_;
  ::google::protobuf::int32 totalquantity_;
  ::google::protobuf::internal::ArenaStringPtr ordertype_;
  double lmtprice_;
  double auxprice_;
  ::google::protobuf::internal::ArenaStringPtr tif_;
  ::google::protobuf::internal::ArenaStringPtr activestarttime_;
  ::google::protobuf::internal::ArenaStringPtr activestoptime_;
  ::google::protobuf::internal::ArenaStringPtr ocagroup_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::int32 ocatype_;
  ::google::protobuf::int32 parentid_;
  bool transmit_;
  bool blockorder_;
  bool sweeptofill_;
  bool outsiderth_;
  ::google::protobuf::int32 displaysize_;
  ::google::protobuf::internal::ArenaStringPtr goodaftertime_;
  ::google::protobuf::int32 triggermethod_;
  ::google::protobuf::int32 minqty_;
  ::google::protobuf::internal::ArenaStringPtr goodtilldate_;
  ::google::protobuf::internal::ArenaStringPtr rule80a_;
  double percentoffset_;
  double trailstopprice_;
  double trailingpercent_;
  bool hidden_;
  bool allornone_;
  bool overridepercentageconstraints_;
  bool etradeonly_;
  ::google::protobuf::int32 origin_;
  ::google::protobuf::internal::ArenaStringPtr fagroup_;
  ::google::protobuf::internal::ArenaStringPtr faprofile_;
  ::google::protobuf::internal::ArenaStringPtr famethod_;
  ::google::protobuf::internal::ArenaStringPtr fapercentage_;
  ::google::protobuf::internal::ArenaStringPtr openclose_;
  ::google::protobuf::internal::ArenaStringPtr designatedlocation_;
  ::google::protobuf::int32 shortsaleslot_;
  ::google::protobuf::int32 exemptcode_;
  double discretionaryamt_;
  double nbbopricecap_;
  double startingprice_;
  ::google::protobuf::int32 auctionstrategy_;
  bool firmquoteonly_;
  bool optoutsmartrouting_;
  bool randomizesize_;
  bool randomizeprice_;
  double stockrefprice_;
  double delta_;
  double stockrangelower_;
  double stockrangeupper_;
  double volatility_;
  ::google::protobuf::internal::ArenaStringPtr deltaneutralordertype_;
  ::google::protobuf::int32 volatilitytype_;
  ::google::protobuf::int32 deltaneutralconid_;
  double deltaneutralauxprice_;
  ::google::protobuf::internal::ArenaStringPtr deltaneutralsettlingfirm_;
  ::google::protobuf::internal::ArenaStringPtr deltaneutralclearingaccount_;
  ::google::protobuf::internal::ArenaStringPtr deltaneutralclearingintent_;
  ::google::protobuf::internal::ArenaStringPtr deltaneutralopenclose_;
  ::google::protobuf::internal::ArenaStringPtr deltaneutraldesignatedlocation_;
  ::google::protobuf::int32 deltaneutralshortsaleslot_;
  ::google::protobuf::int32 referencepricetype_;
  double basispoints_;
  ::google::protobuf::int32 basispointstype_;
  ::google::protobuf::int32 scaleinitlevelsize_;
  ::google::protobuf::int32 scalesubslevelsize_;
  bool deltaneutralshortsale_;
  bool continuousupdate_;
  bool scaleautoreset_;
  bool scalerandompercent_;
  double scalepriceincrement_;
  double scalepriceadjustvalue_;
  double scaleprofitoffset_;
  ::google::protobuf::int32 scalepriceadjustinterval_;
  ::google::protobuf::int32 scaleinitposition_;
  ::google::protobuf::internal::ArenaStringPtr scaletable_;
  ::google::protobuf::internal::ArenaStringPtr hedgetype_;
  ::google::protobuf::internal::ArenaStringPtr hedgeparam_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr settlingfirm_;
  ::google::protobuf::internal::ArenaStringPtr clearingaccount_;
  ::google::protobuf::internal::ArenaStringPtr clearingintent_;
  ::google::protobuf::internal::ArenaStringPtr algostrategy_;
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue > algoparams_;
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue > smartcomboroutingparams_;
  ::google::protobuf::internal::ArenaStringPtr algoid_;
  ::google::protobuf::int32 scaleinitfillqty_;
  bool whatif_;
  bool notheld_;
  bool solicited_;
  bool ispeggedchangeamountdecrease_;
  ::google::protobuf::internal::ArenaStringPtr modelcode_;
  ::google::protobuf::RepeatedPtrField< ::IB::IBOrderComboLeg > ordercombolegs_;
  ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue > ordermiscoptions_;
  double peggedchangeamount_;
  double referencechangeamount_;
  ::google::protobuf::internal::ArenaStringPtr referenceexchangeid_;
  ::google::protobuf::internal::ArenaStringPtr adjustedordertype_;
  ::google::protobuf::int32 referencecontractid_;
  ::google::protobuf::int32 adjustabletrailingunit_;
  double triggerprice_;
  double adjustedstopprice_;
  double adjustedstoplimitprice_;
  double adjustedtrailingamount_;
  double lmtpriceoffset_;
  ::google::protobuf::RepeatedPtrField< ::IB::IBOrderConditionData > conditions_;
  ::google::protobuf::internal::ArenaStringPtr extoperator_;
  ::IB::IBSoftDollarTier* softdollartier_;
  bool conditionscancelorder_;
  bool conditionsignorerth_;
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBOrder* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBPBTagMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBPBTagMsg) */ {
 public:
  IBPBTagMsg();
  virtual ~IBPBTagMsg();

  IBPBTagMsg(const IBPBTagMsg& from);

  inline IBPBTagMsg& operator=(const IBPBTagMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBPBTagMsg& default_instance();

  void Swap(IBPBTagMsg* other);

  // implements Message ----------------------------------------------

  inline IBPBTagMsg* New() const { return New(NULL); }

  IBPBTagMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBPBTagMsg& from);
  void MergeFrom(const IBPBTagMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBPBTagMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tag = 1;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  ::google::protobuf::int32 tag() const;
  void set_tag(::google::protobuf::int32 value);

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:IB.IBPBTagMsg)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 tag_;
  friend void XT_COMMON_API protobuf_AddDesc_IBData_2eproto();
  friend void protobuf_AssignDesc_IBData_2eproto();
  friend void protobuf_ShutdownFile_IBData_2eproto();

  void InitAsDefaultInstance();
  static IBPBTagMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IBTagValue

// optional string tag = 1;
inline bool IBTagValue::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBTagValue::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBTagValue::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBTagValue::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& IBTagValue::tag() const {
  // @@protoc_insertion_point(field_get:IB.IBTagValue.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBTagValue::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBTagValue.tag)
}
inline void IBTagValue::set_tag(const char* value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBTagValue.tag)
}
inline void IBTagValue::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBTagValue.tag)
}
inline ::std::string* IBTagValue::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:IB.IBTagValue.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBTagValue::release_tag() {
  // @@protoc_insertion_point(field_release:IB.IBTagValue.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBTagValue::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:IB.IBTagValue.tag)
}

// optional string value = 2;
inline bool IBTagValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBTagValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBTagValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBTagValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& IBTagValue::value() const {
  // @@protoc_insertion_point(field_get:IB.IBTagValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBTagValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBTagValue.value)
}
inline void IBTagValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBTagValue.value)
}
inline void IBTagValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBTagValue.value)
}
inline ::std::string* IBTagValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:IB.IBTagValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBTagValue::release_value() {
  // @@protoc_insertion_point(field_release:IB.IBTagValue.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBTagValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:IB.IBTagValue.value)
}

// -------------------------------------------------------------------

// IBCodeMsgPair

// optional int32 errorCode = 1;
inline bool IBCodeMsgPair::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBCodeMsgPair::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBCodeMsgPair::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBCodeMsgPair::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 IBCodeMsgPair::errorcode() const {
  // @@protoc_insertion_point(field_get:IB.IBCodeMsgPair.errorCode)
  return errorcode_;
}
inline void IBCodeMsgPair::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:IB.IBCodeMsgPair.errorCode)
}

// optional string errorMsg = 2;
inline bool IBCodeMsgPair::has_errormsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBCodeMsgPair::set_has_errormsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBCodeMsgPair::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBCodeMsgPair::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errormsg();
}
inline const ::std::string& IBCodeMsgPair::errormsg() const {
  // @@protoc_insertion_point(field_get:IB.IBCodeMsgPair.errorMsg)
  return errormsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBCodeMsgPair::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBCodeMsgPair.errorMsg)
}
inline void IBCodeMsgPair::set_errormsg(const char* value) {
  set_has_errormsg();
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBCodeMsgPair.errorMsg)
}
inline void IBCodeMsgPair::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBCodeMsgPair.errorMsg)
}
inline ::std::string* IBCodeMsgPair::mutable_errormsg() {
  set_has_errormsg();
  // @@protoc_insertion_point(field_mutable:IB.IBCodeMsgPair.errorMsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBCodeMsgPair::release_errormsg() {
  // @@protoc_insertion_point(field_release:IB.IBCodeMsgPair.errorMsg)
  clear_has_errormsg();
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBCodeMsgPair::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    set_has_errormsg();
  } else {
    clear_has_errormsg();
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:IB.IBCodeMsgPair.errorMsg)
}

// -------------------------------------------------------------------

// IBBarData

// optional string date = 1;
inline bool IBBarData::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBBarData::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBBarData::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBBarData::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& IBBarData::date() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBBarData::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBBarData.date)
}
inline void IBBarData::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBBarData.date)
}
inline void IBBarData::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBBarData.date)
}
inline ::std::string* IBBarData::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:IB.IBBarData.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBBarData::release_date() {
  // @@protoc_insertion_point(field_release:IB.IBBarData.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBBarData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:IB.IBBarData.date)
}

// optional double open = 2;
inline bool IBBarData::has_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBBarData::set_has_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBBarData::clear_has_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBBarData::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double IBBarData::open() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.open)
  return open_;
}
inline void IBBarData::set_open(double value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:IB.IBBarData.open)
}

// optional double high = 3;
inline bool IBBarData::has_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBBarData::set_has_high() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBBarData::clear_has_high() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBBarData::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double IBBarData::high() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.high)
  return high_;
}
inline void IBBarData::set_high(double value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:IB.IBBarData.high)
}

// optional double low = 4;
inline bool IBBarData::has_low() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBBarData::set_has_low() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBBarData::clear_has_low() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBBarData::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double IBBarData::low() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.low)
  return low_;
}
inline void IBBarData::set_low(double value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:IB.IBBarData.low)
}

// optional double close = 5;
inline bool IBBarData::has_close() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBBarData::set_has_close() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBBarData::clear_has_close() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBBarData::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline double IBBarData::close() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.close)
  return close_;
}
inline void IBBarData::set_close(double value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:IB.IBBarData.close)
}

// optional int32 volume = 6;
inline bool IBBarData::has_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBBarData::set_has_volume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBBarData::clear_has_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBBarData::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline ::google::protobuf::int32 IBBarData::volume() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.volume)
  return volume_;
}
inline void IBBarData::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:IB.IBBarData.volume)
}

// optional double average = 7;
inline bool IBBarData::has_average() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBBarData::set_has_average() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBBarData::clear_has_average() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBBarData::clear_average() {
  average_ = 0;
  clear_has_average();
}
inline double IBBarData::average() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.average)
  return average_;
}
inline void IBBarData::set_average(double value) {
  set_has_average();
  average_ = value;
  // @@protoc_insertion_point(field_set:IB.IBBarData.average)
}

// optional string hasGaps = 8;
inline bool IBBarData::has_hasgaps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBBarData::set_has_hasgaps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBBarData::clear_has_hasgaps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBBarData::clear_hasgaps() {
  hasgaps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hasgaps();
}
inline const ::std::string& IBBarData::hasgaps() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.hasGaps)
  return hasgaps_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBBarData::set_hasgaps(const ::std::string& value) {
  set_has_hasgaps();
  hasgaps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBBarData.hasGaps)
}
inline void IBBarData::set_hasgaps(const char* value) {
  set_has_hasgaps();
  hasgaps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBBarData.hasGaps)
}
inline void IBBarData::set_hasgaps(const char* value, size_t size) {
  set_has_hasgaps();
  hasgaps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBBarData.hasGaps)
}
inline ::std::string* IBBarData::mutable_hasgaps() {
  set_has_hasgaps();
  // @@protoc_insertion_point(field_mutable:IB.IBBarData.hasGaps)
  return hasgaps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBBarData::release_hasgaps() {
  // @@protoc_insertion_point(field_release:IB.IBBarData.hasGaps)
  clear_has_hasgaps();
  return hasgaps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBBarData::set_allocated_hasgaps(::std::string* hasgaps) {
  if (hasgaps != NULL) {
    set_has_hasgaps();
  } else {
    clear_has_hasgaps();
  }
  hasgaps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hasgaps);
  // @@protoc_insertion_point(field_set_allocated:IB.IBBarData.hasGaps)
}

// optional int32 barCount = 9;
inline bool IBBarData::has_barcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IBBarData::set_has_barcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IBBarData::clear_has_barcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IBBarData::clear_barcount() {
  barcount_ = 0;
  clear_has_barcount();
}
inline ::google::protobuf::int32 IBBarData::barcount() const {
  // @@protoc_insertion_point(field_get:IB.IBBarData.barCount)
  return barcount_;
}
inline void IBBarData::set_barcount(::google::protobuf::int32 value) {
  set_has_barcount();
  barcount_ = value;
  // @@protoc_insertion_point(field_set:IB.IBBarData.barCount)
}

// -------------------------------------------------------------------

// IBComboLeg

// optional int32 conId = 1;
inline bool IBComboLeg::has_conid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBComboLeg::set_has_conid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBComboLeg::clear_has_conid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBComboLeg::clear_conid() {
  conid_ = 0;
  clear_has_conid();
}
inline ::google::protobuf::int32 IBComboLeg::conid() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.conId)
  return conid_;
}
inline void IBComboLeg::set_conid(::google::protobuf::int32 value) {
  set_has_conid();
  conid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.conId)
}

// optional int32 ratio = 2;
inline bool IBComboLeg::has_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBComboLeg::set_has_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBComboLeg::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBComboLeg::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline ::google::protobuf::int32 IBComboLeg::ratio() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.ratio)
  return ratio_;
}
inline void IBComboLeg::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.ratio)
}

// optional string action = 3;
inline bool IBComboLeg::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBComboLeg::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBComboLeg::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBComboLeg::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
inline const ::std::string& IBComboLeg::action() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.action)
  return action_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBComboLeg::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.action)
}
inline void IBComboLeg::set_action(const char* value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBComboLeg.action)
}
inline void IBComboLeg::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBComboLeg.action)
}
inline ::std::string* IBComboLeg::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:IB.IBComboLeg.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBComboLeg::release_action() {
  // @@protoc_insertion_point(field_release:IB.IBComboLeg.action)
  clear_has_action();
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBComboLeg::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:IB.IBComboLeg.action)
}

// optional string exchange = 4;
inline bool IBComboLeg::has_exchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBComboLeg::set_has_exchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBComboLeg::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBComboLeg::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
inline const ::std::string& IBComboLeg::exchange() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBComboLeg::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.exchange)
}
inline void IBComboLeg::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBComboLeg.exchange)
}
inline void IBComboLeg::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBComboLeg.exchange)
}
inline ::std::string* IBComboLeg::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:IB.IBComboLeg.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBComboLeg::release_exchange() {
  // @@protoc_insertion_point(field_release:IB.IBComboLeg.exchange)
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBComboLeg::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:IB.IBComboLeg.exchange)
}

// optional int32 openClose = 5;
inline bool IBComboLeg::has_openclose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBComboLeg::set_has_openclose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBComboLeg::clear_has_openclose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBComboLeg::clear_openclose() {
  openclose_ = 0;
  clear_has_openclose();
}
inline ::google::protobuf::int32 IBComboLeg::openclose() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.openClose)
  return openclose_;
}
inline void IBComboLeg::set_openclose(::google::protobuf::int32 value) {
  set_has_openclose();
  openclose_ = value;
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.openClose)
}

// optional int32 shortSaleSlot = 6;
inline bool IBComboLeg::has_shortsaleslot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBComboLeg::set_has_shortsaleslot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBComboLeg::clear_has_shortsaleslot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBComboLeg::clear_shortsaleslot() {
  shortsaleslot_ = 0;
  clear_has_shortsaleslot();
}
inline ::google::protobuf::int32 IBComboLeg::shortsaleslot() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.shortSaleSlot)
  return shortsaleslot_;
}
inline void IBComboLeg::set_shortsaleslot(::google::protobuf::int32 value) {
  set_has_shortsaleslot();
  shortsaleslot_ = value;
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.shortSaleSlot)
}

// optional string designatedLocation = 7;
inline bool IBComboLeg::has_designatedlocation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBComboLeg::set_has_designatedlocation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBComboLeg::clear_has_designatedlocation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBComboLeg::clear_designatedlocation() {
  designatedlocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_designatedlocation();
}
inline const ::std::string& IBComboLeg::designatedlocation() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.designatedLocation)
  return designatedlocation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBComboLeg::set_designatedlocation(const ::std::string& value) {
  set_has_designatedlocation();
  designatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.designatedLocation)
}
inline void IBComboLeg::set_designatedlocation(const char* value) {
  set_has_designatedlocation();
  designatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBComboLeg.designatedLocation)
}
inline void IBComboLeg::set_designatedlocation(const char* value, size_t size) {
  set_has_designatedlocation();
  designatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBComboLeg.designatedLocation)
}
inline ::std::string* IBComboLeg::mutable_designatedlocation() {
  set_has_designatedlocation();
  // @@protoc_insertion_point(field_mutable:IB.IBComboLeg.designatedLocation)
  return designatedlocation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBComboLeg::release_designatedlocation() {
  // @@protoc_insertion_point(field_release:IB.IBComboLeg.designatedLocation)
  clear_has_designatedlocation();
  return designatedlocation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBComboLeg::set_allocated_designatedlocation(::std::string* designatedlocation) {
  if (designatedlocation != NULL) {
    set_has_designatedlocation();
  } else {
    clear_has_designatedlocation();
  }
  designatedlocation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), designatedlocation);
  // @@protoc_insertion_point(field_set_allocated:IB.IBComboLeg.designatedLocation)
}

// optional int32 exemptCode = 8;
inline bool IBComboLeg::has_exemptcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBComboLeg::set_has_exemptcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBComboLeg::clear_has_exemptcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBComboLeg::clear_exemptcode() {
  exemptcode_ = 0;
  clear_has_exemptcode();
}
inline ::google::protobuf::int32 IBComboLeg::exemptcode() const {
  // @@protoc_insertion_point(field_get:IB.IBComboLeg.exemptCode)
  return exemptcode_;
}
inline void IBComboLeg::set_exemptcode(::google::protobuf::int32 value) {
  set_has_exemptcode();
  exemptcode_ = value;
  // @@protoc_insertion_point(field_set:IB.IBComboLeg.exemptCode)
}

// -------------------------------------------------------------------

// IBSoftDollarTier

// optional string name = 1;
inline bool IBSoftDollarTier::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBSoftDollarTier::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBSoftDollarTier::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBSoftDollarTier::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& IBSoftDollarTier::name() const {
  // @@protoc_insertion_point(field_get:IB.IBSoftDollarTier.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBSoftDollarTier::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBSoftDollarTier.name)
}
inline void IBSoftDollarTier::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBSoftDollarTier.name)
}
inline void IBSoftDollarTier::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBSoftDollarTier.name)
}
inline ::std::string* IBSoftDollarTier::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:IB.IBSoftDollarTier.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBSoftDollarTier::release_name() {
  // @@protoc_insertion_point(field_release:IB.IBSoftDollarTier.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBSoftDollarTier::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IB.IBSoftDollarTier.name)
}

// optional string val = 2;
inline bool IBSoftDollarTier::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBSoftDollarTier::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBSoftDollarTier::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBSoftDollarTier::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
inline const ::std::string& IBSoftDollarTier::val() const {
  // @@protoc_insertion_point(field_get:IB.IBSoftDollarTier.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBSoftDollarTier::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBSoftDollarTier.val)
}
inline void IBSoftDollarTier::set_val(const char* value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBSoftDollarTier.val)
}
inline void IBSoftDollarTier::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBSoftDollarTier.val)
}
inline ::std::string* IBSoftDollarTier::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:IB.IBSoftDollarTier.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBSoftDollarTier::release_val() {
  // @@protoc_insertion_point(field_release:IB.IBSoftDollarTier.val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBSoftDollarTier::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:IB.IBSoftDollarTier.val)
}

// optional string displayName = 3;
inline bool IBSoftDollarTier::has_displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBSoftDollarTier::set_has_displayname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBSoftDollarTier::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBSoftDollarTier::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayname();
}
inline const ::std::string& IBSoftDollarTier::displayname() const {
  // @@protoc_insertion_point(field_get:IB.IBSoftDollarTier.displayName)
  return displayname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBSoftDollarTier::set_displayname(const ::std::string& value) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBSoftDollarTier.displayName)
}
inline void IBSoftDollarTier::set_displayname(const char* value) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBSoftDollarTier.displayName)
}
inline void IBSoftDollarTier::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBSoftDollarTier.displayName)
}
inline ::std::string* IBSoftDollarTier::mutable_displayname() {
  set_has_displayname();
  // @@protoc_insertion_point(field_mutable:IB.IBSoftDollarTier.displayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBSoftDollarTier::release_displayname() {
  // @@protoc_insertion_point(field_release:IB.IBSoftDollarTier.displayName)
  clear_has_displayname();
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBSoftDollarTier::set_allocated_displayname(::std::string* displayname) {
  if (displayname != NULL) {
    set_has_displayname();
  } else {
    clear_has_displayname();
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:IB.IBSoftDollarTier.displayName)
}

// -------------------------------------------------------------------

// IBUnderComp

// optional int32 conId = 1;
inline bool IBUnderComp::has_conid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBUnderComp::set_has_conid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBUnderComp::clear_has_conid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBUnderComp::clear_conid() {
  conid_ = 0;
  clear_has_conid();
}
inline ::google::protobuf::int32 IBUnderComp::conid() const {
  // @@protoc_insertion_point(field_get:IB.IBUnderComp.conId)
  return conid_;
}
inline void IBUnderComp::set_conid(::google::protobuf::int32 value) {
  set_has_conid();
  conid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBUnderComp.conId)
}

// optional double delta = 2;
inline bool IBUnderComp::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBUnderComp::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBUnderComp::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBUnderComp::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline double IBUnderComp::delta() const {
  // @@protoc_insertion_point(field_get:IB.IBUnderComp.delta)
  return delta_;
}
inline void IBUnderComp::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:IB.IBUnderComp.delta)
}

// optional double price = 3;
inline bool IBUnderComp::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBUnderComp::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBUnderComp::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBUnderComp::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double IBUnderComp::price() const {
  // @@protoc_insertion_point(field_get:IB.IBUnderComp.price)
  return price_;
}
inline void IBUnderComp::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:IB.IBUnderComp.price)
}

// -------------------------------------------------------------------

// IBContract

// optional int32 conId = 1;
inline bool IBContract::has_conid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBContract::set_has_conid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBContract::clear_has_conid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBContract::clear_conid() {
  conid_ = 0;
  clear_has_conid();
}
inline ::google::protobuf::int32 IBContract::conid() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.conId)
  return conid_;
}
inline void IBContract::set_conid(::google::protobuf::int32 value) {
  set_has_conid();
  conid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContract.conId)
}

// optional string symbol = 2;
inline bool IBContract::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBContract::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBContract::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBContract::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& IBContract::symbol() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.symbol)
}
inline void IBContract::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.symbol)
}
inline void IBContract::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.symbol)
}
inline ::std::string* IBContract::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_symbol() {
  // @@protoc_insertion_point(field_release:IB.IBContract.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.symbol)
}

// optional string secType = 3;
inline bool IBContract::has_sectype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBContract::set_has_sectype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBContract::clear_has_sectype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBContract::clear_sectype() {
  sectype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sectype();
}
inline const ::std::string& IBContract::sectype() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.secType)
  return sectype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_sectype(const ::std::string& value) {
  set_has_sectype();
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.secType)
}
inline void IBContract::set_sectype(const char* value) {
  set_has_sectype();
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.secType)
}
inline void IBContract::set_sectype(const char* value, size_t size) {
  set_has_sectype();
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.secType)
}
inline ::std::string* IBContract::mutable_sectype() {
  set_has_sectype();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.secType)
  return sectype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_sectype() {
  // @@protoc_insertion_point(field_release:IB.IBContract.secType)
  clear_has_sectype();
  return sectype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_sectype(::std::string* sectype) {
  if (sectype != NULL) {
    set_has_sectype();
  } else {
    clear_has_sectype();
  }
  sectype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sectype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.secType)
}

// optional string lastTradeDateOrContractMonth = 4;
inline bool IBContract::has_lasttradedateorcontractmonth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBContract::set_has_lasttradedateorcontractmonth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBContract::clear_has_lasttradedateorcontractmonth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBContract::clear_lasttradedateorcontractmonth() {
  lasttradedateorcontractmonth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lasttradedateorcontractmonth();
}
inline const ::std::string& IBContract::lasttradedateorcontractmonth() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.lastTradeDateOrContractMonth)
  return lasttradedateorcontractmonth_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_lasttradedateorcontractmonth(const ::std::string& value) {
  set_has_lasttradedateorcontractmonth();
  lasttradedateorcontractmonth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.lastTradeDateOrContractMonth)
}
inline void IBContract::set_lasttradedateorcontractmonth(const char* value) {
  set_has_lasttradedateorcontractmonth();
  lasttradedateorcontractmonth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.lastTradeDateOrContractMonth)
}
inline void IBContract::set_lasttradedateorcontractmonth(const char* value, size_t size) {
  set_has_lasttradedateorcontractmonth();
  lasttradedateorcontractmonth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.lastTradeDateOrContractMonth)
}
inline ::std::string* IBContract::mutable_lasttradedateorcontractmonth() {
  set_has_lasttradedateorcontractmonth();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.lastTradeDateOrContractMonth)
  return lasttradedateorcontractmonth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_lasttradedateorcontractmonth() {
  // @@protoc_insertion_point(field_release:IB.IBContract.lastTradeDateOrContractMonth)
  clear_has_lasttradedateorcontractmonth();
  return lasttradedateorcontractmonth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_lasttradedateorcontractmonth(::std::string* lasttradedateorcontractmonth) {
  if (lasttradedateorcontractmonth != NULL) {
    set_has_lasttradedateorcontractmonth();
  } else {
    clear_has_lasttradedateorcontractmonth();
  }
  lasttradedateorcontractmonth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttradedateorcontractmonth);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.lastTradeDateOrContractMonth)
}

// optional string expiry = 5;
inline bool IBContract::has_expiry() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBContract::set_has_expiry() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBContract::clear_has_expiry() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBContract::clear_expiry() {
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_expiry();
}
inline const ::std::string& IBContract::expiry() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.expiry)
  return expiry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_expiry(const ::std::string& value) {
  set_has_expiry();
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.expiry)
}
inline void IBContract::set_expiry(const char* value) {
  set_has_expiry();
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.expiry)
}
inline void IBContract::set_expiry(const char* value, size_t size) {
  set_has_expiry();
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.expiry)
}
inline ::std::string* IBContract::mutable_expiry() {
  set_has_expiry();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.expiry)
  return expiry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_expiry() {
  // @@protoc_insertion_point(field_release:IB.IBContract.expiry)
  clear_has_expiry();
  return expiry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_expiry(::std::string* expiry) {
  if (expiry != NULL) {
    set_has_expiry();
  } else {
    clear_has_expiry();
  }
  expiry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiry);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.expiry)
}

// optional double strike = 6;
inline bool IBContract::has_strike() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBContract::set_has_strike() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBContract::clear_has_strike() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBContract::clear_strike() {
  strike_ = 0;
  clear_has_strike();
}
inline double IBContract::strike() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.strike)
  return strike_;
}
inline void IBContract::set_strike(double value) {
  set_has_strike();
  strike_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContract.strike)
}

// optional string right = 7;
inline bool IBContract::has_right() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBContract::set_has_right() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBContract::clear_has_right() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBContract::clear_right() {
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right();
}
inline const ::std::string& IBContract::right() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.right)
  return right_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_right(const ::std::string& value) {
  set_has_right();
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.right)
}
inline void IBContract::set_right(const char* value) {
  set_has_right();
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.right)
}
inline void IBContract::set_right(const char* value, size_t size) {
  set_has_right();
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.right)
}
inline ::std::string* IBContract::mutable_right() {
  set_has_right();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.right)
  return right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_right() {
  // @@protoc_insertion_point(field_release:IB.IBContract.right)
  clear_has_right();
  return right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_right(::std::string* right) {
  if (right != NULL) {
    set_has_right();
  } else {
    clear_has_right();
  }
  right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.right)
}

// optional string multiplier = 8;
inline bool IBContract::has_multiplier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBContract::set_has_multiplier() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBContract::clear_has_multiplier() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBContract::clear_multiplier() {
  multiplier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_multiplier();
}
inline const ::std::string& IBContract::multiplier() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.multiplier)
  return multiplier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_multiplier(const ::std::string& value) {
  set_has_multiplier();
  multiplier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.multiplier)
}
inline void IBContract::set_multiplier(const char* value) {
  set_has_multiplier();
  multiplier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.multiplier)
}
inline void IBContract::set_multiplier(const char* value, size_t size) {
  set_has_multiplier();
  multiplier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.multiplier)
}
inline ::std::string* IBContract::mutable_multiplier() {
  set_has_multiplier();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.multiplier)
  return multiplier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_multiplier() {
  // @@protoc_insertion_point(field_release:IB.IBContract.multiplier)
  clear_has_multiplier();
  return multiplier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_multiplier(::std::string* multiplier) {
  if (multiplier != NULL) {
    set_has_multiplier();
  } else {
    clear_has_multiplier();
  }
  multiplier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multiplier);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.multiplier)
}

// optional string exchange = 9;
inline bool IBContract::has_exchange() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IBContract::set_has_exchange() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IBContract::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IBContract::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
inline const ::std::string& IBContract::exchange() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.exchange)
}
inline void IBContract::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.exchange)
}
inline void IBContract::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.exchange)
}
inline ::std::string* IBContract::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_exchange() {
  // @@protoc_insertion_point(field_release:IB.IBContract.exchange)
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.exchange)
}

// optional string primaryExchange = 10;
inline bool IBContract::has_primaryexchange() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IBContract::set_has_primaryexchange() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IBContract::clear_has_primaryexchange() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IBContract::clear_primaryexchange() {
  primaryexchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primaryexchange();
}
inline const ::std::string& IBContract::primaryexchange() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.primaryExchange)
  return primaryexchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_primaryexchange(const ::std::string& value) {
  set_has_primaryexchange();
  primaryexchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.primaryExchange)
}
inline void IBContract::set_primaryexchange(const char* value) {
  set_has_primaryexchange();
  primaryexchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.primaryExchange)
}
inline void IBContract::set_primaryexchange(const char* value, size_t size) {
  set_has_primaryexchange();
  primaryexchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.primaryExchange)
}
inline ::std::string* IBContract::mutable_primaryexchange() {
  set_has_primaryexchange();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.primaryExchange)
  return primaryexchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_primaryexchange() {
  // @@protoc_insertion_point(field_release:IB.IBContract.primaryExchange)
  clear_has_primaryexchange();
  return primaryexchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_primaryexchange(::std::string* primaryexchange) {
  if (primaryexchange != NULL) {
    set_has_primaryexchange();
  } else {
    clear_has_primaryexchange();
  }
  primaryexchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primaryexchange);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.primaryExchange)
}

// optional string currency = 11;
inline bool IBContract::has_currency() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IBContract::set_has_currency() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IBContract::clear_has_currency() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IBContract::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
inline const ::std::string& IBContract::currency() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.currency)
  return currency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.currency)
}
inline void IBContract::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.currency)
}
inline void IBContract::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.currency)
}
inline ::std::string* IBContract::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_currency() {
  // @@protoc_insertion_point(field_release:IB.IBContract.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.currency)
}

// optional string localSymbol = 12;
inline bool IBContract::has_localsymbol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IBContract::set_has_localsymbol() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IBContract::clear_has_localsymbol() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IBContract::clear_localsymbol() {
  localsymbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localsymbol();
}
inline const ::std::string& IBContract::localsymbol() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.localSymbol)
  return localsymbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_localsymbol(const ::std::string& value) {
  set_has_localsymbol();
  localsymbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.localSymbol)
}
inline void IBContract::set_localsymbol(const char* value) {
  set_has_localsymbol();
  localsymbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.localSymbol)
}
inline void IBContract::set_localsymbol(const char* value, size_t size) {
  set_has_localsymbol();
  localsymbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.localSymbol)
}
inline ::std::string* IBContract::mutable_localsymbol() {
  set_has_localsymbol();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.localSymbol)
  return localsymbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_localsymbol() {
  // @@protoc_insertion_point(field_release:IB.IBContract.localSymbol)
  clear_has_localsymbol();
  return localsymbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_localsymbol(::std::string* localsymbol) {
  if (localsymbol != NULL) {
    set_has_localsymbol();
  } else {
    clear_has_localsymbol();
  }
  localsymbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localsymbol);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.localSymbol)
}

// optional string tradingClass = 13;
inline bool IBContract::has_tradingclass() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IBContract::set_has_tradingclass() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IBContract::clear_has_tradingclass() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IBContract::clear_tradingclass() {
  tradingclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradingclass();
}
inline const ::std::string& IBContract::tradingclass() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.tradingClass)
  return tradingclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_tradingclass(const ::std::string& value) {
  set_has_tradingclass();
  tradingclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.tradingClass)
}
inline void IBContract::set_tradingclass(const char* value) {
  set_has_tradingclass();
  tradingclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.tradingClass)
}
inline void IBContract::set_tradingclass(const char* value, size_t size) {
  set_has_tradingclass();
  tradingclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.tradingClass)
}
inline ::std::string* IBContract::mutable_tradingclass() {
  set_has_tradingclass();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.tradingClass)
  return tradingclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_tradingclass() {
  // @@protoc_insertion_point(field_release:IB.IBContract.tradingClass)
  clear_has_tradingclass();
  return tradingclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_tradingclass(::std::string* tradingclass) {
  if (tradingclass != NULL) {
    set_has_tradingclass();
  } else {
    clear_has_tradingclass();
  }
  tradingclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingclass);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.tradingClass)
}

// optional bool includeExpired = 14;
inline bool IBContract::has_includeexpired() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IBContract::set_has_includeexpired() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IBContract::clear_has_includeexpired() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IBContract::clear_includeexpired() {
  includeexpired_ = false;
  clear_has_includeexpired();
}
inline bool IBContract::includeexpired() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.includeExpired)
  return includeexpired_;
}
inline void IBContract::set_includeexpired(bool value) {
  set_has_includeexpired();
  includeexpired_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContract.includeExpired)
}

// optional string secIdType = 15;
inline bool IBContract::has_secidtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IBContract::set_has_secidtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IBContract::clear_has_secidtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IBContract::clear_secidtype() {
  secidtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secidtype();
}
inline const ::std::string& IBContract::secidtype() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.secIdType)
  return secidtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_secidtype(const ::std::string& value) {
  set_has_secidtype();
  secidtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.secIdType)
}
inline void IBContract::set_secidtype(const char* value) {
  set_has_secidtype();
  secidtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.secIdType)
}
inline void IBContract::set_secidtype(const char* value, size_t size) {
  set_has_secidtype();
  secidtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.secIdType)
}
inline ::std::string* IBContract::mutable_secidtype() {
  set_has_secidtype();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.secIdType)
  return secidtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_secidtype() {
  // @@protoc_insertion_point(field_release:IB.IBContract.secIdType)
  clear_has_secidtype();
  return secidtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_secidtype(::std::string* secidtype) {
  if (secidtype != NULL) {
    set_has_secidtype();
  } else {
    clear_has_secidtype();
  }
  secidtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secidtype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.secIdType)
}

// optional string secId = 16;
inline bool IBContract::has_secid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IBContract::set_has_secid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IBContract::clear_has_secid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IBContract::clear_secid() {
  secid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secid();
}
inline const ::std::string& IBContract::secid() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.secId)
  return secid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_secid(const ::std::string& value) {
  set_has_secid();
  secid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.secId)
}
inline void IBContract::set_secid(const char* value) {
  set_has_secid();
  secid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.secId)
}
inline void IBContract::set_secid(const char* value, size_t size) {
  set_has_secid();
  secid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.secId)
}
inline ::std::string* IBContract::mutable_secid() {
  set_has_secid();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.secId)
  return secid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_secid() {
  // @@protoc_insertion_point(field_release:IB.IBContract.secId)
  clear_has_secid();
  return secid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_secid(::std::string* secid) {
  if (secid != NULL) {
    set_has_secid();
  } else {
    clear_has_secid();
  }
  secid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secid);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.secId)
}

// optional string comboLegsDescrip = 17;
inline bool IBContract::has_combolegsdescrip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IBContract::set_has_combolegsdescrip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IBContract::clear_has_combolegsdescrip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IBContract::clear_combolegsdescrip() {
  combolegsdescrip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_combolegsdescrip();
}
inline const ::std::string& IBContract::combolegsdescrip() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.comboLegsDescrip)
  return combolegsdescrip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_combolegsdescrip(const ::std::string& value) {
  set_has_combolegsdescrip();
  combolegsdescrip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContract.comboLegsDescrip)
}
inline void IBContract::set_combolegsdescrip(const char* value) {
  set_has_combolegsdescrip();
  combolegsdescrip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContract.comboLegsDescrip)
}
inline void IBContract::set_combolegsdescrip(const char* value, size_t size) {
  set_has_combolegsdescrip();
  combolegsdescrip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContract.comboLegsDescrip)
}
inline ::std::string* IBContract::mutable_combolegsdescrip() {
  set_has_combolegsdescrip();
  // @@protoc_insertion_point(field_mutable:IB.IBContract.comboLegsDescrip)
  return combolegsdescrip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContract::release_combolegsdescrip() {
  // @@protoc_insertion_point(field_release:IB.IBContract.comboLegsDescrip)
  clear_has_combolegsdescrip();
  return combolegsdescrip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContract::set_allocated_combolegsdescrip(::std::string* combolegsdescrip) {
  if (combolegsdescrip != NULL) {
    set_has_combolegsdescrip();
  } else {
    clear_has_combolegsdescrip();
  }
  combolegsdescrip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), combolegsdescrip);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.comboLegsDescrip)
}

// repeated .IB.IBComboLeg comboLegs = 18;
inline int IBContract::combolegs_size() const {
  return combolegs_.size();
}
inline void IBContract::clear_combolegs() {
  combolegs_.Clear();
}
inline const ::IB::IBComboLeg& IBContract::combolegs(int index) const {
  // @@protoc_insertion_point(field_get:IB.IBContract.comboLegs)
  return combolegs_.Get(index);
}
inline ::IB::IBComboLeg* IBContract::mutable_combolegs(int index) {
  // @@protoc_insertion_point(field_mutable:IB.IBContract.comboLegs)
  return combolegs_.Mutable(index);
}
inline ::IB::IBComboLeg* IBContract::add_combolegs() {
  // @@protoc_insertion_point(field_add:IB.IBContract.comboLegs)
  return combolegs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IB::IBComboLeg >*
IBContract::mutable_combolegs() {
  // @@protoc_insertion_point(field_mutable_list:IB.IBContract.comboLegs)
  return &combolegs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IB::IBComboLeg >&
IBContract::combolegs() const {
  // @@protoc_insertion_point(field_list:IB.IBContract.comboLegs)
  return combolegs_;
}

// optional .IB.IBUnderComp undlyComp = 19;
inline bool IBContract::has_undlycomp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IBContract::set_has_undlycomp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void IBContract::clear_has_undlycomp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void IBContract::clear_undlycomp() {
  if (undlycomp_ != NULL) undlycomp_->::IB::IBUnderComp::Clear();
  clear_has_undlycomp();
}
inline const ::IB::IBUnderComp& IBContract::undlycomp() const {
  // @@protoc_insertion_point(field_get:IB.IBContract.undlyComp)
  return undlycomp_ != NULL ? *undlycomp_ : *default_instance_->undlycomp_;
}
inline ::IB::IBUnderComp* IBContract::mutable_undlycomp() {
  set_has_undlycomp();
  if (undlycomp_ == NULL) {
    undlycomp_ = new ::IB::IBUnderComp;
  }
  // @@protoc_insertion_point(field_mutable:IB.IBContract.undlyComp)
  return undlycomp_;
}
inline ::IB::IBUnderComp* IBContract::release_undlycomp() {
  // @@protoc_insertion_point(field_release:IB.IBContract.undlyComp)
  clear_has_undlycomp();
  ::IB::IBUnderComp* temp = undlycomp_;
  undlycomp_ = NULL;
  return temp;
}
inline void IBContract::set_allocated_undlycomp(::IB::IBUnderComp* undlycomp) {
  delete undlycomp_;
  undlycomp_ = undlycomp;
  if (undlycomp) {
    set_has_undlycomp();
  } else {
    clear_has_undlycomp();
  }
  // @@protoc_insertion_point(field_set_allocated:IB.IBContract.undlyComp)
}

// -------------------------------------------------------------------

// IBContractDetails

// optional .IB.IBContract summary = 1;
inline bool IBContractDetails::has_summary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBContractDetails::set_has_summary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBContractDetails::clear_has_summary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBContractDetails::clear_summary() {
  if (summary_ != NULL) summary_->::IB::IBContract::Clear();
  clear_has_summary();
}
inline const ::IB::IBContract& IBContractDetails::summary() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.summary)
  return summary_ != NULL ? *summary_ : *default_instance_->summary_;
}
inline ::IB::IBContract* IBContractDetails::mutable_summary() {
  set_has_summary();
  if (summary_ == NULL) {
    summary_ = new ::IB::IBContract;
  }
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.summary)
  return summary_;
}
inline ::IB::IBContract* IBContractDetails::release_summary() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.summary)
  clear_has_summary();
  ::IB::IBContract* temp = summary_;
  summary_ = NULL;
  return temp;
}
inline void IBContractDetails::set_allocated_summary(::IB::IBContract* summary) {
  delete summary_;
  summary_ = summary;
  if (summary) {
    set_has_summary();
  } else {
    clear_has_summary();
  }
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.summary)
}

// optional string marketName = 2;
inline bool IBContractDetails::has_marketname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBContractDetails::set_has_marketname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBContractDetails::clear_has_marketname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBContractDetails::clear_marketname() {
  marketname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marketname();
}
inline const ::std::string& IBContractDetails::marketname() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.marketName)
  return marketname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_marketname(const ::std::string& value) {
  set_has_marketname();
  marketname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.marketName)
}
inline void IBContractDetails::set_marketname(const char* value) {
  set_has_marketname();
  marketname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.marketName)
}
inline void IBContractDetails::set_marketname(const char* value, size_t size) {
  set_has_marketname();
  marketname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.marketName)
}
inline ::std::string* IBContractDetails::mutable_marketname() {
  set_has_marketname();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.marketName)
  return marketname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_marketname() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.marketName)
  clear_has_marketname();
  return marketname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_marketname(::std::string* marketname) {
  if (marketname != NULL) {
    set_has_marketname();
  } else {
    clear_has_marketname();
  }
  marketname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketname);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.marketName)
}

// optional double minTick = 3;
inline bool IBContractDetails::has_mintick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBContractDetails::set_has_mintick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBContractDetails::clear_has_mintick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBContractDetails::clear_mintick() {
  mintick_ = 0;
  clear_has_mintick();
}
inline double IBContractDetails::mintick() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.minTick)
  return mintick_;
}
inline void IBContractDetails::set_mintick(double value) {
  set_has_mintick();
  mintick_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.minTick)
}

// optional string orderTypes = 4;
inline bool IBContractDetails::has_ordertypes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBContractDetails::set_has_ordertypes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBContractDetails::clear_has_ordertypes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBContractDetails::clear_ordertypes() {
  ordertypes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ordertypes();
}
inline const ::std::string& IBContractDetails::ordertypes() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.orderTypes)
  return ordertypes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_ordertypes(const ::std::string& value) {
  set_has_ordertypes();
  ordertypes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.orderTypes)
}
inline void IBContractDetails::set_ordertypes(const char* value) {
  set_has_ordertypes();
  ordertypes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.orderTypes)
}
inline void IBContractDetails::set_ordertypes(const char* value, size_t size) {
  set_has_ordertypes();
  ordertypes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.orderTypes)
}
inline ::std::string* IBContractDetails::mutable_ordertypes() {
  set_has_ordertypes();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.orderTypes)
  return ordertypes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_ordertypes() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.orderTypes)
  clear_has_ordertypes();
  return ordertypes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_ordertypes(::std::string* ordertypes) {
  if (ordertypes != NULL) {
    set_has_ordertypes();
  } else {
    clear_has_ordertypes();
  }
  ordertypes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertypes);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.orderTypes)
}

// optional string validExchanges = 5;
inline bool IBContractDetails::has_validexchanges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBContractDetails::set_has_validexchanges() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBContractDetails::clear_has_validexchanges() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBContractDetails::clear_validexchanges() {
  validexchanges_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_validexchanges();
}
inline const ::std::string& IBContractDetails::validexchanges() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.validExchanges)
  return validexchanges_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_validexchanges(const ::std::string& value) {
  set_has_validexchanges();
  validexchanges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.validExchanges)
}
inline void IBContractDetails::set_validexchanges(const char* value) {
  set_has_validexchanges();
  validexchanges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.validExchanges)
}
inline void IBContractDetails::set_validexchanges(const char* value, size_t size) {
  set_has_validexchanges();
  validexchanges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.validExchanges)
}
inline ::std::string* IBContractDetails::mutable_validexchanges() {
  set_has_validexchanges();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.validExchanges)
  return validexchanges_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_validexchanges() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.validExchanges)
  clear_has_validexchanges();
  return validexchanges_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_validexchanges(::std::string* validexchanges) {
  if (validexchanges != NULL) {
    set_has_validexchanges();
  } else {
    clear_has_validexchanges();
  }
  validexchanges_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validexchanges);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.validExchanges)
}

// optional int32 priceMagnifier = 6;
inline bool IBContractDetails::has_pricemagnifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBContractDetails::set_has_pricemagnifier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBContractDetails::clear_has_pricemagnifier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBContractDetails::clear_pricemagnifier() {
  pricemagnifier_ = 0;
  clear_has_pricemagnifier();
}
inline ::google::protobuf::int32 IBContractDetails::pricemagnifier() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.priceMagnifier)
  return pricemagnifier_;
}
inline void IBContractDetails::set_pricemagnifier(::google::protobuf::int32 value) {
  set_has_pricemagnifier();
  pricemagnifier_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.priceMagnifier)
}

// optional int32 underConId = 7;
inline bool IBContractDetails::has_underconid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBContractDetails::set_has_underconid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBContractDetails::clear_has_underconid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBContractDetails::clear_underconid() {
  underconid_ = 0;
  clear_has_underconid();
}
inline ::google::protobuf::int32 IBContractDetails::underconid() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.underConId)
  return underconid_;
}
inline void IBContractDetails::set_underconid(::google::protobuf::int32 value) {
  set_has_underconid();
  underconid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.underConId)
}

// optional string longName = 8;
inline bool IBContractDetails::has_longname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBContractDetails::set_has_longname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBContractDetails::clear_has_longname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBContractDetails::clear_longname() {
  longname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_longname();
}
inline const ::std::string& IBContractDetails::longname() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.longName)
  return longname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_longname(const ::std::string& value) {
  set_has_longname();
  longname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.longName)
}
inline void IBContractDetails::set_longname(const char* value) {
  set_has_longname();
  longname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.longName)
}
inline void IBContractDetails::set_longname(const char* value, size_t size) {
  set_has_longname();
  longname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.longName)
}
inline ::std::string* IBContractDetails::mutable_longname() {
  set_has_longname();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.longName)
  return longname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_longname() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.longName)
  clear_has_longname();
  return longname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_longname(::std::string* longname) {
  if (longname != NULL) {
    set_has_longname();
  } else {
    clear_has_longname();
  }
  longname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longname);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.longName)
}

// optional string contractMonth = 9;
inline bool IBContractDetails::has_contractmonth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IBContractDetails::set_has_contractmonth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IBContractDetails::clear_has_contractmonth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IBContractDetails::clear_contractmonth() {
  contractmonth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contractmonth();
}
inline const ::std::string& IBContractDetails::contractmonth() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.contractMonth)
  return contractmonth_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_contractmonth(const ::std::string& value) {
  set_has_contractmonth();
  contractmonth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.contractMonth)
}
inline void IBContractDetails::set_contractmonth(const char* value) {
  set_has_contractmonth();
  contractmonth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.contractMonth)
}
inline void IBContractDetails::set_contractmonth(const char* value, size_t size) {
  set_has_contractmonth();
  contractmonth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.contractMonth)
}
inline ::std::string* IBContractDetails::mutable_contractmonth() {
  set_has_contractmonth();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.contractMonth)
  return contractmonth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_contractmonth() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.contractMonth)
  clear_has_contractmonth();
  return contractmonth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_contractmonth(::std::string* contractmonth) {
  if (contractmonth != NULL) {
    set_has_contractmonth();
  } else {
    clear_has_contractmonth();
  }
  contractmonth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractmonth);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.contractMonth)
}

// optional string industry = 10;
inline bool IBContractDetails::has_industry() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IBContractDetails::set_has_industry() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IBContractDetails::clear_has_industry() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IBContractDetails::clear_industry() {
  industry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_industry();
}
inline const ::std::string& IBContractDetails::industry() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.industry)
  return industry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_industry(const ::std::string& value) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.industry)
}
inline void IBContractDetails::set_industry(const char* value) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.industry)
}
inline void IBContractDetails::set_industry(const char* value, size_t size) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.industry)
}
inline ::std::string* IBContractDetails::mutable_industry() {
  set_has_industry();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.industry)
  return industry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_industry() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.industry)
  clear_has_industry();
  return industry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_industry(::std::string* industry) {
  if (industry != NULL) {
    set_has_industry();
  } else {
    clear_has_industry();
  }
  industry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), industry);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.industry)
}

// optional string category = 11;
inline bool IBContractDetails::has_category() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IBContractDetails::set_has_category() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IBContractDetails::clear_has_category() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IBContractDetails::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& IBContractDetails::category() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.category)
  return category_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.category)
}
inline void IBContractDetails::set_category(const char* value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.category)
}
inline void IBContractDetails::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.category)
}
inline ::std::string* IBContractDetails::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_category() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.category)
}

// optional string subcategory = 12;
inline bool IBContractDetails::has_subcategory() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IBContractDetails::set_has_subcategory() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IBContractDetails::clear_has_subcategory() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IBContractDetails::clear_subcategory() {
  subcategory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subcategory();
}
inline const ::std::string& IBContractDetails::subcategory() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.subcategory)
  return subcategory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_subcategory(const ::std::string& value) {
  set_has_subcategory();
  subcategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.subcategory)
}
inline void IBContractDetails::set_subcategory(const char* value) {
  set_has_subcategory();
  subcategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.subcategory)
}
inline void IBContractDetails::set_subcategory(const char* value, size_t size) {
  set_has_subcategory();
  subcategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.subcategory)
}
inline ::std::string* IBContractDetails::mutable_subcategory() {
  set_has_subcategory();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.subcategory)
  return subcategory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_subcategory() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.subcategory)
  clear_has_subcategory();
  return subcategory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_subcategory(::std::string* subcategory) {
  if (subcategory != NULL) {
    set_has_subcategory();
  } else {
    clear_has_subcategory();
  }
  subcategory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subcategory);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.subcategory)
}

// optional string timeZoneId = 13;
inline bool IBContractDetails::has_timezoneid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IBContractDetails::set_has_timezoneid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IBContractDetails::clear_has_timezoneid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IBContractDetails::clear_timezoneid() {
  timezoneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezoneid();
}
inline const ::std::string& IBContractDetails::timezoneid() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.timeZoneId)
  return timezoneid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_timezoneid(const ::std::string& value) {
  set_has_timezoneid();
  timezoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.timeZoneId)
}
inline void IBContractDetails::set_timezoneid(const char* value) {
  set_has_timezoneid();
  timezoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.timeZoneId)
}
inline void IBContractDetails::set_timezoneid(const char* value, size_t size) {
  set_has_timezoneid();
  timezoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.timeZoneId)
}
inline ::std::string* IBContractDetails::mutable_timezoneid() {
  set_has_timezoneid();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.timeZoneId)
  return timezoneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_timezoneid() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.timeZoneId)
  clear_has_timezoneid();
  return timezoneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_timezoneid(::std::string* timezoneid) {
  if (timezoneid != NULL) {
    set_has_timezoneid();
  } else {
    clear_has_timezoneid();
  }
  timezoneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezoneid);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.timeZoneId)
}

// optional string tradingHours = 14;
inline bool IBContractDetails::has_tradinghours() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IBContractDetails::set_has_tradinghours() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IBContractDetails::clear_has_tradinghours() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IBContractDetails::clear_tradinghours() {
  tradinghours_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradinghours();
}
inline const ::std::string& IBContractDetails::tradinghours() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.tradingHours)
  return tradinghours_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_tradinghours(const ::std::string& value) {
  set_has_tradinghours();
  tradinghours_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.tradingHours)
}
inline void IBContractDetails::set_tradinghours(const char* value) {
  set_has_tradinghours();
  tradinghours_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.tradingHours)
}
inline void IBContractDetails::set_tradinghours(const char* value, size_t size) {
  set_has_tradinghours();
  tradinghours_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.tradingHours)
}
inline ::std::string* IBContractDetails::mutable_tradinghours() {
  set_has_tradinghours();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.tradingHours)
  return tradinghours_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_tradinghours() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.tradingHours)
  clear_has_tradinghours();
  return tradinghours_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_tradinghours(::std::string* tradinghours) {
  if (tradinghours != NULL) {
    set_has_tradinghours();
  } else {
    clear_has_tradinghours();
  }
  tradinghours_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradinghours);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.tradingHours)
}

// optional string liquidHours = 15;
inline bool IBContractDetails::has_liquidhours() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IBContractDetails::set_has_liquidhours() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IBContractDetails::clear_has_liquidhours() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IBContractDetails::clear_liquidhours() {
  liquidhours_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_liquidhours();
}
inline const ::std::string& IBContractDetails::liquidhours() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.liquidHours)
  return liquidhours_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_liquidhours(const ::std::string& value) {
  set_has_liquidhours();
  liquidhours_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.liquidHours)
}
inline void IBContractDetails::set_liquidhours(const char* value) {
  set_has_liquidhours();
  liquidhours_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.liquidHours)
}
inline void IBContractDetails::set_liquidhours(const char* value, size_t size) {
  set_has_liquidhours();
  liquidhours_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.liquidHours)
}
inline ::std::string* IBContractDetails::mutable_liquidhours() {
  set_has_liquidhours();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.liquidHours)
  return liquidhours_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_liquidhours() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.liquidHours)
  clear_has_liquidhours();
  return liquidhours_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_liquidhours(::std::string* liquidhours) {
  if (liquidhours != NULL) {
    set_has_liquidhours();
  } else {
    clear_has_liquidhours();
  }
  liquidhours_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), liquidhours);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.liquidHours)
}

// optional string evRule = 16;
inline bool IBContractDetails::has_evrule() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IBContractDetails::set_has_evrule() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IBContractDetails::clear_has_evrule() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IBContractDetails::clear_evrule() {
  evrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_evrule();
}
inline const ::std::string& IBContractDetails::evrule() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.evRule)
  return evrule_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_evrule(const ::std::string& value) {
  set_has_evrule();
  evrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.evRule)
}
inline void IBContractDetails::set_evrule(const char* value) {
  set_has_evrule();
  evrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.evRule)
}
inline void IBContractDetails::set_evrule(const char* value, size_t size) {
  set_has_evrule();
  evrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.evRule)
}
inline ::std::string* IBContractDetails::mutable_evrule() {
  set_has_evrule();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.evRule)
  return evrule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_evrule() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.evRule)
  clear_has_evrule();
  return evrule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_evrule(::std::string* evrule) {
  if (evrule != NULL) {
    set_has_evrule();
  } else {
    clear_has_evrule();
  }
  evrule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), evrule);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.evRule)
}

// optional double evMultiplier = 17;
inline bool IBContractDetails::has_evmultiplier() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IBContractDetails::set_has_evmultiplier() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IBContractDetails::clear_has_evmultiplier() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IBContractDetails::clear_evmultiplier() {
  evmultiplier_ = 0;
  clear_has_evmultiplier();
}
inline double IBContractDetails::evmultiplier() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.evMultiplier)
  return evmultiplier_;
}
inline void IBContractDetails::set_evmultiplier(double value) {
  set_has_evmultiplier();
  evmultiplier_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.evMultiplier)
}

// repeated .IB.IBTagValue secIdList = 18;
inline int IBContractDetails::secidlist_size() const {
  return secidlist_.size();
}
inline void IBContractDetails::clear_secidlist() {
  secidlist_.Clear();
}
inline const ::IB::IBTagValue& IBContractDetails::secidlist(int index) const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.secIdList)
  return secidlist_.Get(index);
}
inline ::IB::IBTagValue* IBContractDetails::mutable_secidlist(int index) {
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.secIdList)
  return secidlist_.Mutable(index);
}
inline ::IB::IBTagValue* IBContractDetails::add_secidlist() {
  // @@protoc_insertion_point(field_add:IB.IBContractDetails.secIdList)
  return secidlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
IBContractDetails::mutable_secidlist() {
  // @@protoc_insertion_point(field_mutable_list:IB.IBContractDetails.secIdList)
  return &secidlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
IBContractDetails::secidlist() const {
  // @@protoc_insertion_point(field_list:IB.IBContractDetails.secIdList)
  return secidlist_;
}

// optional string cusip = 19;
inline bool IBContractDetails::has_cusip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IBContractDetails::set_has_cusip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void IBContractDetails::clear_has_cusip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void IBContractDetails::clear_cusip() {
  cusip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cusip();
}
inline const ::std::string& IBContractDetails::cusip() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.cusip)
  return cusip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_cusip(const ::std::string& value) {
  set_has_cusip();
  cusip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.cusip)
}
inline void IBContractDetails::set_cusip(const char* value) {
  set_has_cusip();
  cusip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.cusip)
}
inline void IBContractDetails::set_cusip(const char* value, size_t size) {
  set_has_cusip();
  cusip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.cusip)
}
inline ::std::string* IBContractDetails::mutable_cusip() {
  set_has_cusip();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.cusip)
  return cusip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_cusip() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.cusip)
  clear_has_cusip();
  return cusip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_cusip(::std::string* cusip) {
  if (cusip != NULL) {
    set_has_cusip();
  } else {
    clear_has_cusip();
  }
  cusip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cusip);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.cusip)
}

// optional string ratings = 20;
inline bool IBContractDetails::has_ratings() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void IBContractDetails::set_has_ratings() {
  _has_bits_[0] |= 0x00080000u;
}
inline void IBContractDetails::clear_has_ratings() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void IBContractDetails::clear_ratings() {
  ratings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ratings();
}
inline const ::std::string& IBContractDetails::ratings() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.ratings)
  return ratings_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_ratings(const ::std::string& value) {
  set_has_ratings();
  ratings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.ratings)
}
inline void IBContractDetails::set_ratings(const char* value) {
  set_has_ratings();
  ratings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.ratings)
}
inline void IBContractDetails::set_ratings(const char* value, size_t size) {
  set_has_ratings();
  ratings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.ratings)
}
inline ::std::string* IBContractDetails::mutable_ratings() {
  set_has_ratings();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.ratings)
  return ratings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_ratings() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.ratings)
  clear_has_ratings();
  return ratings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_ratings(::std::string* ratings) {
  if (ratings != NULL) {
    set_has_ratings();
  } else {
    clear_has_ratings();
  }
  ratings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ratings);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.ratings)
}

// optional string descAppend = 21;
inline bool IBContractDetails::has_descappend() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void IBContractDetails::set_has_descappend() {
  _has_bits_[0] |= 0x00100000u;
}
inline void IBContractDetails::clear_has_descappend() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void IBContractDetails::clear_descappend() {
  descappend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descappend();
}
inline const ::std::string& IBContractDetails::descappend() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.descAppend)
  return descappend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_descappend(const ::std::string& value) {
  set_has_descappend();
  descappend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.descAppend)
}
inline void IBContractDetails::set_descappend(const char* value) {
  set_has_descappend();
  descappend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.descAppend)
}
inline void IBContractDetails::set_descappend(const char* value, size_t size) {
  set_has_descappend();
  descappend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.descAppend)
}
inline ::std::string* IBContractDetails::mutable_descappend() {
  set_has_descappend();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.descAppend)
  return descappend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_descappend() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.descAppend)
  clear_has_descappend();
  return descappend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_descappend(::std::string* descappend) {
  if (descappend != NULL) {
    set_has_descappend();
  } else {
    clear_has_descappend();
  }
  descappend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descappend);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.descAppend)
}

// optional string bondType = 22;
inline bool IBContractDetails::has_bondtype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void IBContractDetails::set_has_bondtype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void IBContractDetails::clear_has_bondtype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void IBContractDetails::clear_bondtype() {
  bondtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bondtype();
}
inline const ::std::string& IBContractDetails::bondtype() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.bondType)
  return bondtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_bondtype(const ::std::string& value) {
  set_has_bondtype();
  bondtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.bondType)
}
inline void IBContractDetails::set_bondtype(const char* value) {
  set_has_bondtype();
  bondtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.bondType)
}
inline void IBContractDetails::set_bondtype(const char* value, size_t size) {
  set_has_bondtype();
  bondtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.bondType)
}
inline ::std::string* IBContractDetails::mutable_bondtype() {
  set_has_bondtype();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.bondType)
  return bondtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_bondtype() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.bondType)
  clear_has_bondtype();
  return bondtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_bondtype(::std::string* bondtype) {
  if (bondtype != NULL) {
    set_has_bondtype();
  } else {
    clear_has_bondtype();
  }
  bondtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bondtype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.bondType)
}

// optional string couponType = 23;
inline bool IBContractDetails::has_coupontype() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void IBContractDetails::set_has_coupontype() {
  _has_bits_[0] |= 0x00400000u;
}
inline void IBContractDetails::clear_has_coupontype() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void IBContractDetails::clear_coupontype() {
  coupontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coupontype();
}
inline const ::std::string& IBContractDetails::coupontype() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.couponType)
  return coupontype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_coupontype(const ::std::string& value) {
  set_has_coupontype();
  coupontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.couponType)
}
inline void IBContractDetails::set_coupontype(const char* value) {
  set_has_coupontype();
  coupontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.couponType)
}
inline void IBContractDetails::set_coupontype(const char* value, size_t size) {
  set_has_coupontype();
  coupontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.couponType)
}
inline ::std::string* IBContractDetails::mutable_coupontype() {
  set_has_coupontype();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.couponType)
  return coupontype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_coupontype() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.couponType)
  clear_has_coupontype();
  return coupontype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_coupontype(::std::string* coupontype) {
  if (coupontype != NULL) {
    set_has_coupontype();
  } else {
    clear_has_coupontype();
  }
  coupontype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coupontype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.couponType)
}

// optional bool callable = 24;
inline bool IBContractDetails::has_callable() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void IBContractDetails::set_has_callable() {
  _has_bits_[0] |= 0x00800000u;
}
inline void IBContractDetails::clear_has_callable() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void IBContractDetails::clear_callable() {
  callable_ = false;
  clear_has_callable();
}
inline bool IBContractDetails::callable() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.callable)
  return callable_;
}
inline void IBContractDetails::set_callable(bool value) {
  set_has_callable();
  callable_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.callable)
}

// optional bool putable = 25;
inline bool IBContractDetails::has_putable() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void IBContractDetails::set_has_putable() {
  _has_bits_[0] |= 0x01000000u;
}
inline void IBContractDetails::clear_has_putable() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void IBContractDetails::clear_putable() {
  putable_ = false;
  clear_has_putable();
}
inline bool IBContractDetails::putable() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.putable)
  return putable_;
}
inline void IBContractDetails::set_putable(bool value) {
  set_has_putable();
  putable_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.putable)
}

// optional double coupon = 26;
inline bool IBContractDetails::has_coupon() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void IBContractDetails::set_has_coupon() {
  _has_bits_[0] |= 0x02000000u;
}
inline void IBContractDetails::clear_has_coupon() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void IBContractDetails::clear_coupon() {
  coupon_ = 0;
  clear_has_coupon();
}
inline double IBContractDetails::coupon() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.coupon)
  return coupon_;
}
inline void IBContractDetails::set_coupon(double value) {
  set_has_coupon();
  coupon_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.coupon)
}

// optional bool convertible = 27;
inline bool IBContractDetails::has_convertible() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void IBContractDetails::set_has_convertible() {
  _has_bits_[0] |= 0x04000000u;
}
inline void IBContractDetails::clear_has_convertible() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void IBContractDetails::clear_convertible() {
  convertible_ = false;
  clear_has_convertible();
}
inline bool IBContractDetails::convertible() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.convertible)
  return convertible_;
}
inline void IBContractDetails::set_convertible(bool value) {
  set_has_convertible();
  convertible_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.convertible)
}

// optional string maturity = 28;
inline bool IBContractDetails::has_maturity() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void IBContractDetails::set_has_maturity() {
  _has_bits_[0] |= 0x08000000u;
}
inline void IBContractDetails::clear_has_maturity() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void IBContractDetails::clear_maturity() {
  maturity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maturity();
}
inline const ::std::string& IBContractDetails::maturity() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.maturity)
  return maturity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_maturity(const ::std::string& value) {
  set_has_maturity();
  maturity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.maturity)
}
inline void IBContractDetails::set_maturity(const char* value) {
  set_has_maturity();
  maturity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.maturity)
}
inline void IBContractDetails::set_maturity(const char* value, size_t size) {
  set_has_maturity();
  maturity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.maturity)
}
inline ::std::string* IBContractDetails::mutable_maturity() {
  set_has_maturity();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.maturity)
  return maturity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_maturity() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.maturity)
  clear_has_maturity();
  return maturity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_maturity(::std::string* maturity) {
  if (maturity != NULL) {
    set_has_maturity();
  } else {
    clear_has_maturity();
  }
  maturity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maturity);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.maturity)
}

// optional string issueDate = 29;
inline bool IBContractDetails::has_issuedate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void IBContractDetails::set_has_issuedate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void IBContractDetails::clear_has_issuedate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void IBContractDetails::clear_issuedate() {
  issuedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuedate();
}
inline const ::std::string& IBContractDetails::issuedate() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.issueDate)
  return issuedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_issuedate(const ::std::string& value) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.issueDate)
}
inline void IBContractDetails::set_issuedate(const char* value) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.issueDate)
}
inline void IBContractDetails::set_issuedate(const char* value, size_t size) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.issueDate)
}
inline ::std::string* IBContractDetails::mutable_issuedate() {
  set_has_issuedate();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.issueDate)
  return issuedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_issuedate() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.issueDate)
  clear_has_issuedate();
  return issuedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_issuedate(::std::string* issuedate) {
  if (issuedate != NULL) {
    set_has_issuedate();
  } else {
    clear_has_issuedate();
  }
  issuedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuedate);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.issueDate)
}

// optional string nextOptionDate = 30;
inline bool IBContractDetails::has_nextoptiondate() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void IBContractDetails::set_has_nextoptiondate() {
  _has_bits_[0] |= 0x20000000u;
}
inline void IBContractDetails::clear_has_nextoptiondate() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void IBContractDetails::clear_nextoptiondate() {
  nextoptiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nextoptiondate();
}
inline const ::std::string& IBContractDetails::nextoptiondate() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.nextOptionDate)
  return nextoptiondate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_nextoptiondate(const ::std::string& value) {
  set_has_nextoptiondate();
  nextoptiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.nextOptionDate)
}
inline void IBContractDetails::set_nextoptiondate(const char* value) {
  set_has_nextoptiondate();
  nextoptiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.nextOptionDate)
}
inline void IBContractDetails::set_nextoptiondate(const char* value, size_t size) {
  set_has_nextoptiondate();
  nextoptiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.nextOptionDate)
}
inline ::std::string* IBContractDetails::mutable_nextoptiondate() {
  set_has_nextoptiondate();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.nextOptionDate)
  return nextoptiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_nextoptiondate() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.nextOptionDate)
  clear_has_nextoptiondate();
  return nextoptiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_nextoptiondate(::std::string* nextoptiondate) {
  if (nextoptiondate != NULL) {
    set_has_nextoptiondate();
  } else {
    clear_has_nextoptiondate();
  }
  nextoptiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextoptiondate);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.nextOptionDate)
}

// optional string nextOptionType = 31;
inline bool IBContractDetails::has_nextoptiontype() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void IBContractDetails::set_has_nextoptiontype() {
  _has_bits_[0] |= 0x40000000u;
}
inline void IBContractDetails::clear_has_nextoptiontype() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void IBContractDetails::clear_nextoptiontype() {
  nextoptiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nextoptiontype();
}
inline const ::std::string& IBContractDetails::nextoptiontype() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.nextOptionType)
  return nextoptiontype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_nextoptiontype(const ::std::string& value) {
  set_has_nextoptiontype();
  nextoptiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.nextOptionType)
}
inline void IBContractDetails::set_nextoptiontype(const char* value) {
  set_has_nextoptiontype();
  nextoptiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.nextOptionType)
}
inline void IBContractDetails::set_nextoptiontype(const char* value, size_t size) {
  set_has_nextoptiontype();
  nextoptiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.nextOptionType)
}
inline ::std::string* IBContractDetails::mutable_nextoptiontype() {
  set_has_nextoptiontype();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.nextOptionType)
  return nextoptiontype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_nextoptiontype() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.nextOptionType)
  clear_has_nextoptiontype();
  return nextoptiontype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_nextoptiontype(::std::string* nextoptiontype) {
  if (nextoptiontype != NULL) {
    set_has_nextoptiontype();
  } else {
    clear_has_nextoptiontype();
  }
  nextoptiontype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextoptiontype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.nextOptionType)
}

// optional bool nextOptionPartial = 32;
inline bool IBContractDetails::has_nextoptionpartial() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void IBContractDetails::set_has_nextoptionpartial() {
  _has_bits_[0] |= 0x80000000u;
}
inline void IBContractDetails::clear_has_nextoptionpartial() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void IBContractDetails::clear_nextoptionpartial() {
  nextoptionpartial_ = false;
  clear_has_nextoptionpartial();
}
inline bool IBContractDetails::nextoptionpartial() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.nextOptionPartial)
  return nextoptionpartial_;
}
inline void IBContractDetails::set_nextoptionpartial(bool value) {
  set_has_nextoptionpartial();
  nextoptionpartial_ = value;
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.nextOptionPartial)
}

// optional string notes = 33;
inline bool IBContractDetails::has_notes() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void IBContractDetails::set_has_notes() {
  _has_bits_[1] |= 0x00000001u;
}
inline void IBContractDetails::clear_has_notes() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void IBContractDetails::clear_notes() {
  notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notes();
}
inline const ::std::string& IBContractDetails::notes() const {
  // @@protoc_insertion_point(field_get:IB.IBContractDetails.notes)
  return notes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_notes(const ::std::string& value) {
  set_has_notes();
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBContractDetails.notes)
}
inline void IBContractDetails::set_notes(const char* value) {
  set_has_notes();
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBContractDetails.notes)
}
inline void IBContractDetails::set_notes(const char* value, size_t size) {
  set_has_notes();
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBContractDetails.notes)
}
inline ::std::string* IBContractDetails::mutable_notes() {
  set_has_notes();
  // @@protoc_insertion_point(field_mutable:IB.IBContractDetails.notes)
  return notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBContractDetails::release_notes() {
  // @@protoc_insertion_point(field_release:IB.IBContractDetails.notes)
  clear_has_notes();
  return notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBContractDetails::set_allocated_notes(::std::string* notes) {
  if (notes != NULL) {
    set_has_notes();
  } else {
    clear_has_notes();
  }
  notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:IB.IBContractDetails.notes)
}

// -------------------------------------------------------------------

// IBScanData

// optional .IB.IBContractDetails contract = 1;
inline bool IBScanData::has_contract() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBScanData::set_has_contract() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBScanData::clear_has_contract() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBScanData::clear_contract() {
  if (contract_ != NULL) contract_->::IB::IBContractDetails::Clear();
  clear_has_contract();
}
inline const ::IB::IBContractDetails& IBScanData::contract() const {
  // @@protoc_insertion_point(field_get:IB.IBScanData.contract)
  return contract_ != NULL ? *contract_ : *default_instance_->contract_;
}
inline ::IB::IBContractDetails* IBScanData::mutable_contract() {
  set_has_contract();
  if (contract_ == NULL) {
    contract_ = new ::IB::IBContractDetails;
  }
  // @@protoc_insertion_point(field_mutable:IB.IBScanData.contract)
  return contract_;
}
inline ::IB::IBContractDetails* IBScanData::release_contract() {
  // @@protoc_insertion_point(field_release:IB.IBScanData.contract)
  clear_has_contract();
  ::IB::IBContractDetails* temp = contract_;
  contract_ = NULL;
  return temp;
}
inline void IBScanData::set_allocated_contract(::IB::IBContractDetails* contract) {
  delete contract_;
  contract_ = contract;
  if (contract) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  // @@protoc_insertion_point(field_set_allocated:IB.IBScanData.contract)
}

// optional int32 rank = 2;
inline bool IBScanData::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBScanData::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBScanData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBScanData::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 IBScanData::rank() const {
  // @@protoc_insertion_point(field_get:IB.IBScanData.rank)
  return rank_;
}
inline void IBScanData::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScanData.rank)
}

// optional string distance = 3;
inline bool IBScanData::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBScanData::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBScanData::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBScanData::clear_distance() {
  distance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_distance();
}
inline const ::std::string& IBScanData::distance() const {
  // @@protoc_insertion_point(field_get:IB.IBScanData.distance)
  return distance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_distance(const ::std::string& value) {
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScanData.distance)
}
inline void IBScanData::set_distance(const char* value) {
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScanData.distance)
}
inline void IBScanData::set_distance(const char* value, size_t size) {
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScanData.distance)
}
inline ::std::string* IBScanData::mutable_distance() {
  set_has_distance();
  // @@protoc_insertion_point(field_mutable:IB.IBScanData.distance)
  return distance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScanData::release_distance() {
  // @@protoc_insertion_point(field_release:IB.IBScanData.distance)
  clear_has_distance();
  return distance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_allocated_distance(::std::string* distance) {
  if (distance != NULL) {
    set_has_distance();
  } else {
    clear_has_distance();
  }
  distance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distance);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScanData.distance)
}

// optional string benchmark = 4;
inline bool IBScanData::has_benchmark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBScanData::set_has_benchmark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBScanData::clear_has_benchmark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBScanData::clear_benchmark() {
  benchmark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_benchmark();
}
inline const ::std::string& IBScanData::benchmark() const {
  // @@protoc_insertion_point(field_get:IB.IBScanData.benchmark)
  return benchmark_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_benchmark(const ::std::string& value) {
  set_has_benchmark();
  benchmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScanData.benchmark)
}
inline void IBScanData::set_benchmark(const char* value) {
  set_has_benchmark();
  benchmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScanData.benchmark)
}
inline void IBScanData::set_benchmark(const char* value, size_t size) {
  set_has_benchmark();
  benchmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScanData.benchmark)
}
inline ::std::string* IBScanData::mutable_benchmark() {
  set_has_benchmark();
  // @@protoc_insertion_point(field_mutable:IB.IBScanData.benchmark)
  return benchmark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScanData::release_benchmark() {
  // @@protoc_insertion_point(field_release:IB.IBScanData.benchmark)
  clear_has_benchmark();
  return benchmark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_allocated_benchmark(::std::string* benchmark) {
  if (benchmark != NULL) {
    set_has_benchmark();
  } else {
    clear_has_benchmark();
  }
  benchmark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), benchmark);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScanData.benchmark)
}

// optional string projection = 5;
inline bool IBScanData::has_projection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBScanData::set_has_projection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBScanData::clear_has_projection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBScanData::clear_projection() {
  projection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projection();
}
inline const ::std::string& IBScanData::projection() const {
  // @@protoc_insertion_point(field_get:IB.IBScanData.projection)
  return projection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_projection(const ::std::string& value) {
  set_has_projection();
  projection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScanData.projection)
}
inline void IBScanData::set_projection(const char* value) {
  set_has_projection();
  projection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScanData.projection)
}
inline void IBScanData::set_projection(const char* value, size_t size) {
  set_has_projection();
  projection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScanData.projection)
}
inline ::std::string* IBScanData::mutable_projection() {
  set_has_projection();
  // @@protoc_insertion_point(field_mutable:IB.IBScanData.projection)
  return projection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScanData::release_projection() {
  // @@protoc_insertion_point(field_release:IB.IBScanData.projection)
  clear_has_projection();
  return projection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_allocated_projection(::std::string* projection) {
  if (projection != NULL) {
    set_has_projection();
  } else {
    clear_has_projection();
  }
  projection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projection);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScanData.projection)
}

// optional string legsStr = 6;
inline bool IBScanData::has_legsstr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBScanData::set_has_legsstr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBScanData::clear_has_legsstr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBScanData::clear_legsstr() {
  legsstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_legsstr();
}
inline const ::std::string& IBScanData::legsstr() const {
  // @@protoc_insertion_point(field_get:IB.IBScanData.legsStr)
  return legsstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_legsstr(const ::std::string& value) {
  set_has_legsstr();
  legsstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScanData.legsStr)
}
inline void IBScanData::set_legsstr(const char* value) {
  set_has_legsstr();
  legsstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScanData.legsStr)
}
inline void IBScanData::set_legsstr(const char* value, size_t size) {
  set_has_legsstr();
  legsstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScanData.legsStr)
}
inline ::std::string* IBScanData::mutable_legsstr() {
  set_has_legsstr();
  // @@protoc_insertion_point(field_mutable:IB.IBScanData.legsStr)
  return legsstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScanData::release_legsstr() {
  // @@protoc_insertion_point(field_release:IB.IBScanData.legsStr)
  clear_has_legsstr();
  return legsstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScanData::set_allocated_legsstr(::std::string* legsstr) {
  if (legsstr != NULL) {
    set_has_legsstr();
  } else {
    clear_has_legsstr();
  }
  legsstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), legsstr);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScanData.legsStr)
}

// -------------------------------------------------------------------

// IBCommissionReport

// optional string execId = 1;
inline bool IBCommissionReport::has_execid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBCommissionReport::set_has_execid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBCommissionReport::clear_has_execid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBCommissionReport::clear_execid() {
  execid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_execid();
}
inline const ::std::string& IBCommissionReport::execid() const {
  // @@protoc_insertion_point(field_get:IB.IBCommissionReport.execId)
  return execid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBCommissionReport::set_execid(const ::std::string& value) {
  set_has_execid();
  execid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBCommissionReport.execId)
}
inline void IBCommissionReport::set_execid(const char* value) {
  set_has_execid();
  execid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBCommissionReport.execId)
}
inline void IBCommissionReport::set_execid(const char* value, size_t size) {
  set_has_execid();
  execid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBCommissionReport.execId)
}
inline ::std::string* IBCommissionReport::mutable_execid() {
  set_has_execid();
  // @@protoc_insertion_point(field_mutable:IB.IBCommissionReport.execId)
  return execid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBCommissionReport::release_execid() {
  // @@protoc_insertion_point(field_release:IB.IBCommissionReport.execId)
  clear_has_execid();
  return execid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBCommissionReport::set_allocated_execid(::std::string* execid) {
  if (execid != NULL) {
    set_has_execid();
  } else {
    clear_has_execid();
  }
  execid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), execid);
  // @@protoc_insertion_point(field_set_allocated:IB.IBCommissionReport.execId)
}

// optional double commission = 2;
inline bool IBCommissionReport::has_commission() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBCommissionReport::set_has_commission() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBCommissionReport::clear_has_commission() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBCommissionReport::clear_commission() {
  commission_ = 0;
  clear_has_commission();
}
inline double IBCommissionReport::commission() const {
  // @@protoc_insertion_point(field_get:IB.IBCommissionReport.commission)
  return commission_;
}
inline void IBCommissionReport::set_commission(double value) {
  set_has_commission();
  commission_ = value;
  // @@protoc_insertion_point(field_set:IB.IBCommissionReport.commission)
}

// optional string currency = 3;
inline bool IBCommissionReport::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBCommissionReport::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBCommissionReport::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBCommissionReport::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
inline const ::std::string& IBCommissionReport::currency() const {
  // @@protoc_insertion_point(field_get:IB.IBCommissionReport.currency)
  return currency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBCommissionReport::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBCommissionReport.currency)
}
inline void IBCommissionReport::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBCommissionReport.currency)
}
inline void IBCommissionReport::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBCommissionReport.currency)
}
inline ::std::string* IBCommissionReport::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:IB.IBCommissionReport.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBCommissionReport::release_currency() {
  // @@protoc_insertion_point(field_release:IB.IBCommissionReport.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBCommissionReport::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:IB.IBCommissionReport.currency)
}

// optional double realizedPNL = 4;
inline bool IBCommissionReport::has_realizedpnl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBCommissionReport::set_has_realizedpnl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBCommissionReport::clear_has_realizedpnl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBCommissionReport::clear_realizedpnl() {
  realizedpnl_ = 0;
  clear_has_realizedpnl();
}
inline double IBCommissionReport::realizedpnl() const {
  // @@protoc_insertion_point(field_get:IB.IBCommissionReport.realizedPNL)
  return realizedpnl_;
}
inline void IBCommissionReport::set_realizedpnl(double value) {
  set_has_realizedpnl();
  realizedpnl_ = value;
  // @@protoc_insertion_point(field_set:IB.IBCommissionReport.realizedPNL)
}

// optional double yieldValue = 5;
inline bool IBCommissionReport::has_yieldvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBCommissionReport::set_has_yieldvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBCommissionReport::clear_has_yieldvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBCommissionReport::clear_yieldvalue() {
  yieldvalue_ = 0;
  clear_has_yieldvalue();
}
inline double IBCommissionReport::yieldvalue() const {
  // @@protoc_insertion_point(field_get:IB.IBCommissionReport.yieldValue)
  return yieldvalue_;
}
inline void IBCommissionReport::set_yieldvalue(double value) {
  set_has_yieldvalue();
  yieldvalue_ = value;
  // @@protoc_insertion_point(field_set:IB.IBCommissionReport.yieldValue)
}

// optional int32 yieldRedemptionDate = 6;
inline bool IBCommissionReport::has_yieldredemptiondate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBCommissionReport::set_has_yieldredemptiondate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBCommissionReport::clear_has_yieldredemptiondate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBCommissionReport::clear_yieldredemptiondate() {
  yieldredemptiondate_ = 0;
  clear_has_yieldredemptiondate();
}
inline ::google::protobuf::int32 IBCommissionReport::yieldredemptiondate() const {
  // @@protoc_insertion_point(field_get:IB.IBCommissionReport.yieldRedemptionDate)
  return yieldredemptiondate_;
}
inline void IBCommissionReport::set_yieldredemptiondate(::google::protobuf::int32 value) {
  set_has_yieldredemptiondate();
  yieldredemptiondate_ = value;
  // @@protoc_insertion_point(field_set:IB.IBCommissionReport.yieldRedemptionDate)
}

// -------------------------------------------------------------------

// IBExecution

// optional string execId = 1;
inline bool IBExecution::has_execid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBExecution::set_has_execid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBExecution::clear_has_execid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBExecution::clear_execid() {
  execid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_execid();
}
inline const ::std::string& IBExecution::execid() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.execId)
  return execid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_execid(const ::std::string& value) {
  set_has_execid();
  execid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.execId)
}
inline void IBExecution::set_execid(const char* value) {
  set_has_execid();
  execid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.execId)
}
inline void IBExecution::set_execid(const char* value, size_t size) {
  set_has_execid();
  execid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.execId)
}
inline ::std::string* IBExecution::mutable_execid() {
  set_has_execid();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.execId)
  return execid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_execid() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.execId)
  clear_has_execid();
  return execid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_execid(::std::string* execid) {
  if (execid != NULL) {
    set_has_execid();
  } else {
    clear_has_execid();
  }
  execid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), execid);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.execId)
}

// optional string time = 2;
inline bool IBExecution::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBExecution::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBExecution::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBExecution::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& IBExecution::time() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.time)
}
inline void IBExecution::set_time(const char* value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.time)
}
inline void IBExecution::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.time)
}
inline ::std::string* IBExecution::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_time() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.time)
}

// optional string acctNumber = 3;
inline bool IBExecution::has_acctnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBExecution::set_has_acctnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBExecution::clear_has_acctnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBExecution::clear_acctnumber() {
  acctnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acctnumber();
}
inline const ::std::string& IBExecution::acctnumber() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.acctNumber)
  return acctnumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_acctnumber(const ::std::string& value) {
  set_has_acctnumber();
  acctnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.acctNumber)
}
inline void IBExecution::set_acctnumber(const char* value) {
  set_has_acctnumber();
  acctnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.acctNumber)
}
inline void IBExecution::set_acctnumber(const char* value, size_t size) {
  set_has_acctnumber();
  acctnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.acctNumber)
}
inline ::std::string* IBExecution::mutable_acctnumber() {
  set_has_acctnumber();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.acctNumber)
  return acctnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_acctnumber() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.acctNumber)
  clear_has_acctnumber();
  return acctnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_acctnumber(::std::string* acctnumber) {
  if (acctnumber != NULL) {
    set_has_acctnumber();
  } else {
    clear_has_acctnumber();
  }
  acctnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acctnumber);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.acctNumber)
}

// optional string exchange = 4;
inline bool IBExecution::has_exchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBExecution::set_has_exchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBExecution::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBExecution::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
inline const ::std::string& IBExecution::exchange() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.exchange)
}
inline void IBExecution::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.exchange)
}
inline void IBExecution::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.exchange)
}
inline ::std::string* IBExecution::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_exchange() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.exchange)
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.exchange)
}

// optional string side = 5;
inline bool IBExecution::has_side() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBExecution::set_has_side() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBExecution::clear_has_side() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBExecution::clear_side() {
  side_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_side();
}
inline const ::std::string& IBExecution::side() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.side)
  return side_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_side(const ::std::string& value) {
  set_has_side();
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.side)
}
inline void IBExecution::set_side(const char* value) {
  set_has_side();
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.side)
}
inline void IBExecution::set_side(const char* value, size_t size) {
  set_has_side();
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.side)
}
inline ::std::string* IBExecution::mutable_side() {
  set_has_side();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.side)
  return side_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_side() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.side)
  clear_has_side();
  return side_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_side(::std::string* side) {
  if (side != NULL) {
    set_has_side();
  } else {
    clear_has_side();
  }
  side_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), side);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.side)
}

// optional int32 shares = 6;
inline bool IBExecution::has_shares() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBExecution::set_has_shares() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBExecution::clear_has_shares() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBExecution::clear_shares() {
  shares_ = 0;
  clear_has_shares();
}
inline ::google::protobuf::int32 IBExecution::shares() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.shares)
  return shares_;
}
inline void IBExecution::set_shares(::google::protobuf::int32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.shares)
}

// optional double price = 7;
inline bool IBExecution::has_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBExecution::set_has_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBExecution::clear_has_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBExecution::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double IBExecution::price() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.price)
  return price_;
}
inline void IBExecution::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.price)
}

// optional int32 permId = 8;
inline bool IBExecution::has_permid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBExecution::set_has_permid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBExecution::clear_has_permid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBExecution::clear_permid() {
  permid_ = 0;
  clear_has_permid();
}
inline ::google::protobuf::int32 IBExecution::permid() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.permId)
  return permid_;
}
inline void IBExecution::set_permid(::google::protobuf::int32 value) {
  set_has_permid();
  permid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.permId)
}

// optional int32 clientId = 9;
inline bool IBExecution::has_clientid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IBExecution::set_has_clientid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IBExecution::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IBExecution::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 IBExecution::clientid() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.clientId)
  return clientid_;
}
inline void IBExecution::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.clientId)
}

// optional int32 orderId = 10;
inline bool IBExecution::has_orderid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IBExecution::set_has_orderid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IBExecution::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IBExecution::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 IBExecution::orderid() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.orderId)
  return orderid_;
}
inline void IBExecution::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.orderId)
}

// optional int32 liquidation = 11;
inline bool IBExecution::has_liquidation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IBExecution::set_has_liquidation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IBExecution::clear_has_liquidation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IBExecution::clear_liquidation() {
  liquidation_ = 0;
  clear_has_liquidation();
}
inline ::google::protobuf::int32 IBExecution::liquidation() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.liquidation)
  return liquidation_;
}
inline void IBExecution::set_liquidation(::google::protobuf::int32 value) {
  set_has_liquidation();
  liquidation_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.liquidation)
}

// optional int32 cumQty = 12;
inline bool IBExecution::has_cumqty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IBExecution::set_has_cumqty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IBExecution::clear_has_cumqty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IBExecution::clear_cumqty() {
  cumqty_ = 0;
  clear_has_cumqty();
}
inline ::google::protobuf::int32 IBExecution::cumqty() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.cumQty)
  return cumqty_;
}
inline void IBExecution::set_cumqty(::google::protobuf::int32 value) {
  set_has_cumqty();
  cumqty_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.cumQty)
}

// optional double avgPrice = 13;
inline bool IBExecution::has_avgprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IBExecution::set_has_avgprice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IBExecution::clear_has_avgprice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IBExecution::clear_avgprice() {
  avgprice_ = 0;
  clear_has_avgprice();
}
inline double IBExecution::avgprice() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.avgPrice)
  return avgprice_;
}
inline void IBExecution::set_avgprice(double value) {
  set_has_avgprice();
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.avgPrice)
}

// optional string orderRef = 14;
inline bool IBExecution::has_orderref() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IBExecution::set_has_orderref() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IBExecution::clear_has_orderref() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IBExecution::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderref();
}
inline const ::std::string& IBExecution::orderref() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.orderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_orderref(const ::std::string& value) {
  set_has_orderref();
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.orderRef)
}
inline void IBExecution::set_orderref(const char* value) {
  set_has_orderref();
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.orderRef)
}
inline void IBExecution::set_orderref(const char* value, size_t size) {
  set_has_orderref();
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.orderRef)
}
inline ::std::string* IBExecution::mutable_orderref() {
  set_has_orderref();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.orderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_orderref() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.orderRef)
  clear_has_orderref();
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    set_has_orderref();
  } else {
    clear_has_orderref();
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.orderRef)
}

// optional string evRule = 15;
inline bool IBExecution::has_evrule() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IBExecution::set_has_evrule() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IBExecution::clear_has_evrule() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IBExecution::clear_evrule() {
  evrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_evrule();
}
inline const ::std::string& IBExecution::evrule() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.evRule)
  return evrule_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_evrule(const ::std::string& value) {
  set_has_evrule();
  evrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.evRule)
}
inline void IBExecution::set_evrule(const char* value) {
  set_has_evrule();
  evrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.evRule)
}
inline void IBExecution::set_evrule(const char* value, size_t size) {
  set_has_evrule();
  evrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.evRule)
}
inline ::std::string* IBExecution::mutable_evrule() {
  set_has_evrule();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.evRule)
  return evrule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_evrule() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.evRule)
  clear_has_evrule();
  return evrule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_evrule(::std::string* evrule) {
  if (evrule != NULL) {
    set_has_evrule();
  } else {
    clear_has_evrule();
  }
  evrule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), evrule);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.evRule)
}

// optional double evMultiplier = 16;
inline bool IBExecution::has_evmultiplier() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IBExecution::set_has_evmultiplier() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IBExecution::clear_has_evmultiplier() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IBExecution::clear_evmultiplier() {
  evmultiplier_ = 0;
  clear_has_evmultiplier();
}
inline double IBExecution::evmultiplier() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.evMultiplier)
  return evmultiplier_;
}
inline void IBExecution::set_evmultiplier(double value) {
  set_has_evmultiplier();
  evmultiplier_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecution.evMultiplier)
}

// optional string modelCode = 17;
inline bool IBExecution::has_modelcode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IBExecution::set_has_modelcode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IBExecution::clear_has_modelcode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IBExecution::clear_modelcode() {
  modelcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modelcode();
}
inline const ::std::string& IBExecution::modelcode() const {
  // @@protoc_insertion_point(field_get:IB.IBExecution.modelCode)
  return modelcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_modelcode(const ::std::string& value) {
  set_has_modelcode();
  modelcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecution.modelCode)
}
inline void IBExecution::set_modelcode(const char* value) {
  set_has_modelcode();
  modelcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecution.modelCode)
}
inline void IBExecution::set_modelcode(const char* value, size_t size) {
  set_has_modelcode();
  modelcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecution.modelCode)
}
inline ::std::string* IBExecution::mutable_modelcode() {
  set_has_modelcode();
  // @@protoc_insertion_point(field_mutable:IB.IBExecution.modelCode)
  return modelcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecution::release_modelcode() {
  // @@protoc_insertion_point(field_release:IB.IBExecution.modelCode)
  clear_has_modelcode();
  return modelcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecution::set_allocated_modelcode(::std::string* modelcode) {
  if (modelcode != NULL) {
    set_has_modelcode();
  } else {
    clear_has_modelcode();
  }
  modelcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelcode);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecution.modelCode)
}

// -------------------------------------------------------------------

// IBExecutionFilter

// optional int32 clientId = 1;
inline bool IBExecutionFilter::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBExecutionFilter::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBExecutionFilter::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBExecutionFilter::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 IBExecutionFilter::clientid() const {
  // @@protoc_insertion_point(field_get:IB.IBExecutionFilter.clientId)
  return clientid_;
}
inline void IBExecutionFilter::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBExecutionFilter.clientId)
}

// optional string acctCode = 2;
inline bool IBExecutionFilter::has_acctcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBExecutionFilter::set_has_acctcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBExecutionFilter::clear_has_acctcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBExecutionFilter::clear_acctcode() {
  acctcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acctcode();
}
inline const ::std::string& IBExecutionFilter::acctcode() const {
  // @@protoc_insertion_point(field_get:IB.IBExecutionFilter.acctCode)
  return acctcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_acctcode(const ::std::string& value) {
  set_has_acctcode();
  acctcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecutionFilter.acctCode)
}
inline void IBExecutionFilter::set_acctcode(const char* value) {
  set_has_acctcode();
  acctcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecutionFilter.acctCode)
}
inline void IBExecutionFilter::set_acctcode(const char* value, size_t size) {
  set_has_acctcode();
  acctcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecutionFilter.acctCode)
}
inline ::std::string* IBExecutionFilter::mutable_acctcode() {
  set_has_acctcode();
  // @@protoc_insertion_point(field_mutable:IB.IBExecutionFilter.acctCode)
  return acctcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecutionFilter::release_acctcode() {
  // @@protoc_insertion_point(field_release:IB.IBExecutionFilter.acctCode)
  clear_has_acctcode();
  return acctcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_allocated_acctcode(::std::string* acctcode) {
  if (acctcode != NULL) {
    set_has_acctcode();
  } else {
    clear_has_acctcode();
  }
  acctcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acctcode);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecutionFilter.acctCode)
}

// optional string time = 3;
inline bool IBExecutionFilter::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBExecutionFilter::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBExecutionFilter::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBExecutionFilter::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& IBExecutionFilter::time() const {
  // @@protoc_insertion_point(field_get:IB.IBExecutionFilter.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecutionFilter.time)
}
inline void IBExecutionFilter::set_time(const char* value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecutionFilter.time)
}
inline void IBExecutionFilter::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecutionFilter.time)
}
inline ::std::string* IBExecutionFilter::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:IB.IBExecutionFilter.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecutionFilter::release_time() {
  // @@protoc_insertion_point(field_release:IB.IBExecutionFilter.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecutionFilter.time)
}

// optional string symbol = 4;
inline bool IBExecutionFilter::has_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBExecutionFilter::set_has_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBExecutionFilter::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBExecutionFilter::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& IBExecutionFilter::symbol() const {
  // @@protoc_insertion_point(field_get:IB.IBExecutionFilter.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecutionFilter.symbol)
}
inline void IBExecutionFilter::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecutionFilter.symbol)
}
inline void IBExecutionFilter::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecutionFilter.symbol)
}
inline ::std::string* IBExecutionFilter::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:IB.IBExecutionFilter.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecutionFilter::release_symbol() {
  // @@protoc_insertion_point(field_release:IB.IBExecutionFilter.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecutionFilter.symbol)
}

// optional string secType = 5;
inline bool IBExecutionFilter::has_sectype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBExecutionFilter::set_has_sectype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBExecutionFilter::clear_has_sectype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBExecutionFilter::clear_sectype() {
  sectype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sectype();
}
inline const ::std::string& IBExecutionFilter::sectype() const {
  // @@protoc_insertion_point(field_get:IB.IBExecutionFilter.secType)
  return sectype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_sectype(const ::std::string& value) {
  set_has_sectype();
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecutionFilter.secType)
}
inline void IBExecutionFilter::set_sectype(const char* value) {
  set_has_sectype();
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecutionFilter.secType)
}
inline void IBExecutionFilter::set_sectype(const char* value, size_t size) {
  set_has_sectype();
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecutionFilter.secType)
}
inline ::std::string* IBExecutionFilter::mutable_sectype() {
  set_has_sectype();
  // @@protoc_insertion_point(field_mutable:IB.IBExecutionFilter.secType)
  return sectype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecutionFilter::release_sectype() {
  // @@protoc_insertion_point(field_release:IB.IBExecutionFilter.secType)
  clear_has_sectype();
  return sectype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_allocated_sectype(::std::string* sectype) {
  if (sectype != NULL) {
    set_has_sectype();
  } else {
    clear_has_sectype();
  }
  sectype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sectype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecutionFilter.secType)
}

// optional string exchange = 6;
inline bool IBExecutionFilter::has_exchange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBExecutionFilter::set_has_exchange() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBExecutionFilter::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBExecutionFilter::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
inline const ::std::string& IBExecutionFilter::exchange() const {
  // @@protoc_insertion_point(field_get:IB.IBExecutionFilter.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecutionFilter.exchange)
}
inline void IBExecutionFilter::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecutionFilter.exchange)
}
inline void IBExecutionFilter::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecutionFilter.exchange)
}
inline ::std::string* IBExecutionFilter::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:IB.IBExecutionFilter.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecutionFilter::release_exchange() {
  // @@protoc_insertion_point(field_release:IB.IBExecutionFilter.exchange)
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecutionFilter.exchange)
}

// optional string side = 7;
inline bool IBExecutionFilter::has_side() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBExecutionFilter::set_has_side() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBExecutionFilter::clear_has_side() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBExecutionFilter::clear_side() {
  side_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_side();
}
inline const ::std::string& IBExecutionFilter::side() const {
  // @@protoc_insertion_point(field_get:IB.IBExecutionFilter.side)
  return side_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_side(const ::std::string& value) {
  set_has_side();
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBExecutionFilter.side)
}
inline void IBExecutionFilter::set_side(const char* value) {
  set_has_side();
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBExecutionFilter.side)
}
inline void IBExecutionFilter::set_side(const char* value, size_t size) {
  set_has_side();
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBExecutionFilter.side)
}
inline ::std::string* IBExecutionFilter::mutable_side() {
  set_has_side();
  // @@protoc_insertion_point(field_mutable:IB.IBExecutionFilter.side)
  return side_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBExecutionFilter::release_side() {
  // @@protoc_insertion_point(field_release:IB.IBExecutionFilter.side)
  clear_has_side();
  return side_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBExecutionFilter::set_allocated_side(::std::string* side) {
  if (side != NULL) {
    set_has_side();
  } else {
    clear_has_side();
  }
  side_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), side);
  // @@protoc_insertion_point(field_set_allocated:IB.IBExecutionFilter.side)
}

// -------------------------------------------------------------------

// IBOrderState

// optional string status = 1;
inline bool IBOrderState::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBOrderState::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBOrderState::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBOrderState::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
inline const ::std::string& IBOrderState::status() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrderState.status)
}
inline void IBOrderState::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrderState.status)
}
inline void IBOrderState::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrderState.status)
}
inline ::std::string* IBOrderState::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:IB.IBOrderState.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrderState::release_status() {
  // @@protoc_insertion_point(field_release:IB.IBOrderState.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrderState.status)
}

// optional string initMargin = 2;
inline bool IBOrderState::has_initmargin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBOrderState::set_has_initmargin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBOrderState::clear_has_initmargin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBOrderState::clear_initmargin() {
  initmargin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_initmargin();
}
inline const ::std::string& IBOrderState::initmargin() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.initMargin)
  return initmargin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_initmargin(const ::std::string& value) {
  set_has_initmargin();
  initmargin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrderState.initMargin)
}
inline void IBOrderState::set_initmargin(const char* value) {
  set_has_initmargin();
  initmargin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrderState.initMargin)
}
inline void IBOrderState::set_initmargin(const char* value, size_t size) {
  set_has_initmargin();
  initmargin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrderState.initMargin)
}
inline ::std::string* IBOrderState::mutable_initmargin() {
  set_has_initmargin();
  // @@protoc_insertion_point(field_mutable:IB.IBOrderState.initMargin)
  return initmargin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrderState::release_initmargin() {
  // @@protoc_insertion_point(field_release:IB.IBOrderState.initMargin)
  clear_has_initmargin();
  return initmargin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_allocated_initmargin(::std::string* initmargin) {
  if (initmargin != NULL) {
    set_has_initmargin();
  } else {
    clear_has_initmargin();
  }
  initmargin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initmargin);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrderState.initMargin)
}

// optional string maintMargin = 3;
inline bool IBOrderState::has_maintmargin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBOrderState::set_has_maintmargin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBOrderState::clear_has_maintmargin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBOrderState::clear_maintmargin() {
  maintmargin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maintmargin();
}
inline const ::std::string& IBOrderState::maintmargin() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.maintMargin)
  return maintmargin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_maintmargin(const ::std::string& value) {
  set_has_maintmargin();
  maintmargin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrderState.maintMargin)
}
inline void IBOrderState::set_maintmargin(const char* value) {
  set_has_maintmargin();
  maintmargin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrderState.maintMargin)
}
inline void IBOrderState::set_maintmargin(const char* value, size_t size) {
  set_has_maintmargin();
  maintmargin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrderState.maintMargin)
}
inline ::std::string* IBOrderState::mutable_maintmargin() {
  set_has_maintmargin();
  // @@protoc_insertion_point(field_mutable:IB.IBOrderState.maintMargin)
  return maintmargin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrderState::release_maintmargin() {
  // @@protoc_insertion_point(field_release:IB.IBOrderState.maintMargin)
  clear_has_maintmargin();
  return maintmargin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_allocated_maintmargin(::std::string* maintmargin) {
  if (maintmargin != NULL) {
    set_has_maintmargin();
  } else {
    clear_has_maintmargin();
  }
  maintmargin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maintmargin);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrderState.maintMargin)
}

// optional string equityWithLoan = 4;
inline bool IBOrderState::has_equitywithloan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBOrderState::set_has_equitywithloan() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBOrderState::clear_has_equitywithloan() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBOrderState::clear_equitywithloan() {
  equitywithloan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_equitywithloan();
}
inline const ::std::string& IBOrderState::equitywithloan() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.equityWithLoan)
  return equitywithloan_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_equitywithloan(const ::std::string& value) {
  set_has_equitywithloan();
  equitywithloan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrderState.equityWithLoan)
}
inline void IBOrderState::set_equitywithloan(const char* value) {
  set_has_equitywithloan();
  equitywithloan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrderState.equityWithLoan)
}
inline void IBOrderState::set_equitywithloan(const char* value, size_t size) {
  set_has_equitywithloan();
  equitywithloan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrderState.equityWithLoan)
}
inline ::std::string* IBOrderState::mutable_equitywithloan() {
  set_has_equitywithloan();
  // @@protoc_insertion_point(field_mutable:IB.IBOrderState.equityWithLoan)
  return equitywithloan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrderState::release_equitywithloan() {
  // @@protoc_insertion_point(field_release:IB.IBOrderState.equityWithLoan)
  clear_has_equitywithloan();
  return equitywithloan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_allocated_equitywithloan(::std::string* equitywithloan) {
  if (equitywithloan != NULL) {
    set_has_equitywithloan();
  } else {
    clear_has_equitywithloan();
  }
  equitywithloan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), equitywithloan);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrderState.equityWithLoan)
}

// optional double commission = 5;
inline bool IBOrderState::has_commission() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBOrderState::set_has_commission() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBOrderState::clear_has_commission() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBOrderState::clear_commission() {
  commission_ = 0;
  clear_has_commission();
}
inline double IBOrderState::commission() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.commission)
  return commission_;
}
inline void IBOrderState::set_commission(double value) {
  set_has_commission();
  commission_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrderState.commission)
}

// optional double minCommission = 6;
inline bool IBOrderState::has_mincommission() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBOrderState::set_has_mincommission() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBOrderState::clear_has_mincommission() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBOrderState::clear_mincommission() {
  mincommission_ = 0;
  clear_has_mincommission();
}
inline double IBOrderState::mincommission() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.minCommission)
  return mincommission_;
}
inline void IBOrderState::set_mincommission(double value) {
  set_has_mincommission();
  mincommission_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrderState.minCommission)
}

// optional double maxCommission = 7;
inline bool IBOrderState::has_maxcommission() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBOrderState::set_has_maxcommission() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBOrderState::clear_has_maxcommission() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBOrderState::clear_maxcommission() {
  maxcommission_ = 0;
  clear_has_maxcommission();
}
inline double IBOrderState::maxcommission() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.maxCommission)
  return maxcommission_;
}
inline void IBOrderState::set_maxcommission(double value) {
  set_has_maxcommission();
  maxcommission_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrderState.maxCommission)
}

// optional string commissionCurrency = 8;
inline bool IBOrderState::has_commissioncurrency() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBOrderState::set_has_commissioncurrency() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBOrderState::clear_has_commissioncurrency() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBOrderState::clear_commissioncurrency() {
  commissioncurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commissioncurrency();
}
inline const ::std::string& IBOrderState::commissioncurrency() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.commissionCurrency)
  return commissioncurrency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_commissioncurrency(const ::std::string& value) {
  set_has_commissioncurrency();
  commissioncurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrderState.commissionCurrency)
}
inline void IBOrderState::set_commissioncurrency(const char* value) {
  set_has_commissioncurrency();
  commissioncurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrderState.commissionCurrency)
}
inline void IBOrderState::set_commissioncurrency(const char* value, size_t size) {
  set_has_commissioncurrency();
  commissioncurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrderState.commissionCurrency)
}
inline ::std::string* IBOrderState::mutable_commissioncurrency() {
  set_has_commissioncurrency();
  // @@protoc_insertion_point(field_mutable:IB.IBOrderState.commissionCurrency)
  return commissioncurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrderState::release_commissioncurrency() {
  // @@protoc_insertion_point(field_release:IB.IBOrderState.commissionCurrency)
  clear_has_commissioncurrency();
  return commissioncurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_allocated_commissioncurrency(::std::string* commissioncurrency) {
  if (commissioncurrency != NULL) {
    set_has_commissioncurrency();
  } else {
    clear_has_commissioncurrency();
  }
  commissioncurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commissioncurrency);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrderState.commissionCurrency)
}

// optional string warningText = 9;
inline bool IBOrderState::has_warningtext() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IBOrderState::set_has_warningtext() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IBOrderState::clear_has_warningtext() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IBOrderState::clear_warningtext() {
  warningtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warningtext();
}
inline const ::std::string& IBOrderState::warningtext() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderState.warningText)
  return warningtext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_warningtext(const ::std::string& value) {
  set_has_warningtext();
  warningtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrderState.warningText)
}
inline void IBOrderState::set_warningtext(const char* value) {
  set_has_warningtext();
  warningtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrderState.warningText)
}
inline void IBOrderState::set_warningtext(const char* value, size_t size) {
  set_has_warningtext();
  warningtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrderState.warningText)
}
inline ::std::string* IBOrderState::mutable_warningtext() {
  set_has_warningtext();
  // @@protoc_insertion_point(field_mutable:IB.IBOrderState.warningText)
  return warningtext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrderState::release_warningtext() {
  // @@protoc_insertion_point(field_release:IB.IBOrderState.warningText)
  clear_has_warningtext();
  return warningtext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrderState::set_allocated_warningtext(::std::string* warningtext) {
  if (warningtext != NULL) {
    set_has_warningtext();
  } else {
    clear_has_warningtext();
  }
  warningtext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningtext);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrderState.warningText)
}

// -------------------------------------------------------------------

// IBScannerSubscription

// optional int32 numberOfRows = 1;
inline bool IBScannerSubscription::has_numberofrows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBScannerSubscription::set_has_numberofrows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBScannerSubscription::clear_has_numberofrows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBScannerSubscription::clear_numberofrows() {
  numberofrows_ = 0;
  clear_has_numberofrows();
}
inline ::google::protobuf::int32 IBScannerSubscription::numberofrows() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.numberOfRows)
  return numberofrows_;
}
inline void IBScannerSubscription::set_numberofrows(::google::protobuf::int32 value) {
  set_has_numberofrows();
  numberofrows_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.numberOfRows)
}

// optional string instrument = 2;
inline bool IBScannerSubscription::has_instrument() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBScannerSubscription::set_has_instrument() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBScannerSubscription::clear_has_instrument() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBScannerSubscription::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument();
}
inline const ::std::string& IBScannerSubscription::instrument() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.instrument)
  return instrument_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_instrument(const ::std::string& value) {
  set_has_instrument();
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.instrument)
}
inline void IBScannerSubscription::set_instrument(const char* value) {
  set_has_instrument();
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.instrument)
}
inline void IBScannerSubscription::set_instrument(const char* value, size_t size) {
  set_has_instrument();
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.instrument)
}
inline ::std::string* IBScannerSubscription::mutable_instrument() {
  set_has_instrument();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.instrument)
  return instrument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_instrument() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.instrument)
  clear_has_instrument();
  return instrument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_instrument(::std::string* instrument) {
  if (instrument != NULL) {
    set_has_instrument();
  } else {
    clear_has_instrument();
  }
  instrument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.instrument)
}

// optional string locationCode = 3;
inline bool IBScannerSubscription::has_locationcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBScannerSubscription::set_has_locationcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBScannerSubscription::clear_has_locationcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBScannerSubscription::clear_locationcode() {
  locationcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locationcode();
}
inline const ::std::string& IBScannerSubscription::locationcode() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.locationCode)
  return locationcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_locationcode(const ::std::string& value) {
  set_has_locationcode();
  locationcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.locationCode)
}
inline void IBScannerSubscription::set_locationcode(const char* value) {
  set_has_locationcode();
  locationcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.locationCode)
}
inline void IBScannerSubscription::set_locationcode(const char* value, size_t size) {
  set_has_locationcode();
  locationcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.locationCode)
}
inline ::std::string* IBScannerSubscription::mutable_locationcode() {
  set_has_locationcode();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.locationCode)
  return locationcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_locationcode() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.locationCode)
  clear_has_locationcode();
  return locationcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_locationcode(::std::string* locationcode) {
  if (locationcode != NULL) {
    set_has_locationcode();
  } else {
    clear_has_locationcode();
  }
  locationcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locationcode);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.locationCode)
}

// optional string scanCode = 4;
inline bool IBScannerSubscription::has_scancode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBScannerSubscription::set_has_scancode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBScannerSubscription::clear_has_scancode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBScannerSubscription::clear_scancode() {
  scancode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scancode();
}
inline const ::std::string& IBScannerSubscription::scancode() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.scanCode)
  return scancode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_scancode(const ::std::string& value) {
  set_has_scancode();
  scancode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.scanCode)
}
inline void IBScannerSubscription::set_scancode(const char* value) {
  set_has_scancode();
  scancode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.scanCode)
}
inline void IBScannerSubscription::set_scancode(const char* value, size_t size) {
  set_has_scancode();
  scancode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.scanCode)
}
inline ::std::string* IBScannerSubscription::mutable_scancode() {
  set_has_scancode();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.scanCode)
  return scancode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_scancode() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.scanCode)
  clear_has_scancode();
  return scancode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_scancode(::std::string* scancode) {
  if (scancode != NULL) {
    set_has_scancode();
  } else {
    clear_has_scancode();
  }
  scancode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scancode);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.scanCode)
}

// optional double abovePrice = 5;
inline bool IBScannerSubscription::has_aboveprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBScannerSubscription::set_has_aboveprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBScannerSubscription::clear_has_aboveprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBScannerSubscription::clear_aboveprice() {
  aboveprice_ = 0;
  clear_has_aboveprice();
}
inline double IBScannerSubscription::aboveprice() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.abovePrice)
  return aboveprice_;
}
inline void IBScannerSubscription::set_aboveprice(double value) {
  set_has_aboveprice();
  aboveprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.abovePrice)
}

// optional double belowPrice = 6;
inline bool IBScannerSubscription::has_belowprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBScannerSubscription::set_has_belowprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBScannerSubscription::clear_has_belowprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBScannerSubscription::clear_belowprice() {
  belowprice_ = 0;
  clear_has_belowprice();
}
inline double IBScannerSubscription::belowprice() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.belowPrice)
  return belowprice_;
}
inline void IBScannerSubscription::set_belowprice(double value) {
  set_has_belowprice();
  belowprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.belowPrice)
}

// optional int32 aboveVolume = 7;
inline bool IBScannerSubscription::has_abovevolume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBScannerSubscription::set_has_abovevolume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBScannerSubscription::clear_has_abovevolume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBScannerSubscription::clear_abovevolume() {
  abovevolume_ = 0;
  clear_has_abovevolume();
}
inline ::google::protobuf::int32 IBScannerSubscription::abovevolume() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.aboveVolume)
  return abovevolume_;
}
inline void IBScannerSubscription::set_abovevolume(::google::protobuf::int32 value) {
  set_has_abovevolume();
  abovevolume_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.aboveVolume)
}

// optional double marketCapAbove = 8;
inline bool IBScannerSubscription::has_marketcapabove() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBScannerSubscription::set_has_marketcapabove() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBScannerSubscription::clear_has_marketcapabove() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBScannerSubscription::clear_marketcapabove() {
  marketcapabove_ = 0;
  clear_has_marketcapabove();
}
inline double IBScannerSubscription::marketcapabove() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.marketCapAbove)
  return marketcapabove_;
}
inline void IBScannerSubscription::set_marketcapabove(double value) {
  set_has_marketcapabove();
  marketcapabove_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.marketCapAbove)
}

// optional double marketCapBelow = 9;
inline bool IBScannerSubscription::has_marketcapbelow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IBScannerSubscription::set_has_marketcapbelow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IBScannerSubscription::clear_has_marketcapbelow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IBScannerSubscription::clear_marketcapbelow() {
  marketcapbelow_ = 0;
  clear_has_marketcapbelow();
}
inline double IBScannerSubscription::marketcapbelow() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.marketCapBelow)
  return marketcapbelow_;
}
inline void IBScannerSubscription::set_marketcapbelow(double value) {
  set_has_marketcapbelow();
  marketcapbelow_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.marketCapBelow)
}

// optional string moodyRatingAbove = 10;
inline bool IBScannerSubscription::has_moodyratingabove() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IBScannerSubscription::set_has_moodyratingabove() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IBScannerSubscription::clear_has_moodyratingabove() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IBScannerSubscription::clear_moodyratingabove() {
  moodyratingabove_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moodyratingabove();
}
inline const ::std::string& IBScannerSubscription::moodyratingabove() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.moodyRatingAbove)
  return moodyratingabove_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_moodyratingabove(const ::std::string& value) {
  set_has_moodyratingabove();
  moodyratingabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.moodyRatingAbove)
}
inline void IBScannerSubscription::set_moodyratingabove(const char* value) {
  set_has_moodyratingabove();
  moodyratingabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.moodyRatingAbove)
}
inline void IBScannerSubscription::set_moodyratingabove(const char* value, size_t size) {
  set_has_moodyratingabove();
  moodyratingabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.moodyRatingAbove)
}
inline ::std::string* IBScannerSubscription::mutable_moodyratingabove() {
  set_has_moodyratingabove();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.moodyRatingAbove)
  return moodyratingabove_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_moodyratingabove() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.moodyRatingAbove)
  clear_has_moodyratingabove();
  return moodyratingabove_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_moodyratingabove(::std::string* moodyratingabove) {
  if (moodyratingabove != NULL) {
    set_has_moodyratingabove();
  } else {
    clear_has_moodyratingabove();
  }
  moodyratingabove_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moodyratingabove);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.moodyRatingAbove)
}

// optional string moodyRatingBelow = 11;
inline bool IBScannerSubscription::has_moodyratingbelow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IBScannerSubscription::set_has_moodyratingbelow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IBScannerSubscription::clear_has_moodyratingbelow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IBScannerSubscription::clear_moodyratingbelow() {
  moodyratingbelow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moodyratingbelow();
}
inline const ::std::string& IBScannerSubscription::moodyratingbelow() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.moodyRatingBelow)
  return moodyratingbelow_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_moodyratingbelow(const ::std::string& value) {
  set_has_moodyratingbelow();
  moodyratingbelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.moodyRatingBelow)
}
inline void IBScannerSubscription::set_moodyratingbelow(const char* value) {
  set_has_moodyratingbelow();
  moodyratingbelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.moodyRatingBelow)
}
inline void IBScannerSubscription::set_moodyratingbelow(const char* value, size_t size) {
  set_has_moodyratingbelow();
  moodyratingbelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.moodyRatingBelow)
}
inline ::std::string* IBScannerSubscription::mutable_moodyratingbelow() {
  set_has_moodyratingbelow();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.moodyRatingBelow)
  return moodyratingbelow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_moodyratingbelow() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.moodyRatingBelow)
  clear_has_moodyratingbelow();
  return moodyratingbelow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_moodyratingbelow(::std::string* moodyratingbelow) {
  if (moodyratingbelow != NULL) {
    set_has_moodyratingbelow();
  } else {
    clear_has_moodyratingbelow();
  }
  moodyratingbelow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moodyratingbelow);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.moodyRatingBelow)
}

// optional string spRatingAbove = 12;
inline bool IBScannerSubscription::has_spratingabove() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IBScannerSubscription::set_has_spratingabove() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IBScannerSubscription::clear_has_spratingabove() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IBScannerSubscription::clear_spratingabove() {
  spratingabove_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spratingabove();
}
inline const ::std::string& IBScannerSubscription::spratingabove() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.spRatingAbove)
  return spratingabove_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_spratingabove(const ::std::string& value) {
  set_has_spratingabove();
  spratingabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.spRatingAbove)
}
inline void IBScannerSubscription::set_spratingabove(const char* value) {
  set_has_spratingabove();
  spratingabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.spRatingAbove)
}
inline void IBScannerSubscription::set_spratingabove(const char* value, size_t size) {
  set_has_spratingabove();
  spratingabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.spRatingAbove)
}
inline ::std::string* IBScannerSubscription::mutable_spratingabove() {
  set_has_spratingabove();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.spRatingAbove)
  return spratingabove_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_spratingabove() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.spRatingAbove)
  clear_has_spratingabove();
  return spratingabove_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_spratingabove(::std::string* spratingabove) {
  if (spratingabove != NULL) {
    set_has_spratingabove();
  } else {
    clear_has_spratingabove();
  }
  spratingabove_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spratingabove);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.spRatingAbove)
}

// optional string spRatingBelow = 13;
inline bool IBScannerSubscription::has_spratingbelow() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IBScannerSubscription::set_has_spratingbelow() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IBScannerSubscription::clear_has_spratingbelow() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IBScannerSubscription::clear_spratingbelow() {
  spratingbelow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spratingbelow();
}
inline const ::std::string& IBScannerSubscription::spratingbelow() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.spRatingBelow)
  return spratingbelow_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_spratingbelow(const ::std::string& value) {
  set_has_spratingbelow();
  spratingbelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.spRatingBelow)
}
inline void IBScannerSubscription::set_spratingbelow(const char* value) {
  set_has_spratingbelow();
  spratingbelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.spRatingBelow)
}
inline void IBScannerSubscription::set_spratingbelow(const char* value, size_t size) {
  set_has_spratingbelow();
  spratingbelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.spRatingBelow)
}
inline ::std::string* IBScannerSubscription::mutable_spratingbelow() {
  set_has_spratingbelow();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.spRatingBelow)
  return spratingbelow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_spratingbelow() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.spRatingBelow)
  clear_has_spratingbelow();
  return spratingbelow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_spratingbelow(::std::string* spratingbelow) {
  if (spratingbelow != NULL) {
    set_has_spratingbelow();
  } else {
    clear_has_spratingbelow();
  }
  spratingbelow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spratingbelow);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.spRatingBelow)
}

// optional string maturityDateAbove = 14;
inline bool IBScannerSubscription::has_maturitydateabove() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IBScannerSubscription::set_has_maturitydateabove() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IBScannerSubscription::clear_has_maturitydateabove() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IBScannerSubscription::clear_maturitydateabove() {
  maturitydateabove_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maturitydateabove();
}
inline const ::std::string& IBScannerSubscription::maturitydateabove() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.maturityDateAbove)
  return maturitydateabove_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_maturitydateabove(const ::std::string& value) {
  set_has_maturitydateabove();
  maturitydateabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.maturityDateAbove)
}
inline void IBScannerSubscription::set_maturitydateabove(const char* value) {
  set_has_maturitydateabove();
  maturitydateabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.maturityDateAbove)
}
inline void IBScannerSubscription::set_maturitydateabove(const char* value, size_t size) {
  set_has_maturitydateabove();
  maturitydateabove_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.maturityDateAbove)
}
inline ::std::string* IBScannerSubscription::mutable_maturitydateabove() {
  set_has_maturitydateabove();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.maturityDateAbove)
  return maturitydateabove_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_maturitydateabove() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.maturityDateAbove)
  clear_has_maturitydateabove();
  return maturitydateabove_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_maturitydateabove(::std::string* maturitydateabove) {
  if (maturitydateabove != NULL) {
    set_has_maturitydateabove();
  } else {
    clear_has_maturitydateabove();
  }
  maturitydateabove_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maturitydateabove);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.maturityDateAbove)
}

// optional string maturityDateBelow = 15;
inline bool IBScannerSubscription::has_maturitydatebelow() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IBScannerSubscription::set_has_maturitydatebelow() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IBScannerSubscription::clear_has_maturitydatebelow() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IBScannerSubscription::clear_maturitydatebelow() {
  maturitydatebelow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maturitydatebelow();
}
inline const ::std::string& IBScannerSubscription::maturitydatebelow() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.maturityDateBelow)
  return maturitydatebelow_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_maturitydatebelow(const ::std::string& value) {
  set_has_maturitydatebelow();
  maturitydatebelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.maturityDateBelow)
}
inline void IBScannerSubscription::set_maturitydatebelow(const char* value) {
  set_has_maturitydatebelow();
  maturitydatebelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.maturityDateBelow)
}
inline void IBScannerSubscription::set_maturitydatebelow(const char* value, size_t size) {
  set_has_maturitydatebelow();
  maturitydatebelow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.maturityDateBelow)
}
inline ::std::string* IBScannerSubscription::mutable_maturitydatebelow() {
  set_has_maturitydatebelow();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.maturityDateBelow)
  return maturitydatebelow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_maturitydatebelow() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.maturityDateBelow)
  clear_has_maturitydatebelow();
  return maturitydatebelow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_maturitydatebelow(::std::string* maturitydatebelow) {
  if (maturitydatebelow != NULL) {
    set_has_maturitydatebelow();
  } else {
    clear_has_maturitydatebelow();
  }
  maturitydatebelow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maturitydatebelow);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.maturityDateBelow)
}

// optional double couponRateAbove = 16;
inline bool IBScannerSubscription::has_couponrateabove() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IBScannerSubscription::set_has_couponrateabove() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IBScannerSubscription::clear_has_couponrateabove() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IBScannerSubscription::clear_couponrateabove() {
  couponrateabove_ = 0;
  clear_has_couponrateabove();
}
inline double IBScannerSubscription::couponrateabove() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.couponRateAbove)
  return couponrateabove_;
}
inline void IBScannerSubscription::set_couponrateabove(double value) {
  set_has_couponrateabove();
  couponrateabove_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.couponRateAbove)
}

// optional double couponRateBelow = 17;
inline bool IBScannerSubscription::has_couponratebelow() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IBScannerSubscription::set_has_couponratebelow() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IBScannerSubscription::clear_has_couponratebelow() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IBScannerSubscription::clear_couponratebelow() {
  couponratebelow_ = 0;
  clear_has_couponratebelow();
}
inline double IBScannerSubscription::couponratebelow() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.couponRateBelow)
  return couponratebelow_;
}
inline void IBScannerSubscription::set_couponratebelow(double value) {
  set_has_couponratebelow();
  couponratebelow_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.couponRateBelow)
}

// optional int32 excludeConvertible = 18;
inline bool IBScannerSubscription::has_excludeconvertible() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IBScannerSubscription::set_has_excludeconvertible() {
  _has_bits_[0] |= 0x00020000u;
}
inline void IBScannerSubscription::clear_has_excludeconvertible() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void IBScannerSubscription::clear_excludeconvertible() {
  excludeconvertible_ = 0;
  clear_has_excludeconvertible();
}
inline ::google::protobuf::int32 IBScannerSubscription::excludeconvertible() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.excludeConvertible)
  return excludeconvertible_;
}
inline void IBScannerSubscription::set_excludeconvertible(::google::protobuf::int32 value) {
  set_has_excludeconvertible();
  excludeconvertible_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.excludeConvertible)
}

// optional int32 averageOptionVolumeAbove = 19;
inline bool IBScannerSubscription::has_averageoptionvolumeabove() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IBScannerSubscription::set_has_averageoptionvolumeabove() {
  _has_bits_[0] |= 0x00040000u;
}
inline void IBScannerSubscription::clear_has_averageoptionvolumeabove() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void IBScannerSubscription::clear_averageoptionvolumeabove() {
  averageoptionvolumeabove_ = 0;
  clear_has_averageoptionvolumeabove();
}
inline ::google::protobuf::int32 IBScannerSubscription::averageoptionvolumeabove() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.averageOptionVolumeAbove)
  return averageoptionvolumeabove_;
}
inline void IBScannerSubscription::set_averageoptionvolumeabove(::google::protobuf::int32 value) {
  set_has_averageoptionvolumeabove();
  averageoptionvolumeabove_ = value;
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.averageOptionVolumeAbove)
}

// optional string scannerSettingPairs = 20;
inline bool IBScannerSubscription::has_scannersettingpairs() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void IBScannerSubscription::set_has_scannersettingpairs() {
  _has_bits_[0] |= 0x00080000u;
}
inline void IBScannerSubscription::clear_has_scannersettingpairs() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void IBScannerSubscription::clear_scannersettingpairs() {
  scannersettingpairs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scannersettingpairs();
}
inline const ::std::string& IBScannerSubscription::scannersettingpairs() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.scannerSettingPairs)
  return scannersettingpairs_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_scannersettingpairs(const ::std::string& value) {
  set_has_scannersettingpairs();
  scannersettingpairs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.scannerSettingPairs)
}
inline void IBScannerSubscription::set_scannersettingpairs(const char* value) {
  set_has_scannersettingpairs();
  scannersettingpairs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.scannerSettingPairs)
}
inline void IBScannerSubscription::set_scannersettingpairs(const char* value, size_t size) {
  set_has_scannersettingpairs();
  scannersettingpairs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.scannerSettingPairs)
}
inline ::std::string* IBScannerSubscription::mutable_scannersettingpairs() {
  set_has_scannersettingpairs();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.scannerSettingPairs)
  return scannersettingpairs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_scannersettingpairs() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.scannerSettingPairs)
  clear_has_scannersettingpairs();
  return scannersettingpairs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_scannersettingpairs(::std::string* scannersettingpairs) {
  if (scannersettingpairs != NULL) {
    set_has_scannersettingpairs();
  } else {
    clear_has_scannersettingpairs();
  }
  scannersettingpairs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scannersettingpairs);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.scannerSettingPairs)
}

// optional string stockTypeFilter = 21;
inline bool IBScannerSubscription::has_stocktypefilter() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void IBScannerSubscription::set_has_stocktypefilter() {
  _has_bits_[0] |= 0x00100000u;
}
inline void IBScannerSubscription::clear_has_stocktypefilter() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void IBScannerSubscription::clear_stocktypefilter() {
  stocktypefilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stocktypefilter();
}
inline const ::std::string& IBScannerSubscription::stocktypefilter() const {
  // @@protoc_insertion_point(field_get:IB.IBScannerSubscription.stockTypeFilter)
  return stocktypefilter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_stocktypefilter(const ::std::string& value) {
  set_has_stocktypefilter();
  stocktypefilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBScannerSubscription.stockTypeFilter)
}
inline void IBScannerSubscription::set_stocktypefilter(const char* value) {
  set_has_stocktypefilter();
  stocktypefilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBScannerSubscription.stockTypeFilter)
}
inline void IBScannerSubscription::set_stocktypefilter(const char* value, size_t size) {
  set_has_stocktypefilter();
  stocktypefilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBScannerSubscription.stockTypeFilter)
}
inline ::std::string* IBScannerSubscription::mutable_stocktypefilter() {
  set_has_stocktypefilter();
  // @@protoc_insertion_point(field_mutable:IB.IBScannerSubscription.stockTypeFilter)
  return stocktypefilter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBScannerSubscription::release_stocktypefilter() {
  // @@protoc_insertion_point(field_release:IB.IBScannerSubscription.stockTypeFilter)
  clear_has_stocktypefilter();
  return stocktypefilter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBScannerSubscription::set_allocated_stocktypefilter(::std::string* stocktypefilter) {
  if (stocktypefilter != NULL) {
    set_has_stocktypefilter();
  } else {
    clear_has_stocktypefilter();
  }
  stocktypefilter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stocktypefilter);
  // @@protoc_insertion_point(field_set_allocated:IB.IBScannerSubscription.stockTypeFilter)
}

// -------------------------------------------------------------------

// IBOrderComboLeg

// optional double price = 1;
inline bool IBOrderComboLeg::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBOrderComboLeg::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBOrderComboLeg::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBOrderComboLeg::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double IBOrderComboLeg::price() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderComboLeg.price)
  return price_;
}
inline void IBOrderComboLeg::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrderComboLeg.price)
}

// -------------------------------------------------------------------

// IBOrderConditionData

// optional int32 typevalue = 1;
inline bool IBOrderConditionData::has_typevalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBOrderConditionData::set_has_typevalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBOrderConditionData::clear_has_typevalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBOrderConditionData::clear_typevalue() {
  typevalue_ = 0;
  clear_has_typevalue();
}
inline ::google::protobuf::int32 IBOrderConditionData::typevalue() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderConditionData.typevalue)
  return typevalue_;
}
inline void IBOrderConditionData::set_typevalue(::google::protobuf::int32 value) {
  set_has_typevalue();
  typevalue_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrderConditionData.typevalue)
}

// optional bool isConjunctionConnection = 2;
inline bool IBOrderConditionData::has_isconjunctionconnection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBOrderConditionData::set_has_isconjunctionconnection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBOrderConditionData::clear_has_isconjunctionconnection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBOrderConditionData::clear_isconjunctionconnection() {
  isconjunctionconnection_ = false;
  clear_has_isconjunctionconnection();
}
inline bool IBOrderConditionData::isconjunctionconnection() const {
  // @@protoc_insertion_point(field_get:IB.IBOrderConditionData.isConjunctionConnection)
  return isconjunctionconnection_;
}
inline void IBOrderConditionData::set_isconjunctionconnection(bool value) {
  set_has_isconjunctionconnection();
  isconjunctionconnection_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrderConditionData.isConjunctionConnection)
}

// -------------------------------------------------------------------

// IBOrder

// optional int32 orderId = 1;
inline bool IBOrder::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBOrder::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBOrder::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBOrder::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 IBOrder::orderid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.orderId)
  return orderid_;
}
inline void IBOrder::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.orderId)
}

// optional int32 clientId = 2;
inline bool IBOrder::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBOrder::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBOrder::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBOrder::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 IBOrder::clientid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.clientId)
  return clientid_;
}
inline void IBOrder::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.clientId)
}

// optional int32 permId = 3;
inline bool IBOrder::has_permid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IBOrder::set_has_permid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IBOrder::clear_has_permid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IBOrder::clear_permid() {
  permid_ = 0;
  clear_has_permid();
}
inline ::google::protobuf::int32 IBOrder::permid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.permId)
  return permid_;
}
inline void IBOrder::set_permid(::google::protobuf::int32 value) {
  set_has_permid();
  permid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.permId)
}

// optional string action = 4;
inline bool IBOrder::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IBOrder::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IBOrder::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IBOrder::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
inline const ::std::string& IBOrder::action() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.action)
  return action_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.action)
}
inline void IBOrder::set_action(const char* value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.action)
}
inline void IBOrder::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.action)
}
inline ::std::string* IBOrder::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_action() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.action)
  clear_has_action();
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.action)
}

// optional int32 totalQuantity = 5;
inline bool IBOrder::has_totalquantity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IBOrder::set_has_totalquantity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IBOrder::clear_has_totalquantity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IBOrder::clear_totalquantity() {
  totalquantity_ = 0;
  clear_has_totalquantity();
}
inline ::google::protobuf::int32 IBOrder::totalquantity() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.totalQuantity)
  return totalquantity_;
}
inline void IBOrder::set_totalquantity(::google::protobuf::int32 value) {
  set_has_totalquantity();
  totalquantity_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.totalQuantity)
}

// optional string orderType = 6;
inline bool IBOrder::has_ordertype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IBOrder::set_has_ordertype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IBOrder::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IBOrder::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ordertype();
}
inline const ::std::string& IBOrder::ordertype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.orderType)
  return ordertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_ordertype(const ::std::string& value) {
  set_has_ordertype();
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.orderType)
}
inline void IBOrder::set_ordertype(const char* value) {
  set_has_ordertype();
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.orderType)
}
inline void IBOrder::set_ordertype(const char* value, size_t size) {
  set_has_ordertype();
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.orderType)
}
inline ::std::string* IBOrder::mutable_ordertype() {
  set_has_ordertype();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.orderType)
  return ordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_ordertype() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.orderType)
  clear_has_ordertype();
  return ordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_ordertype(::std::string* ordertype) {
  if (ordertype != NULL) {
    set_has_ordertype();
  } else {
    clear_has_ordertype();
  }
  ordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.orderType)
}

// optional double lmtPrice = 7;
inline bool IBOrder::has_lmtprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IBOrder::set_has_lmtprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IBOrder::clear_has_lmtprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IBOrder::clear_lmtprice() {
  lmtprice_ = 0;
  clear_has_lmtprice();
}
inline double IBOrder::lmtprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.lmtPrice)
  return lmtprice_;
}
inline void IBOrder::set_lmtprice(double value) {
  set_has_lmtprice();
  lmtprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.lmtPrice)
}

// optional double auxPrice = 8;
inline bool IBOrder::has_auxprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IBOrder::set_has_auxprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IBOrder::clear_has_auxprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IBOrder::clear_auxprice() {
  auxprice_ = 0;
  clear_has_auxprice();
}
inline double IBOrder::auxprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.auxPrice)
  return auxprice_;
}
inline void IBOrder::set_auxprice(double value) {
  set_has_auxprice();
  auxprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.auxPrice)
}

// optional string tif = 9;
inline bool IBOrder::has_tif() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IBOrder::set_has_tif() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IBOrder::clear_has_tif() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IBOrder::clear_tif() {
  tif_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tif();
}
inline const ::std::string& IBOrder::tif() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.tif)
  return tif_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_tif(const ::std::string& value) {
  set_has_tif();
  tif_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.tif)
}
inline void IBOrder::set_tif(const char* value) {
  set_has_tif();
  tif_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.tif)
}
inline void IBOrder::set_tif(const char* value, size_t size) {
  set_has_tif();
  tif_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.tif)
}
inline ::std::string* IBOrder::mutable_tif() {
  set_has_tif();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.tif)
  return tif_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_tif() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.tif)
  clear_has_tif();
  return tif_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_tif(::std::string* tif) {
  if (tif != NULL) {
    set_has_tif();
  } else {
    clear_has_tif();
  }
  tif_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tif);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.tif)
}

// optional string activeStartTime = 10;
inline bool IBOrder::has_activestarttime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IBOrder::set_has_activestarttime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IBOrder::clear_has_activestarttime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IBOrder::clear_activestarttime() {
  activestarttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_activestarttime();
}
inline const ::std::string& IBOrder::activestarttime() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.activeStartTime)
  return activestarttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_activestarttime(const ::std::string& value) {
  set_has_activestarttime();
  activestarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.activeStartTime)
}
inline void IBOrder::set_activestarttime(const char* value) {
  set_has_activestarttime();
  activestarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.activeStartTime)
}
inline void IBOrder::set_activestarttime(const char* value, size_t size) {
  set_has_activestarttime();
  activestarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.activeStartTime)
}
inline ::std::string* IBOrder::mutable_activestarttime() {
  set_has_activestarttime();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.activeStartTime)
  return activestarttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_activestarttime() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.activeStartTime)
  clear_has_activestarttime();
  return activestarttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_activestarttime(::std::string* activestarttime) {
  if (activestarttime != NULL) {
    set_has_activestarttime();
  } else {
    clear_has_activestarttime();
  }
  activestarttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activestarttime);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.activeStartTime)
}

// optional string activeStopTime = 11;
inline bool IBOrder::has_activestoptime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IBOrder::set_has_activestoptime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IBOrder::clear_has_activestoptime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IBOrder::clear_activestoptime() {
  activestoptime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_activestoptime();
}
inline const ::std::string& IBOrder::activestoptime() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.activeStopTime)
  return activestoptime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_activestoptime(const ::std::string& value) {
  set_has_activestoptime();
  activestoptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.activeStopTime)
}
inline void IBOrder::set_activestoptime(const char* value) {
  set_has_activestoptime();
  activestoptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.activeStopTime)
}
inline void IBOrder::set_activestoptime(const char* value, size_t size) {
  set_has_activestoptime();
  activestoptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.activeStopTime)
}
inline ::std::string* IBOrder::mutable_activestoptime() {
  set_has_activestoptime();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.activeStopTime)
  return activestoptime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_activestoptime() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.activeStopTime)
  clear_has_activestoptime();
  return activestoptime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_activestoptime(::std::string* activestoptime) {
  if (activestoptime != NULL) {
    set_has_activestoptime();
  } else {
    clear_has_activestoptime();
  }
  activestoptime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activestoptime);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.activeStopTime)
}

// optional string ocaGroup = 12;
inline bool IBOrder::has_ocagroup() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IBOrder::set_has_ocagroup() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IBOrder::clear_has_ocagroup() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IBOrder::clear_ocagroup() {
  ocagroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ocagroup();
}
inline const ::std::string& IBOrder::ocagroup() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.ocaGroup)
  return ocagroup_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_ocagroup(const ::std::string& value) {
  set_has_ocagroup();
  ocagroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.ocaGroup)
}
inline void IBOrder::set_ocagroup(const char* value) {
  set_has_ocagroup();
  ocagroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.ocaGroup)
}
inline void IBOrder::set_ocagroup(const char* value, size_t size) {
  set_has_ocagroup();
  ocagroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.ocaGroup)
}
inline ::std::string* IBOrder::mutable_ocagroup() {
  set_has_ocagroup();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.ocaGroup)
  return ocagroup_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_ocagroup() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.ocaGroup)
  clear_has_ocagroup();
  return ocagroup_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_ocagroup(::std::string* ocagroup) {
  if (ocagroup != NULL) {
    set_has_ocagroup();
  } else {
    clear_has_ocagroup();
  }
  ocagroup_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ocagroup);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.ocaGroup)
}

// optional int32 ocaType = 13;
inline bool IBOrder::has_ocatype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IBOrder::set_has_ocatype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IBOrder::clear_has_ocatype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IBOrder::clear_ocatype() {
  ocatype_ = 0;
  clear_has_ocatype();
}
inline ::google::protobuf::int32 IBOrder::ocatype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.ocaType)
  return ocatype_;
}
inline void IBOrder::set_ocatype(::google::protobuf::int32 value) {
  set_has_ocatype();
  ocatype_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.ocaType)
}

// optional string orderRef = 14;
inline bool IBOrder::has_orderref() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IBOrder::set_has_orderref() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IBOrder::clear_has_orderref() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IBOrder::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderref();
}
inline const ::std::string& IBOrder::orderref() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.orderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_orderref(const ::std::string& value) {
  set_has_orderref();
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.orderRef)
}
inline void IBOrder::set_orderref(const char* value) {
  set_has_orderref();
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.orderRef)
}
inline void IBOrder::set_orderref(const char* value, size_t size) {
  set_has_orderref();
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.orderRef)
}
inline ::std::string* IBOrder::mutable_orderref() {
  set_has_orderref();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.orderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_orderref() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.orderRef)
  clear_has_orderref();
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    set_has_orderref();
  } else {
    clear_has_orderref();
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.orderRef)
}

// optional bool transmit = 15;
inline bool IBOrder::has_transmit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IBOrder::set_has_transmit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IBOrder::clear_has_transmit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IBOrder::clear_transmit() {
  transmit_ = false;
  clear_has_transmit();
}
inline bool IBOrder::transmit() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.transmit)
  return transmit_;
}
inline void IBOrder::set_transmit(bool value) {
  set_has_transmit();
  transmit_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.transmit)
}

// optional int32 parentId = 16;
inline bool IBOrder::has_parentid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IBOrder::set_has_parentid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IBOrder::clear_has_parentid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IBOrder::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 IBOrder::parentid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.parentId)
  return parentid_;
}
inline void IBOrder::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.parentId)
}

// optional bool blockOrder = 17;
inline bool IBOrder::has_blockorder() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IBOrder::set_has_blockorder() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IBOrder::clear_has_blockorder() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IBOrder::clear_blockorder() {
  blockorder_ = false;
  clear_has_blockorder();
}
inline bool IBOrder::blockorder() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.blockOrder)
  return blockorder_;
}
inline void IBOrder::set_blockorder(bool value) {
  set_has_blockorder();
  blockorder_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.blockOrder)
}

// optional bool sweepToFill = 18;
inline bool IBOrder::has_sweeptofill() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IBOrder::set_has_sweeptofill() {
  _has_bits_[0] |= 0x00020000u;
}
inline void IBOrder::clear_has_sweeptofill() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void IBOrder::clear_sweeptofill() {
  sweeptofill_ = false;
  clear_has_sweeptofill();
}
inline bool IBOrder::sweeptofill() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.sweepToFill)
  return sweeptofill_;
}
inline void IBOrder::set_sweeptofill(bool value) {
  set_has_sweeptofill();
  sweeptofill_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.sweepToFill)
}

// optional int32 displaySize = 19;
inline bool IBOrder::has_displaysize() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IBOrder::set_has_displaysize() {
  _has_bits_[0] |= 0x00040000u;
}
inline void IBOrder::clear_has_displaysize() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void IBOrder::clear_displaysize() {
  displaysize_ = 0;
  clear_has_displaysize();
}
inline ::google::protobuf::int32 IBOrder::displaysize() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.displaySize)
  return displaysize_;
}
inline void IBOrder::set_displaysize(::google::protobuf::int32 value) {
  set_has_displaysize();
  displaysize_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.displaySize)
}

// optional int32 triggerMethod = 20;
inline bool IBOrder::has_triggermethod() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void IBOrder::set_has_triggermethod() {
  _has_bits_[0] |= 0x00080000u;
}
inline void IBOrder::clear_has_triggermethod() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void IBOrder::clear_triggermethod() {
  triggermethod_ = 0;
  clear_has_triggermethod();
}
inline ::google::protobuf::int32 IBOrder::triggermethod() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.triggerMethod)
  return triggermethod_;
}
inline void IBOrder::set_triggermethod(::google::protobuf::int32 value) {
  set_has_triggermethod();
  triggermethod_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.triggerMethod)
}

// optional bool outsideRth = 21;
inline bool IBOrder::has_outsiderth() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void IBOrder::set_has_outsiderth() {
  _has_bits_[0] |= 0x00100000u;
}
inline void IBOrder::clear_has_outsiderth() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void IBOrder::clear_outsiderth() {
  outsiderth_ = false;
  clear_has_outsiderth();
}
inline bool IBOrder::outsiderth() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.outsideRth)
  return outsiderth_;
}
inline void IBOrder::set_outsiderth(bool value) {
  set_has_outsiderth();
  outsiderth_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.outsideRth)
}

// optional bool hidden = 22;
inline bool IBOrder::has_hidden() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void IBOrder::set_has_hidden() {
  _has_bits_[0] |= 0x00200000u;
}
inline void IBOrder::clear_has_hidden() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void IBOrder::clear_hidden() {
  hidden_ = false;
  clear_has_hidden();
}
inline bool IBOrder::hidden() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.hidden)
  return hidden_;
}
inline void IBOrder::set_hidden(bool value) {
  set_has_hidden();
  hidden_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.hidden)
}

// optional string goodAfterTime = 23;
inline bool IBOrder::has_goodaftertime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void IBOrder::set_has_goodaftertime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void IBOrder::clear_has_goodaftertime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void IBOrder::clear_goodaftertime() {
  goodaftertime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_goodaftertime();
}
inline const ::std::string& IBOrder::goodaftertime() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.goodAfterTime)
  return goodaftertime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_goodaftertime(const ::std::string& value) {
  set_has_goodaftertime();
  goodaftertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.goodAfterTime)
}
inline void IBOrder::set_goodaftertime(const char* value) {
  set_has_goodaftertime();
  goodaftertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.goodAfterTime)
}
inline void IBOrder::set_goodaftertime(const char* value, size_t size) {
  set_has_goodaftertime();
  goodaftertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.goodAfterTime)
}
inline ::std::string* IBOrder::mutable_goodaftertime() {
  set_has_goodaftertime();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.goodAfterTime)
  return goodaftertime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_goodaftertime() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.goodAfterTime)
  clear_has_goodaftertime();
  return goodaftertime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_goodaftertime(::std::string* goodaftertime) {
  if (goodaftertime != NULL) {
    set_has_goodaftertime();
  } else {
    clear_has_goodaftertime();
  }
  goodaftertime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goodaftertime);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.goodAfterTime)
}

// optional string goodTillDate = 24;
inline bool IBOrder::has_goodtilldate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void IBOrder::set_has_goodtilldate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void IBOrder::clear_has_goodtilldate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void IBOrder::clear_goodtilldate() {
  goodtilldate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_goodtilldate();
}
inline const ::std::string& IBOrder::goodtilldate() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.goodTillDate)
  return goodtilldate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_goodtilldate(const ::std::string& value) {
  set_has_goodtilldate();
  goodtilldate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.goodTillDate)
}
inline void IBOrder::set_goodtilldate(const char* value) {
  set_has_goodtilldate();
  goodtilldate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.goodTillDate)
}
inline void IBOrder::set_goodtilldate(const char* value, size_t size) {
  set_has_goodtilldate();
  goodtilldate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.goodTillDate)
}
inline ::std::string* IBOrder::mutable_goodtilldate() {
  set_has_goodtilldate();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.goodTillDate)
  return goodtilldate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_goodtilldate() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.goodTillDate)
  clear_has_goodtilldate();
  return goodtilldate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_goodtilldate(::std::string* goodtilldate) {
  if (goodtilldate != NULL) {
    set_has_goodtilldate();
  } else {
    clear_has_goodtilldate();
  }
  goodtilldate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goodtilldate);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.goodTillDate)
}

// optional string rule80A = 25;
inline bool IBOrder::has_rule80a() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void IBOrder::set_has_rule80a() {
  _has_bits_[0] |= 0x01000000u;
}
inline void IBOrder::clear_has_rule80a() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void IBOrder::clear_rule80a() {
  rule80a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rule80a();
}
inline const ::std::string& IBOrder::rule80a() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.rule80A)
  return rule80a_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_rule80a(const ::std::string& value) {
  set_has_rule80a();
  rule80a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.rule80A)
}
inline void IBOrder::set_rule80a(const char* value) {
  set_has_rule80a();
  rule80a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.rule80A)
}
inline void IBOrder::set_rule80a(const char* value, size_t size) {
  set_has_rule80a();
  rule80a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.rule80A)
}
inline ::std::string* IBOrder::mutable_rule80a() {
  set_has_rule80a();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.rule80A)
  return rule80a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_rule80a() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.rule80A)
  clear_has_rule80a();
  return rule80a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_rule80a(::std::string* rule80a) {
  if (rule80a != NULL) {
    set_has_rule80a();
  } else {
    clear_has_rule80a();
  }
  rule80a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule80a);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.rule80A)
}

// optional bool allOrNone = 26;
inline bool IBOrder::has_allornone() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void IBOrder::set_has_allornone() {
  _has_bits_[0] |= 0x02000000u;
}
inline void IBOrder::clear_has_allornone() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void IBOrder::clear_allornone() {
  allornone_ = false;
  clear_has_allornone();
}
inline bool IBOrder::allornone() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.allOrNone)
  return allornone_;
}
inline void IBOrder::set_allornone(bool value) {
  set_has_allornone();
  allornone_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.allOrNone)
}

// optional int32 minQty = 27;
inline bool IBOrder::has_minqty() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void IBOrder::set_has_minqty() {
  _has_bits_[0] |= 0x04000000u;
}
inline void IBOrder::clear_has_minqty() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void IBOrder::clear_minqty() {
  minqty_ = 0;
  clear_has_minqty();
}
inline ::google::protobuf::int32 IBOrder::minqty() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.minQty)
  return minqty_;
}
inline void IBOrder::set_minqty(::google::protobuf::int32 value) {
  set_has_minqty();
  minqty_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.minQty)
}

// optional double percentOffset = 28;
inline bool IBOrder::has_percentoffset() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void IBOrder::set_has_percentoffset() {
  _has_bits_[0] |= 0x08000000u;
}
inline void IBOrder::clear_has_percentoffset() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void IBOrder::clear_percentoffset() {
  percentoffset_ = 0;
  clear_has_percentoffset();
}
inline double IBOrder::percentoffset() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.percentOffset)
  return percentoffset_;
}
inline void IBOrder::set_percentoffset(double value) {
  set_has_percentoffset();
  percentoffset_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.percentOffset)
}

// optional bool overridePercentageConstraints = 29;
inline bool IBOrder::has_overridepercentageconstraints() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void IBOrder::set_has_overridepercentageconstraints() {
  _has_bits_[0] |= 0x10000000u;
}
inline void IBOrder::clear_has_overridepercentageconstraints() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void IBOrder::clear_overridepercentageconstraints() {
  overridepercentageconstraints_ = false;
  clear_has_overridepercentageconstraints();
}
inline bool IBOrder::overridepercentageconstraints() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.overridePercentageConstraints)
  return overridepercentageconstraints_;
}
inline void IBOrder::set_overridepercentageconstraints(bool value) {
  set_has_overridepercentageconstraints();
  overridepercentageconstraints_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.overridePercentageConstraints)
}

// optional double trailStopPrice = 30;
inline bool IBOrder::has_trailstopprice() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void IBOrder::set_has_trailstopprice() {
  _has_bits_[0] |= 0x20000000u;
}
inline void IBOrder::clear_has_trailstopprice() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void IBOrder::clear_trailstopprice() {
  trailstopprice_ = 0;
  clear_has_trailstopprice();
}
inline double IBOrder::trailstopprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.trailStopPrice)
  return trailstopprice_;
}
inline void IBOrder::set_trailstopprice(double value) {
  set_has_trailstopprice();
  trailstopprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.trailStopPrice)
}

// optional double trailingPercent = 31;
inline bool IBOrder::has_trailingpercent() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void IBOrder::set_has_trailingpercent() {
  _has_bits_[0] |= 0x40000000u;
}
inline void IBOrder::clear_has_trailingpercent() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void IBOrder::clear_trailingpercent() {
  trailingpercent_ = 0;
  clear_has_trailingpercent();
}
inline double IBOrder::trailingpercent() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.trailingPercent)
  return trailingpercent_;
}
inline void IBOrder::set_trailingpercent(double value) {
  set_has_trailingpercent();
  trailingpercent_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.trailingPercent)
}

// optional string faGroup = 32;
inline bool IBOrder::has_fagroup() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void IBOrder::set_has_fagroup() {
  _has_bits_[0] |= 0x80000000u;
}
inline void IBOrder::clear_has_fagroup() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void IBOrder::clear_fagroup() {
  fagroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fagroup();
}
inline const ::std::string& IBOrder::fagroup() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.faGroup)
  return fagroup_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_fagroup(const ::std::string& value) {
  set_has_fagroup();
  fagroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.faGroup)
}
inline void IBOrder::set_fagroup(const char* value) {
  set_has_fagroup();
  fagroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.faGroup)
}
inline void IBOrder::set_fagroup(const char* value, size_t size) {
  set_has_fagroup();
  fagroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.faGroup)
}
inline ::std::string* IBOrder::mutable_fagroup() {
  set_has_fagroup();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.faGroup)
  return fagroup_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_fagroup() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.faGroup)
  clear_has_fagroup();
  return fagroup_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_fagroup(::std::string* fagroup) {
  if (fagroup != NULL) {
    set_has_fagroup();
  } else {
    clear_has_fagroup();
  }
  fagroup_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fagroup);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.faGroup)
}

// optional string faProfile = 33;
inline bool IBOrder::has_faprofile() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void IBOrder::set_has_faprofile() {
  _has_bits_[1] |= 0x00000001u;
}
inline void IBOrder::clear_has_faprofile() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void IBOrder::clear_faprofile() {
  faprofile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_faprofile();
}
inline const ::std::string& IBOrder::faprofile() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.faProfile)
  return faprofile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_faprofile(const ::std::string& value) {
  set_has_faprofile();
  faprofile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.faProfile)
}
inline void IBOrder::set_faprofile(const char* value) {
  set_has_faprofile();
  faprofile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.faProfile)
}
inline void IBOrder::set_faprofile(const char* value, size_t size) {
  set_has_faprofile();
  faprofile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.faProfile)
}
inline ::std::string* IBOrder::mutable_faprofile() {
  set_has_faprofile();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.faProfile)
  return faprofile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_faprofile() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.faProfile)
  clear_has_faprofile();
  return faprofile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_faprofile(::std::string* faprofile) {
  if (faprofile != NULL) {
    set_has_faprofile();
  } else {
    clear_has_faprofile();
  }
  faprofile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), faprofile);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.faProfile)
}

// optional string faMethod = 34;
inline bool IBOrder::has_famethod() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void IBOrder::set_has_famethod() {
  _has_bits_[1] |= 0x00000002u;
}
inline void IBOrder::clear_has_famethod() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void IBOrder::clear_famethod() {
  famethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_famethod();
}
inline const ::std::string& IBOrder::famethod() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.faMethod)
  return famethod_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_famethod(const ::std::string& value) {
  set_has_famethod();
  famethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.faMethod)
}
inline void IBOrder::set_famethod(const char* value) {
  set_has_famethod();
  famethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.faMethod)
}
inline void IBOrder::set_famethod(const char* value, size_t size) {
  set_has_famethod();
  famethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.faMethod)
}
inline ::std::string* IBOrder::mutable_famethod() {
  set_has_famethod();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.faMethod)
  return famethod_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_famethod() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.faMethod)
  clear_has_famethod();
  return famethod_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_famethod(::std::string* famethod) {
  if (famethod != NULL) {
    set_has_famethod();
  } else {
    clear_has_famethod();
  }
  famethod_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), famethod);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.faMethod)
}

// optional string faPercentage = 35;
inline bool IBOrder::has_fapercentage() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void IBOrder::set_has_fapercentage() {
  _has_bits_[1] |= 0x00000004u;
}
inline void IBOrder::clear_has_fapercentage() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void IBOrder::clear_fapercentage() {
  fapercentage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fapercentage();
}
inline const ::std::string& IBOrder::fapercentage() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.faPercentage)
  return fapercentage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_fapercentage(const ::std::string& value) {
  set_has_fapercentage();
  fapercentage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.faPercentage)
}
inline void IBOrder::set_fapercentage(const char* value) {
  set_has_fapercentage();
  fapercentage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.faPercentage)
}
inline void IBOrder::set_fapercentage(const char* value, size_t size) {
  set_has_fapercentage();
  fapercentage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.faPercentage)
}
inline ::std::string* IBOrder::mutable_fapercentage() {
  set_has_fapercentage();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.faPercentage)
  return fapercentage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_fapercentage() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.faPercentage)
  clear_has_fapercentage();
  return fapercentage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_fapercentage(::std::string* fapercentage) {
  if (fapercentage != NULL) {
    set_has_fapercentage();
  } else {
    clear_has_fapercentage();
  }
  fapercentage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fapercentage);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.faPercentage)
}

// optional string openClose = 36;
inline bool IBOrder::has_openclose() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void IBOrder::set_has_openclose() {
  _has_bits_[1] |= 0x00000008u;
}
inline void IBOrder::clear_has_openclose() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void IBOrder::clear_openclose() {
  openclose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openclose();
}
inline const ::std::string& IBOrder::openclose() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.openClose)
  return openclose_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_openclose(const ::std::string& value) {
  set_has_openclose();
  openclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.openClose)
}
inline void IBOrder::set_openclose(const char* value) {
  set_has_openclose();
  openclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.openClose)
}
inline void IBOrder::set_openclose(const char* value, size_t size) {
  set_has_openclose();
  openclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.openClose)
}
inline ::std::string* IBOrder::mutable_openclose() {
  set_has_openclose();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.openClose)
  return openclose_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_openclose() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.openClose)
  clear_has_openclose();
  return openclose_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_openclose(::std::string* openclose) {
  if (openclose != NULL) {
    set_has_openclose();
  } else {
    clear_has_openclose();
  }
  openclose_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openclose);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.openClose)
}

// optional int32 origin = 37;
inline bool IBOrder::has_origin() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void IBOrder::set_has_origin() {
  _has_bits_[1] |= 0x00000010u;
}
inline void IBOrder::clear_has_origin() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void IBOrder::clear_origin() {
  origin_ = 0;
  clear_has_origin();
}
inline ::google::protobuf::int32 IBOrder::origin() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.origin)
  return origin_;
}
inline void IBOrder::set_origin(::google::protobuf::int32 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.origin)
}

// optional int32 shortSaleSlot = 38;
inline bool IBOrder::has_shortsaleslot() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void IBOrder::set_has_shortsaleslot() {
  _has_bits_[1] |= 0x00000020u;
}
inline void IBOrder::clear_has_shortsaleslot() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void IBOrder::clear_shortsaleslot() {
  shortsaleslot_ = 0;
  clear_has_shortsaleslot();
}
inline ::google::protobuf::int32 IBOrder::shortsaleslot() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.shortSaleSlot)
  return shortsaleslot_;
}
inline void IBOrder::set_shortsaleslot(::google::protobuf::int32 value) {
  set_has_shortsaleslot();
  shortsaleslot_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.shortSaleSlot)
}

// optional string designatedLocation = 39;
inline bool IBOrder::has_designatedlocation() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void IBOrder::set_has_designatedlocation() {
  _has_bits_[1] |= 0x00000040u;
}
inline void IBOrder::clear_has_designatedlocation() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void IBOrder::clear_designatedlocation() {
  designatedlocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_designatedlocation();
}
inline const ::std::string& IBOrder::designatedlocation() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.designatedLocation)
  return designatedlocation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_designatedlocation(const ::std::string& value) {
  set_has_designatedlocation();
  designatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.designatedLocation)
}
inline void IBOrder::set_designatedlocation(const char* value) {
  set_has_designatedlocation();
  designatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.designatedLocation)
}
inline void IBOrder::set_designatedlocation(const char* value, size_t size) {
  set_has_designatedlocation();
  designatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.designatedLocation)
}
inline ::std::string* IBOrder::mutable_designatedlocation() {
  set_has_designatedlocation();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.designatedLocation)
  return designatedlocation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_designatedlocation() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.designatedLocation)
  clear_has_designatedlocation();
  return designatedlocation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_designatedlocation(::std::string* designatedlocation) {
  if (designatedlocation != NULL) {
    set_has_designatedlocation();
  } else {
    clear_has_designatedlocation();
  }
  designatedlocation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), designatedlocation);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.designatedLocation)
}

// optional int32 exemptCode = 40;
inline bool IBOrder::has_exemptcode() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void IBOrder::set_has_exemptcode() {
  _has_bits_[1] |= 0x00000080u;
}
inline void IBOrder::clear_has_exemptcode() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void IBOrder::clear_exemptcode() {
  exemptcode_ = 0;
  clear_has_exemptcode();
}
inline ::google::protobuf::int32 IBOrder::exemptcode() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.exemptCode)
  return exemptcode_;
}
inline void IBOrder::set_exemptcode(::google::protobuf::int32 value) {
  set_has_exemptcode();
  exemptcode_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.exemptCode)
}

// optional double discretionaryAmt = 41;
inline bool IBOrder::has_discretionaryamt() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void IBOrder::set_has_discretionaryamt() {
  _has_bits_[1] |= 0x00000100u;
}
inline void IBOrder::clear_has_discretionaryamt() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void IBOrder::clear_discretionaryamt() {
  discretionaryamt_ = 0;
  clear_has_discretionaryamt();
}
inline double IBOrder::discretionaryamt() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.discretionaryAmt)
  return discretionaryamt_;
}
inline void IBOrder::set_discretionaryamt(double value) {
  set_has_discretionaryamt();
  discretionaryamt_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.discretionaryAmt)
}

// optional bool eTradeOnly = 42;
inline bool IBOrder::has_etradeonly() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void IBOrder::set_has_etradeonly() {
  _has_bits_[1] |= 0x00000200u;
}
inline void IBOrder::clear_has_etradeonly() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void IBOrder::clear_etradeonly() {
  etradeonly_ = false;
  clear_has_etradeonly();
}
inline bool IBOrder::etradeonly() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.eTradeOnly)
  return etradeonly_;
}
inline void IBOrder::set_etradeonly(bool value) {
  set_has_etradeonly();
  etradeonly_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.eTradeOnly)
}

// optional bool firmQuoteOnly = 43;
inline bool IBOrder::has_firmquoteonly() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void IBOrder::set_has_firmquoteonly() {
  _has_bits_[1] |= 0x00000400u;
}
inline void IBOrder::clear_has_firmquoteonly() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void IBOrder::clear_firmquoteonly() {
  firmquoteonly_ = false;
  clear_has_firmquoteonly();
}
inline bool IBOrder::firmquoteonly() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.firmQuoteOnly)
  return firmquoteonly_;
}
inline void IBOrder::set_firmquoteonly(bool value) {
  set_has_firmquoteonly();
  firmquoteonly_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.firmQuoteOnly)
}

// optional double nbboPriceCap = 44;
inline bool IBOrder::has_nbbopricecap() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void IBOrder::set_has_nbbopricecap() {
  _has_bits_[1] |= 0x00000800u;
}
inline void IBOrder::clear_has_nbbopricecap() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void IBOrder::clear_nbbopricecap() {
  nbbopricecap_ = 0;
  clear_has_nbbopricecap();
}
inline double IBOrder::nbbopricecap() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.nbboPriceCap)
  return nbbopricecap_;
}
inline void IBOrder::set_nbbopricecap(double value) {
  set_has_nbbopricecap();
  nbbopricecap_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.nbboPriceCap)
}

// optional bool optOutSmartRouting = 45;
inline bool IBOrder::has_optoutsmartrouting() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void IBOrder::set_has_optoutsmartrouting() {
  _has_bits_[1] |= 0x00001000u;
}
inline void IBOrder::clear_has_optoutsmartrouting() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void IBOrder::clear_optoutsmartrouting() {
  optoutsmartrouting_ = false;
  clear_has_optoutsmartrouting();
}
inline bool IBOrder::optoutsmartrouting() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.optOutSmartRouting)
  return optoutsmartrouting_;
}
inline void IBOrder::set_optoutsmartrouting(bool value) {
  set_has_optoutsmartrouting();
  optoutsmartrouting_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.optOutSmartRouting)
}

// optional int32 auctionStrategy = 46;
inline bool IBOrder::has_auctionstrategy() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void IBOrder::set_has_auctionstrategy() {
  _has_bits_[1] |= 0x00002000u;
}
inline void IBOrder::clear_has_auctionstrategy() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void IBOrder::clear_auctionstrategy() {
  auctionstrategy_ = 0;
  clear_has_auctionstrategy();
}
inline ::google::protobuf::int32 IBOrder::auctionstrategy() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.auctionStrategy)
  return auctionstrategy_;
}
inline void IBOrder::set_auctionstrategy(::google::protobuf::int32 value) {
  set_has_auctionstrategy();
  auctionstrategy_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.auctionStrategy)
}

// optional double startingPrice = 47;
inline bool IBOrder::has_startingprice() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void IBOrder::set_has_startingprice() {
  _has_bits_[1] |= 0x00004000u;
}
inline void IBOrder::clear_has_startingprice() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void IBOrder::clear_startingprice() {
  startingprice_ = 0;
  clear_has_startingprice();
}
inline double IBOrder::startingprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.startingPrice)
  return startingprice_;
}
inline void IBOrder::set_startingprice(double value) {
  set_has_startingprice();
  startingprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.startingPrice)
}

// optional double stockRefPrice = 48;
inline bool IBOrder::has_stockrefprice() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void IBOrder::set_has_stockrefprice() {
  _has_bits_[1] |= 0x00008000u;
}
inline void IBOrder::clear_has_stockrefprice() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void IBOrder::clear_stockrefprice() {
  stockrefprice_ = 0;
  clear_has_stockrefprice();
}
inline double IBOrder::stockrefprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.stockRefPrice)
  return stockrefprice_;
}
inline void IBOrder::set_stockrefprice(double value) {
  set_has_stockrefprice();
  stockrefprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.stockRefPrice)
}

// optional double delta = 49;
inline bool IBOrder::has_delta() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void IBOrder::set_has_delta() {
  _has_bits_[1] |= 0x00010000u;
}
inline void IBOrder::clear_has_delta() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void IBOrder::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline double IBOrder::delta() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.delta)
  return delta_;
}
inline void IBOrder::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.delta)
}

// optional double stockRangeLower = 50;
inline bool IBOrder::has_stockrangelower() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void IBOrder::set_has_stockrangelower() {
  _has_bits_[1] |= 0x00020000u;
}
inline void IBOrder::clear_has_stockrangelower() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void IBOrder::clear_stockrangelower() {
  stockrangelower_ = 0;
  clear_has_stockrangelower();
}
inline double IBOrder::stockrangelower() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.stockRangeLower)
  return stockrangelower_;
}
inline void IBOrder::set_stockrangelower(double value) {
  set_has_stockrangelower();
  stockrangelower_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.stockRangeLower)
}

// optional double stockRangeUpper = 51;
inline bool IBOrder::has_stockrangeupper() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void IBOrder::set_has_stockrangeupper() {
  _has_bits_[1] |= 0x00040000u;
}
inline void IBOrder::clear_has_stockrangeupper() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void IBOrder::clear_stockrangeupper() {
  stockrangeupper_ = 0;
  clear_has_stockrangeupper();
}
inline double IBOrder::stockrangeupper() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.stockRangeUpper)
  return stockrangeupper_;
}
inline void IBOrder::set_stockrangeupper(double value) {
  set_has_stockrangeupper();
  stockrangeupper_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.stockRangeUpper)
}

// optional bool randomizeSize = 52;
inline bool IBOrder::has_randomizesize() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void IBOrder::set_has_randomizesize() {
  _has_bits_[1] |= 0x00080000u;
}
inline void IBOrder::clear_has_randomizesize() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void IBOrder::clear_randomizesize() {
  randomizesize_ = false;
  clear_has_randomizesize();
}
inline bool IBOrder::randomizesize() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.randomizeSize)
  return randomizesize_;
}
inline void IBOrder::set_randomizesize(bool value) {
  set_has_randomizesize();
  randomizesize_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.randomizeSize)
}

// optional bool randomizePrice = 53;
inline bool IBOrder::has_randomizeprice() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void IBOrder::set_has_randomizeprice() {
  _has_bits_[1] |= 0x00100000u;
}
inline void IBOrder::clear_has_randomizeprice() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void IBOrder::clear_randomizeprice() {
  randomizeprice_ = false;
  clear_has_randomizeprice();
}
inline bool IBOrder::randomizeprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.randomizePrice)
  return randomizeprice_;
}
inline void IBOrder::set_randomizeprice(bool value) {
  set_has_randomizeprice();
  randomizeprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.randomizePrice)
}

// optional double volatility = 54;
inline bool IBOrder::has_volatility() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void IBOrder::set_has_volatility() {
  _has_bits_[1] |= 0x00200000u;
}
inline void IBOrder::clear_has_volatility() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void IBOrder::clear_volatility() {
  volatility_ = 0;
  clear_has_volatility();
}
inline double IBOrder::volatility() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.volatility)
  return volatility_;
}
inline void IBOrder::set_volatility(double value) {
  set_has_volatility();
  volatility_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.volatility)
}

// optional int32 volatilityType = 55;
inline bool IBOrder::has_volatilitytype() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void IBOrder::set_has_volatilitytype() {
  _has_bits_[1] |= 0x00400000u;
}
inline void IBOrder::clear_has_volatilitytype() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void IBOrder::clear_volatilitytype() {
  volatilitytype_ = 0;
  clear_has_volatilitytype();
}
inline ::google::protobuf::int32 IBOrder::volatilitytype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.volatilityType)
  return volatilitytype_;
}
inline void IBOrder::set_volatilitytype(::google::protobuf::int32 value) {
  set_has_volatilitytype();
  volatilitytype_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.volatilityType)
}

// optional string deltaNeutralOrderType = 56;
inline bool IBOrder::has_deltaneutralordertype() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void IBOrder::set_has_deltaneutralordertype() {
  _has_bits_[1] |= 0x00800000u;
}
inline void IBOrder::clear_has_deltaneutralordertype() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void IBOrder::clear_deltaneutralordertype() {
  deltaneutralordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deltaneutralordertype();
}
inline const ::std::string& IBOrder::deltaneutralordertype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralOrderType)
  return deltaneutralordertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_deltaneutralordertype(const ::std::string& value) {
  set_has_deltaneutralordertype();
  deltaneutralordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralOrderType)
}
inline void IBOrder::set_deltaneutralordertype(const char* value) {
  set_has_deltaneutralordertype();
  deltaneutralordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.deltaNeutralOrderType)
}
inline void IBOrder::set_deltaneutralordertype(const char* value, size_t size) {
  set_has_deltaneutralordertype();
  deltaneutralordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.deltaNeutralOrderType)
}
inline ::std::string* IBOrder::mutable_deltaneutralordertype() {
  set_has_deltaneutralordertype();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.deltaNeutralOrderType)
  return deltaneutralordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_deltaneutralordertype() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.deltaNeutralOrderType)
  clear_has_deltaneutralordertype();
  return deltaneutralordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_deltaneutralordertype(::std::string* deltaneutralordertype) {
  if (deltaneutralordertype != NULL) {
    set_has_deltaneutralordertype();
  } else {
    clear_has_deltaneutralordertype();
  }
  deltaneutralordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltaneutralordertype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.deltaNeutralOrderType)
}

// optional double deltaNeutralAuxPrice = 57;
inline bool IBOrder::has_deltaneutralauxprice() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralauxprice() {
  _has_bits_[1] |= 0x01000000u;
}
inline void IBOrder::clear_has_deltaneutralauxprice() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void IBOrder::clear_deltaneutralauxprice() {
  deltaneutralauxprice_ = 0;
  clear_has_deltaneutralauxprice();
}
inline double IBOrder::deltaneutralauxprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralAuxPrice)
  return deltaneutralauxprice_;
}
inline void IBOrder::set_deltaneutralauxprice(double value) {
  set_has_deltaneutralauxprice();
  deltaneutralauxprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralAuxPrice)
}

// optional int32 deltaNeutralConId = 58;
inline bool IBOrder::has_deltaneutralconid() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralconid() {
  _has_bits_[1] |= 0x02000000u;
}
inline void IBOrder::clear_has_deltaneutralconid() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void IBOrder::clear_deltaneutralconid() {
  deltaneutralconid_ = 0;
  clear_has_deltaneutralconid();
}
inline ::google::protobuf::int32 IBOrder::deltaneutralconid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralConId)
  return deltaneutralconid_;
}
inline void IBOrder::set_deltaneutralconid(::google::protobuf::int32 value) {
  set_has_deltaneutralconid();
  deltaneutralconid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralConId)
}

// optional string deltaNeutralSettlingFirm = 59;
inline bool IBOrder::has_deltaneutralsettlingfirm() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralsettlingfirm() {
  _has_bits_[1] |= 0x04000000u;
}
inline void IBOrder::clear_has_deltaneutralsettlingfirm() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void IBOrder::clear_deltaneutralsettlingfirm() {
  deltaneutralsettlingfirm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deltaneutralsettlingfirm();
}
inline const ::std::string& IBOrder::deltaneutralsettlingfirm() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralSettlingFirm)
  return deltaneutralsettlingfirm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_deltaneutralsettlingfirm(const ::std::string& value) {
  set_has_deltaneutralsettlingfirm();
  deltaneutralsettlingfirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralSettlingFirm)
}
inline void IBOrder::set_deltaneutralsettlingfirm(const char* value) {
  set_has_deltaneutralsettlingfirm();
  deltaneutralsettlingfirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.deltaNeutralSettlingFirm)
}
inline void IBOrder::set_deltaneutralsettlingfirm(const char* value, size_t size) {
  set_has_deltaneutralsettlingfirm();
  deltaneutralsettlingfirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.deltaNeutralSettlingFirm)
}
inline ::std::string* IBOrder::mutable_deltaneutralsettlingfirm() {
  set_has_deltaneutralsettlingfirm();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.deltaNeutralSettlingFirm)
  return deltaneutralsettlingfirm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_deltaneutralsettlingfirm() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.deltaNeutralSettlingFirm)
  clear_has_deltaneutralsettlingfirm();
  return deltaneutralsettlingfirm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_deltaneutralsettlingfirm(::std::string* deltaneutralsettlingfirm) {
  if (deltaneutralsettlingfirm != NULL) {
    set_has_deltaneutralsettlingfirm();
  } else {
    clear_has_deltaneutralsettlingfirm();
  }
  deltaneutralsettlingfirm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltaneutralsettlingfirm);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.deltaNeutralSettlingFirm)
}

// optional string deltaNeutralClearingAccount = 60;
inline bool IBOrder::has_deltaneutralclearingaccount() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralclearingaccount() {
  _has_bits_[1] |= 0x08000000u;
}
inline void IBOrder::clear_has_deltaneutralclearingaccount() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void IBOrder::clear_deltaneutralclearingaccount() {
  deltaneutralclearingaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deltaneutralclearingaccount();
}
inline const ::std::string& IBOrder::deltaneutralclearingaccount() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralClearingAccount)
  return deltaneutralclearingaccount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_deltaneutralclearingaccount(const ::std::string& value) {
  set_has_deltaneutralclearingaccount();
  deltaneutralclearingaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralClearingAccount)
}
inline void IBOrder::set_deltaneutralclearingaccount(const char* value) {
  set_has_deltaneutralclearingaccount();
  deltaneutralclearingaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.deltaNeutralClearingAccount)
}
inline void IBOrder::set_deltaneutralclearingaccount(const char* value, size_t size) {
  set_has_deltaneutralclearingaccount();
  deltaneutralclearingaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.deltaNeutralClearingAccount)
}
inline ::std::string* IBOrder::mutable_deltaneutralclearingaccount() {
  set_has_deltaneutralclearingaccount();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.deltaNeutralClearingAccount)
  return deltaneutralclearingaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_deltaneutralclearingaccount() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.deltaNeutralClearingAccount)
  clear_has_deltaneutralclearingaccount();
  return deltaneutralclearingaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_deltaneutralclearingaccount(::std::string* deltaneutralclearingaccount) {
  if (deltaneutralclearingaccount != NULL) {
    set_has_deltaneutralclearingaccount();
  } else {
    clear_has_deltaneutralclearingaccount();
  }
  deltaneutralclearingaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltaneutralclearingaccount);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.deltaNeutralClearingAccount)
}

// optional string deltaNeutralClearingIntent = 61;
inline bool IBOrder::has_deltaneutralclearingintent() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralclearingintent() {
  _has_bits_[1] |= 0x10000000u;
}
inline void IBOrder::clear_has_deltaneutralclearingintent() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void IBOrder::clear_deltaneutralclearingintent() {
  deltaneutralclearingintent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deltaneutralclearingintent();
}
inline const ::std::string& IBOrder::deltaneutralclearingintent() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralClearingIntent)
  return deltaneutralclearingintent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_deltaneutralclearingintent(const ::std::string& value) {
  set_has_deltaneutralclearingintent();
  deltaneutralclearingintent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralClearingIntent)
}
inline void IBOrder::set_deltaneutralclearingintent(const char* value) {
  set_has_deltaneutralclearingintent();
  deltaneutralclearingintent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.deltaNeutralClearingIntent)
}
inline void IBOrder::set_deltaneutralclearingintent(const char* value, size_t size) {
  set_has_deltaneutralclearingintent();
  deltaneutralclearingintent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.deltaNeutralClearingIntent)
}
inline ::std::string* IBOrder::mutable_deltaneutralclearingintent() {
  set_has_deltaneutralclearingintent();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.deltaNeutralClearingIntent)
  return deltaneutralclearingintent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_deltaneutralclearingintent() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.deltaNeutralClearingIntent)
  clear_has_deltaneutralclearingintent();
  return deltaneutralclearingintent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_deltaneutralclearingintent(::std::string* deltaneutralclearingintent) {
  if (deltaneutralclearingintent != NULL) {
    set_has_deltaneutralclearingintent();
  } else {
    clear_has_deltaneutralclearingintent();
  }
  deltaneutralclearingintent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltaneutralclearingintent);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.deltaNeutralClearingIntent)
}

// optional string deltaNeutralOpenClose = 62;
inline bool IBOrder::has_deltaneutralopenclose() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralopenclose() {
  _has_bits_[1] |= 0x20000000u;
}
inline void IBOrder::clear_has_deltaneutralopenclose() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void IBOrder::clear_deltaneutralopenclose() {
  deltaneutralopenclose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deltaneutralopenclose();
}
inline const ::std::string& IBOrder::deltaneutralopenclose() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralOpenClose)
  return deltaneutralopenclose_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_deltaneutralopenclose(const ::std::string& value) {
  set_has_deltaneutralopenclose();
  deltaneutralopenclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralOpenClose)
}
inline void IBOrder::set_deltaneutralopenclose(const char* value) {
  set_has_deltaneutralopenclose();
  deltaneutralopenclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.deltaNeutralOpenClose)
}
inline void IBOrder::set_deltaneutralopenclose(const char* value, size_t size) {
  set_has_deltaneutralopenclose();
  deltaneutralopenclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.deltaNeutralOpenClose)
}
inline ::std::string* IBOrder::mutable_deltaneutralopenclose() {
  set_has_deltaneutralopenclose();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.deltaNeutralOpenClose)
  return deltaneutralopenclose_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_deltaneutralopenclose() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.deltaNeutralOpenClose)
  clear_has_deltaneutralopenclose();
  return deltaneutralopenclose_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_deltaneutralopenclose(::std::string* deltaneutralopenclose) {
  if (deltaneutralopenclose != NULL) {
    set_has_deltaneutralopenclose();
  } else {
    clear_has_deltaneutralopenclose();
  }
  deltaneutralopenclose_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltaneutralopenclose);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.deltaNeutralOpenClose)
}

// optional bool deltaNeutralShortSale = 63;
inline bool IBOrder::has_deltaneutralshortsale() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralshortsale() {
  _has_bits_[1] |= 0x40000000u;
}
inline void IBOrder::clear_has_deltaneutralshortsale() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void IBOrder::clear_deltaneutralshortsale() {
  deltaneutralshortsale_ = false;
  clear_has_deltaneutralshortsale();
}
inline bool IBOrder::deltaneutralshortsale() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralShortSale)
  return deltaneutralshortsale_;
}
inline void IBOrder::set_deltaneutralshortsale(bool value) {
  set_has_deltaneutralshortsale();
  deltaneutralshortsale_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralShortSale)
}

// optional int32 deltaNeutralShortSaleSlot = 64;
inline bool IBOrder::has_deltaneutralshortsaleslot() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void IBOrder::set_has_deltaneutralshortsaleslot() {
  _has_bits_[1] |= 0x80000000u;
}
inline void IBOrder::clear_has_deltaneutralshortsaleslot() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void IBOrder::clear_deltaneutralshortsaleslot() {
  deltaneutralshortsaleslot_ = 0;
  clear_has_deltaneutralshortsaleslot();
}
inline ::google::protobuf::int32 IBOrder::deltaneutralshortsaleslot() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralShortSaleSlot)
  return deltaneutralshortsaleslot_;
}
inline void IBOrder::set_deltaneutralshortsaleslot(::google::protobuf::int32 value) {
  set_has_deltaneutralshortsaleslot();
  deltaneutralshortsaleslot_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralShortSaleSlot)
}

// optional string deltaNeutralDesignatedLocation = 65;
inline bool IBOrder::has_deltaneutraldesignatedlocation() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void IBOrder::set_has_deltaneutraldesignatedlocation() {
  _has_bits_[2] |= 0x00000001u;
}
inline void IBOrder::clear_has_deltaneutraldesignatedlocation() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void IBOrder::clear_deltaneutraldesignatedlocation() {
  deltaneutraldesignatedlocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deltaneutraldesignatedlocation();
}
inline const ::std::string& IBOrder::deltaneutraldesignatedlocation() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.deltaNeutralDesignatedLocation)
  return deltaneutraldesignatedlocation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_deltaneutraldesignatedlocation(const ::std::string& value) {
  set_has_deltaneutraldesignatedlocation();
  deltaneutraldesignatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.deltaNeutralDesignatedLocation)
}
inline void IBOrder::set_deltaneutraldesignatedlocation(const char* value) {
  set_has_deltaneutraldesignatedlocation();
  deltaneutraldesignatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.deltaNeutralDesignatedLocation)
}
inline void IBOrder::set_deltaneutraldesignatedlocation(const char* value, size_t size) {
  set_has_deltaneutraldesignatedlocation();
  deltaneutraldesignatedlocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.deltaNeutralDesignatedLocation)
}
inline ::std::string* IBOrder::mutable_deltaneutraldesignatedlocation() {
  set_has_deltaneutraldesignatedlocation();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.deltaNeutralDesignatedLocation)
  return deltaneutraldesignatedlocation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_deltaneutraldesignatedlocation() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.deltaNeutralDesignatedLocation)
  clear_has_deltaneutraldesignatedlocation();
  return deltaneutraldesignatedlocation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_deltaneutraldesignatedlocation(::std::string* deltaneutraldesignatedlocation) {
  if (deltaneutraldesignatedlocation != NULL) {
    set_has_deltaneutraldesignatedlocation();
  } else {
    clear_has_deltaneutraldesignatedlocation();
  }
  deltaneutraldesignatedlocation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltaneutraldesignatedlocation);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.deltaNeutralDesignatedLocation)
}

// optional bool continuousUpdate = 66;
inline bool IBOrder::has_continuousupdate() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void IBOrder::set_has_continuousupdate() {
  _has_bits_[2] |= 0x00000002u;
}
inline void IBOrder::clear_has_continuousupdate() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void IBOrder::clear_continuousupdate() {
  continuousupdate_ = false;
  clear_has_continuousupdate();
}
inline bool IBOrder::continuousupdate() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.continuousUpdate)
  return continuousupdate_;
}
inline void IBOrder::set_continuousupdate(bool value) {
  set_has_continuousupdate();
  continuousupdate_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.continuousUpdate)
}

// optional int32 referencePriceType = 67;
inline bool IBOrder::has_referencepricetype() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void IBOrder::set_has_referencepricetype() {
  _has_bits_[2] |= 0x00000004u;
}
inline void IBOrder::clear_has_referencepricetype() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void IBOrder::clear_referencepricetype() {
  referencepricetype_ = 0;
  clear_has_referencepricetype();
}
inline ::google::protobuf::int32 IBOrder::referencepricetype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.referencePriceType)
  return referencepricetype_;
}
inline void IBOrder::set_referencepricetype(::google::protobuf::int32 value) {
  set_has_referencepricetype();
  referencepricetype_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.referencePriceType)
}

// optional double basisPoints = 68;
inline bool IBOrder::has_basispoints() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void IBOrder::set_has_basispoints() {
  _has_bits_[2] |= 0x00000008u;
}
inline void IBOrder::clear_has_basispoints() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void IBOrder::clear_basispoints() {
  basispoints_ = 0;
  clear_has_basispoints();
}
inline double IBOrder::basispoints() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.basisPoints)
  return basispoints_;
}
inline void IBOrder::set_basispoints(double value) {
  set_has_basispoints();
  basispoints_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.basisPoints)
}

// optional int32 basisPointsType = 69;
inline bool IBOrder::has_basispointstype() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void IBOrder::set_has_basispointstype() {
  _has_bits_[2] |= 0x00000010u;
}
inline void IBOrder::clear_has_basispointstype() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void IBOrder::clear_basispointstype() {
  basispointstype_ = 0;
  clear_has_basispointstype();
}
inline ::google::protobuf::int32 IBOrder::basispointstype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.basisPointsType)
  return basispointstype_;
}
inline void IBOrder::set_basispointstype(::google::protobuf::int32 value) {
  set_has_basispointstype();
  basispointstype_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.basisPointsType)
}

// optional int32 scaleInitLevelSize = 70;
inline bool IBOrder::has_scaleinitlevelsize() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void IBOrder::set_has_scaleinitlevelsize() {
  _has_bits_[2] |= 0x00000020u;
}
inline void IBOrder::clear_has_scaleinitlevelsize() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void IBOrder::clear_scaleinitlevelsize() {
  scaleinitlevelsize_ = 0;
  clear_has_scaleinitlevelsize();
}
inline ::google::protobuf::int32 IBOrder::scaleinitlevelsize() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleInitLevelSize)
  return scaleinitlevelsize_;
}
inline void IBOrder::set_scaleinitlevelsize(::google::protobuf::int32 value) {
  set_has_scaleinitlevelsize();
  scaleinitlevelsize_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleInitLevelSize)
}

// optional int32 scaleSubsLevelSize = 71;
inline bool IBOrder::has_scalesubslevelsize() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void IBOrder::set_has_scalesubslevelsize() {
  _has_bits_[2] |= 0x00000040u;
}
inline void IBOrder::clear_has_scalesubslevelsize() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void IBOrder::clear_scalesubslevelsize() {
  scalesubslevelsize_ = 0;
  clear_has_scalesubslevelsize();
}
inline ::google::protobuf::int32 IBOrder::scalesubslevelsize() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleSubsLevelSize)
  return scalesubslevelsize_;
}
inline void IBOrder::set_scalesubslevelsize(::google::protobuf::int32 value) {
  set_has_scalesubslevelsize();
  scalesubslevelsize_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleSubsLevelSize)
}

// optional double scalePriceIncrement = 72;
inline bool IBOrder::has_scalepriceincrement() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void IBOrder::set_has_scalepriceincrement() {
  _has_bits_[2] |= 0x00000080u;
}
inline void IBOrder::clear_has_scalepriceincrement() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void IBOrder::clear_scalepriceincrement() {
  scalepriceincrement_ = 0;
  clear_has_scalepriceincrement();
}
inline double IBOrder::scalepriceincrement() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scalePriceIncrement)
  return scalepriceincrement_;
}
inline void IBOrder::set_scalepriceincrement(double value) {
  set_has_scalepriceincrement();
  scalepriceincrement_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scalePriceIncrement)
}

// optional double scalePriceAdjustValue = 73;
inline bool IBOrder::has_scalepriceadjustvalue() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void IBOrder::set_has_scalepriceadjustvalue() {
  _has_bits_[2] |= 0x00000100u;
}
inline void IBOrder::clear_has_scalepriceadjustvalue() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void IBOrder::clear_scalepriceadjustvalue() {
  scalepriceadjustvalue_ = 0;
  clear_has_scalepriceadjustvalue();
}
inline double IBOrder::scalepriceadjustvalue() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scalePriceAdjustValue)
  return scalepriceadjustvalue_;
}
inline void IBOrder::set_scalepriceadjustvalue(double value) {
  set_has_scalepriceadjustvalue();
  scalepriceadjustvalue_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scalePriceAdjustValue)
}

// optional int32 scalePriceAdjustInterval = 74;
inline bool IBOrder::has_scalepriceadjustinterval() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void IBOrder::set_has_scalepriceadjustinterval() {
  _has_bits_[2] |= 0x00000200u;
}
inline void IBOrder::clear_has_scalepriceadjustinterval() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void IBOrder::clear_scalepriceadjustinterval() {
  scalepriceadjustinterval_ = 0;
  clear_has_scalepriceadjustinterval();
}
inline ::google::protobuf::int32 IBOrder::scalepriceadjustinterval() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scalePriceAdjustInterval)
  return scalepriceadjustinterval_;
}
inline void IBOrder::set_scalepriceadjustinterval(::google::protobuf::int32 value) {
  set_has_scalepriceadjustinterval();
  scalepriceadjustinterval_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scalePriceAdjustInterval)
}

// optional double scaleProfitOffset = 75;
inline bool IBOrder::has_scaleprofitoffset() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void IBOrder::set_has_scaleprofitoffset() {
  _has_bits_[2] |= 0x00000400u;
}
inline void IBOrder::clear_has_scaleprofitoffset() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void IBOrder::clear_scaleprofitoffset() {
  scaleprofitoffset_ = 0;
  clear_has_scaleprofitoffset();
}
inline double IBOrder::scaleprofitoffset() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleProfitOffset)
  return scaleprofitoffset_;
}
inline void IBOrder::set_scaleprofitoffset(double value) {
  set_has_scaleprofitoffset();
  scaleprofitoffset_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleProfitOffset)
}

// optional bool scaleAutoReset = 76;
inline bool IBOrder::has_scaleautoreset() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void IBOrder::set_has_scaleautoreset() {
  _has_bits_[2] |= 0x00000800u;
}
inline void IBOrder::clear_has_scaleautoreset() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void IBOrder::clear_scaleautoreset() {
  scaleautoreset_ = false;
  clear_has_scaleautoreset();
}
inline bool IBOrder::scaleautoreset() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleAutoReset)
  return scaleautoreset_;
}
inline void IBOrder::set_scaleautoreset(bool value) {
  set_has_scaleautoreset();
  scaleautoreset_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleAutoReset)
}

// optional int32 scaleInitPosition = 77;
inline bool IBOrder::has_scaleinitposition() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void IBOrder::set_has_scaleinitposition() {
  _has_bits_[2] |= 0x00001000u;
}
inline void IBOrder::clear_has_scaleinitposition() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void IBOrder::clear_scaleinitposition() {
  scaleinitposition_ = 0;
  clear_has_scaleinitposition();
}
inline ::google::protobuf::int32 IBOrder::scaleinitposition() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleInitPosition)
  return scaleinitposition_;
}
inline void IBOrder::set_scaleinitposition(::google::protobuf::int32 value) {
  set_has_scaleinitposition();
  scaleinitposition_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleInitPosition)
}

// optional int32 scaleInitFillQty = 78;
inline bool IBOrder::has_scaleinitfillqty() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void IBOrder::set_has_scaleinitfillqty() {
  _has_bits_[2] |= 0x00002000u;
}
inline void IBOrder::clear_has_scaleinitfillqty() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void IBOrder::clear_scaleinitfillqty() {
  scaleinitfillqty_ = 0;
  clear_has_scaleinitfillqty();
}
inline ::google::protobuf::int32 IBOrder::scaleinitfillqty() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleInitFillQty)
  return scaleinitfillqty_;
}
inline void IBOrder::set_scaleinitfillqty(::google::protobuf::int32 value) {
  set_has_scaleinitfillqty();
  scaleinitfillqty_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleInitFillQty)
}

// optional bool scaleRandomPercent = 79;
inline bool IBOrder::has_scalerandompercent() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void IBOrder::set_has_scalerandompercent() {
  _has_bits_[2] |= 0x00004000u;
}
inline void IBOrder::clear_has_scalerandompercent() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void IBOrder::clear_scalerandompercent() {
  scalerandompercent_ = false;
  clear_has_scalerandompercent();
}
inline bool IBOrder::scalerandompercent() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleRandomPercent)
  return scalerandompercent_;
}
inline void IBOrder::set_scalerandompercent(bool value) {
  set_has_scalerandompercent();
  scalerandompercent_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleRandomPercent)
}

// optional string scaleTable = 80;
inline bool IBOrder::has_scaletable() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void IBOrder::set_has_scaletable() {
  _has_bits_[2] |= 0x00008000u;
}
inline void IBOrder::clear_has_scaletable() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void IBOrder::clear_scaletable() {
  scaletable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scaletable();
}
inline const ::std::string& IBOrder::scaletable() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.scaleTable)
  return scaletable_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_scaletable(const ::std::string& value) {
  set_has_scaletable();
  scaletable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.scaleTable)
}
inline void IBOrder::set_scaletable(const char* value) {
  set_has_scaletable();
  scaletable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.scaleTable)
}
inline void IBOrder::set_scaletable(const char* value, size_t size) {
  set_has_scaletable();
  scaletable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.scaleTable)
}
inline ::std::string* IBOrder::mutable_scaletable() {
  set_has_scaletable();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.scaleTable)
  return scaletable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_scaletable() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.scaleTable)
  clear_has_scaletable();
  return scaletable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_scaletable(::std::string* scaletable) {
  if (scaletable != NULL) {
    set_has_scaletable();
  } else {
    clear_has_scaletable();
  }
  scaletable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scaletable);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.scaleTable)
}

// optional string hedgeType = 81;
inline bool IBOrder::has_hedgetype() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void IBOrder::set_has_hedgetype() {
  _has_bits_[2] |= 0x00010000u;
}
inline void IBOrder::clear_has_hedgetype() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void IBOrder::clear_hedgetype() {
  hedgetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hedgetype();
}
inline const ::std::string& IBOrder::hedgetype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.hedgeType)
  return hedgetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_hedgetype(const ::std::string& value) {
  set_has_hedgetype();
  hedgetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.hedgeType)
}
inline void IBOrder::set_hedgetype(const char* value) {
  set_has_hedgetype();
  hedgetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.hedgeType)
}
inline void IBOrder::set_hedgetype(const char* value, size_t size) {
  set_has_hedgetype();
  hedgetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.hedgeType)
}
inline ::std::string* IBOrder::mutable_hedgetype() {
  set_has_hedgetype();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.hedgeType)
  return hedgetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_hedgetype() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.hedgeType)
  clear_has_hedgetype();
  return hedgetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_hedgetype(::std::string* hedgetype) {
  if (hedgetype != NULL) {
    set_has_hedgetype();
  } else {
    clear_has_hedgetype();
  }
  hedgetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgetype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.hedgeType)
}

// optional string hedgeParam = 82;
inline bool IBOrder::has_hedgeparam() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void IBOrder::set_has_hedgeparam() {
  _has_bits_[2] |= 0x00020000u;
}
inline void IBOrder::clear_has_hedgeparam() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void IBOrder::clear_hedgeparam() {
  hedgeparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hedgeparam();
}
inline const ::std::string& IBOrder::hedgeparam() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.hedgeParam)
  return hedgeparam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_hedgeparam(const ::std::string& value) {
  set_has_hedgeparam();
  hedgeparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.hedgeParam)
}
inline void IBOrder::set_hedgeparam(const char* value) {
  set_has_hedgeparam();
  hedgeparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.hedgeParam)
}
inline void IBOrder::set_hedgeparam(const char* value, size_t size) {
  set_has_hedgeparam();
  hedgeparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.hedgeParam)
}
inline ::std::string* IBOrder::mutable_hedgeparam() {
  set_has_hedgeparam();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.hedgeParam)
  return hedgeparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_hedgeparam() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.hedgeParam)
  clear_has_hedgeparam();
  return hedgeparam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_hedgeparam(::std::string* hedgeparam) {
  if (hedgeparam != NULL) {
    set_has_hedgeparam();
  } else {
    clear_has_hedgeparam();
  }
  hedgeparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeparam);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.hedgeParam)
}

// optional string account = 83;
inline bool IBOrder::has_account() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void IBOrder::set_has_account() {
  _has_bits_[2] |= 0x00040000u;
}
inline void IBOrder::clear_has_account() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void IBOrder::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& IBOrder::account() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.account)
}
inline void IBOrder::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.account)
}
inline void IBOrder::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.account)
}
inline ::std::string* IBOrder::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_account() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.account)
}

// optional string settlingFirm = 84;
inline bool IBOrder::has_settlingfirm() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void IBOrder::set_has_settlingfirm() {
  _has_bits_[2] |= 0x00080000u;
}
inline void IBOrder::clear_has_settlingfirm() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void IBOrder::clear_settlingfirm() {
  settlingfirm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_settlingfirm();
}
inline const ::std::string& IBOrder::settlingfirm() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.settlingFirm)
  return settlingfirm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_settlingfirm(const ::std::string& value) {
  set_has_settlingfirm();
  settlingfirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.settlingFirm)
}
inline void IBOrder::set_settlingfirm(const char* value) {
  set_has_settlingfirm();
  settlingfirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.settlingFirm)
}
inline void IBOrder::set_settlingfirm(const char* value, size_t size) {
  set_has_settlingfirm();
  settlingfirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.settlingFirm)
}
inline ::std::string* IBOrder::mutable_settlingfirm() {
  set_has_settlingfirm();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.settlingFirm)
  return settlingfirm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_settlingfirm() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.settlingFirm)
  clear_has_settlingfirm();
  return settlingfirm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_settlingfirm(::std::string* settlingfirm) {
  if (settlingfirm != NULL) {
    set_has_settlingfirm();
  } else {
    clear_has_settlingfirm();
  }
  settlingfirm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settlingfirm);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.settlingFirm)
}

// optional string clearingAccount = 85;
inline bool IBOrder::has_clearingaccount() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void IBOrder::set_has_clearingaccount() {
  _has_bits_[2] |= 0x00100000u;
}
inline void IBOrder::clear_has_clearingaccount() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void IBOrder::clear_clearingaccount() {
  clearingaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clearingaccount();
}
inline const ::std::string& IBOrder::clearingaccount() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.clearingAccount)
  return clearingaccount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_clearingaccount(const ::std::string& value) {
  set_has_clearingaccount();
  clearingaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.clearingAccount)
}
inline void IBOrder::set_clearingaccount(const char* value) {
  set_has_clearingaccount();
  clearingaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.clearingAccount)
}
inline void IBOrder::set_clearingaccount(const char* value, size_t size) {
  set_has_clearingaccount();
  clearingaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.clearingAccount)
}
inline ::std::string* IBOrder::mutable_clearingaccount() {
  set_has_clearingaccount();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.clearingAccount)
  return clearingaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_clearingaccount() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.clearingAccount)
  clear_has_clearingaccount();
  return clearingaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_clearingaccount(::std::string* clearingaccount) {
  if (clearingaccount != NULL) {
    set_has_clearingaccount();
  } else {
    clear_has_clearingaccount();
  }
  clearingaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clearingaccount);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.clearingAccount)
}

// optional string clearingIntent = 86;
inline bool IBOrder::has_clearingintent() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void IBOrder::set_has_clearingintent() {
  _has_bits_[2] |= 0x00200000u;
}
inline void IBOrder::clear_has_clearingintent() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void IBOrder::clear_clearingintent() {
  clearingintent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clearingintent();
}
inline const ::std::string& IBOrder::clearingintent() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.clearingIntent)
  return clearingintent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_clearingintent(const ::std::string& value) {
  set_has_clearingintent();
  clearingintent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.clearingIntent)
}
inline void IBOrder::set_clearingintent(const char* value) {
  set_has_clearingintent();
  clearingintent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.clearingIntent)
}
inline void IBOrder::set_clearingintent(const char* value, size_t size) {
  set_has_clearingintent();
  clearingintent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.clearingIntent)
}
inline ::std::string* IBOrder::mutable_clearingintent() {
  set_has_clearingintent();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.clearingIntent)
  return clearingintent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_clearingintent() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.clearingIntent)
  clear_has_clearingintent();
  return clearingintent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_clearingintent(::std::string* clearingintent) {
  if (clearingintent != NULL) {
    set_has_clearingintent();
  } else {
    clear_has_clearingintent();
  }
  clearingintent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clearingintent);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.clearingIntent)
}

// optional string algoStrategy = 87;
inline bool IBOrder::has_algostrategy() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void IBOrder::set_has_algostrategy() {
  _has_bits_[2] |= 0x00400000u;
}
inline void IBOrder::clear_has_algostrategy() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void IBOrder::clear_algostrategy() {
  algostrategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algostrategy();
}
inline const ::std::string& IBOrder::algostrategy() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.algoStrategy)
  return algostrategy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_algostrategy(const ::std::string& value) {
  set_has_algostrategy();
  algostrategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.algoStrategy)
}
inline void IBOrder::set_algostrategy(const char* value) {
  set_has_algostrategy();
  algostrategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.algoStrategy)
}
inline void IBOrder::set_algostrategy(const char* value, size_t size) {
  set_has_algostrategy();
  algostrategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.algoStrategy)
}
inline ::std::string* IBOrder::mutable_algostrategy() {
  set_has_algostrategy();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.algoStrategy)
  return algostrategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_algostrategy() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.algoStrategy)
  clear_has_algostrategy();
  return algostrategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_algostrategy(::std::string* algostrategy) {
  if (algostrategy != NULL) {
    set_has_algostrategy();
  } else {
    clear_has_algostrategy();
  }
  algostrategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algostrategy);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.algoStrategy)
}

// repeated .IB.IBTagValue algoParams = 88;
inline int IBOrder::algoparams_size() const {
  return algoparams_.size();
}
inline void IBOrder::clear_algoparams() {
  algoparams_.Clear();
}
inline const ::IB::IBTagValue& IBOrder::algoparams(int index) const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.algoParams)
  return algoparams_.Get(index);
}
inline ::IB::IBTagValue* IBOrder::mutable_algoparams(int index) {
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.algoParams)
  return algoparams_.Mutable(index);
}
inline ::IB::IBTagValue* IBOrder::add_algoparams() {
  // @@protoc_insertion_point(field_add:IB.IBOrder.algoParams)
  return algoparams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
IBOrder::mutable_algoparams() {
  // @@protoc_insertion_point(field_mutable_list:IB.IBOrder.algoParams)
  return &algoparams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
IBOrder::algoparams() const {
  // @@protoc_insertion_point(field_list:IB.IBOrder.algoParams)
  return algoparams_;
}

// repeated .IB.IBTagValue smartComboRoutingParams = 89;
inline int IBOrder::smartcomboroutingparams_size() const {
  return smartcomboroutingparams_.size();
}
inline void IBOrder::clear_smartcomboroutingparams() {
  smartcomboroutingparams_.Clear();
}
inline const ::IB::IBTagValue& IBOrder::smartcomboroutingparams(int index) const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.smartComboRoutingParams)
  return smartcomboroutingparams_.Get(index);
}
inline ::IB::IBTagValue* IBOrder::mutable_smartcomboroutingparams(int index) {
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.smartComboRoutingParams)
  return smartcomboroutingparams_.Mutable(index);
}
inline ::IB::IBTagValue* IBOrder::add_smartcomboroutingparams() {
  // @@protoc_insertion_point(field_add:IB.IBOrder.smartComboRoutingParams)
  return smartcomboroutingparams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
IBOrder::mutable_smartcomboroutingparams() {
  // @@protoc_insertion_point(field_mutable_list:IB.IBOrder.smartComboRoutingParams)
  return &smartcomboroutingparams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
IBOrder::smartcomboroutingparams() const {
  // @@protoc_insertion_point(field_list:IB.IBOrder.smartComboRoutingParams)
  return smartcomboroutingparams_;
}

// optional string algoId = 90;
inline bool IBOrder::has_algoid() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void IBOrder::set_has_algoid() {
  _has_bits_[2] |= 0x02000000u;
}
inline void IBOrder::clear_has_algoid() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void IBOrder::clear_algoid() {
  algoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algoid();
}
inline const ::std::string& IBOrder::algoid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.algoId)
  return algoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_algoid(const ::std::string& value) {
  set_has_algoid();
  algoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.algoId)
}
inline void IBOrder::set_algoid(const char* value) {
  set_has_algoid();
  algoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.algoId)
}
inline void IBOrder::set_algoid(const char* value, size_t size) {
  set_has_algoid();
  algoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.algoId)
}
inline ::std::string* IBOrder::mutable_algoid() {
  set_has_algoid();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.algoId)
  return algoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_algoid() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.algoId)
  clear_has_algoid();
  return algoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_algoid(::std::string* algoid) {
  if (algoid != NULL) {
    set_has_algoid();
  } else {
    clear_has_algoid();
  }
  algoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algoid);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.algoId)
}

// optional bool whatIf = 91;
inline bool IBOrder::has_whatif() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void IBOrder::set_has_whatif() {
  _has_bits_[2] |= 0x04000000u;
}
inline void IBOrder::clear_has_whatif() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void IBOrder::clear_whatif() {
  whatif_ = false;
  clear_has_whatif();
}
inline bool IBOrder::whatif() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.whatIf)
  return whatif_;
}
inline void IBOrder::set_whatif(bool value) {
  set_has_whatif();
  whatif_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.whatIf)
}

// optional bool notHeld = 92;
inline bool IBOrder::has_notheld() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void IBOrder::set_has_notheld() {
  _has_bits_[2] |= 0x08000000u;
}
inline void IBOrder::clear_has_notheld() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void IBOrder::clear_notheld() {
  notheld_ = false;
  clear_has_notheld();
}
inline bool IBOrder::notheld() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.notHeld)
  return notheld_;
}
inline void IBOrder::set_notheld(bool value) {
  set_has_notheld();
  notheld_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.notHeld)
}

// optional bool solicited = 93;
inline bool IBOrder::has_solicited() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void IBOrder::set_has_solicited() {
  _has_bits_[2] |= 0x10000000u;
}
inline void IBOrder::clear_has_solicited() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void IBOrder::clear_solicited() {
  solicited_ = false;
  clear_has_solicited();
}
inline bool IBOrder::solicited() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.solicited)
  return solicited_;
}
inline void IBOrder::set_solicited(bool value) {
  set_has_solicited();
  solicited_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.solicited)
}

// optional string modelCode = 94;
inline bool IBOrder::has_modelcode() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void IBOrder::set_has_modelcode() {
  _has_bits_[2] |= 0x20000000u;
}
inline void IBOrder::clear_has_modelcode() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void IBOrder::clear_modelcode() {
  modelcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modelcode();
}
inline const ::std::string& IBOrder::modelcode() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.modelCode)
  return modelcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_modelcode(const ::std::string& value) {
  set_has_modelcode();
  modelcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.modelCode)
}
inline void IBOrder::set_modelcode(const char* value) {
  set_has_modelcode();
  modelcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.modelCode)
}
inline void IBOrder::set_modelcode(const char* value, size_t size) {
  set_has_modelcode();
  modelcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.modelCode)
}
inline ::std::string* IBOrder::mutable_modelcode() {
  set_has_modelcode();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.modelCode)
  return modelcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_modelcode() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.modelCode)
  clear_has_modelcode();
  return modelcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_modelcode(::std::string* modelcode) {
  if (modelcode != NULL) {
    set_has_modelcode();
  } else {
    clear_has_modelcode();
  }
  modelcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelcode);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.modelCode)
}

// repeated .IB.IBOrderComboLeg orderComboLegs = 95;
inline int IBOrder::ordercombolegs_size() const {
  return ordercombolegs_.size();
}
inline void IBOrder::clear_ordercombolegs() {
  ordercombolegs_.Clear();
}
inline const ::IB::IBOrderComboLeg& IBOrder::ordercombolegs(int index) const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.orderComboLegs)
  return ordercombolegs_.Get(index);
}
inline ::IB::IBOrderComboLeg* IBOrder::mutable_ordercombolegs(int index) {
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.orderComboLegs)
  return ordercombolegs_.Mutable(index);
}
inline ::IB::IBOrderComboLeg* IBOrder::add_ordercombolegs() {
  // @@protoc_insertion_point(field_add:IB.IBOrder.orderComboLegs)
  return ordercombolegs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IB::IBOrderComboLeg >*
IBOrder::mutable_ordercombolegs() {
  // @@protoc_insertion_point(field_mutable_list:IB.IBOrder.orderComboLegs)
  return &ordercombolegs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IB::IBOrderComboLeg >&
IBOrder::ordercombolegs() const {
  // @@protoc_insertion_point(field_list:IB.IBOrder.orderComboLegs)
  return ordercombolegs_;
}

// repeated .IB.IBTagValue orderMiscOptions = 96;
inline int IBOrder::ordermiscoptions_size() const {
  return ordermiscoptions_.size();
}
inline void IBOrder::clear_ordermiscoptions() {
  ordermiscoptions_.Clear();
}
inline const ::IB::IBTagValue& IBOrder::ordermiscoptions(int index) const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.orderMiscOptions)
  return ordermiscoptions_.Get(index);
}
inline ::IB::IBTagValue* IBOrder::mutable_ordermiscoptions(int index) {
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.orderMiscOptions)
  return ordermiscoptions_.Mutable(index);
}
inline ::IB::IBTagValue* IBOrder::add_ordermiscoptions() {
  // @@protoc_insertion_point(field_add:IB.IBOrder.orderMiscOptions)
  return ordermiscoptions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >*
IBOrder::mutable_ordermiscoptions() {
  // @@protoc_insertion_point(field_mutable_list:IB.IBOrder.orderMiscOptions)
  return &ordermiscoptions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IB::IBTagValue >&
IBOrder::ordermiscoptions() const {
  // @@protoc_insertion_point(field_list:IB.IBOrder.orderMiscOptions)
  return ordermiscoptions_;
}

// optional int32 referenceContractId = 97;
inline bool IBOrder::has_referencecontractid() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void IBOrder::set_has_referencecontractid() {
  _has_bits_[3] |= 0x00000001u;
}
inline void IBOrder::clear_has_referencecontractid() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void IBOrder::clear_referencecontractid() {
  referencecontractid_ = 0;
  clear_has_referencecontractid();
}
inline ::google::protobuf::int32 IBOrder::referencecontractid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.referenceContractId)
  return referencecontractid_;
}
inline void IBOrder::set_referencecontractid(::google::protobuf::int32 value) {
  set_has_referencecontractid();
  referencecontractid_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.referenceContractId)
}

// optional double peggedChangeAmount = 98;
inline bool IBOrder::has_peggedchangeamount() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void IBOrder::set_has_peggedchangeamount() {
  _has_bits_[3] |= 0x00000002u;
}
inline void IBOrder::clear_has_peggedchangeamount() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void IBOrder::clear_peggedchangeamount() {
  peggedchangeamount_ = 0;
  clear_has_peggedchangeamount();
}
inline double IBOrder::peggedchangeamount() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.peggedChangeAmount)
  return peggedchangeamount_;
}
inline void IBOrder::set_peggedchangeamount(double value) {
  set_has_peggedchangeamount();
  peggedchangeamount_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.peggedChangeAmount)
}

// optional bool isPeggedChangeAmountDecrease = 99;
inline bool IBOrder::has_ispeggedchangeamountdecrease() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void IBOrder::set_has_ispeggedchangeamountdecrease() {
  _has_bits_[3] |= 0x00000004u;
}
inline void IBOrder::clear_has_ispeggedchangeamountdecrease() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void IBOrder::clear_ispeggedchangeamountdecrease() {
  ispeggedchangeamountdecrease_ = false;
  clear_has_ispeggedchangeamountdecrease();
}
inline bool IBOrder::ispeggedchangeamountdecrease() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.isPeggedChangeAmountDecrease)
  return ispeggedchangeamountdecrease_;
}
inline void IBOrder::set_ispeggedchangeamountdecrease(bool value) {
  set_has_ispeggedchangeamountdecrease();
  ispeggedchangeamountdecrease_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.isPeggedChangeAmountDecrease)
}

// optional double referenceChangeAmount = 100;
inline bool IBOrder::has_referencechangeamount() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void IBOrder::set_has_referencechangeamount() {
  _has_bits_[3] |= 0x00000008u;
}
inline void IBOrder::clear_has_referencechangeamount() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void IBOrder::clear_referencechangeamount() {
  referencechangeamount_ = 0;
  clear_has_referencechangeamount();
}
inline double IBOrder::referencechangeamount() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.referenceChangeAmount)
  return referencechangeamount_;
}
inline void IBOrder::set_referencechangeamount(double value) {
  set_has_referencechangeamount();
  referencechangeamount_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.referenceChangeAmount)
}

// optional string referenceExchangeId = 101;
inline bool IBOrder::has_referenceexchangeid() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void IBOrder::set_has_referenceexchangeid() {
  _has_bits_[3] |= 0x00000010u;
}
inline void IBOrder::clear_has_referenceexchangeid() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void IBOrder::clear_referenceexchangeid() {
  referenceexchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referenceexchangeid();
}
inline const ::std::string& IBOrder::referenceexchangeid() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.referenceExchangeId)
  return referenceexchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_referenceexchangeid(const ::std::string& value) {
  set_has_referenceexchangeid();
  referenceexchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.referenceExchangeId)
}
inline void IBOrder::set_referenceexchangeid(const char* value) {
  set_has_referenceexchangeid();
  referenceexchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.referenceExchangeId)
}
inline void IBOrder::set_referenceexchangeid(const char* value, size_t size) {
  set_has_referenceexchangeid();
  referenceexchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.referenceExchangeId)
}
inline ::std::string* IBOrder::mutable_referenceexchangeid() {
  set_has_referenceexchangeid();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.referenceExchangeId)
  return referenceexchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_referenceexchangeid() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.referenceExchangeId)
  clear_has_referenceexchangeid();
  return referenceexchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_referenceexchangeid(::std::string* referenceexchangeid) {
  if (referenceexchangeid != NULL) {
    set_has_referenceexchangeid();
  } else {
    clear_has_referenceexchangeid();
  }
  referenceexchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceexchangeid);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.referenceExchangeId)
}

// optional string adjustedOrderType = 102;
inline bool IBOrder::has_adjustedordertype() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void IBOrder::set_has_adjustedordertype() {
  _has_bits_[3] |= 0x00000020u;
}
inline void IBOrder::clear_has_adjustedordertype() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void IBOrder::clear_adjustedordertype() {
  adjustedordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adjustedordertype();
}
inline const ::std::string& IBOrder::adjustedordertype() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.adjustedOrderType)
  return adjustedordertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_adjustedordertype(const ::std::string& value) {
  set_has_adjustedordertype();
  adjustedordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.adjustedOrderType)
}
inline void IBOrder::set_adjustedordertype(const char* value) {
  set_has_adjustedordertype();
  adjustedordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.adjustedOrderType)
}
inline void IBOrder::set_adjustedordertype(const char* value, size_t size) {
  set_has_adjustedordertype();
  adjustedordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.adjustedOrderType)
}
inline ::std::string* IBOrder::mutable_adjustedordertype() {
  set_has_adjustedordertype();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.adjustedOrderType)
  return adjustedordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_adjustedordertype() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.adjustedOrderType)
  clear_has_adjustedordertype();
  return adjustedordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_adjustedordertype(::std::string* adjustedordertype) {
  if (adjustedordertype != NULL) {
    set_has_adjustedordertype();
  } else {
    clear_has_adjustedordertype();
  }
  adjustedordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adjustedordertype);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.adjustedOrderType)
}

// optional double triggerPrice = 103;
inline bool IBOrder::has_triggerprice() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void IBOrder::set_has_triggerprice() {
  _has_bits_[3] |= 0x00000040u;
}
inline void IBOrder::clear_has_triggerprice() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void IBOrder::clear_triggerprice() {
  triggerprice_ = 0;
  clear_has_triggerprice();
}
inline double IBOrder::triggerprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.triggerPrice)
  return triggerprice_;
}
inline void IBOrder::set_triggerprice(double value) {
  set_has_triggerprice();
  triggerprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.triggerPrice)
}

// optional double adjustedStopPrice = 104;
inline bool IBOrder::has_adjustedstopprice() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void IBOrder::set_has_adjustedstopprice() {
  _has_bits_[3] |= 0x00000080u;
}
inline void IBOrder::clear_has_adjustedstopprice() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void IBOrder::clear_adjustedstopprice() {
  adjustedstopprice_ = 0;
  clear_has_adjustedstopprice();
}
inline double IBOrder::adjustedstopprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.adjustedStopPrice)
  return adjustedstopprice_;
}
inline void IBOrder::set_adjustedstopprice(double value) {
  set_has_adjustedstopprice();
  adjustedstopprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.adjustedStopPrice)
}

// optional double adjustedStopLimitPrice = 105;
inline bool IBOrder::has_adjustedstoplimitprice() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void IBOrder::set_has_adjustedstoplimitprice() {
  _has_bits_[3] |= 0x00000100u;
}
inline void IBOrder::clear_has_adjustedstoplimitprice() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void IBOrder::clear_adjustedstoplimitprice() {
  adjustedstoplimitprice_ = 0;
  clear_has_adjustedstoplimitprice();
}
inline double IBOrder::adjustedstoplimitprice() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.adjustedStopLimitPrice)
  return adjustedstoplimitprice_;
}
inline void IBOrder::set_adjustedstoplimitprice(double value) {
  set_has_adjustedstoplimitprice();
  adjustedstoplimitprice_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.adjustedStopLimitPrice)
}

// optional double adjustedTrailingAmount = 106;
inline bool IBOrder::has_adjustedtrailingamount() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void IBOrder::set_has_adjustedtrailingamount() {
  _has_bits_[3] |= 0x00000200u;
}
inline void IBOrder::clear_has_adjustedtrailingamount() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void IBOrder::clear_adjustedtrailingamount() {
  adjustedtrailingamount_ = 0;
  clear_has_adjustedtrailingamount();
}
inline double IBOrder::adjustedtrailingamount() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.adjustedTrailingAmount)
  return adjustedtrailingamount_;
}
inline void IBOrder::set_adjustedtrailingamount(double value) {
  set_has_adjustedtrailingamount();
  adjustedtrailingamount_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.adjustedTrailingAmount)
}

// optional int32 adjustableTrailingUnit = 107;
inline bool IBOrder::has_adjustabletrailingunit() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void IBOrder::set_has_adjustabletrailingunit() {
  _has_bits_[3] |= 0x00000400u;
}
inline void IBOrder::clear_has_adjustabletrailingunit() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void IBOrder::clear_adjustabletrailingunit() {
  adjustabletrailingunit_ = 0;
  clear_has_adjustabletrailingunit();
}
inline ::google::protobuf::int32 IBOrder::adjustabletrailingunit() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.adjustableTrailingUnit)
  return adjustabletrailingunit_;
}
inline void IBOrder::set_adjustabletrailingunit(::google::protobuf::int32 value) {
  set_has_adjustabletrailingunit();
  adjustabletrailingunit_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.adjustableTrailingUnit)
}

// optional double lmtPriceOffset = 108;
inline bool IBOrder::has_lmtpriceoffset() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void IBOrder::set_has_lmtpriceoffset() {
  _has_bits_[3] |= 0x00000800u;
}
inline void IBOrder::clear_has_lmtpriceoffset() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void IBOrder::clear_lmtpriceoffset() {
  lmtpriceoffset_ = 0;
  clear_has_lmtpriceoffset();
}
inline double IBOrder::lmtpriceoffset() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.lmtPriceOffset)
  return lmtpriceoffset_;
}
inline void IBOrder::set_lmtpriceoffset(double value) {
  set_has_lmtpriceoffset();
  lmtpriceoffset_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.lmtPriceOffset)
}

// repeated .IB.IBOrderConditionData conditions = 109;
inline int IBOrder::conditions_size() const {
  return conditions_.size();
}
inline void IBOrder::clear_conditions() {
  conditions_.Clear();
}
inline const ::IB::IBOrderConditionData& IBOrder::conditions(int index) const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.conditions)
  return conditions_.Get(index);
}
inline ::IB::IBOrderConditionData* IBOrder::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.conditions)
  return conditions_.Mutable(index);
}
inline ::IB::IBOrderConditionData* IBOrder::add_conditions() {
  // @@protoc_insertion_point(field_add:IB.IBOrder.conditions)
  return conditions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IB::IBOrderConditionData >*
IBOrder::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:IB.IBOrder.conditions)
  return &conditions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IB::IBOrderConditionData >&
IBOrder::conditions() const {
  // @@protoc_insertion_point(field_list:IB.IBOrder.conditions)
  return conditions_;
}

// optional bool conditionsCancelOrder = 110;
inline bool IBOrder::has_conditionscancelorder() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void IBOrder::set_has_conditionscancelorder() {
  _has_bits_[3] |= 0x00002000u;
}
inline void IBOrder::clear_has_conditionscancelorder() {
  _has_bits_[3] &= ~0x00002000u;
}
inline void IBOrder::clear_conditionscancelorder() {
  conditionscancelorder_ = false;
  clear_has_conditionscancelorder();
}
inline bool IBOrder::conditionscancelorder() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.conditionsCancelOrder)
  return conditionscancelorder_;
}
inline void IBOrder::set_conditionscancelorder(bool value) {
  set_has_conditionscancelorder();
  conditionscancelorder_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.conditionsCancelOrder)
}

// optional bool conditionsIgnoreRth = 111;
inline bool IBOrder::has_conditionsignorerth() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void IBOrder::set_has_conditionsignorerth() {
  _has_bits_[3] |= 0x00004000u;
}
inline void IBOrder::clear_has_conditionsignorerth() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void IBOrder::clear_conditionsignorerth() {
  conditionsignorerth_ = false;
  clear_has_conditionsignorerth();
}
inline bool IBOrder::conditionsignorerth() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.conditionsIgnoreRth)
  return conditionsignorerth_;
}
inline void IBOrder::set_conditionsignorerth(bool value) {
  set_has_conditionsignorerth();
  conditionsignorerth_ = value;
  // @@protoc_insertion_point(field_set:IB.IBOrder.conditionsIgnoreRth)
}

// optional string extOperator = 112;
inline bool IBOrder::has_extoperator() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void IBOrder::set_has_extoperator() {
  _has_bits_[3] |= 0x00008000u;
}
inline void IBOrder::clear_has_extoperator() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void IBOrder::clear_extoperator() {
  extoperator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extoperator();
}
inline const ::std::string& IBOrder::extoperator() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.extOperator)
  return extoperator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_extoperator(const ::std::string& value) {
  set_has_extoperator();
  extoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBOrder.extOperator)
}
inline void IBOrder::set_extoperator(const char* value) {
  set_has_extoperator();
  extoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBOrder.extOperator)
}
inline void IBOrder::set_extoperator(const char* value, size_t size) {
  set_has_extoperator();
  extoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBOrder.extOperator)
}
inline ::std::string* IBOrder::mutable_extoperator() {
  set_has_extoperator();
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.extOperator)
  return extoperator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBOrder::release_extoperator() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.extOperator)
  clear_has_extoperator();
  return extoperator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBOrder::set_allocated_extoperator(::std::string* extoperator) {
  if (extoperator != NULL) {
    set_has_extoperator();
  } else {
    clear_has_extoperator();
  }
  extoperator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extoperator);
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.extOperator)
}

// optional .IB.IBSoftDollarTier softDollarTier = 113;
inline bool IBOrder::has_softdollartier() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void IBOrder::set_has_softdollartier() {
  _has_bits_[3] |= 0x00010000u;
}
inline void IBOrder::clear_has_softdollartier() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void IBOrder::clear_softdollartier() {
  if (softdollartier_ != NULL) softdollartier_->::IB::IBSoftDollarTier::Clear();
  clear_has_softdollartier();
}
inline const ::IB::IBSoftDollarTier& IBOrder::softdollartier() const {
  // @@protoc_insertion_point(field_get:IB.IBOrder.softDollarTier)
  return softdollartier_ != NULL ? *softdollartier_ : *default_instance_->softdollartier_;
}
inline ::IB::IBSoftDollarTier* IBOrder::mutable_softdollartier() {
  set_has_softdollartier();
  if (softdollartier_ == NULL) {
    softdollartier_ = new ::IB::IBSoftDollarTier;
  }
  // @@protoc_insertion_point(field_mutable:IB.IBOrder.softDollarTier)
  return softdollartier_;
}
inline ::IB::IBSoftDollarTier* IBOrder::release_softdollartier() {
  // @@protoc_insertion_point(field_release:IB.IBOrder.softDollarTier)
  clear_has_softdollartier();
  ::IB::IBSoftDollarTier* temp = softdollartier_;
  softdollartier_ = NULL;
  return temp;
}
inline void IBOrder::set_allocated_softdollartier(::IB::IBSoftDollarTier* softdollartier) {
  delete softdollartier_;
  softdollartier_ = softdollartier;
  if (softdollartier) {
    set_has_softdollartier();
  } else {
    clear_has_softdollartier();
  }
  // @@protoc_insertion_point(field_set_allocated:IB.IBOrder.softDollarTier)
}

// -------------------------------------------------------------------

// IBPBTagMsg

// optional int32 tag = 1;
inline bool IBPBTagMsg::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IBPBTagMsg::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IBPBTagMsg::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IBPBTagMsg::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
inline ::google::protobuf::int32 IBPBTagMsg::tag() const {
  // @@protoc_insertion_point(field_get:IB.IBPBTagMsg.tag)
  return tag_;
}
inline void IBPBTagMsg::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:IB.IBPBTagMsg.tag)
}

// optional string msg = 2;
inline bool IBPBTagMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IBPBTagMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IBPBTagMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IBPBTagMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& IBPBTagMsg::msg() const {
  // @@protoc_insertion_point(field_get:IB.IBPBTagMsg.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBPBTagMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IB.IBPBTagMsg.msg)
}
inline void IBPBTagMsg::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IB.IBPBTagMsg.msg)
}
inline void IBPBTagMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IB.IBPBTagMsg.msg)
}
inline ::std::string* IBPBTagMsg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:IB.IBPBTagMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IBPBTagMsg::release_msg() {
  // @@protoc_insertion_point(field_release:IB.IBPBTagMsg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IBPBTagMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IB.IBPBTagMsg.msg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IB

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IBData_2eproto__INCLUDED
