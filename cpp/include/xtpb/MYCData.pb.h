// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MYCData.proto

#ifndef PROTOBUF_MYCData_2eproto__INCLUDED
#define PROTOBUF_MYCData_2eproto__INCLUDED

#include <string>
#include "XTConfig.h"
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MYC {

// Internal implementation detail -- do not call these.
void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
void protobuf_AssignDesc_MYCData_2eproto();
void protobuf_ShutdownFile_MYCData_2eproto();

class MYC_Currency;
class MYC_Direction;
class MYC_Exchange;
class MYC_FeedType;
class MYC_InvestorTypes;
class MYC_OpenClose;
class MYC_OrderError;
class MYC_OrderStatus;
class MYC_OrderType;
class MYC_SmartExecutionError;
class MYC_TIF;
class MYC_account;
class MYC_config;
class MYC_contract;
class MYC_future_quote;
class MYC_response;
class MYC_stock_quote;

enum MYC_OrderError_enumtype {
  MYC_OrderError_enumtype_Unknown = 0,
  MYC_OrderError_enumtype_ERROR_OPEN_POS_IS_NOT_ENOUGH = -1,
  MYC_OrderError_enumtype_ERROR_SELF_MATCHING = -2,
  MYC_OrderError_enumtype_ERROR_REACH_MAX_ACCUMULATE_OPEN_VOL = -3,
  MYC_OrderError_enumtype_ERROR_CANCEL_ORDER_FAIL = -4,
  MYC_OrderError_enumtype_ERROR_CANCEL_ORDER_REACH_LIMIT = -5,
  MYC_OrderError_enumtype_ERROR_CASH_IS_NOT_ENOUGH = -6,
  MYC_OrderError_enumtype_ERROR_PRE_LONG_POS_IS_NOT_ENOUGH = -7
};
XT_COMMON_API bool MYC_OrderError_enumtype_IsValid(int value);
const MYC_OrderError_enumtype MYC_OrderError_enumtype_enumtype_MIN = MYC_OrderError_enumtype_ERROR_PRE_LONG_POS_IS_NOT_ENOUGH;
const MYC_OrderError_enumtype MYC_OrderError_enumtype_enumtype_MAX = MYC_OrderError_enumtype_Unknown;
const int MYC_OrderError_enumtype_enumtype_ARRAYSIZE = MYC_OrderError_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_OrderError_enumtype_descriptor();
inline const ::std::string& MYC_OrderError_enumtype_Name(MYC_OrderError_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_OrderError_enumtype_descriptor(), value);
}
inline bool MYC_OrderError_enumtype_Parse(
    const ::std::string& name, MYC_OrderError_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_OrderError_enumtype>(
    MYC_OrderError_enumtype_descriptor(), name, value);
}
enum MYC_SmartExecutionError_enumtype {
  MYC_SmartExecutionError_enumtype_Unknown = 0,
  MYC_SmartExecutionError_enumtype_ERROR_SE_FAIL_GENERAL = -101,
  MYC_SmartExecutionError_enumtype_ERROR_SE_INPUT_CHECK_FAILED = -102
};
XT_COMMON_API bool MYC_SmartExecutionError_enumtype_IsValid(int value);
const MYC_SmartExecutionError_enumtype MYC_SmartExecutionError_enumtype_enumtype_MIN = MYC_SmartExecutionError_enumtype_ERROR_SE_INPUT_CHECK_FAILED;
const MYC_SmartExecutionError_enumtype MYC_SmartExecutionError_enumtype_enumtype_MAX = MYC_SmartExecutionError_enumtype_Unknown;
const int MYC_SmartExecutionError_enumtype_enumtype_ARRAYSIZE = MYC_SmartExecutionError_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_SmartExecutionError_enumtype_descriptor();
inline const ::std::string& MYC_SmartExecutionError_enumtype_Name(MYC_SmartExecutionError_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_SmartExecutionError_enumtype_descriptor(), value);
}
inline bool MYC_SmartExecutionError_enumtype_Parse(
    const ::std::string& name, MYC_SmartExecutionError_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_SmartExecutionError_enumtype>(
    MYC_SmartExecutionError_enumtype_descriptor(), name, value);
}
enum MYC_Direction_enumtype {
  MYC_Direction_enumtype_BUY = 0,
  MYC_Direction_enumtype_SELL = 1,
  MYC_Direction_enumtype_CANCEL = 2
};
XT_COMMON_API bool MYC_Direction_enumtype_IsValid(int value);
const MYC_Direction_enumtype MYC_Direction_enumtype_enumtype_MIN = MYC_Direction_enumtype_BUY;
const MYC_Direction_enumtype MYC_Direction_enumtype_enumtype_MAX = MYC_Direction_enumtype_CANCEL;
const int MYC_Direction_enumtype_enumtype_ARRAYSIZE = MYC_Direction_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_Direction_enumtype_descriptor();
inline const ::std::string& MYC_Direction_enumtype_Name(MYC_Direction_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_Direction_enumtype_descriptor(), value);
}
inline bool MYC_Direction_enumtype_Parse(
    const ::std::string& name, MYC_Direction_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_Direction_enumtype>(
    MYC_Direction_enumtype_descriptor(), name, value);
}
enum MYC_OpenClose_enumtype {
  MYC_OpenClose_enumtype_OPEN = 0,
  MYC_OpenClose_enumtype_CLOSE = 1,
  MYC_OpenClose_enumtype_CLOSE_TOD = 2,
  MYC_OpenClose_enumtype_CLOSE_YES = 3
};
XT_COMMON_API bool MYC_OpenClose_enumtype_IsValid(int value);
const MYC_OpenClose_enumtype MYC_OpenClose_enumtype_enumtype_MIN = MYC_OpenClose_enumtype_OPEN;
const MYC_OpenClose_enumtype MYC_OpenClose_enumtype_enumtype_MAX = MYC_OpenClose_enumtype_CLOSE_YES;
const int MYC_OpenClose_enumtype_enumtype_ARRAYSIZE = MYC_OpenClose_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_OpenClose_enumtype_descriptor();
inline const ::std::string& MYC_OpenClose_enumtype_Name(MYC_OpenClose_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_OpenClose_enumtype_descriptor(), value);
}
inline bool MYC_OpenClose_enumtype_Parse(
    const ::std::string& name, MYC_OpenClose_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_OpenClose_enumtype>(
    MYC_OpenClose_enumtype_descriptor(), name, value);
}
enum MYC_InvestorTypes_enumtype {
  MYC_InvestorTypes_enumtype_SPECULATOR = 0,
  MYC_InvestorTypes_enumtype_HEDGER = 1,
  MYC_InvestorTypes_enumtype_ARBITRAGEURS = 2
};
XT_COMMON_API bool MYC_InvestorTypes_enumtype_IsValid(int value);
const MYC_InvestorTypes_enumtype MYC_InvestorTypes_enumtype_enumtype_MIN = MYC_InvestorTypes_enumtype_SPECULATOR;
const MYC_InvestorTypes_enumtype MYC_InvestorTypes_enumtype_enumtype_MAX = MYC_InvestorTypes_enumtype_ARBITRAGEURS;
const int MYC_InvestorTypes_enumtype_enumtype_ARRAYSIZE = MYC_InvestorTypes_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_InvestorTypes_enumtype_descriptor();
inline const ::std::string& MYC_InvestorTypes_enumtype_Name(MYC_InvestorTypes_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_InvestorTypes_enumtype_descriptor(), value);
}
inline bool MYC_InvestorTypes_enumtype_Parse(
    const ::std::string& name, MYC_InvestorTypes_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_InvestorTypes_enumtype>(
    MYC_InvestorTypes_enumtype_descriptor(), name, value);
}
enum MYC_OrderType_enumtype {
  MYC_OrderType_enumtype_LIMIT = 0,
  MYC_OrderType_enumtype_MARKET = 1,
  MYC_OrderType_enumtype_STOP = 2
};
XT_COMMON_API bool MYC_OrderType_enumtype_IsValid(int value);
const MYC_OrderType_enumtype MYC_OrderType_enumtype_enumtype_MIN = MYC_OrderType_enumtype_LIMIT;
const MYC_OrderType_enumtype MYC_OrderType_enumtype_enumtype_MAX = MYC_OrderType_enumtype_STOP;
const int MYC_OrderType_enumtype_enumtype_ARRAYSIZE = MYC_OrderType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_OrderType_enumtype_descriptor();
inline const ::std::string& MYC_OrderType_enumtype_Name(MYC_OrderType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_OrderType_enumtype_descriptor(), value);
}
inline bool MYC_OrderType_enumtype_Parse(
    const ::std::string& name, MYC_OrderType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_OrderType_enumtype>(
    MYC_OrderType_enumtype_descriptor(), name, value);
}
enum MYC_OrderStatus_enumtype {
  MYC_OrderStatus_enumtype_SUCCEED = 0,
  MYC_OrderStatus_enumtype_INIT = -1,
  MYC_OrderStatus_enumtype_ENTRUSTED = 1,
  MYC_OrderStatus_enumtype_PARTED = 2,
  MYC_OrderStatus_enumtype_CANCELED = 3,
  MYC_OrderStatus_enumtype_REJECTED = 4,
  MYC_OrderStatus_enumtype_CANCEL_REJECTED = 5,
  MYC_OrderStatus_enumtype_INTERREJECTED = 6,
  MYC_OrderStatus_enumtype_UNDEFINED_STATUS = 7
};
XT_COMMON_API bool MYC_OrderStatus_enumtype_IsValid(int value);
const MYC_OrderStatus_enumtype MYC_OrderStatus_enumtype_enumtype_MIN = MYC_OrderStatus_enumtype_INIT;
const MYC_OrderStatus_enumtype MYC_OrderStatus_enumtype_enumtype_MAX = MYC_OrderStatus_enumtype_UNDEFINED_STATUS;
const int MYC_OrderStatus_enumtype_enumtype_ARRAYSIZE = MYC_OrderStatus_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_OrderStatus_enumtype_descriptor();
inline const ::std::string& MYC_OrderStatus_enumtype_Name(MYC_OrderStatus_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_OrderStatus_enumtype_descriptor(), value);
}
inline bool MYC_OrderStatus_enumtype_Parse(
    const ::std::string& name, MYC_OrderStatus_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_OrderStatus_enumtype>(
    MYC_OrderStatus_enumtype_descriptor(), name, value);
}
enum MYC_TIF_enumtype {
  MYC_TIF_enumtype_DAY = 0,
  MYC_TIF_enumtype_FAK = 1,
  MYC_TIF_enumtype_IOC = 2,
  MYC_TIF_enumtype_FOK = 3,
  MYC_TIF_enumtype_GTD = 4,
  MYC_TIF_enumtype_GTC = 5
};
XT_COMMON_API bool MYC_TIF_enumtype_IsValid(int value);
const MYC_TIF_enumtype MYC_TIF_enumtype_enumtype_MIN = MYC_TIF_enumtype_DAY;
const MYC_TIF_enumtype MYC_TIF_enumtype_enumtype_MAX = MYC_TIF_enumtype_GTC;
const int MYC_TIF_enumtype_enumtype_ARRAYSIZE = MYC_TIF_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_TIF_enumtype_descriptor();
inline const ::std::string& MYC_TIF_enumtype_Name(MYC_TIF_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_TIF_enumtype_descriptor(), value);
}
inline bool MYC_TIF_enumtype_Parse(
    const ::std::string& name, MYC_TIF_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_TIF_enumtype>(
    MYC_TIF_enumtype_descriptor(), name, value);
}
enum MYC_Currency_enumtype {
  MYC_Currency_enumtype_CNY = 0,
  MYC_Currency_enumtype_USD = 1,
  MYC_Currency_enumtype_HKD = 2,
  MYC_Currency_enumtype_EUR = 3,
  MYC_Currency_enumtype_JPY = 4,
  MYC_Currency_enumtype_GBP = 5,
  MYC_Currency_enumtype_AUD = 6,
  MYC_Currency_enumtype_CAD = 7,
  MYC_Currency_enumtype_SEK = 8,
  MYC_Currency_enumtype_NZD = 9,
  MYC_Currency_enumtype_MXN = 10,
  MYC_Currency_enumtype_SGD = 11,
  MYC_Currency_enumtype_NOK = 12,
  MYC_Currency_enumtype_KRW = 13,
  MYC_Currency_enumtype_TRY = 14,
  MYC_Currency_enumtype_RUB = 15,
  MYC_Currency_enumtype_INR = 16,
  MYC_Currency_enumtype_BRL = 17,
  MYC_Currency_enumtype_ZAR = 18,
  MYC_Currency_enumtype_CNH = 19
};
XT_COMMON_API bool MYC_Currency_enumtype_IsValid(int value);
const MYC_Currency_enumtype MYC_Currency_enumtype_enumtype_MIN = MYC_Currency_enumtype_CNY;
const MYC_Currency_enumtype MYC_Currency_enumtype_enumtype_MAX = MYC_Currency_enumtype_CNH;
const int MYC_Currency_enumtype_enumtype_ARRAYSIZE = MYC_Currency_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_Currency_enumtype_descriptor();
inline const ::std::string& MYC_Currency_enumtype_Name(MYC_Currency_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_Currency_enumtype_descriptor(), value);
}
inline bool MYC_Currency_enumtype_Parse(
    const ::std::string& name, MYC_Currency_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_Currency_enumtype>(
    MYC_Currency_enumtype_descriptor(), name, value);
}
enum MYC_Exchange_enumtype {
  MYC_Exchange_enumtype_Unknown = 0,
  MYC_Exchange_enumtype_SZSE = 48,
  MYC_Exchange_enumtype_SSE = 49,
  MYC_Exchange_enumtype_HKEX = 50,
  MYC_Exchange_enumtype_SHFE = 65,
  MYC_Exchange_enumtype_CFFEX = 71,
  MYC_Exchange_enumtype_DCE = 66,
  MYC_Exchange_enumtype_CZCE = 67,
  MYC_Exchange_enumtype_SGE = 68,
  MYC_Exchange_enumtype_SGX = 83,
  MYC_Exchange_enumtype_CBOT = 70,
  MYC_Exchange_enumtype_CME = 77,
  MYC_Exchange_enumtype_LME = 76,
  MYC_Exchange_enumtype_COMEX = 79,
  MYC_Exchange_enumtype_NYMEX = 78
};
XT_COMMON_API bool MYC_Exchange_enumtype_IsValid(int value);
const MYC_Exchange_enumtype MYC_Exchange_enumtype_enumtype_MIN = MYC_Exchange_enumtype_Unknown;
const MYC_Exchange_enumtype MYC_Exchange_enumtype_enumtype_MAX = MYC_Exchange_enumtype_SGX;
const int MYC_Exchange_enumtype_enumtype_ARRAYSIZE = MYC_Exchange_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_Exchange_enumtype_descriptor();
inline const ::std::string& MYC_Exchange_enumtype_Name(MYC_Exchange_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_Exchange_enumtype_descriptor(), value);
}
inline bool MYC_Exchange_enumtype_Parse(
    const ::std::string& name, MYC_Exchange_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_Exchange_enumtype>(
    MYC_Exchange_enumtype_descriptor(), name, value);
}
enum MYC_FeedType_enumtype {
  MYC_FeedType_enumtype_CFFEX = 0,
  MYC_FeedType_enumtype_DCE = 1,
  MYC_FeedType_enumtype_SHFE = 6,
  MYC_FeedType_enumtype_CZCE = 7,
  MYC_FeedType_enumtype_SZSE_SSE = 9,
  MYC_FeedType_enumtype_SZSE_SSE_IDX = 10,
  MYC_FeedType_enumtype_CTP = 12,
  MYC_FeedType_enumtype_SGE = 22,
  MYC_FeedType_enumtype_ESUNNY = 25
};
XT_COMMON_API bool MYC_FeedType_enumtype_IsValid(int value);
const MYC_FeedType_enumtype MYC_FeedType_enumtype_enumtype_MIN = MYC_FeedType_enumtype_CFFEX;
const MYC_FeedType_enumtype MYC_FeedType_enumtype_enumtype_MAX = MYC_FeedType_enumtype_ESUNNY;
const int MYC_FeedType_enumtype_enumtype_ARRAYSIZE = MYC_FeedType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MYC_FeedType_enumtype_descriptor();
inline const ::std::string& MYC_FeedType_enumtype_Name(MYC_FeedType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MYC_FeedType_enumtype_descriptor(), value);
}
inline bool MYC_FeedType_enumtype_Parse(
    const ::std::string& name, MYC_FeedType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MYC_FeedType_enumtype>(
    MYC_FeedType_enumtype_descriptor(), name, value);
}
// ===================================================================

class XT_COMMON_API MYC_OrderError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_OrderError) */ {
 public:
  MYC_OrderError();
  virtual ~MYC_OrderError();

  MYC_OrderError(const MYC_OrderError& from);

  inline MYC_OrderError& operator=(const MYC_OrderError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_OrderError& default_instance();

  void Swap(MYC_OrderError* other);

  // implements Message ----------------------------------------------

  inline MYC_OrderError* New() const { return New(NULL); }

  MYC_OrderError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_OrderError& from);
  void MergeFrom(const MYC_OrderError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_OrderError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_OrderError_enumtype enumtype;
  static const enumtype Unknown =
    MYC_OrderError_enumtype_Unknown;
  static const enumtype ERROR_OPEN_POS_IS_NOT_ENOUGH =
    MYC_OrderError_enumtype_ERROR_OPEN_POS_IS_NOT_ENOUGH;
  static const enumtype ERROR_SELF_MATCHING =
    MYC_OrderError_enumtype_ERROR_SELF_MATCHING;
  static const enumtype ERROR_REACH_MAX_ACCUMULATE_OPEN_VOL =
    MYC_OrderError_enumtype_ERROR_REACH_MAX_ACCUMULATE_OPEN_VOL;
  static const enumtype ERROR_CANCEL_ORDER_FAIL =
    MYC_OrderError_enumtype_ERROR_CANCEL_ORDER_FAIL;
  static const enumtype ERROR_CANCEL_ORDER_REACH_LIMIT =
    MYC_OrderError_enumtype_ERROR_CANCEL_ORDER_REACH_LIMIT;
  static const enumtype ERROR_CASH_IS_NOT_ENOUGH =
    MYC_OrderError_enumtype_ERROR_CASH_IS_NOT_ENOUGH;
  static const enumtype ERROR_PRE_LONG_POS_IS_NOT_ENOUGH =
    MYC_OrderError_enumtype_ERROR_PRE_LONG_POS_IS_NOT_ENOUGH;
  static inline bool enumtype_IsValid(int value) {
    return MYC_OrderError_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_OrderError_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_OrderError_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_OrderError_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_OrderError_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_OrderError_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_OrderError_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_OrderError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_OrderError* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_SmartExecutionError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_SmartExecutionError) */ {
 public:
  MYC_SmartExecutionError();
  virtual ~MYC_SmartExecutionError();

  MYC_SmartExecutionError(const MYC_SmartExecutionError& from);

  inline MYC_SmartExecutionError& operator=(const MYC_SmartExecutionError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_SmartExecutionError& default_instance();

  void Swap(MYC_SmartExecutionError* other);

  // implements Message ----------------------------------------------

  inline MYC_SmartExecutionError* New() const { return New(NULL); }

  MYC_SmartExecutionError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_SmartExecutionError& from);
  void MergeFrom(const MYC_SmartExecutionError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_SmartExecutionError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_SmartExecutionError_enumtype enumtype;
  static const enumtype Unknown =
    MYC_SmartExecutionError_enumtype_Unknown;
  static const enumtype ERROR_SE_FAIL_GENERAL =
    MYC_SmartExecutionError_enumtype_ERROR_SE_FAIL_GENERAL;
  static const enumtype ERROR_SE_INPUT_CHECK_FAILED =
    MYC_SmartExecutionError_enumtype_ERROR_SE_INPUT_CHECK_FAILED;
  static inline bool enumtype_IsValid(int value) {
    return MYC_SmartExecutionError_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_SmartExecutionError_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_SmartExecutionError_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_SmartExecutionError_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_SmartExecutionError_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_SmartExecutionError_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_SmartExecutionError_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_SmartExecutionError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_SmartExecutionError* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_Direction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_Direction) */ {
 public:
  MYC_Direction();
  virtual ~MYC_Direction();

  MYC_Direction(const MYC_Direction& from);

  inline MYC_Direction& operator=(const MYC_Direction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_Direction& default_instance();

  void Swap(MYC_Direction* other);

  // implements Message ----------------------------------------------

  inline MYC_Direction* New() const { return New(NULL); }

  MYC_Direction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_Direction& from);
  void MergeFrom(const MYC_Direction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_Direction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_Direction_enumtype enumtype;
  static const enumtype BUY =
    MYC_Direction_enumtype_BUY;
  static const enumtype SELL =
    MYC_Direction_enumtype_SELL;
  static const enumtype CANCEL =
    MYC_Direction_enumtype_CANCEL;
  static inline bool enumtype_IsValid(int value) {
    return MYC_Direction_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_Direction_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_Direction_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_Direction_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_Direction_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_Direction_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_Direction_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_Direction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_Direction* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_OpenClose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_OpenClose) */ {
 public:
  MYC_OpenClose();
  virtual ~MYC_OpenClose();

  MYC_OpenClose(const MYC_OpenClose& from);

  inline MYC_OpenClose& operator=(const MYC_OpenClose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_OpenClose& default_instance();

  void Swap(MYC_OpenClose* other);

  // implements Message ----------------------------------------------

  inline MYC_OpenClose* New() const { return New(NULL); }

  MYC_OpenClose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_OpenClose& from);
  void MergeFrom(const MYC_OpenClose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_OpenClose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_OpenClose_enumtype enumtype;
  static const enumtype OPEN =
    MYC_OpenClose_enumtype_OPEN;
  static const enumtype CLOSE =
    MYC_OpenClose_enumtype_CLOSE;
  static const enumtype CLOSE_TOD =
    MYC_OpenClose_enumtype_CLOSE_TOD;
  static const enumtype CLOSE_YES =
    MYC_OpenClose_enumtype_CLOSE_YES;
  static inline bool enumtype_IsValid(int value) {
    return MYC_OpenClose_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_OpenClose_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_OpenClose_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_OpenClose_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_OpenClose_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_OpenClose_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_OpenClose_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_OpenClose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_OpenClose* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_InvestorTypes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_InvestorTypes) */ {
 public:
  MYC_InvestorTypes();
  virtual ~MYC_InvestorTypes();

  MYC_InvestorTypes(const MYC_InvestorTypes& from);

  inline MYC_InvestorTypes& operator=(const MYC_InvestorTypes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_InvestorTypes& default_instance();

  void Swap(MYC_InvestorTypes* other);

  // implements Message ----------------------------------------------

  inline MYC_InvestorTypes* New() const { return New(NULL); }

  MYC_InvestorTypes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_InvestorTypes& from);
  void MergeFrom(const MYC_InvestorTypes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_InvestorTypes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_InvestorTypes_enumtype enumtype;
  static const enumtype SPECULATOR =
    MYC_InvestorTypes_enumtype_SPECULATOR;
  static const enumtype HEDGER =
    MYC_InvestorTypes_enumtype_HEDGER;
  static const enumtype ARBITRAGEURS =
    MYC_InvestorTypes_enumtype_ARBITRAGEURS;
  static inline bool enumtype_IsValid(int value) {
    return MYC_InvestorTypes_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_InvestorTypes_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_InvestorTypes_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_InvestorTypes_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_InvestorTypes_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_InvestorTypes_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_InvestorTypes_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_InvestorTypes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_InvestorTypes* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_OrderType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_OrderType) */ {
 public:
  MYC_OrderType();
  virtual ~MYC_OrderType();

  MYC_OrderType(const MYC_OrderType& from);

  inline MYC_OrderType& operator=(const MYC_OrderType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_OrderType& default_instance();

  void Swap(MYC_OrderType* other);

  // implements Message ----------------------------------------------

  inline MYC_OrderType* New() const { return New(NULL); }

  MYC_OrderType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_OrderType& from);
  void MergeFrom(const MYC_OrderType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_OrderType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_OrderType_enumtype enumtype;
  static const enumtype LIMIT =
    MYC_OrderType_enumtype_LIMIT;
  static const enumtype MARKET =
    MYC_OrderType_enumtype_MARKET;
  static const enumtype STOP =
    MYC_OrderType_enumtype_STOP;
  static inline bool enumtype_IsValid(int value) {
    return MYC_OrderType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_OrderType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_OrderType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_OrderType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_OrderType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_OrderType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_OrderType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_OrderType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_OrderType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_OrderStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_OrderStatus) */ {
 public:
  MYC_OrderStatus();
  virtual ~MYC_OrderStatus();

  MYC_OrderStatus(const MYC_OrderStatus& from);

  inline MYC_OrderStatus& operator=(const MYC_OrderStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_OrderStatus& default_instance();

  void Swap(MYC_OrderStatus* other);

  // implements Message ----------------------------------------------

  inline MYC_OrderStatus* New() const { return New(NULL); }

  MYC_OrderStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_OrderStatus& from);
  void MergeFrom(const MYC_OrderStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_OrderStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_OrderStatus_enumtype enumtype;
  static const enumtype SUCCEED =
    MYC_OrderStatus_enumtype_SUCCEED;
  static const enumtype INIT =
    MYC_OrderStatus_enumtype_INIT;
  static const enumtype ENTRUSTED =
    MYC_OrderStatus_enumtype_ENTRUSTED;
  static const enumtype PARTED =
    MYC_OrderStatus_enumtype_PARTED;
  static const enumtype CANCELED =
    MYC_OrderStatus_enumtype_CANCELED;
  static const enumtype REJECTED =
    MYC_OrderStatus_enumtype_REJECTED;
  static const enumtype CANCEL_REJECTED =
    MYC_OrderStatus_enumtype_CANCEL_REJECTED;
  static const enumtype INTERREJECTED =
    MYC_OrderStatus_enumtype_INTERREJECTED;
  static const enumtype UNDEFINED_STATUS =
    MYC_OrderStatus_enumtype_UNDEFINED_STATUS;
  static inline bool enumtype_IsValid(int value) {
    return MYC_OrderStatus_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_OrderStatus_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_OrderStatus_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_OrderStatus_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_OrderStatus_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_OrderStatus_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_OrderStatus_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_OrderStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_OrderStatus* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_TIF : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_TIF) */ {
 public:
  MYC_TIF();
  virtual ~MYC_TIF();

  MYC_TIF(const MYC_TIF& from);

  inline MYC_TIF& operator=(const MYC_TIF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_TIF& default_instance();

  void Swap(MYC_TIF* other);

  // implements Message ----------------------------------------------

  inline MYC_TIF* New() const { return New(NULL); }

  MYC_TIF* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_TIF& from);
  void MergeFrom(const MYC_TIF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_TIF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_TIF_enumtype enumtype;
  static const enumtype DAY =
    MYC_TIF_enumtype_DAY;
  static const enumtype FAK =
    MYC_TIF_enumtype_FAK;
  static const enumtype IOC =
    MYC_TIF_enumtype_IOC;
  static const enumtype FOK =
    MYC_TIF_enumtype_FOK;
  static const enumtype GTD =
    MYC_TIF_enumtype_GTD;
  static const enumtype GTC =
    MYC_TIF_enumtype_GTC;
  static inline bool enumtype_IsValid(int value) {
    return MYC_TIF_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_TIF_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_TIF_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_TIF_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_TIF_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_TIF_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_TIF_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_TIF)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_TIF* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_Currency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_Currency) */ {
 public:
  MYC_Currency();
  virtual ~MYC_Currency();

  MYC_Currency(const MYC_Currency& from);

  inline MYC_Currency& operator=(const MYC_Currency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_Currency& default_instance();

  void Swap(MYC_Currency* other);

  // implements Message ----------------------------------------------

  inline MYC_Currency* New() const { return New(NULL); }

  MYC_Currency* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_Currency& from);
  void MergeFrom(const MYC_Currency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_Currency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_Currency_enumtype enumtype;
  static const enumtype CNY =
    MYC_Currency_enumtype_CNY;
  static const enumtype USD =
    MYC_Currency_enumtype_USD;
  static const enumtype HKD =
    MYC_Currency_enumtype_HKD;
  static const enumtype EUR =
    MYC_Currency_enumtype_EUR;
  static const enumtype JPY =
    MYC_Currency_enumtype_JPY;
  static const enumtype GBP =
    MYC_Currency_enumtype_GBP;
  static const enumtype AUD =
    MYC_Currency_enumtype_AUD;
  static const enumtype CAD =
    MYC_Currency_enumtype_CAD;
  static const enumtype SEK =
    MYC_Currency_enumtype_SEK;
  static const enumtype NZD =
    MYC_Currency_enumtype_NZD;
  static const enumtype MXN =
    MYC_Currency_enumtype_MXN;
  static const enumtype SGD =
    MYC_Currency_enumtype_SGD;
  static const enumtype NOK =
    MYC_Currency_enumtype_NOK;
  static const enumtype KRW =
    MYC_Currency_enumtype_KRW;
  static const enumtype TRY =
    MYC_Currency_enumtype_TRY;
  static const enumtype RUB =
    MYC_Currency_enumtype_RUB;
  static const enumtype INR =
    MYC_Currency_enumtype_INR;
  static const enumtype BRL =
    MYC_Currency_enumtype_BRL;
  static const enumtype ZAR =
    MYC_Currency_enumtype_ZAR;
  static const enumtype CNH =
    MYC_Currency_enumtype_CNH;
  static inline bool enumtype_IsValid(int value) {
    return MYC_Currency_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_Currency_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_Currency_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_Currency_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_Currency_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_Currency_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_Currency_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_Currency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_Currency* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_Exchange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_Exchange) */ {
 public:
  MYC_Exchange();
  virtual ~MYC_Exchange();

  MYC_Exchange(const MYC_Exchange& from);

  inline MYC_Exchange& operator=(const MYC_Exchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_Exchange& default_instance();

  void Swap(MYC_Exchange* other);

  // implements Message ----------------------------------------------

  inline MYC_Exchange* New() const { return New(NULL); }

  MYC_Exchange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_Exchange& from);
  void MergeFrom(const MYC_Exchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_Exchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_Exchange_enumtype enumtype;
  static const enumtype Unknown =
    MYC_Exchange_enumtype_Unknown;
  static const enumtype SZSE =
    MYC_Exchange_enumtype_SZSE;
  static const enumtype SSE =
    MYC_Exchange_enumtype_SSE;
  static const enumtype HKEX =
    MYC_Exchange_enumtype_HKEX;
  static const enumtype SHFE =
    MYC_Exchange_enumtype_SHFE;
  static const enumtype CFFEX =
    MYC_Exchange_enumtype_CFFEX;
  static const enumtype DCE =
    MYC_Exchange_enumtype_DCE;
  static const enumtype CZCE =
    MYC_Exchange_enumtype_CZCE;
  static const enumtype SGE =
    MYC_Exchange_enumtype_SGE;
  static const enumtype SGX =
    MYC_Exchange_enumtype_SGX;
  static const enumtype CBOT =
    MYC_Exchange_enumtype_CBOT;
  static const enumtype CME =
    MYC_Exchange_enumtype_CME;
  static const enumtype LME =
    MYC_Exchange_enumtype_LME;
  static const enumtype COMEX =
    MYC_Exchange_enumtype_COMEX;
  static const enumtype NYMEX =
    MYC_Exchange_enumtype_NYMEX;
  static inline bool enumtype_IsValid(int value) {
    return MYC_Exchange_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_Exchange_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_Exchange_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_Exchange_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_Exchange_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_Exchange_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_Exchange_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_Exchange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_Exchange* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_FeedType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_FeedType) */ {
 public:
  MYC_FeedType();
  virtual ~MYC_FeedType();

  MYC_FeedType(const MYC_FeedType& from);

  inline MYC_FeedType& operator=(const MYC_FeedType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_FeedType& default_instance();

  void Swap(MYC_FeedType* other);

  // implements Message ----------------------------------------------

  inline MYC_FeedType* New() const { return New(NULL); }

  MYC_FeedType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_FeedType& from);
  void MergeFrom(const MYC_FeedType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_FeedType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MYC_FeedType_enumtype enumtype;
  static const enumtype CFFEX =
    MYC_FeedType_enumtype_CFFEX;
  static const enumtype DCE =
    MYC_FeedType_enumtype_DCE;
  static const enumtype SHFE =
    MYC_FeedType_enumtype_SHFE;
  static const enumtype CZCE =
    MYC_FeedType_enumtype_CZCE;
  static const enumtype SZSE_SSE =
    MYC_FeedType_enumtype_SZSE_SSE;
  static const enumtype SZSE_SSE_IDX =
    MYC_FeedType_enumtype_SZSE_SSE_IDX;
  static const enumtype CTP =
    MYC_FeedType_enumtype_CTP;
  static const enumtype SGE =
    MYC_FeedType_enumtype_SGE;
  static const enumtype ESUNNY =
    MYC_FeedType_enumtype_ESUNNY;
  static inline bool enumtype_IsValid(int value) {
    return MYC_FeedType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MYC_FeedType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MYC_FeedType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MYC_FeedType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MYC_FeedType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MYC_FeedType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MYC_FeedType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MYC.MYC_FeedType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_FeedType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_contract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_contract) */ {
 public:
  MYC_contract();
  virtual ~MYC_contract();

  MYC_contract(const MYC_contract& from);

  inline MYC_contract& operator=(const MYC_contract& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_contract& default_instance();

  void Swap(MYC_contract* other);

  // implements Message ----------------------------------------------

  inline MYC_contract* New() const { return New(NULL); }

  MYC_contract* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_contract& from);
  void MergeFrom(const MYC_contract& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_contract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional int32 exch = 2;
  bool has_exch() const;
  void clear_exch();
  static const int kExchFieldNumber = 2;
  ::google::protobuf::int32 exch() const;
  void set_exch(::google::protobuf::int32 value);

  // optional int32 max_accum_open_vol = 3;
  bool has_max_accum_open_vol() const;
  void clear_max_accum_open_vol();
  static const int kMaxAccumOpenVolFieldNumber = 3;
  ::google::protobuf::int32 max_accum_open_vol() const;
  void set_max_accum_open_vol(::google::protobuf::int32 value);

  // optional int32 max_cancel_limit = 4;
  bool has_max_cancel_limit() const;
  void clear_max_cancel_limit();
  static const int kMaxCancelLimitFieldNumber = 4;
  ::google::protobuf::int32 max_cancel_limit() const;
  void set_max_cancel_limit(::google::protobuf::int32 value);

  // optional int32 expiration_date = 5;
  bool has_expiration_date() const;
  void clear_expiration_date();
  static const int kExpirationDateFieldNumber = 5;
  ::google::protobuf::int32 expiration_date() const;
  void set_expiration_date(::google::protobuf::int32 value);

  // optional double tick_size = 6;
  bool has_tick_size() const;
  void clear_tick_size();
  static const int kTickSizeFieldNumber = 6;
  double tick_size() const;
  void set_tick_size(double value);

  // optional double multiple = 7;
  bool has_multiple() const;
  void clear_multiple();
  static const int kMultipleFieldNumber = 7;
  double multiple() const;
  void set_multiple(double value);

  // optional string account = 8;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 8;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional int32 yesterday_pos_long_volume = 9;
  bool has_yesterday_pos_long_volume() const;
  void clear_yesterday_pos_long_volume();
  static const int kYesterdayPosLongVolumeFieldNumber = 9;
  ::google::protobuf::int32 yesterday_pos_long_volume() const;
  void set_yesterday_pos_long_volume(::google::protobuf::int32 value);

  // optional double yesterday_pos_long_price = 10;
  bool has_yesterday_pos_long_price() const;
  void clear_yesterday_pos_long_price();
  static const int kYesterdayPosLongPriceFieldNumber = 10;
  double yesterday_pos_long_price() const;
  void set_yesterday_pos_long_price(double value);

  // optional int32 yesterday_pos_short_volume = 11;
  bool has_yesterday_pos_short_volume() const;
  void clear_yesterday_pos_short_volume();
  static const int kYesterdayPosShortVolumeFieldNumber = 11;
  ::google::protobuf::int32 yesterday_pos_short_volume() const;
  void set_yesterday_pos_short_volume(::google::protobuf::int32 value);

  // optional double yesterday_pos_short_price = 12;
  bool has_yesterday_pos_short_price() const;
  void clear_yesterday_pos_short_price();
  static const int kYesterdayPosShortPriceFieldNumber = 12;
  double yesterday_pos_short_price() const;
  void set_yesterday_pos_short_price(double value);

  // optional int32 today_pos_long_volume = 13;
  bool has_today_pos_long_volume() const;
  void clear_today_pos_long_volume();
  static const int kTodayPosLongVolumeFieldNumber = 13;
  ::google::protobuf::int32 today_pos_long_volume() const;
  void set_today_pos_long_volume(::google::protobuf::int32 value);

  // optional double today_pos_long_price = 14;
  bool has_today_pos_long_price() const;
  void clear_today_pos_long_price();
  static const int kTodayPosLongPriceFieldNumber = 14;
  double today_pos_long_price() const;
  void set_today_pos_long_price(double value);

  // optional int32 today_pos_short_volume = 15;
  bool has_today_pos_short_volume() const;
  void clear_today_pos_short_volume();
  static const int kTodayPosShortVolumeFieldNumber = 15;
  ::google::protobuf::int32 today_pos_short_volume() const;
  void set_today_pos_short_volume(::google::protobuf::int32 value);

  // optional double today_pos_short_price = 16;
  bool has_today_pos_short_price() const;
  void clear_today_pos_short_price();
  static const int kTodayPosShortPriceFieldNumber = 16;
  double today_pos_short_price() const;
  void set_today_pos_short_price(double value);

  // optional int32 fee_by_lot = 17;
  bool has_fee_by_lot() const;
  void clear_fee_by_lot();
  static const int kFeeByLotFieldNumber = 17;
  ::google::protobuf::int32 fee_by_lot() const;
  void set_fee_by_lot(::google::protobuf::int32 value);

  // optional double exchange_fee = 18;
  bool has_exchange_fee() const;
  void clear_exchange_fee();
  static const int kExchangeFeeFieldNumber = 18;
  double exchange_fee() const;
  void set_exchange_fee(double value);

  // optional double yes_exchange_fee = 19;
  bool has_yes_exchange_fee() const;
  void clear_yes_exchange_fee();
  static const int kYesExchangeFeeFieldNumber = 19;
  double yes_exchange_fee() const;
  void set_yes_exchange_fee(double value);

  // optional double broker_fee = 20;
  bool has_broker_fee() const;
  void clear_broker_fee();
  static const int kBrokerFeeFieldNumber = 20;
  double broker_fee() const;
  void set_broker_fee(double value);

  // optional double stamp_tax = 21;
  bool has_stamp_tax() const;
  void clear_stamp_tax();
  static const int kStampTaxFieldNumber = 21;
  double stamp_tax() const;
  void set_stamp_tax(double value);

  // optional double acc_transfer_fee = 22;
  bool has_acc_transfer_fee() const;
  void clear_acc_transfer_fee();
  static const int kAccTransferFeeFieldNumber = 22;
  double acc_transfer_fee() const;
  void set_acc_transfer_fee(double value);

  // @@protoc_insertion_point(class_scope:MYC.MYC_contract)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_exch();
  inline void clear_has_exch();
  inline void set_has_max_accum_open_vol();
  inline void clear_has_max_accum_open_vol();
  inline void set_has_max_cancel_limit();
  inline void clear_has_max_cancel_limit();
  inline void set_has_expiration_date();
  inline void clear_has_expiration_date();
  inline void set_has_tick_size();
  inline void clear_has_tick_size();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_yesterday_pos_long_volume();
  inline void clear_has_yesterday_pos_long_volume();
  inline void set_has_yesterday_pos_long_price();
  inline void clear_has_yesterday_pos_long_price();
  inline void set_has_yesterday_pos_short_volume();
  inline void clear_has_yesterday_pos_short_volume();
  inline void set_has_yesterday_pos_short_price();
  inline void clear_has_yesterday_pos_short_price();
  inline void set_has_today_pos_long_volume();
  inline void clear_has_today_pos_long_volume();
  inline void set_has_today_pos_long_price();
  inline void clear_has_today_pos_long_price();
  inline void set_has_today_pos_short_volume();
  inline void clear_has_today_pos_short_volume();
  inline void set_has_today_pos_short_price();
  inline void clear_has_today_pos_short_price();
  inline void set_has_fee_by_lot();
  inline void clear_has_fee_by_lot();
  inline void set_has_exchange_fee();
  inline void clear_has_exchange_fee();
  inline void set_has_yes_exchange_fee();
  inline void clear_has_yes_exchange_fee();
  inline void set_has_broker_fee();
  inline void clear_has_broker_fee();
  inline void set_has_stamp_tax();
  inline void clear_has_stamp_tax();
  inline void set_has_acc_transfer_fee();
  inline void clear_has_acc_transfer_fee();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int32 exch_;
  ::google::protobuf::int32 max_accum_open_vol_;
  ::google::protobuf::int32 max_cancel_limit_;
  ::google::protobuf::int32 expiration_date_;
  double tick_size_;
  double multiple_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  double yesterday_pos_long_price_;
  ::google::protobuf::int32 yesterday_pos_long_volume_;
  ::google::protobuf::int32 yesterday_pos_short_volume_;
  double yesterday_pos_short_price_;
  double today_pos_long_price_;
  ::google::protobuf::int32 today_pos_long_volume_;
  ::google::protobuf::int32 today_pos_short_volume_;
  double today_pos_short_price_;
  double exchange_fee_;
  double yes_exchange_fee_;
  double broker_fee_;
  double stamp_tax_;
  double acc_transfer_fee_;
  ::google::protobuf::int32 fee_by_lot_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_contract* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_account : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_account) */ {
 public:
  MYC_account();
  virtual ~MYC_account();

  MYC_account(const MYC_account& from);

  inline MYC_account& operator=(const MYC_account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_account& default_instance();

  void Swap(MYC_account* other);

  // implements Message ----------------------------------------------

  inline MYC_account* New() const { return New(NULL); }

  MYC_account* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_account& from);
  void MergeFrom(const MYC_account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional int32 currency = 2;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  ::google::protobuf::int32 currency() const;
  void set_currency(::google::protobuf::int32 value);

  // optional double cash_asset = 3;
  bool has_cash_asset() const;
  void clear_cash_asset();
  static const int kCashAssetFieldNumber = 3;
  double cash_asset() const;
  void set_cash_asset(double value);

  // optional double cash_available = 4;
  bool has_cash_available() const;
  void clear_cash_available();
  static const int kCashAvailableFieldNumber = 4;
  double cash_available() const;
  void set_cash_available(double value);

  // optional double exch_rate = 5;
  bool has_exch_rate() const;
  void clear_exch_rate();
  static const int kExchRateFieldNumber = 5;
  double exch_rate() const;
  void set_exch_rate(double value);

  // @@protoc_insertion_point(class_scope:MYC.MYC_account)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_cash_asset();
  inline void clear_has_cash_asset();
  inline void set_has_cash_available();
  inline void clear_has_cash_available();
  inline void set_has_exch_rate();
  inline void clear_has_exch_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  double cash_asset_;
  double cash_available_;
  double exch_rate_;
  ::google::protobuf::int32 currency_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_account* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_config) */ {
 public:
  MYC_config();
  virtual ~MYC_config();

  MYC_config(const MYC_config& from);

  inline MYC_config& operator=(const MYC_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_config& default_instance();

  void Swap(MYC_config* other);

  // implements Message ----------------------------------------------

  inline MYC_config* New() const { return New(NULL); }

  MYC_config* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_config& from);
  void MergeFrom(const MYC_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional int32 trading_date = 1;
  bool has_trading_date() const;
  void clear_trading_date();
  static const int kTradingDateFieldNumber = 1;
  ::google::protobuf::int32 trading_date() const;
  void set_trading_date(::google::protobuf::int32 value);

  // optional int32 day_night = 2;
  bool has_day_night() const;
  void clear_day_night();
  static const int kDayNightFieldNumber = 2;
  ::google::protobuf::int32 day_night() const;
  void set_day_night(::google::protobuf::int32 value);

  // map<string, .MYC.MYC_account> accounts = 3;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >&
      accounts() const;
  ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >*
      mutable_accounts();

  // map<string, .MYC.MYC_contract> contracts = 4;
  int contracts_size() const;
  void clear_contracts();
  static const int kContractsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >&
      contracts() const;
  ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >*
      mutable_contracts();

  // optional string param_file_path = 5;
  bool has_param_file_path() const;
  void clear_param_file_path();
  static const int kParamFilePathFieldNumber = 5;
  const ::std::string& param_file_path() const;
  void set_param_file_path(const ::std::string& value);
  void set_param_file_path(const char* value);
  void set_param_file_path(const char* value, size_t size);
  ::std::string* mutable_param_file_path();
  ::std::string* release_param_file_path();
  void set_allocated_param_file_path(::std::string* param_file_path);

  // optional string output_file_path = 6;
  bool has_output_file_path() const;
  void clear_output_file_path();
  static const int kOutputFilePathFieldNumber = 6;
  const ::std::string& output_file_path() const;
  void set_output_file_path(const ::std::string& value);
  void set_output_file_path(const char* value);
  void set_output_file_path(const char* value, size_t size);
  ::std::string* mutable_output_file_path();
  ::std::string* release_output_file_path();
  void set_allocated_output_file_path(::std::string* output_file_path);

  // optional int32 st_id = 7;
  bool has_st_id() const;
  void clear_st_id();
  static const int kStIdFieldNumber = 7;
  ::google::protobuf::int32 st_id() const;
  void set_st_id(::google::protobuf::int32 value);

  // optional string st_name = 8;
  bool has_st_name() const;
  void clear_st_name();
  static const int kStNameFieldNumber = 8;
  const ::std::string& st_name() const;
  void set_st_name(const ::std::string& value);
  void set_st_name(const char* value);
  void set_st_name(const char* value, size_t size);
  ::std::string* mutable_st_name();
  ::std::string* release_st_name();
  void set_allocated_st_name(::std::string* st_name);

  // @@protoc_insertion_point(class_scope:MYC.MYC_config)
 private:
  inline void set_has_trading_date();
  inline void clear_has_trading_date();
  inline void set_has_day_night();
  inline void clear_has_day_night();
  inline void set_has_param_file_path();
  inline void clear_has_param_file_path();
  inline void set_has_output_file_path();
  inline void clear_has_output_file_path();
  inline void set_has_st_id();
  inline void clear_has_st_id();
  inline void set_has_st_name();
  inline void clear_has_st_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 trading_date_;
  ::google::protobuf::int32 day_night_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::MYC::MYC_account,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      MYC_config_AccountsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::MYC::MYC_account,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > accounts_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::MYC::MYC_contract,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      MYC_config_ContractsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::MYC::MYC_contract,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > contracts_;
  ::google::protobuf::internal::ArenaStringPtr param_file_path_;
  ::google::protobuf::internal::ArenaStringPtr output_file_path_;
  ::google::protobuf::internal::ArenaStringPtr st_name_;
  ::google::protobuf::int32 st_id_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_config* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_future_quote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_future_quote) */ {
 public:
  MYC_future_quote();
  virtual ~MYC_future_quote();

  MYC_future_quote(const MYC_future_quote& from);

  inline MYC_future_quote& operator=(const MYC_future_quote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_future_quote& default_instance();

  void Swap(MYC_future_quote* other);

  // implements Message ----------------------------------------------

  inline MYC_future_quote* New() const { return New(NULL); }

  MYC_future_quote* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_future_quote& from);
  void MergeFrom(const MYC_future_quote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_future_quote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 feed_type = 1;
  bool has_feed_type() const;
  void clear_feed_type();
  static const int kFeedTypeFieldNumber = 1;
  ::google::protobuf::int32 feed_type() const;
  void set_feed_type(::google::protobuf::int32 value);

  // optional string symbol = 2;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional int32 exchange = 3;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  ::google::protobuf::int32 exchange() const;
  void set_exchange(::google::protobuf::int32 value);

  // optional int32 int_time = 4;
  bool has_int_time() const;
  void clear_int_time();
  static const int kIntTimeFieldNumber = 4;
  ::google::protobuf::int32 int_time() const;
  void set_int_time(::google::protobuf::int32 value);

  // optional double pre_close_px = 5;
  bool has_pre_close_px() const;
  void clear_pre_close_px();
  static const int kPreClosePxFieldNumber = 5;
  double pre_close_px() const;
  void set_pre_close_px(double value);

  // optional double pre_settle_px = 6;
  bool has_pre_settle_px() const;
  void clear_pre_settle_px();
  static const int kPreSettlePxFieldNumber = 6;
  double pre_settle_px() const;
  void set_pre_settle_px(double value);

  // optional double pre_open_interest = 7;
  bool has_pre_open_interest() const;
  void clear_pre_open_interest();
  static const int kPreOpenInterestFieldNumber = 7;
  double pre_open_interest() const;
  void set_pre_open_interest(double value);

  // optional double open_interest = 8;
  bool has_open_interest() const;
  void clear_open_interest();
  static const int kOpenInterestFieldNumber = 8;
  double open_interest() const;
  void set_open_interest(double value);

  // optional double open_px = 9;
  bool has_open_px() const;
  void clear_open_px();
  static const int kOpenPxFieldNumber = 9;
  double open_px() const;
  void set_open_px(double value);

  // optional double high_px = 10;
  bool has_high_px() const;
  void clear_high_px();
  static const int kHighPxFieldNumber = 10;
  double high_px() const;
  void set_high_px(double value);

  // optional double low_px = 11;
  bool has_low_px() const;
  void clear_low_px();
  static const int kLowPxFieldNumber = 11;
  double low_px() const;
  void set_low_px(double value);

  // optional double avg_px = 12;
  bool has_avg_px() const;
  void clear_avg_px();
  static const int kAvgPxFieldNumber = 12;
  double avg_px() const;
  void set_avg_px(double value);

  // optional double last_px = 13;
  bool has_last_px() const;
  void clear_last_px();
  static const int kLastPxFieldNumber = 13;
  double last_px() const;
  void set_last_px(double value);

  // optional int64 total_vol = 18;
  bool has_total_vol() const;
  void clear_total_vol();
  static const int kTotalVolFieldNumber = 18;
  ::google::protobuf::int64 total_vol() const;
  void set_total_vol(::google::protobuf::int64 value);

  // optional double total_notional = 19;
  bool has_total_notional() const;
  void clear_total_notional();
  static const int kTotalNotionalFieldNumber = 19;
  double total_notional() const;
  void set_total_notional(double value);

  // optional double upper_limit_px = 20;
  bool has_upper_limit_px() const;
  void clear_upper_limit_px();
  static const int kUpperLimitPxFieldNumber = 20;
  double upper_limit_px() const;
  void set_upper_limit_px(double value);

  // optional double lower_limit_px = 21;
  bool has_lower_limit_px() const;
  void clear_lower_limit_px();
  static const int kLowerLimitPxFieldNumber = 21;
  double lower_limit_px() const;
  void set_lower_limit_px(double value);

  // optional double close_px = 22;
  bool has_close_px() const;
  void clear_close_px();
  static const int kClosePxFieldNumber = 22;
  double close_px() const;
  void set_close_px(double value);

  // optional double settle_px = 23;
  bool has_settle_px() const;
  void clear_settle_px();
  static const int kSettlePxFieldNumber = 23;
  double settle_px() const;
  void set_settle_px(double value);

  // optional int32 total_buy_ordsize = 26;
  bool has_total_buy_ordsize() const;
  void clear_total_buy_ordsize();
  static const int kTotalBuyOrdsizeFieldNumber = 26;
  ::google::protobuf::int32 total_buy_ordsize() const;
  void set_total_buy_ordsize(::google::protobuf::int32 value);

  // optional int32 total_sell_ordsize = 27;
  bool has_total_sell_ordsize() const;
  void clear_total_sell_ordsize();
  static const int kTotalSellOrdsizeFieldNumber = 27;
  ::google::protobuf::int32 total_sell_ordsize() const;
  void set_total_sell_ordsize(::google::protobuf::int32 value);

  // optional double weighted_buy_px = 28;
  bool has_weighted_buy_px() const;
  void clear_weighted_buy_px();
  static const int kWeightedBuyPxFieldNumber = 28;
  double weighted_buy_px() const;
  void set_weighted_buy_px(double value);

  // optional double weighted_sell_px = 29;
  bool has_weighted_sell_px() const;
  void clear_weighted_sell_px();
  static const int kWeightedSellPxFieldNumber = 29;
  double weighted_sell_px() const;
  void set_weighted_sell_px(double value);

  // optional int32 implied_bid_size1 = 31 [default = 0];
  bool has_implied_bid_size1() const;
  void clear_implied_bid_size1();
  static const int kImpliedBidSize1FieldNumber = 31;
  ::google::protobuf::int32 implied_bid_size1() const;
  void set_implied_bid_size1(::google::protobuf::int32 value);

  // optional int32 implied_ask_size1 = 32 [default = 0];
  bool has_implied_ask_size1() const;
  void clear_implied_ask_size1();
  static const int kImpliedAskSize1FieldNumber = 32;
  ::google::protobuf::int32 implied_ask_size1() const;
  void set_implied_ask_size1(::google::protobuf::int32 value);

  // optional int32 implied_bid_size2 = 33 [default = 0];
  bool has_implied_bid_size2() const;
  void clear_implied_bid_size2();
  static const int kImpliedBidSize2FieldNumber = 33;
  ::google::protobuf::int32 implied_bid_size2() const;
  void set_implied_bid_size2(::google::protobuf::int32 value);

  // optional int32 implied_ask_size2 = 34 [default = 0];
  bool has_implied_ask_size2() const;
  void clear_implied_ask_size2();
  static const int kImpliedAskSize2FieldNumber = 34;
  ::google::protobuf::int32 implied_ask_size2() const;
  void set_implied_ask_size2(::google::protobuf::int32 value);

  // optional int32 implied_bid_size3 = 35 [default = 0];
  bool has_implied_bid_size3() const;
  void clear_implied_bid_size3();
  static const int kImpliedBidSize3FieldNumber = 35;
  ::google::protobuf::int32 implied_bid_size3() const;
  void set_implied_bid_size3(::google::protobuf::int32 value);

  // optional int32 implied_ask_size3 = 36 [default = 0];
  bool has_implied_ask_size3() const;
  void clear_implied_ask_size3();
  static const int kImpliedAskSize3FieldNumber = 36;
  ::google::protobuf::int32 implied_ask_size3() const;
  void set_implied_ask_size3(::google::protobuf::int32 value);

  // optional int32 implied_bid_size4 = 37 [default = 0];
  bool has_implied_bid_size4() const;
  void clear_implied_bid_size4();
  static const int kImpliedBidSize4FieldNumber = 37;
  ::google::protobuf::int32 implied_bid_size4() const;
  void set_implied_bid_size4(::google::protobuf::int32 value);

  // optional int32 implied_ask_size4 = 38 [default = 0];
  bool has_implied_ask_size4() const;
  void clear_implied_ask_size4();
  static const int kImpliedAskSize4FieldNumber = 38;
  ::google::protobuf::int32 implied_ask_size4() const;
  void set_implied_ask_size4(::google::protobuf::int32 value);

  // optional int32 implied_bid_size5 = 39 [default = 0];
  bool has_implied_bid_size5() const;
  void clear_implied_bid_size5();
  static const int kImpliedBidSize5FieldNumber = 39;
  ::google::protobuf::int32 implied_bid_size5() const;
  void set_implied_bid_size5(::google::protobuf::int32 value);

  // optional int32 implied_ask_size5 = 40 [default = 0];
  bool has_implied_ask_size5() const;
  void clear_implied_ask_size5();
  static const int kImpliedAskSize5FieldNumber = 40;
  ::google::protobuf::int32 implied_ask_size5() const;
  void set_implied_ask_size5(::google::protobuf::int32 value);

  // optional double bp1 = 41 [default = 0];
  bool has_bp1() const;
  void clear_bp1();
  static const int kBp1FieldNumber = 41;
  double bp1() const;
  void set_bp1(double value);

  // optional int32 bv1 = 42 [default = 0];
  bool has_bv1() const;
  void clear_bv1();
  static const int kBv1FieldNumber = 42;
  ::google::protobuf::int32 bv1() const;
  void set_bv1(::google::protobuf::int32 value);

  // optional double ap1 = 43 [default = 0];
  bool has_ap1() const;
  void clear_ap1();
  static const int kAp1FieldNumber = 43;
  double ap1() const;
  void set_ap1(double value);

  // optional int32 av1 = 44 [default = 0];
  bool has_av1() const;
  void clear_av1();
  static const int kAv1FieldNumber = 44;
  ::google::protobuf::int32 av1() const;
  void set_av1(::google::protobuf::int32 value);

  // optional double bp2 = 45 [default = 0];
  bool has_bp2() const;
  void clear_bp2();
  static const int kBp2FieldNumber = 45;
  double bp2() const;
  void set_bp2(double value);

  // optional int32 bv2 = 46 [default = 0];
  bool has_bv2() const;
  void clear_bv2();
  static const int kBv2FieldNumber = 46;
  ::google::protobuf::int32 bv2() const;
  void set_bv2(::google::protobuf::int32 value);

  // optional double ap2 = 47 [default = 0];
  bool has_ap2() const;
  void clear_ap2();
  static const int kAp2FieldNumber = 47;
  double ap2() const;
  void set_ap2(double value);

  // optional int32 av2 = 48 [default = 0];
  bool has_av2() const;
  void clear_av2();
  static const int kAv2FieldNumber = 48;
  ::google::protobuf::int32 av2() const;
  void set_av2(::google::protobuf::int32 value);

  // optional double bp3 = 49 [default = 0];
  bool has_bp3() const;
  void clear_bp3();
  static const int kBp3FieldNumber = 49;
  double bp3() const;
  void set_bp3(double value);

  // optional int32 bv3 = 50 [default = 0];
  bool has_bv3() const;
  void clear_bv3();
  static const int kBv3FieldNumber = 50;
  ::google::protobuf::int32 bv3() const;
  void set_bv3(::google::protobuf::int32 value);

  // optional double ap3 = 51 [default = 0];
  bool has_ap3() const;
  void clear_ap3();
  static const int kAp3FieldNumber = 51;
  double ap3() const;
  void set_ap3(double value);

  // optional int32 av3 = 52 [default = 0];
  bool has_av3() const;
  void clear_av3();
  static const int kAv3FieldNumber = 52;
  ::google::protobuf::int32 av3() const;
  void set_av3(::google::protobuf::int32 value);

  // optional double bp4 = 53 [default = 0];
  bool has_bp4() const;
  void clear_bp4();
  static const int kBp4FieldNumber = 53;
  double bp4() const;
  void set_bp4(double value);

  // optional int32 bv4 = 54 [default = 0];
  bool has_bv4() const;
  void clear_bv4();
  static const int kBv4FieldNumber = 54;
  ::google::protobuf::int32 bv4() const;
  void set_bv4(::google::protobuf::int32 value);

  // optional double ap4 = 55 [default = 0];
  bool has_ap4() const;
  void clear_ap4();
  static const int kAp4FieldNumber = 55;
  double ap4() const;
  void set_ap4(double value);

  // optional int32 av4 = 56 [default = 0];
  bool has_av4() const;
  void clear_av4();
  static const int kAv4FieldNumber = 56;
  ::google::protobuf::int32 av4() const;
  void set_av4(::google::protobuf::int32 value);

  // optional double bp5 = 57 [default = 0];
  bool has_bp5() const;
  void clear_bp5();
  static const int kBp5FieldNumber = 57;
  double bp5() const;
  void set_bp5(double value);

  // optional int32 bv5 = 58 [default = 0];
  bool has_bv5() const;
  void clear_bv5();
  static const int kBv5FieldNumber = 58;
  ::google::protobuf::int32 bv5() const;
  void set_bv5(::google::protobuf::int32 value);

  // optional double ap5 = 59 [default = 0];
  bool has_ap5() const;
  void clear_ap5();
  static const int kAp5FieldNumber = 59;
  double ap5() const;
  void set_ap5(double value);

  // optional int32 av5 = 60 [default = 0];
  bool has_av5() const;
  void clear_av5();
  static const int kAv5FieldNumber = 60;
  ::google::protobuf::int32 av5() const;
  void set_av5(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MYC.MYC_future_quote)
 private:
  inline void set_has_feed_type();
  inline void clear_has_feed_type();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_int_time();
  inline void clear_has_int_time();
  inline void set_has_pre_close_px();
  inline void clear_has_pre_close_px();
  inline void set_has_pre_settle_px();
  inline void clear_has_pre_settle_px();
  inline void set_has_pre_open_interest();
  inline void clear_has_pre_open_interest();
  inline void set_has_open_interest();
  inline void clear_has_open_interest();
  inline void set_has_open_px();
  inline void clear_has_open_px();
  inline void set_has_high_px();
  inline void clear_has_high_px();
  inline void set_has_low_px();
  inline void clear_has_low_px();
  inline void set_has_avg_px();
  inline void clear_has_avg_px();
  inline void set_has_last_px();
  inline void clear_has_last_px();
  inline void set_has_total_vol();
  inline void clear_has_total_vol();
  inline void set_has_total_notional();
  inline void clear_has_total_notional();
  inline void set_has_upper_limit_px();
  inline void clear_has_upper_limit_px();
  inline void set_has_lower_limit_px();
  inline void clear_has_lower_limit_px();
  inline void set_has_close_px();
  inline void clear_has_close_px();
  inline void set_has_settle_px();
  inline void clear_has_settle_px();
  inline void set_has_total_buy_ordsize();
  inline void clear_has_total_buy_ordsize();
  inline void set_has_total_sell_ordsize();
  inline void clear_has_total_sell_ordsize();
  inline void set_has_weighted_buy_px();
  inline void clear_has_weighted_buy_px();
  inline void set_has_weighted_sell_px();
  inline void clear_has_weighted_sell_px();
  inline void set_has_implied_bid_size1();
  inline void clear_has_implied_bid_size1();
  inline void set_has_implied_ask_size1();
  inline void clear_has_implied_ask_size1();
  inline void set_has_implied_bid_size2();
  inline void clear_has_implied_bid_size2();
  inline void set_has_implied_ask_size2();
  inline void clear_has_implied_ask_size2();
  inline void set_has_implied_bid_size3();
  inline void clear_has_implied_bid_size3();
  inline void set_has_implied_ask_size3();
  inline void clear_has_implied_ask_size3();
  inline void set_has_implied_bid_size4();
  inline void clear_has_implied_bid_size4();
  inline void set_has_implied_ask_size4();
  inline void clear_has_implied_ask_size4();
  inline void set_has_implied_bid_size5();
  inline void clear_has_implied_bid_size5();
  inline void set_has_implied_ask_size5();
  inline void clear_has_implied_ask_size5();
  inline void set_has_bp1();
  inline void clear_has_bp1();
  inline void set_has_bv1();
  inline void clear_has_bv1();
  inline void set_has_ap1();
  inline void clear_has_ap1();
  inline void set_has_av1();
  inline void clear_has_av1();
  inline void set_has_bp2();
  inline void clear_has_bp2();
  inline void set_has_bv2();
  inline void clear_has_bv2();
  inline void set_has_ap2();
  inline void clear_has_ap2();
  inline void set_has_av2();
  inline void clear_has_av2();
  inline void set_has_bp3();
  inline void clear_has_bp3();
  inline void set_has_bv3();
  inline void clear_has_bv3();
  inline void set_has_ap3();
  inline void clear_has_ap3();
  inline void set_has_av3();
  inline void clear_has_av3();
  inline void set_has_bp4();
  inline void clear_has_bp4();
  inline void set_has_bv4();
  inline void clear_has_bv4();
  inline void set_has_ap4();
  inline void clear_has_ap4();
  inline void set_has_av4();
  inline void clear_has_av4();
  inline void set_has_bp5();
  inline void clear_has_bp5();
  inline void set_has_bv5();
  inline void clear_has_bv5();
  inline void set_has_ap5();
  inline void clear_has_ap5();
  inline void set_has_av5();
  inline void clear_has_av5();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int32 feed_type_;
  ::google::protobuf::int32 exchange_;
  double pre_close_px_;
  double pre_settle_px_;
  double pre_open_interest_;
  double open_interest_;
  double open_px_;
  double high_px_;
  double low_px_;
  double avg_px_;
  ::google::protobuf::int32 int_time_;
  ::google::protobuf::int32 total_buy_ordsize_;
  double last_px_;
  ::google::protobuf::int64 total_vol_;
  double total_notional_;
  double upper_limit_px_;
  double lower_limit_px_;
  double close_px_;
  double settle_px_;
  double weighted_buy_px_;
  ::google::protobuf::int32 total_sell_ordsize_;
  ::google::protobuf::int32 implied_bid_size1_;
  double weighted_sell_px_;
  ::google::protobuf::int32 implied_ask_size1_;
  ::google::protobuf::int32 implied_bid_size2_;
  ::google::protobuf::int32 implied_ask_size2_;
  ::google::protobuf::int32 implied_bid_size3_;
  ::google::protobuf::int32 implied_ask_size3_;
  ::google::protobuf::int32 implied_bid_size4_;
  ::google::protobuf::int32 implied_ask_size4_;
  ::google::protobuf::int32 implied_bid_size5_;
  double bp1_;
  ::google::protobuf::int32 implied_ask_size5_;
  ::google::protobuf::int32 bv1_;
  double ap1_;
  double bp2_;
  ::google::protobuf::int32 av1_;
  ::google::protobuf::int32 bv2_;
  double ap2_;
  double bp3_;
  ::google::protobuf::int32 av2_;
  ::google::protobuf::int32 bv3_;
  double ap3_;
  double bp4_;
  ::google::protobuf::int32 av3_;
  ::google::protobuf::int32 bv4_;
  double ap4_;
  double bp5_;
  ::google::protobuf::int32 av4_;
  ::google::protobuf::int32 bv5_;
  double ap5_;
  ::google::protobuf::int32 av5_;
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_future_quote* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_stock_quote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_stock_quote) */ {
 public:
  MYC_stock_quote();
  virtual ~MYC_stock_quote();

  MYC_stock_quote(const MYC_stock_quote& from);

  inline MYC_stock_quote& operator=(const MYC_stock_quote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_stock_quote& default_instance();

  void Swap(MYC_stock_quote* other);

  // implements Message ----------------------------------------------

  inline MYC_stock_quote* New() const { return New(NULL); }

  MYC_stock_quote* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_stock_quote& from);
  void MergeFrom(const MYC_stock_quote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_stock_quote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string wind_code = 1;
  bool has_wind_code() const;
  void clear_wind_code();
  static const int kWindCodeFieldNumber = 1;
  const ::std::string& wind_code() const;
  void set_wind_code(const ::std::string& value);
  void set_wind_code(const char* value);
  void set_wind_code(const char* value, size_t size);
  ::std::string* mutable_wind_code();
  ::std::string* release_wind_code();
  void set_allocated_wind_code(::std::string* wind_code);

  // optional string ticker = 2;
  bool has_ticker() const;
  void clear_ticker();
  static const int kTickerFieldNumber = 2;
  const ::std::string& ticker() const;
  void set_ticker(const ::std::string& value);
  void set_ticker(const char* value);
  void set_ticker(const char* value, size_t size);
  ::std::string* mutable_ticker();
  ::std::string* release_ticker();
  void set_allocated_ticker(::std::string* ticker);

  // optional int32 action_day = 3;
  bool has_action_day() const;
  void clear_action_day();
  static const int kActionDayFieldNumber = 3;
  ::google::protobuf::int32 action_day() const;
  void set_action_day(::google::protobuf::int32 value);

  // optional int32 trading_day = 4;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 4;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // optional int32 exch_time = 5;
  bool has_exch_time() const;
  void clear_exch_time();
  static const int kExchTimeFieldNumber = 5;
  ::google::protobuf::int32 exch_time() const;
  void set_exch_time(::google::protobuf::int32 value);

  // optional int32 status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional double pre_close_px = 7;
  bool has_pre_close_px() const;
  void clear_pre_close_px();
  static const int kPreClosePxFieldNumber = 7;
  double pre_close_px() const;
  void set_pre_close_px(double value);

  // optional double open_px = 8;
  bool has_open_px() const;
  void clear_open_px();
  static const int kOpenPxFieldNumber = 8;
  double open_px() const;
  void set_open_px(double value);

  // optional double high_px = 9;
  bool has_high_px() const;
  void clear_high_px();
  static const int kHighPxFieldNumber = 9;
  double high_px() const;
  void set_high_px(double value);

  // optional double low_px = 10;
  bool has_low_px() const;
  void clear_low_px();
  static const int kLowPxFieldNumber = 10;
  double low_px() const;
  void set_low_px(double value);

  // optional double last_px = 11;
  bool has_last_px() const;
  void clear_last_px();
  static const int kLastPxFieldNumber = 11;
  double last_px() const;
  void set_last_px(double value);

  // optional int32 num_of_trades = 16;
  bool has_num_of_trades() const;
  void clear_num_of_trades();
  static const int kNumOfTradesFieldNumber = 16;
  ::google::protobuf::int32 num_of_trades() const;
  void set_num_of_trades(::google::protobuf::int32 value);

  // optional int64 total_vol = 18;
  bool has_total_vol() const;
  void clear_total_vol();
  static const int kTotalVolFieldNumber = 18;
  ::google::protobuf::int64 total_vol() const;
  void set_total_vol(::google::protobuf::int64 value);

  // optional double total_notional = 19;
  bool has_total_notional() const;
  void clear_total_notional();
  static const int kTotalNotionalFieldNumber = 19;
  double total_notional() const;
  void set_total_notional(double value);

  // optional int64 total_bid_vol = 20;
  bool has_total_bid_vol() const;
  void clear_total_bid_vol();
  static const int kTotalBidVolFieldNumber = 20;
  ::google::protobuf::int64 total_bid_vol() const;
  void set_total_bid_vol(::google::protobuf::int64 value);

  // optional int64 total_ask_vol = 21;
  bool has_total_ask_vol() const;
  void clear_total_ask_vol();
  static const int kTotalAskVolFieldNumber = 21;
  ::google::protobuf::int64 total_ask_vol() const;
  void set_total_ask_vol(::google::protobuf::int64 value);

  // optional double weighted_avg_bp = 22;
  bool has_weighted_avg_bp() const;
  void clear_weighted_avg_bp();
  static const int kWeightedAvgBpFieldNumber = 22;
  double weighted_avg_bp() const;
  void set_weighted_avg_bp(double value);

  // optional double weighted_avg_ap = 23;
  bool has_weighted_avg_ap() const;
  void clear_weighted_avg_ap();
  static const int kWeightedAvgApFieldNumber = 23;
  double weighted_avg_ap() const;
  void set_weighted_avg_ap(double value);

  // optional double IOPV = 24;
  bool has_iopv() const;
  void clear_iopv();
  static const int kIOPVFieldNumber = 24;
  double iopv() const;
  void set_iopv(double value);

  // optional double yield_to_maturity = 25;
  bool has_yield_to_maturity() const;
  void clear_yield_to_maturity();
  static const int kYieldToMaturityFieldNumber = 25;
  double yield_to_maturity() const;
  void set_yield_to_maturity(double value);

  // optional double upper_limit_px = 26;
  bool has_upper_limit_px() const;
  void clear_upper_limit_px();
  static const int kUpperLimitPxFieldNumber = 26;
  double upper_limit_px() const;
  void set_upper_limit_px(double value);

  // optional double lower_limit_px = 27;
  bool has_lower_limit_px() const;
  void clear_lower_limit_px();
  static const int kLowerLimitPxFieldNumber = 27;
  double lower_limit_px() const;
  void set_lower_limit_px(double value);

  // optional string prefix = 28;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 28;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // optional double PE1 = 29;
  bool has_pe1() const;
  void clear_pe1();
  static const int kPE1FieldNumber = 29;
  double pe1() const;
  void set_pe1(double value);

  // optional double PE2 = 30;
  bool has_pe2() const;
  void clear_pe2();
  static const int kPE2FieldNumber = 30;
  double pe2() const;
  void set_pe2(double value);

  // optional int32 change = 31;
  bool has_change() const;
  void clear_change();
  static const int kChangeFieldNumber = 31;
  ::google::protobuf::int32 change() const;
  void set_change(::google::protobuf::int32 value);

  // optional double bp1 = 41 [default = 0];
  bool has_bp1() const;
  void clear_bp1();
  static const int kBp1FieldNumber = 41;
  double bp1() const;
  void set_bp1(double value);

  // optional int32 bv1 = 42 [default = 0];
  bool has_bv1() const;
  void clear_bv1();
  static const int kBv1FieldNumber = 42;
  ::google::protobuf::int32 bv1() const;
  void set_bv1(::google::protobuf::int32 value);

  // optional double ap1 = 43 [default = 0];
  bool has_ap1() const;
  void clear_ap1();
  static const int kAp1FieldNumber = 43;
  double ap1() const;
  void set_ap1(double value);

  // optional int32 av1 = 44 [default = 0];
  bool has_av1() const;
  void clear_av1();
  static const int kAv1FieldNumber = 44;
  ::google::protobuf::int32 av1() const;
  void set_av1(::google::protobuf::int32 value);

  // optional double bp2 = 45 [default = 0];
  bool has_bp2() const;
  void clear_bp2();
  static const int kBp2FieldNumber = 45;
  double bp2() const;
  void set_bp2(double value);

  // optional int32 bv2 = 46 [default = 0];
  bool has_bv2() const;
  void clear_bv2();
  static const int kBv2FieldNumber = 46;
  ::google::protobuf::int32 bv2() const;
  void set_bv2(::google::protobuf::int32 value);

  // optional double ap2 = 47 [default = 0];
  bool has_ap2() const;
  void clear_ap2();
  static const int kAp2FieldNumber = 47;
  double ap2() const;
  void set_ap2(double value);

  // optional int32 av2 = 48 [default = 0];
  bool has_av2() const;
  void clear_av2();
  static const int kAv2FieldNumber = 48;
  ::google::protobuf::int32 av2() const;
  void set_av2(::google::protobuf::int32 value);

  // optional double bp3 = 49 [default = 0];
  bool has_bp3() const;
  void clear_bp3();
  static const int kBp3FieldNumber = 49;
  double bp3() const;
  void set_bp3(double value);

  // optional int32 bv3 = 50 [default = 0];
  bool has_bv3() const;
  void clear_bv3();
  static const int kBv3FieldNumber = 50;
  ::google::protobuf::int32 bv3() const;
  void set_bv3(::google::protobuf::int32 value);

  // optional double ap3 = 51 [default = 0];
  bool has_ap3() const;
  void clear_ap3();
  static const int kAp3FieldNumber = 51;
  double ap3() const;
  void set_ap3(double value);

  // optional int32 av3 = 52 [default = 0];
  bool has_av3() const;
  void clear_av3();
  static const int kAv3FieldNumber = 52;
  ::google::protobuf::int32 av3() const;
  void set_av3(::google::protobuf::int32 value);

  // optional double bp4 = 53 [default = 0];
  bool has_bp4() const;
  void clear_bp4();
  static const int kBp4FieldNumber = 53;
  double bp4() const;
  void set_bp4(double value);

  // optional int32 bv4 = 54 [default = 0];
  bool has_bv4() const;
  void clear_bv4();
  static const int kBv4FieldNumber = 54;
  ::google::protobuf::int32 bv4() const;
  void set_bv4(::google::protobuf::int32 value);

  // optional double ap4 = 55 [default = 0];
  bool has_ap4() const;
  void clear_ap4();
  static const int kAp4FieldNumber = 55;
  double ap4() const;
  void set_ap4(double value);

  // optional int32 av4 = 56 [default = 0];
  bool has_av4() const;
  void clear_av4();
  static const int kAv4FieldNumber = 56;
  ::google::protobuf::int32 av4() const;
  void set_av4(::google::protobuf::int32 value);

  // optional double bp5 = 57 [default = 0];
  bool has_bp5() const;
  void clear_bp5();
  static const int kBp5FieldNumber = 57;
  double bp5() const;
  void set_bp5(double value);

  // optional int32 bv5 = 58 [default = 0];
  bool has_bv5() const;
  void clear_bv5();
  static const int kBv5FieldNumber = 58;
  ::google::protobuf::int32 bv5() const;
  void set_bv5(::google::protobuf::int32 value);

  // optional double ap5 = 59 [default = 0];
  bool has_ap5() const;
  void clear_ap5();
  static const int kAp5FieldNumber = 59;
  double ap5() const;
  void set_ap5(double value);

  // optional int32 av5 = 60 [default = 0];
  bool has_av5() const;
  void clear_av5();
  static const int kAv5FieldNumber = 60;
  ::google::protobuf::int32 av5() const;
  void set_av5(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MYC.MYC_stock_quote)
 private:
  inline void set_has_wind_code();
  inline void clear_has_wind_code();
  inline void set_has_ticker();
  inline void clear_has_ticker();
  inline void set_has_action_day();
  inline void clear_has_action_day();
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_exch_time();
  inline void clear_has_exch_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_pre_close_px();
  inline void clear_has_pre_close_px();
  inline void set_has_open_px();
  inline void clear_has_open_px();
  inline void set_has_high_px();
  inline void clear_has_high_px();
  inline void set_has_low_px();
  inline void clear_has_low_px();
  inline void set_has_last_px();
  inline void clear_has_last_px();
  inline void set_has_num_of_trades();
  inline void clear_has_num_of_trades();
  inline void set_has_total_vol();
  inline void clear_has_total_vol();
  inline void set_has_total_notional();
  inline void clear_has_total_notional();
  inline void set_has_total_bid_vol();
  inline void clear_has_total_bid_vol();
  inline void set_has_total_ask_vol();
  inline void clear_has_total_ask_vol();
  inline void set_has_weighted_avg_bp();
  inline void clear_has_weighted_avg_bp();
  inline void set_has_weighted_avg_ap();
  inline void clear_has_weighted_avg_ap();
  inline void set_has_iopv();
  inline void clear_has_iopv();
  inline void set_has_yield_to_maturity();
  inline void clear_has_yield_to_maturity();
  inline void set_has_upper_limit_px();
  inline void clear_has_upper_limit_px();
  inline void set_has_lower_limit_px();
  inline void clear_has_lower_limit_px();
  inline void set_has_prefix();
  inline void clear_has_prefix();
  inline void set_has_pe1();
  inline void clear_has_pe1();
  inline void set_has_pe2();
  inline void clear_has_pe2();
  inline void set_has_change();
  inline void clear_has_change();
  inline void set_has_bp1();
  inline void clear_has_bp1();
  inline void set_has_bv1();
  inline void clear_has_bv1();
  inline void set_has_ap1();
  inline void clear_has_ap1();
  inline void set_has_av1();
  inline void clear_has_av1();
  inline void set_has_bp2();
  inline void clear_has_bp2();
  inline void set_has_bv2();
  inline void clear_has_bv2();
  inline void set_has_ap2();
  inline void clear_has_ap2();
  inline void set_has_av2();
  inline void clear_has_av2();
  inline void set_has_bp3();
  inline void clear_has_bp3();
  inline void set_has_bv3();
  inline void clear_has_bv3();
  inline void set_has_ap3();
  inline void clear_has_ap3();
  inline void set_has_av3();
  inline void clear_has_av3();
  inline void set_has_bp4();
  inline void clear_has_bp4();
  inline void set_has_bv4();
  inline void clear_has_bv4();
  inline void set_has_ap4();
  inline void clear_has_ap4();
  inline void set_has_av4();
  inline void clear_has_av4();
  inline void set_has_bp5();
  inline void clear_has_bp5();
  inline void set_has_bv5();
  inline void clear_has_bv5();
  inline void set_has_ap5();
  inline void clear_has_ap5();
  inline void set_has_av5();
  inline void clear_has_av5();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::internal::ArenaStringPtr wind_code_;
  ::google::protobuf::internal::ArenaStringPtr ticker_;
  ::google::protobuf::int32 action_day_;
  ::google::protobuf::int32 trading_day_;
  ::google::protobuf::int32 exch_time_;
  ::google::protobuf::int32 status_;
  double pre_close_px_;
  double open_px_;
  double high_px_;
  double low_px_;
  double last_px_;
  ::google::protobuf::int64 total_vol_;
  double total_notional_;
  ::google::protobuf::int64 total_bid_vol_;
  ::google::protobuf::int64 total_ask_vol_;
  double weighted_avg_bp_;
  double weighted_avg_ap_;
  double iopv_;
  ::google::protobuf::int32 num_of_trades_;
  ::google::protobuf::int32 change_;
  double yield_to_maturity_;
  double upper_limit_px_;
  double lower_limit_px_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  double pe1_;
  double pe2_;
  double bp1_;
  double ap1_;
  ::google::protobuf::int32 bv1_;
  ::google::protobuf::int32 av1_;
  double bp2_;
  double ap2_;
  ::google::protobuf::int32 bv2_;
  ::google::protobuf::int32 av2_;
  double bp3_;
  double ap3_;
  ::google::protobuf::int32 bv3_;
  ::google::protobuf::int32 av3_;
  double bp4_;
  double ap4_;
  ::google::protobuf::int32 bv4_;
  ::google::protobuf::int32 av4_;
  double bp5_;
  double ap5_;
  ::google::protobuf::int32 bv5_;
  ::google::protobuf::int32 av5_;
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_stock_quote* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MYC_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MYC.MYC_response) */ {
 public:
  MYC_response();
  virtual ~MYC_response();

  MYC_response(const MYC_response& from);

  inline MYC_response& operator=(const MYC_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MYC_response& default_instance();

  void Swap(MYC_response* other);

  // implements Message ----------------------------------------------

  inline MYC_response* New() const { return New(NULL); }

  MYC_response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MYC_response& from);
  void MergeFrom(const MYC_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MYC_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 order_id = 1;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  ::google::protobuf::int64 order_id() const;
  void set_order_id(::google::protobuf::int64 value);

  // optional string symbol = 2;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional int32 direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // optional int32 open_close = 4;
  bool has_open_close() const;
  void clear_open_close();
  static const int kOpenCloseFieldNumber = 4;
  ::google::protobuf::int32 open_close() const;
  void set_open_close(::google::protobuf::int32 value);

  // optional double exe_price = 5;
  bool has_exe_price() const;
  void clear_exe_price();
  static const int kExePriceFieldNumber = 5;
  double exe_price() const;
  void set_exe_price(double value);

  // optional int32 exe_volume = 6;
  bool has_exe_volume() const;
  void clear_exe_volume();
  static const int kExeVolumeFieldNumber = 6;
  ::google::protobuf::int32 exe_volume() const;
  void set_exe_volume(::google::protobuf::int32 value);

  // optional int32 status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 error_no = 8;
  bool has_error_no() const;
  void clear_error_no();
  static const int kErrorNoFieldNumber = 8;
  ::google::protobuf::int32 error_no() const;
  void set_error_no(::google::protobuf::int32 value);

  // optional string error_info = 9;
  bool has_error_info() const;
  void clear_error_info();
  static const int kErrorInfoFieldNumber = 9;
  const ::std::string& error_info() const;
  void set_error_info(const ::std::string& value);
  void set_error_info(const char* value);
  void set_error_info(const char* value, size_t size);
  ::std::string* mutable_error_info();
  ::std::string* release_error_info();
  void set_allocated_error_info(::std::string* error_info);

  // @@protoc_insertion_point(class_scope:MYC.MYC_response)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_open_close();
  inline void clear_has_open_close();
  inline void set_has_exe_price();
  inline void clear_has_exe_price();
  inline void set_has_exe_volume();
  inline void clear_has_exe_volume();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error_no();
  inline void clear_has_error_no();
  inline void set_has_error_info();
  inline void clear_has_error_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 order_id_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 open_close_;
  double exe_price_;
  ::google::protobuf::int32 exe_volume_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::internal::ArenaStringPtr error_info_;
  ::google::protobuf::int32 error_no_;
  friend void XT_COMMON_API protobuf_AddDesc_MYCData_2eproto();
  friend void protobuf_AssignDesc_MYCData_2eproto();
  friend void protobuf_ShutdownFile_MYCData_2eproto();

  void InitAsDefaultInstance();
  static MYC_response* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_OrderError

// -------------------------------------------------------------------

// MYC_SmartExecutionError

// -------------------------------------------------------------------

// MYC_Direction

// -------------------------------------------------------------------

// MYC_OpenClose

// -------------------------------------------------------------------

// MYC_InvestorTypes

// -------------------------------------------------------------------

// MYC_OrderType

// -------------------------------------------------------------------

// MYC_OrderStatus

// -------------------------------------------------------------------

// MYC_TIF

// -------------------------------------------------------------------

// MYC_Currency

// -------------------------------------------------------------------

// MYC_Exchange

// -------------------------------------------------------------------

// MYC_FeedType

// -------------------------------------------------------------------

// MYC_contract

// optional string symbol = 1;
inline bool MYC_contract::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MYC_contract::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MYC_contract::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MYC_contract::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& MYC_contract::symbol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_contract::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.symbol)
}
inline void MYC_contract::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_contract.symbol)
}
inline void MYC_contract::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_contract.symbol)
}
inline ::std::string* MYC_contract::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_contract.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_contract::release_symbol() {
  // @@protoc_insertion_point(field_release:MYC.MYC_contract.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_contract::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_contract.symbol)
}

// optional int32 exch = 2;
inline bool MYC_contract::has_exch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MYC_contract::set_has_exch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MYC_contract::clear_has_exch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MYC_contract::clear_exch() {
  exch_ = 0;
  clear_has_exch();
}
inline ::google::protobuf::int32 MYC_contract::exch() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.exch)
  return exch_;
}
inline void MYC_contract::set_exch(::google::protobuf::int32 value) {
  set_has_exch();
  exch_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.exch)
}

// optional int32 max_accum_open_vol = 3;
inline bool MYC_contract::has_max_accum_open_vol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MYC_contract::set_has_max_accum_open_vol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MYC_contract::clear_has_max_accum_open_vol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MYC_contract::clear_max_accum_open_vol() {
  max_accum_open_vol_ = 0;
  clear_has_max_accum_open_vol();
}
inline ::google::protobuf::int32 MYC_contract::max_accum_open_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.max_accum_open_vol)
  return max_accum_open_vol_;
}
inline void MYC_contract::set_max_accum_open_vol(::google::protobuf::int32 value) {
  set_has_max_accum_open_vol();
  max_accum_open_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.max_accum_open_vol)
}

// optional int32 max_cancel_limit = 4;
inline bool MYC_contract::has_max_cancel_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MYC_contract::set_has_max_cancel_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MYC_contract::clear_has_max_cancel_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MYC_contract::clear_max_cancel_limit() {
  max_cancel_limit_ = 0;
  clear_has_max_cancel_limit();
}
inline ::google::protobuf::int32 MYC_contract::max_cancel_limit() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.max_cancel_limit)
  return max_cancel_limit_;
}
inline void MYC_contract::set_max_cancel_limit(::google::protobuf::int32 value) {
  set_has_max_cancel_limit();
  max_cancel_limit_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.max_cancel_limit)
}

// optional int32 expiration_date = 5;
inline bool MYC_contract::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MYC_contract::set_has_expiration_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MYC_contract::clear_has_expiration_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MYC_contract::clear_expiration_date() {
  expiration_date_ = 0;
  clear_has_expiration_date();
}
inline ::google::protobuf::int32 MYC_contract::expiration_date() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.expiration_date)
  return expiration_date_;
}
inline void MYC_contract::set_expiration_date(::google::protobuf::int32 value) {
  set_has_expiration_date();
  expiration_date_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.expiration_date)
}

// optional double tick_size = 6;
inline bool MYC_contract::has_tick_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MYC_contract::set_has_tick_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MYC_contract::clear_has_tick_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MYC_contract::clear_tick_size() {
  tick_size_ = 0;
  clear_has_tick_size();
}
inline double MYC_contract::tick_size() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.tick_size)
  return tick_size_;
}
inline void MYC_contract::set_tick_size(double value) {
  set_has_tick_size();
  tick_size_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.tick_size)
}

// optional double multiple = 7;
inline bool MYC_contract::has_multiple() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MYC_contract::set_has_multiple() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MYC_contract::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MYC_contract::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline double MYC_contract::multiple() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.multiple)
  return multiple_;
}
inline void MYC_contract::set_multiple(double value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.multiple)
}

// optional string account = 8;
inline bool MYC_contract::has_account() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MYC_contract::set_has_account() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MYC_contract::clear_has_account() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MYC_contract::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& MYC_contract::account() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_contract::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.account)
}
inline void MYC_contract::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_contract.account)
}
inline void MYC_contract::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_contract.account)
}
inline ::std::string* MYC_contract::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_contract.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_contract::release_account() {
  // @@protoc_insertion_point(field_release:MYC.MYC_contract.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_contract::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_contract.account)
}

// optional int32 yesterday_pos_long_volume = 9;
inline bool MYC_contract::has_yesterday_pos_long_volume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MYC_contract::set_has_yesterday_pos_long_volume() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MYC_contract::clear_has_yesterday_pos_long_volume() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MYC_contract::clear_yesterday_pos_long_volume() {
  yesterday_pos_long_volume_ = 0;
  clear_has_yesterday_pos_long_volume();
}
inline ::google::protobuf::int32 MYC_contract::yesterday_pos_long_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_long_volume)
  return yesterday_pos_long_volume_;
}
inline void MYC_contract::set_yesterday_pos_long_volume(::google::protobuf::int32 value) {
  set_has_yesterday_pos_long_volume();
  yesterday_pos_long_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_long_volume)
}

// optional double yesterday_pos_long_price = 10;
inline bool MYC_contract::has_yesterday_pos_long_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MYC_contract::set_has_yesterday_pos_long_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MYC_contract::clear_has_yesterday_pos_long_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MYC_contract::clear_yesterday_pos_long_price() {
  yesterday_pos_long_price_ = 0;
  clear_has_yesterday_pos_long_price();
}
inline double MYC_contract::yesterday_pos_long_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_long_price)
  return yesterday_pos_long_price_;
}
inline void MYC_contract::set_yesterday_pos_long_price(double value) {
  set_has_yesterday_pos_long_price();
  yesterday_pos_long_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_long_price)
}

// optional int32 yesterday_pos_short_volume = 11;
inline bool MYC_contract::has_yesterday_pos_short_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MYC_contract::set_has_yesterday_pos_short_volume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MYC_contract::clear_has_yesterday_pos_short_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MYC_contract::clear_yesterday_pos_short_volume() {
  yesterday_pos_short_volume_ = 0;
  clear_has_yesterday_pos_short_volume();
}
inline ::google::protobuf::int32 MYC_contract::yesterday_pos_short_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_short_volume)
  return yesterday_pos_short_volume_;
}
inline void MYC_contract::set_yesterday_pos_short_volume(::google::protobuf::int32 value) {
  set_has_yesterday_pos_short_volume();
  yesterday_pos_short_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_short_volume)
}

// optional double yesterday_pos_short_price = 12;
inline bool MYC_contract::has_yesterday_pos_short_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MYC_contract::set_has_yesterday_pos_short_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MYC_contract::clear_has_yesterday_pos_short_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MYC_contract::clear_yesterday_pos_short_price() {
  yesterday_pos_short_price_ = 0;
  clear_has_yesterday_pos_short_price();
}
inline double MYC_contract::yesterday_pos_short_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_short_price)
  return yesterday_pos_short_price_;
}
inline void MYC_contract::set_yesterday_pos_short_price(double value) {
  set_has_yesterday_pos_short_price();
  yesterday_pos_short_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_short_price)
}

// optional int32 today_pos_long_volume = 13;
inline bool MYC_contract::has_today_pos_long_volume() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MYC_contract::set_has_today_pos_long_volume() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MYC_contract::clear_has_today_pos_long_volume() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MYC_contract::clear_today_pos_long_volume() {
  today_pos_long_volume_ = 0;
  clear_has_today_pos_long_volume();
}
inline ::google::protobuf::int32 MYC_contract::today_pos_long_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_long_volume)
  return today_pos_long_volume_;
}
inline void MYC_contract::set_today_pos_long_volume(::google::protobuf::int32 value) {
  set_has_today_pos_long_volume();
  today_pos_long_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_long_volume)
}

// optional double today_pos_long_price = 14;
inline bool MYC_contract::has_today_pos_long_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MYC_contract::set_has_today_pos_long_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MYC_contract::clear_has_today_pos_long_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MYC_contract::clear_today_pos_long_price() {
  today_pos_long_price_ = 0;
  clear_has_today_pos_long_price();
}
inline double MYC_contract::today_pos_long_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_long_price)
  return today_pos_long_price_;
}
inline void MYC_contract::set_today_pos_long_price(double value) {
  set_has_today_pos_long_price();
  today_pos_long_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_long_price)
}

// optional int32 today_pos_short_volume = 15;
inline bool MYC_contract::has_today_pos_short_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MYC_contract::set_has_today_pos_short_volume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MYC_contract::clear_has_today_pos_short_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MYC_contract::clear_today_pos_short_volume() {
  today_pos_short_volume_ = 0;
  clear_has_today_pos_short_volume();
}
inline ::google::protobuf::int32 MYC_contract::today_pos_short_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_short_volume)
  return today_pos_short_volume_;
}
inline void MYC_contract::set_today_pos_short_volume(::google::protobuf::int32 value) {
  set_has_today_pos_short_volume();
  today_pos_short_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_short_volume)
}

// optional double today_pos_short_price = 16;
inline bool MYC_contract::has_today_pos_short_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MYC_contract::set_has_today_pos_short_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MYC_contract::clear_has_today_pos_short_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MYC_contract::clear_today_pos_short_price() {
  today_pos_short_price_ = 0;
  clear_has_today_pos_short_price();
}
inline double MYC_contract::today_pos_short_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_short_price)
  return today_pos_short_price_;
}
inline void MYC_contract::set_today_pos_short_price(double value) {
  set_has_today_pos_short_price();
  today_pos_short_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_short_price)
}

// optional int32 fee_by_lot = 17;
inline bool MYC_contract::has_fee_by_lot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MYC_contract::set_has_fee_by_lot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MYC_contract::clear_has_fee_by_lot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MYC_contract::clear_fee_by_lot() {
  fee_by_lot_ = 0;
  clear_has_fee_by_lot();
}
inline ::google::protobuf::int32 MYC_contract::fee_by_lot() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.fee_by_lot)
  return fee_by_lot_;
}
inline void MYC_contract::set_fee_by_lot(::google::protobuf::int32 value) {
  set_has_fee_by_lot();
  fee_by_lot_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.fee_by_lot)
}

// optional double exchange_fee = 18;
inline bool MYC_contract::has_exchange_fee() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MYC_contract::set_has_exchange_fee() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MYC_contract::clear_has_exchange_fee() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MYC_contract::clear_exchange_fee() {
  exchange_fee_ = 0;
  clear_has_exchange_fee();
}
inline double MYC_contract::exchange_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.exchange_fee)
  return exchange_fee_;
}
inline void MYC_contract::set_exchange_fee(double value) {
  set_has_exchange_fee();
  exchange_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.exchange_fee)
}

// optional double yes_exchange_fee = 19;
inline bool MYC_contract::has_yes_exchange_fee() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MYC_contract::set_has_yes_exchange_fee() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MYC_contract::clear_has_yes_exchange_fee() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MYC_contract::clear_yes_exchange_fee() {
  yes_exchange_fee_ = 0;
  clear_has_yes_exchange_fee();
}
inline double MYC_contract::yes_exchange_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yes_exchange_fee)
  return yes_exchange_fee_;
}
inline void MYC_contract::set_yes_exchange_fee(double value) {
  set_has_yes_exchange_fee();
  yes_exchange_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yes_exchange_fee)
}

// optional double broker_fee = 20;
inline bool MYC_contract::has_broker_fee() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MYC_contract::set_has_broker_fee() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MYC_contract::clear_has_broker_fee() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MYC_contract::clear_broker_fee() {
  broker_fee_ = 0;
  clear_has_broker_fee();
}
inline double MYC_contract::broker_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.broker_fee)
  return broker_fee_;
}
inline void MYC_contract::set_broker_fee(double value) {
  set_has_broker_fee();
  broker_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.broker_fee)
}

// optional double stamp_tax = 21;
inline bool MYC_contract::has_stamp_tax() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MYC_contract::set_has_stamp_tax() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MYC_contract::clear_has_stamp_tax() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MYC_contract::clear_stamp_tax() {
  stamp_tax_ = 0;
  clear_has_stamp_tax();
}
inline double MYC_contract::stamp_tax() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.stamp_tax)
  return stamp_tax_;
}
inline void MYC_contract::set_stamp_tax(double value) {
  set_has_stamp_tax();
  stamp_tax_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.stamp_tax)
}

// optional double acc_transfer_fee = 22;
inline bool MYC_contract::has_acc_transfer_fee() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MYC_contract::set_has_acc_transfer_fee() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MYC_contract::clear_has_acc_transfer_fee() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MYC_contract::clear_acc_transfer_fee() {
  acc_transfer_fee_ = 0;
  clear_has_acc_transfer_fee();
}
inline double MYC_contract::acc_transfer_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.acc_transfer_fee)
  return acc_transfer_fee_;
}
inline void MYC_contract::set_acc_transfer_fee(double value) {
  set_has_acc_transfer_fee();
  acc_transfer_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.acc_transfer_fee)
}

// -------------------------------------------------------------------

// MYC_account

// optional string account = 1;
inline bool MYC_account::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MYC_account::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MYC_account::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MYC_account::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& MYC_account::account() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_account::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_account.account)
}
inline void MYC_account::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_account.account)
}
inline void MYC_account::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_account.account)
}
inline ::std::string* MYC_account::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_account.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_account::release_account() {
  // @@protoc_insertion_point(field_release:MYC.MYC_account.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_account::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_account.account)
}

// optional int32 currency = 2;
inline bool MYC_account::has_currency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MYC_account::set_has_currency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MYC_account::clear_has_currency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MYC_account::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 MYC_account::currency() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.currency)
  return currency_;
}
inline void MYC_account::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.currency)
}

// optional double cash_asset = 3;
inline bool MYC_account::has_cash_asset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MYC_account::set_has_cash_asset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MYC_account::clear_has_cash_asset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MYC_account::clear_cash_asset() {
  cash_asset_ = 0;
  clear_has_cash_asset();
}
inline double MYC_account::cash_asset() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.cash_asset)
  return cash_asset_;
}
inline void MYC_account::set_cash_asset(double value) {
  set_has_cash_asset();
  cash_asset_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.cash_asset)
}

// optional double cash_available = 4;
inline bool MYC_account::has_cash_available() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MYC_account::set_has_cash_available() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MYC_account::clear_has_cash_available() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MYC_account::clear_cash_available() {
  cash_available_ = 0;
  clear_has_cash_available();
}
inline double MYC_account::cash_available() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.cash_available)
  return cash_available_;
}
inline void MYC_account::set_cash_available(double value) {
  set_has_cash_available();
  cash_available_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.cash_available)
}

// optional double exch_rate = 5;
inline bool MYC_account::has_exch_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MYC_account::set_has_exch_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MYC_account::clear_has_exch_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MYC_account::clear_exch_rate() {
  exch_rate_ = 0;
  clear_has_exch_rate();
}
inline double MYC_account::exch_rate() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.exch_rate)
  return exch_rate_;
}
inline void MYC_account::set_exch_rate(double value) {
  set_has_exch_rate();
  exch_rate_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.exch_rate)
}

// -------------------------------------------------------------------

// MYC_config

// optional int32 trading_date = 1;
inline bool MYC_config::has_trading_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MYC_config::set_has_trading_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MYC_config::clear_has_trading_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MYC_config::clear_trading_date() {
  trading_date_ = 0;
  clear_has_trading_date();
}
inline ::google::protobuf::int32 MYC_config::trading_date() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.trading_date)
  return trading_date_;
}
inline void MYC_config::set_trading_date(::google::protobuf::int32 value) {
  set_has_trading_date();
  trading_date_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_config.trading_date)
}

// optional int32 day_night = 2;
inline bool MYC_config::has_day_night() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MYC_config::set_has_day_night() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MYC_config::clear_has_day_night() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MYC_config::clear_day_night() {
  day_night_ = 0;
  clear_has_day_night();
}
inline ::google::protobuf::int32 MYC_config::day_night() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.day_night)
  return day_night_;
}
inline void MYC_config::set_day_night(::google::protobuf::int32 value) {
  set_has_day_night();
  day_night_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_config.day_night)
}

// map<string, .MYC.MYC_account> accounts = 3;
inline int MYC_config::accounts_size() const {
  return accounts_.size();
}
inline void MYC_config::clear_accounts() {
  accounts_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >&
MYC_config::accounts() const {
  // @@protoc_insertion_point(field_map:MYC.MYC_config.accounts)
  return accounts_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >*
MYC_config::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_map:MYC.MYC_config.accounts)
  return accounts_.MutableMap();
}

// map<string, .MYC.MYC_contract> contracts = 4;
inline int MYC_config::contracts_size() const {
  return contracts_.size();
}
inline void MYC_config::clear_contracts() {
  contracts_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >&
MYC_config::contracts() const {
  // @@protoc_insertion_point(field_map:MYC.MYC_config.contracts)
  return contracts_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >*
MYC_config::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_map:MYC.MYC_config.contracts)
  return contracts_.MutableMap();
}

// optional string param_file_path = 5;
inline bool MYC_config::has_param_file_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MYC_config::set_has_param_file_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MYC_config::clear_has_param_file_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MYC_config::clear_param_file_path() {
  param_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_file_path();
}
inline const ::std::string& MYC_config::param_file_path() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.param_file_path)
  return param_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_config::set_param_file_path(const ::std::string& value) {
  set_has_param_file_path();
  param_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_config.param_file_path)
}
inline void MYC_config::set_param_file_path(const char* value) {
  set_has_param_file_path();
  param_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_config.param_file_path)
}
inline void MYC_config::set_param_file_path(const char* value, size_t size) {
  set_has_param_file_path();
  param_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_config.param_file_path)
}
inline ::std::string* MYC_config::mutable_param_file_path() {
  set_has_param_file_path();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_config.param_file_path)
  return param_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_config::release_param_file_path() {
  // @@protoc_insertion_point(field_release:MYC.MYC_config.param_file_path)
  clear_has_param_file_path();
  return param_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_config::set_allocated_param_file_path(::std::string* param_file_path) {
  if (param_file_path != NULL) {
    set_has_param_file_path();
  } else {
    clear_has_param_file_path();
  }
  param_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_file_path);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_config.param_file_path)
}

// optional string output_file_path = 6;
inline bool MYC_config::has_output_file_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MYC_config::set_has_output_file_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MYC_config::clear_has_output_file_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MYC_config::clear_output_file_path() {
  output_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_file_path();
}
inline const ::std::string& MYC_config::output_file_path() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.output_file_path)
  return output_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_config::set_output_file_path(const ::std::string& value) {
  set_has_output_file_path();
  output_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_config.output_file_path)
}
inline void MYC_config::set_output_file_path(const char* value) {
  set_has_output_file_path();
  output_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_config.output_file_path)
}
inline void MYC_config::set_output_file_path(const char* value, size_t size) {
  set_has_output_file_path();
  output_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_config.output_file_path)
}
inline ::std::string* MYC_config::mutable_output_file_path() {
  set_has_output_file_path();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_config.output_file_path)
  return output_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_config::release_output_file_path() {
  // @@protoc_insertion_point(field_release:MYC.MYC_config.output_file_path)
  clear_has_output_file_path();
  return output_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_config::set_allocated_output_file_path(::std::string* output_file_path) {
  if (output_file_path != NULL) {
    set_has_output_file_path();
  } else {
    clear_has_output_file_path();
  }
  output_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_file_path);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_config.output_file_path)
}

// optional int32 st_id = 7;
inline bool MYC_config::has_st_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MYC_config::set_has_st_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MYC_config::clear_has_st_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MYC_config::clear_st_id() {
  st_id_ = 0;
  clear_has_st_id();
}
inline ::google::protobuf::int32 MYC_config::st_id() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.st_id)
  return st_id_;
}
inline void MYC_config::set_st_id(::google::protobuf::int32 value) {
  set_has_st_id();
  st_id_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_config.st_id)
}

// optional string st_name = 8;
inline bool MYC_config::has_st_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MYC_config::set_has_st_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MYC_config::clear_has_st_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MYC_config::clear_st_name() {
  st_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_st_name();
}
inline const ::std::string& MYC_config::st_name() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.st_name)
  return st_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_config::set_st_name(const ::std::string& value) {
  set_has_st_name();
  st_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_config.st_name)
}
inline void MYC_config::set_st_name(const char* value) {
  set_has_st_name();
  st_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_config.st_name)
}
inline void MYC_config::set_st_name(const char* value, size_t size) {
  set_has_st_name();
  st_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_config.st_name)
}
inline ::std::string* MYC_config::mutable_st_name() {
  set_has_st_name();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_config.st_name)
  return st_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_config::release_st_name() {
  // @@protoc_insertion_point(field_release:MYC.MYC_config.st_name)
  clear_has_st_name();
  return st_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_config::set_allocated_st_name(::std::string* st_name) {
  if (st_name != NULL) {
    set_has_st_name();
  } else {
    clear_has_st_name();
  }
  st_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), st_name);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_config.st_name)
}

// -------------------------------------------------------------------

// MYC_future_quote

// optional int32 feed_type = 1;
inline bool MYC_future_quote::has_feed_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MYC_future_quote::set_has_feed_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MYC_future_quote::clear_has_feed_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MYC_future_quote::clear_feed_type() {
  feed_type_ = 0;
  clear_has_feed_type();
}
inline ::google::protobuf::int32 MYC_future_quote::feed_type() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.feed_type)
  return feed_type_;
}
inline void MYC_future_quote::set_feed_type(::google::protobuf::int32 value) {
  set_has_feed_type();
  feed_type_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.feed_type)
}

// optional string symbol = 2;
inline bool MYC_future_quote::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MYC_future_quote::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MYC_future_quote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MYC_future_quote::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& MYC_future_quote::symbol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_future_quote::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.symbol)
}
inline void MYC_future_quote::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_future_quote.symbol)
}
inline void MYC_future_quote::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_future_quote.symbol)
}
inline ::std::string* MYC_future_quote::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_future_quote.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_future_quote::release_symbol() {
  // @@protoc_insertion_point(field_release:MYC.MYC_future_quote.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_future_quote::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_future_quote.symbol)
}

// optional int32 exchange = 3;
inline bool MYC_future_quote::has_exchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MYC_future_quote::set_has_exchange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MYC_future_quote::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MYC_future_quote::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 MYC_future_quote::exchange() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.exchange)
  return exchange_;
}
inline void MYC_future_quote::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.exchange)
}

// optional int32 int_time = 4;
inline bool MYC_future_quote::has_int_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MYC_future_quote::set_has_int_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MYC_future_quote::clear_has_int_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MYC_future_quote::clear_int_time() {
  int_time_ = 0;
  clear_has_int_time();
}
inline ::google::protobuf::int32 MYC_future_quote::int_time() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.int_time)
  return int_time_;
}
inline void MYC_future_quote::set_int_time(::google::protobuf::int32 value) {
  set_has_int_time();
  int_time_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.int_time)
}

// optional double pre_close_px = 5;
inline bool MYC_future_quote::has_pre_close_px() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MYC_future_quote::set_has_pre_close_px() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MYC_future_quote::clear_has_pre_close_px() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MYC_future_quote::clear_pre_close_px() {
  pre_close_px_ = 0;
  clear_has_pre_close_px();
}
inline double MYC_future_quote::pre_close_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.pre_close_px)
  return pre_close_px_;
}
inline void MYC_future_quote::set_pre_close_px(double value) {
  set_has_pre_close_px();
  pre_close_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.pre_close_px)
}

// optional double pre_settle_px = 6;
inline bool MYC_future_quote::has_pre_settle_px() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MYC_future_quote::set_has_pre_settle_px() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MYC_future_quote::clear_has_pre_settle_px() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MYC_future_quote::clear_pre_settle_px() {
  pre_settle_px_ = 0;
  clear_has_pre_settle_px();
}
inline double MYC_future_quote::pre_settle_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.pre_settle_px)
  return pre_settle_px_;
}
inline void MYC_future_quote::set_pre_settle_px(double value) {
  set_has_pre_settle_px();
  pre_settle_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.pre_settle_px)
}

// optional double pre_open_interest = 7;
inline bool MYC_future_quote::has_pre_open_interest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MYC_future_quote::set_has_pre_open_interest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MYC_future_quote::clear_has_pre_open_interest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MYC_future_quote::clear_pre_open_interest() {
  pre_open_interest_ = 0;
  clear_has_pre_open_interest();
}
inline double MYC_future_quote::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.pre_open_interest)
  return pre_open_interest_;
}
inline void MYC_future_quote::set_pre_open_interest(double value) {
  set_has_pre_open_interest();
  pre_open_interest_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.pre_open_interest)
}

// optional double open_interest = 8;
inline bool MYC_future_quote::has_open_interest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MYC_future_quote::set_has_open_interest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MYC_future_quote::clear_has_open_interest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MYC_future_quote::clear_open_interest() {
  open_interest_ = 0;
  clear_has_open_interest();
}
inline double MYC_future_quote::open_interest() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.open_interest)
  return open_interest_;
}
inline void MYC_future_quote::set_open_interest(double value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.open_interest)
}

// optional double open_px = 9;
inline bool MYC_future_quote::has_open_px() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MYC_future_quote::set_has_open_px() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MYC_future_quote::clear_has_open_px() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MYC_future_quote::clear_open_px() {
  open_px_ = 0;
  clear_has_open_px();
}
inline double MYC_future_quote::open_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.open_px)
  return open_px_;
}
inline void MYC_future_quote::set_open_px(double value) {
  set_has_open_px();
  open_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.open_px)
}

// optional double high_px = 10;
inline bool MYC_future_quote::has_high_px() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MYC_future_quote::set_has_high_px() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MYC_future_quote::clear_has_high_px() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MYC_future_quote::clear_high_px() {
  high_px_ = 0;
  clear_has_high_px();
}
inline double MYC_future_quote::high_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.high_px)
  return high_px_;
}
inline void MYC_future_quote::set_high_px(double value) {
  set_has_high_px();
  high_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.high_px)
}

// optional double low_px = 11;
inline bool MYC_future_quote::has_low_px() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MYC_future_quote::set_has_low_px() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MYC_future_quote::clear_has_low_px() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MYC_future_quote::clear_low_px() {
  low_px_ = 0;
  clear_has_low_px();
}
inline double MYC_future_quote::low_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.low_px)
  return low_px_;
}
inline void MYC_future_quote::set_low_px(double value) {
  set_has_low_px();
  low_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.low_px)
}

// optional double avg_px = 12;
inline bool MYC_future_quote::has_avg_px() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MYC_future_quote::set_has_avg_px() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MYC_future_quote::clear_has_avg_px() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MYC_future_quote::clear_avg_px() {
  avg_px_ = 0;
  clear_has_avg_px();
}
inline double MYC_future_quote::avg_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.avg_px)
  return avg_px_;
}
inline void MYC_future_quote::set_avg_px(double value) {
  set_has_avg_px();
  avg_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.avg_px)
}

// optional double last_px = 13;
inline bool MYC_future_quote::has_last_px() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MYC_future_quote::set_has_last_px() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MYC_future_quote::clear_has_last_px() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MYC_future_quote::clear_last_px() {
  last_px_ = 0;
  clear_has_last_px();
}
inline double MYC_future_quote::last_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.last_px)
  return last_px_;
}
inline void MYC_future_quote::set_last_px(double value) {
  set_has_last_px();
  last_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.last_px)
}

// optional int64 total_vol = 18;
inline bool MYC_future_quote::has_total_vol() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MYC_future_quote::set_has_total_vol() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MYC_future_quote::clear_has_total_vol() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MYC_future_quote::clear_total_vol() {
  total_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_vol();
}
inline ::google::protobuf::int64 MYC_future_quote::total_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_vol)
  return total_vol_;
}
inline void MYC_future_quote::set_total_vol(::google::protobuf::int64 value) {
  set_has_total_vol();
  total_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_vol)
}

// optional double total_notional = 19;
inline bool MYC_future_quote::has_total_notional() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MYC_future_quote::set_has_total_notional() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MYC_future_quote::clear_has_total_notional() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MYC_future_quote::clear_total_notional() {
  total_notional_ = 0;
  clear_has_total_notional();
}
inline double MYC_future_quote::total_notional() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_notional)
  return total_notional_;
}
inline void MYC_future_quote::set_total_notional(double value) {
  set_has_total_notional();
  total_notional_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_notional)
}

// optional double upper_limit_px = 20;
inline bool MYC_future_quote::has_upper_limit_px() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MYC_future_quote::set_has_upper_limit_px() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MYC_future_quote::clear_has_upper_limit_px() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MYC_future_quote::clear_upper_limit_px() {
  upper_limit_px_ = 0;
  clear_has_upper_limit_px();
}
inline double MYC_future_quote::upper_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.upper_limit_px)
  return upper_limit_px_;
}
inline void MYC_future_quote::set_upper_limit_px(double value) {
  set_has_upper_limit_px();
  upper_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.upper_limit_px)
}

// optional double lower_limit_px = 21;
inline bool MYC_future_quote::has_lower_limit_px() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MYC_future_quote::set_has_lower_limit_px() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MYC_future_quote::clear_has_lower_limit_px() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MYC_future_quote::clear_lower_limit_px() {
  lower_limit_px_ = 0;
  clear_has_lower_limit_px();
}
inline double MYC_future_quote::lower_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.lower_limit_px)
  return lower_limit_px_;
}
inline void MYC_future_quote::set_lower_limit_px(double value) {
  set_has_lower_limit_px();
  lower_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.lower_limit_px)
}

// optional double close_px = 22;
inline bool MYC_future_quote::has_close_px() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MYC_future_quote::set_has_close_px() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MYC_future_quote::clear_has_close_px() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MYC_future_quote::clear_close_px() {
  close_px_ = 0;
  clear_has_close_px();
}
inline double MYC_future_quote::close_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.close_px)
  return close_px_;
}
inline void MYC_future_quote::set_close_px(double value) {
  set_has_close_px();
  close_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.close_px)
}

// optional double settle_px = 23;
inline bool MYC_future_quote::has_settle_px() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MYC_future_quote::set_has_settle_px() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MYC_future_quote::clear_has_settle_px() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MYC_future_quote::clear_settle_px() {
  settle_px_ = 0;
  clear_has_settle_px();
}
inline double MYC_future_quote::settle_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.settle_px)
  return settle_px_;
}
inline void MYC_future_quote::set_settle_px(double value) {
  set_has_settle_px();
  settle_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.settle_px)
}

// optional int32 total_buy_ordsize = 26;
inline bool MYC_future_quote::has_total_buy_ordsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MYC_future_quote::set_has_total_buy_ordsize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MYC_future_quote::clear_has_total_buy_ordsize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MYC_future_quote::clear_total_buy_ordsize() {
  total_buy_ordsize_ = 0;
  clear_has_total_buy_ordsize();
}
inline ::google::protobuf::int32 MYC_future_quote::total_buy_ordsize() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_buy_ordsize)
  return total_buy_ordsize_;
}
inline void MYC_future_quote::set_total_buy_ordsize(::google::protobuf::int32 value) {
  set_has_total_buy_ordsize();
  total_buy_ordsize_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_buy_ordsize)
}

// optional int32 total_sell_ordsize = 27;
inline bool MYC_future_quote::has_total_sell_ordsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MYC_future_quote::set_has_total_sell_ordsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MYC_future_quote::clear_has_total_sell_ordsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MYC_future_quote::clear_total_sell_ordsize() {
  total_sell_ordsize_ = 0;
  clear_has_total_sell_ordsize();
}
inline ::google::protobuf::int32 MYC_future_quote::total_sell_ordsize() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_sell_ordsize)
  return total_sell_ordsize_;
}
inline void MYC_future_quote::set_total_sell_ordsize(::google::protobuf::int32 value) {
  set_has_total_sell_ordsize();
  total_sell_ordsize_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_sell_ordsize)
}

// optional double weighted_buy_px = 28;
inline bool MYC_future_quote::has_weighted_buy_px() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MYC_future_quote::set_has_weighted_buy_px() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MYC_future_quote::clear_has_weighted_buy_px() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MYC_future_quote::clear_weighted_buy_px() {
  weighted_buy_px_ = 0;
  clear_has_weighted_buy_px();
}
inline double MYC_future_quote::weighted_buy_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.weighted_buy_px)
  return weighted_buy_px_;
}
inline void MYC_future_quote::set_weighted_buy_px(double value) {
  set_has_weighted_buy_px();
  weighted_buy_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.weighted_buy_px)
}

// optional double weighted_sell_px = 29;
inline bool MYC_future_quote::has_weighted_sell_px() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MYC_future_quote::set_has_weighted_sell_px() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MYC_future_quote::clear_has_weighted_sell_px() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MYC_future_quote::clear_weighted_sell_px() {
  weighted_sell_px_ = 0;
  clear_has_weighted_sell_px();
}
inline double MYC_future_quote::weighted_sell_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.weighted_sell_px)
  return weighted_sell_px_;
}
inline void MYC_future_quote::set_weighted_sell_px(double value) {
  set_has_weighted_sell_px();
  weighted_sell_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.weighted_sell_px)
}

// optional int32 implied_bid_size1 = 31 [default = 0];
inline bool MYC_future_quote::has_implied_bid_size1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MYC_future_quote::set_has_implied_bid_size1() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MYC_future_quote::clear_has_implied_bid_size1() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MYC_future_quote::clear_implied_bid_size1() {
  implied_bid_size1_ = 0;
  clear_has_implied_bid_size1();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_bid_size1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size1)
  return implied_bid_size1_;
}
inline void MYC_future_quote::set_implied_bid_size1(::google::protobuf::int32 value) {
  set_has_implied_bid_size1();
  implied_bid_size1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size1)
}

// optional int32 implied_ask_size1 = 32 [default = 0];
inline bool MYC_future_quote::has_implied_ask_size1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_ask_size1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MYC_future_quote::clear_has_implied_ask_size1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MYC_future_quote::clear_implied_ask_size1() {
  implied_ask_size1_ = 0;
  clear_has_implied_ask_size1();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_ask_size1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size1)
  return implied_ask_size1_;
}
inline void MYC_future_quote::set_implied_ask_size1(::google::protobuf::int32 value) {
  set_has_implied_ask_size1();
  implied_ask_size1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size1)
}

// optional int32 implied_bid_size2 = 33 [default = 0];
inline bool MYC_future_quote::has_implied_bid_size2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_bid_size2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MYC_future_quote::clear_has_implied_bid_size2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MYC_future_quote::clear_implied_bid_size2() {
  implied_bid_size2_ = 0;
  clear_has_implied_bid_size2();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_bid_size2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size2)
  return implied_bid_size2_;
}
inline void MYC_future_quote::set_implied_bid_size2(::google::protobuf::int32 value) {
  set_has_implied_bid_size2();
  implied_bid_size2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size2)
}

// optional int32 implied_ask_size2 = 34 [default = 0];
inline bool MYC_future_quote::has_implied_ask_size2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_ask_size2() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MYC_future_quote::clear_has_implied_ask_size2() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MYC_future_quote::clear_implied_ask_size2() {
  implied_ask_size2_ = 0;
  clear_has_implied_ask_size2();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_ask_size2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size2)
  return implied_ask_size2_;
}
inline void MYC_future_quote::set_implied_ask_size2(::google::protobuf::int32 value) {
  set_has_implied_ask_size2();
  implied_ask_size2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size2)
}

// optional int32 implied_bid_size3 = 35 [default = 0];
inline bool MYC_future_quote::has_implied_bid_size3() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_bid_size3() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MYC_future_quote::clear_has_implied_bid_size3() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MYC_future_quote::clear_implied_bid_size3() {
  implied_bid_size3_ = 0;
  clear_has_implied_bid_size3();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_bid_size3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size3)
  return implied_bid_size3_;
}
inline void MYC_future_quote::set_implied_bid_size3(::google::protobuf::int32 value) {
  set_has_implied_bid_size3();
  implied_bid_size3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size3)
}

// optional int32 implied_ask_size3 = 36 [default = 0];
inline bool MYC_future_quote::has_implied_ask_size3() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_ask_size3() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MYC_future_quote::clear_has_implied_ask_size3() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MYC_future_quote::clear_implied_ask_size3() {
  implied_ask_size3_ = 0;
  clear_has_implied_ask_size3();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_ask_size3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size3)
  return implied_ask_size3_;
}
inline void MYC_future_quote::set_implied_ask_size3(::google::protobuf::int32 value) {
  set_has_implied_ask_size3();
  implied_ask_size3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size3)
}

// optional int32 implied_bid_size4 = 37 [default = 0];
inline bool MYC_future_quote::has_implied_bid_size4() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_bid_size4() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MYC_future_quote::clear_has_implied_bid_size4() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MYC_future_quote::clear_implied_bid_size4() {
  implied_bid_size4_ = 0;
  clear_has_implied_bid_size4();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_bid_size4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size4)
  return implied_bid_size4_;
}
inline void MYC_future_quote::set_implied_bid_size4(::google::protobuf::int32 value) {
  set_has_implied_bid_size4();
  implied_bid_size4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size4)
}

// optional int32 implied_ask_size4 = 38 [default = 0];
inline bool MYC_future_quote::has_implied_ask_size4() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_ask_size4() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MYC_future_quote::clear_has_implied_ask_size4() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MYC_future_quote::clear_implied_ask_size4() {
  implied_ask_size4_ = 0;
  clear_has_implied_ask_size4();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_ask_size4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size4)
  return implied_ask_size4_;
}
inline void MYC_future_quote::set_implied_ask_size4(::google::protobuf::int32 value) {
  set_has_implied_ask_size4();
  implied_ask_size4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size4)
}

// optional int32 implied_bid_size5 = 39 [default = 0];
inline bool MYC_future_quote::has_implied_bid_size5() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void MYC_future_quote::set_has_implied_bid_size5() {
  _has_bits_[0] |= 0x80000000u;
}
inline void MYC_future_quote::clear_has_implied_bid_size5() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void MYC_future_quote::clear_implied_bid_size5() {
  implied_bid_size5_ = 0;
  clear_has_implied_bid_size5();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_bid_size5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size5)
  return implied_bid_size5_;
}
inline void MYC_future_quote::set_implied_bid_size5(::google::protobuf::int32 value) {
  set_has_implied_bid_size5();
  implied_bid_size5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size5)
}

// optional int32 implied_ask_size5 = 40 [default = 0];
inline bool MYC_future_quote::has_implied_ask_size5() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void MYC_future_quote::set_has_implied_ask_size5() {
  _has_bits_[1] |= 0x00000001u;
}
inline void MYC_future_quote::clear_has_implied_ask_size5() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void MYC_future_quote::clear_implied_ask_size5() {
  implied_ask_size5_ = 0;
  clear_has_implied_ask_size5();
}
inline ::google::protobuf::int32 MYC_future_quote::implied_ask_size5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size5)
  return implied_ask_size5_;
}
inline void MYC_future_quote::set_implied_ask_size5(::google::protobuf::int32 value) {
  set_has_implied_ask_size5();
  implied_ask_size5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size5)
}

// optional double bp1 = 41 [default = 0];
inline bool MYC_future_quote::has_bp1() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void MYC_future_quote::set_has_bp1() {
  _has_bits_[1] |= 0x00000002u;
}
inline void MYC_future_quote::clear_has_bp1() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void MYC_future_quote::clear_bp1() {
  bp1_ = 0;
  clear_has_bp1();
}
inline double MYC_future_quote::bp1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp1)
  return bp1_;
}
inline void MYC_future_quote::set_bp1(double value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp1)
}

// optional int32 bv1 = 42 [default = 0];
inline bool MYC_future_quote::has_bv1() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void MYC_future_quote::set_has_bv1() {
  _has_bits_[1] |= 0x00000004u;
}
inline void MYC_future_quote::clear_has_bv1() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void MYC_future_quote::clear_bv1() {
  bv1_ = 0;
  clear_has_bv1();
}
inline ::google::protobuf::int32 MYC_future_quote::bv1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv1)
  return bv1_;
}
inline void MYC_future_quote::set_bv1(::google::protobuf::int32 value) {
  set_has_bv1();
  bv1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv1)
}

// optional double ap1 = 43 [default = 0];
inline bool MYC_future_quote::has_ap1() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void MYC_future_quote::set_has_ap1() {
  _has_bits_[1] |= 0x00000008u;
}
inline void MYC_future_quote::clear_has_ap1() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void MYC_future_quote::clear_ap1() {
  ap1_ = 0;
  clear_has_ap1();
}
inline double MYC_future_quote::ap1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap1)
  return ap1_;
}
inline void MYC_future_quote::set_ap1(double value) {
  set_has_ap1();
  ap1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap1)
}

// optional int32 av1 = 44 [default = 0];
inline bool MYC_future_quote::has_av1() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void MYC_future_quote::set_has_av1() {
  _has_bits_[1] |= 0x00000010u;
}
inline void MYC_future_quote::clear_has_av1() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void MYC_future_quote::clear_av1() {
  av1_ = 0;
  clear_has_av1();
}
inline ::google::protobuf::int32 MYC_future_quote::av1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av1)
  return av1_;
}
inline void MYC_future_quote::set_av1(::google::protobuf::int32 value) {
  set_has_av1();
  av1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av1)
}

// optional double bp2 = 45 [default = 0];
inline bool MYC_future_quote::has_bp2() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void MYC_future_quote::set_has_bp2() {
  _has_bits_[1] |= 0x00000020u;
}
inline void MYC_future_quote::clear_has_bp2() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void MYC_future_quote::clear_bp2() {
  bp2_ = 0;
  clear_has_bp2();
}
inline double MYC_future_quote::bp2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp2)
  return bp2_;
}
inline void MYC_future_quote::set_bp2(double value) {
  set_has_bp2();
  bp2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp2)
}

// optional int32 bv2 = 46 [default = 0];
inline bool MYC_future_quote::has_bv2() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void MYC_future_quote::set_has_bv2() {
  _has_bits_[1] |= 0x00000040u;
}
inline void MYC_future_quote::clear_has_bv2() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void MYC_future_quote::clear_bv2() {
  bv2_ = 0;
  clear_has_bv2();
}
inline ::google::protobuf::int32 MYC_future_quote::bv2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv2)
  return bv2_;
}
inline void MYC_future_quote::set_bv2(::google::protobuf::int32 value) {
  set_has_bv2();
  bv2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv2)
}

// optional double ap2 = 47 [default = 0];
inline bool MYC_future_quote::has_ap2() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void MYC_future_quote::set_has_ap2() {
  _has_bits_[1] |= 0x00000080u;
}
inline void MYC_future_quote::clear_has_ap2() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void MYC_future_quote::clear_ap2() {
  ap2_ = 0;
  clear_has_ap2();
}
inline double MYC_future_quote::ap2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap2)
  return ap2_;
}
inline void MYC_future_quote::set_ap2(double value) {
  set_has_ap2();
  ap2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap2)
}

// optional int32 av2 = 48 [default = 0];
inline bool MYC_future_quote::has_av2() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void MYC_future_quote::set_has_av2() {
  _has_bits_[1] |= 0x00000100u;
}
inline void MYC_future_quote::clear_has_av2() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void MYC_future_quote::clear_av2() {
  av2_ = 0;
  clear_has_av2();
}
inline ::google::protobuf::int32 MYC_future_quote::av2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av2)
  return av2_;
}
inline void MYC_future_quote::set_av2(::google::protobuf::int32 value) {
  set_has_av2();
  av2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av2)
}

// optional double bp3 = 49 [default = 0];
inline bool MYC_future_quote::has_bp3() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void MYC_future_quote::set_has_bp3() {
  _has_bits_[1] |= 0x00000200u;
}
inline void MYC_future_quote::clear_has_bp3() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void MYC_future_quote::clear_bp3() {
  bp3_ = 0;
  clear_has_bp3();
}
inline double MYC_future_quote::bp3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp3)
  return bp3_;
}
inline void MYC_future_quote::set_bp3(double value) {
  set_has_bp3();
  bp3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp3)
}

// optional int32 bv3 = 50 [default = 0];
inline bool MYC_future_quote::has_bv3() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void MYC_future_quote::set_has_bv3() {
  _has_bits_[1] |= 0x00000400u;
}
inline void MYC_future_quote::clear_has_bv3() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void MYC_future_quote::clear_bv3() {
  bv3_ = 0;
  clear_has_bv3();
}
inline ::google::protobuf::int32 MYC_future_quote::bv3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv3)
  return bv3_;
}
inline void MYC_future_quote::set_bv3(::google::protobuf::int32 value) {
  set_has_bv3();
  bv3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv3)
}

// optional double ap3 = 51 [default = 0];
inline bool MYC_future_quote::has_ap3() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void MYC_future_quote::set_has_ap3() {
  _has_bits_[1] |= 0x00000800u;
}
inline void MYC_future_quote::clear_has_ap3() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void MYC_future_quote::clear_ap3() {
  ap3_ = 0;
  clear_has_ap3();
}
inline double MYC_future_quote::ap3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap3)
  return ap3_;
}
inline void MYC_future_quote::set_ap3(double value) {
  set_has_ap3();
  ap3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap3)
}

// optional int32 av3 = 52 [default = 0];
inline bool MYC_future_quote::has_av3() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void MYC_future_quote::set_has_av3() {
  _has_bits_[1] |= 0x00001000u;
}
inline void MYC_future_quote::clear_has_av3() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void MYC_future_quote::clear_av3() {
  av3_ = 0;
  clear_has_av3();
}
inline ::google::protobuf::int32 MYC_future_quote::av3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av3)
  return av3_;
}
inline void MYC_future_quote::set_av3(::google::protobuf::int32 value) {
  set_has_av3();
  av3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av3)
}

// optional double bp4 = 53 [default = 0];
inline bool MYC_future_quote::has_bp4() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void MYC_future_quote::set_has_bp4() {
  _has_bits_[1] |= 0x00002000u;
}
inline void MYC_future_quote::clear_has_bp4() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void MYC_future_quote::clear_bp4() {
  bp4_ = 0;
  clear_has_bp4();
}
inline double MYC_future_quote::bp4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp4)
  return bp4_;
}
inline void MYC_future_quote::set_bp4(double value) {
  set_has_bp4();
  bp4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp4)
}

// optional int32 bv4 = 54 [default = 0];
inline bool MYC_future_quote::has_bv4() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void MYC_future_quote::set_has_bv4() {
  _has_bits_[1] |= 0x00004000u;
}
inline void MYC_future_quote::clear_has_bv4() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void MYC_future_quote::clear_bv4() {
  bv4_ = 0;
  clear_has_bv4();
}
inline ::google::protobuf::int32 MYC_future_quote::bv4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv4)
  return bv4_;
}
inline void MYC_future_quote::set_bv4(::google::protobuf::int32 value) {
  set_has_bv4();
  bv4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv4)
}

// optional double ap4 = 55 [default = 0];
inline bool MYC_future_quote::has_ap4() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void MYC_future_quote::set_has_ap4() {
  _has_bits_[1] |= 0x00008000u;
}
inline void MYC_future_quote::clear_has_ap4() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void MYC_future_quote::clear_ap4() {
  ap4_ = 0;
  clear_has_ap4();
}
inline double MYC_future_quote::ap4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap4)
  return ap4_;
}
inline void MYC_future_quote::set_ap4(double value) {
  set_has_ap4();
  ap4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap4)
}

// optional int32 av4 = 56 [default = 0];
inline bool MYC_future_quote::has_av4() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void MYC_future_quote::set_has_av4() {
  _has_bits_[1] |= 0x00010000u;
}
inline void MYC_future_quote::clear_has_av4() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void MYC_future_quote::clear_av4() {
  av4_ = 0;
  clear_has_av4();
}
inline ::google::protobuf::int32 MYC_future_quote::av4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av4)
  return av4_;
}
inline void MYC_future_quote::set_av4(::google::protobuf::int32 value) {
  set_has_av4();
  av4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av4)
}

// optional double bp5 = 57 [default = 0];
inline bool MYC_future_quote::has_bp5() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void MYC_future_quote::set_has_bp5() {
  _has_bits_[1] |= 0x00020000u;
}
inline void MYC_future_quote::clear_has_bp5() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void MYC_future_quote::clear_bp5() {
  bp5_ = 0;
  clear_has_bp5();
}
inline double MYC_future_quote::bp5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp5)
  return bp5_;
}
inline void MYC_future_quote::set_bp5(double value) {
  set_has_bp5();
  bp5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp5)
}

// optional int32 bv5 = 58 [default = 0];
inline bool MYC_future_quote::has_bv5() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void MYC_future_quote::set_has_bv5() {
  _has_bits_[1] |= 0x00040000u;
}
inline void MYC_future_quote::clear_has_bv5() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void MYC_future_quote::clear_bv5() {
  bv5_ = 0;
  clear_has_bv5();
}
inline ::google::protobuf::int32 MYC_future_quote::bv5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv5)
  return bv5_;
}
inline void MYC_future_quote::set_bv5(::google::protobuf::int32 value) {
  set_has_bv5();
  bv5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv5)
}

// optional double ap5 = 59 [default = 0];
inline bool MYC_future_quote::has_ap5() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void MYC_future_quote::set_has_ap5() {
  _has_bits_[1] |= 0x00080000u;
}
inline void MYC_future_quote::clear_has_ap5() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void MYC_future_quote::clear_ap5() {
  ap5_ = 0;
  clear_has_ap5();
}
inline double MYC_future_quote::ap5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap5)
  return ap5_;
}
inline void MYC_future_quote::set_ap5(double value) {
  set_has_ap5();
  ap5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap5)
}

// optional int32 av5 = 60 [default = 0];
inline bool MYC_future_quote::has_av5() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void MYC_future_quote::set_has_av5() {
  _has_bits_[1] |= 0x00100000u;
}
inline void MYC_future_quote::clear_has_av5() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void MYC_future_quote::clear_av5() {
  av5_ = 0;
  clear_has_av5();
}
inline ::google::protobuf::int32 MYC_future_quote::av5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av5)
  return av5_;
}
inline void MYC_future_quote::set_av5(::google::protobuf::int32 value) {
  set_has_av5();
  av5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av5)
}

// -------------------------------------------------------------------

// MYC_stock_quote

// optional string wind_code = 1;
inline bool MYC_stock_quote::has_wind_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MYC_stock_quote::set_has_wind_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MYC_stock_quote::clear_has_wind_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MYC_stock_quote::clear_wind_code() {
  wind_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wind_code();
}
inline const ::std::string& MYC_stock_quote::wind_code() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.wind_code)
  return wind_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_stock_quote::set_wind_code(const ::std::string& value) {
  set_has_wind_code();
  wind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.wind_code)
}
inline void MYC_stock_quote::set_wind_code(const char* value) {
  set_has_wind_code();
  wind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_stock_quote.wind_code)
}
inline void MYC_stock_quote::set_wind_code(const char* value, size_t size) {
  set_has_wind_code();
  wind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_stock_quote.wind_code)
}
inline ::std::string* MYC_stock_quote::mutable_wind_code() {
  set_has_wind_code();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_stock_quote.wind_code)
  return wind_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_stock_quote::release_wind_code() {
  // @@protoc_insertion_point(field_release:MYC.MYC_stock_quote.wind_code)
  clear_has_wind_code();
  return wind_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_stock_quote::set_allocated_wind_code(::std::string* wind_code) {
  if (wind_code != NULL) {
    set_has_wind_code();
  } else {
    clear_has_wind_code();
  }
  wind_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wind_code);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_stock_quote.wind_code)
}

// optional string ticker = 2;
inline bool MYC_stock_quote::has_ticker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MYC_stock_quote::set_has_ticker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MYC_stock_quote::clear_has_ticker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MYC_stock_quote::clear_ticker() {
  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticker();
}
inline const ::std::string& MYC_stock_quote::ticker() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ticker)
  return ticker_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_stock_quote::set_ticker(const ::std::string& value) {
  set_has_ticker();
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ticker)
}
inline void MYC_stock_quote::set_ticker(const char* value) {
  set_has_ticker();
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_stock_quote.ticker)
}
inline void MYC_stock_quote::set_ticker(const char* value, size_t size) {
  set_has_ticker();
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_stock_quote.ticker)
}
inline ::std::string* MYC_stock_quote::mutable_ticker() {
  set_has_ticker();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_stock_quote.ticker)
  return ticker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_stock_quote::release_ticker() {
  // @@protoc_insertion_point(field_release:MYC.MYC_stock_quote.ticker)
  clear_has_ticker();
  return ticker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_stock_quote::set_allocated_ticker(::std::string* ticker) {
  if (ticker != NULL) {
    set_has_ticker();
  } else {
    clear_has_ticker();
  }
  ticker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticker);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_stock_quote.ticker)
}

// optional int32 action_day = 3;
inline bool MYC_stock_quote::has_action_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MYC_stock_quote::set_has_action_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MYC_stock_quote::clear_has_action_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MYC_stock_quote::clear_action_day() {
  action_day_ = 0;
  clear_has_action_day();
}
inline ::google::protobuf::int32 MYC_stock_quote::action_day() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.action_day)
  return action_day_;
}
inline void MYC_stock_quote::set_action_day(::google::protobuf::int32 value) {
  set_has_action_day();
  action_day_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.action_day)
}

// optional int32 trading_day = 4;
inline bool MYC_stock_quote::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MYC_stock_quote::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MYC_stock_quote::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MYC_stock_quote::clear_trading_day() {
  trading_day_ = 0;
  clear_has_trading_day();
}
inline ::google::protobuf::int32 MYC_stock_quote::trading_day() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.trading_day)
  return trading_day_;
}
inline void MYC_stock_quote::set_trading_day(::google::protobuf::int32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.trading_day)
}

// optional int32 exch_time = 5;
inline bool MYC_stock_quote::has_exch_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MYC_stock_quote::set_has_exch_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MYC_stock_quote::clear_has_exch_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MYC_stock_quote::clear_exch_time() {
  exch_time_ = 0;
  clear_has_exch_time();
}
inline ::google::protobuf::int32 MYC_stock_quote::exch_time() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.exch_time)
  return exch_time_;
}
inline void MYC_stock_quote::set_exch_time(::google::protobuf::int32 value) {
  set_has_exch_time();
  exch_time_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.exch_time)
}

// optional int32 status = 6;
inline bool MYC_stock_quote::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MYC_stock_quote::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MYC_stock_quote::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MYC_stock_quote::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 MYC_stock_quote::status() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.status)
  return status_;
}
inline void MYC_stock_quote::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.status)
}

// optional double pre_close_px = 7;
inline bool MYC_stock_quote::has_pre_close_px() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MYC_stock_quote::set_has_pre_close_px() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MYC_stock_quote::clear_has_pre_close_px() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MYC_stock_quote::clear_pre_close_px() {
  pre_close_px_ = 0;
  clear_has_pre_close_px();
}
inline double MYC_stock_quote::pre_close_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.pre_close_px)
  return pre_close_px_;
}
inline void MYC_stock_quote::set_pre_close_px(double value) {
  set_has_pre_close_px();
  pre_close_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.pre_close_px)
}

// optional double open_px = 8;
inline bool MYC_stock_quote::has_open_px() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MYC_stock_quote::set_has_open_px() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MYC_stock_quote::clear_has_open_px() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MYC_stock_quote::clear_open_px() {
  open_px_ = 0;
  clear_has_open_px();
}
inline double MYC_stock_quote::open_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.open_px)
  return open_px_;
}
inline void MYC_stock_quote::set_open_px(double value) {
  set_has_open_px();
  open_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.open_px)
}

// optional double high_px = 9;
inline bool MYC_stock_quote::has_high_px() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MYC_stock_quote::set_has_high_px() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MYC_stock_quote::clear_has_high_px() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MYC_stock_quote::clear_high_px() {
  high_px_ = 0;
  clear_has_high_px();
}
inline double MYC_stock_quote::high_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.high_px)
  return high_px_;
}
inline void MYC_stock_quote::set_high_px(double value) {
  set_has_high_px();
  high_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.high_px)
}

// optional double low_px = 10;
inline bool MYC_stock_quote::has_low_px() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MYC_stock_quote::set_has_low_px() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MYC_stock_quote::clear_has_low_px() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MYC_stock_quote::clear_low_px() {
  low_px_ = 0;
  clear_has_low_px();
}
inline double MYC_stock_quote::low_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.low_px)
  return low_px_;
}
inline void MYC_stock_quote::set_low_px(double value) {
  set_has_low_px();
  low_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.low_px)
}

// optional double last_px = 11;
inline bool MYC_stock_quote::has_last_px() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MYC_stock_quote::set_has_last_px() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MYC_stock_quote::clear_has_last_px() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MYC_stock_quote::clear_last_px() {
  last_px_ = 0;
  clear_has_last_px();
}
inline double MYC_stock_quote::last_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.last_px)
  return last_px_;
}
inline void MYC_stock_quote::set_last_px(double value) {
  set_has_last_px();
  last_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.last_px)
}

// optional int32 num_of_trades = 16;
inline bool MYC_stock_quote::has_num_of_trades() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MYC_stock_quote::set_has_num_of_trades() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MYC_stock_quote::clear_has_num_of_trades() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MYC_stock_quote::clear_num_of_trades() {
  num_of_trades_ = 0;
  clear_has_num_of_trades();
}
inline ::google::protobuf::int32 MYC_stock_quote::num_of_trades() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.num_of_trades)
  return num_of_trades_;
}
inline void MYC_stock_quote::set_num_of_trades(::google::protobuf::int32 value) {
  set_has_num_of_trades();
  num_of_trades_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.num_of_trades)
}

// optional int64 total_vol = 18;
inline bool MYC_stock_quote::has_total_vol() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MYC_stock_quote::set_has_total_vol() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MYC_stock_quote::clear_has_total_vol() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MYC_stock_quote::clear_total_vol() {
  total_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_vol();
}
inline ::google::protobuf::int64 MYC_stock_quote::total_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_vol)
  return total_vol_;
}
inline void MYC_stock_quote::set_total_vol(::google::protobuf::int64 value) {
  set_has_total_vol();
  total_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_vol)
}

// optional double total_notional = 19;
inline bool MYC_stock_quote::has_total_notional() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MYC_stock_quote::set_has_total_notional() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MYC_stock_quote::clear_has_total_notional() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MYC_stock_quote::clear_total_notional() {
  total_notional_ = 0;
  clear_has_total_notional();
}
inline double MYC_stock_quote::total_notional() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_notional)
  return total_notional_;
}
inline void MYC_stock_quote::set_total_notional(double value) {
  set_has_total_notional();
  total_notional_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_notional)
}

// optional int64 total_bid_vol = 20;
inline bool MYC_stock_quote::has_total_bid_vol() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MYC_stock_quote::set_has_total_bid_vol() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MYC_stock_quote::clear_has_total_bid_vol() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MYC_stock_quote::clear_total_bid_vol() {
  total_bid_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_bid_vol();
}
inline ::google::protobuf::int64 MYC_stock_quote::total_bid_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_bid_vol)
  return total_bid_vol_;
}
inline void MYC_stock_quote::set_total_bid_vol(::google::protobuf::int64 value) {
  set_has_total_bid_vol();
  total_bid_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_bid_vol)
}

// optional int64 total_ask_vol = 21;
inline bool MYC_stock_quote::has_total_ask_vol() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MYC_stock_quote::set_has_total_ask_vol() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MYC_stock_quote::clear_has_total_ask_vol() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MYC_stock_quote::clear_total_ask_vol() {
  total_ask_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_ask_vol();
}
inline ::google::protobuf::int64 MYC_stock_quote::total_ask_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_ask_vol)
  return total_ask_vol_;
}
inline void MYC_stock_quote::set_total_ask_vol(::google::protobuf::int64 value) {
  set_has_total_ask_vol();
  total_ask_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_ask_vol)
}

// optional double weighted_avg_bp = 22;
inline bool MYC_stock_quote::has_weighted_avg_bp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MYC_stock_quote::set_has_weighted_avg_bp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MYC_stock_quote::clear_has_weighted_avg_bp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MYC_stock_quote::clear_weighted_avg_bp() {
  weighted_avg_bp_ = 0;
  clear_has_weighted_avg_bp();
}
inline double MYC_stock_quote::weighted_avg_bp() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.weighted_avg_bp)
  return weighted_avg_bp_;
}
inline void MYC_stock_quote::set_weighted_avg_bp(double value) {
  set_has_weighted_avg_bp();
  weighted_avg_bp_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.weighted_avg_bp)
}

// optional double weighted_avg_ap = 23;
inline bool MYC_stock_quote::has_weighted_avg_ap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MYC_stock_quote::set_has_weighted_avg_ap() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MYC_stock_quote::clear_has_weighted_avg_ap() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MYC_stock_quote::clear_weighted_avg_ap() {
  weighted_avg_ap_ = 0;
  clear_has_weighted_avg_ap();
}
inline double MYC_stock_quote::weighted_avg_ap() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.weighted_avg_ap)
  return weighted_avg_ap_;
}
inline void MYC_stock_quote::set_weighted_avg_ap(double value) {
  set_has_weighted_avg_ap();
  weighted_avg_ap_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.weighted_avg_ap)
}

// optional double IOPV = 24;
inline bool MYC_stock_quote::has_iopv() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MYC_stock_quote::set_has_iopv() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MYC_stock_quote::clear_has_iopv() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MYC_stock_quote::clear_iopv() {
  iopv_ = 0;
  clear_has_iopv();
}
inline double MYC_stock_quote::iopv() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.IOPV)
  return iopv_;
}
inline void MYC_stock_quote::set_iopv(double value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.IOPV)
}

// optional double yield_to_maturity = 25;
inline bool MYC_stock_quote::has_yield_to_maturity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MYC_stock_quote::set_has_yield_to_maturity() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MYC_stock_quote::clear_has_yield_to_maturity() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MYC_stock_quote::clear_yield_to_maturity() {
  yield_to_maturity_ = 0;
  clear_has_yield_to_maturity();
}
inline double MYC_stock_quote::yield_to_maturity() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.yield_to_maturity)
  return yield_to_maturity_;
}
inline void MYC_stock_quote::set_yield_to_maturity(double value) {
  set_has_yield_to_maturity();
  yield_to_maturity_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.yield_to_maturity)
}

// optional double upper_limit_px = 26;
inline bool MYC_stock_quote::has_upper_limit_px() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MYC_stock_quote::set_has_upper_limit_px() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MYC_stock_quote::clear_has_upper_limit_px() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MYC_stock_quote::clear_upper_limit_px() {
  upper_limit_px_ = 0;
  clear_has_upper_limit_px();
}
inline double MYC_stock_quote::upper_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.upper_limit_px)
  return upper_limit_px_;
}
inline void MYC_stock_quote::set_upper_limit_px(double value) {
  set_has_upper_limit_px();
  upper_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.upper_limit_px)
}

// optional double lower_limit_px = 27;
inline bool MYC_stock_quote::has_lower_limit_px() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MYC_stock_quote::set_has_lower_limit_px() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MYC_stock_quote::clear_has_lower_limit_px() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MYC_stock_quote::clear_lower_limit_px() {
  lower_limit_px_ = 0;
  clear_has_lower_limit_px();
}
inline double MYC_stock_quote::lower_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.lower_limit_px)
  return lower_limit_px_;
}
inline void MYC_stock_quote::set_lower_limit_px(double value) {
  set_has_lower_limit_px();
  lower_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.lower_limit_px)
}

// optional string prefix = 28;
inline bool MYC_stock_quote::has_prefix() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MYC_stock_quote::set_has_prefix() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MYC_stock_quote::clear_has_prefix() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MYC_stock_quote::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
inline const ::std::string& MYC_stock_quote::prefix() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_stock_quote::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.prefix)
}
inline void MYC_stock_quote::set_prefix(const char* value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_stock_quote.prefix)
}
inline void MYC_stock_quote::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_stock_quote.prefix)
}
inline ::std::string* MYC_stock_quote::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_stock_quote.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_stock_quote::release_prefix() {
  // @@protoc_insertion_point(field_release:MYC.MYC_stock_quote.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_stock_quote::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_stock_quote.prefix)
}

// optional double PE1 = 29;
inline bool MYC_stock_quote::has_pe1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MYC_stock_quote::set_has_pe1() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MYC_stock_quote::clear_has_pe1() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MYC_stock_quote::clear_pe1() {
  pe1_ = 0;
  clear_has_pe1();
}
inline double MYC_stock_quote::pe1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.PE1)
  return pe1_;
}
inline void MYC_stock_quote::set_pe1(double value) {
  set_has_pe1();
  pe1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.PE1)
}

// optional double PE2 = 30;
inline bool MYC_stock_quote::has_pe2() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MYC_stock_quote::set_has_pe2() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MYC_stock_quote::clear_has_pe2() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MYC_stock_quote::clear_pe2() {
  pe2_ = 0;
  clear_has_pe2();
}
inline double MYC_stock_quote::pe2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.PE2)
  return pe2_;
}
inline void MYC_stock_quote::set_pe2(double value) {
  set_has_pe2();
  pe2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.PE2)
}

// optional int32 change = 31;
inline bool MYC_stock_quote::has_change() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MYC_stock_quote::set_has_change() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MYC_stock_quote::clear_has_change() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MYC_stock_quote::clear_change() {
  change_ = 0;
  clear_has_change();
}
inline ::google::protobuf::int32 MYC_stock_quote::change() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.change)
  return change_;
}
inline void MYC_stock_quote::set_change(::google::protobuf::int32 value) {
  set_has_change();
  change_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.change)
}

// optional double bp1 = 41 [default = 0];
inline bool MYC_stock_quote::has_bp1() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MYC_stock_quote::set_has_bp1() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MYC_stock_quote::clear_has_bp1() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MYC_stock_quote::clear_bp1() {
  bp1_ = 0;
  clear_has_bp1();
}
inline double MYC_stock_quote::bp1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp1)
  return bp1_;
}
inline void MYC_stock_quote::set_bp1(double value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp1)
}

// optional int32 bv1 = 42 [default = 0];
inline bool MYC_stock_quote::has_bv1() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MYC_stock_quote::set_has_bv1() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MYC_stock_quote::clear_has_bv1() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MYC_stock_quote::clear_bv1() {
  bv1_ = 0;
  clear_has_bv1();
}
inline ::google::protobuf::int32 MYC_stock_quote::bv1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv1)
  return bv1_;
}
inline void MYC_stock_quote::set_bv1(::google::protobuf::int32 value) {
  set_has_bv1();
  bv1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv1)
}

// optional double ap1 = 43 [default = 0];
inline bool MYC_stock_quote::has_ap1() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MYC_stock_quote::set_has_ap1() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MYC_stock_quote::clear_has_ap1() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MYC_stock_quote::clear_ap1() {
  ap1_ = 0;
  clear_has_ap1();
}
inline double MYC_stock_quote::ap1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap1)
  return ap1_;
}
inline void MYC_stock_quote::set_ap1(double value) {
  set_has_ap1();
  ap1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap1)
}

// optional int32 av1 = 44 [default = 0];
inline bool MYC_stock_quote::has_av1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MYC_stock_quote::set_has_av1() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MYC_stock_quote::clear_has_av1() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MYC_stock_quote::clear_av1() {
  av1_ = 0;
  clear_has_av1();
}
inline ::google::protobuf::int32 MYC_stock_quote::av1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av1)
  return av1_;
}
inline void MYC_stock_quote::set_av1(::google::protobuf::int32 value) {
  set_has_av1();
  av1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av1)
}

// optional double bp2 = 45 [default = 0];
inline bool MYC_stock_quote::has_bp2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MYC_stock_quote::set_has_bp2() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MYC_stock_quote::clear_has_bp2() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MYC_stock_quote::clear_bp2() {
  bp2_ = 0;
  clear_has_bp2();
}
inline double MYC_stock_quote::bp2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp2)
  return bp2_;
}
inline void MYC_stock_quote::set_bp2(double value) {
  set_has_bp2();
  bp2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp2)
}

// optional int32 bv2 = 46 [default = 0];
inline bool MYC_stock_quote::has_bv2() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void MYC_stock_quote::set_has_bv2() {
  _has_bits_[0] |= 0x80000000u;
}
inline void MYC_stock_quote::clear_has_bv2() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void MYC_stock_quote::clear_bv2() {
  bv2_ = 0;
  clear_has_bv2();
}
inline ::google::protobuf::int32 MYC_stock_quote::bv2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv2)
  return bv2_;
}
inline void MYC_stock_quote::set_bv2(::google::protobuf::int32 value) {
  set_has_bv2();
  bv2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv2)
}

// optional double ap2 = 47 [default = 0];
inline bool MYC_stock_quote::has_ap2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void MYC_stock_quote::set_has_ap2() {
  _has_bits_[1] |= 0x00000001u;
}
inline void MYC_stock_quote::clear_has_ap2() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void MYC_stock_quote::clear_ap2() {
  ap2_ = 0;
  clear_has_ap2();
}
inline double MYC_stock_quote::ap2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap2)
  return ap2_;
}
inline void MYC_stock_quote::set_ap2(double value) {
  set_has_ap2();
  ap2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap2)
}

// optional int32 av2 = 48 [default = 0];
inline bool MYC_stock_quote::has_av2() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void MYC_stock_quote::set_has_av2() {
  _has_bits_[1] |= 0x00000002u;
}
inline void MYC_stock_quote::clear_has_av2() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void MYC_stock_quote::clear_av2() {
  av2_ = 0;
  clear_has_av2();
}
inline ::google::protobuf::int32 MYC_stock_quote::av2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av2)
  return av2_;
}
inline void MYC_stock_quote::set_av2(::google::protobuf::int32 value) {
  set_has_av2();
  av2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av2)
}

// optional double bp3 = 49 [default = 0];
inline bool MYC_stock_quote::has_bp3() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void MYC_stock_quote::set_has_bp3() {
  _has_bits_[1] |= 0x00000004u;
}
inline void MYC_stock_quote::clear_has_bp3() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void MYC_stock_quote::clear_bp3() {
  bp3_ = 0;
  clear_has_bp3();
}
inline double MYC_stock_quote::bp3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp3)
  return bp3_;
}
inline void MYC_stock_quote::set_bp3(double value) {
  set_has_bp3();
  bp3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp3)
}

// optional int32 bv3 = 50 [default = 0];
inline bool MYC_stock_quote::has_bv3() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void MYC_stock_quote::set_has_bv3() {
  _has_bits_[1] |= 0x00000008u;
}
inline void MYC_stock_quote::clear_has_bv3() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void MYC_stock_quote::clear_bv3() {
  bv3_ = 0;
  clear_has_bv3();
}
inline ::google::protobuf::int32 MYC_stock_quote::bv3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv3)
  return bv3_;
}
inline void MYC_stock_quote::set_bv3(::google::protobuf::int32 value) {
  set_has_bv3();
  bv3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv3)
}

// optional double ap3 = 51 [default = 0];
inline bool MYC_stock_quote::has_ap3() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void MYC_stock_quote::set_has_ap3() {
  _has_bits_[1] |= 0x00000010u;
}
inline void MYC_stock_quote::clear_has_ap3() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void MYC_stock_quote::clear_ap3() {
  ap3_ = 0;
  clear_has_ap3();
}
inline double MYC_stock_quote::ap3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap3)
  return ap3_;
}
inline void MYC_stock_quote::set_ap3(double value) {
  set_has_ap3();
  ap3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap3)
}

// optional int32 av3 = 52 [default = 0];
inline bool MYC_stock_quote::has_av3() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void MYC_stock_quote::set_has_av3() {
  _has_bits_[1] |= 0x00000020u;
}
inline void MYC_stock_quote::clear_has_av3() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void MYC_stock_quote::clear_av3() {
  av3_ = 0;
  clear_has_av3();
}
inline ::google::protobuf::int32 MYC_stock_quote::av3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av3)
  return av3_;
}
inline void MYC_stock_quote::set_av3(::google::protobuf::int32 value) {
  set_has_av3();
  av3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av3)
}

// optional double bp4 = 53 [default = 0];
inline bool MYC_stock_quote::has_bp4() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void MYC_stock_quote::set_has_bp4() {
  _has_bits_[1] |= 0x00000040u;
}
inline void MYC_stock_quote::clear_has_bp4() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void MYC_stock_quote::clear_bp4() {
  bp4_ = 0;
  clear_has_bp4();
}
inline double MYC_stock_quote::bp4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp4)
  return bp4_;
}
inline void MYC_stock_quote::set_bp4(double value) {
  set_has_bp4();
  bp4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp4)
}

// optional int32 bv4 = 54 [default = 0];
inline bool MYC_stock_quote::has_bv4() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void MYC_stock_quote::set_has_bv4() {
  _has_bits_[1] |= 0x00000080u;
}
inline void MYC_stock_quote::clear_has_bv4() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void MYC_stock_quote::clear_bv4() {
  bv4_ = 0;
  clear_has_bv4();
}
inline ::google::protobuf::int32 MYC_stock_quote::bv4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv4)
  return bv4_;
}
inline void MYC_stock_quote::set_bv4(::google::protobuf::int32 value) {
  set_has_bv4();
  bv4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv4)
}

// optional double ap4 = 55 [default = 0];
inline bool MYC_stock_quote::has_ap4() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void MYC_stock_quote::set_has_ap4() {
  _has_bits_[1] |= 0x00000100u;
}
inline void MYC_stock_quote::clear_has_ap4() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void MYC_stock_quote::clear_ap4() {
  ap4_ = 0;
  clear_has_ap4();
}
inline double MYC_stock_quote::ap4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap4)
  return ap4_;
}
inline void MYC_stock_quote::set_ap4(double value) {
  set_has_ap4();
  ap4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap4)
}

// optional int32 av4 = 56 [default = 0];
inline bool MYC_stock_quote::has_av4() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void MYC_stock_quote::set_has_av4() {
  _has_bits_[1] |= 0x00000200u;
}
inline void MYC_stock_quote::clear_has_av4() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void MYC_stock_quote::clear_av4() {
  av4_ = 0;
  clear_has_av4();
}
inline ::google::protobuf::int32 MYC_stock_quote::av4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av4)
  return av4_;
}
inline void MYC_stock_quote::set_av4(::google::protobuf::int32 value) {
  set_has_av4();
  av4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av4)
}

// optional double bp5 = 57 [default = 0];
inline bool MYC_stock_quote::has_bp5() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void MYC_stock_quote::set_has_bp5() {
  _has_bits_[1] |= 0x00000400u;
}
inline void MYC_stock_quote::clear_has_bp5() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void MYC_stock_quote::clear_bp5() {
  bp5_ = 0;
  clear_has_bp5();
}
inline double MYC_stock_quote::bp5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp5)
  return bp5_;
}
inline void MYC_stock_quote::set_bp5(double value) {
  set_has_bp5();
  bp5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp5)
}

// optional int32 bv5 = 58 [default = 0];
inline bool MYC_stock_quote::has_bv5() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void MYC_stock_quote::set_has_bv5() {
  _has_bits_[1] |= 0x00000800u;
}
inline void MYC_stock_quote::clear_has_bv5() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void MYC_stock_quote::clear_bv5() {
  bv5_ = 0;
  clear_has_bv5();
}
inline ::google::protobuf::int32 MYC_stock_quote::bv5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv5)
  return bv5_;
}
inline void MYC_stock_quote::set_bv5(::google::protobuf::int32 value) {
  set_has_bv5();
  bv5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv5)
}

// optional double ap5 = 59 [default = 0];
inline bool MYC_stock_quote::has_ap5() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void MYC_stock_quote::set_has_ap5() {
  _has_bits_[1] |= 0x00001000u;
}
inline void MYC_stock_quote::clear_has_ap5() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void MYC_stock_quote::clear_ap5() {
  ap5_ = 0;
  clear_has_ap5();
}
inline double MYC_stock_quote::ap5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap5)
  return ap5_;
}
inline void MYC_stock_quote::set_ap5(double value) {
  set_has_ap5();
  ap5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap5)
}

// optional int32 av5 = 60 [default = 0];
inline bool MYC_stock_quote::has_av5() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void MYC_stock_quote::set_has_av5() {
  _has_bits_[1] |= 0x00002000u;
}
inline void MYC_stock_quote::clear_has_av5() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void MYC_stock_quote::clear_av5() {
  av5_ = 0;
  clear_has_av5();
}
inline ::google::protobuf::int32 MYC_stock_quote::av5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av5)
  return av5_;
}
inline void MYC_stock_quote::set_av5(::google::protobuf::int32 value) {
  set_has_av5();
  av5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av5)
}

// -------------------------------------------------------------------

// MYC_response

// optional int64 order_id = 1;
inline bool MYC_response::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MYC_response::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MYC_response::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MYC_response::clear_order_id() {
  order_id_ = GOOGLE_LONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::int64 MYC_response::order_id() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.order_id)
  return order_id_;
}
inline void MYC_response::set_order_id(::google::protobuf::int64 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.order_id)
}

// optional string symbol = 2;
inline bool MYC_response::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MYC_response::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MYC_response::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MYC_response::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& MYC_response::symbol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_response::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_response.symbol)
}
inline void MYC_response::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_response.symbol)
}
inline void MYC_response::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_response.symbol)
}
inline ::std::string* MYC_response::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_response.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_response::release_symbol() {
  // @@protoc_insertion_point(field_release:MYC.MYC_response.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_response::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_response.symbol)
}

// optional int32 direction = 3;
inline bool MYC_response::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MYC_response::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MYC_response::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MYC_response::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 MYC_response::direction() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.direction)
  return direction_;
}
inline void MYC_response::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.direction)
}

// optional int32 open_close = 4;
inline bool MYC_response::has_open_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MYC_response::set_has_open_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MYC_response::clear_has_open_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MYC_response::clear_open_close() {
  open_close_ = 0;
  clear_has_open_close();
}
inline ::google::protobuf::int32 MYC_response::open_close() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.open_close)
  return open_close_;
}
inline void MYC_response::set_open_close(::google::protobuf::int32 value) {
  set_has_open_close();
  open_close_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.open_close)
}

// optional double exe_price = 5;
inline bool MYC_response::has_exe_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MYC_response::set_has_exe_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MYC_response::clear_has_exe_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MYC_response::clear_exe_price() {
  exe_price_ = 0;
  clear_has_exe_price();
}
inline double MYC_response::exe_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.exe_price)
  return exe_price_;
}
inline void MYC_response::set_exe_price(double value) {
  set_has_exe_price();
  exe_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.exe_price)
}

// optional int32 exe_volume = 6;
inline bool MYC_response::has_exe_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MYC_response::set_has_exe_volume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MYC_response::clear_has_exe_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MYC_response::clear_exe_volume() {
  exe_volume_ = 0;
  clear_has_exe_volume();
}
inline ::google::protobuf::int32 MYC_response::exe_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.exe_volume)
  return exe_volume_;
}
inline void MYC_response::set_exe_volume(::google::protobuf::int32 value) {
  set_has_exe_volume();
  exe_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.exe_volume)
}

// optional int32 status = 7;
inline bool MYC_response::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MYC_response::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MYC_response::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MYC_response::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 MYC_response::status() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.status)
  return status_;
}
inline void MYC_response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.status)
}

// optional int32 error_no = 8;
inline bool MYC_response::has_error_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MYC_response::set_has_error_no() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MYC_response::clear_has_error_no() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MYC_response::clear_error_no() {
  error_no_ = 0;
  clear_has_error_no();
}
inline ::google::protobuf::int32 MYC_response::error_no() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.error_no)
  return error_no_;
}
inline void MYC_response::set_error_no(::google::protobuf::int32 value) {
  set_has_error_no();
  error_no_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.error_no)
}

// optional string error_info = 9;
inline bool MYC_response::has_error_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MYC_response::set_has_error_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MYC_response::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MYC_response::clear_error_info() {
  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_info();
}
inline const ::std::string& MYC_response::error_info() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.error_info)
  return error_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_response::set_error_info(const ::std::string& value) {
  set_has_error_info();
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_response.error_info)
}
inline void MYC_response::set_error_info(const char* value) {
  set_has_error_info();
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_response.error_info)
}
inline void MYC_response::set_error_info(const char* value, size_t size) {
  set_has_error_info();
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_response.error_info)
}
inline ::std::string* MYC_response::mutable_error_info() {
  set_has_error_info();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_response.error_info)
  return error_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MYC_response::release_error_info() {
  // @@protoc_insertion_point(field_release:MYC.MYC_response.error_info)
  clear_has_error_info();
  return error_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MYC_response::set_allocated_error_info(::std::string* error_info) {
  if (error_info != NULL) {
    set_has_error_info();
  } else {
    clear_has_error_info();
  }
  error_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_info);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_response.error_info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MYC

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MYC::MYC_OrderError_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_OrderError_enumtype>() {
  return ::MYC::MYC_OrderError_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_SmartExecutionError_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_SmartExecutionError_enumtype>() {
  return ::MYC::MYC_SmartExecutionError_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_Direction_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_Direction_enumtype>() {
  return ::MYC::MYC_Direction_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_OpenClose_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_OpenClose_enumtype>() {
  return ::MYC::MYC_OpenClose_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_InvestorTypes_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_InvestorTypes_enumtype>() {
  return ::MYC::MYC_InvestorTypes_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_OrderType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_OrderType_enumtype>() {
  return ::MYC::MYC_OrderType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_OrderStatus_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_OrderStatus_enumtype>() {
  return ::MYC::MYC_OrderStatus_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_TIF_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_TIF_enumtype>() {
  return ::MYC::MYC_TIF_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_Currency_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_Currency_enumtype>() {
  return ::MYC::MYC_Currency_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_Exchange_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_Exchange_enumtype>() {
  return ::MYC::MYC_Exchange_enumtype_descriptor();
}
template <> struct is_proto_enum< ::MYC::MYC_FeedType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MYC::MYC_FeedType_enumtype>() {
  return ::MYC::MYC_FeedType_enumtype_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MYCData_2eproto__INCLUDED
