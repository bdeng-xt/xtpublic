// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XTEnum.proto

#ifndef PROTOBUF_XTEnum_2eproto__INCLUDED
#define PROTOBUF_XTEnum_2eproto__INCLUDED

#include <string>
#include "XTConfig.h"
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace XT {

// Internal implementation detail -- do not call these.
void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
void protobuf_AssignDesc_XTEnum_2eproto();
void protobuf_ShutdownFile_XTEnum_2eproto();

class AccountTypeMask;
class AggressiveType;
class AsyncTaskStatus;
class BarDataFlagMask;
class BrokerApiType;
class BrokerServerType;
class BuySellType;
class CallPutType;
class ConnectionStatus;
class CrossAboveBelowType;
class CurrPrevTempType;
class DataType;
class DateTimeType;
class DisplayLanguageType;
class EventCategoryType;
class EventDataDstType;
class EventModeType;
class ExchangeType;
class ExitPxType;
class FillInfoType;
class FillType;
class FitDataType;
class InstrEventType;
class InstrFilterType;
class InstrumentCommissionRateType;
class LogInStatus;
class MdTrdType;
class MemDBMsgType;
class MktDataChgType;
class MktRegimeType;
class OCFlagAutoType;
class OpenCloseFlag;
class OptionCalcType;
class OptionExerciseStyle;
class OptionPxMethod;
class OptionXType;
class OrderQuoteReasonType;
class OrderQuoteStatus;
class OrderQuoteTsType;
class PBTagMsgType;
class PyAT_OrderAction;
class PyAT_OrderState;
class PyAT_OrderType;
class RollingType;
class SecurityType;
class TACandleSettingType;
class TAFuncUnstId;
class TAMAType;
class TARangeType;
class TARetCode;
class TAType;
class TagType;
class TaskStatus;
class TrdSigType;
class TrdStatType;
class TrendingOrRangingType;
class VolCurveParamType;
class YahooQuoteType;
class YahooRangeType;

enum AsyncTaskStatus_enumtype {
  AsyncTaskStatus_enumtype_Unknown = 0,
  AsyncTaskStatus_enumtype_Pending = 1,
  AsyncTaskStatus_enumtype_Running = 2,
  AsyncTaskStatus_enumtype_Finished = 3
};
XT_COMMON_API bool AsyncTaskStatus_enumtype_IsValid(int value);
const AsyncTaskStatus_enumtype AsyncTaskStatus_enumtype_enumtype_MIN = AsyncTaskStatus_enumtype_Unknown;
const AsyncTaskStatus_enumtype AsyncTaskStatus_enumtype_enumtype_MAX = AsyncTaskStatus_enumtype_Finished;
const int AsyncTaskStatus_enumtype_enumtype_ARRAYSIZE = AsyncTaskStatus_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* AsyncTaskStatus_enumtype_descriptor();
inline const ::std::string& AsyncTaskStatus_enumtype_Name(AsyncTaskStatus_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    AsyncTaskStatus_enumtype_descriptor(), value);
}
inline bool AsyncTaskStatus_enumtype_Parse(
    const ::std::string& name, AsyncTaskStatus_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AsyncTaskStatus_enumtype>(
    AsyncTaskStatus_enumtype_descriptor(), name, value);
}
enum MdTrdType_enumtype {
  MdTrdType_enumtype_Unknown = 0,
  MdTrdType_enumtype_Md = 1,
  MdTrdType_enumtype_Trd = 2,
  MdTrdType_enumtype_MdTrd = 3,
  MdTrdType_enumtype_Md2 = 4,
  MdTrdType_enumtype_Trd2 = 8,
  MdTrdType_enumtype_MdTrd2 = 12,
  MdTrdType_enumtype_Md3 = 16,
  MdTrdType_enumtype_Trd3 = 32,
  MdTrdType_enumtype_MdAll = 21,
  MdTrdType_enumtype_TrdAll = 42
};
XT_COMMON_API bool MdTrdType_enumtype_IsValid(int value);
const MdTrdType_enumtype MdTrdType_enumtype_enumtype_MIN = MdTrdType_enumtype_Unknown;
const MdTrdType_enumtype MdTrdType_enumtype_enumtype_MAX = MdTrdType_enumtype_TrdAll;
const int MdTrdType_enumtype_enumtype_ARRAYSIZE = MdTrdType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MdTrdType_enumtype_descriptor();
inline const ::std::string& MdTrdType_enumtype_Name(MdTrdType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MdTrdType_enumtype_descriptor(), value);
}
inline bool MdTrdType_enumtype_Parse(
    const ::std::string& name, MdTrdType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MdTrdType_enumtype>(
    MdTrdType_enumtype_descriptor(), name, value);
}
enum EventModeType_enumtype {
  EventModeType_enumtype_Unknown = 0,
  EventModeType_enumtype_Live = 1,
  EventModeType_enumtype_Data = 2,
  EventModeType_enumtype_Replay = 4,
  EventModeType_enumtype_Backtest = 8
};
XT_COMMON_API bool EventModeType_enumtype_IsValid(int value);
const EventModeType_enumtype EventModeType_enumtype_enumtype_MIN = EventModeType_enumtype_Unknown;
const EventModeType_enumtype EventModeType_enumtype_enumtype_MAX = EventModeType_enumtype_Backtest;
const int EventModeType_enumtype_enumtype_ARRAYSIZE = EventModeType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* EventModeType_enumtype_descriptor();
inline const ::std::string& EventModeType_enumtype_Name(EventModeType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventModeType_enumtype_descriptor(), value);
}
inline bool EventModeType_enumtype_Parse(
    const ::std::string& name, EventModeType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventModeType_enumtype>(
    EventModeType_enumtype_descriptor(), name, value);
}
enum EventCategoryType_enumtype {
  EventCategoryType_enumtype_Unknown = 0,
  EventCategoryType_enumtype_Mkt = 1,
  EventCategoryType_enumtype_Trd = 2,
  EventCategoryType_enumtype_Strategy = 4,
  EventCategoryType_enumtype_System = 8
};
XT_COMMON_API bool EventCategoryType_enumtype_IsValid(int value);
const EventCategoryType_enumtype EventCategoryType_enumtype_enumtype_MIN = EventCategoryType_enumtype_Unknown;
const EventCategoryType_enumtype EventCategoryType_enumtype_enumtype_MAX = EventCategoryType_enumtype_System;
const int EventCategoryType_enumtype_enumtype_ARRAYSIZE = EventCategoryType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* EventCategoryType_enumtype_descriptor();
inline const ::std::string& EventCategoryType_enumtype_Name(EventCategoryType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventCategoryType_enumtype_descriptor(), value);
}
inline bool EventCategoryType_enumtype_Parse(
    const ::std::string& name, EventCategoryType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventCategoryType_enumtype>(
    EventCategoryType_enumtype_descriptor(), name, value);
}
enum EventDataDstType_enumtype {
  EventDataDstType_enumtype_Unknown = 0,
  EventDataDstType_enumtype_Log = 1,
  EventDataDstType_enumtype_Sqlite = 2,
  EventDataDstType_enumtype_Journal = 4,
  EventDataDstType_enumtype_NNG = 8
};
XT_COMMON_API bool EventDataDstType_enumtype_IsValid(int value);
const EventDataDstType_enumtype EventDataDstType_enumtype_enumtype_MIN = EventDataDstType_enumtype_Unknown;
const EventDataDstType_enumtype EventDataDstType_enumtype_enumtype_MAX = EventDataDstType_enumtype_NNG;
const int EventDataDstType_enumtype_enumtype_ARRAYSIZE = EventDataDstType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* EventDataDstType_enumtype_descriptor();
inline const ::std::string& EventDataDstType_enumtype_Name(EventDataDstType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventDataDstType_enumtype_descriptor(), value);
}
inline bool EventDataDstType_enumtype_Parse(
    const ::std::string& name, EventDataDstType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventDataDstType_enumtype>(
    EventDataDstType_enumtype_descriptor(), name, value);
}
enum MemDBMsgType_enumtype {
  MemDBMsgType_enumtype_PageEnd = 10000,
  MemDBMsgType_enumtype_SessionStart = 10001,
  MemDBMsgType_enumtype_SessionEnd = 10002,
  MemDBMsgType_enumtype_Time = 10003,
  MemDBMsgType_enumtype_TimeRequest = 10004,
  MemDBMsgType_enumtype_Register = 10011,
  MemDBMsgType_enumtype_Deregister = 10012,
  MemDBMsgType_enumtype_RequestReadFrom = 10021,
  MemDBMsgType_enumtype_RequestReadFromPublic = 10022,
  MemDBMsgType_enumtype_RequestWriteTo = 10023,
  MemDBMsgType_enumtype_RequestUnpublish = 10024,
  MemDBMsgType_enumtype_RequestStart = 10025,
  MemDBMsgType_enumtype_Location = 10026,
  MemDBMsgType_enumtype_TradingDay = 10027,
  MemDBMsgType_enumtype_Channel = 10028
};
XT_COMMON_API bool MemDBMsgType_enumtype_IsValid(int value);
const MemDBMsgType_enumtype MemDBMsgType_enumtype_enumtype_MIN = MemDBMsgType_enumtype_PageEnd;
const MemDBMsgType_enumtype MemDBMsgType_enumtype_enumtype_MAX = MemDBMsgType_enumtype_Channel;
const int MemDBMsgType_enumtype_enumtype_ARRAYSIZE = MemDBMsgType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MemDBMsgType_enumtype_descriptor();
inline const ::std::string& MemDBMsgType_enumtype_Name(MemDBMsgType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MemDBMsgType_enumtype_descriptor(), value);
}
inline bool MemDBMsgType_enumtype_Parse(
    const ::std::string& name, MemDBMsgType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MemDBMsgType_enumtype>(
    MemDBMsgType_enumtype_descriptor(), name, value);
}
enum BarDataFlagMask_enumtype {
  BarDataFlagMask_enumtype_Unknown = 0,
  BarDataFlagMask_enumtype_IsFull = 1
};
XT_COMMON_API bool BarDataFlagMask_enumtype_IsValid(int value);
const BarDataFlagMask_enumtype BarDataFlagMask_enumtype_enumtype_MIN = BarDataFlagMask_enumtype_Unknown;
const BarDataFlagMask_enumtype BarDataFlagMask_enumtype_enumtype_MAX = BarDataFlagMask_enumtype_IsFull;
const int BarDataFlagMask_enumtype_enumtype_ARRAYSIZE = BarDataFlagMask_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* BarDataFlagMask_enumtype_descriptor();
inline const ::std::string& BarDataFlagMask_enumtype_Name(BarDataFlagMask_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    BarDataFlagMask_enumtype_descriptor(), value);
}
inline bool BarDataFlagMask_enumtype_Parse(
    const ::std::string& name, BarDataFlagMask_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BarDataFlagMask_enumtype>(
    BarDataFlagMask_enumtype_descriptor(), name, value);
}
enum BrokerApiType_enumtype {
  BrokerApiType_enumtype_Unknown = 0,
  BrokerApiType_enumtype_SIM = 1,
  BrokerApiType_enumtype_IB = 2,
  BrokerApiType_enumtype_TT = 3,
  BrokerApiType_enumtype_CTP = 4,
  BrokerApiType_enumtype_CTPMINI = 5,
  BrokerApiType_enumtype_DFITC = 6,
  BrokerApiType_enumtype_DFITCL2 = 7,
  BrokerApiType_enumtype_DFITCSEC = 8,
  BrokerApiType_enumtype_DFITCX1 = 9,
  BrokerApiType_enumtype_FEMAS = 10,
  BrokerApiType_enumtype_TAP = 11,
  BrokerApiType_enumtype_ESUNNY3 = 12,
  BrokerApiType_enumtype_ESUNNY8 = 13,
  BrokerApiType_enumtype_ESUNNY9 = 14,
  BrokerApiType_enumtype_KCBP = 15,
  BrokerApiType_enumtype_Kingstar = 16,
  BrokerApiType_enumtype_LeverFun = 17,
  BrokerApiType_enumtype_LTS = 18,
  BrokerApiType_enumtype_Sina = 19,
  BrokerApiType_enumtype_Yahoo = 20,
  BrokerApiType_enumtype_Wind = 21,
  BrokerApiType_enumtype_EmQuant = 22,
  BrokerApiType_enumtype_XTP = 23,
  BrokerApiType_enumtype_CICC = 24,
  BrokerApiType_enumtype_Web = 25,
  BrokerApiType_enumtype_TDX = 26,
  BrokerApiType_enumtype_Binance = 51,
  BrokerApiType_enumtype_UDP = 100,
  BrokerApiType_enumtype_CTP_6311 = 1001,
  BrokerApiType_enumtype_CTP_6313 = 1002,
  BrokerApiType_enumtype_CTP_6315 = 1003
};
XT_COMMON_API bool BrokerApiType_enumtype_IsValid(int value);
const BrokerApiType_enumtype BrokerApiType_enumtype_enumtype_MIN = BrokerApiType_enumtype_Unknown;
const BrokerApiType_enumtype BrokerApiType_enumtype_enumtype_MAX = BrokerApiType_enumtype_CTP_6315;
const int BrokerApiType_enumtype_enumtype_ARRAYSIZE = BrokerApiType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* BrokerApiType_enumtype_descriptor();
inline const ::std::string& BrokerApiType_enumtype_Name(BrokerApiType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    BrokerApiType_enumtype_descriptor(), value);
}
inline bool BrokerApiType_enumtype_Parse(
    const ::std::string& name, BrokerApiType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrokerApiType_enumtype>(
    BrokerApiType_enumtype_descriptor(), name, value);
}
enum PBTagMsgType_enumtype {
  PBTagMsgType_enumtype_Unknown = 0,
  PBTagMsgType_enumtype_Ctrl = 1,
  PBTagMsgType_enumtype_Data = 2,
  PBTagMsgType_enumtype_Instr = 3,
  PBTagMsgType_enumtype_SIM = 11,
  PBTagMsgType_enumtype_IB = 12,
  PBTagMsgType_enumtype_TT = 13,
  PBTagMsgType_enumtype_CTP = 14,
  PBTagMsgType_enumtype_DFITC = 15,
  PBTagMsgType_enumtype_DFITCL2 = 16,
  PBTagMsgType_enumtype_DFITCX1 = 17,
  PBTagMsgType_enumtype_EPoleStar = 18,
  PBTagMsgType_enumtype_ESUNNY3 = 19,
  PBTagMsgType_enumtype_ESUNNY8 = 20,
  PBTagMsgType_enumtype_ESUNNY9 = 21,
  PBTagMsgType_enumtype_FEMAS = 22,
  PBTagMsgType_enumtype_KCBP = 23,
  PBTagMsgType_enumtype_Kingstar = 24,
  PBTagMsgType_enumtype_LeverFun = 25,
  PBTagMsgType_enumtype_LTS = 26,
  PBTagMsgType_enumtype_Sina = 27,
  PBTagMsgType_enumtype_Yahoo = 28,
  PBTagMsgType_enumtype_Wind = 29,
  PBTagMsgType_enumtype_EmQuant = 30,
  PBTagMsgType_enumtype_XTP = 31,
  PBTagMsgType_enumtype_DFITCSEC = 32,
  PBTagMsgType_enumtype_CICC = 33,
  PBTagMsgType_enumtype_Web = 34,
  PBTagMsgType_enumtype_TDX = 35,
  PBTagMsgType_enumtype_Binance = 51
};
XT_COMMON_API bool PBTagMsgType_enumtype_IsValid(int value);
const PBTagMsgType_enumtype PBTagMsgType_enumtype_enumtype_MIN = PBTagMsgType_enumtype_Unknown;
const PBTagMsgType_enumtype PBTagMsgType_enumtype_enumtype_MAX = PBTagMsgType_enumtype_Binance;
const int PBTagMsgType_enumtype_enumtype_ARRAYSIZE = PBTagMsgType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* PBTagMsgType_enumtype_descriptor();
inline const ::std::string& PBTagMsgType_enumtype_Name(PBTagMsgType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBTagMsgType_enumtype_descriptor(), value);
}
inline bool PBTagMsgType_enumtype_Parse(
    const ::std::string& name, PBTagMsgType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBTagMsgType_enumtype>(
    PBTagMsgType_enumtype_descriptor(), name, value);
}
enum BrokerServerType_enumtype {
  BrokerServerType_enumtype_Unknown = 0,
  BrokerServerType_enumtype_Md = 1,
  BrokerServerType_enumtype_Trd = 2,
  BrokerServerType_enumtype_MdTrd = 3
};
XT_COMMON_API bool BrokerServerType_enumtype_IsValid(int value);
const BrokerServerType_enumtype BrokerServerType_enumtype_enumtype_MIN = BrokerServerType_enumtype_Unknown;
const BrokerServerType_enumtype BrokerServerType_enumtype_enumtype_MAX = BrokerServerType_enumtype_MdTrd;
const int BrokerServerType_enumtype_enumtype_ARRAYSIZE = BrokerServerType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* BrokerServerType_enumtype_descriptor();
inline const ::std::string& BrokerServerType_enumtype_Name(BrokerServerType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    BrokerServerType_enumtype_descriptor(), value);
}
inline bool BrokerServerType_enumtype_Parse(
    const ::std::string& name, BrokerServerType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrokerServerType_enumtype>(
    BrokerServerType_enumtype_descriptor(), name, value);
}
enum ConnectionStatus_enumtype {
  ConnectionStatus_enumtype_Unknown = 0,
  ConnectionStatus_enumtype_Connected = 1,
  ConnectionStatus_enumtype_Disconnected = 2
};
XT_COMMON_API bool ConnectionStatus_enumtype_IsValid(int value);
const ConnectionStatus_enumtype ConnectionStatus_enumtype_enumtype_MIN = ConnectionStatus_enumtype_Unknown;
const ConnectionStatus_enumtype ConnectionStatus_enumtype_enumtype_MAX = ConnectionStatus_enumtype_Disconnected;
const int ConnectionStatus_enumtype_enumtype_ARRAYSIZE = ConnectionStatus_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* ConnectionStatus_enumtype_descriptor();
inline const ::std::string& ConnectionStatus_enumtype_Name(ConnectionStatus_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionStatus_enumtype_descriptor(), value);
}
inline bool ConnectionStatus_enumtype_Parse(
    const ::std::string& name, ConnectionStatus_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionStatus_enumtype>(
    ConnectionStatus_enumtype_descriptor(), name, value);
}
enum LogInStatus_enumtype {
  LogInStatus_enumtype_Unknown = 0,
  LogInStatus_enumtype_Login = 1,
  LogInStatus_enumtype_Logout = 2
};
XT_COMMON_API bool LogInStatus_enumtype_IsValid(int value);
const LogInStatus_enumtype LogInStatus_enumtype_enumtype_MIN = LogInStatus_enumtype_Unknown;
const LogInStatus_enumtype LogInStatus_enumtype_enumtype_MAX = LogInStatus_enumtype_Logout;
const int LogInStatus_enumtype_enumtype_ARRAYSIZE = LogInStatus_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* LogInStatus_enumtype_descriptor();
inline const ::std::string& LogInStatus_enumtype_Name(LogInStatus_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogInStatus_enumtype_descriptor(), value);
}
inline bool LogInStatus_enumtype_Parse(
    const ::std::string& name, LogInStatus_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogInStatus_enumtype>(
    LogInStatus_enumtype_descriptor(), name, value);
}
enum TaskStatus_enumtype {
  TaskStatus_enumtype_Unknown = 0,
  TaskStatus_enumtype_Running = 1,
  TaskStatus_enumtype_Stopped = 2
};
XT_COMMON_API bool TaskStatus_enumtype_IsValid(int value);
const TaskStatus_enumtype TaskStatus_enumtype_enumtype_MIN = TaskStatus_enumtype_Unknown;
const TaskStatus_enumtype TaskStatus_enumtype_enumtype_MAX = TaskStatus_enumtype_Stopped;
const int TaskStatus_enumtype_enumtype_ARRAYSIZE = TaskStatus_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TaskStatus_enumtype_descriptor();
inline const ::std::string& TaskStatus_enumtype_Name(TaskStatus_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskStatus_enumtype_descriptor(), value);
}
inline bool TaskStatus_enumtype_Parse(
    const ::std::string& name, TaskStatus_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskStatus_enumtype>(
    TaskStatus_enumtype_descriptor(), name, value);
}
enum DisplayLanguageType_enumtype {
  DisplayLanguageType_enumtype_English = 0,
  DisplayLanguageType_enumtype_Chinese = 1
};
XT_COMMON_API bool DisplayLanguageType_enumtype_IsValid(int value);
const DisplayLanguageType_enumtype DisplayLanguageType_enumtype_enumtype_MIN = DisplayLanguageType_enumtype_English;
const DisplayLanguageType_enumtype DisplayLanguageType_enumtype_enumtype_MAX = DisplayLanguageType_enumtype_Chinese;
const int DisplayLanguageType_enumtype_enumtype_ARRAYSIZE = DisplayLanguageType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* DisplayLanguageType_enumtype_descriptor();
inline const ::std::string& DisplayLanguageType_enumtype_Name(DisplayLanguageType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    DisplayLanguageType_enumtype_descriptor(), value);
}
inline bool DisplayLanguageType_enumtype_Parse(
    const ::std::string& name, DisplayLanguageType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DisplayLanguageType_enumtype>(
    DisplayLanguageType_enumtype_descriptor(), name, value);
}
enum ExchangeType_enumtype {
  ExchangeType_enumtype_Unknown = 0,
  ExchangeType_enumtype_IDX = 1,
  ExchangeType_enumtype_CME = 2,
  ExchangeType_enumtype_ICE = 3,
  ExchangeType_enumtype_NYSE = 4,
  ExchangeType_enumtype_NASDAQ = 5,
  ExchangeType_enumtype_CFFEX = 6,
  ExchangeType_enumtype_CZCE = 7,
  ExchangeType_enumtype_DCE = 8,
  ExchangeType_enumtype_SHFE = 9,
  ExchangeType_enumtype_INE = 10,
  ExchangeType_enumtype_SSE = 11,
  ExchangeType_enumtype_SZSE = 12,
  ExchangeType_enumtype_CBOT = 13,
  ExchangeType_enumtype_LME = 14,
  ExchangeType_enumtype_COMEX = 15,
  ExchangeType_enumtype_NYMEX = 16,
  ExchangeType_enumtype_HKEX = 17,
  ExchangeType_enumtype_IB = 18,
  ExchangeType_enumtype_SGE = 19,
  ExchangeType_enumtype_SGX = 20,
  ExchangeType_enumtype_Binance = 51,
  ExchangeType_enumtype_OKEx = 52,
  ExchangeType_enumtype_Huobi = 53,
  ExchangeType_enumtype_Bitfinex = 54,
  ExchangeType_enumtype_ZBCOM = 55,
  ExchangeType_enumtype_Upbit = 56,
  ExchangeType_enumtype_HitBTC = 57,
  ExchangeType_enumtype_Coinbase = 58,
  ExchangeType_enumtype_CoinEx = 59,
  ExchangeType_enumtype_LBank = 60,
  ExchangeType_enumtype_Kraken = 61,
  ExchangeType_enumtype_Bibox = 62,
  ExchangeType_enumtype_BitForex = 63,
  ExchangeType_enumtype_BitZ = 64,
  ExchangeType_enumtype_Bitstamp = 65,
  ExchangeType_enumtype_CoinBene = 66,
  ExchangeType_enumtype_BCEX = 67,
  ExchangeType_enumtype_Bittrex = 68,
  ExchangeType_enumtype_DigiFinex = 69,
  ExchangeType_enumtype_Bitbank = 70,
  ExchangeType_enumtype_Simex = 71,
  ExchangeType_enumtype_Coinsuper = 72,
  ExchangeType_enumtype_bitFlyer = 73,
  ExchangeType_enumtype_OEX = 74,
  ExchangeType_enumtype_Gateio = 75,
  ExchangeType_enumtype_TOPBTC = 76,
  ExchangeType_enumtype_EXX = 77,
  ExchangeType_enumtype_WEX = 78,
  ExchangeType_enumtype_Poloniex = 79,
  ExchangeType_enumtype_Gemini = 80,
  ExchangeType_enumtype_Bithumb = 81
};
XT_COMMON_API bool ExchangeType_enumtype_IsValid(int value);
const ExchangeType_enumtype ExchangeType_enumtype_enumtype_MIN = ExchangeType_enumtype_Unknown;
const ExchangeType_enumtype ExchangeType_enumtype_enumtype_MAX = ExchangeType_enumtype_Bithumb;
const int ExchangeType_enumtype_enumtype_ARRAYSIZE = ExchangeType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* ExchangeType_enumtype_descriptor();
inline const ::std::string& ExchangeType_enumtype_Name(ExchangeType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExchangeType_enumtype_descriptor(), value);
}
inline bool ExchangeType_enumtype_Parse(
    const ::std::string& name, ExchangeType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExchangeType_enumtype>(
    ExchangeType_enumtype_descriptor(), name, value);
}
enum AggressiveType_enumtype {
  AggressiveType_enumtype_KeepDist = 0,
  AggressiveType_enumtype_JoinMkt = 1,
  AggressiveType_enumtype_JoinMktCloseGap = 2,
  AggressiveType_enumtype_MidMkt = 3,
  AggressiveType_enumtype_TakeMktCloseGap = 4,
  AggressiveType_enumtype_TakeMkt = 5
};
XT_COMMON_API bool AggressiveType_enumtype_IsValid(int value);
const AggressiveType_enumtype AggressiveType_enumtype_enumtype_MIN = AggressiveType_enumtype_KeepDist;
const AggressiveType_enumtype AggressiveType_enumtype_enumtype_MAX = AggressiveType_enumtype_TakeMkt;
const int AggressiveType_enumtype_enumtype_ARRAYSIZE = AggressiveType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* AggressiveType_enumtype_descriptor();
inline const ::std::string& AggressiveType_enumtype_Name(AggressiveType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    AggressiveType_enumtype_descriptor(), value);
}
inline bool AggressiveType_enumtype_Parse(
    const ::std::string& name, AggressiveType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AggressiveType_enumtype>(
    AggressiveType_enumtype_descriptor(), name, value);
}
enum BuySellType_enumtype {
  BuySellType_enumtype_Buy = 0,
  BuySellType_enumtype_Sell = 1
};
XT_COMMON_API bool BuySellType_enumtype_IsValid(int value);
const BuySellType_enumtype BuySellType_enumtype_enumtype_MIN = BuySellType_enumtype_Buy;
const BuySellType_enumtype BuySellType_enumtype_enumtype_MAX = BuySellType_enumtype_Sell;
const int BuySellType_enumtype_enumtype_ARRAYSIZE = BuySellType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* BuySellType_enumtype_descriptor();
inline const ::std::string& BuySellType_enumtype_Name(BuySellType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    BuySellType_enumtype_descriptor(), value);
}
inline bool BuySellType_enumtype_Parse(
    const ::std::string& name, BuySellType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuySellType_enumtype>(
    BuySellType_enumtype_descriptor(), name, value);
}
enum AccountTypeMask_enumtype {
  AccountTypeMask_enumtype_Unknown = 0,
  AccountTypeMask_enumtype_AccountUS = 1,
  AccountTypeMask_enumtype_AccountCNFutures = 2,
  AccountTypeMask_enumtype_AccountCNStocks = 4,
  AccountTypeMask_enumtype_AccountCNFutureOptions = 8,
  AccountTypeMask_enumtype_AccountCNStockOptions = 16
};
XT_COMMON_API bool AccountTypeMask_enumtype_IsValid(int value);
const AccountTypeMask_enumtype AccountTypeMask_enumtype_enumtype_MIN = AccountTypeMask_enumtype_Unknown;
const AccountTypeMask_enumtype AccountTypeMask_enumtype_enumtype_MAX = AccountTypeMask_enumtype_AccountCNStockOptions;
const int AccountTypeMask_enumtype_enumtype_ARRAYSIZE = AccountTypeMask_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* AccountTypeMask_enumtype_descriptor();
inline const ::std::string& AccountTypeMask_enumtype_Name(AccountTypeMask_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountTypeMask_enumtype_descriptor(), value);
}
inline bool AccountTypeMask_enumtype_Parse(
    const ::std::string& name, AccountTypeMask_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountTypeMask_enumtype>(
    AccountTypeMask_enumtype_descriptor(), name, value);
}
enum ExitPxType_enumtype {
  ExitPxType_enumtype_MktMidPx = 0,
  ExitPxType_enumtype_TheoPx = 1,
  ExitPxType_enumtype_RiskPx = 2
};
XT_COMMON_API bool ExitPxType_enumtype_IsValid(int value);
const ExitPxType_enumtype ExitPxType_enumtype_enumtype_MIN = ExitPxType_enumtype_MktMidPx;
const ExitPxType_enumtype ExitPxType_enumtype_enumtype_MAX = ExitPxType_enumtype_RiskPx;
const int ExitPxType_enumtype_enumtype_ARRAYSIZE = ExitPxType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* ExitPxType_enumtype_descriptor();
inline const ::std::string& ExitPxType_enumtype_Name(ExitPxType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExitPxType_enumtype_descriptor(), value);
}
inline bool ExitPxType_enumtype_Parse(
    const ::std::string& name, ExitPxType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExitPxType_enumtype>(
    ExitPxType_enumtype_descriptor(), name, value);
}
enum FillType_enumtype {
  FillType_enumtype_Unknown = 0,
  FillType_enumtype_YtdPos = 1
};
XT_COMMON_API bool FillType_enumtype_IsValid(int value);
const FillType_enumtype FillType_enumtype_enumtype_MIN = FillType_enumtype_Unknown;
const FillType_enumtype FillType_enumtype_enumtype_MAX = FillType_enumtype_YtdPos;
const int FillType_enumtype_enumtype_ARRAYSIZE = FillType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* FillType_enumtype_descriptor();
inline const ::std::string& FillType_enumtype_Name(FillType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillType_enumtype_descriptor(), value);
}
inline bool FillType_enumtype_Parse(
    const ::std::string& name, FillType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillType_enumtype>(
    FillType_enumtype_descriptor(), name, value);
}
enum FillInfoType_enumtype {
  FillInfoType_enumtype_Unknown = 0,
  FillInfoType_enumtype_Tot = 1,
  FillInfoType_enumtype_Prev = 2,
  FillInfoType_enumtype_Curr = 4
};
XT_COMMON_API bool FillInfoType_enumtype_IsValid(int value);
const FillInfoType_enumtype FillInfoType_enumtype_enumtype_MIN = FillInfoType_enumtype_Unknown;
const FillInfoType_enumtype FillInfoType_enumtype_enumtype_MAX = FillInfoType_enumtype_Curr;
const int FillInfoType_enumtype_enumtype_ARRAYSIZE = FillInfoType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* FillInfoType_enumtype_descriptor();
inline const ::std::string& FillInfoType_enumtype_Name(FillInfoType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillInfoType_enumtype_descriptor(), value);
}
inline bool FillInfoType_enumtype_Parse(
    const ::std::string& name, FillInfoType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillInfoType_enumtype>(
    FillInfoType_enumtype_descriptor(), name, value);
}
enum FitDataType_enumtype {
  FitDataType_enumtype_Map = 0,
  FitDataType_enumtype_List = 1,
  FitDataType_enumtype_MapList = 2
};
XT_COMMON_API bool FitDataType_enumtype_IsValid(int value);
const FitDataType_enumtype FitDataType_enumtype_enumtype_MIN = FitDataType_enumtype_Map;
const FitDataType_enumtype FitDataType_enumtype_enumtype_MAX = FitDataType_enumtype_MapList;
const int FitDataType_enumtype_enumtype_ARRAYSIZE = FitDataType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* FitDataType_enumtype_descriptor();
inline const ::std::string& FitDataType_enumtype_Name(FitDataType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    FitDataType_enumtype_descriptor(), value);
}
inline bool FitDataType_enumtype_Parse(
    const ::std::string& name, FitDataType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FitDataType_enumtype>(
    FitDataType_enumtype_descriptor(), name, value);
}
enum InstrumentCommissionRateType_enumtype {
  InstrumentCommissionRateType_enumtype_Unknown = 0,
  InstrumentCommissionRateType_enumtype_RatioByMoney = 1,
  InstrumentCommissionRateType_enumtype_RatioByVolume = 2,
  InstrumentCommissionRateType_enumtype_OpenRatioByMoney = 5,
  InstrumentCommissionRateType_enumtype_OpenRatioByVolume = 10,
  InstrumentCommissionRateType_enumtype_CloseRatioByMoney = 17,
  InstrumentCommissionRateType_enumtype_CloseRatioByVolume = 34,
  InstrumentCommissionRateType_enumtype_CloseTodayRatioByMoney = 65,
  InstrumentCommissionRateType_enumtype_CloseTodayRatioByVolume = 130
};
XT_COMMON_API bool InstrumentCommissionRateType_enumtype_IsValid(int value);
const InstrumentCommissionRateType_enumtype InstrumentCommissionRateType_enumtype_enumtype_MIN = InstrumentCommissionRateType_enumtype_Unknown;
const InstrumentCommissionRateType_enumtype InstrumentCommissionRateType_enumtype_enumtype_MAX = InstrumentCommissionRateType_enumtype_CloseTodayRatioByVolume;
const int InstrumentCommissionRateType_enumtype_enumtype_ARRAYSIZE = InstrumentCommissionRateType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* InstrumentCommissionRateType_enumtype_descriptor();
inline const ::std::string& InstrumentCommissionRateType_enumtype_Name(InstrumentCommissionRateType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstrumentCommissionRateType_enumtype_descriptor(), value);
}
inline bool InstrumentCommissionRateType_enumtype_Parse(
    const ::std::string& name, InstrumentCommissionRateType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstrumentCommissionRateType_enumtype>(
    InstrumentCommissionRateType_enumtype_descriptor(), name, value);
}
enum InstrFilterType_enumtype {
  InstrFilterType_enumtype_Unknown = 0,
  InstrFilterType_enumtype_ByInstrPrefix = 1,
  InstrFilterType_enumtype_ByProductID = 2,
  InstrFilterType_enumtype_ByExchID = 4
};
XT_COMMON_API bool InstrFilterType_enumtype_IsValid(int value);
const InstrFilterType_enumtype InstrFilterType_enumtype_enumtype_MIN = InstrFilterType_enumtype_Unknown;
const InstrFilterType_enumtype InstrFilterType_enumtype_enumtype_MAX = InstrFilterType_enumtype_ByExchID;
const int InstrFilterType_enumtype_enumtype_ARRAYSIZE = InstrFilterType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* InstrFilterType_enumtype_descriptor();
inline const ::std::string& InstrFilterType_enumtype_Name(InstrFilterType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstrFilterType_enumtype_descriptor(), value);
}
inline bool InstrFilterType_enumtype_Parse(
    const ::std::string& name, InstrFilterType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstrFilterType_enumtype>(
    InstrFilterType_enumtype_descriptor(), name, value);
}
enum MktRegimeType_enumtype {
  MktRegimeType_enumtype_Unknown = 0,
  MktRegimeType_enumtype_Up = 1,
  MktRegimeType_enumtype_Dn = 2,
  MktRegimeType_enumtype_Ranging = 3
};
XT_COMMON_API bool MktRegimeType_enumtype_IsValid(int value);
const MktRegimeType_enumtype MktRegimeType_enumtype_enumtype_MIN = MktRegimeType_enumtype_Unknown;
const MktRegimeType_enumtype MktRegimeType_enumtype_enumtype_MAX = MktRegimeType_enumtype_Ranging;
const int MktRegimeType_enumtype_enumtype_ARRAYSIZE = MktRegimeType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MktRegimeType_enumtype_descriptor();
inline const ::std::string& MktRegimeType_enumtype_Name(MktRegimeType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MktRegimeType_enumtype_descriptor(), value);
}
inline bool MktRegimeType_enumtype_Parse(
    const ::std::string& name, MktRegimeType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MktRegimeType_enumtype>(
    MktRegimeType_enumtype_descriptor(), name, value);
}
enum TrendingOrRangingType_enumtype {
  TrendingOrRangingType_enumtype_Unknown = 0,
  TrendingOrRangingType_enumtype_Trending = 1,
  TrendingOrRangingType_enumtype_Ranging = 2
};
XT_COMMON_API bool TrendingOrRangingType_enumtype_IsValid(int value);
const TrendingOrRangingType_enumtype TrendingOrRangingType_enumtype_enumtype_MIN = TrendingOrRangingType_enumtype_Unknown;
const TrendingOrRangingType_enumtype TrendingOrRangingType_enumtype_enumtype_MAX = TrendingOrRangingType_enumtype_Ranging;
const int TrendingOrRangingType_enumtype_enumtype_ARRAYSIZE = TrendingOrRangingType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TrendingOrRangingType_enumtype_descriptor();
inline const ::std::string& TrendingOrRangingType_enumtype_Name(TrendingOrRangingType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrendingOrRangingType_enumtype_descriptor(), value);
}
inline bool TrendingOrRangingType_enumtype_Parse(
    const ::std::string& name, TrendingOrRangingType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrendingOrRangingType_enumtype>(
    TrendingOrRangingType_enumtype_descriptor(), name, value);
}
enum RollingType_enumtype {
  RollingType_enumtype_Time = 0,
  RollingType_enumtype_Tick = 1
};
XT_COMMON_API bool RollingType_enumtype_IsValid(int value);
const RollingType_enumtype RollingType_enumtype_enumtype_MIN = RollingType_enumtype_Time;
const RollingType_enumtype RollingType_enumtype_enumtype_MAX = RollingType_enumtype_Tick;
const int RollingType_enumtype_enumtype_ARRAYSIZE = RollingType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* RollingType_enumtype_descriptor();
inline const ::std::string& RollingType_enumtype_Name(RollingType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    RollingType_enumtype_descriptor(), value);
}
inline bool RollingType_enumtype_Parse(
    const ::std::string& name, RollingType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RollingType_enumtype>(
    RollingType_enumtype_descriptor(), name, value);
}
enum CallPutType_enumtype {
  CallPutType_enumtype_Unknown = 0,
  CallPutType_enumtype_Call = 1,
  CallPutType_enumtype_Put = 2,
  CallPutType_enumtype_Straddle = 3
};
XT_COMMON_API bool CallPutType_enumtype_IsValid(int value);
const CallPutType_enumtype CallPutType_enumtype_enumtype_MIN = CallPutType_enumtype_Unknown;
const CallPutType_enumtype CallPutType_enumtype_enumtype_MAX = CallPutType_enumtype_Straddle;
const int CallPutType_enumtype_enumtype_ARRAYSIZE = CallPutType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* CallPutType_enumtype_descriptor();
inline const ::std::string& CallPutType_enumtype_Name(CallPutType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallPutType_enumtype_descriptor(), value);
}
inline bool CallPutType_enumtype_Parse(
    const ::std::string& name, CallPutType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallPutType_enumtype>(
    CallPutType_enumtype_descriptor(), name, value);
}
enum OptionExerciseStyle_enumtype {
  OptionExerciseStyle_enumtype_European = 0,
  OptionExerciseStyle_enumtype_American = 1
};
XT_COMMON_API bool OptionExerciseStyle_enumtype_IsValid(int value);
const OptionExerciseStyle_enumtype OptionExerciseStyle_enumtype_enumtype_MIN = OptionExerciseStyle_enumtype_European;
const OptionExerciseStyle_enumtype OptionExerciseStyle_enumtype_enumtype_MAX = OptionExerciseStyle_enumtype_American;
const int OptionExerciseStyle_enumtype_enumtype_ARRAYSIZE = OptionExerciseStyle_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OptionExerciseStyle_enumtype_descriptor();
inline const ::std::string& OptionExerciseStyle_enumtype_Name(OptionExerciseStyle_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionExerciseStyle_enumtype_descriptor(), value);
}
inline bool OptionExerciseStyle_enumtype_Parse(
    const ::std::string& name, OptionExerciseStyle_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionExerciseStyle_enumtype>(
    OptionExerciseStyle_enumtype_descriptor(), name, value);
}
enum OptionXType_enumtype {
  OptionXType_enumtype_X = 0,
  OptionXType_enumtype_LogX = 1,
  OptionXType_enumtype_LogXOverT = 2,
  OptionXType_enumtype_Sd = 3
};
XT_COMMON_API bool OptionXType_enumtype_IsValid(int value);
const OptionXType_enumtype OptionXType_enumtype_enumtype_MIN = OptionXType_enumtype_X;
const OptionXType_enumtype OptionXType_enumtype_enumtype_MAX = OptionXType_enumtype_Sd;
const int OptionXType_enumtype_enumtype_ARRAYSIZE = OptionXType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OptionXType_enumtype_descriptor();
inline const ::std::string& OptionXType_enumtype_Name(OptionXType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionXType_enumtype_descriptor(), value);
}
inline bool OptionXType_enumtype_Parse(
    const ::std::string& name, OptionXType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionXType_enumtype>(
    OptionXType_enumtype_descriptor(), name, value);
}
enum OptionCalcType_enumtype {
  OptionCalcType_enumtype_Unknown = 0,
  OptionCalcType_enumtype_S = 6001,
  OptionCalcType_enumtype_X = 6002,
  OptionCalcType_enumtype_T = 6003,
  OptionCalcType_enumtype_r = 6004,
  OptionCalcType_enumtype_b = 6005,
  OptionCalcType_enumtype_sigma = 6006,
  OptionCalcType_enumtype_DTE = 6007,
  OptionCalcType_enumtype_Px = 6008,
  OptionCalcType_enumtype_d1 = 6011,
  OptionCalcType_enumtype_d2 = 6012,
  OptionCalcType_enumtype_nd1 = 6013,
  OptionCalcType_enumtype_nd2 = 6014,
  OptionCalcType_enumtype_pd1 = 6015,
  OptionCalcType_enumtype_pd2 = 6016,
  OptionCalcType_enumtype_Delta = 6021,
  OptionCalcType_enumtype_DdeltaDvol = 6022,
  OptionCalcType_enumtype_DvannaDvol = 6023,
  OptionCalcType_enumtype_DdeltaDtime = 6024,
  OptionCalcType_enumtype_Elasticity = 6025,
  OptionCalcType_enumtype_Gamma = 6031,
  OptionCalcType_enumtype_GammaP = 6032,
  OptionCalcType_enumtype_DgammaDvol = 6033,
  OptionCalcType_enumtype_DgammaPDvol = 6034,
  OptionCalcType_enumtype_DgammaDspot = 6035,
  OptionCalcType_enumtype_DgammaPDspot = 6036,
  OptionCalcType_enumtype_DgammaDtime = 6037,
  OptionCalcType_enumtype_DgammaPDtime = 6038,
  OptionCalcType_enumtype_Vega = 6041,
  OptionCalcType_enumtype_VegaP = 6042,
  OptionCalcType_enumtype_DvegaDvol = 6043,
  OptionCalcType_enumtype_DvegaPDvol = 6044,
  OptionCalcType_enumtype_DvommaDvol = 6045,
  OptionCalcType_enumtype_DvegaDtime = 6046,
  OptionCalcType_enumtype_VarianceVega = 6051,
  OptionCalcType_enumtype_DdeltaDvar = 6052,
  OptionCalcType_enumtype_VarianceVomma = 6053,
  OptionCalcType_enumtype_VarianceUltima = 6054,
  OptionCalcType_enumtype_Theta = 6061,
  OptionCalcType_enumtype_DriftlessTheta = 6062,
  OptionCalcType_enumtype_Rho = 6071,
  OptionCalcType_enumtype_OOFRho = 6072,
  OptionCalcType_enumtype_Phi = 6073,
  OptionCalcType_enumtype_CarryRho = 6074,
  OptionCalcType_enumtype_Zeta = 6081,
  OptionCalcType_enumtype_DzetaDvol = 6082,
  OptionCalcType_enumtype_DzetaDtime = 6083,
  OptionCalcType_enumtype_StrikeDelta = 6091,
  OptionCalcType_enumtype_StrikeGamma = 6092,
  OptionCalcType_enumtype_LocalDelta = 6101,
  OptionCalcType_enumtype_LocalGamma = 6102,
  OptionCalcType_enumtype_LocalVega = 6103,
  OptionCalcType_enumtype_LocalTheta = 6104,
  OptionCalcType_enumtype_LocalRho = 6105,
  OptionCalcType_enumtype_ImpVol = 6201,
  OptionCalcType_enumtype_ImpVolBid = 6202,
  OptionCalcType_enumtype_ImpVolMid = 6203,
  OptionCalcType_enumtype_ImpVolAsk = 6204,
  OptionCalcType_enumtype_AtmFwd = 6211,
  OptionCalcType_enumtype_AtmVol = 6212,
  OptionCalcType_enumtype_SynFwd = 6301,
  OptionCalcType_enumtype_SynFwdBid = 6302,
  OptionCalcType_enumtype_SynFwdAsk = 6303
};
XT_COMMON_API bool OptionCalcType_enumtype_IsValid(int value);
const OptionCalcType_enumtype OptionCalcType_enumtype_enumtype_MIN = OptionCalcType_enumtype_Unknown;
const OptionCalcType_enumtype OptionCalcType_enumtype_enumtype_MAX = OptionCalcType_enumtype_SynFwdAsk;
const int OptionCalcType_enumtype_enumtype_ARRAYSIZE = OptionCalcType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OptionCalcType_enumtype_descriptor();
inline const ::std::string& OptionCalcType_enumtype_Name(OptionCalcType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionCalcType_enumtype_descriptor(), value);
}
inline bool OptionCalcType_enumtype_Parse(
    const ::std::string& name, OptionCalcType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionCalcType_enumtype>(
    OptionCalcType_enumtype_descriptor(), name, value);
}
enum OptionPxMethod_enumtype {
  OptionPxMethod_enumtype_BSM = 0,
  OptionPxMethod_enumtype_BAW = 1,
  OptionPxMethod_enumtype_BS1993American = 2,
  OptionPxMethod_enumtype_BS2002American = 3,
  OptionPxMethod_enumtype_TrinomialTree = 4,
  OptionPxMethod_enumtype_CRRTree = 5,
  OptionPxMethod_enumtype_LRTree = 6,
  OptionPxMethod_enumtype_JRTree = 7,
  OptionPxMethod_enumtype_CNFDM = 8,
  OptionPxMethod_enumtype_ImplicitFDM = 9,
  OptionPxMethod_enumtype_ExplicitFDM = 10
};
XT_COMMON_API bool OptionPxMethod_enumtype_IsValid(int value);
const OptionPxMethod_enumtype OptionPxMethod_enumtype_enumtype_MIN = OptionPxMethod_enumtype_BSM;
const OptionPxMethod_enumtype OptionPxMethod_enumtype_enumtype_MAX = OptionPxMethod_enumtype_ExplicitFDM;
const int OptionPxMethod_enumtype_enumtype_ARRAYSIZE = OptionPxMethod_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OptionPxMethod_enumtype_descriptor();
inline const ::std::string& OptionPxMethod_enumtype_Name(OptionPxMethod_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionPxMethod_enumtype_descriptor(), value);
}
inline bool OptionPxMethod_enumtype_Parse(
    const ::std::string& name, OptionPxMethod_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionPxMethod_enumtype>(
    OptionPxMethod_enumtype_descriptor(), name, value);
}
enum TrdSigType_enumtype {
  TrdSigType_enumtype_Unknown = 0,
  TrdSigType_enumtype_Buy = 1,
  TrdSigType_enumtype_Sell = 2,
  TrdSigType_enumtype_BuyExit = 3,
  TrdSigType_enumtype_SellExit = 4
};
XT_COMMON_API bool TrdSigType_enumtype_IsValid(int value);
const TrdSigType_enumtype TrdSigType_enumtype_enumtype_MIN = TrdSigType_enumtype_Unknown;
const TrdSigType_enumtype TrdSigType_enumtype_enumtype_MAX = TrdSigType_enumtype_SellExit;
const int TrdSigType_enumtype_enumtype_ARRAYSIZE = TrdSigType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TrdSigType_enumtype_descriptor();
inline const ::std::string& TrdSigType_enumtype_Name(TrdSigType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrdSigType_enumtype_descriptor(), value);
}
inline bool TrdSigType_enumtype_Parse(
    const ::std::string& name, TrdSigType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrdSigType_enumtype>(
    TrdSigType_enumtype_descriptor(), name, value);
}
enum TrdStatType_enumtype {
  TrdStatType_enumtype_Unknown = 0,
  TrdStatType_enumtype_On = 1,
  TrdStatType_enumtype_Idle = 2,
  TrdStatType_enumtype_Flat = 3,
  TrdStatType_enumtype_JoinMktToFlat = 4
};
XT_COMMON_API bool TrdStatType_enumtype_IsValid(int value);
const TrdStatType_enumtype TrdStatType_enumtype_enumtype_MIN = TrdStatType_enumtype_Unknown;
const TrdStatType_enumtype TrdStatType_enumtype_enumtype_MAX = TrdStatType_enumtype_JoinMktToFlat;
const int TrdStatType_enumtype_enumtype_ARRAYSIZE = TrdStatType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TrdStatType_enumtype_descriptor();
inline const ::std::string& TrdStatType_enumtype_Name(TrdStatType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrdStatType_enumtype_descriptor(), value);
}
inline bool TrdStatType_enumtype_Parse(
    const ::std::string& name, TrdStatType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrdStatType_enumtype>(
    TrdStatType_enumtype_descriptor(), name, value);
}
enum CrossAboveBelowType_enumtype {
  CrossAboveBelowType_enumtype_Unknown = 0,
  CrossAboveBelowType_enumtype_Above = 1,
  CrossAboveBelowType_enumtype_Below = 2,
  CrossAboveBelowType_enumtype_AboveOverbought = 3,
  CrossAboveBelowType_enumtype_BelowOverbought = 4,
  CrossAboveBelowType_enumtype_AboveOversold = 5,
  CrossAboveBelowType_enumtype_BelowOversold = 6
};
XT_COMMON_API bool CrossAboveBelowType_enumtype_IsValid(int value);
const CrossAboveBelowType_enumtype CrossAboveBelowType_enumtype_enumtype_MIN = CrossAboveBelowType_enumtype_Unknown;
const CrossAboveBelowType_enumtype CrossAboveBelowType_enumtype_enumtype_MAX = CrossAboveBelowType_enumtype_BelowOversold;
const int CrossAboveBelowType_enumtype_enumtype_ARRAYSIZE = CrossAboveBelowType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* CrossAboveBelowType_enumtype_descriptor();
inline const ::std::string& CrossAboveBelowType_enumtype_Name(CrossAboveBelowType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrossAboveBelowType_enumtype_descriptor(), value);
}
inline bool CrossAboveBelowType_enumtype_Parse(
    const ::std::string& name, CrossAboveBelowType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrossAboveBelowType_enumtype>(
    CrossAboveBelowType_enumtype_descriptor(), name, value);
}
enum SecurityType_enumtype {
  SecurityType_enumtype_Unknown = 0,
  SecurityType_enumtype_EUSUPRA = 1,
  SecurityType_enumtype_FAC = 2,
  SecurityType_enumtype_FADN = 3,
  SecurityType_enumtype_PEF = 4,
  SecurityType_enumtype_SUPRA = 5,
  SecurityType_enumtype_CORP = 6,
  SecurityType_enumtype_CPP = 7,
  SecurityType_enumtype_CB = 8,
  SecurityType_enumtype_DUAL = 9,
  SecurityType_enumtype_EUCORP = 10,
  SecurityType_enumtype_EUFRN = 11,
  SecurityType_enumtype_FRN = 12,
  SecurityType_enumtype_XLINKD = 13,
  SecurityType_enumtype_STRUCT = 14,
  SecurityType_enumtype_YANK = 15,
  SecurityType_enumtype_FOR = 16,
  SecurityType_enumtype_FXNDF = 17,
  SecurityType_enumtype_FXSPOT = 18,
  SecurityType_enumtype_FXFWD = 19,
  SecurityType_enumtype_FXSWAP = 20,
  SecurityType_enumtype_CDS = 21,
  SecurityType_enumtype_FUT = 22,
  SecurityType_enumtype_OPT = 23,
  SecurityType_enumtype_OOF = 24,
  SecurityType_enumtype_OOP = 25,
  SecurityType_enumtype_IRS = 26,
  SecurityType_enumtype_OOC = 27,
  SecurityType_enumtype_CS = 28,
  SecurityType_enumtype_PS = 29,
  SecurityType_enumtype_REPO = 30,
  SecurityType_enumtype_FORWARD = 31,
  SecurityType_enumtype_BUYSELL = 32,
  SecurityType_enumtype_SECLOAN = 33,
  SecurityType_enumtype_SECPLEDGE = 34,
  SecurityType_enumtype_BRADY = 35,
  SecurityType_enumtype_CAN = 36,
  SecurityType_enumtype_CTB = 37,
  SecurityType_enumtype_EUSOV = 38,
  SecurityType_enumtype_PROV = 39,
  SecurityType_enumtype_TB = 40,
  SecurityType_enumtype_TBOND = 41,
  SecurityType_enumtype_TINT = 42,
  SecurityType_enumtype_TBILL = 43,
  SecurityType_enumtype_TIPS = 44,
  SecurityType_enumtype_TCAL = 45,
  SecurityType_enumtype_TPRN = 46,
  SecurityType_enumtype_TNOTE = 47,
  SecurityType_enumtype_UST = 48,
  SecurityType_enumtype_USTB = 49,
  SecurityType_enumtype_TERM = 50,
  SecurityType_enumtype_RVLV = 51,
  SecurityType_enumtype_RVLVTRM = 52,
  SecurityType_enumtype_BRIDGE = 53,
  SecurityType_enumtype_LOFC = 54,
  SecurityType_enumtype_SWING = 55,
  SecurityType_enumtype_DINP = 56,
  SecurityType_enumtype_DEFLTED = 57,
  SecurityType_enumtype_WITHDRN = 58,
  SecurityType_enumtype_REPLACD = 59,
  SecurityType_enumtype_MATURED = 60,
  SecurityType_enumtype_AMENDED = 61,
  SecurityType_enumtype_RETIRED = 62,
  SecurityType_enumtype_BA = 63,
  SecurityType_enumtype_BDN = 64,
  SecurityType_enumtype_BN = 65,
  SecurityType_enumtype_BOX = 66,
  SecurityType_enumtype_CAMM = 67,
  SecurityType_enumtype_CD = 68,
  SecurityType_enumtype_CL = 69,
  SecurityType_enumtype_CP = 70,
  SecurityType_enumtype_DN = 71,
  SecurityType_enumtype_EUCD = 72,
  SecurityType_enumtype_EUCP = 73,
  SecurityType_enumtype_LQN = 74,
  SecurityType_enumtype_MTN = 75,
  SecurityType_enumtype_ONITE = 76,
  SecurityType_enumtype_PN = 77,
  SecurityType_enumtype_STN = 78,
  SecurityType_enumtype_PZFJ = 79,
  SecurityType_enumtype_SLQN = 80,
  SecurityType_enumtype_TD = 81,
  SecurityType_enumtype_TLQN = 82,
  SecurityType_enumtype_XCN = 83,
  SecurityType_enumtype_YCD = 84,
  SecurityType_enumtype_ABS = 85,
  SecurityType_enumtype_CMB = 86,
  SecurityType_enumtype_CMBS = 87,
  SecurityType_enumtype_CMO = 88,
  SecurityType_enumtype_IET = 89,
  SecurityType_enumtype_MBS = 90,
  SecurityType_enumtype_MIO = 91,
  SecurityType_enumtype_MPO = 92,
  SecurityType_enumtype_MPP = 93,
  SecurityType_enumtype_MPT = 94,
  SecurityType_enumtype_PFAND = 95,
  SecurityType_enumtype_TBA = 96,
  SecurityType_enumtype_AN = 97,
  SecurityType_enumtype_COFO = 98,
  SecurityType_enumtype_COFP = 99,
  SecurityType_enumtype_GO = 100,
  SecurityType_enumtype_MT = 101,
  SecurityType_enumtype_RAN = 102,
  SecurityType_enumtype_REV = 103,
  SecurityType_enumtype_SPCLA = 104,
  SecurityType_enumtype_SPCLO = 105,
  SecurityType_enumtype_SPCLT = 106,
  SecurityType_enumtype_TAN = 107,
  SecurityType_enumtype_TAXA = 108,
  SecurityType_enumtype_TECP = 109,
  SecurityType_enumtype_TMCP = 110,
  SecurityType_enumtype_TRAN = 111,
  SecurityType_enumtype_VRDN = 112,
  SecurityType_enumtype_WAR = 113,
  SecurityType_enumtype_MF = 114,
  SecurityType_enumtype_MLEG = 115,
  SecurityType_enumtype_Wildcard = 116,
  SecurityType_enumtype_CASH = 117,
  SecurityType_enumtype_INDEX = 118,
  SecurityType_enumtype_ETF = 119
};
XT_COMMON_API bool SecurityType_enumtype_IsValid(int value);
const SecurityType_enumtype SecurityType_enumtype_enumtype_MIN = SecurityType_enumtype_Unknown;
const SecurityType_enumtype SecurityType_enumtype_enumtype_MAX = SecurityType_enumtype_ETF;
const int SecurityType_enumtype_enumtype_ARRAYSIZE = SecurityType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* SecurityType_enumtype_descriptor();
inline const ::std::string& SecurityType_enumtype_Name(SecurityType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    SecurityType_enumtype_descriptor(), value);
}
inline bool SecurityType_enumtype_Parse(
    const ::std::string& name, SecurityType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityType_enumtype>(
    SecurityType_enumtype_descriptor(), name, value);
}
enum TAType_enumtype {
  TAType_enumtype_Unknown = 0,
  TAType_enumtype_AD = 1,
  TAType_enumtype_ADOSC = 2,
  TAType_enumtype_ADX = 3,
  TAType_enumtype_ADXR = 4,
  TAType_enumtype_APO = 5,
  TAType_enumtype_AROON = 6,
  TAType_enumtype_AROONOSC = 7,
  TAType_enumtype_ATR = 8,
  TAType_enumtype_AVGPRICE = 9,
  TAType_enumtype_BBANDS = 10,
  TAType_enumtype_BETA = 11,
  TAType_enumtype_BOP = 12,
  TAType_enumtype_CCI = 13,
  TAType_enumtype_CDL2CROWS = 14,
  TAType_enumtype_CDL3BLACKCROWS = 15,
  TAType_enumtype_CDL3INSIDE = 16,
  TAType_enumtype_CDL3LINESTRIKE = 17,
  TAType_enumtype_CDL3OUTSIDE = 18,
  TAType_enumtype_CDL3STARSINSOUTH = 19,
  TAType_enumtype_CDL3WHITESOLDIERS = 20,
  TAType_enumtype_CDLABANDONEDBABY = 21,
  TAType_enumtype_CDLADVANCEBLOCK = 22,
  TAType_enumtype_CDLBELTHOLD = 23,
  TAType_enumtype_CDLBREAKAWAY = 24,
  TAType_enumtype_CDLCLOSINGMARUBOZU = 25,
  TAType_enumtype_CDLCONCEALBABYSWALL = 26,
  TAType_enumtype_CDLCOUNTERATTACK = 27,
  TAType_enumtype_CDLDARKCLOUDCOVER = 28,
  TAType_enumtype_CDLDOJI = 29,
  TAType_enumtype_CDLDOJISTAR = 30,
  TAType_enumtype_CDLDRAGONFLYDOJI = 31,
  TAType_enumtype_CDLENGULFING = 32,
  TAType_enumtype_CDLEVENINGDOJISTAR = 33,
  TAType_enumtype_CDLEVENINGSTAR = 34,
  TAType_enumtype_CDLGAPSIDESIDEWHITE = 35,
  TAType_enumtype_CDLGRAVESTONEDOJI = 36,
  TAType_enumtype_CDLHAMMER = 37,
  TAType_enumtype_CDLHANGINGMAN = 38,
  TAType_enumtype_CDLHARAMI = 39,
  TAType_enumtype_CDLHARAMICROSS = 40,
  TAType_enumtype_CDLHIGHWAVE = 41,
  TAType_enumtype_CDLHIKKAKE = 42,
  TAType_enumtype_CDLHIKKAKEMOD = 43,
  TAType_enumtype_CDLHOMINGPIGEON = 44,
  TAType_enumtype_CDLIDENTICAL3CROWS = 45,
  TAType_enumtype_CDLINNECK = 46,
  TAType_enumtype_CDLINVERTEDHAMMER = 47,
  TAType_enumtype_CDLKICKING = 48,
  TAType_enumtype_CDLKICKINGBYLENGTH = 49,
  TAType_enumtype_CDLLADDERBOTTOM = 50,
  TAType_enumtype_CDLLONGLEGGEDDOJI = 51,
  TAType_enumtype_CDLLONGLINE = 52,
  TAType_enumtype_CDLMARUBOZU = 53,
  TAType_enumtype_CDLMATCHINGLOW = 54,
  TAType_enumtype_CDLMATHOLD = 55,
  TAType_enumtype_CDLMORNINGDOJISTAR = 56,
  TAType_enumtype_CDLMORNINGSTAR = 57,
  TAType_enumtype_CDLONNECK = 58,
  TAType_enumtype_CDLPIERCING = 59,
  TAType_enumtype_CDLRICKSHAWMAN = 60,
  TAType_enumtype_CDLRISEFALL3METHODS = 61,
  TAType_enumtype_CDLSEPARATINGLINES = 62,
  TAType_enumtype_CDLSHOOTINGSTAR = 63,
  TAType_enumtype_CDLSHORTLINE = 64,
  TAType_enumtype_CDLSPINNINGTOP = 65,
  TAType_enumtype_CDLSTALLEDPATTERN = 66,
  TAType_enumtype_CDLSTICKSANDWICH = 67,
  TAType_enumtype_CDLTAKURI = 68,
  TAType_enumtype_CDLTASUKIGAP = 69,
  TAType_enumtype_CDLTHRUSTING = 70,
  TAType_enumtype_CDLTRISTAR = 71,
  TAType_enumtype_CDLUNIQUE3RIVER = 72,
  TAType_enumtype_CDLUPSIDEGAP2CROWS = 73,
  TAType_enumtype_CDLXSIDEGAP3METHODS = 74,
  TAType_enumtype_CMO = 75,
  TAType_enumtype_CORREL = 76,
  TAType_enumtype_DEMA = 77,
  TAType_enumtype_DX = 78,
  TAType_enumtype_EMA = 79,
  TAType_enumtype_HT_DCPERIOD = 80,
  TAType_enumtype_HT_DCPHASE = 81,
  TAType_enumtype_HT_PHASOR = 82,
  TAType_enumtype_HT_SINE = 83,
  TAType_enumtype_HT_TRENDLINE = 84,
  TAType_enumtype_HT_TRENDMODE = 85,
  TAType_enumtype_KAMA = 86,
  TAType_enumtype_LINEARREG = 87,
  TAType_enumtype_LINEARREG_ANGLE = 88,
  TAType_enumtype_LINEARREG_INTERCEPT = 89,
  TAType_enumtype_LINEARREG_SLOPE = 90,
  TAType_enumtype_MA = 91,
  TAType_enumtype_MACD = 92,
  TAType_enumtype_MACDEXT = 93,
  TAType_enumtype_MACDFIX = 94,
  TAType_enumtype_MAMA = 95,
  TAType_enumtype_MAXVALUE = 96,
  TAType_enumtype_MAXINDEX = 97,
  TAType_enumtype_MEDPRICE = 98,
  TAType_enumtype_MFI = 99,
  TAType_enumtype_MIDPOINT = 100,
  TAType_enumtype_MIDPRICE = 101,
  TAType_enumtype_MINVALUE = 102,
  TAType_enumtype_MININDEX = 103,
  TAType_enumtype_MINMAX = 104,
  TAType_enumtype_MINMAXINDEX = 105,
  TAType_enumtype_MINUS_DI = 106,
  TAType_enumtype_MINUS_DM = 107,
  TAType_enumtype_MOM = 108,
  TAType_enumtype_NATR = 109,
  TAType_enumtype_OBV = 110,
  TAType_enumtype_PLUS_DI = 111,
  TAType_enumtype_PLUS_DM = 112,
  TAType_enumtype_PPO = 113,
  TAType_enumtype_ROC = 114,
  TAType_enumtype_ROCP = 115,
  TAType_enumtype_ROCR = 116,
  TAType_enumtype_ROCR100 = 117,
  TAType_enumtype_RSI = 118,
  TAType_enumtype_SAR = 119,
  TAType_enumtype_SAREXT = 120,
  TAType_enumtype_SMA = 121,
  TAType_enumtype_STDDEV = 122,
  TAType_enumtype_STOCH = 123,
  TAType_enumtype_STOCHF = 124,
  TAType_enumtype_STOCHRSI = 125,
  TAType_enumtype_SUM = 126,
  TAType_enumtype_T3 = 127,
  TAType_enumtype_TEMA = 128,
  TAType_enumtype_TRANGE = 129,
  TAType_enumtype_TRIMA = 130,
  TAType_enumtype_TRIX = 131,
  TAType_enumtype_TSF = 132,
  TAType_enumtype_TYPPRICE = 133,
  TAType_enumtype_ULTOSC = 134,
  TAType_enumtype_VAR = 135,
  TAType_enumtype_WCLPRICE = 136,
  TAType_enumtype_WILLR = 137,
  TAType_enumtype_WMA = 138,
  TAType_enumtype_DMI = 139
};
XT_COMMON_API bool TAType_enumtype_IsValid(int value);
const TAType_enumtype TAType_enumtype_enumtype_MIN = TAType_enumtype_Unknown;
const TAType_enumtype TAType_enumtype_enumtype_MAX = TAType_enumtype_DMI;
const int TAType_enumtype_enumtype_ARRAYSIZE = TAType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TAType_enumtype_descriptor();
inline const ::std::string& TAType_enumtype_Name(TAType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TAType_enumtype_descriptor(), value);
}
inline bool TAType_enumtype_Parse(
    const ::std::string& name, TAType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAType_enumtype>(
    TAType_enumtype_descriptor(), name, value);
}
enum TARetCode_enumtype {
  TARetCode_enumtype_SUCCESS = 0,
  TARetCode_enumtype_LIB_NOT_INITIALIZE = 1,
  TARetCode_enumtype_BAD_PARAM = 2,
  TARetCode_enumtype_ALLOC_ERR = 3,
  TARetCode_enumtype_GROUP_NOT_FOUND = 4,
  TARetCode_enumtype_FUNC_NOT_FOUND = 5,
  TARetCode_enumtype_INVALID_HANDLE = 6,
  TARetCode_enumtype_INVALID_PARAM_HOLDER = 7,
  TARetCode_enumtype_INVALID_PARAM_HOLDER_TYPE = 8,
  TARetCode_enumtype_INVALID_PARAM_FUNCTION = 9,
  TARetCode_enumtype_INPUT_NOT_ALL_INITIALIZE = 10,
  TARetCode_enumtype_OUTPUT_NOT_ALL_INITIALIZE = 11,
  TARetCode_enumtype_OUT_OF_RANGE_START_INDEX = 12,
  TARetCode_enumtype_OUT_OF_RANGE_END_INDEX = 13,
  TARetCode_enumtype_INVALID_LIST_TYPE = 14,
  TARetCode_enumtype_BAD_OBJECT = 15,
  TARetCode_enumtype_NOT_SUPPORTED = 16,
  TARetCode_enumtype_INTERNAL_ERROR = 5000,
  TARetCode_enumtype_UNKNOWN_ERR = 65535
};
XT_COMMON_API bool TARetCode_enumtype_IsValid(int value);
const TARetCode_enumtype TARetCode_enumtype_enumtype_MIN = TARetCode_enumtype_SUCCESS;
const TARetCode_enumtype TARetCode_enumtype_enumtype_MAX = TARetCode_enumtype_UNKNOWN_ERR;
const int TARetCode_enumtype_enumtype_ARRAYSIZE = TARetCode_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TARetCode_enumtype_descriptor();
inline const ::std::string& TARetCode_enumtype_Name(TARetCode_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TARetCode_enumtype_descriptor(), value);
}
inline bool TARetCode_enumtype_Parse(
    const ::std::string& name, TARetCode_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TARetCode_enumtype>(
    TARetCode_enumtype_descriptor(), name, value);
}
enum TAMAType_enumtype {
  TAMAType_enumtype_SMA = 0,
  TAMAType_enumtype_EMA = 1,
  TAMAType_enumtype_WMA = 2,
  TAMAType_enumtype_DEMA = 3,
  TAMAType_enumtype_TEMA = 4,
  TAMAType_enumtype_TRIMA = 5,
  TAMAType_enumtype_KAMA = 6,
  TAMAType_enumtype_MAMA = 7,
  TAMAType_enumtype_T3 = 8
};
XT_COMMON_API bool TAMAType_enumtype_IsValid(int value);
const TAMAType_enumtype TAMAType_enumtype_enumtype_MIN = TAMAType_enumtype_SMA;
const TAMAType_enumtype TAMAType_enumtype_enumtype_MAX = TAMAType_enumtype_T3;
const int TAMAType_enumtype_enumtype_ARRAYSIZE = TAMAType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TAMAType_enumtype_descriptor();
inline const ::std::string& TAMAType_enumtype_Name(TAMAType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TAMAType_enumtype_descriptor(), value);
}
inline bool TAMAType_enumtype_Parse(
    const ::std::string& name, TAMAType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAMAType_enumtype>(
    TAMAType_enumtype_descriptor(), name, value);
}
enum TAFuncUnstId_enumtype {
  TAFuncUnstId_enumtype_FUNC_UNST_NONE = -1,
  TAFuncUnstId_enumtype_FUNC_UNST_ADX = 0,
  TAFuncUnstId_enumtype_FUNC_UNST_ADXR = 1,
  TAFuncUnstId_enumtype_FUNC_UNST_ATR = 2,
  TAFuncUnstId_enumtype_FUNC_UNST_CMO = 3,
  TAFuncUnstId_enumtype_FUNC_UNST_DX = 4,
  TAFuncUnstId_enumtype_FUNC_UNST_EMA = 5,
  TAFuncUnstId_enumtype_FUNC_UNST_HT_DCPERIOD = 6,
  TAFuncUnstId_enumtype_FUNC_UNST_HT_DCPHASE = 7,
  TAFuncUnstId_enumtype_FUNC_UNST_HT_PHASOR = 8,
  TAFuncUnstId_enumtype_FUNC_UNST_HT_SINE = 9,
  TAFuncUnstId_enumtype_FUNC_UNST_HT_TRENDLINE = 10,
  TAFuncUnstId_enumtype_FUNC_UNST_HT_TRENDMODE = 11,
  TAFuncUnstId_enumtype_FUNC_UNST_KAMA = 12,
  TAFuncUnstId_enumtype_FUNC_UNST_MAMA = 13,
  TAFuncUnstId_enumtype_FUNC_UNST_MFI = 14,
  TAFuncUnstId_enumtype_FUNC_UNST_MINUS_DI = 15,
  TAFuncUnstId_enumtype_FUNC_UNST_MINUS_DM = 16,
  TAFuncUnstId_enumtype_FUNC_UNST_NATR = 17,
  TAFuncUnstId_enumtype_FUNC_UNST_PLUS_DI = 18,
  TAFuncUnstId_enumtype_FUNC_UNST_PLUS_DM = 19,
  TAFuncUnstId_enumtype_FUNC_UNST_RSI = 20,
  TAFuncUnstId_enumtype_FUNC_UNST_STOCHRSI = 21,
  TAFuncUnstId_enumtype_FUNC_UNST_T3 = 22,
  TAFuncUnstId_enumtype_FUNC_UNST_ALL = 23
};
XT_COMMON_API bool TAFuncUnstId_enumtype_IsValid(int value);
const TAFuncUnstId_enumtype TAFuncUnstId_enumtype_enumtype_MIN = TAFuncUnstId_enumtype_FUNC_UNST_NONE;
const TAFuncUnstId_enumtype TAFuncUnstId_enumtype_enumtype_MAX = TAFuncUnstId_enumtype_FUNC_UNST_ALL;
const int TAFuncUnstId_enumtype_enumtype_ARRAYSIZE = TAFuncUnstId_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TAFuncUnstId_enumtype_descriptor();
inline const ::std::string& TAFuncUnstId_enumtype_Name(TAFuncUnstId_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TAFuncUnstId_enumtype_descriptor(), value);
}
inline bool TAFuncUnstId_enumtype_Parse(
    const ::std::string& name, TAFuncUnstId_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAFuncUnstId_enumtype>(
    TAFuncUnstId_enumtype_descriptor(), name, value);
}
enum TARangeType_enumtype {
  TARangeType_enumtype_RealBody = 0,
  TARangeType_enumtype_HighLow = 1,
  TARangeType_enumtype_Shadows = 2
};
XT_COMMON_API bool TARangeType_enumtype_IsValid(int value);
const TARangeType_enumtype TARangeType_enumtype_enumtype_MIN = TARangeType_enumtype_RealBody;
const TARangeType_enumtype TARangeType_enumtype_enumtype_MAX = TARangeType_enumtype_Shadows;
const int TARangeType_enumtype_enumtype_ARRAYSIZE = TARangeType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TARangeType_enumtype_descriptor();
inline const ::std::string& TARangeType_enumtype_Name(TARangeType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TARangeType_enumtype_descriptor(), value);
}
inline bool TARangeType_enumtype_Parse(
    const ::std::string& name, TARangeType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TARangeType_enumtype>(
    TARangeType_enumtype_descriptor(), name, value);
}
enum TACandleSettingType_enumtype {
  TACandleSettingType_enumtype_BodyLong = 0,
  TACandleSettingType_enumtype_BodyVeryLong = 1,
  TACandleSettingType_enumtype_BodyShort = 2,
  TACandleSettingType_enumtype_BodyDoji = 3,
  TACandleSettingType_enumtype_ShadowLong = 4,
  TACandleSettingType_enumtype_ShadowVeryLong = 5,
  TACandleSettingType_enumtype_ShadowShort = 6,
  TACandleSettingType_enumtype_ShadowVeryShort = 7,
  TACandleSettingType_enumtype_Near = 8,
  TACandleSettingType_enumtype_Far = 9,
  TACandleSettingType_enumtype_Equal = 10,
  TACandleSettingType_enumtype_AllCandleSettings = 11
};
XT_COMMON_API bool TACandleSettingType_enumtype_IsValid(int value);
const TACandleSettingType_enumtype TACandleSettingType_enumtype_enumtype_MIN = TACandleSettingType_enumtype_BodyLong;
const TACandleSettingType_enumtype TACandleSettingType_enumtype_enumtype_MAX = TACandleSettingType_enumtype_AllCandleSettings;
const int TACandleSettingType_enumtype_enumtype_ARRAYSIZE = TACandleSettingType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TACandleSettingType_enumtype_descriptor();
inline const ::std::string& TACandleSettingType_enumtype_Name(TACandleSettingType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TACandleSettingType_enumtype_descriptor(), value);
}
inline bool TACandleSettingType_enumtype_Parse(
    const ::std::string& name, TACandleSettingType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TACandleSettingType_enumtype>(
    TACandleSettingType_enumtype_descriptor(), name, value);
}
enum DateTimeType_enumtype {
  DateTimeType_enumtype_UTS = 0,
  DateTimeType_enumtype_NET = 1
};
XT_COMMON_API bool DateTimeType_enumtype_IsValid(int value);
const DateTimeType_enumtype DateTimeType_enumtype_enumtype_MIN = DateTimeType_enumtype_UTS;
const DateTimeType_enumtype DateTimeType_enumtype_enumtype_MAX = DateTimeType_enumtype_NET;
const int DateTimeType_enumtype_enumtype_ARRAYSIZE = DateTimeType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* DateTimeType_enumtype_descriptor();
inline const ::std::string& DateTimeType_enumtype_Name(DateTimeType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeType_enumtype_descriptor(), value);
}
inline bool DateTimeType_enumtype_Parse(
    const ::std::string& name, DateTimeType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeType_enumtype>(
    DateTimeType_enumtype_descriptor(), name, value);
}
enum DataType_enumtype {
  DataType_enumtype_String = 0,
  DataType_enumtype_Int32 = 1,
  DataType_enumtype_Int64 = 2,
  DataType_enumtype_Double = 3
};
XT_COMMON_API bool DataType_enumtype_IsValid(int value);
const DataType_enumtype DataType_enumtype_enumtype_MIN = DataType_enumtype_String;
const DataType_enumtype DataType_enumtype_enumtype_MAX = DataType_enumtype_Double;
const int DataType_enumtype_enumtype_ARRAYSIZE = DataType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* DataType_enumtype_descriptor();
inline const ::std::string& DataType_enumtype_Name(DataType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_enumtype_descriptor(), value);
}
inline bool DataType_enumtype_Parse(
    const ::std::string& name, DataType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType_enumtype>(
    DataType_enumtype_descriptor(), name, value);
}
enum OpenCloseFlag_enumtype {
  OpenCloseFlag_enumtype_Unknown = 0,
  OpenCloseFlag_enumtype_Open = 1,
  OpenCloseFlag_enumtype_Close = 2,
  OpenCloseFlag_enumtype_ForceClose = 3,
  OpenCloseFlag_enumtype_CloseToday = 4,
  OpenCloseFlag_enumtype_CloseYesterday = 5,
  OpenCloseFlag_enumtype_ForceOff = 6,
  OpenCloseFlag_enumtype_LocalForceClose = 7,
  OpenCloseFlag_enumtype_OpenToday = 8,
  OpenCloseFlag_enumtype_OpenYesterday = 9
};
XT_COMMON_API bool OpenCloseFlag_enumtype_IsValid(int value);
const OpenCloseFlag_enumtype OpenCloseFlag_enumtype_enumtype_MIN = OpenCloseFlag_enumtype_Unknown;
const OpenCloseFlag_enumtype OpenCloseFlag_enumtype_enumtype_MAX = OpenCloseFlag_enumtype_OpenYesterday;
const int OpenCloseFlag_enumtype_enumtype_ARRAYSIZE = OpenCloseFlag_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OpenCloseFlag_enumtype_descriptor();
inline const ::std::string& OpenCloseFlag_enumtype_Name(OpenCloseFlag_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenCloseFlag_enumtype_descriptor(), value);
}
inline bool OpenCloseFlag_enumtype_Parse(
    const ::std::string& name, OpenCloseFlag_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenCloseFlag_enumtype>(
    OpenCloseFlag_enumtype_descriptor(), name, value);
}
enum OCFlagAutoType_enumtype {
  OCFlagAutoType_enumtype_Unknown = 0,
  OCFlagAutoType_enumtype_YtdOnly = 1,
  OCFlagAutoType_enumtype_TdyOnly = 2
};
XT_COMMON_API bool OCFlagAutoType_enumtype_IsValid(int value);
const OCFlagAutoType_enumtype OCFlagAutoType_enumtype_enumtype_MIN = OCFlagAutoType_enumtype_Unknown;
const OCFlagAutoType_enumtype OCFlagAutoType_enumtype_enumtype_MAX = OCFlagAutoType_enumtype_TdyOnly;
const int OCFlagAutoType_enumtype_enumtype_ARRAYSIZE = OCFlagAutoType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OCFlagAutoType_enumtype_descriptor();
inline const ::std::string& OCFlagAutoType_enumtype_Name(OCFlagAutoType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OCFlagAutoType_enumtype_descriptor(), value);
}
inline bool OCFlagAutoType_enumtype_Parse(
    const ::std::string& name, OCFlagAutoType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OCFlagAutoType_enumtype>(
    OCFlagAutoType_enumtype_descriptor(), name, value);
}
enum MktDataChgType_enumtype {
  MktDataChgType_enumtype_Unknown = 0,
  MktDataChgType_enumtype_BestPxChged = 1,
  MktDataChgType_enumtype_BestSzChged = 2
};
XT_COMMON_API bool MktDataChgType_enumtype_IsValid(int value);
const MktDataChgType_enumtype MktDataChgType_enumtype_enumtype_MIN = MktDataChgType_enumtype_Unknown;
const MktDataChgType_enumtype MktDataChgType_enumtype_enumtype_MAX = MktDataChgType_enumtype_BestSzChged;
const int MktDataChgType_enumtype_enumtype_ARRAYSIZE = MktDataChgType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MktDataChgType_enumtype_descriptor();
inline const ::std::string& MktDataChgType_enumtype_Name(MktDataChgType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MktDataChgType_enumtype_descriptor(), value);
}
inline bool MktDataChgType_enumtype_Parse(
    const ::std::string& name, MktDataChgType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MktDataChgType_enumtype>(
    MktDataChgType_enumtype_descriptor(), name, value);
}
enum InstrEventType_enumtype {
  InstrEventType_enumtype_Unknown = 0,
  InstrEventType_enumtype_MktPxChged = 1,
  InstrEventType_enumtype_MktSzChged = 2,
  InstrEventType_enumtype_OptMktChged = 4,
  InstrEventType_enumtype_OrderSent = 8,
  InstrEventType_enumtype_OrderSentRejected = 16,
  InstrEventType_enumtype_OrderCnf = 32,
  InstrEventType_enumtype_OrderCxlSent = 64,
  InstrEventType_enumtype_OrderCxlRejected = 128,
  InstrEventType_enumtype_OrderCxled = 256,
  InstrEventType_enumtype_OrderFilled = 512,
  InstrEventType_enumtype_OrderAllFilled = 1024,
  InstrEventType_enumtype_NewBar = 2048,
  InstrEventType_enumtype_Timer = 4096,
  InstrEventType_enumtype_Session = 8192
};
XT_COMMON_API bool InstrEventType_enumtype_IsValid(int value);
const InstrEventType_enumtype InstrEventType_enumtype_enumtype_MIN = InstrEventType_enumtype_Unknown;
const InstrEventType_enumtype InstrEventType_enumtype_enumtype_MAX = InstrEventType_enumtype_Session;
const int InstrEventType_enumtype_enumtype_ARRAYSIZE = InstrEventType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* InstrEventType_enumtype_descriptor();
inline const ::std::string& InstrEventType_enumtype_Name(InstrEventType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstrEventType_enumtype_descriptor(), value);
}
inline bool InstrEventType_enumtype_Parse(
    const ::std::string& name, InstrEventType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstrEventType_enumtype>(
    InstrEventType_enumtype_descriptor(), name, value);
}
enum OrderQuoteStatus_enumtype {
  OrderQuoteStatus_enumtype_Unknown = 0,
  OrderQuoteStatus_enumtype_Sent = 1,
  OrderQuoteStatus_enumtype_SentRejected = 2,
  OrderQuoteStatus_enumtype_Cnf = 4,
  OrderQuoteStatus_enumtype_CxlSent = 8,
  OrderQuoteStatus_enumtype_CxlRejected = 16,
  OrderQuoteStatus_enumtype_Cxled = 32,
  OrderQuoteStatus_enumtype_PartialFilled = 64,
  OrderQuoteStatus_enumtype_AllFilled = 128,
  OrderQuoteStatus_enumtype_Finished = 256,
  OrderQuoteStatus_enumtype_IsQuote = 512
};
XT_COMMON_API bool OrderQuoteStatus_enumtype_IsValid(int value);
const OrderQuoteStatus_enumtype OrderQuoteStatus_enumtype_enumtype_MIN = OrderQuoteStatus_enumtype_Unknown;
const OrderQuoteStatus_enumtype OrderQuoteStatus_enumtype_enumtype_MAX = OrderQuoteStatus_enumtype_IsQuote;
const int OrderQuoteStatus_enumtype_enumtype_ARRAYSIZE = OrderQuoteStatus_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OrderQuoteStatus_enumtype_descriptor();
inline const ::std::string& OrderQuoteStatus_enumtype_Name(OrderQuoteStatus_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderQuoteStatus_enumtype_descriptor(), value);
}
inline bool OrderQuoteStatus_enumtype_Parse(
    const ::std::string& name, OrderQuoteStatus_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderQuoteStatus_enumtype>(
    OrderQuoteStatus_enumtype_descriptor(), name, value);
}
enum OrderQuoteTsType_enumtype {
  OrderQuoteTsType_enumtype_TsNone = 0,
  OrderQuoteTsType_enumtype_TsSent = 1,
  OrderQuoteTsType_enumtype_TsSentRejected = 2,
  OrderQuoteTsType_enumtype_TsCnf = 4,
  OrderQuoteTsType_enumtype_TsCxlSent = 8,
  OrderQuoteTsType_enumtype_TsCxlRejected = 16,
  OrderQuoteTsType_enumtype_TsFinished = 32
};
XT_COMMON_API bool OrderQuoteTsType_enumtype_IsValid(int value);
const OrderQuoteTsType_enumtype OrderQuoteTsType_enumtype_enumtype_MIN = OrderQuoteTsType_enumtype_TsNone;
const OrderQuoteTsType_enumtype OrderQuoteTsType_enumtype_enumtype_MAX = OrderQuoteTsType_enumtype_TsFinished;
const int OrderQuoteTsType_enumtype_enumtype_ARRAYSIZE = OrderQuoteTsType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OrderQuoteTsType_enumtype_descriptor();
inline const ::std::string& OrderQuoteTsType_enumtype_Name(OrderQuoteTsType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderQuoteTsType_enumtype_descriptor(), value);
}
inline bool OrderQuoteTsType_enumtype_Parse(
    const ::std::string& name, OrderQuoteTsType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderQuoteTsType_enumtype>(
    OrderQuoteTsType_enumtype_descriptor(), name, value);
}
enum OrderQuoteReasonType_enumtype {
  OrderQuoteReasonType_enumtype_Unknown = 0,
  OrderQuoteReasonType_enumtype_BuyOpen = 1,
  OrderQuoteReasonType_enumtype_SellOpen = 2,
  OrderQuoteReasonType_enumtype_BuyClose = 4,
  OrderQuoteReasonType_enumtype_SellClose = 8,
  OrderQuoteReasonType_enumtype_Entry = 16,
  OrderQuoteReasonType_enumtype_ProfitTaking = 32,
  OrderQuoteReasonType_enumtype_Puke = 64,
  OrderQuoteReasonType_enumtype_Rsp = 128
};
XT_COMMON_API bool OrderQuoteReasonType_enumtype_IsValid(int value);
const OrderQuoteReasonType_enumtype OrderQuoteReasonType_enumtype_enumtype_MIN = OrderQuoteReasonType_enumtype_Unknown;
const OrderQuoteReasonType_enumtype OrderQuoteReasonType_enumtype_enumtype_MAX = OrderQuoteReasonType_enumtype_Rsp;
const int OrderQuoteReasonType_enumtype_enumtype_ARRAYSIZE = OrderQuoteReasonType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* OrderQuoteReasonType_enumtype_descriptor();
inline const ::std::string& OrderQuoteReasonType_enumtype_Name(OrderQuoteReasonType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderQuoteReasonType_enumtype_descriptor(), value);
}
inline bool OrderQuoteReasonType_enumtype_Parse(
    const ::std::string& name, OrderQuoteReasonType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderQuoteReasonType_enumtype>(
    OrderQuoteReasonType_enumtype_descriptor(), name, value);
}
enum CurrPrevTempType_enumtype {
  CurrPrevTempType_enumtype_Curr = 0,
  CurrPrevTempType_enumtype_Prev = 1,
  CurrPrevTempType_enumtype_Temp = 2
};
XT_COMMON_API bool CurrPrevTempType_enumtype_IsValid(int value);
const CurrPrevTempType_enumtype CurrPrevTempType_enumtype_enumtype_MIN = CurrPrevTempType_enumtype_Curr;
const CurrPrevTempType_enumtype CurrPrevTempType_enumtype_enumtype_MAX = CurrPrevTempType_enumtype_Temp;
const int CurrPrevTempType_enumtype_enumtype_ARRAYSIZE = CurrPrevTempType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* CurrPrevTempType_enumtype_descriptor();
inline const ::std::string& CurrPrevTempType_enumtype_Name(CurrPrevTempType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurrPrevTempType_enumtype_descriptor(), value);
}
inline bool CurrPrevTempType_enumtype_Parse(
    const ::std::string& name, CurrPrevTempType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurrPrevTempType_enumtype>(
    CurrPrevTempType_enumtype_descriptor(), name, value);
}
enum VolCurveParamType_enumtype {
  VolCurveParamType_enumtype_AtmVolRef = 0,
  VolCurveParamType_enumtype_SlopeRef = 1,
  VolCurveParamType_enumtype_PutCurv = 2,
  VolCurveParamType_enumtype_CallCurv = 3,
  VolCurveParamType_enumtype_SSR = 4,
  VolCurveParamType_enumtype_VCR = 5,
  VolCurveParamType_enumtype_SCR = 6,
  VolCurveParamType_enumtype_DownCut = 7,
  VolCurveParamType_enumtype_DownSm = 8,
  VolCurveParamType_enumtype_UpCut = 9,
  VolCurveParamType_enumtype_UpSm = 10,
  VolCurveParamType_enumtype_PriceCurr = 11,
  VolCurveParamType_enumtype_PriceRef = 12,
  VolCurveParamType_enumtype_T = 13,
  VolCurveParamType_enumtype_r = 14,
  VolCurveParamType_enumtype_b = 15
};
XT_COMMON_API bool VolCurveParamType_enumtype_IsValid(int value);
const VolCurveParamType_enumtype VolCurveParamType_enumtype_enumtype_MIN = VolCurveParamType_enumtype_AtmVolRef;
const VolCurveParamType_enumtype VolCurveParamType_enumtype_enumtype_MAX = VolCurveParamType_enumtype_b;
const int VolCurveParamType_enumtype_enumtype_ARRAYSIZE = VolCurveParamType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* VolCurveParamType_enumtype_descriptor();
inline const ::std::string& VolCurveParamType_enumtype_Name(VolCurveParamType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    VolCurveParamType_enumtype_descriptor(), value);
}
inline bool VolCurveParamType_enumtype_Parse(
    const ::std::string& name, VolCurveParamType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VolCurveParamType_enumtype>(
    VolCurveParamType_enumtype_descriptor(), name, value);
}
enum PyAT_OrderAction_enumtype {
  PyAT_OrderAction_enumtype_Unknown = 0,
  PyAT_OrderAction_enumtype_BUY = 1,
  PyAT_OrderAction_enumtype_BUY_TO_COVER = 2,
  PyAT_OrderAction_enumtype_SELL = 3,
  PyAT_OrderAction_enumtype_SELL_SHORT = 4
};
XT_COMMON_API bool PyAT_OrderAction_enumtype_IsValid(int value);
const PyAT_OrderAction_enumtype PyAT_OrderAction_enumtype_enumtype_MIN = PyAT_OrderAction_enumtype_Unknown;
const PyAT_OrderAction_enumtype PyAT_OrderAction_enumtype_enumtype_MAX = PyAT_OrderAction_enumtype_SELL_SHORT;
const int PyAT_OrderAction_enumtype_enumtype_ARRAYSIZE = PyAT_OrderAction_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* PyAT_OrderAction_enumtype_descriptor();
inline const ::std::string& PyAT_OrderAction_enumtype_Name(PyAT_OrderAction_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    PyAT_OrderAction_enumtype_descriptor(), value);
}
inline bool PyAT_OrderAction_enumtype_Parse(
    const ::std::string& name, PyAT_OrderAction_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PyAT_OrderAction_enumtype>(
    PyAT_OrderAction_enumtype_descriptor(), name, value);
}
enum PyAT_OrderState_enumtype {
  PyAT_OrderState_enumtype_Unknown = 0,
  PyAT_OrderState_enumtype_INITIAL = 1,
  PyAT_OrderState_enumtype_SUBMITTED = 2,
  PyAT_OrderState_enumtype_ACCEPTED = 3,
  PyAT_OrderState_enumtype_CANCELED = 4,
  PyAT_OrderState_enumtype_PARTIALLY_FILLED = 5,
  PyAT_OrderState_enumtype_FILLED = 6
};
XT_COMMON_API bool PyAT_OrderState_enumtype_IsValid(int value);
const PyAT_OrderState_enumtype PyAT_OrderState_enumtype_enumtype_MIN = PyAT_OrderState_enumtype_Unknown;
const PyAT_OrderState_enumtype PyAT_OrderState_enumtype_enumtype_MAX = PyAT_OrderState_enumtype_FILLED;
const int PyAT_OrderState_enumtype_enumtype_ARRAYSIZE = PyAT_OrderState_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* PyAT_OrderState_enumtype_descriptor();
inline const ::std::string& PyAT_OrderState_enumtype_Name(PyAT_OrderState_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    PyAT_OrderState_enumtype_descriptor(), value);
}
inline bool PyAT_OrderState_enumtype_Parse(
    const ::std::string& name, PyAT_OrderState_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PyAT_OrderState_enumtype>(
    PyAT_OrderState_enumtype_descriptor(), name, value);
}
enum PyAT_OrderType_enumtype {
  PyAT_OrderType_enumtype_Unknown = 0,
  PyAT_OrderType_enumtype_MARKET = 1,
  PyAT_OrderType_enumtype_LIMIT = 2,
  PyAT_OrderType_enumtype_STOP = 3,
  PyAT_OrderType_enumtype_STOP_LIMIT = 4,
  PyAT_OrderType_enumtype_NEXT_CUSTOM_TYPE = 1000
};
XT_COMMON_API bool PyAT_OrderType_enumtype_IsValid(int value);
const PyAT_OrderType_enumtype PyAT_OrderType_enumtype_enumtype_MIN = PyAT_OrderType_enumtype_Unknown;
const PyAT_OrderType_enumtype PyAT_OrderType_enumtype_enumtype_MAX = PyAT_OrderType_enumtype_NEXT_CUSTOM_TYPE;
const int PyAT_OrderType_enumtype_enumtype_ARRAYSIZE = PyAT_OrderType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* PyAT_OrderType_enumtype_descriptor();
inline const ::std::string& PyAT_OrderType_enumtype_Name(PyAT_OrderType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    PyAT_OrderType_enumtype_descriptor(), value);
}
inline bool PyAT_OrderType_enumtype_Parse(
    const ::std::string& name, PyAT_OrderType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PyAT_OrderType_enumtype>(
    PyAT_OrderType_enumtype_descriptor(), name, value);
}
enum TagType_enumtype {
  TagType_enumtype_Unknown = 0,
  TagType_enumtype_Account = 1,
  TagType_enumtype_AdvId = 2,
  TagType_enumtype_AdvRefID = 3,
  TagType_enumtype_AdvSide = 4,
  TagType_enumtype_AdvTransType = 5,
  TagType_enumtype_AvgPx = 6,
  TagType_enumtype_BeginSeqNo = 7,
  TagType_enumtype_BeginString = 8,
  TagType_enumtype_BodyLength = 9,
  TagType_enumtype_CheckSum = 10,
  TagType_enumtype_ClOrdID = 11,
  TagType_enumtype_Commission = 12,
  TagType_enumtype_CommType = 13,
  TagType_enumtype_CumQty = 14,
  TagType_enumtype_Currency = 15,
  TagType_enumtype_EndSeqNo = 16,
  TagType_enumtype_ExecID = 17,
  TagType_enumtype_ExecInst = 18,
  TagType_enumtype_ExecRefID = 19,
  TagType_enumtype_HandlInst = 21,
  TagType_enumtype_SecurityIDSource = 22,
  TagType_enumtype_IOIID = 23,
  TagType_enumtype_IOIQltyInd = 25,
  TagType_enumtype_IOIRefID = 26,
  TagType_enumtype_IOIQty = 27,
  TagType_enumtype_IOITransType = 28,
  TagType_enumtype_LastCapacity = 29,
  TagType_enumtype_LastMkt = 30,
  TagType_enumtype_LastPx = 31,
  TagType_enumtype_LastQty = 32,
  TagType_enumtype_NoLinesOfText = 33,
  TagType_enumtype_MsgSeqNum = 34,
  TagType_enumtype_MsgType = 35,
  TagType_enumtype_NewSeqNo = 36,
  TagType_enumtype_OrderID = 37,
  TagType_enumtype_OrderQty = 38,
  TagType_enumtype_OrdStatus = 39,
  TagType_enumtype_OrdType = 40,
  TagType_enumtype_OrigClOrdID = 41,
  TagType_enumtype_OrigTime = 42,
  TagType_enumtype_PossDupFlag = 43,
  TagType_enumtype_Price = 44,
  TagType_enumtype_RefSeqNum = 45,
  TagType_enumtype_SecurityID = 48,
  TagType_enumtype_SenderCompID = 49,
  TagType_enumtype_SenderSubID = 50,
  TagType_enumtype_SendingTime = 52,
  TagType_enumtype_Quantity = 53,
  TagType_enumtype_Side = 54,
  TagType_enumtype_Symbol = 55,
  TagType_enumtype_TargetCompID = 56,
  TagType_enumtype_TargetSubID = 57,
  TagType_enumtype_Text = 58,
  TagType_enumtype_TimeInForce = 59,
  TagType_enumtype_TransactTime = 60,
  TagType_enumtype_Urgency = 61,
  TagType_enumtype_ValidUntilTime = 62,
  TagType_enumtype_SettlType = 63,
  TagType_enumtype_SettlDate = 64,
  TagType_enumtype_SymbolSfx = 65,
  TagType_enumtype_ListID = 66,
  TagType_enumtype_ListSeqNo = 67,
  TagType_enumtype_TotNoOrders = 68,
  TagType_enumtype_ListExecInst = 69,
  TagType_enumtype_AllocID = 70,
  TagType_enumtype_AllocTransType = 71,
  TagType_enumtype_RefAllocID = 72,
  TagType_enumtype_NoOrders = 73,
  TagType_enumtype_AvgPxPrecision = 74,
  TagType_enumtype_TradeDate = 75,
  TagType_enumtype_PositionEffect = 77,
  TagType_enumtype_NoAllocs = 78,
  TagType_enumtype_AllocAccount = 79,
  TagType_enumtype_AllocQty = 80,
  TagType_enumtype_ProcessCode = 81,
  TagType_enumtype_NoRpts = 82,
  TagType_enumtype_RptSeq = 83,
  TagType_enumtype_CxlQty = 84,
  TagType_enumtype_NoDlvyInst = 85,
  TagType_enumtype_AllocStatus = 87,
  TagType_enumtype_AllocRejCode = 88,
  TagType_enumtype_Signature = 89,
  TagType_enumtype_SecureDataLen = 90,
  TagType_enumtype_SecureData = 91,
  TagType_enumtype_SignatureLength = 93,
  TagType_enumtype_EmailType = 94,
  TagType_enumtype_RawDataLength = 95,
  TagType_enumtype_RawData = 96,
  TagType_enumtype_PossResend = 97,
  TagType_enumtype_EncryptMethod = 98,
  TagType_enumtype_StopPx = 99,
  TagType_enumtype_ExDestination = 100,
  TagType_enumtype_CxlRejReason = 102,
  TagType_enumtype_OrdRejReason = 103,
  TagType_enumtype_IOIQualifier = 104,
  TagType_enumtype_Issuer = 106,
  TagType_enumtype_SecurityDesc = 107,
  TagType_enumtype_HeartBtInt = 108,
  TagType_enumtype_MinQty = 110,
  TagType_enumtype_MaxFloor = 111,
  TagType_enumtype_TestReqID = 112,
  TagType_enumtype_ReportToExch = 113,
  TagType_enumtype_LocateReqd = 114,
  TagType_enumtype_OnBehalfOfCompID = 115,
  TagType_enumtype_OnBehalfOfSubID = 116,
  TagType_enumtype_QuoteID = 117,
  TagType_enumtype_NetMoney = 118,
  TagType_enumtype_SettlCurrAmt = 119,
  TagType_enumtype_SettlCurrency = 120,
  TagType_enumtype_ForexReq = 121,
  TagType_enumtype_OrigSendingTime = 122,
  TagType_enumtype_GapFillFlag = 123,
  TagType_enumtype_NoExecs = 124,
  TagType_enumtype_ExpireTime = 126,
  TagType_enumtype_DKReason = 127,
  TagType_enumtype_DeliverToCompID = 128,
  TagType_enumtype_DeliverToSubID = 129,
  TagType_enumtype_IOINaturalFlag = 130,
  TagType_enumtype_QuoteReqID = 131,
  TagType_enumtype_BidPx = 132,
  TagType_enumtype_OfferPx = 133,
  TagType_enumtype_BidSize = 134,
  TagType_enumtype_OfferSize = 135,
  TagType_enumtype_NoMiscFees = 136,
  TagType_enumtype_MiscFeeAmt = 137,
  TagType_enumtype_MiscFeeCurr = 138,
  TagType_enumtype_MiscFeeType = 139,
  TagType_enumtype_PrevClosePx = 140,
  TagType_enumtype_ResetSeqNumFlag = 141,
  TagType_enumtype_SenderLocationID = 142,
  TagType_enumtype_TargetLocationID = 143,
  TagType_enumtype_OnBehalfOfLocationID = 144,
  TagType_enumtype_DeliverToLocationID = 145,
  TagType_enumtype_NoRelatedSym = 146,
  TagType_enumtype_Subject = 147,
  TagType_enumtype_Headline = 148,
  TagType_enumtype_URLLink = 149,
  TagType_enumtype_ExecType = 150,
  TagType_enumtype_LeavesQty = 151,
  TagType_enumtype_CashOrderQty = 152,
  TagType_enumtype_AllocAvgPx = 153,
  TagType_enumtype_AllocNetMoney = 154,
  TagType_enumtype_SettlCurrFxRate = 155,
  TagType_enumtype_SettlCurrFxRateCalc = 156,
  TagType_enumtype_NumDaysInterest = 157,
  TagType_enumtype_AccruedInterestRate = 158,
  TagType_enumtype_AccruedInterestAmt = 159,
  TagType_enumtype_SettlInstMode = 160,
  TagType_enumtype_AllocText = 161,
  TagType_enumtype_SettlInstID = 162,
  TagType_enumtype_SettlInstTransType = 163,
  TagType_enumtype_EmailThreadID = 164,
  TagType_enumtype_SettlInstSource = 165,
  TagType_enumtype_SecurityType = 167,
  TagType_enumtype_EffectiveTime = 168,
  TagType_enumtype_StandInstDbType = 169,
  TagType_enumtype_StandInstDbName = 170,
  TagType_enumtype_StandInstDbID = 171,
  TagType_enumtype_SettlDeliveryType = 172,
  TagType_enumtype_BidSpotRate = 188,
  TagType_enumtype_BidForwardPoints = 189,
  TagType_enumtype_OfferSpotRate = 190,
  TagType_enumtype_OfferForwardPoints = 191,
  TagType_enumtype_OrderQty2 = 192,
  TagType_enumtype_SettlDate2 = 193,
  TagType_enumtype_LastSpotRate = 194,
  TagType_enumtype_LastForwardPoints = 195,
  TagType_enumtype_AllocLinkID = 196,
  TagType_enumtype_AllocLinkType = 197,
  TagType_enumtype_SecondaryOrderID = 198,
  TagType_enumtype_NoIOIQualifiers = 199,
  TagType_enumtype_MaturityMonthYear = 200,
  TagType_enumtype_PutOrCall = 201,
  TagType_enumtype_StrikePrice = 202,
  TagType_enumtype_CoveredOrUncovered = 203,
  TagType_enumtype_OptAttribute = 206,
  TagType_enumtype_SecurityExchange = 207,
  TagType_enumtype_NotifyBrokerOfCredit = 208,
  TagType_enumtype_AllocHandlInst = 209,
  TagType_enumtype_MaxShow = 210,
  TagType_enumtype_PegOffsetValue = 211,
  TagType_enumtype_XmlDataLen = 212,
  TagType_enumtype_XmlData = 213,
  TagType_enumtype_SettlInstRefID = 214,
  TagType_enumtype_NoRoutingIDs = 215,
  TagType_enumtype_RoutingType = 216,
  TagType_enumtype_RoutingID = 217,
  TagType_enumtype_Spread = 218,
  TagType_enumtype_BenchmarkCurveCurrency = 220,
  TagType_enumtype_BenchmarkCurveName = 221,
  TagType_enumtype_BenchmarkCurvePoint = 222,
  TagType_enumtype_CouponRate = 223,
  TagType_enumtype_CouponPaymentDate = 224,
  TagType_enumtype_IssueDate = 225,
  TagType_enumtype_RepurchaseTerm = 226,
  TagType_enumtype_RepurchaseRate = 227,
  TagType_enumtype_Factor = 228,
  TagType_enumtype_TradeOriginationDate = 229,
  TagType_enumtype_ExDate = 230,
  TagType_enumtype_ContractMultiplier = 231,
  TagType_enumtype_NoStipulations = 232,
  TagType_enumtype_StipulationType = 233,
  TagType_enumtype_StipulationValue = 234,
  TagType_enumtype_YieldType = 235,
  TagType_enumtype_Yield = 236,
  TagType_enumtype_TotalTakedown = 237,
  TagType_enumtype_Concession = 238,
  TagType_enumtype_RepoCollateralSecurityType = 239,
  TagType_enumtype_RedemptionDate = 240,
  TagType_enumtype_UnderlyingCouponPaymentDate = 241,
  TagType_enumtype_UnderlyingIssueDate = 242,
  TagType_enumtype_UnderlyingRepoCollateralSecurityType = 243,
  TagType_enumtype_UnderlyingRepurchaseTerm = 244,
  TagType_enumtype_UnderlyingRepurchaseRate = 245,
  TagType_enumtype_UnderlyingFactor = 246,
  TagType_enumtype_UnderlyingRedemptionDate = 247,
  TagType_enumtype_LegCouponPaymentDate = 248,
  TagType_enumtype_LegIssueDate = 249,
  TagType_enumtype_LegRepoCollateralSecurityType = 250,
  TagType_enumtype_LegRepurchaseTerm = 251,
  TagType_enumtype_LegRepurchaseRate = 252,
  TagType_enumtype_LegFactor = 253,
  TagType_enumtype_LegRedemptionDate = 254,
  TagType_enumtype_CreditRating = 255,
  TagType_enumtype_UnderlyingCreditRating = 256,
  TagType_enumtype_LegCreditRating = 257,
  TagType_enumtype_TradedFlatSwitch = 258,
  TagType_enumtype_BasisFeatureDate = 259,
  TagType_enumtype_BasisFeaturePrice = 260,
  TagType_enumtype_MDReqID = 262,
  TagType_enumtype_SubscriptionRequestType = 263,
  TagType_enumtype_MarketDepth = 264,
  TagType_enumtype_MDUpdateType = 265,
  TagType_enumtype_AggregatedBook = 266,
  TagType_enumtype_NoMDEntryTypes = 267,
  TagType_enumtype_NoMDEntries = 268,
  TagType_enumtype_MDEntryType = 269,
  TagType_enumtype_MDEntryPx = 270,
  TagType_enumtype_MDEntrySize = 271,
  TagType_enumtype_MDEntryDate = 272,
  TagType_enumtype_MDEntryTime = 273,
  TagType_enumtype_TickDirection = 274,
  TagType_enumtype_MDMkt = 275,
  TagType_enumtype_QuoteCondition = 276,
  TagType_enumtype_TradeCondition = 277,
  TagType_enumtype_MDEntryID = 278,
  TagType_enumtype_MDUpdateAction = 279,
  TagType_enumtype_MDEntryRefID = 280,
  TagType_enumtype_MDReqRejReason = 281,
  TagType_enumtype_MDEntryOriginator = 282,
  TagType_enumtype_LocationID = 283,
  TagType_enumtype_DeskID = 284,
  TagType_enumtype_DeleteReason = 285,
  TagType_enumtype_OpenCloseSettlFlag = 286,
  TagType_enumtype_SellerDays = 287,
  TagType_enumtype_MDEntryBuyer = 288,
  TagType_enumtype_MDEntrySeller = 289,
  TagType_enumtype_MDEntryPositionNo = 290,
  TagType_enumtype_FinancialStatus = 291,
  TagType_enumtype_CorporateAction = 292,
  TagType_enumtype_DefBidSize = 293,
  TagType_enumtype_DefOfferSize = 294,
  TagType_enumtype_NoQuoteEntries = 295,
  TagType_enumtype_NoQuoteSets = 296,
  TagType_enumtype_QuoteStatus = 297,
  TagType_enumtype_QuoteCancelType = 298,
  TagType_enumtype_QuoteEntryID = 299,
  TagType_enumtype_QuoteRejectReason = 300,
  TagType_enumtype_QuoteResponseLevel = 301,
  TagType_enumtype_QuoteSetID = 302,
  TagType_enumtype_QuoteRequestType = 303,
  TagType_enumtype_TotNoQuoteEntries = 304,
  TagType_enumtype_UnderlyingSecurityIDSource = 305,
  TagType_enumtype_UnderlyingIssuer = 306,
  TagType_enumtype_UnderlyingSecurityDesc = 307,
  TagType_enumtype_UnderlyingSecurityExchange = 308,
  TagType_enumtype_UnderlyingSecurityID = 309,
  TagType_enumtype_UnderlyingSecurityType = 310,
  TagType_enumtype_UnderlyingSymbol = 311,
  TagType_enumtype_UnderlyingSymbolSfx = 312,
  TagType_enumtype_UnderlyingMaturityMonthYear = 313,
  TagType_enumtype_UnderlyingPutOrCall = 315,
  TagType_enumtype_UnderlyingStrikePrice = 316,
  TagType_enumtype_UnderlyingOptAttribute = 317,
  TagType_enumtype_UnderlyingCurrency = 318,
  TagType_enumtype_SecurityReqID = 320,
  TagType_enumtype_SecurityRequestType = 321,
  TagType_enumtype_SecurityResponseID = 322,
  TagType_enumtype_SecurityResponseType = 323,
  TagType_enumtype_SecurityStatusReqID = 324,
  TagType_enumtype_UnsolicitedIndicator = 325,
  TagType_enumtype_SecurityTradingStatus = 326,
  TagType_enumtype_HaltReasonChar = 327,
  TagType_enumtype_InViewOfCommon = 328,
  TagType_enumtype_DueToRelated = 329,
  TagType_enumtype_BuyVolume = 330,
  TagType_enumtype_SellVolume = 331,
  TagType_enumtype_HighPx = 332,
  TagType_enumtype_LowPx = 333,
  TagType_enumtype_Adjustment = 334,
  TagType_enumtype_TradSesReqID = 335,
  TagType_enumtype_TradingSessionID = 336,
  TagType_enumtype_ContraTrader = 337,
  TagType_enumtype_TradSesMethod = 338,
  TagType_enumtype_TradSesMode = 339,
  TagType_enumtype_TradSesStatus = 340,
  TagType_enumtype_TradSesStartTime = 341,
  TagType_enumtype_TradSesOpenTime = 342,
  TagType_enumtype_TradSesPreCloseTime = 343,
  TagType_enumtype_TradSesCloseTime = 344,
  TagType_enumtype_TradSesEndTime = 345,
  TagType_enumtype_NumberOfOrders = 346,
  TagType_enumtype_MessageEncoding = 347,
  TagType_enumtype_EncodedIssuerLen = 348,
  TagType_enumtype_EncodedIssuer = 349,
  TagType_enumtype_EncodedSecurityDescLen = 350,
  TagType_enumtype_EncodedSecurityDesc = 351,
  TagType_enumtype_EncodedListExecInstLen = 352,
  TagType_enumtype_EncodedListExecInst = 353,
  TagType_enumtype_EncodedTextLen = 354,
  TagType_enumtype_EncodedText = 355,
  TagType_enumtype_EncodedSubjectLen = 356,
  TagType_enumtype_EncodedSubject = 357,
  TagType_enumtype_EncodedHeadlineLen = 358,
  TagType_enumtype_EncodedHeadline = 359,
  TagType_enumtype_EncodedAllocTextLen = 360,
  TagType_enumtype_EncodedAllocText = 361,
  TagType_enumtype_EncodedUnderlyingIssuerLen = 362,
  TagType_enumtype_EncodedUnderlyingIssuer = 363,
  TagType_enumtype_EncodedUnderlyingSecurityDescLen = 364,
  TagType_enumtype_EncodedUnderlyingSecurityDesc = 365,
  TagType_enumtype_AllocPrice = 366,
  TagType_enumtype_QuoteSetValidUntilTime = 367,
  TagType_enumtype_QuoteEntryRejectReason = 368,
  TagType_enumtype_LastMsgSeqNumProcessed = 369,
  TagType_enumtype_RefTagID = 371,
  TagType_enumtype_RefMsgType = 372,
  TagType_enumtype_SessionRejectReason = 373,
  TagType_enumtype_BidRequestTransType = 374,
  TagType_enumtype_ContraBroker = 375,
  TagType_enumtype_ComplianceID = 376,
  TagType_enumtype_SolicitedFlag = 377,
  TagType_enumtype_ExecRestatementReason = 378,
  TagType_enumtype_BusinessRejectRefID = 379,
  TagType_enumtype_BusinessRejectReason = 380,
  TagType_enumtype_GrossTradeAmt = 381,
  TagType_enumtype_NoContraBrokers = 382,
  TagType_enumtype_MaxMessageSize = 383,
  TagType_enumtype_NoMsgTypes = 384,
  TagType_enumtype_MsgDirection = 385,
  TagType_enumtype_NoTradingSessions = 386,
  TagType_enumtype_TotalVolumeTraded = 387,
  TagType_enumtype_DiscretionInst = 388,
  TagType_enumtype_DiscretionOffsetValue = 389,
  TagType_enumtype_BidID = 390,
  TagType_enumtype_ClientBidID = 391,
  TagType_enumtype_ListName = 392,
  TagType_enumtype_TotNoRelatedSym = 393,
  TagType_enumtype_BidType = 394,
  TagType_enumtype_NumTickets = 395,
  TagType_enumtype_SideValue1 = 396,
  TagType_enumtype_SideValue2 = 397,
  TagType_enumtype_NoBidDescriptors = 398,
  TagType_enumtype_BidDescriptorType = 399,
  TagType_enumtype_BidDescriptor = 400,
  TagType_enumtype_SideValueInd = 401,
  TagType_enumtype_LiquidityPctLow = 402,
  TagType_enumtype_LiquidityPctHigh = 403,
  TagType_enumtype_LiquidityValue = 404,
  TagType_enumtype_EFPTrackingError = 405,
  TagType_enumtype_FairValue = 406,
  TagType_enumtype_OutsideIndexPct = 407,
  TagType_enumtype_ValueOfFutures = 408,
  TagType_enumtype_LiquidityIndType = 409,
  TagType_enumtype_WtAverageLiquidity = 410,
  TagType_enumtype_ExchangeForPhysical = 411,
  TagType_enumtype_OutMainCntryUIndex = 412,
  TagType_enumtype_CrossPercent = 413,
  TagType_enumtype_ProgRptReqs = 414,
  TagType_enumtype_ProgPeriodInterval = 415,
  TagType_enumtype_IncTaxInd = 416,
  TagType_enumtype_NumBidders = 417,
  TagType_enumtype_BidTradeType = 418,
  TagType_enumtype_BasisPxType = 419,
  TagType_enumtype_NoBidComponents = 420,
  TagType_enumtype_Country = 421,
  TagType_enumtype_TotNoStrikes = 422,
  TagType_enumtype_PriceType = 423,
  TagType_enumtype_DayOrderQty = 424,
  TagType_enumtype_DayCumQty = 425,
  TagType_enumtype_DayAvgPx = 426,
  TagType_enumtype_GTBookingInst = 427,
  TagType_enumtype_NoStrikes = 428,
  TagType_enumtype_ListStatusType = 429,
  TagType_enumtype_NetGrossInd = 430,
  TagType_enumtype_ListOrderStatus = 431,
  TagType_enumtype_ExpireDate = 432,
  TagType_enumtype_ListExecInstType = 433,
  TagType_enumtype_CxlRejResponseTo = 434,
  TagType_enumtype_UnderlyingCouponRate = 435,
  TagType_enumtype_UnderlyingContractMultiplier = 436,
  TagType_enumtype_ContraTradeQty = 437,
  TagType_enumtype_ContraTradeTime = 438,
  TagType_enumtype_LiquidityNumSecurities = 441,
  TagType_enumtype_MultiLegReportingType = 442,
  TagType_enumtype_StrikeTime = 443,
  TagType_enumtype_ListStatusText = 444,
  TagType_enumtype_EncodedListStatusTextLen = 445,
  TagType_enumtype_EncodedListStatusText = 446,
  TagType_enumtype_PartyIDSource = 447,
  TagType_enumtype_PartyID = 448,
  TagType_enumtype_NetChgPrevDay = 451,
  TagType_enumtype_PartyRole = 452,
  TagType_enumtype_NoPartyIDs = 453,
  TagType_enumtype_NoSecurityAltID = 454,
  TagType_enumtype_SecurityAltID = 455,
  TagType_enumtype_SecurityAltIDSource = 456,
  TagType_enumtype_NoUnderlyingSecurityAltID = 457,
  TagType_enumtype_UnderlyingSecurityAltID = 458,
  TagType_enumtype_UnderlyingSecurityAltIDSource = 459,
  TagType_enumtype_Product = 460,
  TagType_enumtype_CFICode = 461,
  TagType_enumtype_UnderlyingProduct = 462,
  TagType_enumtype_UnderlyingCFICode = 463,
  TagType_enumtype_TestMessageIndicator = 464,
  TagType_enumtype_BookingRefID = 466,
  TagType_enumtype_IndividualAllocID = 467,
  TagType_enumtype_RoundingDirection = 468,
  TagType_enumtype_RoundingModulus = 469,
  TagType_enumtype_CountryOfIssue = 470,
  TagType_enumtype_StateOrProvinceOfIssue = 471,
  TagType_enumtype_LocaleOfIssue = 472,
  TagType_enumtype_NoRegistDtls = 473,
  TagType_enumtype_MailingDtls = 474,
  TagType_enumtype_InvestorCountryOfResidence = 475,
  TagType_enumtype_PaymentRef = 476,
  TagType_enumtype_DistribPaymentMethod = 477,
  TagType_enumtype_CashDistribCurr = 478,
  TagType_enumtype_CommCurrency = 479,
  TagType_enumtype_CancellationRights = 480,
  TagType_enumtype_MoneyLaunderingStatus = 481,
  TagType_enumtype_MailingInst = 482,
  TagType_enumtype_TransBkdTime = 483,
  TagType_enumtype_ExecPriceType = 484,
  TagType_enumtype_ExecPriceAdjustment = 485,
  TagType_enumtype_DateOfBirth = 486,
  TagType_enumtype_TradeReportTransType = 487,
  TagType_enumtype_CardHolderName = 488,
  TagType_enumtype_CardNumber = 489,
  TagType_enumtype_CardExpDate = 490,
  TagType_enumtype_CardIssNum = 491,
  TagType_enumtype_PaymentMethod = 492,
  TagType_enumtype_RegistAcctType = 493,
  TagType_enumtype_Designation = 494,
  TagType_enumtype_TaxAdvantageType = 495,
  TagType_enumtype_RegistRejReasonText = 496,
  TagType_enumtype_FundRenewWaiv = 497,
  TagType_enumtype_CashDistribAgentName = 498,
  TagType_enumtype_CashDistribAgentCode = 499,
  TagType_enumtype_CashDistribAgentAcctNumber = 500,
  TagType_enumtype_CashDistribPayRef = 501,
  TagType_enumtype_CashDistribAgentAcctName = 502,
  TagType_enumtype_CardStartDate = 503,
  TagType_enumtype_PaymentDate = 504,
  TagType_enumtype_PaymentRemitterID = 505,
  TagType_enumtype_RegistStatus = 506,
  TagType_enumtype_RegistRejReasonCode = 507,
  TagType_enumtype_RegistRefID = 508,
  TagType_enumtype_RegistDtls = 509,
  TagType_enumtype_NoDistribInsts = 510,
  TagType_enumtype_RegistEmail = 511,
  TagType_enumtype_DistribPercentage = 512,
  TagType_enumtype_RegistID = 513,
  TagType_enumtype_RegistTransType = 514,
  TagType_enumtype_ExecValuationPoint = 515,
  TagType_enumtype_OrderPercent = 516,
  TagType_enumtype_OwnershipType = 517,
  TagType_enumtype_NoContAmts = 518,
  TagType_enumtype_ContAmtType = 519,
  TagType_enumtype_ContAmtValue = 520,
  TagType_enumtype_ContAmtCurr = 521,
  TagType_enumtype_OwnerType = 522,
  TagType_enumtype_PartySubID = 523,
  TagType_enumtype_NestedPartyID = 524,
  TagType_enumtype_NestedPartyIDSource = 525,
  TagType_enumtype_SecondaryClOrdID = 526,
  TagType_enumtype_SecondaryExecID = 527,
  TagType_enumtype_OrderCapacity = 528,
  TagType_enumtype_OrderRestrictions = 529,
  TagType_enumtype_MassCancelRequestType = 530,
  TagType_enumtype_MassCancelResponse = 531,
  TagType_enumtype_MassCancelRejectReason = 532,
  TagType_enumtype_TotalAffectedOrders = 533,
  TagType_enumtype_NoAffectedOrders = 534,
  TagType_enumtype_AffectedOrderID = 535,
  TagType_enumtype_AffectedSecondaryOrderID = 536,
  TagType_enumtype_QuoteType = 537,
  TagType_enumtype_NestedPartyRole = 538,
  TagType_enumtype_NoNestedPartyIDs = 539,
  TagType_enumtype_TotalAccruedInterestAmt = 540,
  TagType_enumtype_MaturityDate = 541,
  TagType_enumtype_UnderlyingMaturityDate = 542,
  TagType_enumtype_InstrRegistry = 543,
  TagType_enumtype_CashMargin = 544,
  TagType_enumtype_NestedPartySubID = 545,
  TagType_enumtype_Scope = 546,
  TagType_enumtype_MDImplicitDelete = 547,
  TagType_enumtype_CrossID = 548,
  TagType_enumtype_CrossType = 549,
  TagType_enumtype_CrossPrioritization = 550,
  TagType_enumtype_OrigCrossID = 551,
  TagType_enumtype_NoSides = 552,
  TagType_enumtype_Username = 553,
  TagType_enumtype_Password = 554,
  TagType_enumtype_NoLegs = 555,
  TagType_enumtype_LegCurrency = 556,
  TagType_enumtype_TotNoSecurityTypes = 557,
  TagType_enumtype_NoSecurityTypes = 558,
  TagType_enumtype_SecurityListRequestType = 559,
  TagType_enumtype_SecurityRequestResult = 560,
  TagType_enumtype_RoundLot = 561,
  TagType_enumtype_MinTradeVol = 562,
  TagType_enumtype_MultiLegRptTypeReq = 563,
  TagType_enumtype_LegPositionEffect = 564,
  TagType_enumtype_LegCoveredOrUncovered = 565,
  TagType_enumtype_LegPrice = 566,
  TagType_enumtype_TradSesStatusRejReason = 567,
  TagType_enumtype_TradeRequestID = 568,
  TagType_enumtype_TradeRequestType = 569,
  TagType_enumtype_PreviouslyReported = 570,
  TagType_enumtype_TradeReportID = 571,
  TagType_enumtype_TradeReportRefID = 572,
  TagType_enumtype_MatchStatus = 573,
  TagType_enumtype_MatchType = 574,
  TagType_enumtype_OddLot = 575,
  TagType_enumtype_NoClearingInstructions = 576,
  TagType_enumtype_ClearingInstruction = 577,
  TagType_enumtype_TradeInputSource = 578,
  TagType_enumtype_TradeInputDevice = 579,
  TagType_enumtype_NoDates = 580,
  TagType_enumtype_AccountType = 581,
  TagType_enumtype_CustOrderCapacity = 582,
  TagType_enumtype_ClOrdLinkID = 583,
  TagType_enumtype_MassStatusReqID = 584,
  TagType_enumtype_MassStatusReqType = 585,
  TagType_enumtype_OrigOrdModTime = 586,
  TagType_enumtype_LegSettlType = 587,
  TagType_enumtype_LegSettlDate = 588,
  TagType_enumtype_DayBookingInst = 589,
  TagType_enumtype_BookingUnit = 590,
  TagType_enumtype_PreallocMethod = 591,
  TagType_enumtype_UnderlyingCountryOfIssue = 592,
  TagType_enumtype_UnderlyingStateOrProvinceOfIssue = 593,
  TagType_enumtype_UnderlyingLocaleOfIssue = 594,
  TagType_enumtype_UnderlyingInstrRegistry = 595,
  TagType_enumtype_LegCountryOfIssue = 596,
  TagType_enumtype_LegStateOrProvinceOfIssue = 597,
  TagType_enumtype_LegLocaleOfIssue = 598,
  TagType_enumtype_LegInstrRegistry = 599,
  TagType_enumtype_LegSymbol = 600,
  TagType_enumtype_LegSymbolSfx = 601,
  TagType_enumtype_LegSecurityID = 602,
  TagType_enumtype_LegSecurityIDSource = 603,
  TagType_enumtype_NoLegSecurityAltID = 604,
  TagType_enumtype_LegSecurityAltID = 605,
  TagType_enumtype_LegSecurityAltIDSource = 606,
  TagType_enumtype_LegProduct = 607,
  TagType_enumtype_LegCFICode = 608,
  TagType_enumtype_LegSecurityType = 609,
  TagType_enumtype_LegMaturityMonthYear = 610,
  TagType_enumtype_LegMaturityDate = 611,
  TagType_enumtype_LegStrikePrice = 612,
  TagType_enumtype_LegOptAttribute = 613,
  TagType_enumtype_LegContractMultiplier = 614,
  TagType_enumtype_LegCouponRate = 615,
  TagType_enumtype_LegSecurityExchange = 616,
  TagType_enumtype_LegIssuer = 617,
  TagType_enumtype_EncodedLegIssuerLen = 618,
  TagType_enumtype_EncodedLegIssuer = 619,
  TagType_enumtype_LegSecurityDesc = 620,
  TagType_enumtype_EncodedLegSecurityDescLen = 621,
  TagType_enumtype_EncodedLegSecurityDesc = 622,
  TagType_enumtype_LegRatioQty = 623,
  TagType_enumtype_LegSide = 624,
  TagType_enumtype_TradingSessionSubID = 625,
  TagType_enumtype_AllocType = 626,
  TagType_enumtype_NoHops = 627,
  TagType_enumtype_HopCompID = 628,
  TagType_enumtype_HopSendingTime = 629,
  TagType_enumtype_HopRefID = 630,
  TagType_enumtype_MidPx = 631,
  TagType_enumtype_BidYield = 632,
  TagType_enumtype_MidYield = 633,
  TagType_enumtype_OfferYield = 634,
  TagType_enumtype_ClearingFeeIndicator = 635,
  TagType_enumtype_WorkingIndicator = 636,
  TagType_enumtype_LegLastPx = 637,
  TagType_enumtype_PriorityIndicator = 638,
  TagType_enumtype_PriceImprovement = 639,
  TagType_enumtype_Price2 = 640,
  TagType_enumtype_LastForwardPoints2 = 641,
  TagType_enumtype_BidForwardPoints2 = 642,
  TagType_enumtype_OfferForwardPoints2 = 643,
  TagType_enumtype_RFQReqID = 644,
  TagType_enumtype_MktBidPx = 645,
  TagType_enumtype_MktOfferPx = 646,
  TagType_enumtype_MinBidSize = 647,
  TagType_enumtype_MinOfferSize = 648,
  TagType_enumtype_QuoteStatusReqID = 649,
  TagType_enumtype_LegalConfirm = 650,
  TagType_enumtype_UnderlyingLastPx = 651,
  TagType_enumtype_UnderlyingLastQty = 652,
  TagType_enumtype_LegRefID = 654,
  TagType_enumtype_ContraLegRefID = 655,
  TagType_enumtype_SettlCurrBidFxRate = 656,
  TagType_enumtype_SettlCurrOfferFxRate = 657,
  TagType_enumtype_QuoteRequestRejectReason = 658,
  TagType_enumtype_SideComplianceID = 659,
  TagType_enumtype_AcctIDSource = 660,
  TagType_enumtype_AllocAcctIDSource = 661,
  TagType_enumtype_BenchmarkPrice = 662,
  TagType_enumtype_BenchmarkPriceType = 663,
  TagType_enumtype_ConfirmID = 664,
  TagType_enumtype_ConfirmStatus = 665,
  TagType_enumtype_ConfirmTransType = 666,
  TagType_enumtype_ContractSettlMonth = 667,
  TagType_enumtype_DeliveryForm = 668,
  TagType_enumtype_LastParPx = 669,
  TagType_enumtype_NoLegAllocs = 670,
  TagType_enumtype_LegAllocAccount = 671,
  TagType_enumtype_LegIndividualAllocID = 672,
  TagType_enumtype_LegAllocQty = 673,
  TagType_enumtype_LegAllocAcctIDSource = 674,
  TagType_enumtype_LegSettlCurrency = 675,
  TagType_enumtype_LegBenchmarkCurveCurrency = 676,
  TagType_enumtype_LegBenchmarkCurveName = 677,
  TagType_enumtype_LegBenchmarkCurvePoint = 678,
  TagType_enumtype_LegBenchmarkPrice = 679,
  TagType_enumtype_LegBenchmarkPriceType = 680,
  TagType_enumtype_LegBidPx = 681,
  TagType_enumtype_LegIOIQty = 682,
  TagType_enumtype_NoLegStipulations = 683,
  TagType_enumtype_LegOfferPx = 684,
  TagType_enumtype_LegPriceType = 686,
  TagType_enumtype_LegQty = 687,
  TagType_enumtype_LegStipulationType = 688,
  TagType_enumtype_LegStipulationValue = 689,
  TagType_enumtype_LegSwapType = 690,
  TagType_enumtype_Pool = 691,
  TagType_enumtype_QuotePriceType = 692,
  TagType_enumtype_QuoteRespID = 693,
  TagType_enumtype_QuoteRespType = 694,
  TagType_enumtype_QuoteQualifier = 695,
  TagType_enumtype_YieldRedemptionDate = 696,
  TagType_enumtype_YieldRedemptionPrice = 697,
  TagType_enumtype_YieldRedemptionPriceType = 698,
  TagType_enumtype_BenchmarkSecurityID = 699,
  TagType_enumtype_ReversalIndicator = 700,
  TagType_enumtype_YieldCalcDate = 701,
  TagType_enumtype_NoPositions = 702,
  TagType_enumtype_PosType = 703,
  TagType_enumtype_LongQty = 704,
  TagType_enumtype_ShortQty = 705,
  TagType_enumtype_PosQtyStatus = 706,
  TagType_enumtype_PosAmtType = 707,
  TagType_enumtype_PosAmt = 708,
  TagType_enumtype_PosTransType = 709,
  TagType_enumtype_PosReqID = 710,
  TagType_enumtype_NoUnderlyings = 711,
  TagType_enumtype_PosMaintAction = 712,
  TagType_enumtype_OrigPosReqRefID = 713,
  TagType_enumtype_PosMaintRptRefID = 714,
  TagType_enumtype_ClearingBusinessDate = 715,
  TagType_enumtype_SettlSessID = 716,
  TagType_enumtype_SettlSessSubID = 717,
  TagType_enumtype_AdjustmentType = 718,
  TagType_enumtype_ContraryInstructionIndicator = 719,
  TagType_enumtype_PriorSpreadIndicator = 720,
  TagType_enumtype_PosMaintRptID = 721,
  TagType_enumtype_PosMaintStatus = 722,
  TagType_enumtype_PosMaintResult = 723,
  TagType_enumtype_PosReqType = 724,
  TagType_enumtype_ResponseTransportType = 725,
  TagType_enumtype_ResponseDestination = 726,
  TagType_enumtype_TotalNumPosReports = 727,
  TagType_enumtype_PosReqResult = 728,
  TagType_enumtype_PosReqStatus = 729,
  TagType_enumtype_SettlPrice = 730,
  TagType_enumtype_SettlPriceType = 731,
  TagType_enumtype_UnderlyingSettlPrice = 732,
  TagType_enumtype_UnderlyingSettlPriceType = 733,
  TagType_enumtype_PriorSettlPrice = 734,
  TagType_enumtype_NoQuoteQualifiers = 735,
  TagType_enumtype_AllocSettlCurrency = 736,
  TagType_enumtype_AllocSettlCurrAmt = 737,
  TagType_enumtype_InterestAtMaturity = 738,
  TagType_enumtype_LegDatedDate = 739,
  TagType_enumtype_LegPool = 740,
  TagType_enumtype_AllocInterestAtMaturity = 741,
  TagType_enumtype_AllocAccruedInterestAmt = 742,
  TagType_enumtype_DeliveryDate = 743,
  TagType_enumtype_AssignmentMethod = 744,
  TagType_enumtype_AssignmentUnit = 745,
  TagType_enumtype_OpenInterest = 746,
  TagType_enumtype_ExerciseMethod = 747,
  TagType_enumtype_TotNumTradeReports = 748,
  TagType_enumtype_TradeRequestResult = 749,
  TagType_enumtype_TradeRequestStatus = 750,
  TagType_enumtype_TradeReportRejectReason = 751,
  TagType_enumtype_SideMultiLegReportingType = 752,
  TagType_enumtype_NoPosAmt = 753,
  TagType_enumtype_AutoAcceptIndicator = 754,
  TagType_enumtype_AllocReportID = 755,
  TagType_enumtype_NoNested2PartyIDs = 756,
  TagType_enumtype_Nested2PartyID = 757,
  TagType_enumtype_Nested2PartyIDSource = 758,
  TagType_enumtype_Nested2PartyRole = 759,
  TagType_enumtype_Nested2PartySubID = 760,
  TagType_enumtype_BenchmarkSecurityIDSource = 761,
  TagType_enumtype_SecuritySubType = 762,
  TagType_enumtype_UnderlyingSecuritySubType = 763,
  TagType_enumtype_LegSecuritySubType = 764,
  TagType_enumtype_AllowableOneSidednessPct = 765,
  TagType_enumtype_AllowableOneSidednessValue = 766,
  TagType_enumtype_AllowableOneSidednessCurr = 767,
  TagType_enumtype_NoTrdRegTimestamps = 768,
  TagType_enumtype_TrdRegTimestamp = 769,
  TagType_enumtype_TrdRegTimestampType = 770,
  TagType_enumtype_TrdRegTimestampOrigin = 771,
  TagType_enumtype_ConfirmRefID = 772,
  TagType_enumtype_ConfirmType = 773,
  TagType_enumtype_ConfirmRejReason = 774,
  TagType_enumtype_BookingType = 775,
  TagType_enumtype_IndividualAllocRejCode = 776,
  TagType_enumtype_SettlInstMsgID = 777,
  TagType_enumtype_NoSettlInst = 778,
  TagType_enumtype_LastUpdateTime = 779,
  TagType_enumtype_AllocSettlInstType = 780,
  TagType_enumtype_NoSettlPartyIDs = 781,
  TagType_enumtype_SettlPartyID = 782,
  TagType_enumtype_SettlPartyIDSource = 783,
  TagType_enumtype_SettlPartyRole = 784,
  TagType_enumtype_SettlPartySubID = 785,
  TagType_enumtype_SettlPartySubIDType = 786,
  TagType_enumtype_DlvyInstType = 787,
  TagType_enumtype_TerminationType = 788,
  TagType_enumtype_NextExpectedMsgSeqNum = 789,
  TagType_enumtype_OrdStatusReqID = 790,
  TagType_enumtype_SettlInstReqID = 791,
  TagType_enumtype_SettlInstReqRejCode = 792,
  TagType_enumtype_SecondaryAllocID = 793,
  TagType_enumtype_AllocReportType = 794,
  TagType_enumtype_AllocReportRefID = 795,
  TagType_enumtype_AllocCancReplaceReason = 796,
  TagType_enumtype_CopyMsgIndicator = 797,
  TagType_enumtype_AllocAccountType = 798,
  TagType_enumtype_OrderAvgPx = 799,
  TagType_enumtype_OrderBookingQty = 800,
  TagType_enumtype_NoSettlPartySubIDs = 801,
  TagType_enumtype_NoPartySubIDs = 802,
  TagType_enumtype_PartySubIDType = 803,
  TagType_enumtype_NoNestedPartySubIDs = 804,
  TagType_enumtype_NestedPartySubIDType = 805,
  TagType_enumtype_NoNested2PartySubIDs = 806,
  TagType_enumtype_Nested2PartySubIDType = 807,
  TagType_enumtype_AllocIntermedReqType = 808,
  TagType_enumtype_UnderlyingPx = 810,
  TagType_enumtype_PriceDelta = 811,
  TagType_enumtype_ApplQueueMax = 812,
  TagType_enumtype_ApplQueueDepth = 813,
  TagType_enumtype_ApplQueueResolution = 814,
  TagType_enumtype_ApplQueueAction = 815,
  TagType_enumtype_NoAltMDSource = 816,
  TagType_enumtype_AltMDSourceID = 817,
  TagType_enumtype_SecondaryTradeReportID = 818,
  TagType_enumtype_AvgPxIndicator = 819,
  TagType_enumtype_TradeLinkID = 820,
  TagType_enumtype_OrderInputDevice = 821,
  TagType_enumtype_UnderlyingTradingSessionID = 822,
  TagType_enumtype_UnderlyingTradingSessionSubID = 823,
  TagType_enumtype_TradeLegRefID = 824,
  TagType_enumtype_ExchangeRule = 825,
  TagType_enumtype_TradeAllocIndicator = 826,
  TagType_enumtype_ExpirationCycle = 827,
  TagType_enumtype_TrdType = 828,
  TagType_enumtype_TrdSubType = 829,
  TagType_enumtype_TransferReason = 830,
  TagType_enumtype_TotNumAssignmentReports = 832,
  TagType_enumtype_AsgnRptID = 833,
  TagType_enumtype_ThresholdAmount = 834,
  TagType_enumtype_PegMoveType = 835,
  TagType_enumtype_PegOffsetType = 836,
  TagType_enumtype_PegLimitType = 837,
  TagType_enumtype_PegRoundDirection = 838,
  TagType_enumtype_PeggedPrice = 839,
  TagType_enumtype_PegScope = 840,
  TagType_enumtype_DiscretionMoveType = 841,
  TagType_enumtype_DiscretionOffsetType = 842,
  TagType_enumtype_DiscretionLimitType = 843,
  TagType_enumtype_DiscretionRoundDirection = 844,
  TagType_enumtype_DiscretionPrice = 845,
  TagType_enumtype_DiscretionScope = 846,
  TagType_enumtype_TargetStrategy = 847,
  TagType_enumtype_TargetStrategyParameters = 848,
  TagType_enumtype_ParticipationRate = 849,
  TagType_enumtype_TargetStrategyPerformance = 850,
  TagType_enumtype_LastLiquidityInd = 851,
  TagType_enumtype_PublishTrdIndicator = 852,
  TagType_enumtype_ShortSaleReason = 853,
  TagType_enumtype_QtyType = 854,
  TagType_enumtype_SecondaryTrdType = 855,
  TagType_enumtype_TradeReportType = 856,
  TagType_enumtype_AllocNoOrdersType = 857,
  TagType_enumtype_SharedCommission = 858,
  TagType_enumtype_ConfirmReqID = 859,
  TagType_enumtype_AvgParPx = 860,
  TagType_enumtype_ReportedPx = 861,
  TagType_enumtype_NoCapacities = 862,
  TagType_enumtype_OrderCapacityQty = 863,
  TagType_enumtype_NoEvents = 864,
  TagType_enumtype_EventType = 865,
  TagType_enumtype_EventDate = 866,
  TagType_enumtype_EventPx = 867,
  TagType_enumtype_EventText = 868,
  TagType_enumtype_PctAtRisk = 869,
  TagType_enumtype_NoInstrAttrib = 870,
  TagType_enumtype_InstrAttribType = 871,
  TagType_enumtype_InstrAttribValue = 872,
  TagType_enumtype_DatedDate = 873,
  TagType_enumtype_InterestAccrualDate = 874,
  TagType_enumtype_CPProgram = 875,
  TagType_enumtype_CPRegType = 876,
  TagType_enumtype_UnderlyingCPProgram = 877,
  TagType_enumtype_UnderlyingCPRegType = 878,
  TagType_enumtype_UnderlyingQty = 879,
  TagType_enumtype_TrdMatchID = 880,
  TagType_enumtype_SecondaryTradeReportRefID = 881,
  TagType_enumtype_UnderlyingDirtyPrice = 882,
  TagType_enumtype_UnderlyingEndPrice = 883,
  TagType_enumtype_UnderlyingStartValue = 884,
  TagType_enumtype_UnderlyingCurrentValue = 885,
  TagType_enumtype_UnderlyingEndValue = 886,
  TagType_enumtype_NoUnderlyingStips = 887,
  TagType_enumtype_UnderlyingStipType = 888,
  TagType_enumtype_UnderlyingStipValue = 889,
  TagType_enumtype_MaturityNetMoney = 890,
  TagType_enumtype_MiscFeeBasis = 891,
  TagType_enumtype_TotNoAllocs = 892,
  TagType_enumtype_LastFragment = 893,
  TagType_enumtype_CollReqID = 894,
  TagType_enumtype_CollAsgnReason = 895,
  TagType_enumtype_CollInquiryQualifier = 896,
  TagType_enumtype_NoTrades = 897,
  TagType_enumtype_MarginRatio = 898,
  TagType_enumtype_MarginExcess = 899,
  TagType_enumtype_TotalNetValue = 900,
  TagType_enumtype_CashOutstanding = 901,
  TagType_enumtype_CollAsgnID = 902,
  TagType_enumtype_CollAsgnTransType = 903,
  TagType_enumtype_CollRespID = 904,
  TagType_enumtype_CollAsgnRespType = 905,
  TagType_enumtype_CollAsgnRejectReason = 906,
  TagType_enumtype_CollAsgnRefID = 907,
  TagType_enumtype_CollRptID = 908,
  TagType_enumtype_CollInquiryID = 909,
  TagType_enumtype_CollStatus = 910,
  TagType_enumtype_TotNumReports = 911,
  TagType_enumtype_LastRptRequested = 912,
  TagType_enumtype_AgreementDesc = 913,
  TagType_enumtype_AgreementID = 914,
  TagType_enumtype_AgreementDate = 915,
  TagType_enumtype_StartDate = 916,
  TagType_enumtype_EndDate = 917,
  TagType_enumtype_AgreementCurrency = 918,
  TagType_enumtype_DeliveryType = 919,
  TagType_enumtype_EndAccruedInterestAmt = 920,
  TagType_enumtype_StartCash = 921,
  TagType_enumtype_EndCash = 922,
  TagType_enumtype_UserRequestID = 923,
  TagType_enumtype_UserRequestType = 924,
  TagType_enumtype_NewPassword = 925,
  TagType_enumtype_UserStatus = 926,
  TagType_enumtype_UserStatusText = 927,
  TagType_enumtype_StatusValue = 928,
  TagType_enumtype_StatusText = 929,
  TagType_enumtype_RefCompID = 930,
  TagType_enumtype_RefSubID = 931,
  TagType_enumtype_NetworkResponseID = 932,
  TagType_enumtype_NetworkRequestID = 933,
  TagType_enumtype_LastNetworkResponseID = 934,
  TagType_enumtype_NetworkRequestType = 935,
  TagType_enumtype_NoCompIDs = 936,
  TagType_enumtype_NetworkStatusResponseType = 937,
  TagType_enumtype_NoCollInquiryQualifier = 938,
  TagType_enumtype_TrdRptStatus = 939,
  TagType_enumtype_AffirmStatus = 940,
  TagType_enumtype_UnderlyingStrikeCurrency = 941,
  TagType_enumtype_LegStrikeCurrency = 942,
  TagType_enumtype_TimeBracket = 943,
  TagType_enumtype_CollAction = 944,
  TagType_enumtype_CollInquiryStatus = 945,
  TagType_enumtype_CollInquiryResult = 946,
  TagType_enumtype_StrikeCurrency = 947,
  TagType_enumtype_NoNested3PartyIDs = 948,
  TagType_enumtype_Nested3PartyID = 949,
  TagType_enumtype_Nested3PartyIDSource = 950,
  TagType_enumtype_Nested3PartyRole = 951,
  TagType_enumtype_NoNested3PartySubIDs = 952,
  TagType_enumtype_Nested3PartySubID = 953,
  TagType_enumtype_Nested3PartySubIDType = 954,
  TagType_enumtype_LegContractSettlMonth = 955,
  TagType_enumtype_LegInterestAccrualDate = 956,
  TagType_enumtype_FilePath = 1900,
  TagType_enumtype_SoftwareName = 1901,
  TagType_enumtype_SoftwareVersion = 1902,
  TagType_enumtype_SoftwareKey = 1903,
  TagType_enumtype_ExchangeSuffix = 2000,
  TagType_enumtype_ExchangeID = 2001,
  TagType_enumtype_ExchangeName = 2002,
  TagType_enumtype_ExchangeProperty = 2003,
  TagType_enumtype_SettlementGroupID = 2004,
  TagType_enumtype_InstrumentStatus = 2005,
  TagType_enumtype_TradingSegmentSN = 2006,
  TagType_enumtype_EnterTime = 2007,
  TagType_enumtype_EnterReason = 2008,
  TagType_enumtype_InstrumentID = 2009,
  TagType_enumtype_InstrumentName = 2010,
  TagType_enumtype_ExchangeInstID = 2011,
  TagType_enumtype_ProductID = 2012,
  TagType_enumtype_ProductClass = 2013,
  TagType_enumtype_DeliveryYear = 2014,
  TagType_enumtype_DeliveryMonth = 2015,
  TagType_enumtype_MaxMarketOrderVolume = 2016,
  TagType_enumtype_MinMarketOrderVolume = 2017,
  TagType_enumtype_MaxLimitOrderVolume = 2018,
  TagType_enumtype_MinLimitOrderVolume = 2019,
  TagType_enumtype_VolumeMultiple = 2020,
  TagType_enumtype_PriceTick = 2021,
  TagType_enumtype_CreateDate = 2022,
  TagType_enumtype_OpenDate = 2023,
  TagType_enumtype_StartDelivDate = 2025,
  TagType_enumtype_EndDelivDate = 2026,
  TagType_enumtype_InstLifePhase = 2027,
  TagType_enumtype_IsTrading = 2028,
  TagType_enumtype_PositionType = 2029,
  TagType_enumtype_PositionDateType = 2030,
  TagType_enumtype_MaxMarginSideAlgorithm = 2031,
  TagType_enumtype_LongMarginRatio = 2032,
  TagType_enumtype_ShortMarginRatio = 2033,
  TagType_enumtype_UnderlyingInstrID = 2034,
  TagType_enumtype_OptionsType = 2036,
  TagType_enumtype_UnderlyingMultiple = 2037,
  TagType_enumtype_CombinationType = 2038,
  TagType_enumtype_InvestorRange = 2039,
  TagType_enumtype_BrokerID = 2040,
  TagType_enumtype_InvestorID = 2041,
  TagType_enumtype_OpenRatioByMoney = 2042,
  TagType_enumtype_OpenRatioByVolume = 2043,
  TagType_enumtype_CloseRatioByMoney = 2044,
  TagType_enumtype_CloseRatioByVolume = 2045,
  TagType_enumtype_CloseTodayRatioByMoney = 2046,
  TagType_enumtype_CloseTodayRatioByVolume = 2047,
  TagType_enumtype_StrikeRatioByMoney = 2048,
  TagType_enumtype_StrikeRatioByVolume = 2049,
  TagType_enumtype_HedgeFlag = 2050,
  TagType_enumtype_LongMarginRatioByMoney = 2051,
  TagType_enumtype_LongMarginRatioByVolume = 2052,
  TagType_enumtype_ShortMarginRatioByMoney = 2053,
  TagType_enumtype_ShortMarginRatioByVolume = 2054,
  TagType_enumtype_IsRelative = 2055,
  TagType_enumtype_FixedMargin = 2056,
  TagType_enumtype_MiniMargin = 2057,
  TagType_enumtype_Royalty = 2058,
  TagType_enumtype_ExchFixedMargin = 2059,
  TagType_enumtype_ExchMiniMargin = 2060,
  TagType_enumtype_TradingDay = 2061,
  TagType_enumtype_LastPrice = 2062,
  TagType_enumtype_PreSettlementPrice = 2063,
  TagType_enumtype_PreClosePrice = 2064,
  TagType_enumtype_PreOpenInterest = 2065,
  TagType_enumtype_OpenPrice = 2066,
  TagType_enumtype_HighestPrice = 2067,
  TagType_enumtype_LowestPrice = 2068,
  TagType_enumtype_Volume = 2069,
  TagType_enumtype_Turnover = 2070,
  TagType_enumtype_ClosePrice = 2072,
  TagType_enumtype_SettlementPrice = 2073,
  TagType_enumtype_UpperLimitPrice = 2074,
  TagType_enumtype_LowerLimitPrice = 2075,
  TagType_enumtype_PreDelta = 2076,
  TagType_enumtype_CurrDelta = 2077,
  TagType_enumtype_UpdateTime = 2078,
  TagType_enumtype_UpdateMillisec = 2079,
  TagType_enumtype_BidPrice1 = 2080,
  TagType_enumtype_BidVolume1 = 2081,
  TagType_enumtype_AskPrice1 = 2082,
  TagType_enumtype_AskVolume1 = 2083,
  TagType_enumtype_BidPrice2 = 2084,
  TagType_enumtype_BidVolume2 = 2085,
  TagType_enumtype_AskPrice2 = 2086,
  TagType_enumtype_AskVolume2 = 2087,
  TagType_enumtype_BidPrice3 = 2088,
  TagType_enumtype_BidVolume3 = 2089,
  TagType_enumtype_AskPrice3 = 2090,
  TagType_enumtype_AskVolume3 = 2091,
  TagType_enumtype_BidPrice4 = 2092,
  TagType_enumtype_BidVolume4 = 2093,
  TagType_enumtype_AskPrice4 = 2094,
  TagType_enumtype_AskVolume4 = 2095,
  TagType_enumtype_BidPrice5 = 2096,
  TagType_enumtype_BidVolume5 = 2097,
  TagType_enumtype_AskPrice5 = 2098,
  TagType_enumtype_AskVolume5 = 2099,
  TagType_enumtype_AveragePrice = 2100,
  TagType_enumtype_ActionDay = 2101,
  TagType_enumtype_ForQuoteSysID = 2102,
  TagType_enumtype_ForQuoteTime = 2103,
  TagType_enumtype_QuoteRef = 2104,
  TagType_enumtype_UserID = 2105,
  TagType_enumtype_BidPrice = 2106,
  TagType_enumtype_BidVolume = 2107,
  TagType_enumtype_AskPrice = 2108,
  TagType_enumtype_AskVolume = 2109,
  TagType_enumtype_RequestID = 2110,
  TagType_enumtype_BusinessUnit = 2111,
  TagType_enumtype_BidOffsetFlag = 2112,
  TagType_enumtype_AskOffsetFlag = 2113,
  TagType_enumtype_BidHedgeFlag = 2114,
  TagType_enumtype_AskHedgeFlag = 2115,
  TagType_enumtype_QuoteLocalID = 2116,
  TagType_enumtype_InstallID = 2117,
  TagType_enumtype_NotifySequence = 2118,
  TagType_enumtype_OrderSubmitStatus = 2119,
  TagType_enumtype_SettlementID = 2120,
  TagType_enumtype_InsertTime = 2121,
  TagType_enumtype_CancelTime = 2122,
  TagType_enumtype_SequenceNo = 2124,
  TagType_enumtype_BidOrderSysID = 2125,
  TagType_enumtype_AskOrderSysID = 2126,
  TagType_enumtype_UserProductInfo = 2127,
  TagType_enumtype_StatusMsg = 2128,
  TagType_enumtype_ActiveUserID = 2129,
  TagType_enumtype_BrokerQuoteSeq = 2130,
  TagType_enumtype_OrderRef = 2131,
  TagType_enumtype_OrderPriceType = 2132,
  TagType_enumtype_Direction = 2133,
  TagType_enumtype_CombOffsetFlag = 2134,
  TagType_enumtype_CombHedgeFlag = 2135,
  TagType_enumtype_LimitPrice = 2136,
  TagType_enumtype_VolumeTotalOriginal = 2137,
  TagType_enumtype_TimeCondition = 2138,
  TagType_enumtype_GTDDate = 2139,
  TagType_enumtype_VolumeCondition = 2140,
  TagType_enumtype_MinVolume = 2141,
  TagType_enumtype_ContingentCondition = 2142,
  TagType_enumtype_StopPrice = 2143,
  TagType_enumtype_ForceCloseReason = 2144,
  TagType_enumtype_IsAutoSuspend = 2145,
  TagType_enumtype_OrderLocalID = 2146,
  TagType_enumtype_ParticipantID = 2147,
  TagType_enumtype_ClientID = 2148,
  TagType_enumtype_Null = 2149,
  TagType_enumtype_Null2 = 2150,
  TagType_enumtype_OrderSysID = 2151,
  TagType_enumtype_OrderSource = 2152,
  TagType_enumtype_OrderStatus = 2153,
  TagType_enumtype_OrderType = 2154,
  TagType_enumtype_VolumeTraded = 2155,
  TagType_enumtype_VolumeTotal = 2156,
  TagType_enumtype_ActiveTime = 2157,
  TagType_enumtype_QuoteSysID = 2158,
  TagType_enumtype_SuspendTime = 2159,
  TagType_enumtype_Null3 = 2160,
  TagType_enumtype_ActiveTraderID = 2161,
  TagType_enumtype_ClearingPartID = 2162,
  TagType_enumtype_FrontID = 2163,
  TagType_enumtype_SessionID = 2164,
  TagType_enumtype_UserForceClose = 2165,
  TagType_enumtype_RelativeOrderSysID = 2166,
  TagType_enumtype_ZCETotalTradedVolume = 2167,
  TagType_enumtype_IsSwapOrder = 2168,
  TagType_enumtype_TradeID = 2169,
  TagType_enumtype_TradingRole = 2170,
  TagType_enumtype_OffsetFlag = 2171,
  TagType_enumtype_VolumeChange = 2173,
  TagType_enumtype_TradeTime = 2175,
  TagType_enumtype_TradeType = 2176,
  TagType_enumtype_PriceSource = 2177,
  TagType_enumtype_TraderID = 2178,
  TagType_enumtype_BrokerOrderSeq = 2179,
  TagType_enumtype_TradeSource = 2180,
  TagType_enumtype_Null4 = 2181,
  TagType_enumtype_CombInstrumentID = 2182,
  TagType_enumtype_CloseProfitByDate = 2183,
  TagType_enumtype_CloseProfitByTrade = 2184,
  TagType_enumtype_PositionProfitByDate = 2185,
  TagType_enumtype_PositionProfitByTrade = 2186,
  TagType_enumtype_Margin = 2187,
  TagType_enumtype_MarginRateByMoney = 2188,
  TagType_enumtype_MarginRateByVolume = 2189,
  TagType_enumtype_StrategyID = 2190,
  TagType_enumtype_PositionDate = 2191,
  TagType_enumtype_TodayPosition = 2192,
  TagType_enumtype_YdPosition = 2193,
  TagType_enumtype_Position = 2194,
  TagType_enumtype_LongFrozen = 2195,
  TagType_enumtype_ShortFrozen = 2196,
  TagType_enumtype_LongFrozenAmount = 2197,
  TagType_enumtype_ShortFrozenAmount = 2198,
  TagType_enumtype_OpenVolume = 2199,
  TagType_enumtype_CloseVolume = 2200,
  TagType_enumtype_OpenAmount = 2201,
  TagType_enumtype_CloseAmount = 2202,
  TagType_enumtype_PositionCost = 2203,
  TagType_enumtype_PreMargin = 2204,
  TagType_enumtype_UseMargin = 2205,
  TagType_enumtype_FrozenMargin = 2206,
  TagType_enumtype_FrozenCash = 2207,
  TagType_enumtype_FrozenCommission = 2208,
  TagType_enumtype_CashIn = 2209,
  TagType_enumtype_ExchMargin = 2211,
  TagType_enumtype_PositionProfit = 2212,
  TagType_enumtype_OpenCost = 2213,
  TagType_enumtype_CombPosition = 2214,
  TagType_enumtype_CombLongFrozen = 2215,
  TagType_enumtype_CombShortFrozen = 2216,
  TagType_enumtype_StrikeFrozen = 2217,
  TagType_enumtype_StrikeFrozenAmount = 2218,
  TagType_enumtype_AbandonFrozen = 2219,
  TagType_enumtype_AccountID = 2220,
  TagType_enumtype_PreMortgage = 2221,
  TagType_enumtype_PreCredit = 2222,
  TagType_enumtype_PreDeposit = 2223,
  TagType_enumtype_InsertDate = 2224,
  TagType_enumtype_PreBalance = 2225,
  TagType_enumtype_InterestBase = 2226,
  TagType_enumtype_Interest = 2227,
  TagType_enumtype_Deposit = 2228,
  TagType_enumtype_Withdraw = 2229,
  TagType_enumtype_CurrMargin = 2230,
  TagType_enumtype_Null5 = 2231,
  TagType_enumtype_CloseProfit = 2232,
  TagType_enumtype_Balance = 2233,
  TagType_enumtype_Available = 2234,
  TagType_enumtype_WithdrawQuota = 2235,
  TagType_enumtype_Reserve = 2236,
  TagType_enumtype_Credit = 2237,
  TagType_enumtype_Mortgage = 2238,
  TagType_enumtype_ExchangeMargin = 2239,
  TagType_enumtype_DeliveryMargin = 2240,
  TagType_enumtype_ExchangeDeliveryMargin = 2241,
  TagType_enumtype_ReserveBalance = 2242,
  TagType_enumtype_CurrencyID = 2243,
  TagType_enumtype_PreFundMortgageIn = 2244,
  TagType_enumtype_PreFundMortgageOut = 2245,
  TagType_enumtype_FundMortgageIn = 2246,
  TagType_enumtype_FundMortgageOut = 2247,
  TagType_enumtype_FundMortgageAvailable = 2248,
  TagType_enumtype_MortgageableFund = 2249,
  TagType_enumtype_SpecProductMargin = 2250,
  TagType_enumtype_SpecProductFrozenMargin = 2251,
  TagType_enumtype_SpecProductCommission = 2252,
  TagType_enumtype_SpecProductFrozenCommission = 2253,
  TagType_enumtype_SpecProductPositionProfit = 2254,
  TagType_enumtype_SpecProductCloseProfit = 2255,
  TagType_enumtype_SpecProductPositionProfitByAlg = 2256,
  TagType_enumtype_SpecProductExchangeMargin = 2257,
  TagType_enumtype_OptionCloseProfit = 2258,
  TagType_enumtype_OptionValue = 2259,
  TagType_enumtype_OperCode = 2260,
  TagType_enumtype_OperName = 2261,
  TagType_enumtype_Mobile = 2262,
  TagType_enumtype_Note = 2263,
  TagType_enumtype_Passwd = 2264,
  TagType_enumtype_OperType = 2265,
  TagType_enumtype_IfRestrict = 2266,
  TagType_enumtype_FailNumber = 2267,
  TagType_enumtype_LoginIp = 2268,
  TagType_enumtype_LoginMacAddr = 2269,
  TagType_enumtype_LoginTime = 2270,
  TagType_enumtype_LoginDate = 2271,
  TagType_enumtype_OperatorToken = 2272,
  TagType_enumtype_Smatrix = 2273,
  TagType_enumtype_ForceLogoutReason = 2274,
  TagType_enumtype_FundAccount = 2275,
  TagType_enumtype_Status = 2276,
  TagType_enumtype_AccountName = 2277,
  TagType_enumtype_LogoutDate = 2278,
  TagType_enumtype_LogoutTime = 2279,
  TagType_enumtype_StrategyName = 2280,
  TagType_enumtype_StrategyValueType = 2281,
  TagType_enumtype_StrategyValue = 2282,
  TagType_enumtype_StrategyPlugin = 2283,
  TagType_enumtype_Expiry = 2284,
  TagType_enumtype_ActionFlag = 2300,
  TagType_enumtype_ErrorID = 2301,
  TagType_enumtype_ErrorMsg = 2302,
  TagType_enumtype_IsLast = 2303,
  TagType_enumtype_NRequestID = 2304,
  TagType_enumtype_OrderActionRef = 2305,
  TagType_enumtype_ForQuoteRef = 2308,
  TagType_enumtype_QuoteActionRef = 2309,
  TagType_enumtype_ActionDate = 2310,
  TagType_enumtype_ActionTime = 2311,
  TagType_enumtype_ActionLocalID = 2312,
  TagType_enumtype_OrderActionStatus = 2313,
  TagType_enumtype_PosiDirection = 2314,
  TagType_enumtype_InsertTimeStart = 2315,
  TagType_enumtype_InsertTimeEnd = 2316,
  TagType_enumtype_InterfaceProductInfo = 2318,
  TagType_enumtype_ProtocolInfo = 2319,
  TagType_enumtype_MacAddress = 2320,
  TagType_enumtype_OneTimePassword = 2321,
  TagType_enumtype_ClientIPAddress = 2322,
  TagType_enumtype_ForQuoteLocalID = 2324,
  TagType_enumtype_ForQuoteStatus = 2325,
  TagType_enumtype_BrokerForQutoSeq = 2326,
  TagType_enumtype_MaxOrderRef = 2327,
  TagType_enumtype_SHFETime = 2328,
  TagType_enumtype_DCETime = 2329,
  TagType_enumtype_CZCETime = 2330,
  TagType_enumtype_FFEXTime = 2331,
  TagType_enumtype_INETime = 2332,
  TagType_enumtype_PositionCtrl = 2333,
  TagType_enumtype_TheoPx = 2334,
  TagType_enumtype_QuoteBidPx = 2335,
  TagType_enumtype_QuoteBidSz = 2336,
  TagType_enumtype_QuoteAskPx = 2337,
  TagType_enumtype_QuoteAskSz = 2338,
  TagType_enumtype_BidOrigSz = 2339,
  TagType_enumtype_AskOrigSz = 2340,
  TagType_enumtype_LocalTimeShift = 2341,
  TagType_enumtype_IsSpread = 2342,
  TagType_enumtype_IsCombo = 2343,
  TagType_enumtype_IsInit = 2344,
  TagType_enumtype_PrevTradingDay = 2500,
  TagType_enumtype_PrevVolume = 2501,
  TagType_enumtype_PrevTurnover = 2502,
  TagType_enumtype_PrevAvgPx = 2503,
  TagType_enumtype_AvgVol = 2504,
  TagType_enumtype_PrevAvgVol = 2505,
  TagType_enumtype_SettleVol = 2506,
  TagType_enumtype_PrevSettleVol = 2507,
  TagType_enumtype_LastAvgPx = 2601,
  TagType_enumtype_LastVolume = 2602,
  TagType_enumtype_LastBuyVolume = 2603,
  TagType_enumtype_LastSellVolume = 2604,
  TagType_enumtype_HighPx1Min = 2605,
  TagType_enumtype_LowPx1Min = 2606,
  TagType_enumtype_HighPx2Min = 2607,
  TagType_enumtype_LowPx2Min = 2608,
  TagType_enumtype_HighPx5Min = 2609,
  TagType_enumtype_LowPx5Min = 2610,
  TagType_enumtype_SumBuyPxVolume = 2611,
  TagType_enumtype_SumSellPxVolume = 2612,
  TagType_enumtype_NBuy = 2613,
  TagType_enumtype_NSell = 2614,
  TagType_enumtype_NBookUpdates = 2615,
  TagType_enumtype_BeginDT = 2616,
  TagType_enumtype_EndDT = 2617,
  TagType_enumtype_BeginDTStr = 2618,
  TagType_enumtype_EndDTStr = 2619,
  TagType_enumtype_DTStr = 2620,
  TagType_enumtype_BuyTurnover = 2621,
  TagType_enumtype_SellTurnover = 2622,
  TagType_enumtype_BSTDiff = 2623,
  TagType_enumtype_LastTurnover = 2624,
  TagType_enumtype_LastBuyTurnover = 2625,
  TagType_enumtype_LastSellTurnover = 2626,
  TagType_enumtype_LastBSTDiff = 2627,
  TagType_enumtype_TotTurnover = 2628,
  TagType_enumtype_TotBuyTurnover = 2629,
  TagType_enumtype_TotSellTurnover = 2630,
  TagType_enumtype_TotBSTDiff = 2631,
  TagType_enumtype_DateStr = 2632,
  TagType_enumtype_TimeStr = 2633,
  TagType_enumtype_DateTimeStr = 2634,
  TagType_enumtype_DVolume = 2635,
  TagType_enumtype_DTotVolume = 2636,
  TagType_enumtype_LocalToUtcOffsetHours = 2640,
  TagType_enumtype_BeijingToUtcOffsetHours = 2641,
  TagType_enumtype_ChicagoToUtcOffsetHours = 2642,
  TagType_enumtype_NewyorkToUtcOffsetHours = 2643,
  TagType_enumtype_DaylightSavingFlag = 2644,
  TagType_enumtype_StartFlag = 2650,
  TagType_enumtype_StartTopicMgrFlag = 2651,
  TagType_enumtype_ReqAllInstrsFlag = 2652,
  TagType_enumtype_SubAllInstrsMktDataFlag = 2653,
  TagType_enumtype_UpdateInstrFlag = 2654,
  TagType_enumtype_LogMktDataFlag = 2655,
  TagType_enumtype_LogOrderFlag = 2656,
  TagType_enumtype_LogBarFlag = 2657,
  TagType_enumtype_AddingInstrOnRspFlag = 2658,
  TagType_enumtype_AddAllIndicatorFlag = 2659,
  TagType_enumtype_LoadHistForIndicatorFlag = 2660,
  TagType_enumtype_SaveBar60sToMongoFlag = 2661,
  TagType_enumtype_SaveBar60sToSqlFlag = 2662,
  TagType_enumtype_InstrIndicatorSpans = 2663,
  TagType_enumtype_MktDataInstruments = 2664,
  TagType_enumtype_TradingInstruments = 2665,
  TagType_enumtype_MaxSeqIdPerSecond = 2666,
  TagType_enumtype_MaxOrdersSent = 2667,
  TagType_enumtype_MaxOrdersCxled = 2668,
  TagType_enumtype_Areas = 2669,
  TagType_enumtype_AreasIntdate = 2670,
  TagType_enumtype_AreasStr = 2671,
  TagType_enumtype_Concepts = 2672,
  TagType_enumtype_ConceptsIntdate = 2673,
  TagType_enumtype_ConceptsStr = 2674,
  TagType_enumtype_Industries = 2675,
  TagType_enumtype_IndustriesIntdate = 2676,
  TagType_enumtype_IndustriesStr = 2677,
  TagType_enumtype_ConId = 3001,
  TagType_enumtype_LastTradeDate = 3002,
  TagType_enumtype_Right = 3003,
  TagType_enumtype_PrimaryExchange = 3004,
  TagType_enumtype_LocalSymbol = 3005,
  TagType_enumtype_TradingClass = 3006,
  TagType_enumtype_IncludeExpired = 3007,
  TagType_enumtype_ComboLegsDescrip = 3008,
  TagType_enumtype_MarketName = 3009,
  TagType_enumtype_OrderTypes = 3010,
  TagType_enumtype_ValidExchanges = 3011,
  TagType_enumtype_UnderConId = 3012,
  TagType_enumtype_LongName = 3013,
  TagType_enumtype_ContractMonth = 3014,
  TagType_enumtype_Industry = 3015,
  TagType_enumtype_Category = 3016,
  TagType_enumtype_SubCategory = 3017,
  TagType_enumtype_TimeZoneId = 3018,
  TagType_enumtype_TradingHours = 3019,
  TagType_enumtype_LiquidHours = 3020,
  TagType_enumtype_EvRule = 3021,
  TagType_enumtype_EvMultiplier = 3022,
  TagType_enumtype_Cusip = 3023,
  TagType_enumtype_Ratings = 3024,
  TagType_enumtype_DescAppend = 3025,
  TagType_enumtype_BondType = 3026,
  TagType_enumtype_CouponType = 3027,
  TagType_enumtype_Callable = 3028,
  TagType_enumtype_Putable = 3029,
  TagType_enumtype_Coupon = 3030,
  TagType_enumtype_Convertible = 3031,
  TagType_enumtype_Maturity = 3032,
  TagType_enumtype_NextOptionDate = 3033,
  TagType_enumtype_NextOptionType = 3034,
  TagType_enumtype_NextOptionPartial = 3035,
  TagType_enumtype_Notes = 3036,
  TagType_enumtype_Rank = 3037,
  TagType_enumtype_Distance = 3038,
  TagType_enumtype_Benchmark = 3039,
  TagType_enumtype_Projection = 3040,
  TagType_enumtype_LegsStr = 3041,
  TagType_enumtype_Time = 3042,
  TagType_enumtype_Shares = 3043,
  TagType_enumtype_PermId = 3044,
  TagType_enumtype_Liquidation = 3045,
  TagType_enumtype_InitMargin = 3046,
  TagType_enumtype_MaintMargin = 3047,
  TagType_enumtype_EquityWithLoan = 3048,
  TagType_enumtype_MinCommission = 3049,
  TagType_enumtype_MaxCommission = 3050,
  TagType_enumtype_CommissionCurrency = 3051,
  TagType_enumtype_WarningText = 3052,
  TagType_enumtype_NumberOfRows = 3053,
  TagType_enumtype_LocationCode = 3054,
  TagType_enumtype_ScanCode = 3055,
  TagType_enumtype_AbovePrice = 3056,
  TagType_enumtype_BelowPrice = 3057,
  TagType_enumtype_AboveVolume = 3058,
  TagType_enumtype_MarketCapAbove = 3059,
  TagType_enumtype_MarketCapBelow = 3060,
  TagType_enumtype_MoodyRatingAbove = 3061,
  TagType_enumtype_MoodyRatingBelow = 3062,
  TagType_enumtype_SpRatingAbove = 3063,
  TagType_enumtype_SpRatingBelow = 3064,
  TagType_enumtype_MaturityDateAbove = 3065,
  TagType_enumtype_MaturityDateBelow = 3066,
  TagType_enumtype_CouponRateAbove = 3067,
  TagType_enumtype_CouponRateBelow = 3068,
  TagType_enumtype_ExcludeConvertible = 3069,
  TagType_enumtype_AverageOptionVolumeAbove = 3070,
  TagType_enumtype_ScannerSettingPairs = 3071,
  TagType_enumtype_StockTypeFilter = 3072,
  TagType_enumtype_ComboLegsStr = 3073,
  TagType_enumtype_UndlyCompStr = 3074,
  TagType_enumtype_SecIdListStr = 3075,
  TagType_enumtype_Action = 3080,
  TagType_enumtype_TotalQuantity = 3081,
  TagType_enumtype_AuxPrice = 3082,
  TagType_enumtype_ActiveStartTime = 3083,
  TagType_enumtype_ActiveStopTime = 3084,
  TagType_enumtype_OCAGroup = 3085,
  TagType_enumtype_OCAType = 3086,
  TagType_enumtype_Transmit = 3087,
  TagType_enumtype_ParentId = 3088,
  TagType_enumtype_BlockOrder = 3089,
  TagType_enumtype_SweepToFill = 3090,
  TagType_enumtype_DisplaySize = 3091,
  TagType_enumtype_TriggerMethod = 3092,
  TagType_enumtype_OutsideRth = 3093,
  TagType_enumtype_Hidden = 3094,
  TagType_enumtype_GoodAfterTime = 3095,
  TagType_enumtype_GoodTillDate = 3096,
  TagType_enumtype_Rule80A = 3097,
  TagType_enumtype_AllOrNone = 3098,
  TagType_enumtype_PercentOffset = 3099,
  TagType_enumtype_OverridePercent = 3100,
  TagType_enumtype_TrailStopPrice = 3101,
  TagType_enumtype_TrailingPercent = 3102,
  TagType_enumtype_FaMethod = 3103,
  TagType_enumtype_FaGroup = 3104,
  TagType_enumtype_FaProfile = 3105,
  TagType_enumtype_FaPercentage = 3106,
  TagType_enumtype_OpenClose = 3107,
  TagType_enumtype_Origin = 3108,
  TagType_enumtype_ShortSaleSlot = 3109,
  TagType_enumtype_DesignatedLocation = 3110,
  TagType_enumtype_ExemptCode = 3111,
  TagType_enumtype_DiscretionaryAmt = 3112,
  TagType_enumtype_ETradeOnly = 3113,
  TagType_enumtype_FirmQuoteOnly = 3114,
  TagType_enumtype_NbboPriceCap = 3115,
  TagType_enumtype_OptOutSmartRouting = 3116,
  TagType_enumtype_AuctionStratety = 3117,
  TagType_enumtype_StartingPrice = 3118,
  TagType_enumtype_StockRefPrice = 3119,
  TagType_enumtype_StockRangeLower = 3120,
  TagType_enumtype_StockRangeUpper = 3121,
  TagType_enumtype_RandomizeSize = 3122,
  TagType_enumtype_RandomizePrice = 3123,
  TagType_enumtype_Volatility = 3124,
  TagType_enumtype_VolatilityType = 3125,
  TagType_enumtype_DeltaNeutralOrderType = 3126,
  TagType_enumtype_DeltaNeutralAuxPrice = 3127,
  TagType_enumtype_DeltaNeutralConId = 3128,
  TagType_enumtype_DeltaNeutralSettlingFirm = 3129,
  TagType_enumtype_DeltaNeutralClearingAccount = 3130,
  TagType_enumtype_DeltaNeutralClearingIntent = 3131,
  TagType_enumtype_DeltaNeutralOpenClose = 3132,
  TagType_enumtype_DeltaNeutralShortSale = 3133,
  TagType_enumtype_DeltaNeutralShortSaleSlot = 3134,
  TagType_enumtype_DeltaNeutralDesignatedLocation = 3135,
  TagType_enumtype_ContinuousUpdate = 3136,
  TagType_enumtype_ReferencePriceType = 3137,
  TagType_enumtype_BasisPoints = 3138,
  TagType_enumtype_BasisPointsType = 3139,
  TagType_enumtype_ScaleInitLevelSize = 3140,
  TagType_enumtype_ScaleSubsLevelSize = 3141,
  TagType_enumtype_ScalePriceIncrement = 3142,
  TagType_enumtype_ScalePriceAdjustValue = 3143,
  TagType_enumtype_ScalePriceAdjustInterval = 3144,
  TagType_enumtype_ScaleProfitOffset = 3145,
  TagType_enumtype_ScaleAutoReset = 3146,
  TagType_enumtype_ScaleInitPosition = 3147,
  TagType_enumtype_ScaleInitFillQty = 3148,
  TagType_enumtype_ScaleRandomPercent = 3149,
  TagType_enumtype_ScaleTable = 3150,
  TagType_enumtype_HedgeType = 3151,
  TagType_enumtype_HedgeParam = 3152,
  TagType_enumtype_SettlingFirm = 3153,
  TagType_enumtype_ClearingAccount = 3154,
  TagType_enumtype_ClearingIntent = 3155,
  TagType_enumtype_AlgoStrategy = 3156,
  TagType_enumtype_AlgoId = 3157,
  TagType_enumtype_WhatIf = 3158,
  TagType_enumtype_NotHeld = 3159,
  TagType_enumtype_Solicited = 3160,
  TagType_enumtype_IntDate = 3180,
  TagType_enumtype_HasGaps = 3181,
  TagType_enumtype_BarCount = 3182,
  TagType_enumtype_Amount = 3183,
  TagType_enumtype_VWAP = 3184,
  TagType_enumtype_DayVWAP = 3185,
  TagType_enumtype_ServerSettingName = 3190,
  TagType_enumtype_FrontIDMd = 3191,
  TagType_enumtype_FrontIDTrader = 3192,
  TagType_enumtype_MdApiType = 3193,
  TagType_enumtype_TrdApiType = 3194,
  TagType_enumtype_MdTrdApiType = 3195,
  TagType_enumtype_MdTrdApiTypeMask = 3196,
  TagType_enumtype_MdServerName = 3197,
  TagType_enumtype_TrdServerName = 3198,
  TagType_enumtype_MdTrdServerName = 3199,
  TagType_enumtype_BrokerIDMd = 3200,
  TagType_enumtype_BrokerIDTrader = 3201,
  TagType_enumtype_TimerTaskSeconds = 3202,
  TagType_enumtype_BrokerApiType = 3203,
  TagType_enumtype_BrokerServerType = 3204,
  TagType_enumtype_MdServerSettingName = 3205,
  TagType_enumtype_TrdServerSettingName = 3206,
  TagType_enumtype_MdTrdServerSettingName = 3207,
  TagType_enumtype_AccountTypeMask = 3208,
  TagType_enumtype_rt_date = 3251,
  TagType_enumtype_rt_time = 3252,
  TagType_enumtype_rt_pre_close = 3253,
  TagType_enumtype_rt_open = 3254,
  TagType_enumtype_rt_high = 3255,
  TagType_enumtype_rt_low = 3256,
  TagType_enumtype_rt_last = 3257,
  TagType_enumtype_rt_last_amt = 3258,
  TagType_enumtype_rt_last_vol = 3259,
  TagType_enumtype_rt_latest = 3260,
  TagType_enumtype_rt_vol = 3261,
  TagType_enumtype_rt_amt = 3262,
  TagType_enumtype_rt_chg = 3263,
  TagType_enumtype_rt_pct_chg = 3264,
  TagType_enumtype_rt_high_limit = 3265,
  TagType_enumtype_rt_low_limit = 3266,
  TagType_enumtype_rt_swing = 3267,
  TagType_enumtype_rt_vwap = 3268,
  TagType_enumtype_rt_upward_vol = 3269,
  TagType_enumtype_rt_downward_vol = 3270,
  TagType_enumtype_rt_bsize_total = 3271,
  TagType_enumtype_rt_asize_total = 3272,
  TagType_enumtype_rt_vol_ratio = 3273,
  TagType_enumtype_rt_turn = 3274,
  TagType_enumtype_rt_pre_iopv = 3275,
  TagType_enumtype_rt_iopv = 3276,
  TagType_enumtype_rt_mkt_cap = 3277,
  TagType_enumtype_rt_float_mkt_cap = 3278,
  TagType_enumtype_rt_pre_oi = 3279,
  TagType_enumtype_rt_oi = 3280,
  TagType_enumtype_rt_oi_chg = 3281,
  TagType_enumtype_rt_pre_settle = 3282,
  TagType_enumtype_rt_settle = 3283,
  TagType_enumtype_rt_discount = 3284,
  TagType_enumtype_rt_discount_ratio = 3285,
  TagType_enumtype_rt_pe_ttm = 3286,
  TagType_enumtype_rt_pb_lf = 3287,
  TagType_enumtype_rt_rise_days = 3288,
  TagType_enumtype_rt_spread = 3289,
  TagType_enumtype_rt_susp_flag = 3290,
  TagType_enumtype_rt_high_52wk = 3291,
  TagType_enumtype_rt_low_52wk = 3292,
  TagType_enumtype_rt_pct_chg_1min = 3293,
  TagType_enumtype_rt_pct_chg_3min = 3294,
  TagType_enumtype_rt_pct_chg_5d = 3295,
  TagType_enumtype_rt_pct_chg_10d = 3296,
  TagType_enumtype_rt_pct_chg_20d = 3297,
  TagType_enumtype_rt_pct_chg_60d = 3298,
  TagType_enumtype_rt_pct_chg_120d = 3299,
  TagType_enumtype_rt_pct_chg_250d = 3300,
  TagType_enumtype_rt_pct_chg_ytd = 3301,
  TagType_enumtype_rt_last_dp = 3302,
  TagType_enumtype_rt_last_cp = 3303,
  TagType_enumtype_rt_last_ytm = 3304,
  TagType_enumtype_rt_close_dp = 3305,
  TagType_enumtype_rt_ask1 = 3306,
  TagType_enumtype_rt_ask2 = 3307,
  TagType_enumtype_rt_ask3 = 3308,
  TagType_enumtype_rt_ask4 = 3309,
  TagType_enumtype_rt_ask5 = 3310,
  TagType_enumtype_rt_ask6 = 3311,
  TagType_enumtype_rt_ask7 = 3312,
  TagType_enumtype_rt_ask8 = 3313,
  TagType_enumtype_rt_ask9 = 3314,
  TagType_enumtype_rt_ask10 = 3315,
  TagType_enumtype_rt_bid1 = 3316,
  TagType_enumtype_rt_bid2 = 3317,
  TagType_enumtype_rt_bid3 = 3318,
  TagType_enumtype_rt_bid4 = 3319,
  TagType_enumtype_rt_bid5 = 3320,
  TagType_enumtype_rt_bid6 = 3321,
  TagType_enumtype_rt_bid7 = 3322,
  TagType_enumtype_rt_bid8 = 3323,
  TagType_enumtype_rt_bid9 = 3324,
  TagType_enumtype_rt_bid10 = 3325,
  TagType_enumtype_rt_bsize1 = 3326,
  TagType_enumtype_rt_bsize2 = 3327,
  TagType_enumtype_rt_bsize3 = 3328,
  TagType_enumtype_rt_bsize4 = 3329,
  TagType_enumtype_rt_bsize5 = 3330,
  TagType_enumtype_rt_bsize6 = 3331,
  TagType_enumtype_rt_bsize7 = 3332,
  TagType_enumtype_rt_bsize8 = 3333,
  TagType_enumtype_rt_bsize9 = 3334,
  TagType_enumtype_rt_bsize10 = 3335,
  TagType_enumtype_rt_asize1 = 3336,
  TagType_enumtype_rt_asize2 = 3337,
  TagType_enumtype_rt_asize3 = 3338,
  TagType_enumtype_rt_asize4 = 3339,
  TagType_enumtype_rt_asize5 = 3340,
  TagType_enumtype_rt_asize6 = 3341,
  TagType_enumtype_rt_asize7 = 3342,
  TagType_enumtype_rt_asize8 = 3343,
  TagType_enumtype_rt_asize9 = 3344,
  TagType_enumtype_rt_asize10 = 3345,
  TagType_enumtype_rt_ma_5d = 3346,
  TagType_enumtype_rt_ma_10d = 3347,
  TagType_enumtype_rt_ma_20d = 3348,
  TagType_enumtype_rt_ma_60d = 3349,
  TagType_enumtype_rt_ma_120d = 3350,
  TagType_enumtype_rt_ma_250d = 3351,
  TagType_enumtype_rt_delta = 3352,
  TagType_enumtype_rt_gamma = 3353,
  TagType_enumtype_rt_vega = 3354,
  TagType_enumtype_rt_theta = 3355,
  TagType_enumtype_rt_rho = 3356,
  TagType_enumtype_rt_imp_volatility = 3357,
  TagType_enumtype_rt_mf_ratio = 3358,
  TagType_enumtype_rt_mf_ratio_5d = 3359,
  TagType_enumtype_rt_mf_ratio_10d = 3360,
  TagType_enumtype_rt_mf_ratio_20d = 3361,
  TagType_enumtype_rt_mf_ratio_60d = 3362,
  TagType_enumtype_rt_mf_amt = 3363,
  TagType_enumtype_rt_mf_amt_5d = 3364,
  TagType_enumtype_rt_mf_amt_10d = 3365,
  TagType_enumtype_rt_mf_amt_20d = 3366,
  TagType_enumtype_rt_mf_amt_60d = 3367,
  TagType_enumtype_rt_bidvol = 3368,
  TagType_enumtype_rt_askvol = 3369,
  TagType_enumtype_rt_insti_vip_bid = 3370,
  TagType_enumtype_rt_insti_vip_ask = 3371,
  TagType_enumtype_rt_insti_vip_netinflow_ratio = 3372,
  TagType_enumtype_rt_trans_sum_vol = 3373,
  TagType_enumtype_rt_insti_buy_vol = 3374,
  TagType_enumtype_rt_insti_sell_vol = 3375,
  TagType_enumtype_rt_vip_buy_vol = 3376,
  TagType_enumtype_rt_vip_sell_vol = 3377,
  TagType_enumtype_rt_mid_buy_vol = 3378,
  TagType_enumtype_rt_mid_sell_vol = 3379,
  TagType_enumtype_rt_indi_buy_vol = 3380,
  TagType_enumtype_rt_indi_sell_vol = 3381,
  TagType_enumtype_rt_insti_netbuy_vol = 3382,
  TagType_enumtype_rt_vip_netbuy_vol = 3383,
  TagType_enumtype_rt_mid_netbuy_vol = 3384,
  TagType_enumtype_rt_indi_netbuy_vol = 3385,
  TagType_enumtype_rt_insti_total_bid = 3386,
  TagType_enumtype_rt_insti_total_ask = 3387,
  TagType_enumtype_rt_vip_total_bid = 3388,
  TagType_enumtype_rt_vip_total_ask = 3389,
  TagType_enumtype_rt_mid_total_bid = 3390,
  TagType_enumtype_rt_mid_total_ask = 3391,
  TagType_enumtype_rt_indi_total_bid = 3392,
  TagType_enumtype_rt_indi_total_ask = 3393,
  TagType_enumtype_rt_insti_inflow = 3394,
  TagType_enumtype_rt_vip_inflow = 3395,
  TagType_enumtype_rt_mid_inflow = 3396,
  TagType_enumtype_rt_indi_inflow = 3397,
  TagType_enumtype_rt_insti_buy_amt = 3398,
  TagType_enumtype_rt_insti_sell_amt = 3399,
  TagType_enumtype_rt_vip_buy_amt = 3400,
  TagType_enumtype_rt_vip_sell_amt = 3401,
  TagType_enumtype_rt_mid_buy_amt = 3402,
  TagType_enumtype_rt_mid_sell_amt = 3403,
  TagType_enumtype_rt_indi_buy_amt = 3404,
  TagType_enumtype_rt_indi_sell_amt = 3405,
  TagType_enumtype_rt_insti_activebuy_amt = 3406,
  TagType_enumtype_rt_vip_activebuy_amt = 3407,
  TagType_enumtype_rt_mid_activebuy_amt = 3408,
  TagType_enumtype_rt_indi_activebuy_amt = 3409,
  TagType_enumtype_rt_insti_activebuy_vol = 3410,
  TagType_enumtype_rt_vip_activebuy_vol = 3411,
  TagType_enumtype_rt_mid_activebuy_vol = 3412,
  TagType_enumtype_rt_indi_activebuy_vol = 3413,
  TagType_enumtype_rt_insti_activesell_amt = 3414,
  TagType_enumtype_rt_vip_activesell_amt = 3415,
  TagType_enumtype_rt_mid_activesell_amt = 3416,
  TagType_enumtype_rt_indi_activesell_amt = 3417,
  TagType_enumtype_rt_insti_activesell_vol = 3418,
  TagType_enumtype_rt_vip_activesell_vol = 3419,
  TagType_enumtype_rt_mid_activesell_vol = 3420,
  TagType_enumtype_rt_indi_activesell_vol = 3421,
  TagType_enumtype_rt_activebuy_amt = 3422,
  TagType_enumtype_rt_activebuy_vol = 3423,
  TagType_enumtype_rt_activesell_amt = 3424,
  TagType_enumtype_rt_activesell_vol = 3425,
  TagType_enumtype_rt_activenetin_vol = 3426,
  TagType_enumtype_rt_activenetin_amt = 3427,
  TagType_enumtype_rt_activeinvol_prop = 3428,
  TagType_enumtype_rt_activeinflow_prop = 3429,
  TagType_enumtype_YR_daily = 3430,
  TagType_enumtype_YR_weekly = 3431,
  TagType_enumtype_YR_monthly = 3432,
  TagType_enumtype_YR_dividendsOnly = 3433,
  TagType_enumtype_ask = 3434,
  TagType_enumtype_averageDailyVolume = 3435,
  TagType_enumtype_askSize = 3436,
  TagType_enumtype_bid = 3437,
  TagType_enumtype_askRealTime = 3438,
  TagType_enumtype_bidRealTime = 3439,
  TagType_enumtype_bookValue = 3440,
  TagType_enumtype_bidSz = 3441,
  TagType_enumtype_changeAndPercentChange = 3442,
  TagType_enumtype_change = 3443,
  TagType_enumtype_commissionfee = 3444,
  TagType_enumtype_changeRealTime = 3445,
  TagType_enumtype_afterHoursChangeRealTime = 3446,
  TagType_enumtype_dividendShare = 3447,
  TagType_enumtype_lastTradeIntDate = 3448,
  TagType_enumtype_tradeIntDate = 3449,
  TagType_enumtype_earningsShare = 3450,
  TagType_enumtype_errorIndication = 3451,
  TagType_enumtype_epsEstimateCurrentYear = 3452,
  TagType_enumtype_epsEstimateNextYear = 3453,
  TagType_enumtype_epsEstimateNextQuarter = 3454,
  TagType_enumtype_floatShares = 3455,
  TagType_enumtype_dayLow = 3456,
  TagType_enumtype_dayHigh = 3457,
  TagType_enumtype_low52Week = 3458,
  TagType_enumtype_high52Week = 3459,
  TagType_enumtype_holdingsGainPercent = 3460,
  TagType_enumtype_annualizedGain = 3461,
  TagType_enumtype_holdingsGain = 3462,
  TagType_enumtype_holdingsGainPercentRealTime = 3463,
  TagType_enumtype_holdingsGainRealTime = 3464,
  TagType_enumtype_moreInfo = 3465,
  TagType_enumtype_orderBookRealTime = 3466,
  TagType_enumtype_marketCapitalization = 3467,
  TagType_enumtype_marketCapRealTime = 3468,
  TagType_enumtype_ebitda = 3469,
  TagType_enumtype_changeFrom52WeekLow = 3470,
  TagType_enumtype_percentChangeFrom52WeekLow = 3471,
  TagType_enumtype_lastTradeRealTimeWithTime = 3472,
  TagType_enumtype_changePercentRealTime = 3473,
  TagType_enumtype_lastTradeSize = 3474,
  TagType_enumtype_changeFrom52WeekHigh = 3475,
  TagType_enumtype_percebtChangeFrom52WeekHigh = 3476,
  TagType_enumtype_lastTradeWithTime = 3477,
  TagType_enumtype_lastTradePriceOnly = 3478,
  TagType_enumtype_highLimit = 3479,
  TagType_enumtype_lowLimit = 3480,
  TagType_enumtype_dayRange = 3481,
  TagType_enumtype_dayRangeRealTime = 3482,
  TagType_enumtype_MovingAverage50Day = 3483,
  TagType_enumtype_MovingAverage200Day = 3484,
  TagType_enumtype_changeFrom200DayMovingAverage = 3485,
  TagType_enumtype_percentChangeFrom200DayMovingAverage = 3486,
  TagType_enumtype_changeFrom50DayMovingAverage = 3487,
  TagType_enumtype_percentChangeFrom50DayMovingAverage = 3488,
  TagType_enumtype_namestr = 3489,
  TagType_enumtype_notesinfo = 3490,
  TagType_enumtype_open = 3491,
  TagType_enumtype_previousClose = 3492,
  TagType_enumtype_pricePaid = 3493,
  TagType_enumtype_changeinPercent = 3494,
  TagType_enumtype_priceSales = 3495,
  TagType_enumtype_priceBook = 3496,
  TagType_enumtype_exDividendDate = 3497,
  TagType_enumtype_peRatio = 3498,
  TagType_enumtype_dividendPayDate = 3499,
  TagType_enumtype_peRatioRealTime = 3500,
  TagType_enumtype_pegRatio = 3501,
  TagType_enumtype_priceEpsEstimateCurrentYear = 3502,
  TagType_enumtype_priceEpsEstimateNextYear = 3503,
  TagType_enumtype_symbolstr = 3504,
  TagType_enumtype_sharesOwned = 3505,
  TagType_enumtype_shortRatio = 3506,
  TagType_enumtype_lastTradeTime = 3507,
  TagType_enumtype_tradeLinks = 3508,
  TagType_enumtype_tickerTrend = 3509,
  TagType_enumtype_targetPrice1yr = 3510,
  TagType_enumtype_volumeValue = 3511,
  TagType_enumtype_holdingsValue = 3512,
  TagType_enumtype_holdingsValueRealTime = 3513,
  TagType_enumtype_range52Week = 3514,
  TagType_enumtype_dayValueChange = 3515,
  TagType_enumtype_dayValueChangeRealTime = 3516,
  TagType_enumtype_stockExchange = 3517,
  TagType_enumtype_dividendYield = 3518,
  TagType_enumtype_OnTimer = 3519,
  TagType_enumtype_CTPMdOnFrontConnected = 3520,
  TagType_enumtype_CTPMdOnFrontDisconnected = 3521,
  TagType_enumtype_CTPMdOnHeartBeatWarning = 3522,
  TagType_enumtype_CTPMdOnRspUserLogin = 3523,
  TagType_enumtype_CTPMdOnRspUserLogout = 3524,
  TagType_enumtype_CTPMdOnRspError = 3525,
  TagType_enumtype_CTPMdOnRspSubMarketData = 3526,
  TagType_enumtype_CTPMdOnRspUnSubMarketData = 3527,
  TagType_enumtype_CTPMdOnRspSubForQuoteRsp = 3528,
  TagType_enumtype_CTPMdOnRspUnSubForQuoteRsp = 3529,
  TagType_enumtype_CTPMdOnRtnDepthMarketData = 3530,
  TagType_enumtype_CTPMdOnRtnForQuoteRsp = 3531,
  TagType_enumtype_CTPMdGetTradingDay = 3541,
  TagType_enumtype_CTPMdRegisterFront = 3542,
  TagType_enumtype_CTPMdRegisterNameServer = 3543,
  TagType_enumtype_CTPMdRegisterFensUserInfo = 3544,
  TagType_enumtype_CTPMdSubscribeMarketData = 3545,
  TagType_enumtype_CTPMdUnSubscribeMarketData = 3546,
  TagType_enumtype_CTPMdSubscribeForQuoteRsp = 3547,
  TagType_enumtype_CTPMdUnSubscribeForQuoteRsp = 3548,
  TagType_enumtype_CTPMdReqUserLogin = 3549,
  TagType_enumtype_CTPMdReqUserLogout = 3550,
  TagType_enumtype_CTPTrdOnFrontConnected = 3560,
  TagType_enumtype_CTPTrdOnFrontDisconnected = 3561,
  TagType_enumtype_CTPTrdOnHeartBeatWarning = 3562,
  TagType_enumtype_CTPTrdOnRspAuthenticate = 3563,
  TagType_enumtype_CTPTrdOnRspUserLogin = 3564,
  TagType_enumtype_CTPTrdOnRspUserLogout = 3565,
  TagType_enumtype_CTPTrdOnRspUserPasswordUpdate = 3566,
  TagType_enumtype_CTPTrdOnRspTradingAccountPasswordUpdate = 3567,
  TagType_enumtype_CTPTrdOnRspOrderInsert = 3568,
  TagType_enumtype_CTPTrdOnRspParkedOrderInsert = 3569,
  TagType_enumtype_CTPTrdOnRspParkedOrderAction = 3570,
  TagType_enumtype_CTPTrdOnRspOrderAction = 3571,
  TagType_enumtype_CTPTrdOnRspQueryMaxOrderVolume = 3572,
  TagType_enumtype_CTPTrdOnRspSettlementInfoConfirm = 3573,
  TagType_enumtype_CTPTrdOnRspRemoveParkedOrder = 3574,
  TagType_enumtype_CTPTrdOnRspRemoveParkedOrderAction = 3575,
  TagType_enumtype_CTPTrdOnRspExecOrderInsert = 3576,
  TagType_enumtype_CTPTrdOnRspExecOrderAction = 3577,
  TagType_enumtype_CTPTrdOnRspForQuoteInsert = 3578,
  TagType_enumtype_CTPTrdOnRspQuoteInsert = 3579,
  TagType_enumtype_CTPTrdOnRspQuoteAction = 3580,
  TagType_enumtype_CTPTrdOnRspLockInsert = 3581,
  TagType_enumtype_CTPTrdOnRspCombActionInsert = 3582,
  TagType_enumtype_CTPTrdOnRspQryOrder = 3583,
  TagType_enumtype_CTPTrdOnRspQryTrade = 3584,
  TagType_enumtype_CTPTrdOnRspQryInvestorPosition = 3585,
  TagType_enumtype_CTPTrdOnRspQryTradingAccount = 3586,
  TagType_enumtype_CTPTrdOnRspQryInvestor = 3587,
  TagType_enumtype_CTPTrdOnRspQryTradingCode = 3588,
  TagType_enumtype_CTPTrdOnRspQryInstrumentMarginRate = 3589,
  TagType_enumtype_CTPTrdOnRspQryInstrumentCommissionRate = 3590,
  TagType_enumtype_CTPTrdOnRspQryExchange = 3591,
  TagType_enumtype_CTPTrdOnRspQryProduct = 3592,
  TagType_enumtype_CTPTrdOnRspQryInstrument = 3593,
  TagType_enumtype_CTPTrdOnRspQryDepthMarketData = 3594,
  TagType_enumtype_CTPTrdOnRspQrySettlementInfo = 3595,
  TagType_enumtype_CTPTrdOnRspQryTransferBank = 3596,
  TagType_enumtype_CTPTrdOnRspQryInvestorPositionDetail = 3597,
  TagType_enumtype_CTPTrdOnRspQryNotice = 3598,
  TagType_enumtype_CTPTrdOnRspQrySettlementInfoConfirm = 3599,
  TagType_enumtype_CTPTrdOnRspQryInvestorPositionCombineDetail = 3600,
  TagType_enumtype_CTPTrdOnRspQryCFMMCTradingAccountKey = 3601,
  TagType_enumtype_CTPTrdOnRspQryEWarrantOffset = 3602,
  TagType_enumtype_CTPTrdOnRspQryInvestorProductGroupMargin = 3603,
  TagType_enumtype_CTPTrdOnRspQryExchangeMarginRate = 3604,
  TagType_enumtype_CTPTrdOnRspQryExchangeMarginRateAdjust = 3605,
  TagType_enumtype_CTPTrdOnRspQryExchangeRate = 3606,
  TagType_enumtype_CTPTrdOnRspQrySecAgentACIDMap = 3607,
  TagType_enumtype_CTPTrdOnRspQryProductExchRate = 3608,
  TagType_enumtype_CTPTrdOnRspQryProductGroup = 3609,
  TagType_enumtype_CTPTrdOnRspQryOptionInstrTradeCost = 3610,
  TagType_enumtype_CTPTrdOnRspQryOptionInstrCommRate = 3611,
  TagType_enumtype_CTPTrdOnRspQryExecOrder = 3612,
  TagType_enumtype_CTPTrdOnRspQryForQuote = 3613,
  TagType_enumtype_CTPTrdOnRspQryQuote = 3614,
  TagType_enumtype_CTPTrdOnRspQryLock = 3615,
  TagType_enumtype_CTPTrdOnRspQryLockPosition = 3616,
  TagType_enumtype_CTPTrdOnRspQryInvestorLevel = 3617,
  TagType_enumtype_CTPTrdOnRspQryExecFreeze = 3618,
  TagType_enumtype_CTPTrdOnRspQryCombInstrumentGuard = 3619,
  TagType_enumtype_CTPTrdOnRspQryCombAction = 3620,
  TagType_enumtype_CTPTrdOnRspQryTransferSerial = 3621,
  TagType_enumtype_CTPTrdOnRspQryAccountregister = 3622,
  TagType_enumtype_CTPTrdOnRspError = 3623,
  TagType_enumtype_CTPTrdOnRtnOrder = 3624,
  TagType_enumtype_CTPTrdOnRtnTrade = 3625,
  TagType_enumtype_CTPTrdOnErrRtnOrderInsert = 3626,
  TagType_enumtype_CTPTrdOnErrRtnOrderAction = 3627,
  TagType_enumtype_CTPTrdOnRtnInstrumentStatus = 3628,
  TagType_enumtype_CTPTrdOnRtnTradingNotice = 3629,
  TagType_enumtype_CTPTrdOnRtnErrorConditionalOrder = 3630,
  TagType_enumtype_CTPTrdOnRtnExecOrder = 3631,
  TagType_enumtype_CTPTrdOnErrRtnExecOrderInsert = 3632,
  TagType_enumtype_CTPTrdOnErrRtnExecOrderAction = 3633,
  TagType_enumtype_CTPTrdOnErrRtnForQuoteInsert = 3634,
  TagType_enumtype_CTPTrdOnRtnQuote = 3635,
  TagType_enumtype_CTPTrdOnErrRtnQuoteInsert = 3636,
  TagType_enumtype_CTPTrdOnErrRtnQuoteAction = 3637,
  TagType_enumtype_CTPTrdOnRtnForQuoteRsp = 3638,
  TagType_enumtype_CTPTrdOnRtnCFMMCTradingAccountToken = 3639,
  TagType_enumtype_CTPTrdOnRtnLock = 3640,
  TagType_enumtype_CTPTrdOnErrRtnLockInsert = 3641,
  TagType_enumtype_CTPTrdOnRtnCombAction = 3642,
  TagType_enumtype_CTPTrdOnErrRtnCombActionInsert = 3643,
  TagType_enumtype_CTPTrdOnRspQryContractBank = 3644,
  TagType_enumtype_CTPTrdOnRspQryParkedOrder = 3645,
  TagType_enumtype_CTPTrdOnRspQryParkedOrderAction = 3646,
  TagType_enumtype_CTPTrdOnRspQryTradingNotice = 3647,
  TagType_enumtype_CTPTrdOnRspQryBrokerTradingParams = 3648,
  TagType_enumtype_CTPTrdOnRspQryBrokerTradingAlgos = 3649,
  TagType_enumtype_CTPTrdOnRspQueryCFMMCTradingAccountToken = 3650,
  TagType_enumtype_CTPTrdOnRtnFromBankToFutureByBank = 3651,
  TagType_enumtype_CTPTrdOnRtnFromFutureToBankByBank = 3652,
  TagType_enumtype_CTPTrdOnRtnRepealFromBankToFutureByBank = 3653,
  TagType_enumtype_CTPTrdOnRtnRepealFromFutureToBankByBank = 3654,
  TagType_enumtype_CTPTrdOnRtnFromBankToFutureByFuture = 3655,
  TagType_enumtype_CTPTrdOnRtnFromFutureToBankByFuture = 3656,
  TagType_enumtype_CTPTrdOnRtnRepealFromBankToFutureByFutureManual = 3657,
  TagType_enumtype_CTPTrdOnRtnRepealFromFutureToBankByFutureManual = 3658,
  TagType_enumtype_CTPTrdOnRtnQueryBankBalanceByFuture = 3659,
  TagType_enumtype_CTPTrdOnErrRtnBankToFutureByFuture = 3660,
  TagType_enumtype_CTPTrdOnErrRtnFutureToBankByFuture = 3661,
  TagType_enumtype_CTPTrdOnErrRtnRepealBankToFutureByFutureManual = 3662,
  TagType_enumtype_CTPTrdOnErrRtnRepealFutureToBankByFutureManual = 3663,
  TagType_enumtype_CTPTrdOnErrRtnQueryBankBalanceByFuture = 3664,
  TagType_enumtype_CTPTrdOnRtnRepealFromBankToFutureByFuture = 3665,
  TagType_enumtype_CTPTrdOnRtnRepealFromFutureToBankByFuture = 3666,
  TagType_enumtype_CTPTrdOnRspFromBankToFutureByFuture = 3667,
  TagType_enumtype_CTPTrdOnRspFromFutureToBankByFuture = 3668,
  TagType_enumtype_CTPTrdOnRspQueryBankAccountMoneyByFuture = 3669,
  TagType_enumtype_CTPTrdOnRtnOpenAccountByBank = 3670,
  TagType_enumtype_CTPTrdOnRtnCancelAccountByBank = 3671,
  TagType_enumtype_CTPTrdOnRtnChangeAccountByBank = 3672,
  TagType_enumtype_CTPTrdGetTradingDay = 3682,
  TagType_enumtype_CTPTrdRegisterFront = 3683,
  TagType_enumtype_CTPTrdRegisterNameServer = 3684,
  TagType_enumtype_CTPTrdRegisterFensUserInfo = 3685,
  TagType_enumtype_CTPTrdReqAuthenticate = 3686,
  TagType_enumtype_CTPTrdReqUserLogin = 3687,
  TagType_enumtype_CTPTrdReqUserLogout = 3688,
  TagType_enumtype_CTPTrdReqUserPasswordUpdate = 3689,
  TagType_enumtype_CTPTrdReqTradingAccountPasswordUpdate = 3690,
  TagType_enumtype_CTPTrdReqOrderInsert = 3691,
  TagType_enumtype_CTPTrdReqParkedOrderInsert = 3692,
  TagType_enumtype_CTPTrdReqParkedOrderAction = 3693,
  TagType_enumtype_CTPTrdReqOrderAction = 3694,
  TagType_enumtype_CTPTrdReqQueryMaxOrderVolume = 3695,
  TagType_enumtype_CTPTrdReqSettlementInfoConfirm = 3696,
  TagType_enumtype_CTPTrdReqRemoveParkedOrder = 3697,
  TagType_enumtype_CTPTrdReqRemoveParkedOrderAction = 3698,
  TagType_enumtype_CTPTrdReqExecOrderInsert = 3699,
  TagType_enumtype_CTPTrdReqExecOrderAction = 3700,
  TagType_enumtype_CTPTrdReqForQuoteInsert = 3701,
  TagType_enumtype_CTPTrdReqQuoteInsert = 3702,
  TagType_enumtype_CTPTrdReqQuoteAction = 3703,
  TagType_enumtype_CTPTrdReqLockInsert = 3704,
  TagType_enumtype_CTPTrdReqCombActionInsert = 3705,
  TagType_enumtype_CTPTrdReqQryOrder = 3706,
  TagType_enumtype_CTPTrdReqQryTrade = 3707,
  TagType_enumtype_CTPTrdReqQryInvestorPosition = 3708,
  TagType_enumtype_CTPTrdReqQryTradingAccount = 3709,
  TagType_enumtype_CTPTrdReqQryInvestor = 3710,
  TagType_enumtype_CTPTrdReqQryTradingCode = 3711,
  TagType_enumtype_CTPTrdReqQryInstrumentMarginRate = 3712,
  TagType_enumtype_CTPTrdReqQryInstrumentCommissionRate = 3713,
  TagType_enumtype_CTPTrdReqQryExchange = 3714,
  TagType_enumtype_CTPTrdReqQryProduct = 3715,
  TagType_enumtype_CTPTrdReqQryInstrument = 3716,
  TagType_enumtype_CTPTrdReqQryDepthMarketData = 3717,
  TagType_enumtype_CTPTrdReqQrySettlementInfo = 3718,
  TagType_enumtype_CTPTrdReqQryTransferBank = 3719,
  TagType_enumtype_CTPTrdReqQryInvestorPositionDetail = 3720,
  TagType_enumtype_CTPTrdReqQryNotice = 3721,
  TagType_enumtype_CTPTrdReqQrySettlementInfoConfirm = 3722,
  TagType_enumtype_CTPTrdReqQryInvestorPositionCombineDetail = 3723,
  TagType_enumtype_CTPTrdReqQryCFMMCTradingAccountKey = 3724,
  TagType_enumtype_CTPTrdReqQryEWarrantOffset = 3725,
  TagType_enumtype_CTPTrdReqQryInvestorProductGroupMargin = 3726,
  TagType_enumtype_CTPTrdReqQryExchangeMarginRate = 3727,
  TagType_enumtype_CTPTrdReqQryExchangeMarginRateAdjust = 3728,
  TagType_enumtype_CTPTrdReqQryExchangeRate = 3729,
  TagType_enumtype_CTPTrdReqQrySecAgentACIDMap = 3730,
  TagType_enumtype_CTPTrdReqQryProductExchRate = 3731,
  TagType_enumtype_CTPTrdReqQryProductGroup = 3732,
  TagType_enumtype_CTPTrdReqQryOptionInstrTradeCost = 3733,
  TagType_enumtype_CTPTrdReqQryOptionInstrCommRate = 3734,
  TagType_enumtype_CTPTrdReqQryExecOrder = 3735,
  TagType_enumtype_CTPTrdReqQryForQuote = 3736,
  TagType_enumtype_CTPTrdReqQryQuote = 3737,
  TagType_enumtype_CTPTrdReqQryLock = 3738,
  TagType_enumtype_CTPTrdReqQryLockPosition = 3739,
  TagType_enumtype_CTPTrdReqQryInvestorLevel = 3740,
  TagType_enumtype_CTPTrdReqQryExecFreeze = 3741,
  TagType_enumtype_CTPTrdReqQryCombInstrumentGuard = 3742,
  TagType_enumtype_CTPTrdReqQryCombAction = 3743,
  TagType_enumtype_CTPTrdReqQryTransferSerial = 3744,
  TagType_enumtype_CTPTrdReqQryAccountregister = 3745,
  TagType_enumtype_CTPTrdReqQryContractBank = 3746,
  TagType_enumtype_CTPTrdReqQryParkedOrder = 3747,
  TagType_enumtype_CTPTrdReqQryParkedOrderAction = 3748,
  TagType_enumtype_CTPTrdReqQryTradingNotice = 3749,
  TagType_enumtype_CTPTrdReqQryBrokerTradingParams = 3750,
  TagType_enumtype_CTPTrdReqQryBrokerTradingAlgos = 3751,
  TagType_enumtype_CTPTrdReqQueryCFMMCTradingAccountToken = 3752,
  TagType_enumtype_CTPTrdReqFromBankToFutureByFuture = 3753,
  TagType_enumtype_CTPTrdReqFromFutureToBankByFuture = 3754,
  TagType_enumtype_CTPTrdReqQueryBankAccountMoneyByFuture = 3755,
  TagType_enumtype_DFITCMdOnFrontConnected = 3770,
  TagType_enumtype_DFITCMdOnFrontDisconnected = 3771,
  TagType_enumtype_DFITCMdOnRspUserLogin = 3772,
  TagType_enumtype_DFITCMdOnRspUserLogout = 3773,
  TagType_enumtype_DFITCMdOnRspError = 3774,
  TagType_enumtype_DFITCMdOnRspSubMarketData = 3775,
  TagType_enumtype_DFITCMdOnRspUnSubMarketData = 3776,
  TagType_enumtype_DFITCMdOnRspSubForQuoteRsp = 3777,
  TagType_enumtype_DFITCMdOnRspUnSubForQuoteRsp = 3778,
  TagType_enumtype_DFITCMdOnMarketData = 3779,
  TagType_enumtype_DFITCMdOnCustomMarketData = 3780,
  TagType_enumtype_DFITCMdOnRtnForQuoteRsp = 3781,
  TagType_enumtype_DFITCMdOnRspTradingDay = 3782,
  TagType_enumtype_DFITCMdSubscribeMarketData = 3792,
  TagType_enumtype_DFITCMdUnSubscribeMarketData = 3793,
  TagType_enumtype_DFITCMdSubscribeForQuoteRsp = 3794,
  TagType_enumtype_DFITCMdUnSubscribeForQuoteRsp = 3795,
  TagType_enumtype_DFITCMdReqUserLogin = 3796,
  TagType_enumtype_DFITCMdReqUserLogout = 3797,
  TagType_enumtype_DFITCMdReqTradingDay = 3798,
  TagType_enumtype_DFITCTrdOnFrontConnected = 3800,
  TagType_enumtype_DFITCTrdOnFrontDisconnected = 3801,
  TagType_enumtype_DFITCTrdOnRspUserLogin = 3802,
  TagType_enumtype_DFITCTrdOnRspUserLogout = 3803,
  TagType_enumtype_DFITCTrdOnRspInsertOrder = 3804,
  TagType_enumtype_DFITCTrdOnRspCancelOrder = 3805,
  TagType_enumtype_DFITCTrdOnRtnErrorMsg = 3806,
  TagType_enumtype_DFITCTrdOnRtnMatchedInfo = 3807,
  TagType_enumtype_DFITCTrdOnRtnOrder = 3808,
  TagType_enumtype_DFITCTrdOnRtnCancelOrder = 3809,
  TagType_enumtype_DFITCTrdOnRspQryOrderInfo = 3810,
  TagType_enumtype_DFITCTrdOnRspQryMatchInfo = 3811,
  TagType_enumtype_DFITCTrdOnRspQryPosition = 3812,
  TagType_enumtype_DFITCTrdOnRspCustomerCapital = 3813,
  TagType_enumtype_DFITCTrdOnRspQryExchangeInstrument = 3814,
  TagType_enumtype_DFITCTrdOnRspArbitrageInstrument = 3815,
  TagType_enumtype_DFITCTrdOnRspQrySpecifyInstrument = 3816,
  TagType_enumtype_DFITCTrdOnRspQryPositionDetail = 3817,
  TagType_enumtype_DFITCTrdOnRtnTradingNotice = 3818,
  TagType_enumtype_DFITCTrdOnRspResetPassword = 3819,
  TagType_enumtype_DFITCTrdOnRspQryTradeCode = 3820,
  TagType_enumtype_DFITCTrdOnRspBillConfirm = 3821,
  TagType_enumtype_DFITCTrdOnRspEquityComputMode = 3822,
  TagType_enumtype_DFITCTrdOnRspQryBill = 3823,
  TagType_enumtype_DFITCTrdOnRspConfirmProductInfo = 3824,
  TagType_enumtype_DFITCTrdOnRspTradingDay = 3825,
  TagType_enumtype_DFITCTrdOnRspQuoteInsert = 3826,
  TagType_enumtype_DFITCTrdOnRtnQuoteInsert = 3827,
  TagType_enumtype_DFITCTrdOnRspQuoteCancel = 3828,
  TagType_enumtype_DFITCTrdOnRtnQuoteCancel = 3829,
  TagType_enumtype_DFITCTrdOnRtnQuoteMatchedInfo = 3830,
  TagType_enumtype_DFITCTrdOnRspCancelAllOrder = 3831,
  TagType_enumtype_DFITCTrdOnRspQryQuoteNotice = 3832,
  TagType_enumtype_DFITCTrdOnRspForQuote = 3833,
  TagType_enumtype_DFITCTrdOnRtnForQuote = 3834,
  TagType_enumtype_DFITCTrdOnRspQryQuoteOrderInfo = 3835,
  TagType_enumtype_DFITCTrdOnRspQryForQuote = 3836,
  TagType_enumtype_DFITCTrdOnRspQryTransferBank = 3837,
  TagType_enumtype_DFITCTrdOnRspQryTransferSerial = 3838,
  TagType_enumtype_DFITCTrdOnRspFromBankToFutureByFuture = 3839,
  TagType_enumtype_DFITCTrdOnRspFromFutureToBankByFuture = 3840,
  TagType_enumtype_DFITCTrdOnRtnFromBankToFutureByFuture = 3841,
  TagType_enumtype_DFITCTrdOnRtnFromFutureToBankByFuture = 3842,
  TagType_enumtype_DFITCTrdOnRtnRepealFromFutureToBankByBank = 3843,
  TagType_enumtype_DFITCTrdOnRspQryExchangeStatus = 3844,
  TagType_enumtype_DFITCTrdOnRtnExchangeStatus = 3845,
  TagType_enumtype_DFITCTrdOnRspQryDepthMarketData = 3846,
  TagType_enumtype_DFITCTrdOnRspQryExchangeRate = 3847,
  TagType_enumtype_DFITCTrdOnRspQryPricesTrigger = 3848,
  TagType_enumtype_DFITCTrdOnRspExtInsertOrder = 3849,
  TagType_enumtype_DFITCTrdOnRspExtCancelOrder = 3850,
  TagType_enumtype_DFITCTrdOnRtnPricesTrigger = 3851,
  TagType_enumtype_DFITCTrdOnErrRtnCancelOrder = 3852,
  TagType_enumtype_DFITCTrdOnErrRtnQuoteCancel = 3853,
  TagType_enumtype_DFITCTrdOnRspQryBillConfirm = 3854,
  TagType_enumtype_DFITCTrdOnRspQryTradingNotice = 3855,
  TagType_enumtype_DFITCTrdOnRspQryArbitrageCombineDetail = 3856,
  TagType_enumtype_DFITCTrdOpenApiLog = 3866,
  TagType_enumtype_DFITCTrdReqUserLogin = 3867,
  TagType_enumtype_DFITCTrdReqUserLogout = 3868,
  TagType_enumtype_DFITCTrdReqInsertOrder = 3869,
  TagType_enumtype_DFITCTrdReqCancelOrder = 3870,
  TagType_enumtype_DFITCTrdReqQryPosition = 3871,
  TagType_enumtype_DFITCTrdReqQryCustomerCapital = 3872,
  TagType_enumtype_DFITCTrdReqQryExchangeInstrument = 3873,
  TagType_enumtype_DFITCTrdReqQryArbitrageInstrument = 3874,
  TagType_enumtype_DFITCTrdReqQryOrderInfo = 3875,
  TagType_enumtype_DFITCTrdReqQryMatchInfo = 3876,
  TagType_enumtype_DFITCTrdReqQrySpecifyInstrument = 3877,
  TagType_enumtype_DFITCTrdReqQryPositionDetail = 3878,
  TagType_enumtype_DFITCTrdReqConfirmProductInfo = 3879,
  TagType_enumtype_DFITCTrdReqResetPassword = 3880,
  TagType_enumtype_DFITCTrdReqBillConfirm = 3881,
  TagType_enumtype_DFITCTrdReqQryTradeCode = 3882,
  TagType_enumtype_DFITCTrdReqEquityComputMode = 3883,
  TagType_enumtype_DFITCTrdReqQryBill = 3884,
  TagType_enumtype_DFITCTrdReqTradingDay = 3885,
  TagType_enumtype_DFITCTrdReqQryQuoteNotice = 3886,
  TagType_enumtype_DFITCTrdReqQuoteInsert = 3887,
  TagType_enumtype_DFITCTrdReqQuoteCancel = 3888,
  TagType_enumtype_DFITCTrdReqCancelAllOrder = 3889,
  TagType_enumtype_DFITCTrdReqForQuote = 3890,
  TagType_enumtype_DFITCTrdReqQryForQuote = 3891,
  TagType_enumtype_DFITCTrdReqQryQuoteOrderInfo = 3892,
  TagType_enumtype_DFITCTrdReqQryTransferBank = 3893,
  TagType_enumtype_DFITCTrdReqQryTransferSerial = 3894,
  TagType_enumtype_DFITCTrdReqFromBankToFutureByFuture = 3895,
  TagType_enumtype_DFITCTrdReqFromFutureToBankByFuture = 3896,
  TagType_enumtype_DFITCTrdReqQryExchangeStatus = 3897,
  TagType_enumtype_DFITCTrdReqQryDepthMarketData = 3898,
  TagType_enumtype_DFITCTrdReqQryExchangeRate = 3899,
  TagType_enumtype_DFITCTrdReqPricesTrigger = 3900,
  TagType_enumtype_DFITCTrdReqQryExtOrder = 3901,
  TagType_enumtype_DFITCTrdReqCancelExtOrder = 3902,
  TagType_enumtype_DFITCTrdReqQryBillConfirm = 3903,
  TagType_enumtype_DFITCTrdReqQryTradingNotice = 3904,
  TagType_enumtype_DFITCTrdReqQryArbitrageCombineDetail = 3905,
  TagType_enumtype_DFITCSECMdOnFrontConnected = 3910,
  TagType_enumtype_DFITCSECMdOnFrontDisconnected = 3911,
  TagType_enumtype_DFITCSECMdOnRtnNotice = 3912,
  TagType_enumtype_DFITCSECMdOnRspError = 3913,
  TagType_enumtype_DFITCSECMdOnRspStockUserLogin = 3914,
  TagType_enumtype_DFITCSECMdOnRspStockUserLogout = 3915,
  TagType_enumtype_DFITCSECMdOnRspSOPUserLogin = 3916,
  TagType_enumtype_DFITCSECMdOnRspSOPUserLogout = 3917,
  TagType_enumtype_DFITCSECMdOnRspFASLUserLogin = 3918,
  TagType_enumtype_DFITCSECMdOnRspFASLUserLogout = 3919,
  TagType_enumtype_DFITCSECMdOnRspStockSubMarketData = 3920,
  TagType_enumtype_DFITCSECMdOnRspStockUnSubMarketData = 3921,
  TagType_enumtype_DFITCSECMdOnRspSOPSubMarketData = 3922,
  TagType_enumtype_DFITCSECMdOnRspSOPUnSubMarketData = 3923,
  TagType_enumtype_DFITCSECMdOnStockMarketData = 3924,
  TagType_enumtype_DFITCSECMdOnSOPMarketData = 3925,
  TagType_enumtype_DFITCSECMdOnRspStockAvailableQuot = 3926,
  TagType_enumtype_DFITCSECMdOnRspSopAvailableQuot = 3927,
  TagType_enumtype_DFITCSECMdOnRspUserMDPasswordUpdate = 3928,
  TagType_enumtype_DFITCSECMdSubscribeStockMarketData = 3938,
  TagType_enumtype_DFITCSECMdUnSubscribeStockMarketData = 3939,
  TagType_enumtype_DFITCSECMdSubscribeSOPMarketData = 3940,
  TagType_enumtype_DFITCSECMdUnSubscribeSOPMarketData = 3941,
  TagType_enumtype_DFITCSECMdReqStockUserLogin = 3942,
  TagType_enumtype_DFITCSECMdReqStockUserLogout = 3943,
  TagType_enumtype_DFITCSECMdReqSOPUserLogin = 3944,
  TagType_enumtype_DFITCSECMdReqFASLUserLogin = 3945,
  TagType_enumtype_DFITCSECMdReqSOPUserLogout = 3946,
  TagType_enumtype_DFITCSECMdReqFASLUserLogout = 3947,
  TagType_enumtype_DFITCSECMdReqStockAvailableQuotQry = 3948,
  TagType_enumtype_DFITCSECMdReqSopAvailableQuotQry = 3949,
  TagType_enumtype_DFITCSECMdReqUserMDPasswordUpdate = 3950,
  TagType_enumtype_DFITCSECTrdOnFrontConnected = 3960,
  TagType_enumtype_DFITCSECTrdOnFrontDisconnected = 3961,
  TagType_enumtype_DFITCSECTrdOnRtnNotice = 3962,
  TagType_enumtype_DFITCSECTrdOnRspError = 3963,
  TagType_enumtype_DFITCSECTrdOnRspStockUserLogin = 3964,
  TagType_enumtype_DFITCSECTrdOnRspStockUserLogout = 3965,
  TagType_enumtype_DFITCSECTrdOnRspStockUserPasswordUpdate = 3966,
  TagType_enumtype_DFITCSECTrdOnRspStockEntrustOrder = 3967,
  TagType_enumtype_DFITCSECTrdOnRspStockWithdrawOrder = 3968,
  TagType_enumtype_DFITCSECTrdOnRspStockQryEntrustOrder = 3969,
  TagType_enumtype_DFITCSECTrdOnRspStockQryRealTimeTrade = 3970,
  TagType_enumtype_DFITCSECTrdOnRspStockQrySerialTrade = 3971,
  TagType_enumtype_DFITCSECTrdOnRspStockQryPosition = 3972,
  TagType_enumtype_DFITCSECTrdOnRspStockQryCapitalAccountInfo = 3973,
  TagType_enumtype_DFITCSECTrdOnRspStockQryAccountInfo = 3974,
  TagType_enumtype_DFITCSECTrdOnRspStockQryShareholderInfo = 3975,
  TagType_enumtype_DFITCSECTrdOnRspStockTransferFunds = 3976,
  TagType_enumtype_DFITCSECTrdOnRspStockEntrustBatchOrder = 3977,
  TagType_enumtype_DFITCSECTrdOnRspStockWithdrawBatchOrder = 3978,
  TagType_enumtype_DFITCSECTrdOnRspStockCalcAbleEntrustQty = 3979,
  TagType_enumtype_DFITCSECTrdOnRspStockCalcAblePurchaseETFQty = 3980,
  TagType_enumtype_DFITCSECTrdOnRspStockQryFreezeFundsDetail = 3981,
  TagType_enumtype_DFITCSECTrdOnRspStockQryFreezeStockDetail = 3982,
  TagType_enumtype_DFITCSECTrdOnRspStockQryTransferStockDetail = 3983,
  TagType_enumtype_DFITCSECTrdOnRspStockQryTransferFundsDetail = 3984,
  TagType_enumtype_DFITCSECTrdOnRspStockQryStockInfo = 3985,
  TagType_enumtype_DFITCSECTrdOnRspStockQryStockStaticInfo = 3986,
  TagType_enumtype_DFITCSECTrdOnRspStockQryTradeTime = 3987,
  TagType_enumtype_DFITCSECTrdOnStockEntrustOrderRtn = 3988,
  TagType_enumtype_DFITCSECTrdOnStockTradeRtn = 3989,
  TagType_enumtype_DFITCSECTrdOnStockWithdrawOrderRtn = 3990,
  TagType_enumtype_DFITCSECTrdOnRspSOPUserLogin = 3991,
  TagType_enumtype_DFITCSECTrdOnRspSOPUserLogout = 3992,
  TagType_enumtype_DFITCSECTrdOnRspSOPUserPasswordUpdate = 3993,
  TagType_enumtype_DFITCSECTrdOnRspSOPEntrustOrder = 3994,
  TagType_enumtype_DFITCSECTrdOnRspSOPGroupSplit = 3995,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryGroupPosition = 3996,
  TagType_enumtype_DFITCSECTrdOnRspSOPLockOUnLockStock = 3997,
  TagType_enumtype_DFITCSECTrdOnRspSOPWithdrawOrder = 3998,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryEntrustOrder = 3999,
  TagType_enumtype_DFITCSECTrdOnRspSOPQrySerialTrade = 4000,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryPosition = 4001,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryCollateralPosition = 4002,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryCapitalAccountInfo = 4003,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryAccountInfo = 4004,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryShareholderInfo = 4005,
  TagType_enumtype_DFITCSECTrdOnRspSOPCalcAbleEntrustQty = 4006,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryAbleLockStock = 4007,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryContactInfo = 4008,
  TagType_enumtype_DFITCSECTrdOnRspSOPExectueOrder = 4009,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryExecAssiInfo = 4010,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryTradeTime = 4011,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryExchangeInfo = 4012,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryCommission = 4013,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryDeposit = 4014,
  TagType_enumtype_DFITCSECTrdOnRspSOPQryContractObjectInfo = 4015,
  TagType_enumtype_DFITCSECTrdOnSOPEntrustOrderRtn = 4016,
  TagType_enumtype_DFITCSECTrdOnSOPTradeRtn = 4017,
  TagType_enumtype_DFITCSECTrdOnSOPWithdrawOrderRtn = 4018,
  TagType_enumtype_DFITCSECTrdOnRspFASLUserLogin = 4019,
  TagType_enumtype_DFITCSECTrdOnRspFASLUserLogout = 4020,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryAbleFinInfo = 4021,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryAbleSloInfo = 4022,
  TagType_enumtype_DFITCSECTrdOnRspFASLTransferCollateral = 4023,
  TagType_enumtype_DFITCSECTrdOnRspFASLDirectRepayment = 4024,
  TagType_enumtype_DFITCSECTrdOnRspFASLRepayStockTransfer = 4025,
  TagType_enumtype_DFITCSECTrdOnRspFASLEntrustCrdtOrder = 4026,
  TagType_enumtype_DFITCSECTrdOnRspFASLEntrustOrder = 4027,
  TagType_enumtype_DFITCSECTrdOnRspFASLCalcAbleEntrustCrdtQty = 4028,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryCrdtFunds = 4029,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryCrdtContract = 4030,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryCrdtConChangeInfo = 4031,
  TagType_enumtype_DFITCSECTrdOnRspFASLTransferFunds = 4032,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryAccountInfo = 4033,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryCapitalAccountInfo = 4034,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryShareholderInfo = 4035,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryPosition = 4036,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryEntrustOrder = 4037,
  TagType_enumtype_DFITCSECTrdOnRspFASLQrySerialTrade = 4038,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryRealTimeTrade = 4039,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryFreezeFundsDetail = 4040,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryFreezeStockDetail = 4041,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryTransferFundsDetail = 4042,
  TagType_enumtype_DFITCSECTrdOnRspFASLWithdrawOrder = 4043,
  TagType_enumtype_DFITCSECTrdOnRspFASLQrySystemTime = 4044,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryTransferredContract = 4045,
  TagType_enumtype_DFITCSECTrdOnRspFASLDesirableFundsOut = 4046,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryGuaranteedContract = 4047,
  TagType_enumtype_DFITCSECTrdOnRspFASLQryUnderlyingContract = 4048,
  TagType_enumtype_DFITCSECTrdOnFASLEntrustOrderRtn = 4049,
  TagType_enumtype_DFITCSECTrdOnFASLTradeRtn = 4050,
  TagType_enumtype_DFITCSECTrdOnFASLWithdrawOrderRtn = 4051,
  TagType_enumtype_DFITCSECTrdReqStockUserLogin = 4061,
  TagType_enumtype_DFITCSECTrdReqStockUserLogout = 4062,
  TagType_enumtype_DFITCSECTrdReqStockUserPasswordUpdate = 4063,
  TagType_enumtype_DFITCSECTrdReqStockEntrustOrder = 4064,
  TagType_enumtype_DFITCSECTrdReqStockWithdrawOrder = 4065,
  TagType_enumtype_DFITCSECTrdReqStockQryEntrustOrder = 4066,
  TagType_enumtype_DFITCSECTrdReqStockQryRealTimeTrade = 4067,
  TagType_enumtype_DFITCSECTrdReqStockQrySerialTrade = 4068,
  TagType_enumtype_DFITCSECTrdReqStockQryPosition = 4069,
  TagType_enumtype_DFITCSECTrdReqStockQryCapitalAccountInfo = 4070,
  TagType_enumtype_DFITCSECTrdReqStockQryAccountInfo = 4071,
  TagType_enumtype_DFITCSECTrdReqStockQryShareholderInfo = 4072,
  TagType_enumtype_DFITCSECTrdReqStockTransferFunds = 4073,
  TagType_enumtype_DFITCSECTrdReqStockEntrustBatchOrder = 4074,
  TagType_enumtype_DFITCSECTrdReqStockWithdrawBatchOrder = 4075,
  TagType_enumtype_DFITCSECTrdReqStockCalcAbleEntrustQty = 4076,
  TagType_enumtype_DFITCSECTrdReqStockCalcAblePurchaseETFQty = 4077,
  TagType_enumtype_DFITCSECTrdReqStockQryFreezeFundsDetail = 4078,
  TagType_enumtype_DFITCSECTrdReqStockQryFreezeStockDetail = 4079,
  TagType_enumtype_DFITCSECTrdReqStockQryTransferFundsDetail = 4080,
  TagType_enumtype_DFITCSECTrdReqStockQryTransferStockDetail = 4081,
  TagType_enumtype_DFITCSECTrdReqStockQryStockInfo = 4082,
  TagType_enumtype_DFITCSECTrdReqStockQryStockStaticInfo = 4083,
  TagType_enumtype_DFITCSECTrdReqStockQryTradeTime = 4084,
  TagType_enumtype_DFITCSECTrdReqSOPUserLogin = 4085,
  TagType_enumtype_DFITCSECTrdReqSOPUserLogout = 4086,
  TagType_enumtype_DFITCSECTrdReqSOPUserPasswordUpdate = 4087,
  TagType_enumtype_DFITCSECTrdReqSOPEntrustOrder = 4088,
  TagType_enumtype_DFITCSECTrdReqSOPGroupSplit = 4089,
  TagType_enumtype_DFITCSECTrdReqSOPQryGroupPosition = 4090,
  TagType_enumtype_DFITCSECTrdReqSOPLockOUnLockStock = 4091,
  TagType_enumtype_DFITCSECTrdReqSOPWithdrawOrder = 4092,
  TagType_enumtype_DFITCSECTrdReqSOPQryEntrustOrder = 4093,
  TagType_enumtype_DFITCSECTrdReqSOPQrySerialTrade = 4094,
  TagType_enumtype_DFITCSECTrdReqSOPQryPosition = 4095,
  TagType_enumtype_DFITCSECTrdReqSOPQryCollateralPosition = 4096,
  TagType_enumtype_DFITCSECTrdReqSOPQryCapitalAccountInfo = 4097,
  TagType_enumtype_DFITCSECTrdReqSOPQryAccountInfo = 4098,
  TagType_enumtype_DFITCSECTrdReqSOPQryShareholderInfo = 4099,
  TagType_enumtype_DFITCSECTrdReqSOPCalcAbleEntrustQty = 4100,
  TagType_enumtype_DFITCSECTrdReqSOPQryAbleLockStock = 4101,
  TagType_enumtype_DFITCSECTrdReqSOPQryContactInfo = 4102,
  TagType_enumtype_DFITCSECTrdReqSOPExectueOrder = 4103,
  TagType_enumtype_DFITCSECTrdReqSOPQryExecAssiInfo = 4104,
  TagType_enumtype_DFITCSECTrdReqSOPQryTradeTime = 4105,
  TagType_enumtype_DFITCSECTrdReqSOPQryExchangeInfo = 4106,
  TagType_enumtype_DFITCSECTrdReqSOPQryCommission = 4107,
  TagType_enumtype_DFITCSECTrdReqSOPQryDeposit = 4108,
  TagType_enumtype_DFITCSECTrdReqSOPQryContractObjectInfo = 4109,
  TagType_enumtype_DFITCSECTrdReqFASLUserLogin = 4110,
  TagType_enumtype_DFITCSECTrdReqFASLUserLogout = 4111,
  TagType_enumtype_DFITCSECTrdReqFASLQryAbleFinInfo = 4112,
  TagType_enumtype_DFITCSECTrdReqFASLQryAbleSloInfo = 4113,
  TagType_enumtype_DFITCSECTrdReqFASLTransferCollateral = 4114,
  TagType_enumtype_DFITCSECTrdReqFASLDirectRepayment = 4115,
  TagType_enumtype_DFITCSECTrdReqFASLRepayStockTransfer = 4116,
  TagType_enumtype_DFITCSECTrdReqFASLEntrustCrdtOrder = 4117,
  TagType_enumtype_DFITCSECTrdReqFASLEntrsuctOrder = 4118,
  TagType_enumtype_DFITCSECTrdReqFASLWithdrawOrder = 4119,
  TagType_enumtype_DFITCSECTrdReqFASLCalcAbleEntrustCrdtQty = 4120,
  TagType_enumtype_DFITCSECTrdReqFASLQryCrdtFunds = 4121,
  TagType_enumtype_DFITCSECTrdReqFASLQryCrdtContract = 4122,
  TagType_enumtype_DFITCSECTrdReqFASLQryCrdtConChangeInfo = 4123,
  TagType_enumtype_DFITCSECTrdReqFASLTransferFunds = 4124,
  TagType_enumtype_DFITCSECTrdReqFASLQryAccountInfo = 4125,
  TagType_enumtype_DFITCSECTrdReqFASLQryCapitalAccountInfo = 4126,
  TagType_enumtype_DFITCSECTrdReqFASLQryShareholderInfo = 4127,
  TagType_enumtype_DFITCSECTrdReqFASLQryPosition = 4128,
  TagType_enumtype_DFITCSECTrdReqFASLQryEntrustOrder = 4129,
  TagType_enumtype_DFITCSECTrdReqFASLQrySerialTrade = 4130,
  TagType_enumtype_DFITCSECTrdReqFASLQryRealTimeTrade = 4131,
  TagType_enumtype_DFITCSECTrdReqFASLQryFreezeFundsDetail = 4132,
  TagType_enumtype_DFITCSECTrdReqFASLQryFreezeStockDetail = 4133,
  TagType_enumtype_DFITCSECTrdReqFASLQryTransferFundsDetail = 4134,
  TagType_enumtype_DFITCSECTrdReqFASLQrySystemTime = 4135,
  TagType_enumtype_DFITCSECTrdReqFASLQryTransferredContract = 4136,
  TagType_enumtype_DFITCSECTrdReqFASLDesirableFundsOut = 4137,
  TagType_enumtype_DFITCSECTrdReqFASLQryGuaranteedContract = 4138,
  TagType_enumtype_DFITCSECTrdReqFASLQryUnderlyingContract = 4139,
  TagType_enumtype_XTPMdOnDisconnected = 4150,
  TagType_enumtype_XTPMdOnError = 4151,
  TagType_enumtype_XTPMdOnSubMarketData = 4152,
  TagType_enumtype_XTPMdOnUnSubMarketData = 4153,
  TagType_enumtype_XTPMdOnMarketData = 4154,
  TagType_enumtype_XTPMdOnSubOrderBook = 4155,
  TagType_enumtype_XTPMdOnUnSubOrderBook = 4156,
  TagType_enumtype_XTPMdOnOrderBook = 4157,
  TagType_enumtype_XTPMdOnQueryAllTickers = 4158,
  TagType_enumtype_XTPMdGetTradingDay = 4168,
  TagType_enumtype_XTPMdGetApiVersion = 4169,
  TagType_enumtype_XTPMdGetApiLastError = 4170,
  TagType_enumtype_XTPMdSubscribeMarketData = 4171,
  TagType_enumtype_XTPMdUnSubscribeMarketData = 4172,
  TagType_enumtype_XTPMdSubscribeOrderBook = 4173,
  TagType_enumtype_XTPMdUnSubscribeOrderBook = 4174,
  TagType_enumtype_XTPMdLogin = 4175,
  TagType_enumtype_XTPMdLogout = 4176,
  TagType_enumtype_XTPMdQueryAllTickers = 4177,
  TagType_enumtype_XTPTrdOnDisconnected = 4180,
  TagType_enumtype_XTPTrdOnError = 4181,
  TagType_enumtype_XTPTrdOnOrderEvent = 4182,
  TagType_enumtype_XTPTrdOnTradeEvent = 4183,
  TagType_enumtype_XTPTrdOnCancelOrderError = 4184,
  TagType_enumtype_XTPTrdOnQueryOrder = 4185,
  TagType_enumtype_XTPTrdOnQueryTrade = 4186,
  TagType_enumtype_XTPTrdOnQueryPosition = 4187,
  TagType_enumtype_XTPTrdOnQueryAsset = 4188,
  TagType_enumtype_XTPTrdGetTradingDay = 4198,
  TagType_enumtype_XTPTrdGetApiLastError = 4199,
  TagType_enumtype_XTPTrdGetApiVersion = 4200,
  TagType_enumtype_XTPTrdGetClientIDByXTPID = 4201,
  TagType_enumtype_XTPTrdGetAccountByXTPID = 4202,
  TagType_enumtype_XTPTrdSetSoftwareVersion = 4203,
  TagType_enumtype_XTPTrdSetSoftwareKey = 4204,
  TagType_enumtype_XTPTrdLogin = 4205,
  TagType_enumtype_XTPTrdLogout = 4206,
  TagType_enumtype_XTPTrdInsertOrder = 4207,
  TagType_enumtype_XTPTrdCancelOrder = 4208,
  TagType_enumtype_XTPTrdQueryOrderByXTPID = 4209,
  TagType_enumtype_XTPTrdQueryOrders = 4210,
  TagType_enumtype_XTPTrdQueryTradesByXTPID = 4211,
  TagType_enumtype_XTPTrdQueryTrades = 4212,
  TagType_enumtype_XTPTrdQueryPosition = 4213,
  TagType_enumtype_XTPTrdQueryAsset = 4214,
  TagType_enumtype_LTSMdOnFrontConnected = 4220,
  TagType_enumtype_LTSMdOnFrontDisconnected = 4221,
  TagType_enumtype_LTSMdOnHeartBeatWarning = 4222,
  TagType_enumtype_LTSMdOnRspError = 4223,
  TagType_enumtype_LTSMdOnRspUserLogin = 4224,
  TagType_enumtype_LTSMdOnRspUserLogout = 4225,
  TagType_enumtype_LTSMdOnRspSubMarketData = 4226,
  TagType_enumtype_LTSMdOnRspUnSubMarketData = 4227,
  TagType_enumtype_LTSMdOnRtnDepthMarketData = 4228,
  TagType_enumtype_LTSMdGetTradingDay = 4238,
  TagType_enumtype_LTSMdRegisterFront = 4239,
  TagType_enumtype_LTSMdSubscribeMarketData = 4240,
  TagType_enumtype_LTSMdUnSubscribeMarketData = 4241,
  TagType_enumtype_LTSMdReqUserLogin = 4242,
  TagType_enumtype_LTSMdReqUserLogout = 4243,
  TagType_enumtype_LTSTrdOnFrontConnected = 4250,
  TagType_enumtype_LTSTrdOnFrontDisconnected = 4251,
  TagType_enumtype_LTSTrdOnHeartBeatWarning = 4252,
  TagType_enumtype_LTSTrdOnRspError = 4253,
  TagType_enumtype_LTSTrdOnRspUserLogin = 4254,
  TagType_enumtype_LTSTrdOnRspUserLogout = 4255,
  TagType_enumtype_LTSTrdOnRspFetchAuthRandCode = 4256,
  TagType_enumtype_LTSTrdOnRspOrderInsert = 4257,
  TagType_enumtype_LTSTrdOnRspOrderAction = 4258,
  TagType_enumtype_LTSTrdOnRspUserPasswordUpdate = 4259,
  TagType_enumtype_LTSTrdOnRspTradingAccountPasswordUpdate = 4260,
  TagType_enumtype_LTSTrdOnRtnOrder = 4261,
  TagType_enumtype_LTSTrdOnRtnTrade = 4262,
  TagType_enumtype_LTSTrdOnErrRtnOrderInsert = 4263,
  TagType_enumtype_LTSTrdOnErrRtnOrderAction = 4264,
  TagType_enumtype_LTSTrdOnRspFundOutByLiber = 4265,
  TagType_enumtype_LTSTrdOnRtnFundOutByLiber = 4266,
  TagType_enumtype_LTSTrdOnErrRtnFundOutByLiber = 4267,
  TagType_enumtype_LTSTrdOnRtnFundInByBank = 4268,
  TagType_enumtype_LTSTrdOnRspFundInterTransfer = 4269,
  TagType_enumtype_LTSTrdOnRtnFundInterTransferSerial = 4270,
  TagType_enumtype_LTSTrdOnErrRtnFundInterTransfer = 4271,
  TagType_enumtype_LTSTrdGetTradingDay = 4281,
  TagType_enumtype_LTSTrdRegisterFront = 4282,
  TagType_enumtype_LTSTrdSubscribePrivateTopic = 4283,
  TagType_enumtype_LTSTrdSubscribePublicTopic = 4284,
  TagType_enumtype_LTSTrdReqUserLogin = 4285,
  TagType_enumtype_LTSTrdReqUserLogout = 4286,
  TagType_enumtype_LTSTrdReqFetchAuthRandCode = 4287,
  TagType_enumtype_LTSTrdReqOrderInsert = 4288,
  TagType_enumtype_LTSTrdReqOrderAction = 4289,
  TagType_enumtype_LTSTrdReqUserPasswordUpdate = 4290,
  TagType_enumtype_LTSTrdReqTradingAccountPasswordUpdate = 4291,
  TagType_enumtype_LTSTrdReqFundOutByLiber = 4292,
  TagType_enumtype_LTSTrdReqFundInterTransfer = 4293,
  TagType_enumtype_LTSQryOnFrontConnected = 4300,
  TagType_enumtype_LTSQryOnFrontDisconnected = 4301,
  TagType_enumtype_LTSQryOnHeartBeatWarning = 4302,
  TagType_enumtype_LTSQryOnRspError = 4303,
  TagType_enumtype_LTSQryOnRspUserLogin = 4304,
  TagType_enumtype_LTSQryOnRspUserLogout = 4305,
  TagType_enumtype_LTSQryOnRspFetchAuthRandCode = 4306,
  TagType_enumtype_LTSQryOnRspQryExchange = 4307,
  TagType_enumtype_LTSQryOnRspQryInstrument = 4308,
  TagType_enumtype_LTSQryOnRspQryInvestor = 4309,
  TagType_enumtype_LTSQryOnRspQryTradingCode = 4310,
  TagType_enumtype_LTSQryOnRspQryTradingAccount = 4311,
  TagType_enumtype_LTSQryOnRspQryBondInterest = 4312,
  TagType_enumtype_LTSQryOnRspQryMarketRationInfo = 4313,
  TagType_enumtype_LTSQryOnRspQryInstrumentCommissionRate = 4314,
  TagType_enumtype_LTSQryOnRspQryETFInstrument = 4315,
  TagType_enumtype_LTSQryOnRspQryETFBasket = 4316,
  TagType_enumtype_LTSQryOnRspQryOFInstrument = 4317,
  TagType_enumtype_LTSQryOnRspQrySFInstrument = 4318,
  TagType_enumtype_LTSQryOnRspQryInstrumentUnitMargin = 4319,
  TagType_enumtype_LTSQryOnRspQryPreDelivInfo = 4320,
  TagType_enumtype_LTSQryOnRspQryCreditStockAssignInfo = 4321,
  TagType_enumtype_LTSQryOnRspQryCreditCashAssignInfo = 4322,
  TagType_enumtype_LTSQryOnRspQryConversionRate = 4323,
  TagType_enumtype_LTSQryOnRspQryHisCreditDebtInfo = 4324,
  TagType_enumtype_LTSQryOnRspQryMarketDataStaticInfo = 4325,
  TagType_enumtype_LTSQryOnRspQryExpireRepurchInfo = 4326,
  TagType_enumtype_LTSQryOnRspQryBondPledgeRate = 4327,
  TagType_enumtype_LTSQryOnRspQryPledgeBond = 4328,
  TagType_enumtype_LTSQryOnRspQryOrder = 4329,
  TagType_enumtype_LTSQryOnRspQryTrade = 4330,
  TagType_enumtype_LTSQryOnRspQryInvestorPosition = 4331,
  TagType_enumtype_LTSQryOnRspQryFundTransferSerial = 4332,
  TagType_enumtype_LTSQryOnRspQryFundInterTransferSerial = 4333,
  TagType_enumtype_LTSQryGetTradingDay = 4343,
  TagType_enumtype_LTSQryRegisterFront = 4344,
  TagType_enumtype_LTSQryReqUserLogin = 4345,
  TagType_enumtype_LTSQryReqUserLogout = 4346,
  TagType_enumtype_LTSQryReqFetchAuthRandCode = 4347,
  TagType_enumtype_LTSQryReqQryExchange = 4348,
  TagType_enumtype_LTSQryReqQryInstrument = 4349,
  TagType_enumtype_LTSQryReqQryInvestor = 4350,
  TagType_enumtype_LTSQryReqQryTradingCode = 4351,
  TagType_enumtype_LTSQryReqQryTradingAccount = 4352,
  TagType_enumtype_LTSQryReqQryBondInterest = 4353,
  TagType_enumtype_LTSQryReqQryMarketRationInfo = 4354,
  TagType_enumtype_LTSQryReqQryInstrumentCommissionRate = 4355,
  TagType_enumtype_LTSQryReqQryETFInstrument = 4356,
  TagType_enumtype_LTSQryReqQryETFBasket = 4357,
  TagType_enumtype_LTSQryReqQryOFInstrument = 4358,
  TagType_enumtype_LTSQryReqQrySFInstrument = 4359,
  TagType_enumtype_LTSQryReqQryInstrumentUnitMargin = 4360,
  TagType_enumtype_LTSQryReqQryPreDelivInfo = 4361,
  TagType_enumtype_LTSQryReqQryCreditStockAssignInfo = 4362,
  TagType_enumtype_LTSQryReqQryCreditCashAssignInfo = 4363,
  TagType_enumtype_LTSQryReqQryConversionRate = 4364,
  TagType_enumtype_LTSQryReqQryHisCreditDebtInfo = 4365,
  TagType_enumtype_LTSQryReqQryMarketDataStaticInfo = 4366,
  TagType_enumtype_LTSQryReqQryExpireRepurchInfo = 4367,
  TagType_enumtype_LTSQryReqQryBondPledgeRate = 4368,
  TagType_enumtype_LTSQryReqQryPledgeBond = 4369,
  TagType_enumtype_LTSQryReqQryOrder = 4370,
  TagType_enumtype_LTSQryReqQryTrade = 4371,
  TagType_enumtype_LTSQryReqQryInvestorPosition = 4372,
  TagType_enumtype_LTSQryReqQryFundTransferSerial = 4373,
  TagType_enumtype_LTSQryReqQryFundInterTransferSerial = 4374,
  TagType_enumtype_KCBPMdOnQuote = 4380,
  TagType_enumtype_KCBPMdOnMktTrd = 4381,
  TagType_enumtype_KCBTrdOnFill = 4382,
  TagType_enumtype_YahooMdOnSnapshot = 4383,
  TagType_enumtype_SinaMdOnSnapshot = 4384,
  TagType_enumtype_LeverFunMdOnSnapshot = 4385,
  TagType_enumtype_ESUNNY3MdOnRspLogin = 4390,
  TagType_enumtype_ESUNNY3MdOnChannelLost = 4391,
  TagType_enumtype_ESUNNY3MdOnStkQuot = 4392,
  TagType_enumtype_ESUNNY3MdOnRspHistoryQuot = 4393,
  TagType_enumtype_ESUNNY3MdOnRspTraceData = 4394,
  TagType_enumtype_ESUNNY3MdOnRspMarketInfo = 4395,
  TagType_enumtype_ESUNNY3TrdOnOpen = 4400,
  TagType_enumtype_ESUNNY3TrdOnClose = 4401,
  TagType_enumtype_ESUNNY3TrdOnLogin = 4402,
  TagType_enumtype_ESUNNY3TrdOnInitFinished = 4403,
  TagType_enumtype_ESUNNY3TrdOnLogOut = 4404,
  TagType_enumtype_ESUNNY3TrdOnRspSetPassword = 4405,
  TagType_enumtype_ESUNNY3TrdOnRspSetOperPassword = 4406,
  TagType_enumtype_ESUNNY3TrdOnQryMoney = 4407,
  TagType_enumtype_ESUNNY3TrdOnRtnMoney = 4408,
  TagType_enumtype_ESUNNY3TrdOnRspCashOperQry = 4409,
  TagType_enumtype_ESUNNY3TrdOnRspCashOper = 4410,
  TagType_enumtype_ESUNNY3TrdOnRtnCashOper = 4411,
  TagType_enumtype_ESUNNY3TrdOnRspCashCheck = 4412,
  TagType_enumtype_ESUNNY3TrdOnRtnCashCheck = 4413,
  TagType_enumtype_ESUNNY3TrdOnRspCashAdjustQry = 4414,
  TagType_enumtype_ESUNNY3TrdOnRspOrderInsert = 4415,
  TagType_enumtype_ESUNNY3TrdOnRspOrderModify = 4416,
  TagType_enumtype_ESUNNY3TrdOnRspOrderDelete = 4417,
  TagType_enumtype_ESUNNY3TrdOnRspQryOrder = 4418,
  TagType_enumtype_ESUNNY3TrdOnRspHistOrderQry = 4419,
  TagType_enumtype_ESUNNY3TrdOnRtnOrderState = 4420,
  TagType_enumtype_ESUNNY3TrdOnRtnOrderInfo = 4421,
  TagType_enumtype_ESUNNY3TrdOnRspMatchQry = 4422,
  TagType_enumtype_ESUNNY3TrdOnRtnMatchState = 4423,
  TagType_enumtype_ESUNNY3TrdOnRtnMatchInfo = 4424,
  TagType_enumtype_ESUNNY3TrdOnRspHistMatchQry = 4425,
  TagType_enumtype_ESUNNY3TrdOnQryHold = 4426,
  TagType_enumtype_ESUNNY3TrdOnRtnHold = 4427,
  TagType_enumtype_ESUNNY3TrdOnQryExchangeState = 4428,
  TagType_enumtype_ESUNNY3TrdOnRtnExchangeState = 4429,
  TagType_enumtype_ESUNNY3TrdOnQryCommodity = 4430,
  TagType_enumtype_ESUNNY3TrdOnQryContract = 4431,
  TagType_enumtype_ESUNNY3TrdOnQryClient = 4432,
  TagType_enumtype_ESUNNY3TrdOnRspHistCashOperQry = 4433,
  TagType_enumtype_ESUNNY3TrdOnRspHistCashAdjustQry = 4434,
  TagType_enumtype_ESUNNY3TrdOnRspAuthClient = 4435,
  TagType_enumtype_ESUNNY3TrdOnRspQryCurrency = 4436,
  TagType_enumtype_ESUNNY3TrdOnRtnExchangeRateMod = 4437,
  TagType_enumtype_ESUNNY3TrdOnRtnOrderRemove = 4438,
  TagType_enumtype_ESUNNY3TrdOnRtnMatchRemove = 4439,
  TagType_enumtype_ESUNNY3TrdOnRtnCommodityState = 4440,
  TagType_enumtype_ESUNNY3TrdOnRtnContractAdd = 4441,
  TagType_enumtype_ESUNNY3TrdOnRspQryMonitorEvent = 4442,
  TagType_enumtype_ESUNNY3TrdOnRtnMonitorEvent = 4443,
  TagType_enumtype_ESUNNY3TrdOnRspHKMarketOrder = 4444,
  TagType_enumtype_ESUNNY3TrdOnRspQryClientCountRent = 4445,
  TagType_enumtype_ESUNNY3TrdOnRspQryLmeContract = 4446,
  TagType_enumtype_ESUNNY3TrdOnRtnLmeContract = 4447,
  TagType_enumtype_ESUNNY3TrdOnRspQryHisHold = 4448,
  TagType_enumtype_ESUNNY3TrdOnRspQryHisMoney = 4449,
  TagType_enumtype_ESUNNY3TrdSetSpi = 4459,
  TagType_enumtype_ESUNNY3TrdFree = 4460,
  TagType_enumtype_ESUNNY3TrdGetErrcodeDesc = 4461,
  TagType_enumtype_ESUNNY3TrdOpen = 4462,
  TagType_enumtype_ESUNNY3TrdClose = 4463,
  TagType_enumtype_ESUNNY3TrdIsOpen = 4464,
  TagType_enumtype_ESUNNY3TrdLogin = 4465,
  TagType_enumtype_ESUNNY3TrdSetVertificateCode = 4466,
  TagType_enumtype_ESUNNY3TrdLogOut = 4467,
  TagType_enumtype_ESUNNY3TrdSetPassword = 4468,
  TagType_enumtype_ESUNNY3TrdSetOperPassword = 4469,
  TagType_enumtype_ESUNNY3TrdQryClients = 4470,
  TagType_enumtype_ESUNNY3TrdQryMoney = 4471,
  TagType_enumtype_ESUNNY3TrdQryOrder = 4472,
  TagType_enumtype_ESUNNY3TrdQryMatch = 4473,
  TagType_enumtype_ESUNNY3TrdQryHold = 4474,
  TagType_enumtype_ESUNNY3TrdQryExchangeState = 4475,
  TagType_enumtype_ESUNNY3TrdQryCommodity = 4476,
  TagType_enumtype_ESUNNY3TrdQryContract = 4477,
  TagType_enumtype_ESUNNY3TrdOrderInsert = 4478,
  TagType_enumtype_ESUNNY3TrdOrderModify = 4479,
  TagType_enumtype_ESUNNY3TrdOrderDelete = 4480,
  TagType_enumtype_ESUNNY3TrdQryHistOrder = 4481,
  TagType_enumtype_ESUNNY3TrdQryHistMatch = 4482,
  TagType_enumtype_ESUNNY3TrdQryCashOper = 4483,
  TagType_enumtype_ESUNNY3TrdCashOper = 4484,
  TagType_enumtype_ESUNNY3TrdCashCheck = 4485,
  TagType_enumtype_ESUNNY3TrdQryCachAdjust = 4486,
  TagType_enumtype_ESUNNY3TrdQryHistCashOper = 4487,
  TagType_enumtype_ESUNNY3TrdQryHistCachAdjust = 4488,
  TagType_enumtype_ESUNNY3TrdAuthClient = 4489,
  TagType_enumtype_ESUNNY3TrdQryCurrency = 4490,
  TagType_enumtype_ESUNNY3TrdGetCertCodeExpireDate = 4491,
  TagType_enumtype_ESUNNY3TrdQryMonitorEvent = 4492,
  TagType_enumtype_ESUNNY3TrdHKMarketOrderOperator = 4493,
  TagType_enumtype_ESUNNY3TrdQryCountRent = 4494,
  TagType_enumtype_ESUNNY3TrdQryLmeContract = 4495,
  TagType_enumtype_ESUNNY3TrdQryHisHold = 4496,
  TagType_enumtype_ESUNNY3TrdQryHisMoney = 4497,
  TagType_enumtype_ESUNNY9MdOnRspLogin = 4500,
  TagType_enumtype_ESUNNY9MdOnAPIReady = 4501,
  TagType_enumtype_ESUNNY9MdOnDisconnect = 4502,
  TagType_enumtype_ESUNNY9MdOnRspQryCommodity = 4503,
  TagType_enumtype_ESUNNY9MdOnRspQryContract = 4504,
  TagType_enumtype_ESUNNY9MdOnRspSubscribeQuote = 4505,
  TagType_enumtype_ESUNNY9MdOnRspUnSubscribeQuote = 4506,
  TagType_enumtype_ESUNNY9MdOnRtnQuote = 4507,
  TagType_enumtype_ESUNNY9MdSetAPINotify = 4517,
  TagType_enumtype_ESUNNY9MdSetHostAddress = 4518,
  TagType_enumtype_ESUNNY9MdLogin = 4519,
  TagType_enumtype_ESUNNY9MdDisconnect = 4520,
  TagType_enumtype_ESUNNY9MdQryCommodity = 4521,
  TagType_enumtype_ESUNNY9MdQryContract = 4522,
  TagType_enumtype_ESUNNY9MdSubscribeQuote = 4523,
  TagType_enumtype_ESUNNY9MdUnSubscribeQuote = 4524,
  TagType_enumtype_ESUNNY9TrdOnConnect = 4530,
  TagType_enumtype_ESUNNY9TrdOnRspLogin = 4531,
  TagType_enumtype_ESUNNY9TrdOnExpriationDate = 4532,
  TagType_enumtype_ESUNNY9TrdOnAPIReady = 4533,
  TagType_enumtype_ESUNNY9TrdOnDisconnect = 4534,
  TagType_enumtype_ESUNNY9TrdOnRspChangePassword = 4535,
  TagType_enumtype_ESUNNY9TrdOnRspSetReservedInfo = 4536,
  TagType_enumtype_ESUNNY9TrdOnRspQryAccount = 4537,
  TagType_enumtype_ESUNNY9TrdOnRspQryFund = 4538,
  TagType_enumtype_ESUNNY9TrdOnRtnFund = 4539,
  TagType_enumtype_ESUNNY9TrdOnRspQryExchange = 4540,
  TagType_enumtype_ESUNNY9TrdOnRspQryCommodity = 4541,
  TagType_enumtype_ESUNNY9TrdOnRspQryContract = 4542,
  TagType_enumtype_ESUNNY9TrdOnRtnContract = 4543,
  TagType_enumtype_ESUNNY9TrdOnRspOrderAction = 4544,
  TagType_enumtype_ESUNNY9TrdOnRtnOrder = 4545,
  TagType_enumtype_ESUNNY9TrdOnRspQryOrder = 4546,
  TagType_enumtype_ESUNNY9TrdOnRspQryOrderProcess = 4547,
  TagType_enumtype_ESUNNY9TrdOnRspQryFill = 4548,
  TagType_enumtype_ESUNNY9TrdOnRtnFill = 4549,
  TagType_enumtype_ESUNNY9TrdOnRspQryPosition = 4550,
  TagType_enumtype_ESUNNY9TrdOnRtnPosition = 4551,
  TagType_enumtype_ESUNNY9TrdOnRtnPositionProfit = 4552,
  TagType_enumtype_ESUNNY9TrdOnRspQryCurrency = 4553,
  TagType_enumtype_ESUNNY9TrdOnRspQryTradeMessage = 4554,
  TagType_enumtype_ESUNNY9TrdOnRtnTradeMessage = 4555,
  TagType_enumtype_ESUNNY9TrdOnRspQryHisOrder = 4556,
  TagType_enumtype_ESUNNY9TrdOnRspQryHisOrderProcess = 4557,
  TagType_enumtype_ESUNNY9TrdOnRspQryHisMatch = 4558,
  TagType_enumtype_ESUNNY9TrdOnRspQryHisPosition = 4559,
  TagType_enumtype_ESUNNY9TrdOnRspQryHisDelivery = 4560,
  TagType_enumtype_ESUNNY9TrdOnRspQryAccountCashAdjust = 4561,
  TagType_enumtype_ESUNNY9TrdOnRspQryBill = 4562,
  TagType_enumtype_ESUNNY9TrdOnRspQryAccountFeeRent = 4563,
  TagType_enumtype_ESUNNY9TrdOnRspQryAccountMarginRent = 4564,
  TagType_enumtype_ESUNNY9TrdOnRspHKMarketOrderInsert = 4565,
  TagType_enumtype_ESUNNY9TrdOnRspHKMarketOrderDelete = 4566,
  TagType_enumtype_ESUNNY9TrdOnHKMarketQuoteNotice = 4567,
  TagType_enumtype_ESUNNY9TrdOnRspOrderLocalRemove = 4568,
  TagType_enumtype_ESUNNY9TrdOnRspOrderLocalInput = 4569,
  TagType_enumtype_ESUNNY9TrdOnRspOrderLocalModify = 4570,
  TagType_enumtype_ESUNNY9TrdOnRspOrderLocalTransfer = 4571,
  TagType_enumtype_ESUNNY9TrdOnRspFillLocalInput = 4572,
  TagType_enumtype_ESUNNY9TrdOnRspFillLocalRemove = 4573,
  TagType_enumtype_ESUNNY9TrdSetAPINotify = 4583,
  TagType_enumtype_ESUNNY9TrdSetHostAddress = 4584,
  TagType_enumtype_ESUNNY9TrdLogin = 4585,
  TagType_enumtype_ESUNNY9TrdSetVertificateCode = 4586,
  TagType_enumtype_ESUNNY9TrdDisconnect = 4587,
  TagType_enumtype_ESUNNY9TrdChangePassword = 4588,
  TagType_enumtype_ESUNNY9TrdHaveCertainRight = 4589,
  TagType_enumtype_ESUNNY9TrdSetReservedInfo = 4590,
  TagType_enumtype_ESUNNY9TrdQryAccount = 4591,
  TagType_enumtype_ESUNNY9TrdQryFund = 4592,
  TagType_enumtype_ESUNNY9TrdQryExchange = 4593,
  TagType_enumtype_ESUNNY9TrdQryCommodity = 4594,
  TagType_enumtype_ESUNNY9TrdQryContract = 4595,
  TagType_enumtype_ESUNNY9TrdInsertOrder = 4596,
  TagType_enumtype_ESUNNY9TrdCancelOrder = 4597,
  TagType_enumtype_ESUNNY9TrdAmendOrder = 4598,
  TagType_enumtype_ESUNNY9TrdActivateOrder = 4599,
  TagType_enumtype_ESUNNY9TrdQryOrder = 4600,
  TagType_enumtype_ESUNNY9TrdQryOrderProcess = 4601,
  TagType_enumtype_ESUNNY9TrdQryFill = 4602,
  TagType_enumtype_ESUNNY9TrdQryPosition = 4603,
  TagType_enumtype_ESUNNY9TrdQryCurrency = 4604,
  TagType_enumtype_ESUNNY9TrdQryAccountCashAdjust = 4605,
  TagType_enumtype_ESUNNY9TrdQryTradeMessage = 4606,
  TagType_enumtype_ESUNNY9TrdQryBill = 4607,
  TagType_enumtype_ESUNNY9TrdQryHisOrder = 4608,
  TagType_enumtype_ESUNNY9TrdQryHisOrderProcess = 4609,
  TagType_enumtype_ESUNNY9TrdQryHisMatch = 4610,
  TagType_enumtype_ESUNNY9TrdQryHisPosition = 4611,
  TagType_enumtype_ESUNNY9TrdQryHisDelivery = 4612,
  TagType_enumtype_ESUNNY9TrdQryAccountFeeRent = 4613,
  TagType_enumtype_ESUNNY9TrdQryAccountMarginRent = 4614,
  TagType_enumtype_ESUNNY9TrdInsertHKMarketOrder = 4615,
  TagType_enumtype_ESUNNY9TrdCancelHKMarketOrder = 4616,
  TagType_enumtype_ESUNNY9TrdOrderLocalRemove = 4617,
  TagType_enumtype_ESUNNY9TrdOrderLocalInput = 4618,
  TagType_enumtype_ESUNNY9TrdOrderLocalModify = 4619,
  TagType_enumtype_ESUNNY9TrdOrderLocalTransfer = 4620,
  TagType_enumtype_ESUNNY9TrdFillLocalInput = 4621,
  TagType_enumtype_ESUNNY9TrdFillLocalRemove = 4622,
  TagType_enumtype_InstrOnAdd = 5901,
  TagType_enumtype_InstrOnMktData = 5902,
  TagType_enumtype_InstrOnOrderFill = 5903,
  TagType_enumtype_InstrOnOrderSentRejected = 5904,
  TagType_enumtype_InstrOnOrderCnf = 5905,
  TagType_enumtype_InstrOnOrderCxlRejected = 5906,
  TagType_enumtype_InstrOnOrderCxl = 5907,
  TagType_enumtype_InstrOnOrderFinished = 5908,
  TagType_enumtype_ZMQInprocPubFlag = 5921,
  TagType_enumtype_ZMQPubFlag = 5922,
  TagType_enumtype_ZMQInprocPubBindStr = 5923,
  TagType_enumtype_ZMQIpcPubBindStr = 5924,
  TagType_enumtype_ZMQTcpPubBindStr = 5925,
  TagType_enumtype_S = 6001,
  TagType_enumtype_X = 6002,
  TagType_enumtype_T = 6003,
  TagType_enumtype_r = 6004,
  TagType_enumtype_b = 6005,
  TagType_enumtype_sigma = 6006,
  TagType_enumtype_DTE = 6007,
  TagType_enumtype_Px = 6008,
  TagType_enumtype_sigma0 = 6009,
  TagType_enumtype_dS = 6010,
  TagType_enumtype_d1 = 6011,
  TagType_enumtype_d2 = 6012,
  TagType_enumtype_nd1 = 6013,
  TagType_enumtype_nd2 = 6014,
  TagType_enumtype_pd1 = 6015,
  TagType_enumtype_pd2 = 6016,
  TagType_enumtype_Delta = 6021,
  TagType_enumtype_DeltaP = 6022,
  TagType_enumtype_DdeltaDvol = 6023,
  TagType_enumtype_DvannaDvol = 6024,
  TagType_enumtype_DdeltaDtime = 6025,
  TagType_enumtype_Elasticity = 6026,
  TagType_enumtype_Speed = 6027,
  TagType_enumtype_DeltaNorm = 6028,
  TagType_enumtype_OCDeltaNorm = 6029,
  TagType_enumtype_Gamma = 6031,
  TagType_enumtype_GammaP = 6032,
  TagType_enumtype_DgammaDvol = 6033,
  TagType_enumtype_DgammaPDvol = 6034,
  TagType_enumtype_DgammaDspot = 6035,
  TagType_enumtype_DgammaPDspot = 6036,
  TagType_enumtype_DgammaDtime = 6037,
  TagType_enumtype_DgammaPDtime = 6038,
  TagType_enumtype_GammaNorm = 6039,
  TagType_enumtype_OCGammaNorm = 6040,
  TagType_enumtype_Vega = 6041,
  TagType_enumtype_VegaP = 6042,
  TagType_enumtype_DvegaDvol = 6043,
  TagType_enumtype_DvegaPDvol = 6044,
  TagType_enumtype_DvommaDvol = 6045,
  TagType_enumtype_DvegaDtime = 6046,
  TagType_enumtype_VegaNorm = 6047,
  TagType_enumtype_OCVegaNorm = 6048,
  TagType_enumtype_OCVega = 6049,
  TagType_enumtype_VarianceVega = 6051,
  TagType_enumtype_DdeltaDvar = 6052,
  TagType_enumtype_VarianceVomma = 6053,
  TagType_enumtype_VarianceUltima = 6054,
  TagType_enumtype_Theta = 6061,
  TagType_enumtype_DriftlessTheta = 6062,
  TagType_enumtype_Rho = 6071,
  TagType_enumtype_OOFRho = 6072,
  TagType_enumtype_Phi = 6073,
  TagType_enumtype_CarryRho = 6074,
  TagType_enumtype_Zeta = 6081,
  TagType_enumtype_DzetaDvol = 6082,
  TagType_enumtype_DzetaDtime = 6083,
  TagType_enumtype_StrikeDelta = 6091,
  TagType_enumtype_StrikeGamma = 6092,
  TagType_enumtype_LocalDelta = 6101,
  TagType_enumtype_LocalGamma = 6102,
  TagType_enumtype_LocalVega = 6103,
  TagType_enumtype_LocalTheta = 6104,
  TagType_enumtype_LocalRho = 6105,
  TagType_enumtype_ImpVol = 6201,
  TagType_enumtype_ImpVolBid = 6202,
  TagType_enumtype_ImpVolMid = 6203,
  TagType_enumtype_ImpVolAsk = 6204,
  TagType_enumtype_ImpVolEpsilon = 6205,
  TagType_enumtype_ImpVolPxEpsilon = 6206,
  TagType_enumtype_TimeSteps = 6207,
  TagType_enumtype_PxSteps = 6208,
  TagType_enumtype_AtmFwd = 6211,
  TagType_enumtype_AtmVol = 6212,
  TagType_enumtype_HistVol = 6213,
  TagType_enumtype_HistVolClose = 6214,
  TagType_enumtype_HistVolHighLow = 6215,
  TagType_enumtype_HistVolHighLowClose = 6216,
  TagType_enumtype_SynFwd = 6301,
  TagType_enumtype_SynFwdBid = 6302,
  TagType_enumtype_SynFwdAsk = 6303,
  TagType_enumtype_IntPx = 6400,
  TagType_enumtype_Sz = 6401,
  TagType_enumtype_MktSz = 6402,
  TagType_enumtype_Orders = 6403,
  TagType_enumtype_MktOrders = 6404,
  TagType_enumtype_Flag = 6405,
  TagType_enumtype_MaxBookLevels = 6406,
  TagType_enumtype_SpreadTicks = 6407,
  TagType_enumtype_ChgedTicks = 6408,
  TagType_enumtype_MidPxWeighted = 6409,
  TagType_enumtype_LastTs = 6410,
  TagType_enumtype_BookCount = 6411,
  TagType_enumtype_FlipUpsTot = 6412,
  TagType_enumtype_FlipUps = 6413,
  TagType_enumtype_FlipDnsTot = 6414,
  TagType_enumtype_FlipDns = 6415,
  TagType_enumtype_BestPxChged = 6416,
  TagType_enumtype_BestQuoteChged = 6417,
  TagType_enumtype_FlipNosTot = 6418,
  TagType_enumtype_FlipNos = 6419,
  TagType_enumtype_LastFlips = 6420,
  TagType_enumtype_LastFlipUps = 6421,
  TagType_enumtype_LastFlipDns = 6422,
  TagType_enumtype_VolCurveType = 6601,
  TagType_enumtype_PriceCurr = 6602,
  TagType_enumtype_PriceRef = 6603,
  TagType_enumtype_AtmVolRef = 6604,
  TagType_enumtype_SlopeRef = 6605,
  TagType_enumtype_AtmVolCurr = 6606,
  TagType_enumtype_SlopeCurr = 6607,
  TagType_enumtype_PutCurv = 6608,
  TagType_enumtype_CallCurv = 6609,
  TagType_enumtype_DownCut = 6610,
  TagType_enumtype_UpCut = 6611,
  TagType_enumtype_VCR = 6612,
  TagType_enumtype_SCR = 6613,
  TagType_enumtype_SSR = 6614,
  TagType_enumtype_DownSm = 6615,
  TagType_enumtype_UpSm = 6616,
  TagType_enumtype_CallPump = 6617,
  TagType_enumtype_PutPump = 6618,
  TagType_enumtype_XNormAlpha = 6619,
  TagType_enumtype_XNormRatio = 6620,
  TagType_enumtype_XNormLog = 6621,
  TagType_enumtype_XNormLogSqrt = 6622,
  TagType_enumtype_XNorm = 6623,
  TagType_enumtype_ScaleRatio = 6624,
  TagType_enumtype_ScaleX = 6625,
  TagType_enumtype_ScaleXX = 6626,
  TagType_enumtype_ScaleXXX = 6627,
  TagType_enumtype_Curv = 6628,
  TagType_enumtype_VolMult = 6629,
  TagType_enumtype_CurveVol = 6630,
  TagType_enumtype_Tag = 6631,
  TagType_enumtype_Value = 6632,
  TagType_enumtype_Intercept = 6633,
  TagType_enumtype_Slope = 6634,
  TagType_enumtype_PointX = 6641,
  TagType_enumtype_PointY = 6642,
  TagType_enumtype_PointZ = 6643,
  TagType_enumtype_PointXh = 6644,
  TagType_enumtype_PointYh = 6645,
  TagType_enumtype_PointZh = 6646,
  TagType_enumtype_PointW = 6647,
  TagType_enumtype_PointTag = 6648,
  TagType_enumtype_PointFlag = 6649,
  TagType_enumtype_CurveName = 6650,
  TagType_enumtype_Description = 6651,
  TagType_enumtype_Epsilon = 6652,
  TagType_enumtype_TsSent = 6660,
  TagType_enumtype_TsSentRejected = 6661,
  TagType_enumtype_TsRcv = 6662,
  TagType_enumtype_TsCnf = 6663,
  TagType_enumtype_TsCxlSent = 6664,
  TagType_enumtype_TsCxlRejected = 6665,
  TagType_enumtype_TsCxlCnf = 6666,
  TagType_enumtype_TsBidCxled = 6667,
  TagType_enumtype_TsAskCxled = 6668,
  TagType_enumtype_TsBidAllFilled = 6669,
  TagType_enumtype_TsAskAllFilled = 6670,
  TagType_enumtype_TsFinished = 6671,
  TagType_enumtype_Qid = 6672,
  TagType_enumtype_Oid = 6673,
  TagType_enumtype_BidOid = 6674,
  TagType_enumtype_AskOid = 6675,
  TagType_enumtype_BidFilled = 6676,
  TagType_enumtype_AskFilled = 6677,
  TagType_enumtype_SendReason = 6678,
  TagType_enumtype_MaxDrawDown = 6801,
  TagType_enumtype_MaxDollarDelta = 6802,
  TagType_enumtype_MaxDelta = 6803,
  TagType_enumtype_MaxDeltaNorm = 6804,
  TagType_enumtype_MaxDollarVega = 6805,
  TagType_enumtype_MaxVega = 6806,
  TagType_enumtype_MaxVegaNorm = 6807,
  TagType_enumtype_MaxDollarGamma = 6808,
  TagType_enumtype_MaxGamma = 6809,
  TagType_enumtype_MaxGammaNorm = 6810,
  TagType_enumtype_MaxDollarTheta = 6811,
  TagType_enumtype_MaxTheta = 6812,
  TagType_enumtype_MaxThetaNorm = 6813,
  TagType_enumtype_MaxDollarRho = 6814,
  TagType_enumtype_MaxRho = 6815,
  TagType_enumtype_MaxRhoNorm = 6816,
  TagType_enumtype_MaxCallTradeX = 6817,
  TagType_enumtype_MinCallTradeX = 6818,
  TagType_enumtype_MaxPutTradeX = 6819,
  TagType_enumtype_MinPutTradeX = 6820,
  TagType_enumtype_MaxPos = 6821,
  TagType_enumtype_PositionSource = 6822,
  TagType_enumtype_MorningBegin = 6823,
  TagType_enumtype_MorningEnd = 6824,
  TagType_enumtype_AfternoonBegin = 6825,
  TagType_enumtype_AfternoonEnd = 6826,
  TagType_enumtype_PeeBegin = 6827,
  TagType_enumtype_PeeEnd = 6828,
  TagType_enumtype_IdleBegin = 6829,
  TagType_enumtype_IdleEnd = 6830,
  TagType_enumtype_BaitRng = 6831,
  TagType_enumtype_BaitBuySz = 6832,
  TagType_enumtype_BaitSellSz = 6833,
  TagType_enumtype_JoinMktBidSz = 6834,
  TagType_enumtype_JoinMktBidDepth = 6835,
  TagType_enumtype_JoinMktAskSz = 6836,
  TagType_enumtype_JoinMktAskDepth = 6837,
  TagType_enumtype_JoinMktBidDist = 6838,
  TagType_enumtype_JoinMktAskDist = 6839,
  TagType_enumtype_IsElectronicEye = 6840,
  TagType_enumtype_IsQuoteRsp = 6841,
  TagType_enumtype_QuotingStyle = 6842,
  TagType_enumtype_QuoteVolMask = 6843,
  TagType_enumtype_OCCountMask = 6845,
  TagType_enumtype_OCQuoteSpreadRatio = 6846,
  TagType_enumtype_BuyPos = 6847,
  TagType_enumtype_SellPos = 6848,
  TagType_enumtype_BuyAvgPx = 6849,
  TagType_enumtype_SellAvgPx = 6850,
  TagType_enumtype_MaxExpireIntDate = 6851,
  TagType_enumtype_NormInstr = 6852,
  TagType_enumtype_HedgeInstr = 6853,
  TagType_enumtype_UndlyInstr = 6854,
  TagType_enumtype_MaxHedgeInstrPos = 6855,
  TagType_enumtype_MaxHedgeInstrOpenSz = 6856,
  TagType_enumtype_MaxHedgeInstrOrderSz = 6857,
  TagType_enumtype_BookRatioThresh = 6858,
  TagType_enumtype_NetPos = 6861,
  TagType_enumtype_NetPosPrev = 6862,
  TagType_enumtype_RPxPnL = 6863,
  TagType_enumtype_UPxPnL = 6864,
  TagType_enumtype_RPnL = 6865,
  TagType_enumtype_UPnL = 6866,
  TagType_enumtype_PosPnL = 6867,
  TagType_enumtype_TrdSignal = 6880,
  TagType_enumtype_TrdSigBuy = 6881,
  TagType_enumtype_TrdSigSell = 6882,
  TagType_enumtype_TrdSigBuyExit = 6883,
  TagType_enumtype_TrdSigSellExit = 6884,
  TagType_enumtype_TrdSigNone = 6885,
  TagType_enumtype_TrdStatus = 6886,
  TagType_enumtype_TrdStatNone = 6887,
  TagType_enumtype_TrdStatOn = 6888,
  TagType_enumtype_TrdStatIdle = 6889,
  TagType_enumtype_TrdStatFlat = 6890,
  TagType_enumtype_TrdStatOnInstrs = 6891,
  TagType_enumtype_TrdStatIdleInstrs = 6892,
  TagType_enumtype_TrdStatFlatInstrs = 6893,
  TagType_enumtype_ExchangeType = 6901,
  TagType_enumtype_CallPutType = 6902,
  TagType_enumtype_BuySellType = 6903,
  TagType_enumtype_RollingType = 6904,
  TagType_enumtype_OptionExerciseStyle = 6905,
  TagType_enumtype_ExpireIntDate = 6906,
  TagType_enumtype_PxPointValue = 6907,
  TagType_enumtype_TickValue = 6908,
  TagType_enumtype_ScaleDoubleToInt64 = 6909,
  TagType_enumtype_ScaleInt64ToDouble = 6910,
  TagType_enumtype_TickInt64Px = 6911,
  TagType_enumtype_Int64PxPointValue = 6912,
  TagType_enumtype_StrikeScale = 6913,
  TagType_enumtype_MonthSeq = 6914,
  TagType_enumtype_CurrIntDate = 6915,
  TagType_enumtype_ListDate = 6716,
  TagType_enumtype_ListIntDate = 6917,
  TagType_enumtype_CanPxBeNegative = 6918,
  TagType_enumtype_BktestPnL = 6920,
  TagType_enumtype_BktestPnLTicks = 6921,
  TagType_enumtype_BktestOrders = 6922,
  TagType_enumtype_BktestWinOrders = 6923,
  TagType_enumtype_BktestLoseOrders = 6924,
  TagType_enumtype_BktestProfitTaking = 6925,
  TagType_enumtype_BktestProfitTakingTicks = 6926,
  TagType_enumtype_BktestPukePnL = 6927,
  TagType_enumtype_BktestPukeTicks = 6928,
  TagType_enumtype_ProdPnL = 6930,
  TagType_enumtype_ProdPnLTicks = 6931,
  TagType_enumtype_ProdOrders = 6932,
  TagType_enumtype_ProdWinOrders = 6933,
  TagType_enumtype_ProdLoseOrders = 6934,
  TagType_enumtype_ProdProfitTaking = 6935,
  TagType_enumtype_ProdProfitTakingTicks = 6936,
  TagType_enumtype_ProdPukePnL = 6937,
  TagType_enumtype_ProdPukeTicks = 6938,
  TagType_enumtype_ProfitTakingMin = 6939,
  TagType_enumtype_PukePnLMax = 6940,
  TagType_enumtype_EntryNorm = 6941,
  TagType_enumtype_ExitNorm = 6942,
  TagType_enumtype_EntryMaxNorm = 6943,
  TagType_enumtype_ExitMaxNorm = 6944,
  TagType_enumtype_PukeNorm = 6945,
  TagType_enumtype_ProfitNorm = 6946,
  TagType_enumtype_ProfitTakingTicks = 6947,
  TagType_enumtype_ProfitTakingTicksMin = 6948,
  TagType_enumtype_ProfitTakingTicksMax = 6949,
  TagType_enumtype_PukeTicks = 6950,
  TagType_enumtype_RangeTgtSz = 6951,
  TagType_enumtype_RangeTgtLevels = 6952,
  TagType_enumtype_RangeHighPx = 6953,
  TagType_enumtype_RangeLowPx = 6954,
  TagType_enumtype_RangeCurrBuySz = 6955,
  TagType_enumtype_RangeCurrSellSz = 6956,
  TagType_enumtype_MorningOpen = 6980,
  TagType_enumtype_MorningOpenOffset = 6981,
  TagType_enumtype_MorningClose = 6982,
  TagType_enumtype_MorningCloseOffset = 6983,
  TagType_enumtype_AfternoonOpen = 6984,
  TagType_enumtype_AfternoonOpenOffset = 6985,
  TagType_enumtype_AfternoonClose = 6986,
  TagType_enumtype_AfternoonCloseOffset = 6987,
  TagType_enumtype_NightOpen = 6988,
  TagType_enumtype_NightOpenOffset = 6989,
  TagType_enumtype_NightClose = 6990,
  TagType_enumtype_NightCloseOffset = 6991,
  TagType_enumtype_LevelSz = 6992,
  TagType_enumtype_MaxLevels = 6993,
  TagType_enumtype_MaxSz = 6994,
  TagType_enumtype_VolThresh = 6995,
  TagType_enumtype_PxThresh = 6996,
  TagType_enumtype_ScalpSeedDistance = 20001,
  TagType_enumtype_ScalpOrderSize = 20002,
  TagType_enumtype_ScalpFarSeedLevels = 200031,
  TagType_enumtype_ScalpFarSeedOffset = 20004,
  TagType_enumtype_ScalpSeedLevels = 20005,
  TagType_enumtype_ScalpSeedOffset = 20006,
  TagType_enumtype_ScalpProfitTakingTicks = 20007,
  TagType_enumtype_ScalpMaxLoss = 20008,
  TagType_enumtype_ScalpTickSize = 20009,
  TagType_enumtype_ScalpMaxPositionAtPrice = 20010,
  TagType_enumtype_ScalpMaxPosition = 20011,
  TagType_enumtype_ScalpMorningStartOffset = 20012,
  TagType_enumtype_ScalpMorningPreCloseOffset = 20013,
  TagType_enumtype_ScalpMorningCloseOffset = 20014,
  TagType_enumtype_ScalpAfternoonStartOffset = 20015,
  TagType_enumtype_ScalpAfternoonPreCloseOffset = 20016,
  TagType_enumtype_ScalpAfternoonCloseOffset = 20017,
  TagType_enumtype_ScalpKeepSeedLevels = 20018,
  TagType_enumtype_ScalpGetFlatRange = 20019,
  TagType_enumtype_ScalpEveningStartOffset = 20020,
  TagType_enumtype_ScalpEveningPreCloseOffset = 20021,
  TagType_enumtype_ScalpEveningCloseOffset = 20022,
  TagType_enumtype_TA_None = 7000,
  TagType_enumtype_TA_AD = 7001,
  TagType_enumtype_TA_ADOSC = 7002,
  TagType_enumtype_TA_ADX = 7003,
  TagType_enumtype_TA_ADXR = 7004,
  TagType_enumtype_TA_APO = 7005,
  TagType_enumtype_TA_AROON = 7006,
  TagType_enumtype_TA_AROONOSC = 7007,
  TagType_enumtype_TA_ATR = 7008,
  TagType_enumtype_TA_AVGPRICE = 7009,
  TagType_enumtype_TA_BBANDS = 7010,
  TagType_enumtype_TA_BETA = 7011,
  TagType_enumtype_TA_BOP = 7012,
  TagType_enumtype_TA_CCI = 7013,
  TagType_enumtype_TA_CDL2CROWS = 7014,
  TagType_enumtype_TA_CDL3BLACKCROWS = 7015,
  TagType_enumtype_TA_CDL3INSIDE = 7016,
  TagType_enumtype_TA_CDL3LINESTRIKE = 7017,
  TagType_enumtype_TA_CDL3OUTSIDE = 7018,
  TagType_enumtype_TA_CDL3STARSINSOUTH = 7019,
  TagType_enumtype_TA_CDL3WHITESOLDIERS = 7020,
  TagType_enumtype_TA_CDLABANDONEDBABY = 7021,
  TagType_enumtype_TA_CDLADVANCEBLOCK = 7022,
  TagType_enumtype_TA_CDLBELTHOLD = 7023,
  TagType_enumtype_TA_CDLBREAKAWAY = 7024,
  TagType_enumtype_TA_CDLCLOSINGMARUBOZU = 7025,
  TagType_enumtype_TA_CDLCONCEALBABYSWALL = 7026,
  TagType_enumtype_TA_CDLCOUNTERATTACK = 7027,
  TagType_enumtype_TA_CDLDARKCLOUDCOVER = 7028,
  TagType_enumtype_TA_CDLDOJI = 7029,
  TagType_enumtype_TA_CDLDOJISTAR = 7030,
  TagType_enumtype_TA_CDLDRAGONFLYDOJI = 7031,
  TagType_enumtype_TA_CDLENGULFING = 7032,
  TagType_enumtype_TA_CDLEVENINGDOJISTAR = 7033,
  TagType_enumtype_TA_CDLEVENINGSTAR = 7034,
  TagType_enumtype_TA_CDLGAPSIDESIDEWHITE = 7035,
  TagType_enumtype_TA_CDLGRAVESTONEDOJI = 7036,
  TagType_enumtype_TA_CDLHAMMER = 7037,
  TagType_enumtype_TA_CDLHANGINGMAN = 7038,
  TagType_enumtype_TA_CDLHARAMI = 7039,
  TagType_enumtype_TA_CDLHARAMICROSS = 7040,
  TagType_enumtype_TA_CDLHIGHWAVE = 7041,
  TagType_enumtype_TA_CDLHIKKAKE = 7042,
  TagType_enumtype_TA_CDLHIKKAKEMOD = 7043,
  TagType_enumtype_TA_CDLHOMINGPIGEON = 7044,
  TagType_enumtype_TA_CDLIDENTICAL3CROWS = 7045,
  TagType_enumtype_TA_CDLINNECK = 7046,
  TagType_enumtype_TA_CDLINVERTEDHAMMER = 7047,
  TagType_enumtype_TA_CDLKICKING = 7048,
  TagType_enumtype_TA_CDLKICKINGBYLENGTH = 7049,
  TagType_enumtype_TA_CDLLADDERBOTTOM = 7050,
  TagType_enumtype_TA_CDLLONGLEGGEDDOJI = 7051,
  TagType_enumtype_TA_CDLLONGLINE = 7052,
  TagType_enumtype_TA_CDLMARUBOZU = 7053,
  TagType_enumtype_TA_CDLMATCHINGLOW = 7054,
  TagType_enumtype_TA_CDLMATHOLD = 7055,
  TagType_enumtype_TA_CDLMORNINGDOJISTAR = 7056,
  TagType_enumtype_TA_CDLMORNINGSTAR = 7057,
  TagType_enumtype_TA_CDLONNECK = 7058,
  TagType_enumtype_TA_CDLPIERCING = 7059,
  TagType_enumtype_TA_CDLRICKSHAWMAN = 7060,
  TagType_enumtype_TA_CDLRISEFALL3METHODS = 7061,
  TagType_enumtype_TA_CDLSEPARATINGLINES = 7062,
  TagType_enumtype_TA_CDLSHOOTINGSTAR = 7063,
  TagType_enumtype_TA_CDLSHORTLINE = 7064,
  TagType_enumtype_TA_CDLSPINNINGTOP = 7065,
  TagType_enumtype_TA_CDLSTALLEDPATTERN = 7066,
  TagType_enumtype_TA_CDLSTICKSANDWICH = 7067,
  TagType_enumtype_TA_CDLTAKURI = 7068,
  TagType_enumtype_TA_CDLTASUKIGAP = 7069,
  TagType_enumtype_TA_CDLTHRUSTING = 7070,
  TagType_enumtype_TA_CDLTRISTAR = 7071,
  TagType_enumtype_TA_CDLUNIQUE3RIVER = 7072,
  TagType_enumtype_TA_CDLUPSIDEGAP2CROWS = 7073,
  TagType_enumtype_TA_CDLXSIDEGAP3METHODS = 7074,
  TagType_enumtype_TA_CMO = 7075,
  TagType_enumtype_TA_CORREL = 7076,
  TagType_enumtype_TA_DEMA = 7077,
  TagType_enumtype_TA_DX = 7078,
  TagType_enumtype_TA_EMA = 7079,
  TagType_enumtype_TA_HT_DCPERIOD = 7080,
  TagType_enumtype_TA_HT_DCPHASE = 7081,
  TagType_enumtype_TA_HT_PHASOR = 7082,
  TagType_enumtype_TA_HT_SINE = 7083,
  TagType_enumtype_TA_HT_TRENDLINE = 7084,
  TagType_enumtype_TA_HT_TRENDMODE = 7085,
  TagType_enumtype_TA_KAMA = 7086,
  TagType_enumtype_TA_LINEARREG = 7087,
  TagType_enumtype_TA_LINEARREG_ANGLE = 7088,
  TagType_enumtype_TA_LINEARREG_INTERCEPT = 7089,
  TagType_enumtype_TA_LINEARREG_SLOPE = 7090,
  TagType_enumtype_TA_MA = 7091,
  TagType_enumtype_TA_MACD = 7092,
  TagType_enumtype_TA_MACDEXT = 7093,
  TagType_enumtype_TA_MACDFIX = 7094,
  TagType_enumtype_TA_MAMA = 7095,
  TagType_enumtype_TA_MAX = 7096,
  TagType_enumtype_TA_MAXINDEX = 7097,
  TagType_enumtype_TA_MEDPRICE = 7098,
  TagType_enumtype_TA_MFI = 7099,
  TagType_enumtype_TA_MIDPOINT = 7100,
  TagType_enumtype_TA_MIDPRICE = 7101,
  TagType_enumtype_TA_MIN = 7102,
  TagType_enumtype_TA_MININDEX = 7103,
  TagType_enumtype_TA_MINMAX = 7104,
  TagType_enumtype_TA_MINMAXINDEX = 7105,
  TagType_enumtype_TA_MINUS_DI = 7106,
  TagType_enumtype_TA_MINUS_DM = 7107,
  TagType_enumtype_TA_MOM = 7108,
  TagType_enumtype_TA_NATR = 7109,
  TagType_enumtype_TA_OBV = 7110,
  TagType_enumtype_TA_PLUS_DI = 7111,
  TagType_enumtype_TA_PLUS_DM = 7112,
  TagType_enumtype_TA_PPO = 7113,
  TagType_enumtype_TA_ROC = 7114,
  TagType_enumtype_TA_ROCP = 7115,
  TagType_enumtype_TA_ROCR = 7116,
  TagType_enumtype_TA_ROCR100 = 7117,
  TagType_enumtype_TA_RSI = 7118,
  TagType_enumtype_TA_SAR = 7119,
  TagType_enumtype_TA_SAREXT = 7120,
  TagType_enumtype_TA_SMA = 7121,
  TagType_enumtype_TA_STDDEV = 7122,
  TagType_enumtype_TA_STOCH = 7123,
  TagType_enumtype_TA_STOCHF = 7124,
  TagType_enumtype_TA_STOCHRSI = 7125,
  TagType_enumtype_TA_SUM = 7126,
  TagType_enumtype_TA_T3 = 7127,
  TagType_enumtype_TA_TEMA = 7128,
  TagType_enumtype_TA_TRANGE = 7129,
  TagType_enumtype_TA_TRIMA = 7130,
  TagType_enumtype_TA_TRIX = 7131,
  TagType_enumtype_TA_TSF = 7132,
  TagType_enumtype_TA_TYPPRICE = 7133,
  TagType_enumtype_TA_ULTOSC = 7134,
  TagType_enumtype_TA_VAR = 7135,
  TagType_enumtype_TA_WCLPRICE = 7136,
  TagType_enumtype_TA_WILLR = 7137,
  TagType_enumtype_TA_WMA = 7138,
  TagType_enumtype_TAIndicator = 7196,
  TagType_enumtype_TAIndicatorName = 7197,
  TagType_enumtype_TAName = 7198,
  TagType_enumtype_TAType = 7199,
  TagType_enumtype_BarSeconds = 7200,
  TagType_enumtype_SMA = 7201,
  TagType_enumtype_SMAPeriod = 7202,
  TagType_enumtype_SMAFast = 7203,
  TagType_enumtype_SMAFastPeriod = 7204,
  TagType_enumtype_SMAMid = 7205,
  TagType_enumtype_SMAMidPeriod = 7206,
  TagType_enumtype_SMASlow = 7207,
  TagType_enumtype_SMASlowPeriod = 7208,
  TagType_enumtype_EMA = 7209,
  TagType_enumtype_EMAPeriod = 7210,
  TagType_enumtype_EMAFast = 7211,
  TagType_enumtype_EMAFastPeriod = 7212,
  TagType_enumtype_EMAMid = 7213,
  TagType_enumtype_EMAMidPeriod = 7214,
  TagType_enumtype_EMASlow = 7215,
  TagType_enumtype_EMASlowPeriod = 7216,
  TagType_enumtype_ATR = 7217,
  TagType_enumtype_ATRPeriod = 7218,
  TagType_enumtype_RSI = 7219,
  TagType_enumtype_RSIPeriod = 7220,
  TagType_enumtype_MACDMAType = 7221,
  TagType_enumtype_MACDFastPeriod = 7222,
  TagType_enumtype_MACDSlowPeriod = 7223,
  TagType_enumtype_MACDSignalPeriod = 7224,
  TagType_enumtype_MACD = 7225,
  TagType_enumtype_MACDSignal = 7226,
  TagType_enumtype_MACDHist = 7227,
  TagType_enumtype_MACDFast = 7228,
  TagType_enumtype_MACDSlow = 7229,
  TagType_enumtype_BBPeriod = 7230,
  TagType_enumtype_BBMid = 7231,
  TagType_enumtype_BBNorm = 7232,
  TagType_enumtype_BBStd = 7233,
  TagType_enumtype_BBNumStd = 7234,
  TagType_enumtype_BBWidth = 7235,
  TagType_enumtype_BBWidthEma = 7236,
  TagType_enumtype_CCI = 7237,
  TagType_enumtype_CCIAvg = 7238,
  TagType_enumtype_CCIDev = 7239,
  TagType_enumtype_CCIPeriod = 7240,
  TagType_enumtype_SAR = 7241,
  TagType_enumtype_SARPeriod = 7242,
  TagType_enumtype_SARFast = 7243,
  TagType_enumtype_SARFastPeriod = 7244,
  TagType_enumtype_SARMid = 7245,
  TagType_enumtype_SARMidPeriod = 7246,
  TagType_enumtype_SARSlow = 7247,
  TagType_enumtype_SARSlowPeriod = 7248,
  TagType_enumtype_SARFastAccInit = 7249,
  TagType_enumtype_SARFastAccStep = 7250,
  TagType_enumtype_SARFastAccMax = 7251,
  TagType_enumtype_SARMidAccInit = 7252,
  TagType_enumtype_SARMidAccStep = 7253,
  TagType_enumtype_SARMidAccMax = 7254,
  TagType_enumtype_SARSlowAccInit = 7255,
  TagType_enumtype_SARSlowAccStep = 7256,
  TagType_enumtype_SARSlowAccMax = 7257,
  TagType_enumtype_SARFastStatus = 7258,
  TagType_enumtype_SARMidStatus = 7259,
  TagType_enumtype_SARSlowStatus = 7260,
  TagType_enumtype_BSI = 7261,
  TagType_enumtype_BSIPeriod = 7262,
  TagType_enumtype_ADX = 7263,
  TagType_enumtype_ADXPeriod = 7264,
  TagType_enumtype_PDI = 7265,
  TagType_enumtype_MDI = 7266,
  TagType_enumtype_MFI = 7268,
  TagType_enumtype_MFIPeriod = 7269,
  TagType_enumtype_BSVD = 7280,
  TagType_enumtype_BSVDBBPeriod = 7281,
  TagType_enumtype_BSVDBBMid = 7282,
  TagType_enumtype_BSVDBBStd = 7283,
  TagType_enumtype_BSVDBBNumStd = 7284,
  TagType_enumtype_OIChg = 7285,
  TagType_enumtype_OIChgBBPeriod = 7286,
  TagType_enumtype_OIChgBBMid = 7287,
  TagType_enumtype_OIChgBBStd = 7288,
  TagType_enumtype_OIChgBBNumStd = 7289,
  TagType_enumtype_PTStatus = 7290,
  TagType_enumtype_PTStatus1 = 7291,
  TagType_enumtype_PTStatus2 = 7292,
  TagType_enumtype_PTStatus3 = 7293,
  TagType_enumtype_PTStatus4 = 7294,
  TagType_enumtype_PTStatus5 = 7295,
  TagType_enumtype_PTStatus6 = 7296,
  TagType_enumtype_PTStatus7 = 7297,
  TagType_enumtype_PTStatus8 = 7298,
  TagType_enumtype_PTStatus9 = 7299,
  TagType_enumtype_BSTD = 7300,
  TagType_enumtype_BSTDBBPeriod = 7301,
  TagType_enumtype_BSTDBBMid = 7302,
  TagType_enumtype_BSTDBBStd = 7303,
  TagType_enumtype_BSTDBBNumStd = 7304,
  TagType_enumtype_Flips = 7305,
  TagType_enumtype_FlipsBBPeriod = 7306,
  TagType_enumtype_FlipsBBMid = 7307,
  TagType_enumtype_FlipsBBStd = 7308,
  TagType_enumtype_FlipsBBNumStd = 7309,
  TagType_enumtype_BBSAR = 7310,
  TagType_enumtype_BBSARDist = 7311,
  TagType_enumtype_ATRSAR = 7312,
  TagType_enumtype_ATRSARDist = 7313,
  TagType_enumtype_MACDHistMAPeriod = 7314,
  TagType_enumtype_MACDHistMA = 7315,
  TagType_enumtype_MACDHistDiff = 7316,
  TagType_enumtype_CCIMAPeriod = 7317,
  TagType_enumtype_CCIMA = 7318,
  TagType_enumtype_CCIDiff = 7319,
  TagType_enumtype_BBNormMAPeriod = 7320,
  TagType_enumtype_BBNormMA = 7321,
  TagType_enumtype_BBNormDiff = 7322,
  TagType_enumtype_BSVDBBNormMAPeriod = 7323,
  TagType_enumtype_BSVDBBNormMA = 7324,
  TagType_enumtype_BSVDBBNormDiff = 7325,
  TagType_enumtype_BSTDBBNormMAPeriod = 7326,
  TagType_enumtype_BSTDBBNormMA = 7327,
  TagType_enumtype_BSTDBBNormDiff = 7328,
  TagType_enumtype_BBMidSlopePeriod = 7329,
  TagType_enumtype_BBMidSlope = 7330,
  TagType_enumtype_MASlopePeriod = 7331,
  TagType_enumtype_MASlope = 7332,
  TagType_enumtype_MACD2 = 7350,
  TagType_enumtype_MACDSignal2 = 7351,
  TagType_enumtype_MACDHist2 = 7352,
  TagType_enumtype_MACDFast2 = 7353,
  TagType_enumtype_MACDHistMA2 = 7354,
  TagType_enumtype_MACD3 = 7355,
  TagType_enumtype_MACDSignal3 = 7356,
  TagType_enumtype_MACDHist3 = 7357,
  TagType_enumtype_MACDFast3 = 7358,
  TagType_enumtype_MACDHistMA3 = 7359,
  TagType_enumtype_MACD5 = 7360,
  TagType_enumtype_MACDSignal5 = 7361,
  TagType_enumtype_MACDHist5 = 7362,
  TagType_enumtype_MACDFast5 = 7363,
  TagType_enumtype_MACDHistMA5 = 7364,
  TagType_enumtype_MACD8 = 7365,
  TagType_enumtype_MACDSignal8 = 7366,
  TagType_enumtype_MACDHist8 = 7367,
  TagType_enumtype_MACDFast8 = 7368,
  TagType_enumtype_MACDHistMA8 = 7369,
  TagType_enumtype_KBMid = 7370,
  TagType_enumtype_KBPeriod = 7371,
  TagType_enumtype_SlowKPeriod = 7372,
  TagType_enumtype_SlowK = 7373,
  TagType_enumtype_SlowDPeriod = 7374,
  TagType_enumtype_SlowD = 7375,
  TagType_enumtype_FastKPeriod = 7376,
  TagType_enumtype_FastK = 7377,
  TagType_enumtype_FastDPeriod = 7378,
  TagType_enumtype_FastD = 7379,
  TagType_enumtype_VolBB = 7380,
  TagType_enumtype_VolBBPeriod = 7381,
  TagType_enumtype_VolBBMid = 7382,
  TagType_enumtype_VolBBStd = 7383,
  TagType_enumtype_VolBBNumStd = 7384,
  TagType_enumtype_DMI = 7385,
  TagType_enumtype_DX = 7386,
  TagType_enumtype_ADXR = 7387,
  TagType_enumtype_SARFastEP = 7388,
  TagType_enumtype_SARFastAcc = 7389,
  TagType_enumtype_SARMidEP = 7390,
  TagType_enumtype_SARMidAcc = 7391,
  TagType_enumtype_SARSlowEP = 7392,
  TagType_enumtype_SARSlowAcc = 7393,
  TagType_enumtype_SARLookback = 7394,
  TagType_enumtype_SARMaxDist = 7395,
  TagType_enumtype_MAType = 7600,
  TagType_enumtype_MAPeriod1 = 7601,
  TagType_enumtype_MA1 = 7602,
  TagType_enumtype_MAPeriod2 = 7603,
  TagType_enumtype_MA2 = 7604,
  TagType_enumtype_MAPeriod3 = 7605,
  TagType_enumtype_MA3 = 7606,
  TagType_enumtype_MAPeriod4 = 7607,
  TagType_enumtype_MA4 = 7608,
  TagType_enumtype_MAPeriod5 = 7609,
  TagType_enumtype_MA5 = 7610,
  TagType_enumtype_MA1Chg = 7611,
  TagType_enumtype_MA1NormChg = 7612,
  TagType_enumtype_MA2Chg = 7613,
  TagType_enumtype_MA2NormChg = 7614,
  TagType_enumtype_MA3Chg = 7615,
  TagType_enumtype_MA3NormChg = 7616,
  TagType_enumtype_MA4Chg = 7617,
  TagType_enumtype_MA4NormChg = 7618,
  TagType_enumtype_MA5Chg = 7619,
  TagType_enumtype_MA5NormChg = 7620,
  TagType_enumtype_UpDnFlag = 7621,
  TagType_enumtype_MAATR = 7622,
  TagType_enumtype_IndustryCode = 10100,
  TagType_enumtype_IndustrySector = 10101,
  TagType_enumtype_IndustryGroup = 10102,
  TagType_enumtype_IndustrySubGroup = 10103,
  TagType_enumtype_CorporateActionType = 10200,
  TagType_enumtype_DeclaredDate = 10201,
  TagType_enumtype_RecordDate = 10202,
  TagType_enumtype_PayDate = 10203,
  TagType_enumtype_DividendType = 10204,
  TagType_enumtype_SplitType = 10205,
  TagType_enumtype_RightsIssueType = 10206,
  TagType_enumtype_NetAmount = 10207,
  TagType_enumtype_GrossAmount = 10208,
  TagType_enumtype_Ratio = 10209,
  TagType_enumtype_Percent = 10210,
  TagType_enumtype_AdjustmentFactor = 10211,
  TagType_enumtype_EarningsPerShare = 10300,
  TagType_enumtype_BookValuePerShare = 10301,
  TagType_enumtype_CashPerShare = 10302,
  TagType_enumtype_RevenuePerShare = 10303,
  TagType_enumtype_DebtPerShare = 10304,
  TagType_enumtype_CashFlowPerShare = 10305,
  TagType_enumtype_InterestPaymentPerShare = 10306,
  TagType_enumtype_Strategy = 11100,
  TagType_enumtype_StrategyComponent = 11101,
  TagType_enumtype_StrategyPrice = 11102,
  TagType_enumtype_StrategyFill = 11103,
  TagType_enumtype_StrategyMode = 11104,
  TagType_enumtype_ForceMarketOrder = 11200,
  TagType_enumtype_FillOnBarMode = 11201,
  TagType_enumtype_TickSize = 10400,
  TagType_enumtype_PriceDisplay = 11105,
  TagType_enumtype_SecurityAltExchange = 12100,
  TagType_enumtype_ClientOrderRefID = 10800
};
XT_COMMON_API bool TagType_enumtype_IsValid(int value);
const TagType_enumtype TagType_enumtype_enumtype_MIN = TagType_enumtype_Unknown;
const TagType_enumtype TagType_enumtype_enumtype_MAX = TagType_enumtype_ScalpFarSeedLevels;
const int TagType_enumtype_enumtype_ARRAYSIZE = TagType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* TagType_enumtype_descriptor();
inline const ::std::string& TagType_enumtype_Name(TagType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    TagType_enumtype_descriptor(), value);
}
inline bool TagType_enumtype_Parse(
    const ::std::string& name, TagType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TagType_enumtype>(
    TagType_enumtype_descriptor(), name, value);
}
enum YahooQuoteType_enumtype {
  YahooQuoteType_enumtype_ask = 0,
  YahooQuoteType_enumtype_averageDailyVolume = 1,
  YahooQuoteType_enumtype_askSize = 2,
  YahooQuoteType_enumtype_bid = 3,
  YahooQuoteType_enumtype_askRealTime = 4,
  YahooQuoteType_enumtype_bidRealTime = 5,
  YahooQuoteType_enumtype_bookValue = 6,
  YahooQuoteType_enumtype_bidSize = 7,
  YahooQuoteType_enumtype_changeAndPercentChange = 8,
  YahooQuoteType_enumtype_change = 9,
  YahooQuoteType_enumtype_commission = 10,
  YahooQuoteType_enumtype_changeRealTime = 11,
  YahooQuoteType_enumtype_afterHoursChangeRealTime = 12,
  YahooQuoteType_enumtype_dividendShare = 13,
  YahooQuoteType_enumtype_lastTradeDate = 14,
  YahooQuoteType_enumtype_tradeDate = 15,
  YahooQuoteType_enumtype_earningsShare = 16,
  YahooQuoteType_enumtype_errorIndication = 17,
  YahooQuoteType_enumtype_epsEstimateCurrentYear = 18,
  YahooQuoteType_enumtype_epsEstimateNextYear = 19,
  YahooQuoteType_enumtype_epsEstimateNextQuarter = 20,
  YahooQuoteType_enumtype_floatShares = 21,
  YahooQuoteType_enumtype_dayLow = 22,
  YahooQuoteType_enumtype_dayHigh = 23,
  YahooQuoteType_enumtype_low52Week = 24,
  YahooQuoteType_enumtype_high52Week = 25,
  YahooQuoteType_enumtype_holdingsGainPercent = 26,
  YahooQuoteType_enumtype_annualizedGain = 27,
  YahooQuoteType_enumtype_holdingsGain = 28,
  YahooQuoteType_enumtype_holdingsGainPercentRealTime = 29,
  YahooQuoteType_enumtype_holdingsGainRealTime = 30,
  YahooQuoteType_enumtype_moreInfo = 31,
  YahooQuoteType_enumtype_orderBookRealTime = 32,
  YahooQuoteType_enumtype_marketCapitalization = 33,
  YahooQuoteType_enumtype_marketCapRealTime = 34,
  YahooQuoteType_enumtype_ebitda = 35,
  YahooQuoteType_enumtype_changeFrom52WeekLow = 36,
  YahooQuoteType_enumtype_percentChangeFrom52WeekLow = 37,
  YahooQuoteType_enumtype_lastTradeRealTimeWithTime = 38,
  YahooQuoteType_enumtype_changePercentRealTime = 39,
  YahooQuoteType_enumtype_lastTradeSize = 40,
  YahooQuoteType_enumtype_changeFrom52WeekHigh = 41,
  YahooQuoteType_enumtype_percebtChangeFrom52WeekHigh = 42,
  YahooQuoteType_enumtype_lastTradeWithTime = 43,
  YahooQuoteType_enumtype_lastTradePriceOnly = 44,
  YahooQuoteType_enumtype_highLimit = 45,
  YahooQuoteType_enumtype_lowLimit = 46,
  YahooQuoteType_enumtype_dayRange = 47,
  YahooQuoteType_enumtype_dayRangeRealTime = 48,
  YahooQuoteType_enumtype_movingAverage50Day = 49,
  YahooQuoteType_enumtype_movingAverage200Day = 50,
  YahooQuoteType_enumtype_changeFrom200DayMovingAverage = 51,
  YahooQuoteType_enumtype_percentChangeFrom200DayMovingAverage = 52,
  YahooQuoteType_enumtype_changeFrom50DayMovingAverage = 53,
  YahooQuoteType_enumtype_percentChangeFrom50DayMovingAverage = 54,
  YahooQuoteType_enumtype_name = 55,
  YahooQuoteType_enumtype_notes = 56,
  YahooQuoteType_enumtype_open = 57,
  YahooQuoteType_enumtype_previousClose = 58,
  YahooQuoteType_enumtype_pricePaid = 59,
  YahooQuoteType_enumtype_changeinPercent = 60,
  YahooQuoteType_enumtype_priceSales = 61,
  YahooQuoteType_enumtype_priceBook = 62,
  YahooQuoteType_enumtype_exDividendDate = 63,
  YahooQuoteType_enumtype_peRatio = 64,
  YahooQuoteType_enumtype_dividendPayDate = 65,
  YahooQuoteType_enumtype_peRatioRealTime = 66,
  YahooQuoteType_enumtype_pegRatio = 67,
  YahooQuoteType_enumtype_priceEpsEstimateCurrentYear = 68,
  YahooQuoteType_enumtype_priceEpsEstimateNextYear = 69,
  YahooQuoteType_enumtype_symbol = 70,
  YahooQuoteType_enumtype_sharesOwned = 71,
  YahooQuoteType_enumtype_shortRatio = 72,
  YahooQuoteType_enumtype_lastTradeTime = 73,
  YahooQuoteType_enumtype_tradeLinks = 74,
  YahooQuoteType_enumtype_tickerTrend = 75,
  YahooQuoteType_enumtype_targetPrice1Yr = 76,
  YahooQuoteType_enumtype_volume = 77,
  YahooQuoteType_enumtype_holdingsValue = 78,
  YahooQuoteType_enumtype_holdingsValueRealTime = 79,
  YahooQuoteType_enumtype_range52Week = 80,
  YahooQuoteType_enumtype_dayValueChange = 81,
  YahooQuoteType_enumtype_dayValueChangeRealTime = 82,
  YahooQuoteType_enumtype_stockExchange = 83,
  YahooQuoteType_enumtype_dividendYield = 84
};
XT_COMMON_API bool YahooQuoteType_enumtype_IsValid(int value);
const YahooQuoteType_enumtype YahooQuoteType_enumtype_enumtype_MIN = YahooQuoteType_enumtype_ask;
const YahooQuoteType_enumtype YahooQuoteType_enumtype_enumtype_MAX = YahooQuoteType_enumtype_dividendYield;
const int YahooQuoteType_enumtype_enumtype_ARRAYSIZE = YahooQuoteType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* YahooQuoteType_enumtype_descriptor();
inline const ::std::string& YahooQuoteType_enumtype_Name(YahooQuoteType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    YahooQuoteType_enumtype_descriptor(), value);
}
inline bool YahooQuoteType_enumtype_Parse(
    const ::std::string& name, YahooQuoteType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YahooQuoteType_enumtype>(
    YahooQuoteType_enumtype_descriptor(), name, value);
}
enum YahooRangeType_enumtype {
  YahooRangeType_enumtype_daily = 0,
  YahooRangeType_enumtype_weekly = 1,
  YahooRangeType_enumtype_monthly = 2,
  YahooRangeType_enumtype_dividendsOnly = 3
};
XT_COMMON_API bool YahooRangeType_enumtype_IsValid(int value);
const YahooRangeType_enumtype YahooRangeType_enumtype_enumtype_MIN = YahooRangeType_enumtype_daily;
const YahooRangeType_enumtype YahooRangeType_enumtype_enumtype_MAX = YahooRangeType_enumtype_dividendsOnly;
const int YahooRangeType_enumtype_enumtype_ARRAYSIZE = YahooRangeType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* YahooRangeType_enumtype_descriptor();
inline const ::std::string& YahooRangeType_enumtype_Name(YahooRangeType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    YahooRangeType_enumtype_descriptor(), value);
}
inline bool YahooRangeType_enumtype_Parse(
    const ::std::string& name, YahooRangeType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YahooRangeType_enumtype>(
    YahooRangeType_enumtype_descriptor(), name, value);
}
// ===================================================================

class XT_COMMON_API AsyncTaskStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.AsyncTaskStatus) */ {
 public:
  AsyncTaskStatus();
  virtual ~AsyncTaskStatus();

  AsyncTaskStatus(const AsyncTaskStatus& from);

  inline AsyncTaskStatus& operator=(const AsyncTaskStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AsyncTaskStatus& default_instance();

  void Swap(AsyncTaskStatus* other);

  // implements Message ----------------------------------------------

  inline AsyncTaskStatus* New() const { return New(NULL); }

  AsyncTaskStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AsyncTaskStatus& from);
  void MergeFrom(const AsyncTaskStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AsyncTaskStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AsyncTaskStatus_enumtype enumtype;
  static const enumtype Unknown =
    AsyncTaskStatus_enumtype_Unknown;
  static const enumtype Pending =
    AsyncTaskStatus_enumtype_Pending;
  static const enumtype Running =
    AsyncTaskStatus_enumtype_Running;
  static const enumtype Finished =
    AsyncTaskStatus_enumtype_Finished;
  static inline bool enumtype_IsValid(int value) {
    return AsyncTaskStatus_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    AsyncTaskStatus_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    AsyncTaskStatus_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    AsyncTaskStatus_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return AsyncTaskStatus_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return AsyncTaskStatus_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return AsyncTaskStatus_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.AsyncTaskStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static AsyncTaskStatus* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MdTrdType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.MdTrdType) */ {
 public:
  MdTrdType();
  virtual ~MdTrdType();

  MdTrdType(const MdTrdType& from);

  inline MdTrdType& operator=(const MdTrdType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MdTrdType& default_instance();

  void Swap(MdTrdType* other);

  // implements Message ----------------------------------------------

  inline MdTrdType* New() const { return New(NULL); }

  MdTrdType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MdTrdType& from);
  void MergeFrom(const MdTrdType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdTrdType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MdTrdType_enumtype enumtype;
  static const enumtype Unknown =
    MdTrdType_enumtype_Unknown;
  static const enumtype Md =
    MdTrdType_enumtype_Md;
  static const enumtype Trd =
    MdTrdType_enumtype_Trd;
  static const enumtype MdTrd =
    MdTrdType_enumtype_MdTrd;
  static const enumtype Md2 =
    MdTrdType_enumtype_Md2;
  static const enumtype Trd2 =
    MdTrdType_enumtype_Trd2;
  static const enumtype MdTrd2 =
    MdTrdType_enumtype_MdTrd2;
  static const enumtype Md3 =
    MdTrdType_enumtype_Md3;
  static const enumtype Trd3 =
    MdTrdType_enumtype_Trd3;
  static const enumtype MdAll =
    MdTrdType_enumtype_MdAll;
  static const enumtype TrdAll =
    MdTrdType_enumtype_TrdAll;
  static inline bool enumtype_IsValid(int value) {
    return MdTrdType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MdTrdType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MdTrdType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MdTrdType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MdTrdType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MdTrdType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MdTrdType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.MdTrdType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static MdTrdType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API EventModeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.EventModeType) */ {
 public:
  EventModeType();
  virtual ~EventModeType();

  EventModeType(const EventModeType& from);

  inline EventModeType& operator=(const EventModeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventModeType& default_instance();

  void Swap(EventModeType* other);

  // implements Message ----------------------------------------------

  inline EventModeType* New() const { return New(NULL); }

  EventModeType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventModeType& from);
  void MergeFrom(const EventModeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventModeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EventModeType_enumtype enumtype;
  static const enumtype Unknown =
    EventModeType_enumtype_Unknown;
  static const enumtype Live =
    EventModeType_enumtype_Live;
  static const enumtype Data =
    EventModeType_enumtype_Data;
  static const enumtype Replay =
    EventModeType_enumtype_Replay;
  static const enumtype Backtest =
    EventModeType_enumtype_Backtest;
  static inline bool enumtype_IsValid(int value) {
    return EventModeType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    EventModeType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    EventModeType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    EventModeType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return EventModeType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return EventModeType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return EventModeType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.EventModeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static EventModeType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API EventCategoryType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.EventCategoryType) */ {
 public:
  EventCategoryType();
  virtual ~EventCategoryType();

  EventCategoryType(const EventCategoryType& from);

  inline EventCategoryType& operator=(const EventCategoryType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventCategoryType& default_instance();

  void Swap(EventCategoryType* other);

  // implements Message ----------------------------------------------

  inline EventCategoryType* New() const { return New(NULL); }

  EventCategoryType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventCategoryType& from);
  void MergeFrom(const EventCategoryType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventCategoryType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EventCategoryType_enumtype enumtype;
  static const enumtype Unknown =
    EventCategoryType_enumtype_Unknown;
  static const enumtype Mkt =
    EventCategoryType_enumtype_Mkt;
  static const enumtype Trd =
    EventCategoryType_enumtype_Trd;
  static const enumtype Strategy =
    EventCategoryType_enumtype_Strategy;
  static const enumtype System =
    EventCategoryType_enumtype_System;
  static inline bool enumtype_IsValid(int value) {
    return EventCategoryType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    EventCategoryType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    EventCategoryType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    EventCategoryType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return EventCategoryType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return EventCategoryType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return EventCategoryType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.EventCategoryType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static EventCategoryType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API EventDataDstType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.EventDataDstType) */ {
 public:
  EventDataDstType();
  virtual ~EventDataDstType();

  EventDataDstType(const EventDataDstType& from);

  inline EventDataDstType& operator=(const EventDataDstType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDataDstType& default_instance();

  void Swap(EventDataDstType* other);

  // implements Message ----------------------------------------------

  inline EventDataDstType* New() const { return New(NULL); }

  EventDataDstType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDataDstType& from);
  void MergeFrom(const EventDataDstType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventDataDstType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EventDataDstType_enumtype enumtype;
  static const enumtype Unknown =
    EventDataDstType_enumtype_Unknown;
  static const enumtype Log =
    EventDataDstType_enumtype_Log;
  static const enumtype Sqlite =
    EventDataDstType_enumtype_Sqlite;
  static const enumtype Journal =
    EventDataDstType_enumtype_Journal;
  static const enumtype NNG =
    EventDataDstType_enumtype_NNG;
  static inline bool enumtype_IsValid(int value) {
    return EventDataDstType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    EventDataDstType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    EventDataDstType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    EventDataDstType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return EventDataDstType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return EventDataDstType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return EventDataDstType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.EventDataDstType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static EventDataDstType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MemDBMsgType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.MemDBMsgType) */ {
 public:
  MemDBMsgType();
  virtual ~MemDBMsgType();

  MemDBMsgType(const MemDBMsgType& from);

  inline MemDBMsgType& operator=(const MemDBMsgType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemDBMsgType& default_instance();

  void Swap(MemDBMsgType* other);

  // implements Message ----------------------------------------------

  inline MemDBMsgType* New() const { return New(NULL); }

  MemDBMsgType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemDBMsgType& from);
  void MergeFrom(const MemDBMsgType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemDBMsgType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MemDBMsgType_enumtype enumtype;
  static const enumtype PageEnd =
    MemDBMsgType_enumtype_PageEnd;
  static const enumtype SessionStart =
    MemDBMsgType_enumtype_SessionStart;
  static const enumtype SessionEnd =
    MemDBMsgType_enumtype_SessionEnd;
  static const enumtype Time =
    MemDBMsgType_enumtype_Time;
  static const enumtype TimeRequest =
    MemDBMsgType_enumtype_TimeRequest;
  static const enumtype Register =
    MemDBMsgType_enumtype_Register;
  static const enumtype Deregister =
    MemDBMsgType_enumtype_Deregister;
  static const enumtype RequestReadFrom =
    MemDBMsgType_enumtype_RequestReadFrom;
  static const enumtype RequestReadFromPublic =
    MemDBMsgType_enumtype_RequestReadFromPublic;
  static const enumtype RequestWriteTo =
    MemDBMsgType_enumtype_RequestWriteTo;
  static const enumtype RequestUnpublish =
    MemDBMsgType_enumtype_RequestUnpublish;
  static const enumtype RequestStart =
    MemDBMsgType_enumtype_RequestStart;
  static const enumtype Location =
    MemDBMsgType_enumtype_Location;
  static const enumtype TradingDay =
    MemDBMsgType_enumtype_TradingDay;
  static const enumtype Channel =
    MemDBMsgType_enumtype_Channel;
  static inline bool enumtype_IsValid(int value) {
    return MemDBMsgType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MemDBMsgType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MemDBMsgType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MemDBMsgType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MemDBMsgType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MemDBMsgType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MemDBMsgType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.MemDBMsgType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static MemDBMsgType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API BarDataFlagMask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.BarDataFlagMask) */ {
 public:
  BarDataFlagMask();
  virtual ~BarDataFlagMask();

  BarDataFlagMask(const BarDataFlagMask& from);

  inline BarDataFlagMask& operator=(const BarDataFlagMask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BarDataFlagMask& default_instance();

  void Swap(BarDataFlagMask* other);

  // implements Message ----------------------------------------------

  inline BarDataFlagMask* New() const { return New(NULL); }

  BarDataFlagMask* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BarDataFlagMask& from);
  void MergeFrom(const BarDataFlagMask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BarDataFlagMask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BarDataFlagMask_enumtype enumtype;
  static const enumtype Unknown =
    BarDataFlagMask_enumtype_Unknown;
  static const enumtype IsFull =
    BarDataFlagMask_enumtype_IsFull;
  static inline bool enumtype_IsValid(int value) {
    return BarDataFlagMask_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    BarDataFlagMask_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    BarDataFlagMask_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    BarDataFlagMask_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return BarDataFlagMask_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return BarDataFlagMask_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return BarDataFlagMask_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.BarDataFlagMask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static BarDataFlagMask* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API BrokerApiType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.BrokerApiType) */ {
 public:
  BrokerApiType();
  virtual ~BrokerApiType();

  BrokerApiType(const BrokerApiType& from);

  inline BrokerApiType& operator=(const BrokerApiType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerApiType& default_instance();

  void Swap(BrokerApiType* other);

  // implements Message ----------------------------------------------

  inline BrokerApiType* New() const { return New(NULL); }

  BrokerApiType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerApiType& from);
  void MergeFrom(const BrokerApiType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrokerApiType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BrokerApiType_enumtype enumtype;
  static const enumtype Unknown =
    BrokerApiType_enumtype_Unknown;
  static const enumtype SIM =
    BrokerApiType_enumtype_SIM;
  static const enumtype IB =
    BrokerApiType_enumtype_IB;
  static const enumtype TT =
    BrokerApiType_enumtype_TT;
  static const enumtype CTP =
    BrokerApiType_enumtype_CTP;
  static const enumtype CTPMINI =
    BrokerApiType_enumtype_CTPMINI;
  static const enumtype DFITC =
    BrokerApiType_enumtype_DFITC;
  static const enumtype DFITCL2 =
    BrokerApiType_enumtype_DFITCL2;
  static const enumtype DFITCSEC =
    BrokerApiType_enumtype_DFITCSEC;
  static const enumtype DFITCX1 =
    BrokerApiType_enumtype_DFITCX1;
  static const enumtype FEMAS =
    BrokerApiType_enumtype_FEMAS;
  static const enumtype TAP =
    BrokerApiType_enumtype_TAP;
  static const enumtype ESUNNY3 =
    BrokerApiType_enumtype_ESUNNY3;
  static const enumtype ESUNNY8 =
    BrokerApiType_enumtype_ESUNNY8;
  static const enumtype ESUNNY9 =
    BrokerApiType_enumtype_ESUNNY9;
  static const enumtype KCBP =
    BrokerApiType_enumtype_KCBP;
  static const enumtype Kingstar =
    BrokerApiType_enumtype_Kingstar;
  static const enumtype LeverFun =
    BrokerApiType_enumtype_LeverFun;
  static const enumtype LTS =
    BrokerApiType_enumtype_LTS;
  static const enumtype Sina =
    BrokerApiType_enumtype_Sina;
  static const enumtype Yahoo =
    BrokerApiType_enumtype_Yahoo;
  static const enumtype Wind =
    BrokerApiType_enumtype_Wind;
  static const enumtype EmQuant =
    BrokerApiType_enumtype_EmQuant;
  static const enumtype XTP =
    BrokerApiType_enumtype_XTP;
  static const enumtype CICC =
    BrokerApiType_enumtype_CICC;
  static const enumtype Web =
    BrokerApiType_enumtype_Web;
  static const enumtype TDX =
    BrokerApiType_enumtype_TDX;
  static const enumtype Binance =
    BrokerApiType_enumtype_Binance;
  static const enumtype UDP =
    BrokerApiType_enumtype_UDP;
  static const enumtype CTP_6311 =
    BrokerApiType_enumtype_CTP_6311;
  static const enumtype CTP_6313 =
    BrokerApiType_enumtype_CTP_6313;
  static const enumtype CTP_6315 =
    BrokerApiType_enumtype_CTP_6315;
  static inline bool enumtype_IsValid(int value) {
    return BrokerApiType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    BrokerApiType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    BrokerApiType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    BrokerApiType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return BrokerApiType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return BrokerApiType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return BrokerApiType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.BrokerApiType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static BrokerApiType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API PBTagMsgType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.PBTagMsgType) */ {
 public:
  PBTagMsgType();
  virtual ~PBTagMsgType();

  PBTagMsgType(const PBTagMsgType& from);

  inline PBTagMsgType& operator=(const PBTagMsgType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTagMsgType& default_instance();

  void Swap(PBTagMsgType* other);

  // implements Message ----------------------------------------------

  inline PBTagMsgType* New() const { return New(NULL); }

  PBTagMsgType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBTagMsgType& from);
  void MergeFrom(const PBTagMsgType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBTagMsgType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PBTagMsgType_enumtype enumtype;
  static const enumtype Unknown =
    PBTagMsgType_enumtype_Unknown;
  static const enumtype Ctrl =
    PBTagMsgType_enumtype_Ctrl;
  static const enumtype Data =
    PBTagMsgType_enumtype_Data;
  static const enumtype Instr =
    PBTagMsgType_enumtype_Instr;
  static const enumtype SIM =
    PBTagMsgType_enumtype_SIM;
  static const enumtype IB =
    PBTagMsgType_enumtype_IB;
  static const enumtype TT =
    PBTagMsgType_enumtype_TT;
  static const enumtype CTP =
    PBTagMsgType_enumtype_CTP;
  static const enumtype DFITC =
    PBTagMsgType_enumtype_DFITC;
  static const enumtype DFITCL2 =
    PBTagMsgType_enumtype_DFITCL2;
  static const enumtype DFITCX1 =
    PBTagMsgType_enumtype_DFITCX1;
  static const enumtype EPoleStar =
    PBTagMsgType_enumtype_EPoleStar;
  static const enumtype ESUNNY3 =
    PBTagMsgType_enumtype_ESUNNY3;
  static const enumtype ESUNNY8 =
    PBTagMsgType_enumtype_ESUNNY8;
  static const enumtype ESUNNY9 =
    PBTagMsgType_enumtype_ESUNNY9;
  static const enumtype FEMAS =
    PBTagMsgType_enumtype_FEMAS;
  static const enumtype KCBP =
    PBTagMsgType_enumtype_KCBP;
  static const enumtype Kingstar =
    PBTagMsgType_enumtype_Kingstar;
  static const enumtype LeverFun =
    PBTagMsgType_enumtype_LeverFun;
  static const enumtype LTS =
    PBTagMsgType_enumtype_LTS;
  static const enumtype Sina =
    PBTagMsgType_enumtype_Sina;
  static const enumtype Yahoo =
    PBTagMsgType_enumtype_Yahoo;
  static const enumtype Wind =
    PBTagMsgType_enumtype_Wind;
  static const enumtype EmQuant =
    PBTagMsgType_enumtype_EmQuant;
  static const enumtype XTP =
    PBTagMsgType_enumtype_XTP;
  static const enumtype DFITCSEC =
    PBTagMsgType_enumtype_DFITCSEC;
  static const enumtype CICC =
    PBTagMsgType_enumtype_CICC;
  static const enumtype Web =
    PBTagMsgType_enumtype_Web;
  static const enumtype TDX =
    PBTagMsgType_enumtype_TDX;
  static const enumtype Binance =
    PBTagMsgType_enumtype_Binance;
  static inline bool enumtype_IsValid(int value) {
    return PBTagMsgType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    PBTagMsgType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    PBTagMsgType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    PBTagMsgType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return PBTagMsgType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return PBTagMsgType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return PBTagMsgType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.PBTagMsgType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static PBTagMsgType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API BrokerServerType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.BrokerServerType) */ {
 public:
  BrokerServerType();
  virtual ~BrokerServerType();

  BrokerServerType(const BrokerServerType& from);

  inline BrokerServerType& operator=(const BrokerServerType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerServerType& default_instance();

  void Swap(BrokerServerType* other);

  // implements Message ----------------------------------------------

  inline BrokerServerType* New() const { return New(NULL); }

  BrokerServerType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerServerType& from);
  void MergeFrom(const BrokerServerType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrokerServerType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BrokerServerType_enumtype enumtype;
  static const enumtype Unknown =
    BrokerServerType_enumtype_Unknown;
  static const enumtype Md =
    BrokerServerType_enumtype_Md;
  static const enumtype Trd =
    BrokerServerType_enumtype_Trd;
  static const enumtype MdTrd =
    BrokerServerType_enumtype_MdTrd;
  static inline bool enumtype_IsValid(int value) {
    return BrokerServerType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    BrokerServerType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    BrokerServerType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    BrokerServerType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return BrokerServerType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return BrokerServerType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return BrokerServerType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.BrokerServerType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static BrokerServerType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API ConnectionStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.ConnectionStatus) */ {
 public:
  ConnectionStatus();
  virtual ~ConnectionStatus();

  ConnectionStatus(const ConnectionStatus& from);

  inline ConnectionStatus& operator=(const ConnectionStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionStatus& default_instance();

  void Swap(ConnectionStatus* other);

  // implements Message ----------------------------------------------

  inline ConnectionStatus* New() const { return New(NULL); }

  ConnectionStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectionStatus& from);
  void MergeFrom(const ConnectionStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectionStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConnectionStatus_enumtype enumtype;
  static const enumtype Unknown =
    ConnectionStatus_enumtype_Unknown;
  static const enumtype Connected =
    ConnectionStatus_enumtype_Connected;
  static const enumtype Disconnected =
    ConnectionStatus_enumtype_Disconnected;
  static inline bool enumtype_IsValid(int value) {
    return ConnectionStatus_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    ConnectionStatus_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    ConnectionStatus_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    ConnectionStatus_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return ConnectionStatus_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return ConnectionStatus_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return ConnectionStatus_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.ConnectionStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static ConnectionStatus* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API LogInStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.LogInStatus) */ {
 public:
  LogInStatus();
  virtual ~LogInStatus();

  LogInStatus(const LogInStatus& from);

  inline LogInStatus& operator=(const LogInStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogInStatus& default_instance();

  void Swap(LogInStatus* other);

  // implements Message ----------------------------------------------

  inline LogInStatus* New() const { return New(NULL); }

  LogInStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogInStatus& from);
  void MergeFrom(const LogInStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogInStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LogInStatus_enumtype enumtype;
  static const enumtype Unknown =
    LogInStatus_enumtype_Unknown;
  static const enumtype Login =
    LogInStatus_enumtype_Login;
  static const enumtype Logout =
    LogInStatus_enumtype_Logout;
  static inline bool enumtype_IsValid(int value) {
    return LogInStatus_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    LogInStatus_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    LogInStatus_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    LogInStatus_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return LogInStatus_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return LogInStatus_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return LogInStatus_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.LogInStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static LogInStatus* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TaskStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TaskStatus) */ {
 public:
  TaskStatus();
  virtual ~TaskStatus();

  TaskStatus(const TaskStatus& from);

  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskStatus& default_instance();

  void Swap(TaskStatus* other);

  // implements Message ----------------------------------------------

  inline TaskStatus* New() const { return New(NULL); }

  TaskStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskStatus& from);
  void MergeFrom(const TaskStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TaskStatus_enumtype enumtype;
  static const enumtype Unknown =
    TaskStatus_enumtype_Unknown;
  static const enumtype Running =
    TaskStatus_enumtype_Running;
  static const enumtype Stopped =
    TaskStatus_enumtype_Stopped;
  static inline bool enumtype_IsValid(int value) {
    return TaskStatus_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TaskStatus_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TaskStatus_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TaskStatus_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TaskStatus_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TaskStatus_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TaskStatus_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TaskStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TaskStatus* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API DisplayLanguageType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.DisplayLanguageType) */ {
 public:
  DisplayLanguageType();
  virtual ~DisplayLanguageType();

  DisplayLanguageType(const DisplayLanguageType& from);

  inline DisplayLanguageType& operator=(const DisplayLanguageType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayLanguageType& default_instance();

  void Swap(DisplayLanguageType* other);

  // implements Message ----------------------------------------------

  inline DisplayLanguageType* New() const { return New(NULL); }

  DisplayLanguageType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisplayLanguageType& from);
  void MergeFrom(const DisplayLanguageType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayLanguageType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DisplayLanguageType_enumtype enumtype;
  static const enumtype English =
    DisplayLanguageType_enumtype_English;
  static const enumtype Chinese =
    DisplayLanguageType_enumtype_Chinese;
  static inline bool enumtype_IsValid(int value) {
    return DisplayLanguageType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    DisplayLanguageType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    DisplayLanguageType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    DisplayLanguageType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return DisplayLanguageType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return DisplayLanguageType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return DisplayLanguageType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.DisplayLanguageType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static DisplayLanguageType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API ExchangeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.ExchangeType) */ {
 public:
  ExchangeType();
  virtual ~ExchangeType();

  ExchangeType(const ExchangeType& from);

  inline ExchangeType& operator=(const ExchangeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeType& default_instance();

  void Swap(ExchangeType* other);

  // implements Message ----------------------------------------------

  inline ExchangeType* New() const { return New(NULL); }

  ExchangeType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeType& from);
  void MergeFrom(const ExchangeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExchangeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExchangeType_enumtype enumtype;
  static const enumtype Unknown =
    ExchangeType_enumtype_Unknown;
  static const enumtype IDX =
    ExchangeType_enumtype_IDX;
  static const enumtype CME =
    ExchangeType_enumtype_CME;
  static const enumtype ICE =
    ExchangeType_enumtype_ICE;
  static const enumtype NYSE =
    ExchangeType_enumtype_NYSE;
  static const enumtype NASDAQ =
    ExchangeType_enumtype_NASDAQ;
  static const enumtype CFFEX =
    ExchangeType_enumtype_CFFEX;
  static const enumtype CZCE =
    ExchangeType_enumtype_CZCE;
  static const enumtype DCE =
    ExchangeType_enumtype_DCE;
  static const enumtype SHFE =
    ExchangeType_enumtype_SHFE;
  static const enumtype INE =
    ExchangeType_enumtype_INE;
  static const enumtype SSE =
    ExchangeType_enumtype_SSE;
  static const enumtype SZSE =
    ExchangeType_enumtype_SZSE;
  static const enumtype CBOT =
    ExchangeType_enumtype_CBOT;
  static const enumtype LME =
    ExchangeType_enumtype_LME;
  static const enumtype COMEX =
    ExchangeType_enumtype_COMEX;
  static const enumtype NYMEX =
    ExchangeType_enumtype_NYMEX;
  static const enumtype HKEX =
    ExchangeType_enumtype_HKEX;
  static const enumtype IB =
    ExchangeType_enumtype_IB;
  static const enumtype SGE =
    ExchangeType_enumtype_SGE;
  static const enumtype SGX =
    ExchangeType_enumtype_SGX;
  static const enumtype Binance =
    ExchangeType_enumtype_Binance;
  static const enumtype OKEx =
    ExchangeType_enumtype_OKEx;
  static const enumtype Huobi =
    ExchangeType_enumtype_Huobi;
  static const enumtype Bitfinex =
    ExchangeType_enumtype_Bitfinex;
  static const enumtype ZBCOM =
    ExchangeType_enumtype_ZBCOM;
  static const enumtype Upbit =
    ExchangeType_enumtype_Upbit;
  static const enumtype HitBTC =
    ExchangeType_enumtype_HitBTC;
  static const enumtype Coinbase =
    ExchangeType_enumtype_Coinbase;
  static const enumtype CoinEx =
    ExchangeType_enumtype_CoinEx;
  static const enumtype LBank =
    ExchangeType_enumtype_LBank;
  static const enumtype Kraken =
    ExchangeType_enumtype_Kraken;
  static const enumtype Bibox =
    ExchangeType_enumtype_Bibox;
  static const enumtype BitForex =
    ExchangeType_enumtype_BitForex;
  static const enumtype BitZ =
    ExchangeType_enumtype_BitZ;
  static const enumtype Bitstamp =
    ExchangeType_enumtype_Bitstamp;
  static const enumtype CoinBene =
    ExchangeType_enumtype_CoinBene;
  static const enumtype BCEX =
    ExchangeType_enumtype_BCEX;
  static const enumtype Bittrex =
    ExchangeType_enumtype_Bittrex;
  static const enumtype DigiFinex =
    ExchangeType_enumtype_DigiFinex;
  static const enumtype Bitbank =
    ExchangeType_enumtype_Bitbank;
  static const enumtype Simex =
    ExchangeType_enumtype_Simex;
  static const enumtype Coinsuper =
    ExchangeType_enumtype_Coinsuper;
  static const enumtype bitFlyer =
    ExchangeType_enumtype_bitFlyer;
  static const enumtype OEX =
    ExchangeType_enumtype_OEX;
  static const enumtype Gateio =
    ExchangeType_enumtype_Gateio;
  static const enumtype TOPBTC =
    ExchangeType_enumtype_TOPBTC;
  static const enumtype EXX =
    ExchangeType_enumtype_EXX;
  static const enumtype WEX =
    ExchangeType_enumtype_WEX;
  static const enumtype Poloniex =
    ExchangeType_enumtype_Poloniex;
  static const enumtype Gemini =
    ExchangeType_enumtype_Gemini;
  static const enumtype Bithumb =
    ExchangeType_enumtype_Bithumb;
  static inline bool enumtype_IsValid(int value) {
    return ExchangeType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    ExchangeType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    ExchangeType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    ExchangeType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return ExchangeType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return ExchangeType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return ExchangeType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.ExchangeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static ExchangeType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API AggressiveType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.AggressiveType) */ {
 public:
  AggressiveType();
  virtual ~AggressiveType();

  AggressiveType(const AggressiveType& from);

  inline AggressiveType& operator=(const AggressiveType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AggressiveType& default_instance();

  void Swap(AggressiveType* other);

  // implements Message ----------------------------------------------

  inline AggressiveType* New() const { return New(NULL); }

  AggressiveType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AggressiveType& from);
  void MergeFrom(const AggressiveType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AggressiveType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AggressiveType_enumtype enumtype;
  static const enumtype KeepDist =
    AggressiveType_enumtype_KeepDist;
  static const enumtype JoinMkt =
    AggressiveType_enumtype_JoinMkt;
  static const enumtype JoinMktCloseGap =
    AggressiveType_enumtype_JoinMktCloseGap;
  static const enumtype MidMkt =
    AggressiveType_enumtype_MidMkt;
  static const enumtype TakeMktCloseGap =
    AggressiveType_enumtype_TakeMktCloseGap;
  static const enumtype TakeMkt =
    AggressiveType_enumtype_TakeMkt;
  static inline bool enumtype_IsValid(int value) {
    return AggressiveType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    AggressiveType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    AggressiveType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    AggressiveType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return AggressiveType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return AggressiveType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return AggressiveType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.AggressiveType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static AggressiveType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API BuySellType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.BuySellType) */ {
 public:
  BuySellType();
  virtual ~BuySellType();

  BuySellType(const BuySellType& from);

  inline BuySellType& operator=(const BuySellType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuySellType& default_instance();

  void Swap(BuySellType* other);

  // implements Message ----------------------------------------------

  inline BuySellType* New() const { return New(NULL); }

  BuySellType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuySellType& from);
  void MergeFrom(const BuySellType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuySellType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BuySellType_enumtype enumtype;
  static const enumtype Buy =
    BuySellType_enumtype_Buy;
  static const enumtype Sell =
    BuySellType_enumtype_Sell;
  static inline bool enumtype_IsValid(int value) {
    return BuySellType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    BuySellType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    BuySellType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    BuySellType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return BuySellType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return BuySellType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return BuySellType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.BuySellType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static BuySellType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API AccountTypeMask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.AccountTypeMask) */ {
 public:
  AccountTypeMask();
  virtual ~AccountTypeMask();

  AccountTypeMask(const AccountTypeMask& from);

  inline AccountTypeMask& operator=(const AccountTypeMask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountTypeMask& default_instance();

  void Swap(AccountTypeMask* other);

  // implements Message ----------------------------------------------

  inline AccountTypeMask* New() const { return New(NULL); }

  AccountTypeMask* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountTypeMask& from);
  void MergeFrom(const AccountTypeMask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccountTypeMask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AccountTypeMask_enumtype enumtype;
  static const enumtype Unknown =
    AccountTypeMask_enumtype_Unknown;
  static const enumtype AccountUS =
    AccountTypeMask_enumtype_AccountUS;
  static const enumtype AccountCNFutures =
    AccountTypeMask_enumtype_AccountCNFutures;
  static const enumtype AccountCNStocks =
    AccountTypeMask_enumtype_AccountCNStocks;
  static const enumtype AccountCNFutureOptions =
    AccountTypeMask_enumtype_AccountCNFutureOptions;
  static const enumtype AccountCNStockOptions =
    AccountTypeMask_enumtype_AccountCNStockOptions;
  static inline bool enumtype_IsValid(int value) {
    return AccountTypeMask_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    AccountTypeMask_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    AccountTypeMask_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    AccountTypeMask_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return AccountTypeMask_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return AccountTypeMask_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return AccountTypeMask_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.AccountTypeMask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static AccountTypeMask* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API ExitPxType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.ExitPxType) */ {
 public:
  ExitPxType();
  virtual ~ExitPxType();

  ExitPxType(const ExitPxType& from);

  inline ExitPxType& operator=(const ExitPxType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitPxType& default_instance();

  void Swap(ExitPxType* other);

  // implements Message ----------------------------------------------

  inline ExitPxType* New() const { return New(NULL); }

  ExitPxType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitPxType& from);
  void MergeFrom(const ExitPxType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExitPxType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExitPxType_enumtype enumtype;
  static const enumtype MktMidPx =
    ExitPxType_enumtype_MktMidPx;
  static const enumtype TheoPx =
    ExitPxType_enumtype_TheoPx;
  static const enumtype RiskPx =
    ExitPxType_enumtype_RiskPx;
  static inline bool enumtype_IsValid(int value) {
    return ExitPxType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    ExitPxType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    ExitPxType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    ExitPxType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return ExitPxType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return ExitPxType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return ExitPxType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.ExitPxType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static ExitPxType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API FillType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.FillType) */ {
 public:
  FillType();
  virtual ~FillType();

  FillType(const FillType& from);

  inline FillType& operator=(const FillType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillType& default_instance();

  void Swap(FillType* other);

  // implements Message ----------------------------------------------

  inline FillType* New() const { return New(NULL); }

  FillType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillType& from);
  void MergeFrom(const FillType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FillType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillType_enumtype enumtype;
  static const enumtype Unknown =
    FillType_enumtype_Unknown;
  static const enumtype YtdPos =
    FillType_enumtype_YtdPos;
  static inline bool enumtype_IsValid(int value) {
    return FillType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    FillType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    FillType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    FillType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return FillType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return FillType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return FillType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.FillType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static FillType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API FillInfoType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.FillInfoType) */ {
 public:
  FillInfoType();
  virtual ~FillInfoType();

  FillInfoType(const FillInfoType& from);

  inline FillInfoType& operator=(const FillInfoType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillInfoType& default_instance();

  void Swap(FillInfoType* other);

  // implements Message ----------------------------------------------

  inline FillInfoType* New() const { return New(NULL); }

  FillInfoType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillInfoType& from);
  void MergeFrom(const FillInfoType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FillInfoType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillInfoType_enumtype enumtype;
  static const enumtype Unknown =
    FillInfoType_enumtype_Unknown;
  static const enumtype Tot =
    FillInfoType_enumtype_Tot;
  static const enumtype Prev =
    FillInfoType_enumtype_Prev;
  static const enumtype Curr =
    FillInfoType_enumtype_Curr;
  static inline bool enumtype_IsValid(int value) {
    return FillInfoType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    FillInfoType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    FillInfoType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    FillInfoType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return FillInfoType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return FillInfoType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return FillInfoType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.FillInfoType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static FillInfoType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API FitDataType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.FitDataType) */ {
 public:
  FitDataType();
  virtual ~FitDataType();

  FitDataType(const FitDataType& from);

  inline FitDataType& operator=(const FitDataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FitDataType& default_instance();

  void Swap(FitDataType* other);

  // implements Message ----------------------------------------------

  inline FitDataType* New() const { return New(NULL); }

  FitDataType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FitDataType& from);
  void MergeFrom(const FitDataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FitDataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FitDataType_enumtype enumtype;
  static const enumtype Map =
    FitDataType_enumtype_Map;
  static const enumtype List =
    FitDataType_enumtype_List;
  static const enumtype MapList =
    FitDataType_enumtype_MapList;
  static inline bool enumtype_IsValid(int value) {
    return FitDataType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    FitDataType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    FitDataType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    FitDataType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return FitDataType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return FitDataType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return FitDataType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.FitDataType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static FitDataType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API InstrumentCommissionRateType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.InstrumentCommissionRateType) */ {
 public:
  InstrumentCommissionRateType();
  virtual ~InstrumentCommissionRateType();

  InstrumentCommissionRateType(const InstrumentCommissionRateType& from);

  inline InstrumentCommissionRateType& operator=(const InstrumentCommissionRateType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentCommissionRateType& default_instance();

  void Swap(InstrumentCommissionRateType* other);

  // implements Message ----------------------------------------------

  inline InstrumentCommissionRateType* New() const { return New(NULL); }

  InstrumentCommissionRateType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstrumentCommissionRateType& from);
  void MergeFrom(const InstrumentCommissionRateType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InstrumentCommissionRateType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InstrumentCommissionRateType_enumtype enumtype;
  static const enumtype Unknown =
    InstrumentCommissionRateType_enumtype_Unknown;
  static const enumtype RatioByMoney =
    InstrumentCommissionRateType_enumtype_RatioByMoney;
  static const enumtype RatioByVolume =
    InstrumentCommissionRateType_enumtype_RatioByVolume;
  static const enumtype OpenRatioByMoney =
    InstrumentCommissionRateType_enumtype_OpenRatioByMoney;
  static const enumtype OpenRatioByVolume =
    InstrumentCommissionRateType_enumtype_OpenRatioByVolume;
  static const enumtype CloseRatioByMoney =
    InstrumentCommissionRateType_enumtype_CloseRatioByMoney;
  static const enumtype CloseRatioByVolume =
    InstrumentCommissionRateType_enumtype_CloseRatioByVolume;
  static const enumtype CloseTodayRatioByMoney =
    InstrumentCommissionRateType_enumtype_CloseTodayRatioByMoney;
  static const enumtype CloseTodayRatioByVolume =
    InstrumentCommissionRateType_enumtype_CloseTodayRatioByVolume;
  static inline bool enumtype_IsValid(int value) {
    return InstrumentCommissionRateType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    InstrumentCommissionRateType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    InstrumentCommissionRateType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    InstrumentCommissionRateType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return InstrumentCommissionRateType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return InstrumentCommissionRateType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return InstrumentCommissionRateType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.InstrumentCommissionRateType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static InstrumentCommissionRateType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API InstrFilterType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.InstrFilterType) */ {
 public:
  InstrFilterType();
  virtual ~InstrFilterType();

  InstrFilterType(const InstrFilterType& from);

  inline InstrFilterType& operator=(const InstrFilterType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrFilterType& default_instance();

  void Swap(InstrFilterType* other);

  // implements Message ----------------------------------------------

  inline InstrFilterType* New() const { return New(NULL); }

  InstrFilterType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstrFilterType& from);
  void MergeFrom(const InstrFilterType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InstrFilterType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InstrFilterType_enumtype enumtype;
  static const enumtype Unknown =
    InstrFilterType_enumtype_Unknown;
  static const enumtype ByInstrPrefix =
    InstrFilterType_enumtype_ByInstrPrefix;
  static const enumtype ByProductID =
    InstrFilterType_enumtype_ByProductID;
  static const enumtype ByExchID =
    InstrFilterType_enumtype_ByExchID;
  static inline bool enumtype_IsValid(int value) {
    return InstrFilterType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    InstrFilterType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    InstrFilterType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    InstrFilterType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return InstrFilterType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return InstrFilterType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return InstrFilterType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.InstrFilterType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static InstrFilterType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MktRegimeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.MktRegimeType) */ {
 public:
  MktRegimeType();
  virtual ~MktRegimeType();

  MktRegimeType(const MktRegimeType& from);

  inline MktRegimeType& operator=(const MktRegimeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MktRegimeType& default_instance();

  void Swap(MktRegimeType* other);

  // implements Message ----------------------------------------------

  inline MktRegimeType* New() const { return New(NULL); }

  MktRegimeType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MktRegimeType& from);
  void MergeFrom(const MktRegimeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MktRegimeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MktRegimeType_enumtype enumtype;
  static const enumtype Unknown =
    MktRegimeType_enumtype_Unknown;
  static const enumtype Up =
    MktRegimeType_enumtype_Up;
  static const enumtype Dn =
    MktRegimeType_enumtype_Dn;
  static const enumtype Ranging =
    MktRegimeType_enumtype_Ranging;
  static inline bool enumtype_IsValid(int value) {
    return MktRegimeType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MktRegimeType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MktRegimeType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MktRegimeType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MktRegimeType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MktRegimeType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MktRegimeType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.MktRegimeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static MktRegimeType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TrendingOrRangingType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TrendingOrRangingType) */ {
 public:
  TrendingOrRangingType();
  virtual ~TrendingOrRangingType();

  TrendingOrRangingType(const TrendingOrRangingType& from);

  inline TrendingOrRangingType& operator=(const TrendingOrRangingType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendingOrRangingType& default_instance();

  void Swap(TrendingOrRangingType* other);

  // implements Message ----------------------------------------------

  inline TrendingOrRangingType* New() const { return New(NULL); }

  TrendingOrRangingType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendingOrRangingType& from);
  void MergeFrom(const TrendingOrRangingType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrendingOrRangingType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrendingOrRangingType_enumtype enumtype;
  static const enumtype Unknown =
    TrendingOrRangingType_enumtype_Unknown;
  static const enumtype Trending =
    TrendingOrRangingType_enumtype_Trending;
  static const enumtype Ranging =
    TrendingOrRangingType_enumtype_Ranging;
  static inline bool enumtype_IsValid(int value) {
    return TrendingOrRangingType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TrendingOrRangingType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TrendingOrRangingType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TrendingOrRangingType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TrendingOrRangingType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TrendingOrRangingType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TrendingOrRangingType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TrendingOrRangingType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TrendingOrRangingType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API RollingType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.RollingType) */ {
 public:
  RollingType();
  virtual ~RollingType();

  RollingType(const RollingType& from);

  inline RollingType& operator=(const RollingType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RollingType& default_instance();

  void Swap(RollingType* other);

  // implements Message ----------------------------------------------

  inline RollingType* New() const { return New(NULL); }

  RollingType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollingType& from);
  void MergeFrom(const RollingType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RollingType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RollingType_enumtype enumtype;
  static const enumtype Time =
    RollingType_enumtype_Time;
  static const enumtype Tick =
    RollingType_enumtype_Tick;
  static inline bool enumtype_IsValid(int value) {
    return RollingType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    RollingType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    RollingType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    RollingType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return RollingType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return RollingType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return RollingType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.RollingType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static RollingType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API CallPutType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.CallPutType) */ {
 public:
  CallPutType();
  virtual ~CallPutType();

  CallPutType(const CallPutType& from);

  inline CallPutType& operator=(const CallPutType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallPutType& default_instance();

  void Swap(CallPutType* other);

  // implements Message ----------------------------------------------

  inline CallPutType* New() const { return New(NULL); }

  CallPutType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallPutType& from);
  void MergeFrom(const CallPutType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallPutType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CallPutType_enumtype enumtype;
  static const enumtype Unknown =
    CallPutType_enumtype_Unknown;
  static const enumtype Call =
    CallPutType_enumtype_Call;
  static const enumtype Put =
    CallPutType_enumtype_Put;
  static const enumtype Straddle =
    CallPutType_enumtype_Straddle;
  static inline bool enumtype_IsValid(int value) {
    return CallPutType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    CallPutType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    CallPutType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    CallPutType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return CallPutType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return CallPutType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return CallPutType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.CallPutType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static CallPutType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OptionExerciseStyle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OptionExerciseStyle) */ {
 public:
  OptionExerciseStyle();
  virtual ~OptionExerciseStyle();

  OptionExerciseStyle(const OptionExerciseStyle& from);

  inline OptionExerciseStyle& operator=(const OptionExerciseStyle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionExerciseStyle& default_instance();

  void Swap(OptionExerciseStyle* other);

  // implements Message ----------------------------------------------

  inline OptionExerciseStyle* New() const { return New(NULL); }

  OptionExerciseStyle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionExerciseStyle& from);
  void MergeFrom(const OptionExerciseStyle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionExerciseStyle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OptionExerciseStyle_enumtype enumtype;
  static const enumtype European =
    OptionExerciseStyle_enumtype_European;
  static const enumtype American =
    OptionExerciseStyle_enumtype_American;
  static inline bool enumtype_IsValid(int value) {
    return OptionExerciseStyle_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OptionExerciseStyle_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OptionExerciseStyle_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OptionExerciseStyle_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OptionExerciseStyle_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OptionExerciseStyle_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OptionExerciseStyle_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OptionExerciseStyle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OptionExerciseStyle* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OptionXType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OptionXType) */ {
 public:
  OptionXType();
  virtual ~OptionXType();

  OptionXType(const OptionXType& from);

  inline OptionXType& operator=(const OptionXType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionXType& default_instance();

  void Swap(OptionXType* other);

  // implements Message ----------------------------------------------

  inline OptionXType* New() const { return New(NULL); }

  OptionXType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionXType& from);
  void MergeFrom(const OptionXType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionXType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OptionXType_enumtype enumtype;
  static const enumtype X =
    OptionXType_enumtype_X;
  static const enumtype LogX =
    OptionXType_enumtype_LogX;
  static const enumtype LogXOverT =
    OptionXType_enumtype_LogXOverT;
  static const enumtype Sd =
    OptionXType_enumtype_Sd;
  static inline bool enumtype_IsValid(int value) {
    return OptionXType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OptionXType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OptionXType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OptionXType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OptionXType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OptionXType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OptionXType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OptionXType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OptionXType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OptionCalcType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OptionCalcType) */ {
 public:
  OptionCalcType();
  virtual ~OptionCalcType();

  OptionCalcType(const OptionCalcType& from);

  inline OptionCalcType& operator=(const OptionCalcType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionCalcType& default_instance();

  void Swap(OptionCalcType* other);

  // implements Message ----------------------------------------------

  inline OptionCalcType* New() const { return New(NULL); }

  OptionCalcType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionCalcType& from);
  void MergeFrom(const OptionCalcType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionCalcType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OptionCalcType_enumtype enumtype;
  static const enumtype Unknown =
    OptionCalcType_enumtype_Unknown;
  static const enumtype S =
    OptionCalcType_enumtype_S;
  static const enumtype X =
    OptionCalcType_enumtype_X;
  static const enumtype T =
    OptionCalcType_enumtype_T;
  static const enumtype r =
    OptionCalcType_enumtype_r;
  static const enumtype b =
    OptionCalcType_enumtype_b;
  static const enumtype sigma =
    OptionCalcType_enumtype_sigma;
  static const enumtype DTE =
    OptionCalcType_enumtype_DTE;
  static const enumtype Px =
    OptionCalcType_enumtype_Px;
  static const enumtype d1 =
    OptionCalcType_enumtype_d1;
  static const enumtype d2 =
    OptionCalcType_enumtype_d2;
  static const enumtype nd1 =
    OptionCalcType_enumtype_nd1;
  static const enumtype nd2 =
    OptionCalcType_enumtype_nd2;
  static const enumtype pd1 =
    OptionCalcType_enumtype_pd1;
  static const enumtype pd2 =
    OptionCalcType_enumtype_pd2;
  static const enumtype Delta =
    OptionCalcType_enumtype_Delta;
  static const enumtype DdeltaDvol =
    OptionCalcType_enumtype_DdeltaDvol;
  static const enumtype DvannaDvol =
    OptionCalcType_enumtype_DvannaDvol;
  static const enumtype DdeltaDtime =
    OptionCalcType_enumtype_DdeltaDtime;
  static const enumtype Elasticity =
    OptionCalcType_enumtype_Elasticity;
  static const enumtype Gamma =
    OptionCalcType_enumtype_Gamma;
  static const enumtype GammaP =
    OptionCalcType_enumtype_GammaP;
  static const enumtype DgammaDvol =
    OptionCalcType_enumtype_DgammaDvol;
  static const enumtype DgammaPDvol =
    OptionCalcType_enumtype_DgammaPDvol;
  static const enumtype DgammaDspot =
    OptionCalcType_enumtype_DgammaDspot;
  static const enumtype DgammaPDspot =
    OptionCalcType_enumtype_DgammaPDspot;
  static const enumtype DgammaDtime =
    OptionCalcType_enumtype_DgammaDtime;
  static const enumtype DgammaPDtime =
    OptionCalcType_enumtype_DgammaPDtime;
  static const enumtype Vega =
    OptionCalcType_enumtype_Vega;
  static const enumtype VegaP =
    OptionCalcType_enumtype_VegaP;
  static const enumtype DvegaDvol =
    OptionCalcType_enumtype_DvegaDvol;
  static const enumtype DvegaPDvol =
    OptionCalcType_enumtype_DvegaPDvol;
  static const enumtype DvommaDvol =
    OptionCalcType_enumtype_DvommaDvol;
  static const enumtype DvegaDtime =
    OptionCalcType_enumtype_DvegaDtime;
  static const enumtype VarianceVega =
    OptionCalcType_enumtype_VarianceVega;
  static const enumtype DdeltaDvar =
    OptionCalcType_enumtype_DdeltaDvar;
  static const enumtype VarianceVomma =
    OptionCalcType_enumtype_VarianceVomma;
  static const enumtype VarianceUltima =
    OptionCalcType_enumtype_VarianceUltima;
  static const enumtype Theta =
    OptionCalcType_enumtype_Theta;
  static const enumtype DriftlessTheta =
    OptionCalcType_enumtype_DriftlessTheta;
  static const enumtype Rho =
    OptionCalcType_enumtype_Rho;
  static const enumtype OOFRho =
    OptionCalcType_enumtype_OOFRho;
  static const enumtype Phi =
    OptionCalcType_enumtype_Phi;
  static const enumtype CarryRho =
    OptionCalcType_enumtype_CarryRho;
  static const enumtype Zeta =
    OptionCalcType_enumtype_Zeta;
  static const enumtype DzetaDvol =
    OptionCalcType_enumtype_DzetaDvol;
  static const enumtype DzetaDtime =
    OptionCalcType_enumtype_DzetaDtime;
  static const enumtype StrikeDelta =
    OptionCalcType_enumtype_StrikeDelta;
  static const enumtype StrikeGamma =
    OptionCalcType_enumtype_StrikeGamma;
  static const enumtype LocalDelta =
    OptionCalcType_enumtype_LocalDelta;
  static const enumtype LocalGamma =
    OptionCalcType_enumtype_LocalGamma;
  static const enumtype LocalVega =
    OptionCalcType_enumtype_LocalVega;
  static const enumtype LocalTheta =
    OptionCalcType_enumtype_LocalTheta;
  static const enumtype LocalRho =
    OptionCalcType_enumtype_LocalRho;
  static const enumtype ImpVol =
    OptionCalcType_enumtype_ImpVol;
  static const enumtype ImpVolBid =
    OptionCalcType_enumtype_ImpVolBid;
  static const enumtype ImpVolMid =
    OptionCalcType_enumtype_ImpVolMid;
  static const enumtype ImpVolAsk =
    OptionCalcType_enumtype_ImpVolAsk;
  static const enumtype AtmFwd =
    OptionCalcType_enumtype_AtmFwd;
  static const enumtype AtmVol =
    OptionCalcType_enumtype_AtmVol;
  static const enumtype SynFwd =
    OptionCalcType_enumtype_SynFwd;
  static const enumtype SynFwdBid =
    OptionCalcType_enumtype_SynFwdBid;
  static const enumtype SynFwdAsk =
    OptionCalcType_enumtype_SynFwdAsk;
  static inline bool enumtype_IsValid(int value) {
    return OptionCalcType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OptionCalcType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OptionCalcType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OptionCalcType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OptionCalcType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OptionCalcType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OptionCalcType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OptionCalcType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OptionCalcType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OptionPxMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OptionPxMethod) */ {
 public:
  OptionPxMethod();
  virtual ~OptionPxMethod();

  OptionPxMethod(const OptionPxMethod& from);

  inline OptionPxMethod& operator=(const OptionPxMethod& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionPxMethod& default_instance();

  void Swap(OptionPxMethod* other);

  // implements Message ----------------------------------------------

  inline OptionPxMethod* New() const { return New(NULL); }

  OptionPxMethod* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionPxMethod& from);
  void MergeFrom(const OptionPxMethod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionPxMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OptionPxMethod_enumtype enumtype;
  static const enumtype BSM =
    OptionPxMethod_enumtype_BSM;
  static const enumtype BAW =
    OptionPxMethod_enumtype_BAW;
  static const enumtype BS1993American =
    OptionPxMethod_enumtype_BS1993American;
  static const enumtype BS2002American =
    OptionPxMethod_enumtype_BS2002American;
  static const enumtype TrinomialTree =
    OptionPxMethod_enumtype_TrinomialTree;
  static const enumtype CRRTree =
    OptionPxMethod_enumtype_CRRTree;
  static const enumtype LRTree =
    OptionPxMethod_enumtype_LRTree;
  static const enumtype JRTree =
    OptionPxMethod_enumtype_JRTree;
  static const enumtype CNFDM =
    OptionPxMethod_enumtype_CNFDM;
  static const enumtype ImplicitFDM =
    OptionPxMethod_enumtype_ImplicitFDM;
  static const enumtype ExplicitFDM =
    OptionPxMethod_enumtype_ExplicitFDM;
  static inline bool enumtype_IsValid(int value) {
    return OptionPxMethod_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OptionPxMethod_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OptionPxMethod_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OptionPxMethod_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OptionPxMethod_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OptionPxMethod_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OptionPxMethod_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OptionPxMethod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OptionPxMethod* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TrdSigType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TrdSigType) */ {
 public:
  TrdSigType();
  virtual ~TrdSigType();

  TrdSigType(const TrdSigType& from);

  inline TrdSigType& operator=(const TrdSigType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrdSigType& default_instance();

  void Swap(TrdSigType* other);

  // implements Message ----------------------------------------------

  inline TrdSigType* New() const { return New(NULL); }

  TrdSigType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrdSigType& from);
  void MergeFrom(const TrdSigType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrdSigType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrdSigType_enumtype enumtype;
  static const enumtype Unknown =
    TrdSigType_enumtype_Unknown;
  static const enumtype Buy =
    TrdSigType_enumtype_Buy;
  static const enumtype Sell =
    TrdSigType_enumtype_Sell;
  static const enumtype BuyExit =
    TrdSigType_enumtype_BuyExit;
  static const enumtype SellExit =
    TrdSigType_enumtype_SellExit;
  static inline bool enumtype_IsValid(int value) {
    return TrdSigType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TrdSigType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TrdSigType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TrdSigType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TrdSigType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TrdSigType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TrdSigType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TrdSigType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TrdSigType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TrdStatType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TrdStatType) */ {
 public:
  TrdStatType();
  virtual ~TrdStatType();

  TrdStatType(const TrdStatType& from);

  inline TrdStatType& operator=(const TrdStatType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrdStatType& default_instance();

  void Swap(TrdStatType* other);

  // implements Message ----------------------------------------------

  inline TrdStatType* New() const { return New(NULL); }

  TrdStatType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrdStatType& from);
  void MergeFrom(const TrdStatType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrdStatType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrdStatType_enumtype enumtype;
  static const enumtype Unknown =
    TrdStatType_enumtype_Unknown;
  static const enumtype On =
    TrdStatType_enumtype_On;
  static const enumtype Idle =
    TrdStatType_enumtype_Idle;
  static const enumtype Flat =
    TrdStatType_enumtype_Flat;
  static const enumtype JoinMktToFlat =
    TrdStatType_enumtype_JoinMktToFlat;
  static inline bool enumtype_IsValid(int value) {
    return TrdStatType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TrdStatType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TrdStatType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TrdStatType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TrdStatType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TrdStatType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TrdStatType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TrdStatType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TrdStatType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API CrossAboveBelowType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.CrossAboveBelowType) */ {
 public:
  CrossAboveBelowType();
  virtual ~CrossAboveBelowType();

  CrossAboveBelowType(const CrossAboveBelowType& from);

  inline CrossAboveBelowType& operator=(const CrossAboveBelowType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossAboveBelowType& default_instance();

  void Swap(CrossAboveBelowType* other);

  // implements Message ----------------------------------------------

  inline CrossAboveBelowType* New() const { return New(NULL); }

  CrossAboveBelowType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossAboveBelowType& from);
  void MergeFrom(const CrossAboveBelowType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CrossAboveBelowType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CrossAboveBelowType_enumtype enumtype;
  static const enumtype Unknown =
    CrossAboveBelowType_enumtype_Unknown;
  static const enumtype Above =
    CrossAboveBelowType_enumtype_Above;
  static const enumtype Below =
    CrossAboveBelowType_enumtype_Below;
  static const enumtype AboveOverbought =
    CrossAboveBelowType_enumtype_AboveOverbought;
  static const enumtype BelowOverbought =
    CrossAboveBelowType_enumtype_BelowOverbought;
  static const enumtype AboveOversold =
    CrossAboveBelowType_enumtype_AboveOversold;
  static const enumtype BelowOversold =
    CrossAboveBelowType_enumtype_BelowOversold;
  static inline bool enumtype_IsValid(int value) {
    return CrossAboveBelowType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    CrossAboveBelowType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    CrossAboveBelowType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    CrossAboveBelowType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return CrossAboveBelowType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return CrossAboveBelowType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return CrossAboveBelowType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.CrossAboveBelowType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static CrossAboveBelowType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API SecurityType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.SecurityType) */ {
 public:
  SecurityType();
  virtual ~SecurityType();

  SecurityType(const SecurityType& from);

  inline SecurityType& operator=(const SecurityType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityType& default_instance();

  void Swap(SecurityType* other);

  // implements Message ----------------------------------------------

  inline SecurityType* New() const { return New(NULL); }

  SecurityType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecurityType& from);
  void MergeFrom(const SecurityType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SecurityType_enumtype enumtype;
  static const enumtype Unknown =
    SecurityType_enumtype_Unknown;
  static const enumtype EUSUPRA =
    SecurityType_enumtype_EUSUPRA;
  static const enumtype FAC =
    SecurityType_enumtype_FAC;
  static const enumtype FADN =
    SecurityType_enumtype_FADN;
  static const enumtype PEF =
    SecurityType_enumtype_PEF;
  static const enumtype SUPRA =
    SecurityType_enumtype_SUPRA;
  static const enumtype CORP =
    SecurityType_enumtype_CORP;
  static const enumtype CPP =
    SecurityType_enumtype_CPP;
  static const enumtype CB =
    SecurityType_enumtype_CB;
  static const enumtype DUAL =
    SecurityType_enumtype_DUAL;
  static const enumtype EUCORP =
    SecurityType_enumtype_EUCORP;
  static const enumtype EUFRN =
    SecurityType_enumtype_EUFRN;
  static const enumtype FRN =
    SecurityType_enumtype_FRN;
  static const enumtype XLINKD =
    SecurityType_enumtype_XLINKD;
  static const enumtype STRUCT =
    SecurityType_enumtype_STRUCT;
  static const enumtype YANK =
    SecurityType_enumtype_YANK;
  static const enumtype FOR =
    SecurityType_enumtype_FOR;
  static const enumtype FXNDF =
    SecurityType_enumtype_FXNDF;
  static const enumtype FXSPOT =
    SecurityType_enumtype_FXSPOT;
  static const enumtype FXFWD =
    SecurityType_enumtype_FXFWD;
  static const enumtype FXSWAP =
    SecurityType_enumtype_FXSWAP;
  static const enumtype CDS =
    SecurityType_enumtype_CDS;
  static const enumtype FUT =
    SecurityType_enumtype_FUT;
  static const enumtype OPT =
    SecurityType_enumtype_OPT;
  static const enumtype OOF =
    SecurityType_enumtype_OOF;
  static const enumtype OOP =
    SecurityType_enumtype_OOP;
  static const enumtype IRS =
    SecurityType_enumtype_IRS;
  static const enumtype OOC =
    SecurityType_enumtype_OOC;
  static const enumtype CS =
    SecurityType_enumtype_CS;
  static const enumtype PS =
    SecurityType_enumtype_PS;
  static const enumtype REPO =
    SecurityType_enumtype_REPO;
  static const enumtype FORWARD =
    SecurityType_enumtype_FORWARD;
  static const enumtype BUYSELL =
    SecurityType_enumtype_BUYSELL;
  static const enumtype SECLOAN =
    SecurityType_enumtype_SECLOAN;
  static const enumtype SECPLEDGE =
    SecurityType_enumtype_SECPLEDGE;
  static const enumtype BRADY =
    SecurityType_enumtype_BRADY;
  static const enumtype CAN =
    SecurityType_enumtype_CAN;
  static const enumtype CTB =
    SecurityType_enumtype_CTB;
  static const enumtype EUSOV =
    SecurityType_enumtype_EUSOV;
  static const enumtype PROV =
    SecurityType_enumtype_PROV;
  static const enumtype TB =
    SecurityType_enumtype_TB;
  static const enumtype TBOND =
    SecurityType_enumtype_TBOND;
  static const enumtype TINT =
    SecurityType_enumtype_TINT;
  static const enumtype TBILL =
    SecurityType_enumtype_TBILL;
  static const enumtype TIPS =
    SecurityType_enumtype_TIPS;
  static const enumtype TCAL =
    SecurityType_enumtype_TCAL;
  static const enumtype TPRN =
    SecurityType_enumtype_TPRN;
  static const enumtype TNOTE =
    SecurityType_enumtype_TNOTE;
  static const enumtype UST =
    SecurityType_enumtype_UST;
  static const enumtype USTB =
    SecurityType_enumtype_USTB;
  static const enumtype TERM =
    SecurityType_enumtype_TERM;
  static const enumtype RVLV =
    SecurityType_enumtype_RVLV;
  static const enumtype RVLVTRM =
    SecurityType_enumtype_RVLVTRM;
  static const enumtype BRIDGE =
    SecurityType_enumtype_BRIDGE;
  static const enumtype LOFC =
    SecurityType_enumtype_LOFC;
  static const enumtype SWING =
    SecurityType_enumtype_SWING;
  static const enumtype DINP =
    SecurityType_enumtype_DINP;
  static const enumtype DEFLTED =
    SecurityType_enumtype_DEFLTED;
  static const enumtype WITHDRN =
    SecurityType_enumtype_WITHDRN;
  static const enumtype REPLACD =
    SecurityType_enumtype_REPLACD;
  static const enumtype MATURED =
    SecurityType_enumtype_MATURED;
  static const enumtype AMENDED =
    SecurityType_enumtype_AMENDED;
  static const enumtype RETIRED =
    SecurityType_enumtype_RETIRED;
  static const enumtype BA =
    SecurityType_enumtype_BA;
  static const enumtype BDN =
    SecurityType_enumtype_BDN;
  static const enumtype BN =
    SecurityType_enumtype_BN;
  static const enumtype BOX =
    SecurityType_enumtype_BOX;
  static const enumtype CAMM =
    SecurityType_enumtype_CAMM;
  static const enumtype CD =
    SecurityType_enumtype_CD;
  static const enumtype CL =
    SecurityType_enumtype_CL;
  static const enumtype CP =
    SecurityType_enumtype_CP;
  static const enumtype DN =
    SecurityType_enumtype_DN;
  static const enumtype EUCD =
    SecurityType_enumtype_EUCD;
  static const enumtype EUCP =
    SecurityType_enumtype_EUCP;
  static const enumtype LQN =
    SecurityType_enumtype_LQN;
  static const enumtype MTN =
    SecurityType_enumtype_MTN;
  static const enumtype ONITE =
    SecurityType_enumtype_ONITE;
  static const enumtype PN =
    SecurityType_enumtype_PN;
  static const enumtype STN =
    SecurityType_enumtype_STN;
  static const enumtype PZFJ =
    SecurityType_enumtype_PZFJ;
  static const enumtype SLQN =
    SecurityType_enumtype_SLQN;
  static const enumtype TD =
    SecurityType_enumtype_TD;
  static const enumtype TLQN =
    SecurityType_enumtype_TLQN;
  static const enumtype XCN =
    SecurityType_enumtype_XCN;
  static const enumtype YCD =
    SecurityType_enumtype_YCD;
  static const enumtype ABS =
    SecurityType_enumtype_ABS;
  static const enumtype CMB =
    SecurityType_enumtype_CMB;
  static const enumtype CMBS =
    SecurityType_enumtype_CMBS;
  static const enumtype CMO =
    SecurityType_enumtype_CMO;
  static const enumtype IET =
    SecurityType_enumtype_IET;
  static const enumtype MBS =
    SecurityType_enumtype_MBS;
  static const enumtype MIO =
    SecurityType_enumtype_MIO;
  static const enumtype MPO =
    SecurityType_enumtype_MPO;
  static const enumtype MPP =
    SecurityType_enumtype_MPP;
  static const enumtype MPT =
    SecurityType_enumtype_MPT;
  static const enumtype PFAND =
    SecurityType_enumtype_PFAND;
  static const enumtype TBA =
    SecurityType_enumtype_TBA;
  static const enumtype AN =
    SecurityType_enumtype_AN;
  static const enumtype COFO =
    SecurityType_enumtype_COFO;
  static const enumtype COFP =
    SecurityType_enumtype_COFP;
  static const enumtype GO =
    SecurityType_enumtype_GO;
  static const enumtype MT =
    SecurityType_enumtype_MT;
  static const enumtype RAN =
    SecurityType_enumtype_RAN;
  static const enumtype REV =
    SecurityType_enumtype_REV;
  static const enumtype SPCLA =
    SecurityType_enumtype_SPCLA;
  static const enumtype SPCLO =
    SecurityType_enumtype_SPCLO;
  static const enumtype SPCLT =
    SecurityType_enumtype_SPCLT;
  static const enumtype TAN =
    SecurityType_enumtype_TAN;
  static const enumtype TAXA =
    SecurityType_enumtype_TAXA;
  static const enumtype TECP =
    SecurityType_enumtype_TECP;
  static const enumtype TMCP =
    SecurityType_enumtype_TMCP;
  static const enumtype TRAN =
    SecurityType_enumtype_TRAN;
  static const enumtype VRDN =
    SecurityType_enumtype_VRDN;
  static const enumtype WAR =
    SecurityType_enumtype_WAR;
  static const enumtype MF =
    SecurityType_enumtype_MF;
  static const enumtype MLEG =
    SecurityType_enumtype_MLEG;
  static const enumtype Wildcard =
    SecurityType_enumtype_Wildcard;
  static const enumtype CASH =
    SecurityType_enumtype_CASH;
  static const enumtype INDEX =
    SecurityType_enumtype_INDEX;
  static const enumtype ETF =
    SecurityType_enumtype_ETF;
  static inline bool enumtype_IsValid(int value) {
    return SecurityType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    SecurityType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    SecurityType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    SecurityType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return SecurityType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return SecurityType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return SecurityType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.SecurityType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static SecurityType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TAType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TAType) */ {
 public:
  TAType();
  virtual ~TAType();

  TAType(const TAType& from);

  inline TAType& operator=(const TAType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAType& default_instance();

  void Swap(TAType* other);

  // implements Message ----------------------------------------------

  inline TAType* New() const { return New(NULL); }

  TAType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAType& from);
  void MergeFrom(const TAType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TAType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TAType_enumtype enumtype;
  static const enumtype Unknown =
    TAType_enumtype_Unknown;
  static const enumtype AD =
    TAType_enumtype_AD;
  static const enumtype ADOSC =
    TAType_enumtype_ADOSC;
  static const enumtype ADX =
    TAType_enumtype_ADX;
  static const enumtype ADXR =
    TAType_enumtype_ADXR;
  static const enumtype APO =
    TAType_enumtype_APO;
  static const enumtype AROON =
    TAType_enumtype_AROON;
  static const enumtype AROONOSC =
    TAType_enumtype_AROONOSC;
  static const enumtype ATR =
    TAType_enumtype_ATR;
  static const enumtype AVGPRICE =
    TAType_enumtype_AVGPRICE;
  static const enumtype BBANDS =
    TAType_enumtype_BBANDS;
  static const enumtype BETA =
    TAType_enumtype_BETA;
  static const enumtype BOP =
    TAType_enumtype_BOP;
  static const enumtype CCI =
    TAType_enumtype_CCI;
  static const enumtype CDL2CROWS =
    TAType_enumtype_CDL2CROWS;
  static const enumtype CDL3BLACKCROWS =
    TAType_enumtype_CDL3BLACKCROWS;
  static const enumtype CDL3INSIDE =
    TAType_enumtype_CDL3INSIDE;
  static const enumtype CDL3LINESTRIKE =
    TAType_enumtype_CDL3LINESTRIKE;
  static const enumtype CDL3OUTSIDE =
    TAType_enumtype_CDL3OUTSIDE;
  static const enumtype CDL3STARSINSOUTH =
    TAType_enumtype_CDL3STARSINSOUTH;
  static const enumtype CDL3WHITESOLDIERS =
    TAType_enumtype_CDL3WHITESOLDIERS;
  static const enumtype CDLABANDONEDBABY =
    TAType_enumtype_CDLABANDONEDBABY;
  static const enumtype CDLADVANCEBLOCK =
    TAType_enumtype_CDLADVANCEBLOCK;
  static const enumtype CDLBELTHOLD =
    TAType_enumtype_CDLBELTHOLD;
  static const enumtype CDLBREAKAWAY =
    TAType_enumtype_CDLBREAKAWAY;
  static const enumtype CDLCLOSINGMARUBOZU =
    TAType_enumtype_CDLCLOSINGMARUBOZU;
  static const enumtype CDLCONCEALBABYSWALL =
    TAType_enumtype_CDLCONCEALBABYSWALL;
  static const enumtype CDLCOUNTERATTACK =
    TAType_enumtype_CDLCOUNTERATTACK;
  static const enumtype CDLDARKCLOUDCOVER =
    TAType_enumtype_CDLDARKCLOUDCOVER;
  static const enumtype CDLDOJI =
    TAType_enumtype_CDLDOJI;
  static const enumtype CDLDOJISTAR =
    TAType_enumtype_CDLDOJISTAR;
  static const enumtype CDLDRAGONFLYDOJI =
    TAType_enumtype_CDLDRAGONFLYDOJI;
  static const enumtype CDLENGULFING =
    TAType_enumtype_CDLENGULFING;
  static const enumtype CDLEVENINGDOJISTAR =
    TAType_enumtype_CDLEVENINGDOJISTAR;
  static const enumtype CDLEVENINGSTAR =
    TAType_enumtype_CDLEVENINGSTAR;
  static const enumtype CDLGAPSIDESIDEWHITE =
    TAType_enumtype_CDLGAPSIDESIDEWHITE;
  static const enumtype CDLGRAVESTONEDOJI =
    TAType_enumtype_CDLGRAVESTONEDOJI;
  static const enumtype CDLHAMMER =
    TAType_enumtype_CDLHAMMER;
  static const enumtype CDLHANGINGMAN =
    TAType_enumtype_CDLHANGINGMAN;
  static const enumtype CDLHARAMI =
    TAType_enumtype_CDLHARAMI;
  static const enumtype CDLHARAMICROSS =
    TAType_enumtype_CDLHARAMICROSS;
  static const enumtype CDLHIGHWAVE =
    TAType_enumtype_CDLHIGHWAVE;
  static const enumtype CDLHIKKAKE =
    TAType_enumtype_CDLHIKKAKE;
  static const enumtype CDLHIKKAKEMOD =
    TAType_enumtype_CDLHIKKAKEMOD;
  static const enumtype CDLHOMINGPIGEON =
    TAType_enumtype_CDLHOMINGPIGEON;
  static const enumtype CDLIDENTICAL3CROWS =
    TAType_enumtype_CDLIDENTICAL3CROWS;
  static const enumtype CDLINNECK =
    TAType_enumtype_CDLINNECK;
  static const enumtype CDLINVERTEDHAMMER =
    TAType_enumtype_CDLINVERTEDHAMMER;
  static const enumtype CDLKICKING =
    TAType_enumtype_CDLKICKING;
  static const enumtype CDLKICKINGBYLENGTH =
    TAType_enumtype_CDLKICKINGBYLENGTH;
  static const enumtype CDLLADDERBOTTOM =
    TAType_enumtype_CDLLADDERBOTTOM;
  static const enumtype CDLLONGLEGGEDDOJI =
    TAType_enumtype_CDLLONGLEGGEDDOJI;
  static const enumtype CDLLONGLINE =
    TAType_enumtype_CDLLONGLINE;
  static const enumtype CDLMARUBOZU =
    TAType_enumtype_CDLMARUBOZU;
  static const enumtype CDLMATCHINGLOW =
    TAType_enumtype_CDLMATCHINGLOW;
  static const enumtype CDLMATHOLD =
    TAType_enumtype_CDLMATHOLD;
  static const enumtype CDLMORNINGDOJISTAR =
    TAType_enumtype_CDLMORNINGDOJISTAR;
  static const enumtype CDLMORNINGSTAR =
    TAType_enumtype_CDLMORNINGSTAR;
  static const enumtype CDLONNECK =
    TAType_enumtype_CDLONNECK;
  static const enumtype CDLPIERCING =
    TAType_enumtype_CDLPIERCING;
  static const enumtype CDLRICKSHAWMAN =
    TAType_enumtype_CDLRICKSHAWMAN;
  static const enumtype CDLRISEFALL3METHODS =
    TAType_enumtype_CDLRISEFALL3METHODS;
  static const enumtype CDLSEPARATINGLINES =
    TAType_enumtype_CDLSEPARATINGLINES;
  static const enumtype CDLSHOOTINGSTAR =
    TAType_enumtype_CDLSHOOTINGSTAR;
  static const enumtype CDLSHORTLINE =
    TAType_enumtype_CDLSHORTLINE;
  static const enumtype CDLSPINNINGTOP =
    TAType_enumtype_CDLSPINNINGTOP;
  static const enumtype CDLSTALLEDPATTERN =
    TAType_enumtype_CDLSTALLEDPATTERN;
  static const enumtype CDLSTICKSANDWICH =
    TAType_enumtype_CDLSTICKSANDWICH;
  static const enumtype CDLTAKURI =
    TAType_enumtype_CDLTAKURI;
  static const enumtype CDLTASUKIGAP =
    TAType_enumtype_CDLTASUKIGAP;
  static const enumtype CDLTHRUSTING =
    TAType_enumtype_CDLTHRUSTING;
  static const enumtype CDLTRISTAR =
    TAType_enumtype_CDLTRISTAR;
  static const enumtype CDLUNIQUE3RIVER =
    TAType_enumtype_CDLUNIQUE3RIVER;
  static const enumtype CDLUPSIDEGAP2CROWS =
    TAType_enumtype_CDLUPSIDEGAP2CROWS;
  static const enumtype CDLXSIDEGAP3METHODS =
    TAType_enumtype_CDLXSIDEGAP3METHODS;
  static const enumtype CMO =
    TAType_enumtype_CMO;
  static const enumtype CORREL =
    TAType_enumtype_CORREL;
  static const enumtype DEMA =
    TAType_enumtype_DEMA;
  static const enumtype DX =
    TAType_enumtype_DX;
  static const enumtype EMA =
    TAType_enumtype_EMA;
  static const enumtype HT_DCPERIOD =
    TAType_enumtype_HT_DCPERIOD;
  static const enumtype HT_DCPHASE =
    TAType_enumtype_HT_DCPHASE;
  static const enumtype HT_PHASOR =
    TAType_enumtype_HT_PHASOR;
  static const enumtype HT_SINE =
    TAType_enumtype_HT_SINE;
  static const enumtype HT_TRENDLINE =
    TAType_enumtype_HT_TRENDLINE;
  static const enumtype HT_TRENDMODE =
    TAType_enumtype_HT_TRENDMODE;
  static const enumtype KAMA =
    TAType_enumtype_KAMA;
  static const enumtype LINEARREG =
    TAType_enumtype_LINEARREG;
  static const enumtype LINEARREG_ANGLE =
    TAType_enumtype_LINEARREG_ANGLE;
  static const enumtype LINEARREG_INTERCEPT =
    TAType_enumtype_LINEARREG_INTERCEPT;
  static const enumtype LINEARREG_SLOPE =
    TAType_enumtype_LINEARREG_SLOPE;
  static const enumtype MA =
    TAType_enumtype_MA;
  static const enumtype MACD =
    TAType_enumtype_MACD;
  static const enumtype MACDEXT =
    TAType_enumtype_MACDEXT;
  static const enumtype MACDFIX =
    TAType_enumtype_MACDFIX;
  static const enumtype MAMA =
    TAType_enumtype_MAMA;
  static const enumtype MAXVALUE =
    TAType_enumtype_MAXVALUE;
  static const enumtype MAXINDEX =
    TAType_enumtype_MAXINDEX;
  static const enumtype MEDPRICE =
    TAType_enumtype_MEDPRICE;
  static const enumtype MFI =
    TAType_enumtype_MFI;
  static const enumtype MIDPOINT =
    TAType_enumtype_MIDPOINT;
  static const enumtype MIDPRICE =
    TAType_enumtype_MIDPRICE;
  static const enumtype MINVALUE =
    TAType_enumtype_MINVALUE;
  static const enumtype MININDEX =
    TAType_enumtype_MININDEX;
  static const enumtype MINMAX =
    TAType_enumtype_MINMAX;
  static const enumtype MINMAXINDEX =
    TAType_enumtype_MINMAXINDEX;
  static const enumtype MINUS_DI =
    TAType_enumtype_MINUS_DI;
  static const enumtype MINUS_DM =
    TAType_enumtype_MINUS_DM;
  static const enumtype MOM =
    TAType_enumtype_MOM;
  static const enumtype NATR =
    TAType_enumtype_NATR;
  static const enumtype OBV =
    TAType_enumtype_OBV;
  static const enumtype PLUS_DI =
    TAType_enumtype_PLUS_DI;
  static const enumtype PLUS_DM =
    TAType_enumtype_PLUS_DM;
  static const enumtype PPO =
    TAType_enumtype_PPO;
  static const enumtype ROC =
    TAType_enumtype_ROC;
  static const enumtype ROCP =
    TAType_enumtype_ROCP;
  static const enumtype ROCR =
    TAType_enumtype_ROCR;
  static const enumtype ROCR100 =
    TAType_enumtype_ROCR100;
  static const enumtype RSI =
    TAType_enumtype_RSI;
  static const enumtype SAR =
    TAType_enumtype_SAR;
  static const enumtype SAREXT =
    TAType_enumtype_SAREXT;
  static const enumtype SMA =
    TAType_enumtype_SMA;
  static const enumtype STDDEV =
    TAType_enumtype_STDDEV;
  static const enumtype STOCH =
    TAType_enumtype_STOCH;
  static const enumtype STOCHF =
    TAType_enumtype_STOCHF;
  static const enumtype STOCHRSI =
    TAType_enumtype_STOCHRSI;
  static const enumtype SUM =
    TAType_enumtype_SUM;
  static const enumtype T3 =
    TAType_enumtype_T3;
  static const enumtype TEMA =
    TAType_enumtype_TEMA;
  static const enumtype TRANGE =
    TAType_enumtype_TRANGE;
  static const enumtype TRIMA =
    TAType_enumtype_TRIMA;
  static const enumtype TRIX =
    TAType_enumtype_TRIX;
  static const enumtype TSF =
    TAType_enumtype_TSF;
  static const enumtype TYPPRICE =
    TAType_enumtype_TYPPRICE;
  static const enumtype ULTOSC =
    TAType_enumtype_ULTOSC;
  static const enumtype VAR =
    TAType_enumtype_VAR;
  static const enumtype WCLPRICE =
    TAType_enumtype_WCLPRICE;
  static const enumtype WILLR =
    TAType_enumtype_WILLR;
  static const enumtype WMA =
    TAType_enumtype_WMA;
  static const enumtype DMI =
    TAType_enumtype_DMI;
  static inline bool enumtype_IsValid(int value) {
    return TAType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TAType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TAType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TAType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TAType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TAType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TAType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TAType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TAType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TARetCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TARetCode) */ {
 public:
  TARetCode();
  virtual ~TARetCode();

  TARetCode(const TARetCode& from);

  inline TARetCode& operator=(const TARetCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TARetCode& default_instance();

  void Swap(TARetCode* other);

  // implements Message ----------------------------------------------

  inline TARetCode* New() const { return New(NULL); }

  TARetCode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TARetCode& from);
  void MergeFrom(const TARetCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TARetCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TARetCode_enumtype enumtype;
  static const enumtype SUCCESS =
    TARetCode_enumtype_SUCCESS;
  static const enumtype LIB_NOT_INITIALIZE =
    TARetCode_enumtype_LIB_NOT_INITIALIZE;
  static const enumtype BAD_PARAM =
    TARetCode_enumtype_BAD_PARAM;
  static const enumtype ALLOC_ERR =
    TARetCode_enumtype_ALLOC_ERR;
  static const enumtype GROUP_NOT_FOUND =
    TARetCode_enumtype_GROUP_NOT_FOUND;
  static const enumtype FUNC_NOT_FOUND =
    TARetCode_enumtype_FUNC_NOT_FOUND;
  static const enumtype INVALID_HANDLE =
    TARetCode_enumtype_INVALID_HANDLE;
  static const enumtype INVALID_PARAM_HOLDER =
    TARetCode_enumtype_INVALID_PARAM_HOLDER;
  static const enumtype INVALID_PARAM_HOLDER_TYPE =
    TARetCode_enumtype_INVALID_PARAM_HOLDER_TYPE;
  static const enumtype INVALID_PARAM_FUNCTION =
    TARetCode_enumtype_INVALID_PARAM_FUNCTION;
  static const enumtype INPUT_NOT_ALL_INITIALIZE =
    TARetCode_enumtype_INPUT_NOT_ALL_INITIALIZE;
  static const enumtype OUTPUT_NOT_ALL_INITIALIZE =
    TARetCode_enumtype_OUTPUT_NOT_ALL_INITIALIZE;
  static const enumtype OUT_OF_RANGE_START_INDEX =
    TARetCode_enumtype_OUT_OF_RANGE_START_INDEX;
  static const enumtype OUT_OF_RANGE_END_INDEX =
    TARetCode_enumtype_OUT_OF_RANGE_END_INDEX;
  static const enumtype INVALID_LIST_TYPE =
    TARetCode_enumtype_INVALID_LIST_TYPE;
  static const enumtype BAD_OBJECT =
    TARetCode_enumtype_BAD_OBJECT;
  static const enumtype NOT_SUPPORTED =
    TARetCode_enumtype_NOT_SUPPORTED;
  static const enumtype INTERNAL_ERROR =
    TARetCode_enumtype_INTERNAL_ERROR;
  static const enumtype UNKNOWN_ERR =
    TARetCode_enumtype_UNKNOWN_ERR;
  static inline bool enumtype_IsValid(int value) {
    return TARetCode_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TARetCode_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TARetCode_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TARetCode_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TARetCode_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TARetCode_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TARetCode_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TARetCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TARetCode* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TAMAType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TAMAType) */ {
 public:
  TAMAType();
  virtual ~TAMAType();

  TAMAType(const TAMAType& from);

  inline TAMAType& operator=(const TAMAType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAMAType& default_instance();

  void Swap(TAMAType* other);

  // implements Message ----------------------------------------------

  inline TAMAType* New() const { return New(NULL); }

  TAMAType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAMAType& from);
  void MergeFrom(const TAMAType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TAMAType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TAMAType_enumtype enumtype;
  static const enumtype SMA =
    TAMAType_enumtype_SMA;
  static const enumtype EMA =
    TAMAType_enumtype_EMA;
  static const enumtype WMA =
    TAMAType_enumtype_WMA;
  static const enumtype DEMA =
    TAMAType_enumtype_DEMA;
  static const enumtype TEMA =
    TAMAType_enumtype_TEMA;
  static const enumtype TRIMA =
    TAMAType_enumtype_TRIMA;
  static const enumtype KAMA =
    TAMAType_enumtype_KAMA;
  static const enumtype MAMA =
    TAMAType_enumtype_MAMA;
  static const enumtype T3 =
    TAMAType_enumtype_T3;
  static inline bool enumtype_IsValid(int value) {
    return TAMAType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TAMAType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TAMAType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TAMAType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TAMAType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TAMAType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TAMAType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TAMAType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TAMAType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TAFuncUnstId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TAFuncUnstId) */ {
 public:
  TAFuncUnstId();
  virtual ~TAFuncUnstId();

  TAFuncUnstId(const TAFuncUnstId& from);

  inline TAFuncUnstId& operator=(const TAFuncUnstId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAFuncUnstId& default_instance();

  void Swap(TAFuncUnstId* other);

  // implements Message ----------------------------------------------

  inline TAFuncUnstId* New() const { return New(NULL); }

  TAFuncUnstId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAFuncUnstId& from);
  void MergeFrom(const TAFuncUnstId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TAFuncUnstId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TAFuncUnstId_enumtype enumtype;
  static const enumtype FUNC_UNST_NONE =
    TAFuncUnstId_enumtype_FUNC_UNST_NONE;
  static const enumtype FUNC_UNST_ADX =
    TAFuncUnstId_enumtype_FUNC_UNST_ADX;
  static const enumtype FUNC_UNST_ADXR =
    TAFuncUnstId_enumtype_FUNC_UNST_ADXR;
  static const enumtype FUNC_UNST_ATR =
    TAFuncUnstId_enumtype_FUNC_UNST_ATR;
  static const enumtype FUNC_UNST_CMO =
    TAFuncUnstId_enumtype_FUNC_UNST_CMO;
  static const enumtype FUNC_UNST_DX =
    TAFuncUnstId_enumtype_FUNC_UNST_DX;
  static const enumtype FUNC_UNST_EMA =
    TAFuncUnstId_enumtype_FUNC_UNST_EMA;
  static const enumtype FUNC_UNST_HT_DCPERIOD =
    TAFuncUnstId_enumtype_FUNC_UNST_HT_DCPERIOD;
  static const enumtype FUNC_UNST_HT_DCPHASE =
    TAFuncUnstId_enumtype_FUNC_UNST_HT_DCPHASE;
  static const enumtype FUNC_UNST_HT_PHASOR =
    TAFuncUnstId_enumtype_FUNC_UNST_HT_PHASOR;
  static const enumtype FUNC_UNST_HT_SINE =
    TAFuncUnstId_enumtype_FUNC_UNST_HT_SINE;
  static const enumtype FUNC_UNST_HT_TRENDLINE =
    TAFuncUnstId_enumtype_FUNC_UNST_HT_TRENDLINE;
  static const enumtype FUNC_UNST_HT_TRENDMODE =
    TAFuncUnstId_enumtype_FUNC_UNST_HT_TRENDMODE;
  static const enumtype FUNC_UNST_KAMA =
    TAFuncUnstId_enumtype_FUNC_UNST_KAMA;
  static const enumtype FUNC_UNST_MAMA =
    TAFuncUnstId_enumtype_FUNC_UNST_MAMA;
  static const enumtype FUNC_UNST_MFI =
    TAFuncUnstId_enumtype_FUNC_UNST_MFI;
  static const enumtype FUNC_UNST_MINUS_DI =
    TAFuncUnstId_enumtype_FUNC_UNST_MINUS_DI;
  static const enumtype FUNC_UNST_MINUS_DM =
    TAFuncUnstId_enumtype_FUNC_UNST_MINUS_DM;
  static const enumtype FUNC_UNST_NATR =
    TAFuncUnstId_enumtype_FUNC_UNST_NATR;
  static const enumtype FUNC_UNST_PLUS_DI =
    TAFuncUnstId_enumtype_FUNC_UNST_PLUS_DI;
  static const enumtype FUNC_UNST_PLUS_DM =
    TAFuncUnstId_enumtype_FUNC_UNST_PLUS_DM;
  static const enumtype FUNC_UNST_RSI =
    TAFuncUnstId_enumtype_FUNC_UNST_RSI;
  static const enumtype FUNC_UNST_STOCHRSI =
    TAFuncUnstId_enumtype_FUNC_UNST_STOCHRSI;
  static const enumtype FUNC_UNST_T3 =
    TAFuncUnstId_enumtype_FUNC_UNST_T3;
  static const enumtype FUNC_UNST_ALL =
    TAFuncUnstId_enumtype_FUNC_UNST_ALL;
  static inline bool enumtype_IsValid(int value) {
    return TAFuncUnstId_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TAFuncUnstId_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TAFuncUnstId_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TAFuncUnstId_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TAFuncUnstId_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TAFuncUnstId_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TAFuncUnstId_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TAFuncUnstId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TAFuncUnstId* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TARangeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TARangeType) */ {
 public:
  TARangeType();
  virtual ~TARangeType();

  TARangeType(const TARangeType& from);

  inline TARangeType& operator=(const TARangeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TARangeType& default_instance();

  void Swap(TARangeType* other);

  // implements Message ----------------------------------------------

  inline TARangeType* New() const { return New(NULL); }

  TARangeType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TARangeType& from);
  void MergeFrom(const TARangeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TARangeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TARangeType_enumtype enumtype;
  static const enumtype RealBody =
    TARangeType_enumtype_RealBody;
  static const enumtype HighLow =
    TARangeType_enumtype_HighLow;
  static const enumtype Shadows =
    TARangeType_enumtype_Shadows;
  static inline bool enumtype_IsValid(int value) {
    return TARangeType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TARangeType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TARangeType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TARangeType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TARangeType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TARangeType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TARangeType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TARangeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TARangeType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TACandleSettingType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TACandleSettingType) */ {
 public:
  TACandleSettingType();
  virtual ~TACandleSettingType();

  TACandleSettingType(const TACandleSettingType& from);

  inline TACandleSettingType& operator=(const TACandleSettingType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TACandleSettingType& default_instance();

  void Swap(TACandleSettingType* other);

  // implements Message ----------------------------------------------

  inline TACandleSettingType* New() const { return New(NULL); }

  TACandleSettingType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TACandleSettingType& from);
  void MergeFrom(const TACandleSettingType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TACandleSettingType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TACandleSettingType_enumtype enumtype;
  static const enumtype BodyLong =
    TACandleSettingType_enumtype_BodyLong;
  static const enumtype BodyVeryLong =
    TACandleSettingType_enumtype_BodyVeryLong;
  static const enumtype BodyShort =
    TACandleSettingType_enumtype_BodyShort;
  static const enumtype BodyDoji =
    TACandleSettingType_enumtype_BodyDoji;
  static const enumtype ShadowLong =
    TACandleSettingType_enumtype_ShadowLong;
  static const enumtype ShadowVeryLong =
    TACandleSettingType_enumtype_ShadowVeryLong;
  static const enumtype ShadowShort =
    TACandleSettingType_enumtype_ShadowShort;
  static const enumtype ShadowVeryShort =
    TACandleSettingType_enumtype_ShadowVeryShort;
  static const enumtype Near =
    TACandleSettingType_enumtype_Near;
  static const enumtype Far =
    TACandleSettingType_enumtype_Far;
  static const enumtype Equal =
    TACandleSettingType_enumtype_Equal;
  static const enumtype AllCandleSettings =
    TACandleSettingType_enumtype_AllCandleSettings;
  static inline bool enumtype_IsValid(int value) {
    return TACandleSettingType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TACandleSettingType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TACandleSettingType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TACandleSettingType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TACandleSettingType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TACandleSettingType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TACandleSettingType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TACandleSettingType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TACandleSettingType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API DateTimeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.DateTimeType) */ {
 public:
  DateTimeType();
  virtual ~DateTimeType();

  DateTimeType(const DateTimeType& from);

  inline DateTimeType& operator=(const DateTimeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DateTimeType& default_instance();

  void Swap(DateTimeType* other);

  // implements Message ----------------------------------------------

  inline DateTimeType* New() const { return New(NULL); }

  DateTimeType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DateTimeType& from);
  void MergeFrom(const DateTimeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DateTimeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DateTimeType_enumtype enumtype;
  static const enumtype UTS =
    DateTimeType_enumtype_UTS;
  static const enumtype NET =
    DateTimeType_enumtype_NET;
  static inline bool enumtype_IsValid(int value) {
    return DateTimeType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    DateTimeType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    DateTimeType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    DateTimeType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return DateTimeType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return DateTimeType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return DateTimeType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.DateTimeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static DateTimeType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API DataType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.DataType) */ {
 public:
  DataType();
  virtual ~DataType();

  DataType(const DataType& from);

  inline DataType& operator=(const DataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataType& default_instance();

  void Swap(DataType* other);

  // implements Message ----------------------------------------------

  inline DataType* New() const { return New(NULL); }

  DataType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataType& from);
  void MergeFrom(const DataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataType_enumtype enumtype;
  static const enumtype String =
    DataType_enumtype_String;
  static const enumtype Int32 =
    DataType_enumtype_Int32;
  static const enumtype Int64 =
    DataType_enumtype_Int64;
  static const enumtype Double =
    DataType_enumtype_Double;
  static inline bool enumtype_IsValid(int value) {
    return DataType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    DataType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    DataType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    DataType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return DataType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return DataType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return DataType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.DataType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static DataType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OpenCloseFlag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OpenCloseFlag) */ {
 public:
  OpenCloseFlag();
  virtual ~OpenCloseFlag();

  OpenCloseFlag(const OpenCloseFlag& from);

  inline OpenCloseFlag& operator=(const OpenCloseFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenCloseFlag& default_instance();

  void Swap(OpenCloseFlag* other);

  // implements Message ----------------------------------------------

  inline OpenCloseFlag* New() const { return New(NULL); }

  OpenCloseFlag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenCloseFlag& from);
  void MergeFrom(const OpenCloseFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenCloseFlag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OpenCloseFlag_enumtype enumtype;
  static const enumtype Unknown =
    OpenCloseFlag_enumtype_Unknown;
  static const enumtype Open =
    OpenCloseFlag_enumtype_Open;
  static const enumtype Close =
    OpenCloseFlag_enumtype_Close;
  static const enumtype ForceClose =
    OpenCloseFlag_enumtype_ForceClose;
  static const enumtype CloseToday =
    OpenCloseFlag_enumtype_CloseToday;
  static const enumtype CloseYesterday =
    OpenCloseFlag_enumtype_CloseYesterday;
  static const enumtype ForceOff =
    OpenCloseFlag_enumtype_ForceOff;
  static const enumtype LocalForceClose =
    OpenCloseFlag_enumtype_LocalForceClose;
  static const enumtype OpenToday =
    OpenCloseFlag_enumtype_OpenToday;
  static const enumtype OpenYesterday =
    OpenCloseFlag_enumtype_OpenYesterday;
  static inline bool enumtype_IsValid(int value) {
    return OpenCloseFlag_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OpenCloseFlag_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OpenCloseFlag_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OpenCloseFlag_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OpenCloseFlag_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OpenCloseFlag_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OpenCloseFlag_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OpenCloseFlag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OpenCloseFlag* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OCFlagAutoType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OCFlagAutoType) */ {
 public:
  OCFlagAutoType();
  virtual ~OCFlagAutoType();

  OCFlagAutoType(const OCFlagAutoType& from);

  inline OCFlagAutoType& operator=(const OCFlagAutoType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OCFlagAutoType& default_instance();

  void Swap(OCFlagAutoType* other);

  // implements Message ----------------------------------------------

  inline OCFlagAutoType* New() const { return New(NULL); }

  OCFlagAutoType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OCFlagAutoType& from);
  void MergeFrom(const OCFlagAutoType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OCFlagAutoType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OCFlagAutoType_enumtype enumtype;
  static const enumtype Unknown =
    OCFlagAutoType_enumtype_Unknown;
  static const enumtype YtdOnly =
    OCFlagAutoType_enumtype_YtdOnly;
  static const enumtype TdyOnly =
    OCFlagAutoType_enumtype_TdyOnly;
  static inline bool enumtype_IsValid(int value) {
    return OCFlagAutoType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OCFlagAutoType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OCFlagAutoType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OCFlagAutoType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OCFlagAutoType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OCFlagAutoType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OCFlagAutoType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OCFlagAutoType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OCFlagAutoType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API MktDataChgType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.MktDataChgType) */ {
 public:
  MktDataChgType();
  virtual ~MktDataChgType();

  MktDataChgType(const MktDataChgType& from);

  inline MktDataChgType& operator=(const MktDataChgType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MktDataChgType& default_instance();

  void Swap(MktDataChgType* other);

  // implements Message ----------------------------------------------

  inline MktDataChgType* New() const { return New(NULL); }

  MktDataChgType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MktDataChgType& from);
  void MergeFrom(const MktDataChgType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MktDataChgType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MktDataChgType_enumtype enumtype;
  static const enumtype Unknown =
    MktDataChgType_enumtype_Unknown;
  static const enumtype BestPxChged =
    MktDataChgType_enumtype_BestPxChged;
  static const enumtype BestSzChged =
    MktDataChgType_enumtype_BestSzChged;
  static inline bool enumtype_IsValid(int value) {
    return MktDataChgType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MktDataChgType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MktDataChgType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MktDataChgType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MktDataChgType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MktDataChgType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MktDataChgType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.MktDataChgType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static MktDataChgType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API InstrEventType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.InstrEventType) */ {
 public:
  InstrEventType();
  virtual ~InstrEventType();

  InstrEventType(const InstrEventType& from);

  inline InstrEventType& operator=(const InstrEventType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrEventType& default_instance();

  void Swap(InstrEventType* other);

  // implements Message ----------------------------------------------

  inline InstrEventType* New() const { return New(NULL); }

  InstrEventType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstrEventType& from);
  void MergeFrom(const InstrEventType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InstrEventType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InstrEventType_enumtype enumtype;
  static const enumtype Unknown =
    InstrEventType_enumtype_Unknown;
  static const enumtype MktPxChged =
    InstrEventType_enumtype_MktPxChged;
  static const enumtype MktSzChged =
    InstrEventType_enumtype_MktSzChged;
  static const enumtype OptMktChged =
    InstrEventType_enumtype_OptMktChged;
  static const enumtype OrderSent =
    InstrEventType_enumtype_OrderSent;
  static const enumtype OrderSentRejected =
    InstrEventType_enumtype_OrderSentRejected;
  static const enumtype OrderCnf =
    InstrEventType_enumtype_OrderCnf;
  static const enumtype OrderCxlSent =
    InstrEventType_enumtype_OrderCxlSent;
  static const enumtype OrderCxlRejected =
    InstrEventType_enumtype_OrderCxlRejected;
  static const enumtype OrderCxled =
    InstrEventType_enumtype_OrderCxled;
  static const enumtype OrderFilled =
    InstrEventType_enumtype_OrderFilled;
  static const enumtype OrderAllFilled =
    InstrEventType_enumtype_OrderAllFilled;
  static const enumtype NewBar =
    InstrEventType_enumtype_NewBar;
  static const enumtype Timer =
    InstrEventType_enumtype_Timer;
  static const enumtype Session =
    InstrEventType_enumtype_Session;
  static inline bool enumtype_IsValid(int value) {
    return InstrEventType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    InstrEventType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    InstrEventType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    InstrEventType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return InstrEventType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return InstrEventType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return InstrEventType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.InstrEventType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static InstrEventType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OrderQuoteStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OrderQuoteStatus) */ {
 public:
  OrderQuoteStatus();
  virtual ~OrderQuoteStatus();

  OrderQuoteStatus(const OrderQuoteStatus& from);

  inline OrderQuoteStatus& operator=(const OrderQuoteStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderQuoteStatus& default_instance();

  void Swap(OrderQuoteStatus* other);

  // implements Message ----------------------------------------------

  inline OrderQuoteStatus* New() const { return New(NULL); }

  OrderQuoteStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderQuoteStatus& from);
  void MergeFrom(const OrderQuoteStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OrderQuoteStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OrderQuoteStatus_enumtype enumtype;
  static const enumtype Unknown =
    OrderQuoteStatus_enumtype_Unknown;
  static const enumtype Sent =
    OrderQuoteStatus_enumtype_Sent;
  static const enumtype SentRejected =
    OrderQuoteStatus_enumtype_SentRejected;
  static const enumtype Cnf =
    OrderQuoteStatus_enumtype_Cnf;
  static const enumtype CxlSent =
    OrderQuoteStatus_enumtype_CxlSent;
  static const enumtype CxlRejected =
    OrderQuoteStatus_enumtype_CxlRejected;
  static const enumtype Cxled =
    OrderQuoteStatus_enumtype_Cxled;
  static const enumtype PartialFilled =
    OrderQuoteStatus_enumtype_PartialFilled;
  static const enumtype AllFilled =
    OrderQuoteStatus_enumtype_AllFilled;
  static const enumtype Finished =
    OrderQuoteStatus_enumtype_Finished;
  static const enumtype IsQuote =
    OrderQuoteStatus_enumtype_IsQuote;
  static inline bool enumtype_IsValid(int value) {
    return OrderQuoteStatus_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OrderQuoteStatus_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OrderQuoteStatus_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OrderQuoteStatus_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OrderQuoteStatus_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OrderQuoteStatus_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OrderQuoteStatus_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OrderQuoteStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OrderQuoteStatus* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OrderQuoteTsType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OrderQuoteTsType) */ {
 public:
  OrderQuoteTsType();
  virtual ~OrderQuoteTsType();

  OrderQuoteTsType(const OrderQuoteTsType& from);

  inline OrderQuoteTsType& operator=(const OrderQuoteTsType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderQuoteTsType& default_instance();

  void Swap(OrderQuoteTsType* other);

  // implements Message ----------------------------------------------

  inline OrderQuoteTsType* New() const { return New(NULL); }

  OrderQuoteTsType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderQuoteTsType& from);
  void MergeFrom(const OrderQuoteTsType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OrderQuoteTsType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OrderQuoteTsType_enumtype enumtype;
  static const enumtype TsNone =
    OrderQuoteTsType_enumtype_TsNone;
  static const enumtype TsSent =
    OrderQuoteTsType_enumtype_TsSent;
  static const enumtype TsSentRejected =
    OrderQuoteTsType_enumtype_TsSentRejected;
  static const enumtype TsCnf =
    OrderQuoteTsType_enumtype_TsCnf;
  static const enumtype TsCxlSent =
    OrderQuoteTsType_enumtype_TsCxlSent;
  static const enumtype TsCxlRejected =
    OrderQuoteTsType_enumtype_TsCxlRejected;
  static const enumtype TsFinished =
    OrderQuoteTsType_enumtype_TsFinished;
  static inline bool enumtype_IsValid(int value) {
    return OrderQuoteTsType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OrderQuoteTsType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OrderQuoteTsType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OrderQuoteTsType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OrderQuoteTsType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OrderQuoteTsType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OrderQuoteTsType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OrderQuoteTsType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OrderQuoteTsType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API OrderQuoteReasonType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.OrderQuoteReasonType) */ {
 public:
  OrderQuoteReasonType();
  virtual ~OrderQuoteReasonType();

  OrderQuoteReasonType(const OrderQuoteReasonType& from);

  inline OrderQuoteReasonType& operator=(const OrderQuoteReasonType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderQuoteReasonType& default_instance();

  void Swap(OrderQuoteReasonType* other);

  // implements Message ----------------------------------------------

  inline OrderQuoteReasonType* New() const { return New(NULL); }

  OrderQuoteReasonType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderQuoteReasonType& from);
  void MergeFrom(const OrderQuoteReasonType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OrderQuoteReasonType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OrderQuoteReasonType_enumtype enumtype;
  static const enumtype Unknown =
    OrderQuoteReasonType_enumtype_Unknown;
  static const enumtype BuyOpen =
    OrderQuoteReasonType_enumtype_BuyOpen;
  static const enumtype SellOpen =
    OrderQuoteReasonType_enumtype_SellOpen;
  static const enumtype BuyClose =
    OrderQuoteReasonType_enumtype_BuyClose;
  static const enumtype SellClose =
    OrderQuoteReasonType_enumtype_SellClose;
  static const enumtype Entry =
    OrderQuoteReasonType_enumtype_Entry;
  static const enumtype ProfitTaking =
    OrderQuoteReasonType_enumtype_ProfitTaking;
  static const enumtype Puke =
    OrderQuoteReasonType_enumtype_Puke;
  static const enumtype Rsp =
    OrderQuoteReasonType_enumtype_Rsp;
  static inline bool enumtype_IsValid(int value) {
    return OrderQuoteReasonType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    OrderQuoteReasonType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    OrderQuoteReasonType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    OrderQuoteReasonType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return OrderQuoteReasonType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return OrderQuoteReasonType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return OrderQuoteReasonType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.OrderQuoteReasonType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static OrderQuoteReasonType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API CurrPrevTempType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.CurrPrevTempType) */ {
 public:
  CurrPrevTempType();
  virtual ~CurrPrevTempType();

  CurrPrevTempType(const CurrPrevTempType& from);

  inline CurrPrevTempType& operator=(const CurrPrevTempType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrPrevTempType& default_instance();

  void Swap(CurrPrevTempType* other);

  // implements Message ----------------------------------------------

  inline CurrPrevTempType* New() const { return New(NULL); }

  CurrPrevTempType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrPrevTempType& from);
  void MergeFrom(const CurrPrevTempType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CurrPrevTempType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CurrPrevTempType_enumtype enumtype;
  static const enumtype Curr =
    CurrPrevTempType_enumtype_Curr;
  static const enumtype Prev =
    CurrPrevTempType_enumtype_Prev;
  static const enumtype Temp =
    CurrPrevTempType_enumtype_Temp;
  static inline bool enumtype_IsValid(int value) {
    return CurrPrevTempType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    CurrPrevTempType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    CurrPrevTempType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    CurrPrevTempType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return CurrPrevTempType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return CurrPrevTempType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return CurrPrevTempType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.CurrPrevTempType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static CurrPrevTempType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API VolCurveParamType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.VolCurveParamType) */ {
 public:
  VolCurveParamType();
  virtual ~VolCurveParamType();

  VolCurveParamType(const VolCurveParamType& from);

  inline VolCurveParamType& operator=(const VolCurveParamType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VolCurveParamType& default_instance();

  void Swap(VolCurveParamType* other);

  // implements Message ----------------------------------------------

  inline VolCurveParamType* New() const { return New(NULL); }

  VolCurveParamType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VolCurveParamType& from);
  void MergeFrom(const VolCurveParamType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VolCurveParamType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VolCurveParamType_enumtype enumtype;
  static const enumtype AtmVolRef =
    VolCurveParamType_enumtype_AtmVolRef;
  static const enumtype SlopeRef =
    VolCurveParamType_enumtype_SlopeRef;
  static const enumtype PutCurv =
    VolCurveParamType_enumtype_PutCurv;
  static const enumtype CallCurv =
    VolCurveParamType_enumtype_CallCurv;
  static const enumtype SSR =
    VolCurveParamType_enumtype_SSR;
  static const enumtype VCR =
    VolCurveParamType_enumtype_VCR;
  static const enumtype SCR =
    VolCurveParamType_enumtype_SCR;
  static const enumtype DownCut =
    VolCurveParamType_enumtype_DownCut;
  static const enumtype DownSm =
    VolCurveParamType_enumtype_DownSm;
  static const enumtype UpCut =
    VolCurveParamType_enumtype_UpCut;
  static const enumtype UpSm =
    VolCurveParamType_enumtype_UpSm;
  static const enumtype PriceCurr =
    VolCurveParamType_enumtype_PriceCurr;
  static const enumtype PriceRef =
    VolCurveParamType_enumtype_PriceRef;
  static const enumtype T =
    VolCurveParamType_enumtype_T;
  static const enumtype r =
    VolCurveParamType_enumtype_r;
  static const enumtype b =
    VolCurveParamType_enumtype_b;
  static inline bool enumtype_IsValid(int value) {
    return VolCurveParamType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    VolCurveParamType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    VolCurveParamType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    VolCurveParamType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return VolCurveParamType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return VolCurveParamType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return VolCurveParamType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.VolCurveParamType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static VolCurveParamType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API PyAT_OrderAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.PyAT_OrderAction) */ {
 public:
  PyAT_OrderAction();
  virtual ~PyAT_OrderAction();

  PyAT_OrderAction(const PyAT_OrderAction& from);

  inline PyAT_OrderAction& operator=(const PyAT_OrderAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PyAT_OrderAction& default_instance();

  void Swap(PyAT_OrderAction* other);

  // implements Message ----------------------------------------------

  inline PyAT_OrderAction* New() const { return New(NULL); }

  PyAT_OrderAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PyAT_OrderAction& from);
  void MergeFrom(const PyAT_OrderAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PyAT_OrderAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PyAT_OrderAction_enumtype enumtype;
  static const enumtype Unknown =
    PyAT_OrderAction_enumtype_Unknown;
  static const enumtype BUY =
    PyAT_OrderAction_enumtype_BUY;
  static const enumtype BUY_TO_COVER =
    PyAT_OrderAction_enumtype_BUY_TO_COVER;
  static const enumtype SELL =
    PyAT_OrderAction_enumtype_SELL;
  static const enumtype SELL_SHORT =
    PyAT_OrderAction_enumtype_SELL_SHORT;
  static inline bool enumtype_IsValid(int value) {
    return PyAT_OrderAction_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    PyAT_OrderAction_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    PyAT_OrderAction_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    PyAT_OrderAction_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return PyAT_OrderAction_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return PyAT_OrderAction_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return PyAT_OrderAction_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.PyAT_OrderAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static PyAT_OrderAction* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API PyAT_OrderState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.PyAT_OrderState) */ {
 public:
  PyAT_OrderState();
  virtual ~PyAT_OrderState();

  PyAT_OrderState(const PyAT_OrderState& from);

  inline PyAT_OrderState& operator=(const PyAT_OrderState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PyAT_OrderState& default_instance();

  void Swap(PyAT_OrderState* other);

  // implements Message ----------------------------------------------

  inline PyAT_OrderState* New() const { return New(NULL); }

  PyAT_OrderState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PyAT_OrderState& from);
  void MergeFrom(const PyAT_OrderState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PyAT_OrderState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PyAT_OrderState_enumtype enumtype;
  static const enumtype Unknown =
    PyAT_OrderState_enumtype_Unknown;
  static const enumtype INITIAL =
    PyAT_OrderState_enumtype_INITIAL;
  static const enumtype SUBMITTED =
    PyAT_OrderState_enumtype_SUBMITTED;
  static const enumtype ACCEPTED =
    PyAT_OrderState_enumtype_ACCEPTED;
  static const enumtype CANCELED =
    PyAT_OrderState_enumtype_CANCELED;
  static const enumtype PARTIALLY_FILLED =
    PyAT_OrderState_enumtype_PARTIALLY_FILLED;
  static const enumtype FILLED =
    PyAT_OrderState_enumtype_FILLED;
  static inline bool enumtype_IsValid(int value) {
    return PyAT_OrderState_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    PyAT_OrderState_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    PyAT_OrderState_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    PyAT_OrderState_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return PyAT_OrderState_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return PyAT_OrderState_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return PyAT_OrderState_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.PyAT_OrderState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static PyAT_OrderState* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API PyAT_OrderType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.PyAT_OrderType) */ {
 public:
  PyAT_OrderType();
  virtual ~PyAT_OrderType();

  PyAT_OrderType(const PyAT_OrderType& from);

  inline PyAT_OrderType& operator=(const PyAT_OrderType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PyAT_OrderType& default_instance();

  void Swap(PyAT_OrderType* other);

  // implements Message ----------------------------------------------

  inline PyAT_OrderType* New() const { return New(NULL); }

  PyAT_OrderType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PyAT_OrderType& from);
  void MergeFrom(const PyAT_OrderType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PyAT_OrderType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PyAT_OrderType_enumtype enumtype;
  static const enumtype Unknown =
    PyAT_OrderType_enumtype_Unknown;
  static const enumtype MARKET =
    PyAT_OrderType_enumtype_MARKET;
  static const enumtype LIMIT =
    PyAT_OrderType_enumtype_LIMIT;
  static const enumtype STOP =
    PyAT_OrderType_enumtype_STOP;
  static const enumtype STOP_LIMIT =
    PyAT_OrderType_enumtype_STOP_LIMIT;
  static const enumtype NEXT_CUSTOM_TYPE =
    PyAT_OrderType_enumtype_NEXT_CUSTOM_TYPE;
  static inline bool enumtype_IsValid(int value) {
    return PyAT_OrderType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    PyAT_OrderType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    PyAT_OrderType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    PyAT_OrderType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return PyAT_OrderType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return PyAT_OrderType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return PyAT_OrderType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.PyAT_OrderType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static PyAT_OrderType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API TagType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.TagType) */ {
 public:
  TagType();
  virtual ~TagType();

  TagType(const TagType& from);

  inline TagType& operator=(const TagType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagType& default_instance();

  void Swap(TagType* other);

  // implements Message ----------------------------------------------

  inline TagType* New() const { return New(NULL); }

  TagType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagType& from);
  void MergeFrom(const TagType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TagType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TagType_enumtype enumtype;
  static const enumtype Unknown =
    TagType_enumtype_Unknown;
  static const enumtype Account =
    TagType_enumtype_Account;
  static const enumtype AdvId =
    TagType_enumtype_AdvId;
  static const enumtype AdvRefID =
    TagType_enumtype_AdvRefID;
  static const enumtype AdvSide =
    TagType_enumtype_AdvSide;
  static const enumtype AdvTransType =
    TagType_enumtype_AdvTransType;
  static const enumtype AvgPx =
    TagType_enumtype_AvgPx;
  static const enumtype BeginSeqNo =
    TagType_enumtype_BeginSeqNo;
  static const enumtype BeginString =
    TagType_enumtype_BeginString;
  static const enumtype BodyLength =
    TagType_enumtype_BodyLength;
  static const enumtype CheckSum =
    TagType_enumtype_CheckSum;
  static const enumtype ClOrdID =
    TagType_enumtype_ClOrdID;
  static const enumtype Commission =
    TagType_enumtype_Commission;
  static const enumtype CommType =
    TagType_enumtype_CommType;
  static const enumtype CumQty =
    TagType_enumtype_CumQty;
  static const enumtype Currency =
    TagType_enumtype_Currency;
  static const enumtype EndSeqNo =
    TagType_enumtype_EndSeqNo;
  static const enumtype ExecID =
    TagType_enumtype_ExecID;
  static const enumtype ExecInst =
    TagType_enumtype_ExecInst;
  static const enumtype ExecRefID =
    TagType_enumtype_ExecRefID;
  static const enumtype HandlInst =
    TagType_enumtype_HandlInst;
  static const enumtype SecurityIDSource =
    TagType_enumtype_SecurityIDSource;
  static const enumtype IOIID =
    TagType_enumtype_IOIID;
  static const enumtype IOIQltyInd =
    TagType_enumtype_IOIQltyInd;
  static const enumtype IOIRefID =
    TagType_enumtype_IOIRefID;
  static const enumtype IOIQty =
    TagType_enumtype_IOIQty;
  static const enumtype IOITransType =
    TagType_enumtype_IOITransType;
  static const enumtype LastCapacity =
    TagType_enumtype_LastCapacity;
  static const enumtype LastMkt =
    TagType_enumtype_LastMkt;
  static const enumtype LastPx =
    TagType_enumtype_LastPx;
  static const enumtype LastQty =
    TagType_enumtype_LastQty;
  static const enumtype NoLinesOfText =
    TagType_enumtype_NoLinesOfText;
  static const enumtype MsgSeqNum =
    TagType_enumtype_MsgSeqNum;
  static const enumtype MsgType =
    TagType_enumtype_MsgType;
  static const enumtype NewSeqNo =
    TagType_enumtype_NewSeqNo;
  static const enumtype OrderID =
    TagType_enumtype_OrderID;
  static const enumtype OrderQty =
    TagType_enumtype_OrderQty;
  static const enumtype OrdStatus =
    TagType_enumtype_OrdStatus;
  static const enumtype OrdType =
    TagType_enumtype_OrdType;
  static const enumtype OrigClOrdID =
    TagType_enumtype_OrigClOrdID;
  static const enumtype OrigTime =
    TagType_enumtype_OrigTime;
  static const enumtype PossDupFlag =
    TagType_enumtype_PossDupFlag;
  static const enumtype Price =
    TagType_enumtype_Price;
  static const enumtype RefSeqNum =
    TagType_enumtype_RefSeqNum;
  static const enumtype SecurityID =
    TagType_enumtype_SecurityID;
  static const enumtype SenderCompID =
    TagType_enumtype_SenderCompID;
  static const enumtype SenderSubID =
    TagType_enumtype_SenderSubID;
  static const enumtype SendingTime =
    TagType_enumtype_SendingTime;
  static const enumtype Quantity =
    TagType_enumtype_Quantity;
  static const enumtype Side =
    TagType_enumtype_Side;
  static const enumtype Symbol =
    TagType_enumtype_Symbol;
  static const enumtype TargetCompID =
    TagType_enumtype_TargetCompID;
  static const enumtype TargetSubID =
    TagType_enumtype_TargetSubID;
  static const enumtype Text =
    TagType_enumtype_Text;
  static const enumtype TimeInForce =
    TagType_enumtype_TimeInForce;
  static const enumtype TransactTime =
    TagType_enumtype_TransactTime;
  static const enumtype Urgency =
    TagType_enumtype_Urgency;
  static const enumtype ValidUntilTime =
    TagType_enumtype_ValidUntilTime;
  static const enumtype SettlType =
    TagType_enumtype_SettlType;
  static const enumtype SettlDate =
    TagType_enumtype_SettlDate;
  static const enumtype SymbolSfx =
    TagType_enumtype_SymbolSfx;
  static const enumtype ListID =
    TagType_enumtype_ListID;
  static const enumtype ListSeqNo =
    TagType_enumtype_ListSeqNo;
  static const enumtype TotNoOrders =
    TagType_enumtype_TotNoOrders;
  static const enumtype ListExecInst =
    TagType_enumtype_ListExecInst;
  static const enumtype AllocID =
    TagType_enumtype_AllocID;
  static const enumtype AllocTransType =
    TagType_enumtype_AllocTransType;
  static const enumtype RefAllocID =
    TagType_enumtype_RefAllocID;
  static const enumtype NoOrders =
    TagType_enumtype_NoOrders;
  static const enumtype AvgPxPrecision =
    TagType_enumtype_AvgPxPrecision;
  static const enumtype TradeDate =
    TagType_enumtype_TradeDate;
  static const enumtype PositionEffect =
    TagType_enumtype_PositionEffect;
  static const enumtype NoAllocs =
    TagType_enumtype_NoAllocs;
  static const enumtype AllocAccount =
    TagType_enumtype_AllocAccount;
  static const enumtype AllocQty =
    TagType_enumtype_AllocQty;
  static const enumtype ProcessCode =
    TagType_enumtype_ProcessCode;
  static const enumtype NoRpts =
    TagType_enumtype_NoRpts;
  static const enumtype RptSeq =
    TagType_enumtype_RptSeq;
  static const enumtype CxlQty =
    TagType_enumtype_CxlQty;
  static const enumtype NoDlvyInst =
    TagType_enumtype_NoDlvyInst;
  static const enumtype AllocStatus =
    TagType_enumtype_AllocStatus;
  static const enumtype AllocRejCode =
    TagType_enumtype_AllocRejCode;
  static const enumtype Signature =
    TagType_enumtype_Signature;
  static const enumtype SecureDataLen =
    TagType_enumtype_SecureDataLen;
  static const enumtype SecureData =
    TagType_enumtype_SecureData;
  static const enumtype SignatureLength =
    TagType_enumtype_SignatureLength;
  static const enumtype EmailType =
    TagType_enumtype_EmailType;
  static const enumtype RawDataLength =
    TagType_enumtype_RawDataLength;
  static const enumtype RawData =
    TagType_enumtype_RawData;
  static const enumtype PossResend =
    TagType_enumtype_PossResend;
  static const enumtype EncryptMethod =
    TagType_enumtype_EncryptMethod;
  static const enumtype StopPx =
    TagType_enumtype_StopPx;
  static const enumtype ExDestination =
    TagType_enumtype_ExDestination;
  static const enumtype CxlRejReason =
    TagType_enumtype_CxlRejReason;
  static const enumtype OrdRejReason =
    TagType_enumtype_OrdRejReason;
  static const enumtype IOIQualifier =
    TagType_enumtype_IOIQualifier;
  static const enumtype Issuer =
    TagType_enumtype_Issuer;
  static const enumtype SecurityDesc =
    TagType_enumtype_SecurityDesc;
  static const enumtype HeartBtInt =
    TagType_enumtype_HeartBtInt;
  static const enumtype MinQty =
    TagType_enumtype_MinQty;
  static const enumtype MaxFloor =
    TagType_enumtype_MaxFloor;
  static const enumtype TestReqID =
    TagType_enumtype_TestReqID;
  static const enumtype ReportToExch =
    TagType_enumtype_ReportToExch;
  static const enumtype LocateReqd =
    TagType_enumtype_LocateReqd;
  static const enumtype OnBehalfOfCompID =
    TagType_enumtype_OnBehalfOfCompID;
  static const enumtype OnBehalfOfSubID =
    TagType_enumtype_OnBehalfOfSubID;
  static const enumtype QuoteID =
    TagType_enumtype_QuoteID;
  static const enumtype NetMoney =
    TagType_enumtype_NetMoney;
  static const enumtype SettlCurrAmt =
    TagType_enumtype_SettlCurrAmt;
  static const enumtype SettlCurrency =
    TagType_enumtype_SettlCurrency;
  static const enumtype ForexReq =
    TagType_enumtype_ForexReq;
  static const enumtype OrigSendingTime =
    TagType_enumtype_OrigSendingTime;
  static const enumtype GapFillFlag =
    TagType_enumtype_GapFillFlag;
  static const enumtype NoExecs =
    TagType_enumtype_NoExecs;
  static const enumtype ExpireTime =
    TagType_enumtype_ExpireTime;
  static const enumtype DKReason =
    TagType_enumtype_DKReason;
  static const enumtype DeliverToCompID =
    TagType_enumtype_DeliverToCompID;
  static const enumtype DeliverToSubID =
    TagType_enumtype_DeliverToSubID;
  static const enumtype IOINaturalFlag =
    TagType_enumtype_IOINaturalFlag;
  static const enumtype QuoteReqID =
    TagType_enumtype_QuoteReqID;
  static const enumtype BidPx =
    TagType_enumtype_BidPx;
  static const enumtype OfferPx =
    TagType_enumtype_OfferPx;
  static const enumtype BidSize =
    TagType_enumtype_BidSize;
  static const enumtype OfferSize =
    TagType_enumtype_OfferSize;
  static const enumtype NoMiscFees =
    TagType_enumtype_NoMiscFees;
  static const enumtype MiscFeeAmt =
    TagType_enumtype_MiscFeeAmt;
  static const enumtype MiscFeeCurr =
    TagType_enumtype_MiscFeeCurr;
  static const enumtype MiscFeeType =
    TagType_enumtype_MiscFeeType;
  static const enumtype PrevClosePx =
    TagType_enumtype_PrevClosePx;
  static const enumtype ResetSeqNumFlag =
    TagType_enumtype_ResetSeqNumFlag;
  static const enumtype SenderLocationID =
    TagType_enumtype_SenderLocationID;
  static const enumtype TargetLocationID =
    TagType_enumtype_TargetLocationID;
  static const enumtype OnBehalfOfLocationID =
    TagType_enumtype_OnBehalfOfLocationID;
  static const enumtype DeliverToLocationID =
    TagType_enumtype_DeliverToLocationID;
  static const enumtype NoRelatedSym =
    TagType_enumtype_NoRelatedSym;
  static const enumtype Subject =
    TagType_enumtype_Subject;
  static const enumtype Headline =
    TagType_enumtype_Headline;
  static const enumtype URLLink =
    TagType_enumtype_URLLink;
  static const enumtype ExecType =
    TagType_enumtype_ExecType;
  static const enumtype LeavesQty =
    TagType_enumtype_LeavesQty;
  static const enumtype CashOrderQty =
    TagType_enumtype_CashOrderQty;
  static const enumtype AllocAvgPx =
    TagType_enumtype_AllocAvgPx;
  static const enumtype AllocNetMoney =
    TagType_enumtype_AllocNetMoney;
  static const enumtype SettlCurrFxRate =
    TagType_enumtype_SettlCurrFxRate;
  static const enumtype SettlCurrFxRateCalc =
    TagType_enumtype_SettlCurrFxRateCalc;
  static const enumtype NumDaysInterest =
    TagType_enumtype_NumDaysInterest;
  static const enumtype AccruedInterestRate =
    TagType_enumtype_AccruedInterestRate;
  static const enumtype AccruedInterestAmt =
    TagType_enumtype_AccruedInterestAmt;
  static const enumtype SettlInstMode =
    TagType_enumtype_SettlInstMode;
  static const enumtype AllocText =
    TagType_enumtype_AllocText;
  static const enumtype SettlInstID =
    TagType_enumtype_SettlInstID;
  static const enumtype SettlInstTransType =
    TagType_enumtype_SettlInstTransType;
  static const enumtype EmailThreadID =
    TagType_enumtype_EmailThreadID;
  static const enumtype SettlInstSource =
    TagType_enumtype_SettlInstSource;
  static const enumtype SecurityType =
    TagType_enumtype_SecurityType;
  static const enumtype EffectiveTime =
    TagType_enumtype_EffectiveTime;
  static const enumtype StandInstDbType =
    TagType_enumtype_StandInstDbType;
  static const enumtype StandInstDbName =
    TagType_enumtype_StandInstDbName;
  static const enumtype StandInstDbID =
    TagType_enumtype_StandInstDbID;
  static const enumtype SettlDeliveryType =
    TagType_enumtype_SettlDeliveryType;
  static const enumtype BidSpotRate =
    TagType_enumtype_BidSpotRate;
  static const enumtype BidForwardPoints =
    TagType_enumtype_BidForwardPoints;
  static const enumtype OfferSpotRate =
    TagType_enumtype_OfferSpotRate;
  static const enumtype OfferForwardPoints =
    TagType_enumtype_OfferForwardPoints;
  static const enumtype OrderQty2 =
    TagType_enumtype_OrderQty2;
  static const enumtype SettlDate2 =
    TagType_enumtype_SettlDate2;
  static const enumtype LastSpotRate =
    TagType_enumtype_LastSpotRate;
  static const enumtype LastForwardPoints =
    TagType_enumtype_LastForwardPoints;
  static const enumtype AllocLinkID =
    TagType_enumtype_AllocLinkID;
  static const enumtype AllocLinkType =
    TagType_enumtype_AllocLinkType;
  static const enumtype SecondaryOrderID =
    TagType_enumtype_SecondaryOrderID;
  static const enumtype NoIOIQualifiers =
    TagType_enumtype_NoIOIQualifiers;
  static const enumtype MaturityMonthYear =
    TagType_enumtype_MaturityMonthYear;
  static const enumtype PutOrCall =
    TagType_enumtype_PutOrCall;
  static const enumtype StrikePrice =
    TagType_enumtype_StrikePrice;
  static const enumtype CoveredOrUncovered =
    TagType_enumtype_CoveredOrUncovered;
  static const enumtype OptAttribute =
    TagType_enumtype_OptAttribute;
  static const enumtype SecurityExchange =
    TagType_enumtype_SecurityExchange;
  static const enumtype NotifyBrokerOfCredit =
    TagType_enumtype_NotifyBrokerOfCredit;
  static const enumtype AllocHandlInst =
    TagType_enumtype_AllocHandlInst;
  static const enumtype MaxShow =
    TagType_enumtype_MaxShow;
  static const enumtype PegOffsetValue =
    TagType_enumtype_PegOffsetValue;
  static const enumtype XmlDataLen =
    TagType_enumtype_XmlDataLen;
  static const enumtype XmlData =
    TagType_enumtype_XmlData;
  static const enumtype SettlInstRefID =
    TagType_enumtype_SettlInstRefID;
  static const enumtype NoRoutingIDs =
    TagType_enumtype_NoRoutingIDs;
  static const enumtype RoutingType =
    TagType_enumtype_RoutingType;
  static const enumtype RoutingID =
    TagType_enumtype_RoutingID;
  static const enumtype Spread =
    TagType_enumtype_Spread;
  static const enumtype BenchmarkCurveCurrency =
    TagType_enumtype_BenchmarkCurveCurrency;
  static const enumtype BenchmarkCurveName =
    TagType_enumtype_BenchmarkCurveName;
  static const enumtype BenchmarkCurvePoint =
    TagType_enumtype_BenchmarkCurvePoint;
  static const enumtype CouponRate =
    TagType_enumtype_CouponRate;
  static const enumtype CouponPaymentDate =
    TagType_enumtype_CouponPaymentDate;
  static const enumtype IssueDate =
    TagType_enumtype_IssueDate;
  static const enumtype RepurchaseTerm =
    TagType_enumtype_RepurchaseTerm;
  static const enumtype RepurchaseRate =
    TagType_enumtype_RepurchaseRate;
  static const enumtype Factor =
    TagType_enumtype_Factor;
  static const enumtype TradeOriginationDate =
    TagType_enumtype_TradeOriginationDate;
  static const enumtype ExDate =
    TagType_enumtype_ExDate;
  static const enumtype ContractMultiplier =
    TagType_enumtype_ContractMultiplier;
  static const enumtype NoStipulations =
    TagType_enumtype_NoStipulations;
  static const enumtype StipulationType =
    TagType_enumtype_StipulationType;
  static const enumtype StipulationValue =
    TagType_enumtype_StipulationValue;
  static const enumtype YieldType =
    TagType_enumtype_YieldType;
  static const enumtype Yield =
    TagType_enumtype_Yield;
  static const enumtype TotalTakedown =
    TagType_enumtype_TotalTakedown;
  static const enumtype Concession =
    TagType_enumtype_Concession;
  static const enumtype RepoCollateralSecurityType =
    TagType_enumtype_RepoCollateralSecurityType;
  static const enumtype RedemptionDate =
    TagType_enumtype_RedemptionDate;
  static const enumtype UnderlyingCouponPaymentDate =
    TagType_enumtype_UnderlyingCouponPaymentDate;
  static const enumtype UnderlyingIssueDate =
    TagType_enumtype_UnderlyingIssueDate;
  static const enumtype UnderlyingRepoCollateralSecurityType =
    TagType_enumtype_UnderlyingRepoCollateralSecurityType;
  static const enumtype UnderlyingRepurchaseTerm =
    TagType_enumtype_UnderlyingRepurchaseTerm;
  static const enumtype UnderlyingRepurchaseRate =
    TagType_enumtype_UnderlyingRepurchaseRate;
  static const enumtype UnderlyingFactor =
    TagType_enumtype_UnderlyingFactor;
  static const enumtype UnderlyingRedemptionDate =
    TagType_enumtype_UnderlyingRedemptionDate;
  static const enumtype LegCouponPaymentDate =
    TagType_enumtype_LegCouponPaymentDate;
  static const enumtype LegIssueDate =
    TagType_enumtype_LegIssueDate;
  static const enumtype LegRepoCollateralSecurityType =
    TagType_enumtype_LegRepoCollateralSecurityType;
  static const enumtype LegRepurchaseTerm =
    TagType_enumtype_LegRepurchaseTerm;
  static const enumtype LegRepurchaseRate =
    TagType_enumtype_LegRepurchaseRate;
  static const enumtype LegFactor =
    TagType_enumtype_LegFactor;
  static const enumtype LegRedemptionDate =
    TagType_enumtype_LegRedemptionDate;
  static const enumtype CreditRating =
    TagType_enumtype_CreditRating;
  static const enumtype UnderlyingCreditRating =
    TagType_enumtype_UnderlyingCreditRating;
  static const enumtype LegCreditRating =
    TagType_enumtype_LegCreditRating;
  static const enumtype TradedFlatSwitch =
    TagType_enumtype_TradedFlatSwitch;
  static const enumtype BasisFeatureDate =
    TagType_enumtype_BasisFeatureDate;
  static const enumtype BasisFeaturePrice =
    TagType_enumtype_BasisFeaturePrice;
  static const enumtype MDReqID =
    TagType_enumtype_MDReqID;
  static const enumtype SubscriptionRequestType =
    TagType_enumtype_SubscriptionRequestType;
  static const enumtype MarketDepth =
    TagType_enumtype_MarketDepth;
  static const enumtype MDUpdateType =
    TagType_enumtype_MDUpdateType;
  static const enumtype AggregatedBook =
    TagType_enumtype_AggregatedBook;
  static const enumtype NoMDEntryTypes =
    TagType_enumtype_NoMDEntryTypes;
  static const enumtype NoMDEntries =
    TagType_enumtype_NoMDEntries;
  static const enumtype MDEntryType =
    TagType_enumtype_MDEntryType;
  static const enumtype MDEntryPx =
    TagType_enumtype_MDEntryPx;
  static const enumtype MDEntrySize =
    TagType_enumtype_MDEntrySize;
  static const enumtype MDEntryDate =
    TagType_enumtype_MDEntryDate;
  static const enumtype MDEntryTime =
    TagType_enumtype_MDEntryTime;
  static const enumtype TickDirection =
    TagType_enumtype_TickDirection;
  static const enumtype MDMkt =
    TagType_enumtype_MDMkt;
  static const enumtype QuoteCondition =
    TagType_enumtype_QuoteCondition;
  static const enumtype TradeCondition =
    TagType_enumtype_TradeCondition;
  static const enumtype MDEntryID =
    TagType_enumtype_MDEntryID;
  static const enumtype MDUpdateAction =
    TagType_enumtype_MDUpdateAction;
  static const enumtype MDEntryRefID =
    TagType_enumtype_MDEntryRefID;
  static const enumtype MDReqRejReason =
    TagType_enumtype_MDReqRejReason;
  static const enumtype MDEntryOriginator =
    TagType_enumtype_MDEntryOriginator;
  static const enumtype LocationID =
    TagType_enumtype_LocationID;
  static const enumtype DeskID =
    TagType_enumtype_DeskID;
  static const enumtype DeleteReason =
    TagType_enumtype_DeleteReason;
  static const enumtype OpenCloseSettlFlag =
    TagType_enumtype_OpenCloseSettlFlag;
  static const enumtype SellerDays =
    TagType_enumtype_SellerDays;
  static const enumtype MDEntryBuyer =
    TagType_enumtype_MDEntryBuyer;
  static const enumtype MDEntrySeller =
    TagType_enumtype_MDEntrySeller;
  static const enumtype MDEntryPositionNo =
    TagType_enumtype_MDEntryPositionNo;
  static const enumtype FinancialStatus =
    TagType_enumtype_FinancialStatus;
  static const enumtype CorporateAction =
    TagType_enumtype_CorporateAction;
  static const enumtype DefBidSize =
    TagType_enumtype_DefBidSize;
  static const enumtype DefOfferSize =
    TagType_enumtype_DefOfferSize;
  static const enumtype NoQuoteEntries =
    TagType_enumtype_NoQuoteEntries;
  static const enumtype NoQuoteSets =
    TagType_enumtype_NoQuoteSets;
  static const enumtype QuoteStatus =
    TagType_enumtype_QuoteStatus;
  static const enumtype QuoteCancelType =
    TagType_enumtype_QuoteCancelType;
  static const enumtype QuoteEntryID =
    TagType_enumtype_QuoteEntryID;
  static const enumtype QuoteRejectReason =
    TagType_enumtype_QuoteRejectReason;
  static const enumtype QuoteResponseLevel =
    TagType_enumtype_QuoteResponseLevel;
  static const enumtype QuoteSetID =
    TagType_enumtype_QuoteSetID;
  static const enumtype QuoteRequestType =
    TagType_enumtype_QuoteRequestType;
  static const enumtype TotNoQuoteEntries =
    TagType_enumtype_TotNoQuoteEntries;
  static const enumtype UnderlyingSecurityIDSource =
    TagType_enumtype_UnderlyingSecurityIDSource;
  static const enumtype UnderlyingIssuer =
    TagType_enumtype_UnderlyingIssuer;
  static const enumtype UnderlyingSecurityDesc =
    TagType_enumtype_UnderlyingSecurityDesc;
  static const enumtype UnderlyingSecurityExchange =
    TagType_enumtype_UnderlyingSecurityExchange;
  static const enumtype UnderlyingSecurityID =
    TagType_enumtype_UnderlyingSecurityID;
  static const enumtype UnderlyingSecurityType =
    TagType_enumtype_UnderlyingSecurityType;
  static const enumtype UnderlyingSymbol =
    TagType_enumtype_UnderlyingSymbol;
  static const enumtype UnderlyingSymbolSfx =
    TagType_enumtype_UnderlyingSymbolSfx;
  static const enumtype UnderlyingMaturityMonthYear =
    TagType_enumtype_UnderlyingMaturityMonthYear;
  static const enumtype UnderlyingPutOrCall =
    TagType_enumtype_UnderlyingPutOrCall;
  static const enumtype UnderlyingStrikePrice =
    TagType_enumtype_UnderlyingStrikePrice;
  static const enumtype UnderlyingOptAttribute =
    TagType_enumtype_UnderlyingOptAttribute;
  static const enumtype UnderlyingCurrency =
    TagType_enumtype_UnderlyingCurrency;
  static const enumtype SecurityReqID =
    TagType_enumtype_SecurityReqID;
  static const enumtype SecurityRequestType =
    TagType_enumtype_SecurityRequestType;
  static const enumtype SecurityResponseID =
    TagType_enumtype_SecurityResponseID;
  static const enumtype SecurityResponseType =
    TagType_enumtype_SecurityResponseType;
  static const enumtype SecurityStatusReqID =
    TagType_enumtype_SecurityStatusReqID;
  static const enumtype UnsolicitedIndicator =
    TagType_enumtype_UnsolicitedIndicator;
  static const enumtype SecurityTradingStatus =
    TagType_enumtype_SecurityTradingStatus;
  static const enumtype HaltReasonChar =
    TagType_enumtype_HaltReasonChar;
  static const enumtype InViewOfCommon =
    TagType_enumtype_InViewOfCommon;
  static const enumtype DueToRelated =
    TagType_enumtype_DueToRelated;
  static const enumtype BuyVolume =
    TagType_enumtype_BuyVolume;
  static const enumtype SellVolume =
    TagType_enumtype_SellVolume;
  static const enumtype HighPx =
    TagType_enumtype_HighPx;
  static const enumtype LowPx =
    TagType_enumtype_LowPx;
  static const enumtype Adjustment =
    TagType_enumtype_Adjustment;
  static const enumtype TradSesReqID =
    TagType_enumtype_TradSesReqID;
  static const enumtype TradingSessionID =
    TagType_enumtype_TradingSessionID;
  static const enumtype ContraTrader =
    TagType_enumtype_ContraTrader;
  static const enumtype TradSesMethod =
    TagType_enumtype_TradSesMethod;
  static const enumtype TradSesMode =
    TagType_enumtype_TradSesMode;
  static const enumtype TradSesStatus =
    TagType_enumtype_TradSesStatus;
  static const enumtype TradSesStartTime =
    TagType_enumtype_TradSesStartTime;
  static const enumtype TradSesOpenTime =
    TagType_enumtype_TradSesOpenTime;
  static const enumtype TradSesPreCloseTime =
    TagType_enumtype_TradSesPreCloseTime;
  static const enumtype TradSesCloseTime =
    TagType_enumtype_TradSesCloseTime;
  static const enumtype TradSesEndTime =
    TagType_enumtype_TradSesEndTime;
  static const enumtype NumberOfOrders =
    TagType_enumtype_NumberOfOrders;
  static const enumtype MessageEncoding =
    TagType_enumtype_MessageEncoding;
  static const enumtype EncodedIssuerLen =
    TagType_enumtype_EncodedIssuerLen;
  static const enumtype EncodedIssuer =
    TagType_enumtype_EncodedIssuer;
  static const enumtype EncodedSecurityDescLen =
    TagType_enumtype_EncodedSecurityDescLen;
  static const enumtype EncodedSecurityDesc =
    TagType_enumtype_EncodedSecurityDesc;
  static const enumtype EncodedListExecInstLen =
    TagType_enumtype_EncodedListExecInstLen;
  static const enumtype EncodedListExecInst =
    TagType_enumtype_EncodedListExecInst;
  static const enumtype EncodedTextLen =
    TagType_enumtype_EncodedTextLen;
  static const enumtype EncodedText =
    TagType_enumtype_EncodedText;
  static const enumtype EncodedSubjectLen =
    TagType_enumtype_EncodedSubjectLen;
  static const enumtype EncodedSubject =
    TagType_enumtype_EncodedSubject;
  static const enumtype EncodedHeadlineLen =
    TagType_enumtype_EncodedHeadlineLen;
  static const enumtype EncodedHeadline =
    TagType_enumtype_EncodedHeadline;
  static const enumtype EncodedAllocTextLen =
    TagType_enumtype_EncodedAllocTextLen;
  static const enumtype EncodedAllocText =
    TagType_enumtype_EncodedAllocText;
  static const enumtype EncodedUnderlyingIssuerLen =
    TagType_enumtype_EncodedUnderlyingIssuerLen;
  static const enumtype EncodedUnderlyingIssuer =
    TagType_enumtype_EncodedUnderlyingIssuer;
  static const enumtype EncodedUnderlyingSecurityDescLen =
    TagType_enumtype_EncodedUnderlyingSecurityDescLen;
  static const enumtype EncodedUnderlyingSecurityDesc =
    TagType_enumtype_EncodedUnderlyingSecurityDesc;
  static const enumtype AllocPrice =
    TagType_enumtype_AllocPrice;
  static const enumtype QuoteSetValidUntilTime =
    TagType_enumtype_QuoteSetValidUntilTime;
  static const enumtype QuoteEntryRejectReason =
    TagType_enumtype_QuoteEntryRejectReason;
  static const enumtype LastMsgSeqNumProcessed =
    TagType_enumtype_LastMsgSeqNumProcessed;
  static const enumtype RefTagID =
    TagType_enumtype_RefTagID;
  static const enumtype RefMsgType =
    TagType_enumtype_RefMsgType;
  static const enumtype SessionRejectReason =
    TagType_enumtype_SessionRejectReason;
  static const enumtype BidRequestTransType =
    TagType_enumtype_BidRequestTransType;
  static const enumtype ContraBroker =
    TagType_enumtype_ContraBroker;
  static const enumtype ComplianceID =
    TagType_enumtype_ComplianceID;
  static const enumtype SolicitedFlag =
    TagType_enumtype_SolicitedFlag;
  static const enumtype ExecRestatementReason =
    TagType_enumtype_ExecRestatementReason;
  static const enumtype BusinessRejectRefID =
    TagType_enumtype_BusinessRejectRefID;
  static const enumtype BusinessRejectReason =
    TagType_enumtype_BusinessRejectReason;
  static const enumtype GrossTradeAmt =
    TagType_enumtype_GrossTradeAmt;
  static const enumtype NoContraBrokers =
    TagType_enumtype_NoContraBrokers;
  static const enumtype MaxMessageSize =
    TagType_enumtype_MaxMessageSize;
  static const enumtype NoMsgTypes =
    TagType_enumtype_NoMsgTypes;
  static const enumtype MsgDirection =
    TagType_enumtype_MsgDirection;
  static const enumtype NoTradingSessions =
    TagType_enumtype_NoTradingSessions;
  static const enumtype TotalVolumeTraded =
    TagType_enumtype_TotalVolumeTraded;
  static const enumtype DiscretionInst =
    TagType_enumtype_DiscretionInst;
  static const enumtype DiscretionOffsetValue =
    TagType_enumtype_DiscretionOffsetValue;
  static const enumtype BidID =
    TagType_enumtype_BidID;
  static const enumtype ClientBidID =
    TagType_enumtype_ClientBidID;
  static const enumtype ListName =
    TagType_enumtype_ListName;
  static const enumtype TotNoRelatedSym =
    TagType_enumtype_TotNoRelatedSym;
  static const enumtype BidType =
    TagType_enumtype_BidType;
  static const enumtype NumTickets =
    TagType_enumtype_NumTickets;
  static const enumtype SideValue1 =
    TagType_enumtype_SideValue1;
  static const enumtype SideValue2 =
    TagType_enumtype_SideValue2;
  static const enumtype NoBidDescriptors =
    TagType_enumtype_NoBidDescriptors;
  static const enumtype BidDescriptorType =
    TagType_enumtype_BidDescriptorType;
  static const enumtype BidDescriptor =
    TagType_enumtype_BidDescriptor;
  static const enumtype SideValueInd =
    TagType_enumtype_SideValueInd;
  static const enumtype LiquidityPctLow =
    TagType_enumtype_LiquidityPctLow;
  static const enumtype LiquidityPctHigh =
    TagType_enumtype_LiquidityPctHigh;
  static const enumtype LiquidityValue =
    TagType_enumtype_LiquidityValue;
  static const enumtype EFPTrackingError =
    TagType_enumtype_EFPTrackingError;
  static const enumtype FairValue =
    TagType_enumtype_FairValue;
  static const enumtype OutsideIndexPct =
    TagType_enumtype_OutsideIndexPct;
  static const enumtype ValueOfFutures =
    TagType_enumtype_ValueOfFutures;
  static const enumtype LiquidityIndType =
    TagType_enumtype_LiquidityIndType;
  static const enumtype WtAverageLiquidity =
    TagType_enumtype_WtAverageLiquidity;
  static const enumtype ExchangeForPhysical =
    TagType_enumtype_ExchangeForPhysical;
  static const enumtype OutMainCntryUIndex =
    TagType_enumtype_OutMainCntryUIndex;
  static const enumtype CrossPercent =
    TagType_enumtype_CrossPercent;
  static const enumtype ProgRptReqs =
    TagType_enumtype_ProgRptReqs;
  static const enumtype ProgPeriodInterval =
    TagType_enumtype_ProgPeriodInterval;
  static const enumtype IncTaxInd =
    TagType_enumtype_IncTaxInd;
  static const enumtype NumBidders =
    TagType_enumtype_NumBidders;
  static const enumtype BidTradeType =
    TagType_enumtype_BidTradeType;
  static const enumtype BasisPxType =
    TagType_enumtype_BasisPxType;
  static const enumtype NoBidComponents =
    TagType_enumtype_NoBidComponents;
  static const enumtype Country =
    TagType_enumtype_Country;
  static const enumtype TotNoStrikes =
    TagType_enumtype_TotNoStrikes;
  static const enumtype PriceType =
    TagType_enumtype_PriceType;
  static const enumtype DayOrderQty =
    TagType_enumtype_DayOrderQty;
  static const enumtype DayCumQty =
    TagType_enumtype_DayCumQty;
  static const enumtype DayAvgPx =
    TagType_enumtype_DayAvgPx;
  static const enumtype GTBookingInst =
    TagType_enumtype_GTBookingInst;
  static const enumtype NoStrikes =
    TagType_enumtype_NoStrikes;
  static const enumtype ListStatusType =
    TagType_enumtype_ListStatusType;
  static const enumtype NetGrossInd =
    TagType_enumtype_NetGrossInd;
  static const enumtype ListOrderStatus =
    TagType_enumtype_ListOrderStatus;
  static const enumtype ExpireDate =
    TagType_enumtype_ExpireDate;
  static const enumtype ListExecInstType =
    TagType_enumtype_ListExecInstType;
  static const enumtype CxlRejResponseTo =
    TagType_enumtype_CxlRejResponseTo;
  static const enumtype UnderlyingCouponRate =
    TagType_enumtype_UnderlyingCouponRate;
  static const enumtype UnderlyingContractMultiplier =
    TagType_enumtype_UnderlyingContractMultiplier;
  static const enumtype ContraTradeQty =
    TagType_enumtype_ContraTradeQty;
  static const enumtype ContraTradeTime =
    TagType_enumtype_ContraTradeTime;
  static const enumtype LiquidityNumSecurities =
    TagType_enumtype_LiquidityNumSecurities;
  static const enumtype MultiLegReportingType =
    TagType_enumtype_MultiLegReportingType;
  static const enumtype StrikeTime =
    TagType_enumtype_StrikeTime;
  static const enumtype ListStatusText =
    TagType_enumtype_ListStatusText;
  static const enumtype EncodedListStatusTextLen =
    TagType_enumtype_EncodedListStatusTextLen;
  static const enumtype EncodedListStatusText =
    TagType_enumtype_EncodedListStatusText;
  static const enumtype PartyIDSource =
    TagType_enumtype_PartyIDSource;
  static const enumtype PartyID =
    TagType_enumtype_PartyID;
  static const enumtype NetChgPrevDay =
    TagType_enumtype_NetChgPrevDay;
  static const enumtype PartyRole =
    TagType_enumtype_PartyRole;
  static const enumtype NoPartyIDs =
    TagType_enumtype_NoPartyIDs;
  static const enumtype NoSecurityAltID =
    TagType_enumtype_NoSecurityAltID;
  static const enumtype SecurityAltID =
    TagType_enumtype_SecurityAltID;
  static const enumtype SecurityAltIDSource =
    TagType_enumtype_SecurityAltIDSource;
  static const enumtype NoUnderlyingSecurityAltID =
    TagType_enumtype_NoUnderlyingSecurityAltID;
  static const enumtype UnderlyingSecurityAltID =
    TagType_enumtype_UnderlyingSecurityAltID;
  static const enumtype UnderlyingSecurityAltIDSource =
    TagType_enumtype_UnderlyingSecurityAltIDSource;
  static const enumtype Product =
    TagType_enumtype_Product;
  static const enumtype CFICode =
    TagType_enumtype_CFICode;
  static const enumtype UnderlyingProduct =
    TagType_enumtype_UnderlyingProduct;
  static const enumtype UnderlyingCFICode =
    TagType_enumtype_UnderlyingCFICode;
  static const enumtype TestMessageIndicator =
    TagType_enumtype_TestMessageIndicator;
  static const enumtype BookingRefID =
    TagType_enumtype_BookingRefID;
  static const enumtype IndividualAllocID =
    TagType_enumtype_IndividualAllocID;
  static const enumtype RoundingDirection =
    TagType_enumtype_RoundingDirection;
  static const enumtype RoundingModulus =
    TagType_enumtype_RoundingModulus;
  static const enumtype CountryOfIssue =
    TagType_enumtype_CountryOfIssue;
  static const enumtype StateOrProvinceOfIssue =
    TagType_enumtype_StateOrProvinceOfIssue;
  static const enumtype LocaleOfIssue =
    TagType_enumtype_LocaleOfIssue;
  static const enumtype NoRegistDtls =
    TagType_enumtype_NoRegistDtls;
  static const enumtype MailingDtls =
    TagType_enumtype_MailingDtls;
  static const enumtype InvestorCountryOfResidence =
    TagType_enumtype_InvestorCountryOfResidence;
  static const enumtype PaymentRef =
    TagType_enumtype_PaymentRef;
  static const enumtype DistribPaymentMethod =
    TagType_enumtype_DistribPaymentMethod;
  static const enumtype CashDistribCurr =
    TagType_enumtype_CashDistribCurr;
  static const enumtype CommCurrency =
    TagType_enumtype_CommCurrency;
  static const enumtype CancellationRights =
    TagType_enumtype_CancellationRights;
  static const enumtype MoneyLaunderingStatus =
    TagType_enumtype_MoneyLaunderingStatus;
  static const enumtype MailingInst =
    TagType_enumtype_MailingInst;
  static const enumtype TransBkdTime =
    TagType_enumtype_TransBkdTime;
  static const enumtype ExecPriceType =
    TagType_enumtype_ExecPriceType;
  static const enumtype ExecPriceAdjustment =
    TagType_enumtype_ExecPriceAdjustment;
  static const enumtype DateOfBirth =
    TagType_enumtype_DateOfBirth;
  static const enumtype TradeReportTransType =
    TagType_enumtype_TradeReportTransType;
  static const enumtype CardHolderName =
    TagType_enumtype_CardHolderName;
  static const enumtype CardNumber =
    TagType_enumtype_CardNumber;
  static const enumtype CardExpDate =
    TagType_enumtype_CardExpDate;
  static const enumtype CardIssNum =
    TagType_enumtype_CardIssNum;
  static const enumtype PaymentMethod =
    TagType_enumtype_PaymentMethod;
  static const enumtype RegistAcctType =
    TagType_enumtype_RegistAcctType;
  static const enumtype Designation =
    TagType_enumtype_Designation;
  static const enumtype TaxAdvantageType =
    TagType_enumtype_TaxAdvantageType;
  static const enumtype RegistRejReasonText =
    TagType_enumtype_RegistRejReasonText;
  static const enumtype FundRenewWaiv =
    TagType_enumtype_FundRenewWaiv;
  static const enumtype CashDistribAgentName =
    TagType_enumtype_CashDistribAgentName;
  static const enumtype CashDistribAgentCode =
    TagType_enumtype_CashDistribAgentCode;
  static const enumtype CashDistribAgentAcctNumber =
    TagType_enumtype_CashDistribAgentAcctNumber;
  static const enumtype CashDistribPayRef =
    TagType_enumtype_CashDistribPayRef;
  static const enumtype CashDistribAgentAcctName =
    TagType_enumtype_CashDistribAgentAcctName;
  static const enumtype CardStartDate =
    TagType_enumtype_CardStartDate;
  static const enumtype PaymentDate =
    TagType_enumtype_PaymentDate;
  static const enumtype PaymentRemitterID =
    TagType_enumtype_PaymentRemitterID;
  static const enumtype RegistStatus =
    TagType_enumtype_RegistStatus;
  static const enumtype RegistRejReasonCode =
    TagType_enumtype_RegistRejReasonCode;
  static const enumtype RegistRefID =
    TagType_enumtype_RegistRefID;
  static const enumtype RegistDtls =
    TagType_enumtype_RegistDtls;
  static const enumtype NoDistribInsts =
    TagType_enumtype_NoDistribInsts;
  static const enumtype RegistEmail =
    TagType_enumtype_RegistEmail;
  static const enumtype DistribPercentage =
    TagType_enumtype_DistribPercentage;
  static const enumtype RegistID =
    TagType_enumtype_RegistID;
  static const enumtype RegistTransType =
    TagType_enumtype_RegistTransType;
  static const enumtype ExecValuationPoint =
    TagType_enumtype_ExecValuationPoint;
  static const enumtype OrderPercent =
    TagType_enumtype_OrderPercent;
  static const enumtype OwnershipType =
    TagType_enumtype_OwnershipType;
  static const enumtype NoContAmts =
    TagType_enumtype_NoContAmts;
  static const enumtype ContAmtType =
    TagType_enumtype_ContAmtType;
  static const enumtype ContAmtValue =
    TagType_enumtype_ContAmtValue;
  static const enumtype ContAmtCurr =
    TagType_enumtype_ContAmtCurr;
  static const enumtype OwnerType =
    TagType_enumtype_OwnerType;
  static const enumtype PartySubID =
    TagType_enumtype_PartySubID;
  static const enumtype NestedPartyID =
    TagType_enumtype_NestedPartyID;
  static const enumtype NestedPartyIDSource =
    TagType_enumtype_NestedPartyIDSource;
  static const enumtype SecondaryClOrdID =
    TagType_enumtype_SecondaryClOrdID;
  static const enumtype SecondaryExecID =
    TagType_enumtype_SecondaryExecID;
  static const enumtype OrderCapacity =
    TagType_enumtype_OrderCapacity;
  static const enumtype OrderRestrictions =
    TagType_enumtype_OrderRestrictions;
  static const enumtype MassCancelRequestType =
    TagType_enumtype_MassCancelRequestType;
  static const enumtype MassCancelResponse =
    TagType_enumtype_MassCancelResponse;
  static const enumtype MassCancelRejectReason =
    TagType_enumtype_MassCancelRejectReason;
  static const enumtype TotalAffectedOrders =
    TagType_enumtype_TotalAffectedOrders;
  static const enumtype NoAffectedOrders =
    TagType_enumtype_NoAffectedOrders;
  static const enumtype AffectedOrderID =
    TagType_enumtype_AffectedOrderID;
  static const enumtype AffectedSecondaryOrderID =
    TagType_enumtype_AffectedSecondaryOrderID;
  static const enumtype QuoteType =
    TagType_enumtype_QuoteType;
  static const enumtype NestedPartyRole =
    TagType_enumtype_NestedPartyRole;
  static const enumtype NoNestedPartyIDs =
    TagType_enumtype_NoNestedPartyIDs;
  static const enumtype TotalAccruedInterestAmt =
    TagType_enumtype_TotalAccruedInterestAmt;
  static const enumtype MaturityDate =
    TagType_enumtype_MaturityDate;
  static const enumtype UnderlyingMaturityDate =
    TagType_enumtype_UnderlyingMaturityDate;
  static const enumtype InstrRegistry =
    TagType_enumtype_InstrRegistry;
  static const enumtype CashMargin =
    TagType_enumtype_CashMargin;
  static const enumtype NestedPartySubID =
    TagType_enumtype_NestedPartySubID;
  static const enumtype Scope =
    TagType_enumtype_Scope;
  static const enumtype MDImplicitDelete =
    TagType_enumtype_MDImplicitDelete;
  static const enumtype CrossID =
    TagType_enumtype_CrossID;
  static const enumtype CrossType =
    TagType_enumtype_CrossType;
  static const enumtype CrossPrioritization =
    TagType_enumtype_CrossPrioritization;
  static const enumtype OrigCrossID =
    TagType_enumtype_OrigCrossID;
  static const enumtype NoSides =
    TagType_enumtype_NoSides;
  static const enumtype Username =
    TagType_enumtype_Username;
  static const enumtype Password =
    TagType_enumtype_Password;
  static const enumtype NoLegs =
    TagType_enumtype_NoLegs;
  static const enumtype LegCurrency =
    TagType_enumtype_LegCurrency;
  static const enumtype TotNoSecurityTypes =
    TagType_enumtype_TotNoSecurityTypes;
  static const enumtype NoSecurityTypes =
    TagType_enumtype_NoSecurityTypes;
  static const enumtype SecurityListRequestType =
    TagType_enumtype_SecurityListRequestType;
  static const enumtype SecurityRequestResult =
    TagType_enumtype_SecurityRequestResult;
  static const enumtype RoundLot =
    TagType_enumtype_RoundLot;
  static const enumtype MinTradeVol =
    TagType_enumtype_MinTradeVol;
  static const enumtype MultiLegRptTypeReq =
    TagType_enumtype_MultiLegRptTypeReq;
  static const enumtype LegPositionEffect =
    TagType_enumtype_LegPositionEffect;
  static const enumtype LegCoveredOrUncovered =
    TagType_enumtype_LegCoveredOrUncovered;
  static const enumtype LegPrice =
    TagType_enumtype_LegPrice;
  static const enumtype TradSesStatusRejReason =
    TagType_enumtype_TradSesStatusRejReason;
  static const enumtype TradeRequestID =
    TagType_enumtype_TradeRequestID;
  static const enumtype TradeRequestType =
    TagType_enumtype_TradeRequestType;
  static const enumtype PreviouslyReported =
    TagType_enumtype_PreviouslyReported;
  static const enumtype TradeReportID =
    TagType_enumtype_TradeReportID;
  static const enumtype TradeReportRefID =
    TagType_enumtype_TradeReportRefID;
  static const enumtype MatchStatus =
    TagType_enumtype_MatchStatus;
  static const enumtype MatchType =
    TagType_enumtype_MatchType;
  static const enumtype OddLot =
    TagType_enumtype_OddLot;
  static const enumtype NoClearingInstructions =
    TagType_enumtype_NoClearingInstructions;
  static const enumtype ClearingInstruction =
    TagType_enumtype_ClearingInstruction;
  static const enumtype TradeInputSource =
    TagType_enumtype_TradeInputSource;
  static const enumtype TradeInputDevice =
    TagType_enumtype_TradeInputDevice;
  static const enumtype NoDates =
    TagType_enumtype_NoDates;
  static const enumtype AccountType =
    TagType_enumtype_AccountType;
  static const enumtype CustOrderCapacity =
    TagType_enumtype_CustOrderCapacity;
  static const enumtype ClOrdLinkID =
    TagType_enumtype_ClOrdLinkID;
  static const enumtype MassStatusReqID =
    TagType_enumtype_MassStatusReqID;
  static const enumtype MassStatusReqType =
    TagType_enumtype_MassStatusReqType;
  static const enumtype OrigOrdModTime =
    TagType_enumtype_OrigOrdModTime;
  static const enumtype LegSettlType =
    TagType_enumtype_LegSettlType;
  static const enumtype LegSettlDate =
    TagType_enumtype_LegSettlDate;
  static const enumtype DayBookingInst =
    TagType_enumtype_DayBookingInst;
  static const enumtype BookingUnit =
    TagType_enumtype_BookingUnit;
  static const enumtype PreallocMethod =
    TagType_enumtype_PreallocMethod;
  static const enumtype UnderlyingCountryOfIssue =
    TagType_enumtype_UnderlyingCountryOfIssue;
  static const enumtype UnderlyingStateOrProvinceOfIssue =
    TagType_enumtype_UnderlyingStateOrProvinceOfIssue;
  static const enumtype UnderlyingLocaleOfIssue =
    TagType_enumtype_UnderlyingLocaleOfIssue;
  static const enumtype UnderlyingInstrRegistry =
    TagType_enumtype_UnderlyingInstrRegistry;
  static const enumtype LegCountryOfIssue =
    TagType_enumtype_LegCountryOfIssue;
  static const enumtype LegStateOrProvinceOfIssue =
    TagType_enumtype_LegStateOrProvinceOfIssue;
  static const enumtype LegLocaleOfIssue =
    TagType_enumtype_LegLocaleOfIssue;
  static const enumtype LegInstrRegistry =
    TagType_enumtype_LegInstrRegistry;
  static const enumtype LegSymbol =
    TagType_enumtype_LegSymbol;
  static const enumtype LegSymbolSfx =
    TagType_enumtype_LegSymbolSfx;
  static const enumtype LegSecurityID =
    TagType_enumtype_LegSecurityID;
  static const enumtype LegSecurityIDSource =
    TagType_enumtype_LegSecurityIDSource;
  static const enumtype NoLegSecurityAltID =
    TagType_enumtype_NoLegSecurityAltID;
  static const enumtype LegSecurityAltID =
    TagType_enumtype_LegSecurityAltID;
  static const enumtype LegSecurityAltIDSource =
    TagType_enumtype_LegSecurityAltIDSource;
  static const enumtype LegProduct =
    TagType_enumtype_LegProduct;
  static const enumtype LegCFICode =
    TagType_enumtype_LegCFICode;
  static const enumtype LegSecurityType =
    TagType_enumtype_LegSecurityType;
  static const enumtype LegMaturityMonthYear =
    TagType_enumtype_LegMaturityMonthYear;
  static const enumtype LegMaturityDate =
    TagType_enumtype_LegMaturityDate;
  static const enumtype LegStrikePrice =
    TagType_enumtype_LegStrikePrice;
  static const enumtype LegOptAttribute =
    TagType_enumtype_LegOptAttribute;
  static const enumtype LegContractMultiplier =
    TagType_enumtype_LegContractMultiplier;
  static const enumtype LegCouponRate =
    TagType_enumtype_LegCouponRate;
  static const enumtype LegSecurityExchange =
    TagType_enumtype_LegSecurityExchange;
  static const enumtype LegIssuer =
    TagType_enumtype_LegIssuer;
  static const enumtype EncodedLegIssuerLen =
    TagType_enumtype_EncodedLegIssuerLen;
  static const enumtype EncodedLegIssuer =
    TagType_enumtype_EncodedLegIssuer;
  static const enumtype LegSecurityDesc =
    TagType_enumtype_LegSecurityDesc;
  static const enumtype EncodedLegSecurityDescLen =
    TagType_enumtype_EncodedLegSecurityDescLen;
  static const enumtype EncodedLegSecurityDesc =
    TagType_enumtype_EncodedLegSecurityDesc;
  static const enumtype LegRatioQty =
    TagType_enumtype_LegRatioQty;
  static const enumtype LegSide =
    TagType_enumtype_LegSide;
  static const enumtype TradingSessionSubID =
    TagType_enumtype_TradingSessionSubID;
  static const enumtype AllocType =
    TagType_enumtype_AllocType;
  static const enumtype NoHops =
    TagType_enumtype_NoHops;
  static const enumtype HopCompID =
    TagType_enumtype_HopCompID;
  static const enumtype HopSendingTime =
    TagType_enumtype_HopSendingTime;
  static const enumtype HopRefID =
    TagType_enumtype_HopRefID;
  static const enumtype MidPx =
    TagType_enumtype_MidPx;
  static const enumtype BidYield =
    TagType_enumtype_BidYield;
  static const enumtype MidYield =
    TagType_enumtype_MidYield;
  static const enumtype OfferYield =
    TagType_enumtype_OfferYield;
  static const enumtype ClearingFeeIndicator =
    TagType_enumtype_ClearingFeeIndicator;
  static const enumtype WorkingIndicator =
    TagType_enumtype_WorkingIndicator;
  static const enumtype LegLastPx =
    TagType_enumtype_LegLastPx;
  static const enumtype PriorityIndicator =
    TagType_enumtype_PriorityIndicator;
  static const enumtype PriceImprovement =
    TagType_enumtype_PriceImprovement;
  static const enumtype Price2 =
    TagType_enumtype_Price2;
  static const enumtype LastForwardPoints2 =
    TagType_enumtype_LastForwardPoints2;
  static const enumtype BidForwardPoints2 =
    TagType_enumtype_BidForwardPoints2;
  static const enumtype OfferForwardPoints2 =
    TagType_enumtype_OfferForwardPoints2;
  static const enumtype RFQReqID =
    TagType_enumtype_RFQReqID;
  static const enumtype MktBidPx =
    TagType_enumtype_MktBidPx;
  static const enumtype MktOfferPx =
    TagType_enumtype_MktOfferPx;
  static const enumtype MinBidSize =
    TagType_enumtype_MinBidSize;
  static const enumtype MinOfferSize =
    TagType_enumtype_MinOfferSize;
  static const enumtype QuoteStatusReqID =
    TagType_enumtype_QuoteStatusReqID;
  static const enumtype LegalConfirm =
    TagType_enumtype_LegalConfirm;
  static const enumtype UnderlyingLastPx =
    TagType_enumtype_UnderlyingLastPx;
  static const enumtype UnderlyingLastQty =
    TagType_enumtype_UnderlyingLastQty;
  static const enumtype LegRefID =
    TagType_enumtype_LegRefID;
  static const enumtype ContraLegRefID =
    TagType_enumtype_ContraLegRefID;
  static const enumtype SettlCurrBidFxRate =
    TagType_enumtype_SettlCurrBidFxRate;
  static const enumtype SettlCurrOfferFxRate =
    TagType_enumtype_SettlCurrOfferFxRate;
  static const enumtype QuoteRequestRejectReason =
    TagType_enumtype_QuoteRequestRejectReason;
  static const enumtype SideComplianceID =
    TagType_enumtype_SideComplianceID;
  static const enumtype AcctIDSource =
    TagType_enumtype_AcctIDSource;
  static const enumtype AllocAcctIDSource =
    TagType_enumtype_AllocAcctIDSource;
  static const enumtype BenchmarkPrice =
    TagType_enumtype_BenchmarkPrice;
  static const enumtype BenchmarkPriceType =
    TagType_enumtype_BenchmarkPriceType;
  static const enumtype ConfirmID =
    TagType_enumtype_ConfirmID;
  static const enumtype ConfirmStatus =
    TagType_enumtype_ConfirmStatus;
  static const enumtype ConfirmTransType =
    TagType_enumtype_ConfirmTransType;
  static const enumtype ContractSettlMonth =
    TagType_enumtype_ContractSettlMonth;
  static const enumtype DeliveryForm =
    TagType_enumtype_DeliveryForm;
  static const enumtype LastParPx =
    TagType_enumtype_LastParPx;
  static const enumtype NoLegAllocs =
    TagType_enumtype_NoLegAllocs;
  static const enumtype LegAllocAccount =
    TagType_enumtype_LegAllocAccount;
  static const enumtype LegIndividualAllocID =
    TagType_enumtype_LegIndividualAllocID;
  static const enumtype LegAllocQty =
    TagType_enumtype_LegAllocQty;
  static const enumtype LegAllocAcctIDSource =
    TagType_enumtype_LegAllocAcctIDSource;
  static const enumtype LegSettlCurrency =
    TagType_enumtype_LegSettlCurrency;
  static const enumtype LegBenchmarkCurveCurrency =
    TagType_enumtype_LegBenchmarkCurveCurrency;
  static const enumtype LegBenchmarkCurveName =
    TagType_enumtype_LegBenchmarkCurveName;
  static const enumtype LegBenchmarkCurvePoint =
    TagType_enumtype_LegBenchmarkCurvePoint;
  static const enumtype LegBenchmarkPrice =
    TagType_enumtype_LegBenchmarkPrice;
  static const enumtype LegBenchmarkPriceType =
    TagType_enumtype_LegBenchmarkPriceType;
  static const enumtype LegBidPx =
    TagType_enumtype_LegBidPx;
  static const enumtype LegIOIQty =
    TagType_enumtype_LegIOIQty;
  static const enumtype NoLegStipulations =
    TagType_enumtype_NoLegStipulations;
  static const enumtype LegOfferPx =
    TagType_enumtype_LegOfferPx;
  static const enumtype LegPriceType =
    TagType_enumtype_LegPriceType;
  static const enumtype LegQty =
    TagType_enumtype_LegQty;
  static const enumtype LegStipulationType =
    TagType_enumtype_LegStipulationType;
  static const enumtype LegStipulationValue =
    TagType_enumtype_LegStipulationValue;
  static const enumtype LegSwapType =
    TagType_enumtype_LegSwapType;
  static const enumtype Pool =
    TagType_enumtype_Pool;
  static const enumtype QuotePriceType =
    TagType_enumtype_QuotePriceType;
  static const enumtype QuoteRespID =
    TagType_enumtype_QuoteRespID;
  static const enumtype QuoteRespType =
    TagType_enumtype_QuoteRespType;
  static const enumtype QuoteQualifier =
    TagType_enumtype_QuoteQualifier;
  static const enumtype YieldRedemptionDate =
    TagType_enumtype_YieldRedemptionDate;
  static const enumtype YieldRedemptionPrice =
    TagType_enumtype_YieldRedemptionPrice;
  static const enumtype YieldRedemptionPriceType =
    TagType_enumtype_YieldRedemptionPriceType;
  static const enumtype BenchmarkSecurityID =
    TagType_enumtype_BenchmarkSecurityID;
  static const enumtype ReversalIndicator =
    TagType_enumtype_ReversalIndicator;
  static const enumtype YieldCalcDate =
    TagType_enumtype_YieldCalcDate;
  static const enumtype NoPositions =
    TagType_enumtype_NoPositions;
  static const enumtype PosType =
    TagType_enumtype_PosType;
  static const enumtype LongQty =
    TagType_enumtype_LongQty;
  static const enumtype ShortQty =
    TagType_enumtype_ShortQty;
  static const enumtype PosQtyStatus =
    TagType_enumtype_PosQtyStatus;
  static const enumtype PosAmtType =
    TagType_enumtype_PosAmtType;
  static const enumtype PosAmt =
    TagType_enumtype_PosAmt;
  static const enumtype PosTransType =
    TagType_enumtype_PosTransType;
  static const enumtype PosReqID =
    TagType_enumtype_PosReqID;
  static const enumtype NoUnderlyings =
    TagType_enumtype_NoUnderlyings;
  static const enumtype PosMaintAction =
    TagType_enumtype_PosMaintAction;
  static const enumtype OrigPosReqRefID =
    TagType_enumtype_OrigPosReqRefID;
  static const enumtype PosMaintRptRefID =
    TagType_enumtype_PosMaintRptRefID;
  static const enumtype ClearingBusinessDate =
    TagType_enumtype_ClearingBusinessDate;
  static const enumtype SettlSessID =
    TagType_enumtype_SettlSessID;
  static const enumtype SettlSessSubID =
    TagType_enumtype_SettlSessSubID;
  static const enumtype AdjustmentType =
    TagType_enumtype_AdjustmentType;
  static const enumtype ContraryInstructionIndicator =
    TagType_enumtype_ContraryInstructionIndicator;
  static const enumtype PriorSpreadIndicator =
    TagType_enumtype_PriorSpreadIndicator;
  static const enumtype PosMaintRptID =
    TagType_enumtype_PosMaintRptID;
  static const enumtype PosMaintStatus =
    TagType_enumtype_PosMaintStatus;
  static const enumtype PosMaintResult =
    TagType_enumtype_PosMaintResult;
  static const enumtype PosReqType =
    TagType_enumtype_PosReqType;
  static const enumtype ResponseTransportType =
    TagType_enumtype_ResponseTransportType;
  static const enumtype ResponseDestination =
    TagType_enumtype_ResponseDestination;
  static const enumtype TotalNumPosReports =
    TagType_enumtype_TotalNumPosReports;
  static const enumtype PosReqResult =
    TagType_enumtype_PosReqResult;
  static const enumtype PosReqStatus =
    TagType_enumtype_PosReqStatus;
  static const enumtype SettlPrice =
    TagType_enumtype_SettlPrice;
  static const enumtype SettlPriceType =
    TagType_enumtype_SettlPriceType;
  static const enumtype UnderlyingSettlPrice =
    TagType_enumtype_UnderlyingSettlPrice;
  static const enumtype UnderlyingSettlPriceType =
    TagType_enumtype_UnderlyingSettlPriceType;
  static const enumtype PriorSettlPrice =
    TagType_enumtype_PriorSettlPrice;
  static const enumtype NoQuoteQualifiers =
    TagType_enumtype_NoQuoteQualifiers;
  static const enumtype AllocSettlCurrency =
    TagType_enumtype_AllocSettlCurrency;
  static const enumtype AllocSettlCurrAmt =
    TagType_enumtype_AllocSettlCurrAmt;
  static const enumtype InterestAtMaturity =
    TagType_enumtype_InterestAtMaturity;
  static const enumtype LegDatedDate =
    TagType_enumtype_LegDatedDate;
  static const enumtype LegPool =
    TagType_enumtype_LegPool;
  static const enumtype AllocInterestAtMaturity =
    TagType_enumtype_AllocInterestAtMaturity;
  static const enumtype AllocAccruedInterestAmt =
    TagType_enumtype_AllocAccruedInterestAmt;
  static const enumtype DeliveryDate =
    TagType_enumtype_DeliveryDate;
  static const enumtype AssignmentMethod =
    TagType_enumtype_AssignmentMethod;
  static const enumtype AssignmentUnit =
    TagType_enumtype_AssignmentUnit;
  static const enumtype OpenInterest =
    TagType_enumtype_OpenInterest;
  static const enumtype ExerciseMethod =
    TagType_enumtype_ExerciseMethod;
  static const enumtype TotNumTradeReports =
    TagType_enumtype_TotNumTradeReports;
  static const enumtype TradeRequestResult =
    TagType_enumtype_TradeRequestResult;
  static const enumtype TradeRequestStatus =
    TagType_enumtype_TradeRequestStatus;
  static const enumtype TradeReportRejectReason =
    TagType_enumtype_TradeReportRejectReason;
  static const enumtype SideMultiLegReportingType =
    TagType_enumtype_SideMultiLegReportingType;
  static const enumtype NoPosAmt =
    TagType_enumtype_NoPosAmt;
  static const enumtype AutoAcceptIndicator =
    TagType_enumtype_AutoAcceptIndicator;
  static const enumtype AllocReportID =
    TagType_enumtype_AllocReportID;
  static const enumtype NoNested2PartyIDs =
    TagType_enumtype_NoNested2PartyIDs;
  static const enumtype Nested2PartyID =
    TagType_enumtype_Nested2PartyID;
  static const enumtype Nested2PartyIDSource =
    TagType_enumtype_Nested2PartyIDSource;
  static const enumtype Nested2PartyRole =
    TagType_enumtype_Nested2PartyRole;
  static const enumtype Nested2PartySubID =
    TagType_enumtype_Nested2PartySubID;
  static const enumtype BenchmarkSecurityIDSource =
    TagType_enumtype_BenchmarkSecurityIDSource;
  static const enumtype SecuritySubType =
    TagType_enumtype_SecuritySubType;
  static const enumtype UnderlyingSecuritySubType =
    TagType_enumtype_UnderlyingSecuritySubType;
  static const enumtype LegSecuritySubType =
    TagType_enumtype_LegSecuritySubType;
  static const enumtype AllowableOneSidednessPct =
    TagType_enumtype_AllowableOneSidednessPct;
  static const enumtype AllowableOneSidednessValue =
    TagType_enumtype_AllowableOneSidednessValue;
  static const enumtype AllowableOneSidednessCurr =
    TagType_enumtype_AllowableOneSidednessCurr;
  static const enumtype NoTrdRegTimestamps =
    TagType_enumtype_NoTrdRegTimestamps;
  static const enumtype TrdRegTimestamp =
    TagType_enumtype_TrdRegTimestamp;
  static const enumtype TrdRegTimestampType =
    TagType_enumtype_TrdRegTimestampType;
  static const enumtype TrdRegTimestampOrigin =
    TagType_enumtype_TrdRegTimestampOrigin;
  static const enumtype ConfirmRefID =
    TagType_enumtype_ConfirmRefID;
  static const enumtype ConfirmType =
    TagType_enumtype_ConfirmType;
  static const enumtype ConfirmRejReason =
    TagType_enumtype_ConfirmRejReason;
  static const enumtype BookingType =
    TagType_enumtype_BookingType;
  static const enumtype IndividualAllocRejCode =
    TagType_enumtype_IndividualAllocRejCode;
  static const enumtype SettlInstMsgID =
    TagType_enumtype_SettlInstMsgID;
  static const enumtype NoSettlInst =
    TagType_enumtype_NoSettlInst;
  static const enumtype LastUpdateTime =
    TagType_enumtype_LastUpdateTime;
  static const enumtype AllocSettlInstType =
    TagType_enumtype_AllocSettlInstType;
  static const enumtype NoSettlPartyIDs =
    TagType_enumtype_NoSettlPartyIDs;
  static const enumtype SettlPartyID =
    TagType_enumtype_SettlPartyID;
  static const enumtype SettlPartyIDSource =
    TagType_enumtype_SettlPartyIDSource;
  static const enumtype SettlPartyRole =
    TagType_enumtype_SettlPartyRole;
  static const enumtype SettlPartySubID =
    TagType_enumtype_SettlPartySubID;
  static const enumtype SettlPartySubIDType =
    TagType_enumtype_SettlPartySubIDType;
  static const enumtype DlvyInstType =
    TagType_enumtype_DlvyInstType;
  static const enumtype TerminationType =
    TagType_enumtype_TerminationType;
  static const enumtype NextExpectedMsgSeqNum =
    TagType_enumtype_NextExpectedMsgSeqNum;
  static const enumtype OrdStatusReqID =
    TagType_enumtype_OrdStatusReqID;
  static const enumtype SettlInstReqID =
    TagType_enumtype_SettlInstReqID;
  static const enumtype SettlInstReqRejCode =
    TagType_enumtype_SettlInstReqRejCode;
  static const enumtype SecondaryAllocID =
    TagType_enumtype_SecondaryAllocID;
  static const enumtype AllocReportType =
    TagType_enumtype_AllocReportType;
  static const enumtype AllocReportRefID =
    TagType_enumtype_AllocReportRefID;
  static const enumtype AllocCancReplaceReason =
    TagType_enumtype_AllocCancReplaceReason;
  static const enumtype CopyMsgIndicator =
    TagType_enumtype_CopyMsgIndicator;
  static const enumtype AllocAccountType =
    TagType_enumtype_AllocAccountType;
  static const enumtype OrderAvgPx =
    TagType_enumtype_OrderAvgPx;
  static const enumtype OrderBookingQty =
    TagType_enumtype_OrderBookingQty;
  static const enumtype NoSettlPartySubIDs =
    TagType_enumtype_NoSettlPartySubIDs;
  static const enumtype NoPartySubIDs =
    TagType_enumtype_NoPartySubIDs;
  static const enumtype PartySubIDType =
    TagType_enumtype_PartySubIDType;
  static const enumtype NoNestedPartySubIDs =
    TagType_enumtype_NoNestedPartySubIDs;
  static const enumtype NestedPartySubIDType =
    TagType_enumtype_NestedPartySubIDType;
  static const enumtype NoNested2PartySubIDs =
    TagType_enumtype_NoNested2PartySubIDs;
  static const enumtype Nested2PartySubIDType =
    TagType_enumtype_Nested2PartySubIDType;
  static const enumtype AllocIntermedReqType =
    TagType_enumtype_AllocIntermedReqType;
  static const enumtype UnderlyingPx =
    TagType_enumtype_UnderlyingPx;
  static const enumtype PriceDelta =
    TagType_enumtype_PriceDelta;
  static const enumtype ApplQueueMax =
    TagType_enumtype_ApplQueueMax;
  static const enumtype ApplQueueDepth =
    TagType_enumtype_ApplQueueDepth;
  static const enumtype ApplQueueResolution =
    TagType_enumtype_ApplQueueResolution;
  static const enumtype ApplQueueAction =
    TagType_enumtype_ApplQueueAction;
  static const enumtype NoAltMDSource =
    TagType_enumtype_NoAltMDSource;
  static const enumtype AltMDSourceID =
    TagType_enumtype_AltMDSourceID;
  static const enumtype SecondaryTradeReportID =
    TagType_enumtype_SecondaryTradeReportID;
  static const enumtype AvgPxIndicator =
    TagType_enumtype_AvgPxIndicator;
  static const enumtype TradeLinkID =
    TagType_enumtype_TradeLinkID;
  static const enumtype OrderInputDevice =
    TagType_enumtype_OrderInputDevice;
  static const enumtype UnderlyingTradingSessionID =
    TagType_enumtype_UnderlyingTradingSessionID;
  static const enumtype UnderlyingTradingSessionSubID =
    TagType_enumtype_UnderlyingTradingSessionSubID;
  static const enumtype TradeLegRefID =
    TagType_enumtype_TradeLegRefID;
  static const enumtype ExchangeRule =
    TagType_enumtype_ExchangeRule;
  static const enumtype TradeAllocIndicator =
    TagType_enumtype_TradeAllocIndicator;
  static const enumtype ExpirationCycle =
    TagType_enumtype_ExpirationCycle;
  static const enumtype TrdType =
    TagType_enumtype_TrdType;
  static const enumtype TrdSubType =
    TagType_enumtype_TrdSubType;
  static const enumtype TransferReason =
    TagType_enumtype_TransferReason;
  static const enumtype TotNumAssignmentReports =
    TagType_enumtype_TotNumAssignmentReports;
  static const enumtype AsgnRptID =
    TagType_enumtype_AsgnRptID;
  static const enumtype ThresholdAmount =
    TagType_enumtype_ThresholdAmount;
  static const enumtype PegMoveType =
    TagType_enumtype_PegMoveType;
  static const enumtype PegOffsetType =
    TagType_enumtype_PegOffsetType;
  static const enumtype PegLimitType =
    TagType_enumtype_PegLimitType;
  static const enumtype PegRoundDirection =
    TagType_enumtype_PegRoundDirection;
  static const enumtype PeggedPrice =
    TagType_enumtype_PeggedPrice;
  static const enumtype PegScope =
    TagType_enumtype_PegScope;
  static const enumtype DiscretionMoveType =
    TagType_enumtype_DiscretionMoveType;
  static const enumtype DiscretionOffsetType =
    TagType_enumtype_DiscretionOffsetType;
  static const enumtype DiscretionLimitType =
    TagType_enumtype_DiscretionLimitType;
  static const enumtype DiscretionRoundDirection =
    TagType_enumtype_DiscretionRoundDirection;
  static const enumtype DiscretionPrice =
    TagType_enumtype_DiscretionPrice;
  static const enumtype DiscretionScope =
    TagType_enumtype_DiscretionScope;
  static const enumtype TargetStrategy =
    TagType_enumtype_TargetStrategy;
  static const enumtype TargetStrategyParameters =
    TagType_enumtype_TargetStrategyParameters;
  static const enumtype ParticipationRate =
    TagType_enumtype_ParticipationRate;
  static const enumtype TargetStrategyPerformance =
    TagType_enumtype_TargetStrategyPerformance;
  static const enumtype LastLiquidityInd =
    TagType_enumtype_LastLiquidityInd;
  static const enumtype PublishTrdIndicator =
    TagType_enumtype_PublishTrdIndicator;
  static const enumtype ShortSaleReason =
    TagType_enumtype_ShortSaleReason;
  static const enumtype QtyType =
    TagType_enumtype_QtyType;
  static const enumtype SecondaryTrdType =
    TagType_enumtype_SecondaryTrdType;
  static const enumtype TradeReportType =
    TagType_enumtype_TradeReportType;
  static const enumtype AllocNoOrdersType =
    TagType_enumtype_AllocNoOrdersType;
  static const enumtype SharedCommission =
    TagType_enumtype_SharedCommission;
  static const enumtype ConfirmReqID =
    TagType_enumtype_ConfirmReqID;
  static const enumtype AvgParPx =
    TagType_enumtype_AvgParPx;
  static const enumtype ReportedPx =
    TagType_enumtype_ReportedPx;
  static const enumtype NoCapacities =
    TagType_enumtype_NoCapacities;
  static const enumtype OrderCapacityQty =
    TagType_enumtype_OrderCapacityQty;
  static const enumtype NoEvents =
    TagType_enumtype_NoEvents;
  static const enumtype EventType =
    TagType_enumtype_EventType;
  static const enumtype EventDate =
    TagType_enumtype_EventDate;
  static const enumtype EventPx =
    TagType_enumtype_EventPx;
  static const enumtype EventText =
    TagType_enumtype_EventText;
  static const enumtype PctAtRisk =
    TagType_enumtype_PctAtRisk;
  static const enumtype NoInstrAttrib =
    TagType_enumtype_NoInstrAttrib;
  static const enumtype InstrAttribType =
    TagType_enumtype_InstrAttribType;
  static const enumtype InstrAttribValue =
    TagType_enumtype_InstrAttribValue;
  static const enumtype DatedDate =
    TagType_enumtype_DatedDate;
  static const enumtype InterestAccrualDate =
    TagType_enumtype_InterestAccrualDate;
  static const enumtype CPProgram =
    TagType_enumtype_CPProgram;
  static const enumtype CPRegType =
    TagType_enumtype_CPRegType;
  static const enumtype UnderlyingCPProgram =
    TagType_enumtype_UnderlyingCPProgram;
  static const enumtype UnderlyingCPRegType =
    TagType_enumtype_UnderlyingCPRegType;
  static const enumtype UnderlyingQty =
    TagType_enumtype_UnderlyingQty;
  static const enumtype TrdMatchID =
    TagType_enumtype_TrdMatchID;
  static const enumtype SecondaryTradeReportRefID =
    TagType_enumtype_SecondaryTradeReportRefID;
  static const enumtype UnderlyingDirtyPrice =
    TagType_enumtype_UnderlyingDirtyPrice;
  static const enumtype UnderlyingEndPrice =
    TagType_enumtype_UnderlyingEndPrice;
  static const enumtype UnderlyingStartValue =
    TagType_enumtype_UnderlyingStartValue;
  static const enumtype UnderlyingCurrentValue =
    TagType_enumtype_UnderlyingCurrentValue;
  static const enumtype UnderlyingEndValue =
    TagType_enumtype_UnderlyingEndValue;
  static const enumtype NoUnderlyingStips =
    TagType_enumtype_NoUnderlyingStips;
  static const enumtype UnderlyingStipType =
    TagType_enumtype_UnderlyingStipType;
  static const enumtype UnderlyingStipValue =
    TagType_enumtype_UnderlyingStipValue;
  static const enumtype MaturityNetMoney =
    TagType_enumtype_MaturityNetMoney;
  static const enumtype MiscFeeBasis =
    TagType_enumtype_MiscFeeBasis;
  static const enumtype TotNoAllocs =
    TagType_enumtype_TotNoAllocs;
  static const enumtype LastFragment =
    TagType_enumtype_LastFragment;
  static const enumtype CollReqID =
    TagType_enumtype_CollReqID;
  static const enumtype CollAsgnReason =
    TagType_enumtype_CollAsgnReason;
  static const enumtype CollInquiryQualifier =
    TagType_enumtype_CollInquiryQualifier;
  static const enumtype NoTrades =
    TagType_enumtype_NoTrades;
  static const enumtype MarginRatio =
    TagType_enumtype_MarginRatio;
  static const enumtype MarginExcess =
    TagType_enumtype_MarginExcess;
  static const enumtype TotalNetValue =
    TagType_enumtype_TotalNetValue;
  static const enumtype CashOutstanding =
    TagType_enumtype_CashOutstanding;
  static const enumtype CollAsgnID =
    TagType_enumtype_CollAsgnID;
  static const enumtype CollAsgnTransType =
    TagType_enumtype_CollAsgnTransType;
  static const enumtype CollRespID =
    TagType_enumtype_CollRespID;
  static const enumtype CollAsgnRespType =
    TagType_enumtype_CollAsgnRespType;
  static const enumtype CollAsgnRejectReason =
    TagType_enumtype_CollAsgnRejectReason;
  static const enumtype CollAsgnRefID =
    TagType_enumtype_CollAsgnRefID;
  static const enumtype CollRptID =
    TagType_enumtype_CollRptID;
  static const enumtype CollInquiryID =
    TagType_enumtype_CollInquiryID;
  static const enumtype CollStatus =
    TagType_enumtype_CollStatus;
  static const enumtype TotNumReports =
    TagType_enumtype_TotNumReports;
  static const enumtype LastRptRequested =
    TagType_enumtype_LastRptRequested;
  static const enumtype AgreementDesc =
    TagType_enumtype_AgreementDesc;
  static const enumtype AgreementID =
    TagType_enumtype_AgreementID;
  static const enumtype AgreementDate =
    TagType_enumtype_AgreementDate;
  static const enumtype StartDate =
    TagType_enumtype_StartDate;
  static const enumtype EndDate =
    TagType_enumtype_EndDate;
  static const enumtype AgreementCurrency =
    TagType_enumtype_AgreementCurrency;
  static const enumtype DeliveryType =
    TagType_enumtype_DeliveryType;
  static const enumtype EndAccruedInterestAmt =
    TagType_enumtype_EndAccruedInterestAmt;
  static const enumtype StartCash =
    TagType_enumtype_StartCash;
  static const enumtype EndCash =
    TagType_enumtype_EndCash;
  static const enumtype UserRequestID =
    TagType_enumtype_UserRequestID;
  static const enumtype UserRequestType =
    TagType_enumtype_UserRequestType;
  static const enumtype NewPassword =
    TagType_enumtype_NewPassword;
  static const enumtype UserStatus =
    TagType_enumtype_UserStatus;
  static const enumtype UserStatusText =
    TagType_enumtype_UserStatusText;
  static const enumtype StatusValue =
    TagType_enumtype_StatusValue;
  static const enumtype StatusText =
    TagType_enumtype_StatusText;
  static const enumtype RefCompID =
    TagType_enumtype_RefCompID;
  static const enumtype RefSubID =
    TagType_enumtype_RefSubID;
  static const enumtype NetworkResponseID =
    TagType_enumtype_NetworkResponseID;
  static const enumtype NetworkRequestID =
    TagType_enumtype_NetworkRequestID;
  static const enumtype LastNetworkResponseID =
    TagType_enumtype_LastNetworkResponseID;
  static const enumtype NetworkRequestType =
    TagType_enumtype_NetworkRequestType;
  static const enumtype NoCompIDs =
    TagType_enumtype_NoCompIDs;
  static const enumtype NetworkStatusResponseType =
    TagType_enumtype_NetworkStatusResponseType;
  static const enumtype NoCollInquiryQualifier =
    TagType_enumtype_NoCollInquiryQualifier;
  static const enumtype TrdRptStatus =
    TagType_enumtype_TrdRptStatus;
  static const enumtype AffirmStatus =
    TagType_enumtype_AffirmStatus;
  static const enumtype UnderlyingStrikeCurrency =
    TagType_enumtype_UnderlyingStrikeCurrency;
  static const enumtype LegStrikeCurrency =
    TagType_enumtype_LegStrikeCurrency;
  static const enumtype TimeBracket =
    TagType_enumtype_TimeBracket;
  static const enumtype CollAction =
    TagType_enumtype_CollAction;
  static const enumtype CollInquiryStatus =
    TagType_enumtype_CollInquiryStatus;
  static const enumtype CollInquiryResult =
    TagType_enumtype_CollInquiryResult;
  static const enumtype StrikeCurrency =
    TagType_enumtype_StrikeCurrency;
  static const enumtype NoNested3PartyIDs =
    TagType_enumtype_NoNested3PartyIDs;
  static const enumtype Nested3PartyID =
    TagType_enumtype_Nested3PartyID;
  static const enumtype Nested3PartyIDSource =
    TagType_enumtype_Nested3PartyIDSource;
  static const enumtype Nested3PartyRole =
    TagType_enumtype_Nested3PartyRole;
  static const enumtype NoNested3PartySubIDs =
    TagType_enumtype_NoNested3PartySubIDs;
  static const enumtype Nested3PartySubID =
    TagType_enumtype_Nested3PartySubID;
  static const enumtype Nested3PartySubIDType =
    TagType_enumtype_Nested3PartySubIDType;
  static const enumtype LegContractSettlMonth =
    TagType_enumtype_LegContractSettlMonth;
  static const enumtype LegInterestAccrualDate =
    TagType_enumtype_LegInterestAccrualDate;
  static const enumtype FilePath =
    TagType_enumtype_FilePath;
  static const enumtype SoftwareName =
    TagType_enumtype_SoftwareName;
  static const enumtype SoftwareVersion =
    TagType_enumtype_SoftwareVersion;
  static const enumtype SoftwareKey =
    TagType_enumtype_SoftwareKey;
  static const enumtype ExchangeSuffix =
    TagType_enumtype_ExchangeSuffix;
  static const enumtype ExchangeID =
    TagType_enumtype_ExchangeID;
  static const enumtype ExchangeName =
    TagType_enumtype_ExchangeName;
  static const enumtype ExchangeProperty =
    TagType_enumtype_ExchangeProperty;
  static const enumtype SettlementGroupID =
    TagType_enumtype_SettlementGroupID;
  static const enumtype InstrumentStatus =
    TagType_enumtype_InstrumentStatus;
  static const enumtype TradingSegmentSN =
    TagType_enumtype_TradingSegmentSN;
  static const enumtype EnterTime =
    TagType_enumtype_EnterTime;
  static const enumtype EnterReason =
    TagType_enumtype_EnterReason;
  static const enumtype InstrumentID =
    TagType_enumtype_InstrumentID;
  static const enumtype InstrumentName =
    TagType_enumtype_InstrumentName;
  static const enumtype ExchangeInstID =
    TagType_enumtype_ExchangeInstID;
  static const enumtype ProductID =
    TagType_enumtype_ProductID;
  static const enumtype ProductClass =
    TagType_enumtype_ProductClass;
  static const enumtype DeliveryYear =
    TagType_enumtype_DeliveryYear;
  static const enumtype DeliveryMonth =
    TagType_enumtype_DeliveryMonth;
  static const enumtype MaxMarketOrderVolume =
    TagType_enumtype_MaxMarketOrderVolume;
  static const enumtype MinMarketOrderVolume =
    TagType_enumtype_MinMarketOrderVolume;
  static const enumtype MaxLimitOrderVolume =
    TagType_enumtype_MaxLimitOrderVolume;
  static const enumtype MinLimitOrderVolume =
    TagType_enumtype_MinLimitOrderVolume;
  static const enumtype VolumeMultiple =
    TagType_enumtype_VolumeMultiple;
  static const enumtype PriceTick =
    TagType_enumtype_PriceTick;
  static const enumtype CreateDate =
    TagType_enumtype_CreateDate;
  static const enumtype OpenDate =
    TagType_enumtype_OpenDate;
  static const enumtype StartDelivDate =
    TagType_enumtype_StartDelivDate;
  static const enumtype EndDelivDate =
    TagType_enumtype_EndDelivDate;
  static const enumtype InstLifePhase =
    TagType_enumtype_InstLifePhase;
  static const enumtype IsTrading =
    TagType_enumtype_IsTrading;
  static const enumtype PositionType =
    TagType_enumtype_PositionType;
  static const enumtype PositionDateType =
    TagType_enumtype_PositionDateType;
  static const enumtype MaxMarginSideAlgorithm =
    TagType_enumtype_MaxMarginSideAlgorithm;
  static const enumtype LongMarginRatio =
    TagType_enumtype_LongMarginRatio;
  static const enumtype ShortMarginRatio =
    TagType_enumtype_ShortMarginRatio;
  static const enumtype UnderlyingInstrID =
    TagType_enumtype_UnderlyingInstrID;
  static const enumtype OptionsType =
    TagType_enumtype_OptionsType;
  static const enumtype UnderlyingMultiple =
    TagType_enumtype_UnderlyingMultiple;
  static const enumtype CombinationType =
    TagType_enumtype_CombinationType;
  static const enumtype InvestorRange =
    TagType_enumtype_InvestorRange;
  static const enumtype BrokerID =
    TagType_enumtype_BrokerID;
  static const enumtype InvestorID =
    TagType_enumtype_InvestorID;
  static const enumtype OpenRatioByMoney =
    TagType_enumtype_OpenRatioByMoney;
  static const enumtype OpenRatioByVolume =
    TagType_enumtype_OpenRatioByVolume;
  static const enumtype CloseRatioByMoney =
    TagType_enumtype_CloseRatioByMoney;
  static const enumtype CloseRatioByVolume =
    TagType_enumtype_CloseRatioByVolume;
  static const enumtype CloseTodayRatioByMoney =
    TagType_enumtype_CloseTodayRatioByMoney;
  static const enumtype CloseTodayRatioByVolume =
    TagType_enumtype_CloseTodayRatioByVolume;
  static const enumtype StrikeRatioByMoney =
    TagType_enumtype_StrikeRatioByMoney;
  static const enumtype StrikeRatioByVolume =
    TagType_enumtype_StrikeRatioByVolume;
  static const enumtype HedgeFlag =
    TagType_enumtype_HedgeFlag;
  static const enumtype LongMarginRatioByMoney =
    TagType_enumtype_LongMarginRatioByMoney;
  static const enumtype LongMarginRatioByVolume =
    TagType_enumtype_LongMarginRatioByVolume;
  static const enumtype ShortMarginRatioByMoney =
    TagType_enumtype_ShortMarginRatioByMoney;
  static const enumtype ShortMarginRatioByVolume =
    TagType_enumtype_ShortMarginRatioByVolume;
  static const enumtype IsRelative =
    TagType_enumtype_IsRelative;
  static const enumtype FixedMargin =
    TagType_enumtype_FixedMargin;
  static const enumtype MiniMargin =
    TagType_enumtype_MiniMargin;
  static const enumtype Royalty =
    TagType_enumtype_Royalty;
  static const enumtype ExchFixedMargin =
    TagType_enumtype_ExchFixedMargin;
  static const enumtype ExchMiniMargin =
    TagType_enumtype_ExchMiniMargin;
  static const enumtype TradingDay =
    TagType_enumtype_TradingDay;
  static const enumtype LastPrice =
    TagType_enumtype_LastPrice;
  static const enumtype PreSettlementPrice =
    TagType_enumtype_PreSettlementPrice;
  static const enumtype PreClosePrice =
    TagType_enumtype_PreClosePrice;
  static const enumtype PreOpenInterest =
    TagType_enumtype_PreOpenInterest;
  static const enumtype OpenPrice =
    TagType_enumtype_OpenPrice;
  static const enumtype HighestPrice =
    TagType_enumtype_HighestPrice;
  static const enumtype LowestPrice =
    TagType_enumtype_LowestPrice;
  static const enumtype Volume =
    TagType_enumtype_Volume;
  static const enumtype Turnover =
    TagType_enumtype_Turnover;
  static const enumtype ClosePrice =
    TagType_enumtype_ClosePrice;
  static const enumtype SettlementPrice =
    TagType_enumtype_SettlementPrice;
  static const enumtype UpperLimitPrice =
    TagType_enumtype_UpperLimitPrice;
  static const enumtype LowerLimitPrice =
    TagType_enumtype_LowerLimitPrice;
  static const enumtype PreDelta =
    TagType_enumtype_PreDelta;
  static const enumtype CurrDelta =
    TagType_enumtype_CurrDelta;
  static const enumtype UpdateTime =
    TagType_enumtype_UpdateTime;
  static const enumtype UpdateMillisec =
    TagType_enumtype_UpdateMillisec;
  static const enumtype BidPrice1 =
    TagType_enumtype_BidPrice1;
  static const enumtype BidVolume1 =
    TagType_enumtype_BidVolume1;
  static const enumtype AskPrice1 =
    TagType_enumtype_AskPrice1;
  static const enumtype AskVolume1 =
    TagType_enumtype_AskVolume1;
  static const enumtype BidPrice2 =
    TagType_enumtype_BidPrice2;
  static const enumtype BidVolume2 =
    TagType_enumtype_BidVolume2;
  static const enumtype AskPrice2 =
    TagType_enumtype_AskPrice2;
  static const enumtype AskVolume2 =
    TagType_enumtype_AskVolume2;
  static const enumtype BidPrice3 =
    TagType_enumtype_BidPrice3;
  static const enumtype BidVolume3 =
    TagType_enumtype_BidVolume3;
  static const enumtype AskPrice3 =
    TagType_enumtype_AskPrice3;
  static const enumtype AskVolume3 =
    TagType_enumtype_AskVolume3;
  static const enumtype BidPrice4 =
    TagType_enumtype_BidPrice4;
  static const enumtype BidVolume4 =
    TagType_enumtype_BidVolume4;
  static const enumtype AskPrice4 =
    TagType_enumtype_AskPrice4;
  static const enumtype AskVolume4 =
    TagType_enumtype_AskVolume4;
  static const enumtype BidPrice5 =
    TagType_enumtype_BidPrice5;
  static const enumtype BidVolume5 =
    TagType_enumtype_BidVolume5;
  static const enumtype AskPrice5 =
    TagType_enumtype_AskPrice5;
  static const enumtype AskVolume5 =
    TagType_enumtype_AskVolume5;
  static const enumtype AveragePrice =
    TagType_enumtype_AveragePrice;
  static const enumtype ActionDay =
    TagType_enumtype_ActionDay;
  static const enumtype ForQuoteSysID =
    TagType_enumtype_ForQuoteSysID;
  static const enumtype ForQuoteTime =
    TagType_enumtype_ForQuoteTime;
  static const enumtype QuoteRef =
    TagType_enumtype_QuoteRef;
  static const enumtype UserID =
    TagType_enumtype_UserID;
  static const enumtype BidPrice =
    TagType_enumtype_BidPrice;
  static const enumtype BidVolume =
    TagType_enumtype_BidVolume;
  static const enumtype AskPrice =
    TagType_enumtype_AskPrice;
  static const enumtype AskVolume =
    TagType_enumtype_AskVolume;
  static const enumtype RequestID =
    TagType_enumtype_RequestID;
  static const enumtype BusinessUnit =
    TagType_enumtype_BusinessUnit;
  static const enumtype BidOffsetFlag =
    TagType_enumtype_BidOffsetFlag;
  static const enumtype AskOffsetFlag =
    TagType_enumtype_AskOffsetFlag;
  static const enumtype BidHedgeFlag =
    TagType_enumtype_BidHedgeFlag;
  static const enumtype AskHedgeFlag =
    TagType_enumtype_AskHedgeFlag;
  static const enumtype QuoteLocalID =
    TagType_enumtype_QuoteLocalID;
  static const enumtype InstallID =
    TagType_enumtype_InstallID;
  static const enumtype NotifySequence =
    TagType_enumtype_NotifySequence;
  static const enumtype OrderSubmitStatus =
    TagType_enumtype_OrderSubmitStatus;
  static const enumtype SettlementID =
    TagType_enumtype_SettlementID;
  static const enumtype InsertTime =
    TagType_enumtype_InsertTime;
  static const enumtype CancelTime =
    TagType_enumtype_CancelTime;
  static const enumtype SequenceNo =
    TagType_enumtype_SequenceNo;
  static const enumtype BidOrderSysID =
    TagType_enumtype_BidOrderSysID;
  static const enumtype AskOrderSysID =
    TagType_enumtype_AskOrderSysID;
  static const enumtype UserProductInfo =
    TagType_enumtype_UserProductInfo;
  static const enumtype StatusMsg =
    TagType_enumtype_StatusMsg;
  static const enumtype ActiveUserID =
    TagType_enumtype_ActiveUserID;
  static const enumtype BrokerQuoteSeq =
    TagType_enumtype_BrokerQuoteSeq;
  static const enumtype OrderRef =
    TagType_enumtype_OrderRef;
  static const enumtype OrderPriceType =
    TagType_enumtype_OrderPriceType;
  static const enumtype Direction =
    TagType_enumtype_Direction;
  static const enumtype CombOffsetFlag =
    TagType_enumtype_CombOffsetFlag;
  static const enumtype CombHedgeFlag =
    TagType_enumtype_CombHedgeFlag;
  static const enumtype LimitPrice =
    TagType_enumtype_LimitPrice;
  static const enumtype VolumeTotalOriginal =
    TagType_enumtype_VolumeTotalOriginal;
  static const enumtype TimeCondition =
    TagType_enumtype_TimeCondition;
  static const enumtype GTDDate =
    TagType_enumtype_GTDDate;
  static const enumtype VolumeCondition =
    TagType_enumtype_VolumeCondition;
  static const enumtype MinVolume =
    TagType_enumtype_MinVolume;
  static const enumtype ContingentCondition =
    TagType_enumtype_ContingentCondition;
  static const enumtype StopPrice =
    TagType_enumtype_StopPrice;
  static const enumtype ForceCloseReason =
    TagType_enumtype_ForceCloseReason;
  static const enumtype IsAutoSuspend =
    TagType_enumtype_IsAutoSuspend;
  static const enumtype OrderLocalID =
    TagType_enumtype_OrderLocalID;
  static const enumtype ParticipantID =
    TagType_enumtype_ParticipantID;
  static const enumtype ClientID =
    TagType_enumtype_ClientID;
  static const enumtype Null =
    TagType_enumtype_Null;
  static const enumtype Null2 =
    TagType_enumtype_Null2;
  static const enumtype OrderSysID =
    TagType_enumtype_OrderSysID;
  static const enumtype OrderSource =
    TagType_enumtype_OrderSource;
  static const enumtype OrderStatus =
    TagType_enumtype_OrderStatus;
  static const enumtype OrderType =
    TagType_enumtype_OrderType;
  static const enumtype VolumeTraded =
    TagType_enumtype_VolumeTraded;
  static const enumtype VolumeTotal =
    TagType_enumtype_VolumeTotal;
  static const enumtype ActiveTime =
    TagType_enumtype_ActiveTime;
  static const enumtype QuoteSysID =
    TagType_enumtype_QuoteSysID;
  static const enumtype SuspendTime =
    TagType_enumtype_SuspendTime;
  static const enumtype Null3 =
    TagType_enumtype_Null3;
  static const enumtype ActiveTraderID =
    TagType_enumtype_ActiveTraderID;
  static const enumtype ClearingPartID =
    TagType_enumtype_ClearingPartID;
  static const enumtype FrontID =
    TagType_enumtype_FrontID;
  static const enumtype SessionID =
    TagType_enumtype_SessionID;
  static const enumtype UserForceClose =
    TagType_enumtype_UserForceClose;
  static const enumtype RelativeOrderSysID =
    TagType_enumtype_RelativeOrderSysID;
  static const enumtype ZCETotalTradedVolume =
    TagType_enumtype_ZCETotalTradedVolume;
  static const enumtype IsSwapOrder =
    TagType_enumtype_IsSwapOrder;
  static const enumtype TradeID =
    TagType_enumtype_TradeID;
  static const enumtype TradingRole =
    TagType_enumtype_TradingRole;
  static const enumtype OffsetFlag =
    TagType_enumtype_OffsetFlag;
  static const enumtype VolumeChange =
    TagType_enumtype_VolumeChange;
  static const enumtype TradeTime =
    TagType_enumtype_TradeTime;
  static const enumtype TradeType =
    TagType_enumtype_TradeType;
  static const enumtype PriceSource =
    TagType_enumtype_PriceSource;
  static const enumtype TraderID =
    TagType_enumtype_TraderID;
  static const enumtype BrokerOrderSeq =
    TagType_enumtype_BrokerOrderSeq;
  static const enumtype TradeSource =
    TagType_enumtype_TradeSource;
  static const enumtype Null4 =
    TagType_enumtype_Null4;
  static const enumtype CombInstrumentID =
    TagType_enumtype_CombInstrumentID;
  static const enumtype CloseProfitByDate =
    TagType_enumtype_CloseProfitByDate;
  static const enumtype CloseProfitByTrade =
    TagType_enumtype_CloseProfitByTrade;
  static const enumtype PositionProfitByDate =
    TagType_enumtype_PositionProfitByDate;
  static const enumtype PositionProfitByTrade =
    TagType_enumtype_PositionProfitByTrade;
  static const enumtype Margin =
    TagType_enumtype_Margin;
  static const enumtype MarginRateByMoney =
    TagType_enumtype_MarginRateByMoney;
  static const enumtype MarginRateByVolume =
    TagType_enumtype_MarginRateByVolume;
  static const enumtype StrategyID =
    TagType_enumtype_StrategyID;
  static const enumtype PositionDate =
    TagType_enumtype_PositionDate;
  static const enumtype TodayPosition =
    TagType_enumtype_TodayPosition;
  static const enumtype YdPosition =
    TagType_enumtype_YdPosition;
  static const enumtype Position =
    TagType_enumtype_Position;
  static const enumtype LongFrozen =
    TagType_enumtype_LongFrozen;
  static const enumtype ShortFrozen =
    TagType_enumtype_ShortFrozen;
  static const enumtype LongFrozenAmount =
    TagType_enumtype_LongFrozenAmount;
  static const enumtype ShortFrozenAmount =
    TagType_enumtype_ShortFrozenAmount;
  static const enumtype OpenVolume =
    TagType_enumtype_OpenVolume;
  static const enumtype CloseVolume =
    TagType_enumtype_CloseVolume;
  static const enumtype OpenAmount =
    TagType_enumtype_OpenAmount;
  static const enumtype CloseAmount =
    TagType_enumtype_CloseAmount;
  static const enumtype PositionCost =
    TagType_enumtype_PositionCost;
  static const enumtype PreMargin =
    TagType_enumtype_PreMargin;
  static const enumtype UseMargin =
    TagType_enumtype_UseMargin;
  static const enumtype FrozenMargin =
    TagType_enumtype_FrozenMargin;
  static const enumtype FrozenCash =
    TagType_enumtype_FrozenCash;
  static const enumtype FrozenCommission =
    TagType_enumtype_FrozenCommission;
  static const enumtype CashIn =
    TagType_enumtype_CashIn;
  static const enumtype ExchMargin =
    TagType_enumtype_ExchMargin;
  static const enumtype PositionProfit =
    TagType_enumtype_PositionProfit;
  static const enumtype OpenCost =
    TagType_enumtype_OpenCost;
  static const enumtype CombPosition =
    TagType_enumtype_CombPosition;
  static const enumtype CombLongFrozen =
    TagType_enumtype_CombLongFrozen;
  static const enumtype CombShortFrozen =
    TagType_enumtype_CombShortFrozen;
  static const enumtype StrikeFrozen =
    TagType_enumtype_StrikeFrozen;
  static const enumtype StrikeFrozenAmount =
    TagType_enumtype_StrikeFrozenAmount;
  static const enumtype AbandonFrozen =
    TagType_enumtype_AbandonFrozen;
  static const enumtype AccountID =
    TagType_enumtype_AccountID;
  static const enumtype PreMortgage =
    TagType_enumtype_PreMortgage;
  static const enumtype PreCredit =
    TagType_enumtype_PreCredit;
  static const enumtype PreDeposit =
    TagType_enumtype_PreDeposit;
  static const enumtype InsertDate =
    TagType_enumtype_InsertDate;
  static const enumtype PreBalance =
    TagType_enumtype_PreBalance;
  static const enumtype InterestBase =
    TagType_enumtype_InterestBase;
  static const enumtype Interest =
    TagType_enumtype_Interest;
  static const enumtype Deposit =
    TagType_enumtype_Deposit;
  static const enumtype Withdraw =
    TagType_enumtype_Withdraw;
  static const enumtype CurrMargin =
    TagType_enumtype_CurrMargin;
  static const enumtype Null5 =
    TagType_enumtype_Null5;
  static const enumtype CloseProfit =
    TagType_enumtype_CloseProfit;
  static const enumtype Balance =
    TagType_enumtype_Balance;
  static const enumtype Available =
    TagType_enumtype_Available;
  static const enumtype WithdrawQuota =
    TagType_enumtype_WithdrawQuota;
  static const enumtype Reserve =
    TagType_enumtype_Reserve;
  static const enumtype Credit =
    TagType_enumtype_Credit;
  static const enumtype Mortgage =
    TagType_enumtype_Mortgage;
  static const enumtype ExchangeMargin =
    TagType_enumtype_ExchangeMargin;
  static const enumtype DeliveryMargin =
    TagType_enumtype_DeliveryMargin;
  static const enumtype ExchangeDeliveryMargin =
    TagType_enumtype_ExchangeDeliveryMargin;
  static const enumtype ReserveBalance =
    TagType_enumtype_ReserveBalance;
  static const enumtype CurrencyID =
    TagType_enumtype_CurrencyID;
  static const enumtype PreFundMortgageIn =
    TagType_enumtype_PreFundMortgageIn;
  static const enumtype PreFundMortgageOut =
    TagType_enumtype_PreFundMortgageOut;
  static const enumtype FundMortgageIn =
    TagType_enumtype_FundMortgageIn;
  static const enumtype FundMortgageOut =
    TagType_enumtype_FundMortgageOut;
  static const enumtype FundMortgageAvailable =
    TagType_enumtype_FundMortgageAvailable;
  static const enumtype MortgageableFund =
    TagType_enumtype_MortgageableFund;
  static const enumtype SpecProductMargin =
    TagType_enumtype_SpecProductMargin;
  static const enumtype SpecProductFrozenMargin =
    TagType_enumtype_SpecProductFrozenMargin;
  static const enumtype SpecProductCommission =
    TagType_enumtype_SpecProductCommission;
  static const enumtype SpecProductFrozenCommission =
    TagType_enumtype_SpecProductFrozenCommission;
  static const enumtype SpecProductPositionProfit =
    TagType_enumtype_SpecProductPositionProfit;
  static const enumtype SpecProductCloseProfit =
    TagType_enumtype_SpecProductCloseProfit;
  static const enumtype SpecProductPositionProfitByAlg =
    TagType_enumtype_SpecProductPositionProfitByAlg;
  static const enumtype SpecProductExchangeMargin =
    TagType_enumtype_SpecProductExchangeMargin;
  static const enumtype OptionCloseProfit =
    TagType_enumtype_OptionCloseProfit;
  static const enumtype OptionValue =
    TagType_enumtype_OptionValue;
  static const enumtype OperCode =
    TagType_enumtype_OperCode;
  static const enumtype OperName =
    TagType_enumtype_OperName;
  static const enumtype Mobile =
    TagType_enumtype_Mobile;
  static const enumtype Note =
    TagType_enumtype_Note;
  static const enumtype Passwd =
    TagType_enumtype_Passwd;
  static const enumtype OperType =
    TagType_enumtype_OperType;
  static const enumtype IfRestrict =
    TagType_enumtype_IfRestrict;
  static const enumtype FailNumber =
    TagType_enumtype_FailNumber;
  static const enumtype LoginIp =
    TagType_enumtype_LoginIp;
  static const enumtype LoginMacAddr =
    TagType_enumtype_LoginMacAddr;
  static const enumtype LoginTime =
    TagType_enumtype_LoginTime;
  static const enumtype LoginDate =
    TagType_enumtype_LoginDate;
  static const enumtype OperatorToken =
    TagType_enumtype_OperatorToken;
  static const enumtype Smatrix =
    TagType_enumtype_Smatrix;
  static const enumtype ForceLogoutReason =
    TagType_enumtype_ForceLogoutReason;
  static const enumtype FundAccount =
    TagType_enumtype_FundAccount;
  static const enumtype Status =
    TagType_enumtype_Status;
  static const enumtype AccountName =
    TagType_enumtype_AccountName;
  static const enumtype LogoutDate =
    TagType_enumtype_LogoutDate;
  static const enumtype LogoutTime =
    TagType_enumtype_LogoutTime;
  static const enumtype StrategyName =
    TagType_enumtype_StrategyName;
  static const enumtype StrategyValueType =
    TagType_enumtype_StrategyValueType;
  static const enumtype StrategyValue =
    TagType_enumtype_StrategyValue;
  static const enumtype StrategyPlugin =
    TagType_enumtype_StrategyPlugin;
  static const enumtype Expiry =
    TagType_enumtype_Expiry;
  static const enumtype ActionFlag =
    TagType_enumtype_ActionFlag;
  static const enumtype ErrorID =
    TagType_enumtype_ErrorID;
  static const enumtype ErrorMsg =
    TagType_enumtype_ErrorMsg;
  static const enumtype IsLast =
    TagType_enumtype_IsLast;
  static const enumtype NRequestID =
    TagType_enumtype_NRequestID;
  static const enumtype OrderActionRef =
    TagType_enumtype_OrderActionRef;
  static const enumtype ForQuoteRef =
    TagType_enumtype_ForQuoteRef;
  static const enumtype QuoteActionRef =
    TagType_enumtype_QuoteActionRef;
  static const enumtype ActionDate =
    TagType_enumtype_ActionDate;
  static const enumtype ActionTime =
    TagType_enumtype_ActionTime;
  static const enumtype ActionLocalID =
    TagType_enumtype_ActionLocalID;
  static const enumtype OrderActionStatus =
    TagType_enumtype_OrderActionStatus;
  static const enumtype PosiDirection =
    TagType_enumtype_PosiDirection;
  static const enumtype InsertTimeStart =
    TagType_enumtype_InsertTimeStart;
  static const enumtype InsertTimeEnd =
    TagType_enumtype_InsertTimeEnd;
  static const enumtype InterfaceProductInfo =
    TagType_enumtype_InterfaceProductInfo;
  static const enumtype ProtocolInfo =
    TagType_enumtype_ProtocolInfo;
  static const enumtype MacAddress =
    TagType_enumtype_MacAddress;
  static const enumtype OneTimePassword =
    TagType_enumtype_OneTimePassword;
  static const enumtype ClientIPAddress =
    TagType_enumtype_ClientIPAddress;
  static const enumtype ForQuoteLocalID =
    TagType_enumtype_ForQuoteLocalID;
  static const enumtype ForQuoteStatus =
    TagType_enumtype_ForQuoteStatus;
  static const enumtype BrokerForQutoSeq =
    TagType_enumtype_BrokerForQutoSeq;
  static const enumtype MaxOrderRef =
    TagType_enumtype_MaxOrderRef;
  static const enumtype SHFETime =
    TagType_enumtype_SHFETime;
  static const enumtype DCETime =
    TagType_enumtype_DCETime;
  static const enumtype CZCETime =
    TagType_enumtype_CZCETime;
  static const enumtype FFEXTime =
    TagType_enumtype_FFEXTime;
  static const enumtype INETime =
    TagType_enumtype_INETime;
  static const enumtype PositionCtrl =
    TagType_enumtype_PositionCtrl;
  static const enumtype TheoPx =
    TagType_enumtype_TheoPx;
  static const enumtype QuoteBidPx =
    TagType_enumtype_QuoteBidPx;
  static const enumtype QuoteBidSz =
    TagType_enumtype_QuoteBidSz;
  static const enumtype QuoteAskPx =
    TagType_enumtype_QuoteAskPx;
  static const enumtype QuoteAskSz =
    TagType_enumtype_QuoteAskSz;
  static const enumtype BidOrigSz =
    TagType_enumtype_BidOrigSz;
  static const enumtype AskOrigSz =
    TagType_enumtype_AskOrigSz;
  static const enumtype LocalTimeShift =
    TagType_enumtype_LocalTimeShift;
  static const enumtype IsSpread =
    TagType_enumtype_IsSpread;
  static const enumtype IsCombo =
    TagType_enumtype_IsCombo;
  static const enumtype IsInit =
    TagType_enumtype_IsInit;
  static const enumtype PrevTradingDay =
    TagType_enumtype_PrevTradingDay;
  static const enumtype PrevVolume =
    TagType_enumtype_PrevVolume;
  static const enumtype PrevTurnover =
    TagType_enumtype_PrevTurnover;
  static const enumtype PrevAvgPx =
    TagType_enumtype_PrevAvgPx;
  static const enumtype AvgVol =
    TagType_enumtype_AvgVol;
  static const enumtype PrevAvgVol =
    TagType_enumtype_PrevAvgVol;
  static const enumtype SettleVol =
    TagType_enumtype_SettleVol;
  static const enumtype PrevSettleVol =
    TagType_enumtype_PrevSettleVol;
  static const enumtype LastAvgPx =
    TagType_enumtype_LastAvgPx;
  static const enumtype LastVolume =
    TagType_enumtype_LastVolume;
  static const enumtype LastBuyVolume =
    TagType_enumtype_LastBuyVolume;
  static const enumtype LastSellVolume =
    TagType_enumtype_LastSellVolume;
  static const enumtype HighPx1Min =
    TagType_enumtype_HighPx1Min;
  static const enumtype LowPx1Min =
    TagType_enumtype_LowPx1Min;
  static const enumtype HighPx2Min =
    TagType_enumtype_HighPx2Min;
  static const enumtype LowPx2Min =
    TagType_enumtype_LowPx2Min;
  static const enumtype HighPx5Min =
    TagType_enumtype_HighPx5Min;
  static const enumtype LowPx5Min =
    TagType_enumtype_LowPx5Min;
  static const enumtype SumBuyPxVolume =
    TagType_enumtype_SumBuyPxVolume;
  static const enumtype SumSellPxVolume =
    TagType_enumtype_SumSellPxVolume;
  static const enumtype NBuy =
    TagType_enumtype_NBuy;
  static const enumtype NSell =
    TagType_enumtype_NSell;
  static const enumtype NBookUpdates =
    TagType_enumtype_NBookUpdates;
  static const enumtype BeginDT =
    TagType_enumtype_BeginDT;
  static const enumtype EndDT =
    TagType_enumtype_EndDT;
  static const enumtype BeginDTStr =
    TagType_enumtype_BeginDTStr;
  static const enumtype EndDTStr =
    TagType_enumtype_EndDTStr;
  static const enumtype DTStr =
    TagType_enumtype_DTStr;
  static const enumtype BuyTurnover =
    TagType_enumtype_BuyTurnover;
  static const enumtype SellTurnover =
    TagType_enumtype_SellTurnover;
  static const enumtype BSTDiff =
    TagType_enumtype_BSTDiff;
  static const enumtype LastTurnover =
    TagType_enumtype_LastTurnover;
  static const enumtype LastBuyTurnover =
    TagType_enumtype_LastBuyTurnover;
  static const enumtype LastSellTurnover =
    TagType_enumtype_LastSellTurnover;
  static const enumtype LastBSTDiff =
    TagType_enumtype_LastBSTDiff;
  static const enumtype TotTurnover =
    TagType_enumtype_TotTurnover;
  static const enumtype TotBuyTurnover =
    TagType_enumtype_TotBuyTurnover;
  static const enumtype TotSellTurnover =
    TagType_enumtype_TotSellTurnover;
  static const enumtype TotBSTDiff =
    TagType_enumtype_TotBSTDiff;
  static const enumtype DateStr =
    TagType_enumtype_DateStr;
  static const enumtype TimeStr =
    TagType_enumtype_TimeStr;
  static const enumtype DateTimeStr =
    TagType_enumtype_DateTimeStr;
  static const enumtype DVolume =
    TagType_enumtype_DVolume;
  static const enumtype DTotVolume =
    TagType_enumtype_DTotVolume;
  static const enumtype LocalToUtcOffsetHours =
    TagType_enumtype_LocalToUtcOffsetHours;
  static const enumtype BeijingToUtcOffsetHours =
    TagType_enumtype_BeijingToUtcOffsetHours;
  static const enumtype ChicagoToUtcOffsetHours =
    TagType_enumtype_ChicagoToUtcOffsetHours;
  static const enumtype NewyorkToUtcOffsetHours =
    TagType_enumtype_NewyorkToUtcOffsetHours;
  static const enumtype DaylightSavingFlag =
    TagType_enumtype_DaylightSavingFlag;
  static const enumtype StartFlag =
    TagType_enumtype_StartFlag;
  static const enumtype StartTopicMgrFlag =
    TagType_enumtype_StartTopicMgrFlag;
  static const enumtype ReqAllInstrsFlag =
    TagType_enumtype_ReqAllInstrsFlag;
  static const enumtype SubAllInstrsMktDataFlag =
    TagType_enumtype_SubAllInstrsMktDataFlag;
  static const enumtype UpdateInstrFlag =
    TagType_enumtype_UpdateInstrFlag;
  static const enumtype LogMktDataFlag =
    TagType_enumtype_LogMktDataFlag;
  static const enumtype LogOrderFlag =
    TagType_enumtype_LogOrderFlag;
  static const enumtype LogBarFlag =
    TagType_enumtype_LogBarFlag;
  static const enumtype AddingInstrOnRspFlag =
    TagType_enumtype_AddingInstrOnRspFlag;
  static const enumtype AddAllIndicatorFlag =
    TagType_enumtype_AddAllIndicatorFlag;
  static const enumtype LoadHistForIndicatorFlag =
    TagType_enumtype_LoadHistForIndicatorFlag;
  static const enumtype SaveBar60sToMongoFlag =
    TagType_enumtype_SaveBar60sToMongoFlag;
  static const enumtype SaveBar60sToSqlFlag =
    TagType_enumtype_SaveBar60sToSqlFlag;
  static const enumtype InstrIndicatorSpans =
    TagType_enumtype_InstrIndicatorSpans;
  static const enumtype MktDataInstruments =
    TagType_enumtype_MktDataInstruments;
  static const enumtype TradingInstruments =
    TagType_enumtype_TradingInstruments;
  static const enumtype MaxSeqIdPerSecond =
    TagType_enumtype_MaxSeqIdPerSecond;
  static const enumtype MaxOrdersSent =
    TagType_enumtype_MaxOrdersSent;
  static const enumtype MaxOrdersCxled =
    TagType_enumtype_MaxOrdersCxled;
  static const enumtype Areas =
    TagType_enumtype_Areas;
  static const enumtype AreasIntdate =
    TagType_enumtype_AreasIntdate;
  static const enumtype AreasStr =
    TagType_enumtype_AreasStr;
  static const enumtype Concepts =
    TagType_enumtype_Concepts;
  static const enumtype ConceptsIntdate =
    TagType_enumtype_ConceptsIntdate;
  static const enumtype ConceptsStr =
    TagType_enumtype_ConceptsStr;
  static const enumtype Industries =
    TagType_enumtype_Industries;
  static const enumtype IndustriesIntdate =
    TagType_enumtype_IndustriesIntdate;
  static const enumtype IndustriesStr =
    TagType_enumtype_IndustriesStr;
  static const enumtype ConId =
    TagType_enumtype_ConId;
  static const enumtype LastTradeDate =
    TagType_enumtype_LastTradeDate;
  static const enumtype Right =
    TagType_enumtype_Right;
  static const enumtype PrimaryExchange =
    TagType_enumtype_PrimaryExchange;
  static const enumtype LocalSymbol =
    TagType_enumtype_LocalSymbol;
  static const enumtype TradingClass =
    TagType_enumtype_TradingClass;
  static const enumtype IncludeExpired =
    TagType_enumtype_IncludeExpired;
  static const enumtype ComboLegsDescrip =
    TagType_enumtype_ComboLegsDescrip;
  static const enumtype MarketName =
    TagType_enumtype_MarketName;
  static const enumtype OrderTypes =
    TagType_enumtype_OrderTypes;
  static const enumtype ValidExchanges =
    TagType_enumtype_ValidExchanges;
  static const enumtype UnderConId =
    TagType_enumtype_UnderConId;
  static const enumtype LongName =
    TagType_enumtype_LongName;
  static const enumtype ContractMonth =
    TagType_enumtype_ContractMonth;
  static const enumtype Industry =
    TagType_enumtype_Industry;
  static const enumtype Category =
    TagType_enumtype_Category;
  static const enumtype SubCategory =
    TagType_enumtype_SubCategory;
  static const enumtype TimeZoneId =
    TagType_enumtype_TimeZoneId;
  static const enumtype TradingHours =
    TagType_enumtype_TradingHours;
  static const enumtype LiquidHours =
    TagType_enumtype_LiquidHours;
  static const enumtype EvRule =
    TagType_enumtype_EvRule;
  static const enumtype EvMultiplier =
    TagType_enumtype_EvMultiplier;
  static const enumtype Cusip =
    TagType_enumtype_Cusip;
  static const enumtype Ratings =
    TagType_enumtype_Ratings;
  static const enumtype DescAppend =
    TagType_enumtype_DescAppend;
  static const enumtype BondType =
    TagType_enumtype_BondType;
  static const enumtype CouponType =
    TagType_enumtype_CouponType;
  static const enumtype Callable =
    TagType_enumtype_Callable;
  static const enumtype Putable =
    TagType_enumtype_Putable;
  static const enumtype Coupon =
    TagType_enumtype_Coupon;
  static const enumtype Convertible =
    TagType_enumtype_Convertible;
  static const enumtype Maturity =
    TagType_enumtype_Maturity;
  static const enumtype NextOptionDate =
    TagType_enumtype_NextOptionDate;
  static const enumtype NextOptionType =
    TagType_enumtype_NextOptionType;
  static const enumtype NextOptionPartial =
    TagType_enumtype_NextOptionPartial;
  static const enumtype Notes =
    TagType_enumtype_Notes;
  static const enumtype Rank =
    TagType_enumtype_Rank;
  static const enumtype Distance =
    TagType_enumtype_Distance;
  static const enumtype Benchmark =
    TagType_enumtype_Benchmark;
  static const enumtype Projection =
    TagType_enumtype_Projection;
  static const enumtype LegsStr =
    TagType_enumtype_LegsStr;
  static const enumtype Time =
    TagType_enumtype_Time;
  static const enumtype Shares =
    TagType_enumtype_Shares;
  static const enumtype PermId =
    TagType_enumtype_PermId;
  static const enumtype Liquidation =
    TagType_enumtype_Liquidation;
  static const enumtype InitMargin =
    TagType_enumtype_InitMargin;
  static const enumtype MaintMargin =
    TagType_enumtype_MaintMargin;
  static const enumtype EquityWithLoan =
    TagType_enumtype_EquityWithLoan;
  static const enumtype MinCommission =
    TagType_enumtype_MinCommission;
  static const enumtype MaxCommission =
    TagType_enumtype_MaxCommission;
  static const enumtype CommissionCurrency =
    TagType_enumtype_CommissionCurrency;
  static const enumtype WarningText =
    TagType_enumtype_WarningText;
  static const enumtype NumberOfRows =
    TagType_enumtype_NumberOfRows;
  static const enumtype LocationCode =
    TagType_enumtype_LocationCode;
  static const enumtype ScanCode =
    TagType_enumtype_ScanCode;
  static const enumtype AbovePrice =
    TagType_enumtype_AbovePrice;
  static const enumtype BelowPrice =
    TagType_enumtype_BelowPrice;
  static const enumtype AboveVolume =
    TagType_enumtype_AboveVolume;
  static const enumtype MarketCapAbove =
    TagType_enumtype_MarketCapAbove;
  static const enumtype MarketCapBelow =
    TagType_enumtype_MarketCapBelow;
  static const enumtype MoodyRatingAbove =
    TagType_enumtype_MoodyRatingAbove;
  static const enumtype MoodyRatingBelow =
    TagType_enumtype_MoodyRatingBelow;
  static const enumtype SpRatingAbove =
    TagType_enumtype_SpRatingAbove;
  static const enumtype SpRatingBelow =
    TagType_enumtype_SpRatingBelow;
  static const enumtype MaturityDateAbove =
    TagType_enumtype_MaturityDateAbove;
  static const enumtype MaturityDateBelow =
    TagType_enumtype_MaturityDateBelow;
  static const enumtype CouponRateAbove =
    TagType_enumtype_CouponRateAbove;
  static const enumtype CouponRateBelow =
    TagType_enumtype_CouponRateBelow;
  static const enumtype ExcludeConvertible =
    TagType_enumtype_ExcludeConvertible;
  static const enumtype AverageOptionVolumeAbove =
    TagType_enumtype_AverageOptionVolumeAbove;
  static const enumtype ScannerSettingPairs =
    TagType_enumtype_ScannerSettingPairs;
  static const enumtype StockTypeFilter =
    TagType_enumtype_StockTypeFilter;
  static const enumtype ComboLegsStr =
    TagType_enumtype_ComboLegsStr;
  static const enumtype UndlyCompStr =
    TagType_enumtype_UndlyCompStr;
  static const enumtype SecIdListStr =
    TagType_enumtype_SecIdListStr;
  static const enumtype Action =
    TagType_enumtype_Action;
  static const enumtype TotalQuantity =
    TagType_enumtype_TotalQuantity;
  static const enumtype AuxPrice =
    TagType_enumtype_AuxPrice;
  static const enumtype ActiveStartTime =
    TagType_enumtype_ActiveStartTime;
  static const enumtype ActiveStopTime =
    TagType_enumtype_ActiveStopTime;
  static const enumtype OCAGroup =
    TagType_enumtype_OCAGroup;
  static const enumtype OCAType =
    TagType_enumtype_OCAType;
  static const enumtype Transmit =
    TagType_enumtype_Transmit;
  static const enumtype ParentId =
    TagType_enumtype_ParentId;
  static const enumtype BlockOrder =
    TagType_enumtype_BlockOrder;
  static const enumtype SweepToFill =
    TagType_enumtype_SweepToFill;
  static const enumtype DisplaySize =
    TagType_enumtype_DisplaySize;
  static const enumtype TriggerMethod =
    TagType_enumtype_TriggerMethod;
  static const enumtype OutsideRth =
    TagType_enumtype_OutsideRth;
  static const enumtype Hidden =
    TagType_enumtype_Hidden;
  static const enumtype GoodAfterTime =
    TagType_enumtype_GoodAfterTime;
  static const enumtype GoodTillDate =
    TagType_enumtype_GoodTillDate;
  static const enumtype Rule80A =
    TagType_enumtype_Rule80A;
  static const enumtype AllOrNone =
    TagType_enumtype_AllOrNone;
  static const enumtype PercentOffset =
    TagType_enumtype_PercentOffset;
  static const enumtype OverridePercent =
    TagType_enumtype_OverridePercent;
  static const enumtype TrailStopPrice =
    TagType_enumtype_TrailStopPrice;
  static const enumtype TrailingPercent =
    TagType_enumtype_TrailingPercent;
  static const enumtype FaMethod =
    TagType_enumtype_FaMethod;
  static const enumtype FaGroup =
    TagType_enumtype_FaGroup;
  static const enumtype FaProfile =
    TagType_enumtype_FaProfile;
  static const enumtype FaPercentage =
    TagType_enumtype_FaPercentage;
  static const enumtype OpenClose =
    TagType_enumtype_OpenClose;
  static const enumtype Origin =
    TagType_enumtype_Origin;
  static const enumtype ShortSaleSlot =
    TagType_enumtype_ShortSaleSlot;
  static const enumtype DesignatedLocation =
    TagType_enumtype_DesignatedLocation;
  static const enumtype ExemptCode =
    TagType_enumtype_ExemptCode;
  static const enumtype DiscretionaryAmt =
    TagType_enumtype_DiscretionaryAmt;
  static const enumtype ETradeOnly =
    TagType_enumtype_ETradeOnly;
  static const enumtype FirmQuoteOnly =
    TagType_enumtype_FirmQuoteOnly;
  static const enumtype NbboPriceCap =
    TagType_enumtype_NbboPriceCap;
  static const enumtype OptOutSmartRouting =
    TagType_enumtype_OptOutSmartRouting;
  static const enumtype AuctionStratety =
    TagType_enumtype_AuctionStratety;
  static const enumtype StartingPrice =
    TagType_enumtype_StartingPrice;
  static const enumtype StockRefPrice =
    TagType_enumtype_StockRefPrice;
  static const enumtype StockRangeLower =
    TagType_enumtype_StockRangeLower;
  static const enumtype StockRangeUpper =
    TagType_enumtype_StockRangeUpper;
  static const enumtype RandomizeSize =
    TagType_enumtype_RandomizeSize;
  static const enumtype RandomizePrice =
    TagType_enumtype_RandomizePrice;
  static const enumtype Volatility =
    TagType_enumtype_Volatility;
  static const enumtype VolatilityType =
    TagType_enumtype_VolatilityType;
  static const enumtype DeltaNeutralOrderType =
    TagType_enumtype_DeltaNeutralOrderType;
  static const enumtype DeltaNeutralAuxPrice =
    TagType_enumtype_DeltaNeutralAuxPrice;
  static const enumtype DeltaNeutralConId =
    TagType_enumtype_DeltaNeutralConId;
  static const enumtype DeltaNeutralSettlingFirm =
    TagType_enumtype_DeltaNeutralSettlingFirm;
  static const enumtype DeltaNeutralClearingAccount =
    TagType_enumtype_DeltaNeutralClearingAccount;
  static const enumtype DeltaNeutralClearingIntent =
    TagType_enumtype_DeltaNeutralClearingIntent;
  static const enumtype DeltaNeutralOpenClose =
    TagType_enumtype_DeltaNeutralOpenClose;
  static const enumtype DeltaNeutralShortSale =
    TagType_enumtype_DeltaNeutralShortSale;
  static const enumtype DeltaNeutralShortSaleSlot =
    TagType_enumtype_DeltaNeutralShortSaleSlot;
  static const enumtype DeltaNeutralDesignatedLocation =
    TagType_enumtype_DeltaNeutralDesignatedLocation;
  static const enumtype ContinuousUpdate =
    TagType_enumtype_ContinuousUpdate;
  static const enumtype ReferencePriceType =
    TagType_enumtype_ReferencePriceType;
  static const enumtype BasisPoints =
    TagType_enumtype_BasisPoints;
  static const enumtype BasisPointsType =
    TagType_enumtype_BasisPointsType;
  static const enumtype ScaleInitLevelSize =
    TagType_enumtype_ScaleInitLevelSize;
  static const enumtype ScaleSubsLevelSize =
    TagType_enumtype_ScaleSubsLevelSize;
  static const enumtype ScalePriceIncrement =
    TagType_enumtype_ScalePriceIncrement;
  static const enumtype ScalePriceAdjustValue =
    TagType_enumtype_ScalePriceAdjustValue;
  static const enumtype ScalePriceAdjustInterval =
    TagType_enumtype_ScalePriceAdjustInterval;
  static const enumtype ScaleProfitOffset =
    TagType_enumtype_ScaleProfitOffset;
  static const enumtype ScaleAutoReset =
    TagType_enumtype_ScaleAutoReset;
  static const enumtype ScaleInitPosition =
    TagType_enumtype_ScaleInitPosition;
  static const enumtype ScaleInitFillQty =
    TagType_enumtype_ScaleInitFillQty;
  static const enumtype ScaleRandomPercent =
    TagType_enumtype_ScaleRandomPercent;
  static const enumtype ScaleTable =
    TagType_enumtype_ScaleTable;
  static const enumtype HedgeType =
    TagType_enumtype_HedgeType;
  static const enumtype HedgeParam =
    TagType_enumtype_HedgeParam;
  static const enumtype SettlingFirm =
    TagType_enumtype_SettlingFirm;
  static const enumtype ClearingAccount =
    TagType_enumtype_ClearingAccount;
  static const enumtype ClearingIntent =
    TagType_enumtype_ClearingIntent;
  static const enumtype AlgoStrategy =
    TagType_enumtype_AlgoStrategy;
  static const enumtype AlgoId =
    TagType_enumtype_AlgoId;
  static const enumtype WhatIf =
    TagType_enumtype_WhatIf;
  static const enumtype NotHeld =
    TagType_enumtype_NotHeld;
  static const enumtype Solicited =
    TagType_enumtype_Solicited;
  static const enumtype IntDate =
    TagType_enumtype_IntDate;
  static const enumtype HasGaps =
    TagType_enumtype_HasGaps;
  static const enumtype BarCount =
    TagType_enumtype_BarCount;
  static const enumtype Amount =
    TagType_enumtype_Amount;
  static const enumtype VWAP =
    TagType_enumtype_VWAP;
  static const enumtype DayVWAP =
    TagType_enumtype_DayVWAP;
  static const enumtype ServerSettingName =
    TagType_enumtype_ServerSettingName;
  static const enumtype FrontIDMd =
    TagType_enumtype_FrontIDMd;
  static const enumtype FrontIDTrader =
    TagType_enumtype_FrontIDTrader;
  static const enumtype MdApiType =
    TagType_enumtype_MdApiType;
  static const enumtype TrdApiType =
    TagType_enumtype_TrdApiType;
  static const enumtype MdTrdApiType =
    TagType_enumtype_MdTrdApiType;
  static const enumtype MdTrdApiTypeMask =
    TagType_enumtype_MdTrdApiTypeMask;
  static const enumtype MdServerName =
    TagType_enumtype_MdServerName;
  static const enumtype TrdServerName =
    TagType_enumtype_TrdServerName;
  static const enumtype MdTrdServerName =
    TagType_enumtype_MdTrdServerName;
  static const enumtype BrokerIDMd =
    TagType_enumtype_BrokerIDMd;
  static const enumtype BrokerIDTrader =
    TagType_enumtype_BrokerIDTrader;
  static const enumtype TimerTaskSeconds =
    TagType_enumtype_TimerTaskSeconds;
  static const enumtype BrokerApiType =
    TagType_enumtype_BrokerApiType;
  static const enumtype BrokerServerType =
    TagType_enumtype_BrokerServerType;
  static const enumtype MdServerSettingName =
    TagType_enumtype_MdServerSettingName;
  static const enumtype TrdServerSettingName =
    TagType_enumtype_TrdServerSettingName;
  static const enumtype MdTrdServerSettingName =
    TagType_enumtype_MdTrdServerSettingName;
  static const enumtype AccountTypeMask =
    TagType_enumtype_AccountTypeMask;
  static const enumtype rt_date =
    TagType_enumtype_rt_date;
  static const enumtype rt_time =
    TagType_enumtype_rt_time;
  static const enumtype rt_pre_close =
    TagType_enumtype_rt_pre_close;
  static const enumtype rt_open =
    TagType_enumtype_rt_open;
  static const enumtype rt_high =
    TagType_enumtype_rt_high;
  static const enumtype rt_low =
    TagType_enumtype_rt_low;
  static const enumtype rt_last =
    TagType_enumtype_rt_last;
  static const enumtype rt_last_amt =
    TagType_enumtype_rt_last_amt;
  static const enumtype rt_last_vol =
    TagType_enumtype_rt_last_vol;
  static const enumtype rt_latest =
    TagType_enumtype_rt_latest;
  static const enumtype rt_vol =
    TagType_enumtype_rt_vol;
  static const enumtype rt_amt =
    TagType_enumtype_rt_amt;
  static const enumtype rt_chg =
    TagType_enumtype_rt_chg;
  static const enumtype rt_pct_chg =
    TagType_enumtype_rt_pct_chg;
  static const enumtype rt_high_limit =
    TagType_enumtype_rt_high_limit;
  static const enumtype rt_low_limit =
    TagType_enumtype_rt_low_limit;
  static const enumtype rt_swing =
    TagType_enumtype_rt_swing;
  static const enumtype rt_vwap =
    TagType_enumtype_rt_vwap;
  static const enumtype rt_upward_vol =
    TagType_enumtype_rt_upward_vol;
  static const enumtype rt_downward_vol =
    TagType_enumtype_rt_downward_vol;
  static const enumtype rt_bsize_total =
    TagType_enumtype_rt_bsize_total;
  static const enumtype rt_asize_total =
    TagType_enumtype_rt_asize_total;
  static const enumtype rt_vol_ratio =
    TagType_enumtype_rt_vol_ratio;
  static const enumtype rt_turn =
    TagType_enumtype_rt_turn;
  static const enumtype rt_pre_iopv =
    TagType_enumtype_rt_pre_iopv;
  static const enumtype rt_iopv =
    TagType_enumtype_rt_iopv;
  static const enumtype rt_mkt_cap =
    TagType_enumtype_rt_mkt_cap;
  static const enumtype rt_float_mkt_cap =
    TagType_enumtype_rt_float_mkt_cap;
  static const enumtype rt_pre_oi =
    TagType_enumtype_rt_pre_oi;
  static const enumtype rt_oi =
    TagType_enumtype_rt_oi;
  static const enumtype rt_oi_chg =
    TagType_enumtype_rt_oi_chg;
  static const enumtype rt_pre_settle =
    TagType_enumtype_rt_pre_settle;
  static const enumtype rt_settle =
    TagType_enumtype_rt_settle;
  static const enumtype rt_discount =
    TagType_enumtype_rt_discount;
  static const enumtype rt_discount_ratio =
    TagType_enumtype_rt_discount_ratio;
  static const enumtype rt_pe_ttm =
    TagType_enumtype_rt_pe_ttm;
  static const enumtype rt_pb_lf =
    TagType_enumtype_rt_pb_lf;
  static const enumtype rt_rise_days =
    TagType_enumtype_rt_rise_days;
  static const enumtype rt_spread =
    TagType_enumtype_rt_spread;
  static const enumtype rt_susp_flag =
    TagType_enumtype_rt_susp_flag;
  static const enumtype rt_high_52wk =
    TagType_enumtype_rt_high_52wk;
  static const enumtype rt_low_52wk =
    TagType_enumtype_rt_low_52wk;
  static const enumtype rt_pct_chg_1min =
    TagType_enumtype_rt_pct_chg_1min;
  static const enumtype rt_pct_chg_3min =
    TagType_enumtype_rt_pct_chg_3min;
  static const enumtype rt_pct_chg_5d =
    TagType_enumtype_rt_pct_chg_5d;
  static const enumtype rt_pct_chg_10d =
    TagType_enumtype_rt_pct_chg_10d;
  static const enumtype rt_pct_chg_20d =
    TagType_enumtype_rt_pct_chg_20d;
  static const enumtype rt_pct_chg_60d =
    TagType_enumtype_rt_pct_chg_60d;
  static const enumtype rt_pct_chg_120d =
    TagType_enumtype_rt_pct_chg_120d;
  static const enumtype rt_pct_chg_250d =
    TagType_enumtype_rt_pct_chg_250d;
  static const enumtype rt_pct_chg_ytd =
    TagType_enumtype_rt_pct_chg_ytd;
  static const enumtype rt_last_dp =
    TagType_enumtype_rt_last_dp;
  static const enumtype rt_last_cp =
    TagType_enumtype_rt_last_cp;
  static const enumtype rt_last_ytm =
    TagType_enumtype_rt_last_ytm;
  static const enumtype rt_close_dp =
    TagType_enumtype_rt_close_dp;
  static const enumtype rt_ask1 =
    TagType_enumtype_rt_ask1;
  static const enumtype rt_ask2 =
    TagType_enumtype_rt_ask2;
  static const enumtype rt_ask3 =
    TagType_enumtype_rt_ask3;
  static const enumtype rt_ask4 =
    TagType_enumtype_rt_ask4;
  static const enumtype rt_ask5 =
    TagType_enumtype_rt_ask5;
  static const enumtype rt_ask6 =
    TagType_enumtype_rt_ask6;
  static const enumtype rt_ask7 =
    TagType_enumtype_rt_ask7;
  static const enumtype rt_ask8 =
    TagType_enumtype_rt_ask8;
  static const enumtype rt_ask9 =
    TagType_enumtype_rt_ask9;
  static const enumtype rt_ask10 =
    TagType_enumtype_rt_ask10;
  static const enumtype rt_bid1 =
    TagType_enumtype_rt_bid1;
  static const enumtype rt_bid2 =
    TagType_enumtype_rt_bid2;
  static const enumtype rt_bid3 =
    TagType_enumtype_rt_bid3;
  static const enumtype rt_bid4 =
    TagType_enumtype_rt_bid4;
  static const enumtype rt_bid5 =
    TagType_enumtype_rt_bid5;
  static const enumtype rt_bid6 =
    TagType_enumtype_rt_bid6;
  static const enumtype rt_bid7 =
    TagType_enumtype_rt_bid7;
  static const enumtype rt_bid8 =
    TagType_enumtype_rt_bid8;
  static const enumtype rt_bid9 =
    TagType_enumtype_rt_bid9;
  static const enumtype rt_bid10 =
    TagType_enumtype_rt_bid10;
  static const enumtype rt_bsize1 =
    TagType_enumtype_rt_bsize1;
  static const enumtype rt_bsize2 =
    TagType_enumtype_rt_bsize2;
  static const enumtype rt_bsize3 =
    TagType_enumtype_rt_bsize3;
  static const enumtype rt_bsize4 =
    TagType_enumtype_rt_bsize4;
  static const enumtype rt_bsize5 =
    TagType_enumtype_rt_bsize5;
  static const enumtype rt_bsize6 =
    TagType_enumtype_rt_bsize6;
  static const enumtype rt_bsize7 =
    TagType_enumtype_rt_bsize7;
  static const enumtype rt_bsize8 =
    TagType_enumtype_rt_bsize8;
  static const enumtype rt_bsize9 =
    TagType_enumtype_rt_bsize9;
  static const enumtype rt_bsize10 =
    TagType_enumtype_rt_bsize10;
  static const enumtype rt_asize1 =
    TagType_enumtype_rt_asize1;
  static const enumtype rt_asize2 =
    TagType_enumtype_rt_asize2;
  static const enumtype rt_asize3 =
    TagType_enumtype_rt_asize3;
  static const enumtype rt_asize4 =
    TagType_enumtype_rt_asize4;
  static const enumtype rt_asize5 =
    TagType_enumtype_rt_asize5;
  static const enumtype rt_asize6 =
    TagType_enumtype_rt_asize6;
  static const enumtype rt_asize7 =
    TagType_enumtype_rt_asize7;
  static const enumtype rt_asize8 =
    TagType_enumtype_rt_asize8;
  static const enumtype rt_asize9 =
    TagType_enumtype_rt_asize9;
  static const enumtype rt_asize10 =
    TagType_enumtype_rt_asize10;
  static const enumtype rt_ma_5d =
    TagType_enumtype_rt_ma_5d;
  static const enumtype rt_ma_10d =
    TagType_enumtype_rt_ma_10d;
  static const enumtype rt_ma_20d =
    TagType_enumtype_rt_ma_20d;
  static const enumtype rt_ma_60d =
    TagType_enumtype_rt_ma_60d;
  static const enumtype rt_ma_120d =
    TagType_enumtype_rt_ma_120d;
  static const enumtype rt_ma_250d =
    TagType_enumtype_rt_ma_250d;
  static const enumtype rt_delta =
    TagType_enumtype_rt_delta;
  static const enumtype rt_gamma =
    TagType_enumtype_rt_gamma;
  static const enumtype rt_vega =
    TagType_enumtype_rt_vega;
  static const enumtype rt_theta =
    TagType_enumtype_rt_theta;
  static const enumtype rt_rho =
    TagType_enumtype_rt_rho;
  static const enumtype rt_imp_volatility =
    TagType_enumtype_rt_imp_volatility;
  static const enumtype rt_mf_ratio =
    TagType_enumtype_rt_mf_ratio;
  static const enumtype rt_mf_ratio_5d =
    TagType_enumtype_rt_mf_ratio_5d;
  static const enumtype rt_mf_ratio_10d =
    TagType_enumtype_rt_mf_ratio_10d;
  static const enumtype rt_mf_ratio_20d =
    TagType_enumtype_rt_mf_ratio_20d;
  static const enumtype rt_mf_ratio_60d =
    TagType_enumtype_rt_mf_ratio_60d;
  static const enumtype rt_mf_amt =
    TagType_enumtype_rt_mf_amt;
  static const enumtype rt_mf_amt_5d =
    TagType_enumtype_rt_mf_amt_5d;
  static const enumtype rt_mf_amt_10d =
    TagType_enumtype_rt_mf_amt_10d;
  static const enumtype rt_mf_amt_20d =
    TagType_enumtype_rt_mf_amt_20d;
  static const enumtype rt_mf_amt_60d =
    TagType_enumtype_rt_mf_amt_60d;
  static const enumtype rt_bidvol =
    TagType_enumtype_rt_bidvol;
  static const enumtype rt_askvol =
    TagType_enumtype_rt_askvol;
  static const enumtype rt_insti_vip_bid =
    TagType_enumtype_rt_insti_vip_bid;
  static const enumtype rt_insti_vip_ask =
    TagType_enumtype_rt_insti_vip_ask;
  static const enumtype rt_insti_vip_netinflow_ratio =
    TagType_enumtype_rt_insti_vip_netinflow_ratio;
  static const enumtype rt_trans_sum_vol =
    TagType_enumtype_rt_trans_sum_vol;
  static const enumtype rt_insti_buy_vol =
    TagType_enumtype_rt_insti_buy_vol;
  static const enumtype rt_insti_sell_vol =
    TagType_enumtype_rt_insti_sell_vol;
  static const enumtype rt_vip_buy_vol =
    TagType_enumtype_rt_vip_buy_vol;
  static const enumtype rt_vip_sell_vol =
    TagType_enumtype_rt_vip_sell_vol;
  static const enumtype rt_mid_buy_vol =
    TagType_enumtype_rt_mid_buy_vol;
  static const enumtype rt_mid_sell_vol =
    TagType_enumtype_rt_mid_sell_vol;
  static const enumtype rt_indi_buy_vol =
    TagType_enumtype_rt_indi_buy_vol;
  static const enumtype rt_indi_sell_vol =
    TagType_enumtype_rt_indi_sell_vol;
  static const enumtype rt_insti_netbuy_vol =
    TagType_enumtype_rt_insti_netbuy_vol;
  static const enumtype rt_vip_netbuy_vol =
    TagType_enumtype_rt_vip_netbuy_vol;
  static const enumtype rt_mid_netbuy_vol =
    TagType_enumtype_rt_mid_netbuy_vol;
  static const enumtype rt_indi_netbuy_vol =
    TagType_enumtype_rt_indi_netbuy_vol;
  static const enumtype rt_insti_total_bid =
    TagType_enumtype_rt_insti_total_bid;
  static const enumtype rt_insti_total_ask =
    TagType_enumtype_rt_insti_total_ask;
  static const enumtype rt_vip_total_bid =
    TagType_enumtype_rt_vip_total_bid;
  static const enumtype rt_vip_total_ask =
    TagType_enumtype_rt_vip_total_ask;
  static const enumtype rt_mid_total_bid =
    TagType_enumtype_rt_mid_total_bid;
  static const enumtype rt_mid_total_ask =
    TagType_enumtype_rt_mid_total_ask;
  static const enumtype rt_indi_total_bid =
    TagType_enumtype_rt_indi_total_bid;
  static const enumtype rt_indi_total_ask =
    TagType_enumtype_rt_indi_total_ask;
  static const enumtype rt_insti_inflow =
    TagType_enumtype_rt_insti_inflow;
  static const enumtype rt_vip_inflow =
    TagType_enumtype_rt_vip_inflow;
  static const enumtype rt_mid_inflow =
    TagType_enumtype_rt_mid_inflow;
  static const enumtype rt_indi_inflow =
    TagType_enumtype_rt_indi_inflow;
  static const enumtype rt_insti_buy_amt =
    TagType_enumtype_rt_insti_buy_amt;
  static const enumtype rt_insti_sell_amt =
    TagType_enumtype_rt_insti_sell_amt;
  static const enumtype rt_vip_buy_amt =
    TagType_enumtype_rt_vip_buy_amt;
  static const enumtype rt_vip_sell_amt =
    TagType_enumtype_rt_vip_sell_amt;
  static const enumtype rt_mid_buy_amt =
    TagType_enumtype_rt_mid_buy_amt;
  static const enumtype rt_mid_sell_amt =
    TagType_enumtype_rt_mid_sell_amt;
  static const enumtype rt_indi_buy_amt =
    TagType_enumtype_rt_indi_buy_amt;
  static const enumtype rt_indi_sell_amt =
    TagType_enumtype_rt_indi_sell_amt;
  static const enumtype rt_insti_activebuy_amt =
    TagType_enumtype_rt_insti_activebuy_amt;
  static const enumtype rt_vip_activebuy_amt =
    TagType_enumtype_rt_vip_activebuy_amt;
  static const enumtype rt_mid_activebuy_amt =
    TagType_enumtype_rt_mid_activebuy_amt;
  static const enumtype rt_indi_activebuy_amt =
    TagType_enumtype_rt_indi_activebuy_amt;
  static const enumtype rt_insti_activebuy_vol =
    TagType_enumtype_rt_insti_activebuy_vol;
  static const enumtype rt_vip_activebuy_vol =
    TagType_enumtype_rt_vip_activebuy_vol;
  static const enumtype rt_mid_activebuy_vol =
    TagType_enumtype_rt_mid_activebuy_vol;
  static const enumtype rt_indi_activebuy_vol =
    TagType_enumtype_rt_indi_activebuy_vol;
  static const enumtype rt_insti_activesell_amt =
    TagType_enumtype_rt_insti_activesell_amt;
  static const enumtype rt_vip_activesell_amt =
    TagType_enumtype_rt_vip_activesell_amt;
  static const enumtype rt_mid_activesell_amt =
    TagType_enumtype_rt_mid_activesell_amt;
  static const enumtype rt_indi_activesell_amt =
    TagType_enumtype_rt_indi_activesell_amt;
  static const enumtype rt_insti_activesell_vol =
    TagType_enumtype_rt_insti_activesell_vol;
  static const enumtype rt_vip_activesell_vol =
    TagType_enumtype_rt_vip_activesell_vol;
  static const enumtype rt_mid_activesell_vol =
    TagType_enumtype_rt_mid_activesell_vol;
  static const enumtype rt_indi_activesell_vol =
    TagType_enumtype_rt_indi_activesell_vol;
  static const enumtype rt_activebuy_amt =
    TagType_enumtype_rt_activebuy_amt;
  static const enumtype rt_activebuy_vol =
    TagType_enumtype_rt_activebuy_vol;
  static const enumtype rt_activesell_amt =
    TagType_enumtype_rt_activesell_amt;
  static const enumtype rt_activesell_vol =
    TagType_enumtype_rt_activesell_vol;
  static const enumtype rt_activenetin_vol =
    TagType_enumtype_rt_activenetin_vol;
  static const enumtype rt_activenetin_amt =
    TagType_enumtype_rt_activenetin_amt;
  static const enumtype rt_activeinvol_prop =
    TagType_enumtype_rt_activeinvol_prop;
  static const enumtype rt_activeinflow_prop =
    TagType_enumtype_rt_activeinflow_prop;
  static const enumtype YR_daily =
    TagType_enumtype_YR_daily;
  static const enumtype YR_weekly =
    TagType_enumtype_YR_weekly;
  static const enumtype YR_monthly =
    TagType_enumtype_YR_monthly;
  static const enumtype YR_dividendsOnly =
    TagType_enumtype_YR_dividendsOnly;
  static const enumtype ask =
    TagType_enumtype_ask;
  static const enumtype averageDailyVolume =
    TagType_enumtype_averageDailyVolume;
  static const enumtype askSize =
    TagType_enumtype_askSize;
  static const enumtype bid =
    TagType_enumtype_bid;
  static const enumtype askRealTime =
    TagType_enumtype_askRealTime;
  static const enumtype bidRealTime =
    TagType_enumtype_bidRealTime;
  static const enumtype bookValue =
    TagType_enumtype_bookValue;
  static const enumtype bidSz =
    TagType_enumtype_bidSz;
  static const enumtype changeAndPercentChange =
    TagType_enumtype_changeAndPercentChange;
  static const enumtype change =
    TagType_enumtype_change;
  static const enumtype commissionfee =
    TagType_enumtype_commissionfee;
  static const enumtype changeRealTime =
    TagType_enumtype_changeRealTime;
  static const enumtype afterHoursChangeRealTime =
    TagType_enumtype_afterHoursChangeRealTime;
  static const enumtype dividendShare =
    TagType_enumtype_dividendShare;
  static const enumtype lastTradeIntDate =
    TagType_enumtype_lastTradeIntDate;
  static const enumtype tradeIntDate =
    TagType_enumtype_tradeIntDate;
  static const enumtype earningsShare =
    TagType_enumtype_earningsShare;
  static const enumtype errorIndication =
    TagType_enumtype_errorIndication;
  static const enumtype epsEstimateCurrentYear =
    TagType_enumtype_epsEstimateCurrentYear;
  static const enumtype epsEstimateNextYear =
    TagType_enumtype_epsEstimateNextYear;
  static const enumtype epsEstimateNextQuarter =
    TagType_enumtype_epsEstimateNextQuarter;
  static const enumtype floatShares =
    TagType_enumtype_floatShares;
  static const enumtype dayLow =
    TagType_enumtype_dayLow;
  static const enumtype dayHigh =
    TagType_enumtype_dayHigh;
  static const enumtype low52Week =
    TagType_enumtype_low52Week;
  static const enumtype high52Week =
    TagType_enumtype_high52Week;
  static const enumtype holdingsGainPercent =
    TagType_enumtype_holdingsGainPercent;
  static const enumtype annualizedGain =
    TagType_enumtype_annualizedGain;
  static const enumtype holdingsGain =
    TagType_enumtype_holdingsGain;
  static const enumtype holdingsGainPercentRealTime =
    TagType_enumtype_holdingsGainPercentRealTime;
  static const enumtype holdingsGainRealTime =
    TagType_enumtype_holdingsGainRealTime;
  static const enumtype moreInfo =
    TagType_enumtype_moreInfo;
  static const enumtype orderBookRealTime =
    TagType_enumtype_orderBookRealTime;
  static const enumtype marketCapitalization =
    TagType_enumtype_marketCapitalization;
  static const enumtype marketCapRealTime =
    TagType_enumtype_marketCapRealTime;
  static const enumtype ebitda =
    TagType_enumtype_ebitda;
  static const enumtype changeFrom52WeekLow =
    TagType_enumtype_changeFrom52WeekLow;
  static const enumtype percentChangeFrom52WeekLow =
    TagType_enumtype_percentChangeFrom52WeekLow;
  static const enumtype lastTradeRealTimeWithTime =
    TagType_enumtype_lastTradeRealTimeWithTime;
  static const enumtype changePercentRealTime =
    TagType_enumtype_changePercentRealTime;
  static const enumtype lastTradeSize =
    TagType_enumtype_lastTradeSize;
  static const enumtype changeFrom52WeekHigh =
    TagType_enumtype_changeFrom52WeekHigh;
  static const enumtype percebtChangeFrom52WeekHigh =
    TagType_enumtype_percebtChangeFrom52WeekHigh;
  static const enumtype lastTradeWithTime =
    TagType_enumtype_lastTradeWithTime;
  static const enumtype lastTradePriceOnly =
    TagType_enumtype_lastTradePriceOnly;
  static const enumtype highLimit =
    TagType_enumtype_highLimit;
  static const enumtype lowLimit =
    TagType_enumtype_lowLimit;
  static const enumtype dayRange =
    TagType_enumtype_dayRange;
  static const enumtype dayRangeRealTime =
    TagType_enumtype_dayRangeRealTime;
  static const enumtype MovingAverage50Day =
    TagType_enumtype_MovingAverage50Day;
  static const enumtype MovingAverage200Day =
    TagType_enumtype_MovingAverage200Day;
  static const enumtype changeFrom200DayMovingAverage =
    TagType_enumtype_changeFrom200DayMovingAverage;
  static const enumtype percentChangeFrom200DayMovingAverage =
    TagType_enumtype_percentChangeFrom200DayMovingAverage;
  static const enumtype changeFrom50DayMovingAverage =
    TagType_enumtype_changeFrom50DayMovingAverage;
  static const enumtype percentChangeFrom50DayMovingAverage =
    TagType_enumtype_percentChangeFrom50DayMovingAverage;
  static const enumtype namestr =
    TagType_enumtype_namestr;
  static const enumtype notesinfo =
    TagType_enumtype_notesinfo;
  static const enumtype open =
    TagType_enumtype_open;
  static const enumtype previousClose =
    TagType_enumtype_previousClose;
  static const enumtype pricePaid =
    TagType_enumtype_pricePaid;
  static const enumtype changeinPercent =
    TagType_enumtype_changeinPercent;
  static const enumtype priceSales =
    TagType_enumtype_priceSales;
  static const enumtype priceBook =
    TagType_enumtype_priceBook;
  static const enumtype exDividendDate =
    TagType_enumtype_exDividendDate;
  static const enumtype peRatio =
    TagType_enumtype_peRatio;
  static const enumtype dividendPayDate =
    TagType_enumtype_dividendPayDate;
  static const enumtype peRatioRealTime =
    TagType_enumtype_peRatioRealTime;
  static const enumtype pegRatio =
    TagType_enumtype_pegRatio;
  static const enumtype priceEpsEstimateCurrentYear =
    TagType_enumtype_priceEpsEstimateCurrentYear;
  static const enumtype priceEpsEstimateNextYear =
    TagType_enumtype_priceEpsEstimateNextYear;
  static const enumtype symbolstr =
    TagType_enumtype_symbolstr;
  static const enumtype sharesOwned =
    TagType_enumtype_sharesOwned;
  static const enumtype shortRatio =
    TagType_enumtype_shortRatio;
  static const enumtype lastTradeTime =
    TagType_enumtype_lastTradeTime;
  static const enumtype tradeLinks =
    TagType_enumtype_tradeLinks;
  static const enumtype tickerTrend =
    TagType_enumtype_tickerTrend;
  static const enumtype targetPrice1yr =
    TagType_enumtype_targetPrice1yr;
  static const enumtype volumeValue =
    TagType_enumtype_volumeValue;
  static const enumtype holdingsValue =
    TagType_enumtype_holdingsValue;
  static const enumtype holdingsValueRealTime =
    TagType_enumtype_holdingsValueRealTime;
  static const enumtype range52Week =
    TagType_enumtype_range52Week;
  static const enumtype dayValueChange =
    TagType_enumtype_dayValueChange;
  static const enumtype dayValueChangeRealTime =
    TagType_enumtype_dayValueChangeRealTime;
  static const enumtype stockExchange =
    TagType_enumtype_stockExchange;
  static const enumtype dividendYield =
    TagType_enumtype_dividendYield;
  static const enumtype OnTimer =
    TagType_enumtype_OnTimer;
  static const enumtype CTPMdOnFrontConnected =
    TagType_enumtype_CTPMdOnFrontConnected;
  static const enumtype CTPMdOnFrontDisconnected =
    TagType_enumtype_CTPMdOnFrontDisconnected;
  static const enumtype CTPMdOnHeartBeatWarning =
    TagType_enumtype_CTPMdOnHeartBeatWarning;
  static const enumtype CTPMdOnRspUserLogin =
    TagType_enumtype_CTPMdOnRspUserLogin;
  static const enumtype CTPMdOnRspUserLogout =
    TagType_enumtype_CTPMdOnRspUserLogout;
  static const enumtype CTPMdOnRspError =
    TagType_enumtype_CTPMdOnRspError;
  static const enumtype CTPMdOnRspSubMarketData =
    TagType_enumtype_CTPMdOnRspSubMarketData;
  static const enumtype CTPMdOnRspUnSubMarketData =
    TagType_enumtype_CTPMdOnRspUnSubMarketData;
  static const enumtype CTPMdOnRspSubForQuoteRsp =
    TagType_enumtype_CTPMdOnRspSubForQuoteRsp;
  static const enumtype CTPMdOnRspUnSubForQuoteRsp =
    TagType_enumtype_CTPMdOnRspUnSubForQuoteRsp;
  static const enumtype CTPMdOnRtnDepthMarketData =
    TagType_enumtype_CTPMdOnRtnDepthMarketData;
  static const enumtype CTPMdOnRtnForQuoteRsp =
    TagType_enumtype_CTPMdOnRtnForQuoteRsp;
  static const enumtype CTPMdGetTradingDay =
    TagType_enumtype_CTPMdGetTradingDay;
  static const enumtype CTPMdRegisterFront =
    TagType_enumtype_CTPMdRegisterFront;
  static const enumtype CTPMdRegisterNameServer =
    TagType_enumtype_CTPMdRegisterNameServer;
  static const enumtype CTPMdRegisterFensUserInfo =
    TagType_enumtype_CTPMdRegisterFensUserInfo;
  static const enumtype CTPMdSubscribeMarketData =
    TagType_enumtype_CTPMdSubscribeMarketData;
  static const enumtype CTPMdUnSubscribeMarketData =
    TagType_enumtype_CTPMdUnSubscribeMarketData;
  static const enumtype CTPMdSubscribeForQuoteRsp =
    TagType_enumtype_CTPMdSubscribeForQuoteRsp;
  static const enumtype CTPMdUnSubscribeForQuoteRsp =
    TagType_enumtype_CTPMdUnSubscribeForQuoteRsp;
  static const enumtype CTPMdReqUserLogin =
    TagType_enumtype_CTPMdReqUserLogin;
  static const enumtype CTPMdReqUserLogout =
    TagType_enumtype_CTPMdReqUserLogout;
  static const enumtype CTPTrdOnFrontConnected =
    TagType_enumtype_CTPTrdOnFrontConnected;
  static const enumtype CTPTrdOnFrontDisconnected =
    TagType_enumtype_CTPTrdOnFrontDisconnected;
  static const enumtype CTPTrdOnHeartBeatWarning =
    TagType_enumtype_CTPTrdOnHeartBeatWarning;
  static const enumtype CTPTrdOnRspAuthenticate =
    TagType_enumtype_CTPTrdOnRspAuthenticate;
  static const enumtype CTPTrdOnRspUserLogin =
    TagType_enumtype_CTPTrdOnRspUserLogin;
  static const enumtype CTPTrdOnRspUserLogout =
    TagType_enumtype_CTPTrdOnRspUserLogout;
  static const enumtype CTPTrdOnRspUserPasswordUpdate =
    TagType_enumtype_CTPTrdOnRspUserPasswordUpdate;
  static const enumtype CTPTrdOnRspTradingAccountPasswordUpdate =
    TagType_enumtype_CTPTrdOnRspTradingAccountPasswordUpdate;
  static const enumtype CTPTrdOnRspOrderInsert =
    TagType_enumtype_CTPTrdOnRspOrderInsert;
  static const enumtype CTPTrdOnRspParkedOrderInsert =
    TagType_enumtype_CTPTrdOnRspParkedOrderInsert;
  static const enumtype CTPTrdOnRspParkedOrderAction =
    TagType_enumtype_CTPTrdOnRspParkedOrderAction;
  static const enumtype CTPTrdOnRspOrderAction =
    TagType_enumtype_CTPTrdOnRspOrderAction;
  static const enumtype CTPTrdOnRspQueryMaxOrderVolume =
    TagType_enumtype_CTPTrdOnRspQueryMaxOrderVolume;
  static const enumtype CTPTrdOnRspSettlementInfoConfirm =
    TagType_enumtype_CTPTrdOnRspSettlementInfoConfirm;
  static const enumtype CTPTrdOnRspRemoveParkedOrder =
    TagType_enumtype_CTPTrdOnRspRemoveParkedOrder;
  static const enumtype CTPTrdOnRspRemoveParkedOrderAction =
    TagType_enumtype_CTPTrdOnRspRemoveParkedOrderAction;
  static const enumtype CTPTrdOnRspExecOrderInsert =
    TagType_enumtype_CTPTrdOnRspExecOrderInsert;
  static const enumtype CTPTrdOnRspExecOrderAction =
    TagType_enumtype_CTPTrdOnRspExecOrderAction;
  static const enumtype CTPTrdOnRspForQuoteInsert =
    TagType_enumtype_CTPTrdOnRspForQuoteInsert;
  static const enumtype CTPTrdOnRspQuoteInsert =
    TagType_enumtype_CTPTrdOnRspQuoteInsert;
  static const enumtype CTPTrdOnRspQuoteAction =
    TagType_enumtype_CTPTrdOnRspQuoteAction;
  static const enumtype CTPTrdOnRspLockInsert =
    TagType_enumtype_CTPTrdOnRspLockInsert;
  static const enumtype CTPTrdOnRspCombActionInsert =
    TagType_enumtype_CTPTrdOnRspCombActionInsert;
  static const enumtype CTPTrdOnRspQryOrder =
    TagType_enumtype_CTPTrdOnRspQryOrder;
  static const enumtype CTPTrdOnRspQryTrade =
    TagType_enumtype_CTPTrdOnRspQryTrade;
  static const enumtype CTPTrdOnRspQryInvestorPosition =
    TagType_enumtype_CTPTrdOnRspQryInvestorPosition;
  static const enumtype CTPTrdOnRspQryTradingAccount =
    TagType_enumtype_CTPTrdOnRspQryTradingAccount;
  static const enumtype CTPTrdOnRspQryInvestor =
    TagType_enumtype_CTPTrdOnRspQryInvestor;
  static const enumtype CTPTrdOnRspQryTradingCode =
    TagType_enumtype_CTPTrdOnRspQryTradingCode;
  static const enumtype CTPTrdOnRspQryInstrumentMarginRate =
    TagType_enumtype_CTPTrdOnRspQryInstrumentMarginRate;
  static const enumtype CTPTrdOnRspQryInstrumentCommissionRate =
    TagType_enumtype_CTPTrdOnRspQryInstrumentCommissionRate;
  static const enumtype CTPTrdOnRspQryExchange =
    TagType_enumtype_CTPTrdOnRspQryExchange;
  static const enumtype CTPTrdOnRspQryProduct =
    TagType_enumtype_CTPTrdOnRspQryProduct;
  static const enumtype CTPTrdOnRspQryInstrument =
    TagType_enumtype_CTPTrdOnRspQryInstrument;
  static const enumtype CTPTrdOnRspQryDepthMarketData =
    TagType_enumtype_CTPTrdOnRspQryDepthMarketData;
  static const enumtype CTPTrdOnRspQrySettlementInfo =
    TagType_enumtype_CTPTrdOnRspQrySettlementInfo;
  static const enumtype CTPTrdOnRspQryTransferBank =
    TagType_enumtype_CTPTrdOnRspQryTransferBank;
  static const enumtype CTPTrdOnRspQryInvestorPositionDetail =
    TagType_enumtype_CTPTrdOnRspQryInvestorPositionDetail;
  static const enumtype CTPTrdOnRspQryNotice =
    TagType_enumtype_CTPTrdOnRspQryNotice;
  static const enumtype CTPTrdOnRspQrySettlementInfoConfirm =
    TagType_enumtype_CTPTrdOnRspQrySettlementInfoConfirm;
  static const enumtype CTPTrdOnRspQryInvestorPositionCombineDetail =
    TagType_enumtype_CTPTrdOnRspQryInvestorPositionCombineDetail;
  static const enumtype CTPTrdOnRspQryCFMMCTradingAccountKey =
    TagType_enumtype_CTPTrdOnRspQryCFMMCTradingAccountKey;
  static const enumtype CTPTrdOnRspQryEWarrantOffset =
    TagType_enumtype_CTPTrdOnRspQryEWarrantOffset;
  static const enumtype CTPTrdOnRspQryInvestorProductGroupMargin =
    TagType_enumtype_CTPTrdOnRspQryInvestorProductGroupMargin;
  static const enumtype CTPTrdOnRspQryExchangeMarginRate =
    TagType_enumtype_CTPTrdOnRspQryExchangeMarginRate;
  static const enumtype CTPTrdOnRspQryExchangeMarginRateAdjust =
    TagType_enumtype_CTPTrdOnRspQryExchangeMarginRateAdjust;
  static const enumtype CTPTrdOnRspQryExchangeRate =
    TagType_enumtype_CTPTrdOnRspQryExchangeRate;
  static const enumtype CTPTrdOnRspQrySecAgentACIDMap =
    TagType_enumtype_CTPTrdOnRspQrySecAgentACIDMap;
  static const enumtype CTPTrdOnRspQryProductExchRate =
    TagType_enumtype_CTPTrdOnRspQryProductExchRate;
  static const enumtype CTPTrdOnRspQryProductGroup =
    TagType_enumtype_CTPTrdOnRspQryProductGroup;
  static const enumtype CTPTrdOnRspQryOptionInstrTradeCost =
    TagType_enumtype_CTPTrdOnRspQryOptionInstrTradeCost;
  static const enumtype CTPTrdOnRspQryOptionInstrCommRate =
    TagType_enumtype_CTPTrdOnRspQryOptionInstrCommRate;
  static const enumtype CTPTrdOnRspQryExecOrder =
    TagType_enumtype_CTPTrdOnRspQryExecOrder;
  static const enumtype CTPTrdOnRspQryForQuote =
    TagType_enumtype_CTPTrdOnRspQryForQuote;
  static const enumtype CTPTrdOnRspQryQuote =
    TagType_enumtype_CTPTrdOnRspQryQuote;
  static const enumtype CTPTrdOnRspQryLock =
    TagType_enumtype_CTPTrdOnRspQryLock;
  static const enumtype CTPTrdOnRspQryLockPosition =
    TagType_enumtype_CTPTrdOnRspQryLockPosition;
  static const enumtype CTPTrdOnRspQryInvestorLevel =
    TagType_enumtype_CTPTrdOnRspQryInvestorLevel;
  static const enumtype CTPTrdOnRspQryExecFreeze =
    TagType_enumtype_CTPTrdOnRspQryExecFreeze;
  static const enumtype CTPTrdOnRspQryCombInstrumentGuard =
    TagType_enumtype_CTPTrdOnRspQryCombInstrumentGuard;
  static const enumtype CTPTrdOnRspQryCombAction =
    TagType_enumtype_CTPTrdOnRspQryCombAction;
  static const enumtype CTPTrdOnRspQryTransferSerial =
    TagType_enumtype_CTPTrdOnRspQryTransferSerial;
  static const enumtype CTPTrdOnRspQryAccountregister =
    TagType_enumtype_CTPTrdOnRspQryAccountregister;
  static const enumtype CTPTrdOnRspError =
    TagType_enumtype_CTPTrdOnRspError;
  static const enumtype CTPTrdOnRtnOrder =
    TagType_enumtype_CTPTrdOnRtnOrder;
  static const enumtype CTPTrdOnRtnTrade =
    TagType_enumtype_CTPTrdOnRtnTrade;
  static const enumtype CTPTrdOnErrRtnOrderInsert =
    TagType_enumtype_CTPTrdOnErrRtnOrderInsert;
  static const enumtype CTPTrdOnErrRtnOrderAction =
    TagType_enumtype_CTPTrdOnErrRtnOrderAction;
  static const enumtype CTPTrdOnRtnInstrumentStatus =
    TagType_enumtype_CTPTrdOnRtnInstrumentStatus;
  static const enumtype CTPTrdOnRtnTradingNotice =
    TagType_enumtype_CTPTrdOnRtnTradingNotice;
  static const enumtype CTPTrdOnRtnErrorConditionalOrder =
    TagType_enumtype_CTPTrdOnRtnErrorConditionalOrder;
  static const enumtype CTPTrdOnRtnExecOrder =
    TagType_enumtype_CTPTrdOnRtnExecOrder;
  static const enumtype CTPTrdOnErrRtnExecOrderInsert =
    TagType_enumtype_CTPTrdOnErrRtnExecOrderInsert;
  static const enumtype CTPTrdOnErrRtnExecOrderAction =
    TagType_enumtype_CTPTrdOnErrRtnExecOrderAction;
  static const enumtype CTPTrdOnErrRtnForQuoteInsert =
    TagType_enumtype_CTPTrdOnErrRtnForQuoteInsert;
  static const enumtype CTPTrdOnRtnQuote =
    TagType_enumtype_CTPTrdOnRtnQuote;
  static const enumtype CTPTrdOnErrRtnQuoteInsert =
    TagType_enumtype_CTPTrdOnErrRtnQuoteInsert;
  static const enumtype CTPTrdOnErrRtnQuoteAction =
    TagType_enumtype_CTPTrdOnErrRtnQuoteAction;
  static const enumtype CTPTrdOnRtnForQuoteRsp =
    TagType_enumtype_CTPTrdOnRtnForQuoteRsp;
  static const enumtype CTPTrdOnRtnCFMMCTradingAccountToken =
    TagType_enumtype_CTPTrdOnRtnCFMMCTradingAccountToken;
  static const enumtype CTPTrdOnRtnLock =
    TagType_enumtype_CTPTrdOnRtnLock;
  static const enumtype CTPTrdOnErrRtnLockInsert =
    TagType_enumtype_CTPTrdOnErrRtnLockInsert;
  static const enumtype CTPTrdOnRtnCombAction =
    TagType_enumtype_CTPTrdOnRtnCombAction;
  static const enumtype CTPTrdOnErrRtnCombActionInsert =
    TagType_enumtype_CTPTrdOnErrRtnCombActionInsert;
  static const enumtype CTPTrdOnRspQryContractBank =
    TagType_enumtype_CTPTrdOnRspQryContractBank;
  static const enumtype CTPTrdOnRspQryParkedOrder =
    TagType_enumtype_CTPTrdOnRspQryParkedOrder;
  static const enumtype CTPTrdOnRspQryParkedOrderAction =
    TagType_enumtype_CTPTrdOnRspQryParkedOrderAction;
  static const enumtype CTPTrdOnRspQryTradingNotice =
    TagType_enumtype_CTPTrdOnRspQryTradingNotice;
  static const enumtype CTPTrdOnRspQryBrokerTradingParams =
    TagType_enumtype_CTPTrdOnRspQryBrokerTradingParams;
  static const enumtype CTPTrdOnRspQryBrokerTradingAlgos =
    TagType_enumtype_CTPTrdOnRspQryBrokerTradingAlgos;
  static const enumtype CTPTrdOnRspQueryCFMMCTradingAccountToken =
    TagType_enumtype_CTPTrdOnRspQueryCFMMCTradingAccountToken;
  static const enumtype CTPTrdOnRtnFromBankToFutureByBank =
    TagType_enumtype_CTPTrdOnRtnFromBankToFutureByBank;
  static const enumtype CTPTrdOnRtnFromFutureToBankByBank =
    TagType_enumtype_CTPTrdOnRtnFromFutureToBankByBank;
  static const enumtype CTPTrdOnRtnRepealFromBankToFutureByBank =
    TagType_enumtype_CTPTrdOnRtnRepealFromBankToFutureByBank;
  static const enumtype CTPTrdOnRtnRepealFromFutureToBankByBank =
    TagType_enumtype_CTPTrdOnRtnRepealFromFutureToBankByBank;
  static const enumtype CTPTrdOnRtnFromBankToFutureByFuture =
    TagType_enumtype_CTPTrdOnRtnFromBankToFutureByFuture;
  static const enumtype CTPTrdOnRtnFromFutureToBankByFuture =
    TagType_enumtype_CTPTrdOnRtnFromFutureToBankByFuture;
  static const enumtype CTPTrdOnRtnRepealFromBankToFutureByFutureManual =
    TagType_enumtype_CTPTrdOnRtnRepealFromBankToFutureByFutureManual;
  static const enumtype CTPTrdOnRtnRepealFromFutureToBankByFutureManual =
    TagType_enumtype_CTPTrdOnRtnRepealFromFutureToBankByFutureManual;
  static const enumtype CTPTrdOnRtnQueryBankBalanceByFuture =
    TagType_enumtype_CTPTrdOnRtnQueryBankBalanceByFuture;
  static const enumtype CTPTrdOnErrRtnBankToFutureByFuture =
    TagType_enumtype_CTPTrdOnErrRtnBankToFutureByFuture;
  static const enumtype CTPTrdOnErrRtnFutureToBankByFuture =
    TagType_enumtype_CTPTrdOnErrRtnFutureToBankByFuture;
  static const enumtype CTPTrdOnErrRtnRepealBankToFutureByFutureManual =
    TagType_enumtype_CTPTrdOnErrRtnRepealBankToFutureByFutureManual;
  static const enumtype CTPTrdOnErrRtnRepealFutureToBankByFutureManual =
    TagType_enumtype_CTPTrdOnErrRtnRepealFutureToBankByFutureManual;
  static const enumtype CTPTrdOnErrRtnQueryBankBalanceByFuture =
    TagType_enumtype_CTPTrdOnErrRtnQueryBankBalanceByFuture;
  static const enumtype CTPTrdOnRtnRepealFromBankToFutureByFuture =
    TagType_enumtype_CTPTrdOnRtnRepealFromBankToFutureByFuture;
  static const enumtype CTPTrdOnRtnRepealFromFutureToBankByFuture =
    TagType_enumtype_CTPTrdOnRtnRepealFromFutureToBankByFuture;
  static const enumtype CTPTrdOnRspFromBankToFutureByFuture =
    TagType_enumtype_CTPTrdOnRspFromBankToFutureByFuture;
  static const enumtype CTPTrdOnRspFromFutureToBankByFuture =
    TagType_enumtype_CTPTrdOnRspFromFutureToBankByFuture;
  static const enumtype CTPTrdOnRspQueryBankAccountMoneyByFuture =
    TagType_enumtype_CTPTrdOnRspQueryBankAccountMoneyByFuture;
  static const enumtype CTPTrdOnRtnOpenAccountByBank =
    TagType_enumtype_CTPTrdOnRtnOpenAccountByBank;
  static const enumtype CTPTrdOnRtnCancelAccountByBank =
    TagType_enumtype_CTPTrdOnRtnCancelAccountByBank;
  static const enumtype CTPTrdOnRtnChangeAccountByBank =
    TagType_enumtype_CTPTrdOnRtnChangeAccountByBank;
  static const enumtype CTPTrdGetTradingDay =
    TagType_enumtype_CTPTrdGetTradingDay;
  static const enumtype CTPTrdRegisterFront =
    TagType_enumtype_CTPTrdRegisterFront;
  static const enumtype CTPTrdRegisterNameServer =
    TagType_enumtype_CTPTrdRegisterNameServer;
  static const enumtype CTPTrdRegisterFensUserInfo =
    TagType_enumtype_CTPTrdRegisterFensUserInfo;
  static const enumtype CTPTrdReqAuthenticate =
    TagType_enumtype_CTPTrdReqAuthenticate;
  static const enumtype CTPTrdReqUserLogin =
    TagType_enumtype_CTPTrdReqUserLogin;
  static const enumtype CTPTrdReqUserLogout =
    TagType_enumtype_CTPTrdReqUserLogout;
  static const enumtype CTPTrdReqUserPasswordUpdate =
    TagType_enumtype_CTPTrdReqUserPasswordUpdate;
  static const enumtype CTPTrdReqTradingAccountPasswordUpdate =
    TagType_enumtype_CTPTrdReqTradingAccountPasswordUpdate;
  static const enumtype CTPTrdReqOrderInsert =
    TagType_enumtype_CTPTrdReqOrderInsert;
  static const enumtype CTPTrdReqParkedOrderInsert =
    TagType_enumtype_CTPTrdReqParkedOrderInsert;
  static const enumtype CTPTrdReqParkedOrderAction =
    TagType_enumtype_CTPTrdReqParkedOrderAction;
  static const enumtype CTPTrdReqOrderAction =
    TagType_enumtype_CTPTrdReqOrderAction;
  static const enumtype CTPTrdReqQueryMaxOrderVolume =
    TagType_enumtype_CTPTrdReqQueryMaxOrderVolume;
  static const enumtype CTPTrdReqSettlementInfoConfirm =
    TagType_enumtype_CTPTrdReqSettlementInfoConfirm;
  static const enumtype CTPTrdReqRemoveParkedOrder =
    TagType_enumtype_CTPTrdReqRemoveParkedOrder;
  static const enumtype CTPTrdReqRemoveParkedOrderAction =
    TagType_enumtype_CTPTrdReqRemoveParkedOrderAction;
  static const enumtype CTPTrdReqExecOrderInsert =
    TagType_enumtype_CTPTrdReqExecOrderInsert;
  static const enumtype CTPTrdReqExecOrderAction =
    TagType_enumtype_CTPTrdReqExecOrderAction;
  static const enumtype CTPTrdReqForQuoteInsert =
    TagType_enumtype_CTPTrdReqForQuoteInsert;
  static const enumtype CTPTrdReqQuoteInsert =
    TagType_enumtype_CTPTrdReqQuoteInsert;
  static const enumtype CTPTrdReqQuoteAction =
    TagType_enumtype_CTPTrdReqQuoteAction;
  static const enumtype CTPTrdReqLockInsert =
    TagType_enumtype_CTPTrdReqLockInsert;
  static const enumtype CTPTrdReqCombActionInsert =
    TagType_enumtype_CTPTrdReqCombActionInsert;
  static const enumtype CTPTrdReqQryOrder =
    TagType_enumtype_CTPTrdReqQryOrder;
  static const enumtype CTPTrdReqQryTrade =
    TagType_enumtype_CTPTrdReqQryTrade;
  static const enumtype CTPTrdReqQryInvestorPosition =
    TagType_enumtype_CTPTrdReqQryInvestorPosition;
  static const enumtype CTPTrdReqQryTradingAccount =
    TagType_enumtype_CTPTrdReqQryTradingAccount;
  static const enumtype CTPTrdReqQryInvestor =
    TagType_enumtype_CTPTrdReqQryInvestor;
  static const enumtype CTPTrdReqQryTradingCode =
    TagType_enumtype_CTPTrdReqQryTradingCode;
  static const enumtype CTPTrdReqQryInstrumentMarginRate =
    TagType_enumtype_CTPTrdReqQryInstrumentMarginRate;
  static const enumtype CTPTrdReqQryInstrumentCommissionRate =
    TagType_enumtype_CTPTrdReqQryInstrumentCommissionRate;
  static const enumtype CTPTrdReqQryExchange =
    TagType_enumtype_CTPTrdReqQryExchange;
  static const enumtype CTPTrdReqQryProduct =
    TagType_enumtype_CTPTrdReqQryProduct;
  static const enumtype CTPTrdReqQryInstrument =
    TagType_enumtype_CTPTrdReqQryInstrument;
  static const enumtype CTPTrdReqQryDepthMarketData =
    TagType_enumtype_CTPTrdReqQryDepthMarketData;
  static const enumtype CTPTrdReqQrySettlementInfo =
    TagType_enumtype_CTPTrdReqQrySettlementInfo;
  static const enumtype CTPTrdReqQryTransferBank =
    TagType_enumtype_CTPTrdReqQryTransferBank;
  static const enumtype CTPTrdReqQryInvestorPositionDetail =
    TagType_enumtype_CTPTrdReqQryInvestorPositionDetail;
  static const enumtype CTPTrdReqQryNotice =
    TagType_enumtype_CTPTrdReqQryNotice;
  static const enumtype CTPTrdReqQrySettlementInfoConfirm =
    TagType_enumtype_CTPTrdReqQrySettlementInfoConfirm;
  static const enumtype CTPTrdReqQryInvestorPositionCombineDetail =
    TagType_enumtype_CTPTrdReqQryInvestorPositionCombineDetail;
  static const enumtype CTPTrdReqQryCFMMCTradingAccountKey =
    TagType_enumtype_CTPTrdReqQryCFMMCTradingAccountKey;
  static const enumtype CTPTrdReqQryEWarrantOffset =
    TagType_enumtype_CTPTrdReqQryEWarrantOffset;
  static const enumtype CTPTrdReqQryInvestorProductGroupMargin =
    TagType_enumtype_CTPTrdReqQryInvestorProductGroupMargin;
  static const enumtype CTPTrdReqQryExchangeMarginRate =
    TagType_enumtype_CTPTrdReqQryExchangeMarginRate;
  static const enumtype CTPTrdReqQryExchangeMarginRateAdjust =
    TagType_enumtype_CTPTrdReqQryExchangeMarginRateAdjust;
  static const enumtype CTPTrdReqQryExchangeRate =
    TagType_enumtype_CTPTrdReqQryExchangeRate;
  static const enumtype CTPTrdReqQrySecAgentACIDMap =
    TagType_enumtype_CTPTrdReqQrySecAgentACIDMap;
  static const enumtype CTPTrdReqQryProductExchRate =
    TagType_enumtype_CTPTrdReqQryProductExchRate;
  static const enumtype CTPTrdReqQryProductGroup =
    TagType_enumtype_CTPTrdReqQryProductGroup;
  static const enumtype CTPTrdReqQryOptionInstrTradeCost =
    TagType_enumtype_CTPTrdReqQryOptionInstrTradeCost;
  static const enumtype CTPTrdReqQryOptionInstrCommRate =
    TagType_enumtype_CTPTrdReqQryOptionInstrCommRate;
  static const enumtype CTPTrdReqQryExecOrder =
    TagType_enumtype_CTPTrdReqQryExecOrder;
  static const enumtype CTPTrdReqQryForQuote =
    TagType_enumtype_CTPTrdReqQryForQuote;
  static const enumtype CTPTrdReqQryQuote =
    TagType_enumtype_CTPTrdReqQryQuote;
  static const enumtype CTPTrdReqQryLock =
    TagType_enumtype_CTPTrdReqQryLock;
  static const enumtype CTPTrdReqQryLockPosition =
    TagType_enumtype_CTPTrdReqQryLockPosition;
  static const enumtype CTPTrdReqQryInvestorLevel =
    TagType_enumtype_CTPTrdReqQryInvestorLevel;
  static const enumtype CTPTrdReqQryExecFreeze =
    TagType_enumtype_CTPTrdReqQryExecFreeze;
  static const enumtype CTPTrdReqQryCombInstrumentGuard =
    TagType_enumtype_CTPTrdReqQryCombInstrumentGuard;
  static const enumtype CTPTrdReqQryCombAction =
    TagType_enumtype_CTPTrdReqQryCombAction;
  static const enumtype CTPTrdReqQryTransferSerial =
    TagType_enumtype_CTPTrdReqQryTransferSerial;
  static const enumtype CTPTrdReqQryAccountregister =
    TagType_enumtype_CTPTrdReqQryAccountregister;
  static const enumtype CTPTrdReqQryContractBank =
    TagType_enumtype_CTPTrdReqQryContractBank;
  static const enumtype CTPTrdReqQryParkedOrder =
    TagType_enumtype_CTPTrdReqQryParkedOrder;
  static const enumtype CTPTrdReqQryParkedOrderAction =
    TagType_enumtype_CTPTrdReqQryParkedOrderAction;
  static const enumtype CTPTrdReqQryTradingNotice =
    TagType_enumtype_CTPTrdReqQryTradingNotice;
  static const enumtype CTPTrdReqQryBrokerTradingParams =
    TagType_enumtype_CTPTrdReqQryBrokerTradingParams;
  static const enumtype CTPTrdReqQryBrokerTradingAlgos =
    TagType_enumtype_CTPTrdReqQryBrokerTradingAlgos;
  static const enumtype CTPTrdReqQueryCFMMCTradingAccountToken =
    TagType_enumtype_CTPTrdReqQueryCFMMCTradingAccountToken;
  static const enumtype CTPTrdReqFromBankToFutureByFuture =
    TagType_enumtype_CTPTrdReqFromBankToFutureByFuture;
  static const enumtype CTPTrdReqFromFutureToBankByFuture =
    TagType_enumtype_CTPTrdReqFromFutureToBankByFuture;
  static const enumtype CTPTrdReqQueryBankAccountMoneyByFuture =
    TagType_enumtype_CTPTrdReqQueryBankAccountMoneyByFuture;
  static const enumtype DFITCMdOnFrontConnected =
    TagType_enumtype_DFITCMdOnFrontConnected;
  static const enumtype DFITCMdOnFrontDisconnected =
    TagType_enumtype_DFITCMdOnFrontDisconnected;
  static const enumtype DFITCMdOnRspUserLogin =
    TagType_enumtype_DFITCMdOnRspUserLogin;
  static const enumtype DFITCMdOnRspUserLogout =
    TagType_enumtype_DFITCMdOnRspUserLogout;
  static const enumtype DFITCMdOnRspError =
    TagType_enumtype_DFITCMdOnRspError;
  static const enumtype DFITCMdOnRspSubMarketData =
    TagType_enumtype_DFITCMdOnRspSubMarketData;
  static const enumtype DFITCMdOnRspUnSubMarketData =
    TagType_enumtype_DFITCMdOnRspUnSubMarketData;
  static const enumtype DFITCMdOnRspSubForQuoteRsp =
    TagType_enumtype_DFITCMdOnRspSubForQuoteRsp;
  static const enumtype DFITCMdOnRspUnSubForQuoteRsp =
    TagType_enumtype_DFITCMdOnRspUnSubForQuoteRsp;
  static const enumtype DFITCMdOnMarketData =
    TagType_enumtype_DFITCMdOnMarketData;
  static const enumtype DFITCMdOnCustomMarketData =
    TagType_enumtype_DFITCMdOnCustomMarketData;
  static const enumtype DFITCMdOnRtnForQuoteRsp =
    TagType_enumtype_DFITCMdOnRtnForQuoteRsp;
  static const enumtype DFITCMdOnRspTradingDay =
    TagType_enumtype_DFITCMdOnRspTradingDay;
  static const enumtype DFITCMdSubscribeMarketData =
    TagType_enumtype_DFITCMdSubscribeMarketData;
  static const enumtype DFITCMdUnSubscribeMarketData =
    TagType_enumtype_DFITCMdUnSubscribeMarketData;
  static const enumtype DFITCMdSubscribeForQuoteRsp =
    TagType_enumtype_DFITCMdSubscribeForQuoteRsp;
  static const enumtype DFITCMdUnSubscribeForQuoteRsp =
    TagType_enumtype_DFITCMdUnSubscribeForQuoteRsp;
  static const enumtype DFITCMdReqUserLogin =
    TagType_enumtype_DFITCMdReqUserLogin;
  static const enumtype DFITCMdReqUserLogout =
    TagType_enumtype_DFITCMdReqUserLogout;
  static const enumtype DFITCMdReqTradingDay =
    TagType_enumtype_DFITCMdReqTradingDay;
  static const enumtype DFITCTrdOnFrontConnected =
    TagType_enumtype_DFITCTrdOnFrontConnected;
  static const enumtype DFITCTrdOnFrontDisconnected =
    TagType_enumtype_DFITCTrdOnFrontDisconnected;
  static const enumtype DFITCTrdOnRspUserLogin =
    TagType_enumtype_DFITCTrdOnRspUserLogin;
  static const enumtype DFITCTrdOnRspUserLogout =
    TagType_enumtype_DFITCTrdOnRspUserLogout;
  static const enumtype DFITCTrdOnRspInsertOrder =
    TagType_enumtype_DFITCTrdOnRspInsertOrder;
  static const enumtype DFITCTrdOnRspCancelOrder =
    TagType_enumtype_DFITCTrdOnRspCancelOrder;
  static const enumtype DFITCTrdOnRtnErrorMsg =
    TagType_enumtype_DFITCTrdOnRtnErrorMsg;
  static const enumtype DFITCTrdOnRtnMatchedInfo =
    TagType_enumtype_DFITCTrdOnRtnMatchedInfo;
  static const enumtype DFITCTrdOnRtnOrder =
    TagType_enumtype_DFITCTrdOnRtnOrder;
  static const enumtype DFITCTrdOnRtnCancelOrder =
    TagType_enumtype_DFITCTrdOnRtnCancelOrder;
  static const enumtype DFITCTrdOnRspQryOrderInfo =
    TagType_enumtype_DFITCTrdOnRspQryOrderInfo;
  static const enumtype DFITCTrdOnRspQryMatchInfo =
    TagType_enumtype_DFITCTrdOnRspQryMatchInfo;
  static const enumtype DFITCTrdOnRspQryPosition =
    TagType_enumtype_DFITCTrdOnRspQryPosition;
  static const enumtype DFITCTrdOnRspCustomerCapital =
    TagType_enumtype_DFITCTrdOnRspCustomerCapital;
  static const enumtype DFITCTrdOnRspQryExchangeInstrument =
    TagType_enumtype_DFITCTrdOnRspQryExchangeInstrument;
  static const enumtype DFITCTrdOnRspArbitrageInstrument =
    TagType_enumtype_DFITCTrdOnRspArbitrageInstrument;
  static const enumtype DFITCTrdOnRspQrySpecifyInstrument =
    TagType_enumtype_DFITCTrdOnRspQrySpecifyInstrument;
  static const enumtype DFITCTrdOnRspQryPositionDetail =
    TagType_enumtype_DFITCTrdOnRspQryPositionDetail;
  static const enumtype DFITCTrdOnRtnTradingNotice =
    TagType_enumtype_DFITCTrdOnRtnTradingNotice;
  static const enumtype DFITCTrdOnRspResetPassword =
    TagType_enumtype_DFITCTrdOnRspResetPassword;
  static const enumtype DFITCTrdOnRspQryTradeCode =
    TagType_enumtype_DFITCTrdOnRspQryTradeCode;
  static const enumtype DFITCTrdOnRspBillConfirm =
    TagType_enumtype_DFITCTrdOnRspBillConfirm;
  static const enumtype DFITCTrdOnRspEquityComputMode =
    TagType_enumtype_DFITCTrdOnRspEquityComputMode;
  static const enumtype DFITCTrdOnRspQryBill =
    TagType_enumtype_DFITCTrdOnRspQryBill;
  static const enumtype DFITCTrdOnRspConfirmProductInfo =
    TagType_enumtype_DFITCTrdOnRspConfirmProductInfo;
  static const enumtype DFITCTrdOnRspTradingDay =
    TagType_enumtype_DFITCTrdOnRspTradingDay;
  static const enumtype DFITCTrdOnRspQuoteInsert =
    TagType_enumtype_DFITCTrdOnRspQuoteInsert;
  static const enumtype DFITCTrdOnRtnQuoteInsert =
    TagType_enumtype_DFITCTrdOnRtnQuoteInsert;
  static const enumtype DFITCTrdOnRspQuoteCancel =
    TagType_enumtype_DFITCTrdOnRspQuoteCancel;
  static const enumtype DFITCTrdOnRtnQuoteCancel =
    TagType_enumtype_DFITCTrdOnRtnQuoteCancel;
  static const enumtype DFITCTrdOnRtnQuoteMatchedInfo =
    TagType_enumtype_DFITCTrdOnRtnQuoteMatchedInfo;
  static const enumtype DFITCTrdOnRspCancelAllOrder =
    TagType_enumtype_DFITCTrdOnRspCancelAllOrder;
  static const enumtype DFITCTrdOnRspQryQuoteNotice =
    TagType_enumtype_DFITCTrdOnRspQryQuoteNotice;
  static const enumtype DFITCTrdOnRspForQuote =
    TagType_enumtype_DFITCTrdOnRspForQuote;
  static const enumtype DFITCTrdOnRtnForQuote =
    TagType_enumtype_DFITCTrdOnRtnForQuote;
  static const enumtype DFITCTrdOnRspQryQuoteOrderInfo =
    TagType_enumtype_DFITCTrdOnRspQryQuoteOrderInfo;
  static const enumtype DFITCTrdOnRspQryForQuote =
    TagType_enumtype_DFITCTrdOnRspQryForQuote;
  static const enumtype DFITCTrdOnRspQryTransferBank =
    TagType_enumtype_DFITCTrdOnRspQryTransferBank;
  static const enumtype DFITCTrdOnRspQryTransferSerial =
    TagType_enumtype_DFITCTrdOnRspQryTransferSerial;
  static const enumtype DFITCTrdOnRspFromBankToFutureByFuture =
    TagType_enumtype_DFITCTrdOnRspFromBankToFutureByFuture;
  static const enumtype DFITCTrdOnRspFromFutureToBankByFuture =
    TagType_enumtype_DFITCTrdOnRspFromFutureToBankByFuture;
  static const enumtype DFITCTrdOnRtnFromBankToFutureByFuture =
    TagType_enumtype_DFITCTrdOnRtnFromBankToFutureByFuture;
  static const enumtype DFITCTrdOnRtnFromFutureToBankByFuture =
    TagType_enumtype_DFITCTrdOnRtnFromFutureToBankByFuture;
  static const enumtype DFITCTrdOnRtnRepealFromFutureToBankByBank =
    TagType_enumtype_DFITCTrdOnRtnRepealFromFutureToBankByBank;
  static const enumtype DFITCTrdOnRspQryExchangeStatus =
    TagType_enumtype_DFITCTrdOnRspQryExchangeStatus;
  static const enumtype DFITCTrdOnRtnExchangeStatus =
    TagType_enumtype_DFITCTrdOnRtnExchangeStatus;
  static const enumtype DFITCTrdOnRspQryDepthMarketData =
    TagType_enumtype_DFITCTrdOnRspQryDepthMarketData;
  static const enumtype DFITCTrdOnRspQryExchangeRate =
    TagType_enumtype_DFITCTrdOnRspQryExchangeRate;
  static const enumtype DFITCTrdOnRspQryPricesTrigger =
    TagType_enumtype_DFITCTrdOnRspQryPricesTrigger;
  static const enumtype DFITCTrdOnRspExtInsertOrder =
    TagType_enumtype_DFITCTrdOnRspExtInsertOrder;
  static const enumtype DFITCTrdOnRspExtCancelOrder =
    TagType_enumtype_DFITCTrdOnRspExtCancelOrder;
  static const enumtype DFITCTrdOnRtnPricesTrigger =
    TagType_enumtype_DFITCTrdOnRtnPricesTrigger;
  static const enumtype DFITCTrdOnErrRtnCancelOrder =
    TagType_enumtype_DFITCTrdOnErrRtnCancelOrder;
  static const enumtype DFITCTrdOnErrRtnQuoteCancel =
    TagType_enumtype_DFITCTrdOnErrRtnQuoteCancel;
  static const enumtype DFITCTrdOnRspQryBillConfirm =
    TagType_enumtype_DFITCTrdOnRspQryBillConfirm;
  static const enumtype DFITCTrdOnRspQryTradingNotice =
    TagType_enumtype_DFITCTrdOnRspQryTradingNotice;
  static const enumtype DFITCTrdOnRspQryArbitrageCombineDetail =
    TagType_enumtype_DFITCTrdOnRspQryArbitrageCombineDetail;
  static const enumtype DFITCTrdOpenApiLog =
    TagType_enumtype_DFITCTrdOpenApiLog;
  static const enumtype DFITCTrdReqUserLogin =
    TagType_enumtype_DFITCTrdReqUserLogin;
  static const enumtype DFITCTrdReqUserLogout =
    TagType_enumtype_DFITCTrdReqUserLogout;
  static const enumtype DFITCTrdReqInsertOrder =
    TagType_enumtype_DFITCTrdReqInsertOrder;
  static const enumtype DFITCTrdReqCancelOrder =
    TagType_enumtype_DFITCTrdReqCancelOrder;
  static const enumtype DFITCTrdReqQryPosition =
    TagType_enumtype_DFITCTrdReqQryPosition;
  static const enumtype DFITCTrdReqQryCustomerCapital =
    TagType_enumtype_DFITCTrdReqQryCustomerCapital;
  static const enumtype DFITCTrdReqQryExchangeInstrument =
    TagType_enumtype_DFITCTrdReqQryExchangeInstrument;
  static const enumtype DFITCTrdReqQryArbitrageInstrument =
    TagType_enumtype_DFITCTrdReqQryArbitrageInstrument;
  static const enumtype DFITCTrdReqQryOrderInfo =
    TagType_enumtype_DFITCTrdReqQryOrderInfo;
  static const enumtype DFITCTrdReqQryMatchInfo =
    TagType_enumtype_DFITCTrdReqQryMatchInfo;
  static const enumtype DFITCTrdReqQrySpecifyInstrument =
    TagType_enumtype_DFITCTrdReqQrySpecifyInstrument;
  static const enumtype DFITCTrdReqQryPositionDetail =
    TagType_enumtype_DFITCTrdReqQryPositionDetail;
  static const enumtype DFITCTrdReqConfirmProductInfo =
    TagType_enumtype_DFITCTrdReqConfirmProductInfo;
  static const enumtype DFITCTrdReqResetPassword =
    TagType_enumtype_DFITCTrdReqResetPassword;
  static const enumtype DFITCTrdReqBillConfirm =
    TagType_enumtype_DFITCTrdReqBillConfirm;
  static const enumtype DFITCTrdReqQryTradeCode =
    TagType_enumtype_DFITCTrdReqQryTradeCode;
  static const enumtype DFITCTrdReqEquityComputMode =
    TagType_enumtype_DFITCTrdReqEquityComputMode;
  static const enumtype DFITCTrdReqQryBill =
    TagType_enumtype_DFITCTrdReqQryBill;
  static const enumtype DFITCTrdReqTradingDay =
    TagType_enumtype_DFITCTrdReqTradingDay;
  static const enumtype DFITCTrdReqQryQuoteNotice =
    TagType_enumtype_DFITCTrdReqQryQuoteNotice;
  static const enumtype DFITCTrdReqQuoteInsert =
    TagType_enumtype_DFITCTrdReqQuoteInsert;
  static const enumtype DFITCTrdReqQuoteCancel =
    TagType_enumtype_DFITCTrdReqQuoteCancel;
  static const enumtype DFITCTrdReqCancelAllOrder =
    TagType_enumtype_DFITCTrdReqCancelAllOrder;
  static const enumtype DFITCTrdReqForQuote =
    TagType_enumtype_DFITCTrdReqForQuote;
  static const enumtype DFITCTrdReqQryForQuote =
    TagType_enumtype_DFITCTrdReqQryForQuote;
  static const enumtype DFITCTrdReqQryQuoteOrderInfo =
    TagType_enumtype_DFITCTrdReqQryQuoteOrderInfo;
  static const enumtype DFITCTrdReqQryTransferBank =
    TagType_enumtype_DFITCTrdReqQryTransferBank;
  static const enumtype DFITCTrdReqQryTransferSerial =
    TagType_enumtype_DFITCTrdReqQryTransferSerial;
  static const enumtype DFITCTrdReqFromBankToFutureByFuture =
    TagType_enumtype_DFITCTrdReqFromBankToFutureByFuture;
  static const enumtype DFITCTrdReqFromFutureToBankByFuture =
    TagType_enumtype_DFITCTrdReqFromFutureToBankByFuture;
  static const enumtype DFITCTrdReqQryExchangeStatus =
    TagType_enumtype_DFITCTrdReqQryExchangeStatus;
  static const enumtype DFITCTrdReqQryDepthMarketData =
    TagType_enumtype_DFITCTrdReqQryDepthMarketData;
  static const enumtype DFITCTrdReqQryExchangeRate =
    TagType_enumtype_DFITCTrdReqQryExchangeRate;
  static const enumtype DFITCTrdReqPricesTrigger =
    TagType_enumtype_DFITCTrdReqPricesTrigger;
  static const enumtype DFITCTrdReqQryExtOrder =
    TagType_enumtype_DFITCTrdReqQryExtOrder;
  static const enumtype DFITCTrdReqCancelExtOrder =
    TagType_enumtype_DFITCTrdReqCancelExtOrder;
  static const enumtype DFITCTrdReqQryBillConfirm =
    TagType_enumtype_DFITCTrdReqQryBillConfirm;
  static const enumtype DFITCTrdReqQryTradingNotice =
    TagType_enumtype_DFITCTrdReqQryTradingNotice;
  static const enumtype DFITCTrdReqQryArbitrageCombineDetail =
    TagType_enumtype_DFITCTrdReqQryArbitrageCombineDetail;
  static const enumtype DFITCSECMdOnFrontConnected =
    TagType_enumtype_DFITCSECMdOnFrontConnected;
  static const enumtype DFITCSECMdOnFrontDisconnected =
    TagType_enumtype_DFITCSECMdOnFrontDisconnected;
  static const enumtype DFITCSECMdOnRtnNotice =
    TagType_enumtype_DFITCSECMdOnRtnNotice;
  static const enumtype DFITCSECMdOnRspError =
    TagType_enumtype_DFITCSECMdOnRspError;
  static const enumtype DFITCSECMdOnRspStockUserLogin =
    TagType_enumtype_DFITCSECMdOnRspStockUserLogin;
  static const enumtype DFITCSECMdOnRspStockUserLogout =
    TagType_enumtype_DFITCSECMdOnRspStockUserLogout;
  static const enumtype DFITCSECMdOnRspSOPUserLogin =
    TagType_enumtype_DFITCSECMdOnRspSOPUserLogin;
  static const enumtype DFITCSECMdOnRspSOPUserLogout =
    TagType_enumtype_DFITCSECMdOnRspSOPUserLogout;
  static const enumtype DFITCSECMdOnRspFASLUserLogin =
    TagType_enumtype_DFITCSECMdOnRspFASLUserLogin;
  static const enumtype DFITCSECMdOnRspFASLUserLogout =
    TagType_enumtype_DFITCSECMdOnRspFASLUserLogout;
  static const enumtype DFITCSECMdOnRspStockSubMarketData =
    TagType_enumtype_DFITCSECMdOnRspStockSubMarketData;
  static const enumtype DFITCSECMdOnRspStockUnSubMarketData =
    TagType_enumtype_DFITCSECMdOnRspStockUnSubMarketData;
  static const enumtype DFITCSECMdOnRspSOPSubMarketData =
    TagType_enumtype_DFITCSECMdOnRspSOPSubMarketData;
  static const enumtype DFITCSECMdOnRspSOPUnSubMarketData =
    TagType_enumtype_DFITCSECMdOnRspSOPUnSubMarketData;
  static const enumtype DFITCSECMdOnStockMarketData =
    TagType_enumtype_DFITCSECMdOnStockMarketData;
  static const enumtype DFITCSECMdOnSOPMarketData =
    TagType_enumtype_DFITCSECMdOnSOPMarketData;
  static const enumtype DFITCSECMdOnRspStockAvailableQuot =
    TagType_enumtype_DFITCSECMdOnRspStockAvailableQuot;
  static const enumtype DFITCSECMdOnRspSopAvailableQuot =
    TagType_enumtype_DFITCSECMdOnRspSopAvailableQuot;
  static const enumtype DFITCSECMdOnRspUserMDPasswordUpdate =
    TagType_enumtype_DFITCSECMdOnRspUserMDPasswordUpdate;
  static const enumtype DFITCSECMdSubscribeStockMarketData =
    TagType_enumtype_DFITCSECMdSubscribeStockMarketData;
  static const enumtype DFITCSECMdUnSubscribeStockMarketData =
    TagType_enumtype_DFITCSECMdUnSubscribeStockMarketData;
  static const enumtype DFITCSECMdSubscribeSOPMarketData =
    TagType_enumtype_DFITCSECMdSubscribeSOPMarketData;
  static const enumtype DFITCSECMdUnSubscribeSOPMarketData =
    TagType_enumtype_DFITCSECMdUnSubscribeSOPMarketData;
  static const enumtype DFITCSECMdReqStockUserLogin =
    TagType_enumtype_DFITCSECMdReqStockUserLogin;
  static const enumtype DFITCSECMdReqStockUserLogout =
    TagType_enumtype_DFITCSECMdReqStockUserLogout;
  static const enumtype DFITCSECMdReqSOPUserLogin =
    TagType_enumtype_DFITCSECMdReqSOPUserLogin;
  static const enumtype DFITCSECMdReqFASLUserLogin =
    TagType_enumtype_DFITCSECMdReqFASLUserLogin;
  static const enumtype DFITCSECMdReqSOPUserLogout =
    TagType_enumtype_DFITCSECMdReqSOPUserLogout;
  static const enumtype DFITCSECMdReqFASLUserLogout =
    TagType_enumtype_DFITCSECMdReqFASLUserLogout;
  static const enumtype DFITCSECMdReqStockAvailableQuotQry =
    TagType_enumtype_DFITCSECMdReqStockAvailableQuotQry;
  static const enumtype DFITCSECMdReqSopAvailableQuotQry =
    TagType_enumtype_DFITCSECMdReqSopAvailableQuotQry;
  static const enumtype DFITCSECMdReqUserMDPasswordUpdate =
    TagType_enumtype_DFITCSECMdReqUserMDPasswordUpdate;
  static const enumtype DFITCSECTrdOnFrontConnected =
    TagType_enumtype_DFITCSECTrdOnFrontConnected;
  static const enumtype DFITCSECTrdOnFrontDisconnected =
    TagType_enumtype_DFITCSECTrdOnFrontDisconnected;
  static const enumtype DFITCSECTrdOnRtnNotice =
    TagType_enumtype_DFITCSECTrdOnRtnNotice;
  static const enumtype DFITCSECTrdOnRspError =
    TagType_enumtype_DFITCSECTrdOnRspError;
  static const enumtype DFITCSECTrdOnRspStockUserLogin =
    TagType_enumtype_DFITCSECTrdOnRspStockUserLogin;
  static const enumtype DFITCSECTrdOnRspStockUserLogout =
    TagType_enumtype_DFITCSECTrdOnRspStockUserLogout;
  static const enumtype DFITCSECTrdOnRspStockUserPasswordUpdate =
    TagType_enumtype_DFITCSECTrdOnRspStockUserPasswordUpdate;
  static const enumtype DFITCSECTrdOnRspStockEntrustOrder =
    TagType_enumtype_DFITCSECTrdOnRspStockEntrustOrder;
  static const enumtype DFITCSECTrdOnRspStockWithdrawOrder =
    TagType_enumtype_DFITCSECTrdOnRspStockWithdrawOrder;
  static const enumtype DFITCSECTrdOnRspStockQryEntrustOrder =
    TagType_enumtype_DFITCSECTrdOnRspStockQryEntrustOrder;
  static const enumtype DFITCSECTrdOnRspStockQryRealTimeTrade =
    TagType_enumtype_DFITCSECTrdOnRspStockQryRealTimeTrade;
  static const enumtype DFITCSECTrdOnRspStockQrySerialTrade =
    TagType_enumtype_DFITCSECTrdOnRspStockQrySerialTrade;
  static const enumtype DFITCSECTrdOnRspStockQryPosition =
    TagType_enumtype_DFITCSECTrdOnRspStockQryPosition;
  static const enumtype DFITCSECTrdOnRspStockQryCapitalAccountInfo =
    TagType_enumtype_DFITCSECTrdOnRspStockQryCapitalAccountInfo;
  static const enumtype DFITCSECTrdOnRspStockQryAccountInfo =
    TagType_enumtype_DFITCSECTrdOnRspStockQryAccountInfo;
  static const enumtype DFITCSECTrdOnRspStockQryShareholderInfo =
    TagType_enumtype_DFITCSECTrdOnRspStockQryShareholderInfo;
  static const enumtype DFITCSECTrdOnRspStockTransferFunds =
    TagType_enumtype_DFITCSECTrdOnRspStockTransferFunds;
  static const enumtype DFITCSECTrdOnRspStockEntrustBatchOrder =
    TagType_enumtype_DFITCSECTrdOnRspStockEntrustBatchOrder;
  static const enumtype DFITCSECTrdOnRspStockWithdrawBatchOrder =
    TagType_enumtype_DFITCSECTrdOnRspStockWithdrawBatchOrder;
  static const enumtype DFITCSECTrdOnRspStockCalcAbleEntrustQty =
    TagType_enumtype_DFITCSECTrdOnRspStockCalcAbleEntrustQty;
  static const enumtype DFITCSECTrdOnRspStockCalcAblePurchaseETFQty =
    TagType_enumtype_DFITCSECTrdOnRspStockCalcAblePurchaseETFQty;
  static const enumtype DFITCSECTrdOnRspStockQryFreezeFundsDetail =
    TagType_enumtype_DFITCSECTrdOnRspStockQryFreezeFundsDetail;
  static const enumtype DFITCSECTrdOnRspStockQryFreezeStockDetail =
    TagType_enumtype_DFITCSECTrdOnRspStockQryFreezeStockDetail;
  static const enumtype DFITCSECTrdOnRspStockQryTransferStockDetail =
    TagType_enumtype_DFITCSECTrdOnRspStockQryTransferStockDetail;
  static const enumtype DFITCSECTrdOnRspStockQryTransferFundsDetail =
    TagType_enumtype_DFITCSECTrdOnRspStockQryTransferFundsDetail;
  static const enumtype DFITCSECTrdOnRspStockQryStockInfo =
    TagType_enumtype_DFITCSECTrdOnRspStockQryStockInfo;
  static const enumtype DFITCSECTrdOnRspStockQryStockStaticInfo =
    TagType_enumtype_DFITCSECTrdOnRspStockQryStockStaticInfo;
  static const enumtype DFITCSECTrdOnRspStockQryTradeTime =
    TagType_enumtype_DFITCSECTrdOnRspStockQryTradeTime;
  static const enumtype DFITCSECTrdOnStockEntrustOrderRtn =
    TagType_enumtype_DFITCSECTrdOnStockEntrustOrderRtn;
  static const enumtype DFITCSECTrdOnStockTradeRtn =
    TagType_enumtype_DFITCSECTrdOnStockTradeRtn;
  static const enumtype DFITCSECTrdOnStockWithdrawOrderRtn =
    TagType_enumtype_DFITCSECTrdOnStockWithdrawOrderRtn;
  static const enumtype DFITCSECTrdOnRspSOPUserLogin =
    TagType_enumtype_DFITCSECTrdOnRspSOPUserLogin;
  static const enumtype DFITCSECTrdOnRspSOPUserLogout =
    TagType_enumtype_DFITCSECTrdOnRspSOPUserLogout;
  static const enumtype DFITCSECTrdOnRspSOPUserPasswordUpdate =
    TagType_enumtype_DFITCSECTrdOnRspSOPUserPasswordUpdate;
  static const enumtype DFITCSECTrdOnRspSOPEntrustOrder =
    TagType_enumtype_DFITCSECTrdOnRspSOPEntrustOrder;
  static const enumtype DFITCSECTrdOnRspSOPGroupSplit =
    TagType_enumtype_DFITCSECTrdOnRspSOPGroupSplit;
  static const enumtype DFITCSECTrdOnRspSOPQryGroupPosition =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryGroupPosition;
  static const enumtype DFITCSECTrdOnRspSOPLockOUnLockStock =
    TagType_enumtype_DFITCSECTrdOnRspSOPLockOUnLockStock;
  static const enumtype DFITCSECTrdOnRspSOPWithdrawOrder =
    TagType_enumtype_DFITCSECTrdOnRspSOPWithdrawOrder;
  static const enumtype DFITCSECTrdOnRspSOPQryEntrustOrder =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryEntrustOrder;
  static const enumtype DFITCSECTrdOnRspSOPQrySerialTrade =
    TagType_enumtype_DFITCSECTrdOnRspSOPQrySerialTrade;
  static const enumtype DFITCSECTrdOnRspSOPQryPosition =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryPosition;
  static const enumtype DFITCSECTrdOnRspSOPQryCollateralPosition =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryCollateralPosition;
  static const enumtype DFITCSECTrdOnRspSOPQryCapitalAccountInfo =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryCapitalAccountInfo;
  static const enumtype DFITCSECTrdOnRspSOPQryAccountInfo =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryAccountInfo;
  static const enumtype DFITCSECTrdOnRspSOPQryShareholderInfo =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryShareholderInfo;
  static const enumtype DFITCSECTrdOnRspSOPCalcAbleEntrustQty =
    TagType_enumtype_DFITCSECTrdOnRspSOPCalcAbleEntrustQty;
  static const enumtype DFITCSECTrdOnRspSOPQryAbleLockStock =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryAbleLockStock;
  static const enumtype DFITCSECTrdOnRspSOPQryContactInfo =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryContactInfo;
  static const enumtype DFITCSECTrdOnRspSOPExectueOrder =
    TagType_enumtype_DFITCSECTrdOnRspSOPExectueOrder;
  static const enumtype DFITCSECTrdOnRspSOPQryExecAssiInfo =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryExecAssiInfo;
  static const enumtype DFITCSECTrdOnRspSOPQryTradeTime =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryTradeTime;
  static const enumtype DFITCSECTrdOnRspSOPQryExchangeInfo =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryExchangeInfo;
  static const enumtype DFITCSECTrdOnRspSOPQryCommission =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryCommission;
  static const enumtype DFITCSECTrdOnRspSOPQryDeposit =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryDeposit;
  static const enumtype DFITCSECTrdOnRspSOPQryContractObjectInfo =
    TagType_enumtype_DFITCSECTrdOnRspSOPQryContractObjectInfo;
  static const enumtype DFITCSECTrdOnSOPEntrustOrderRtn =
    TagType_enumtype_DFITCSECTrdOnSOPEntrustOrderRtn;
  static const enumtype DFITCSECTrdOnSOPTradeRtn =
    TagType_enumtype_DFITCSECTrdOnSOPTradeRtn;
  static const enumtype DFITCSECTrdOnSOPWithdrawOrderRtn =
    TagType_enumtype_DFITCSECTrdOnSOPWithdrawOrderRtn;
  static const enumtype DFITCSECTrdOnRspFASLUserLogin =
    TagType_enumtype_DFITCSECTrdOnRspFASLUserLogin;
  static const enumtype DFITCSECTrdOnRspFASLUserLogout =
    TagType_enumtype_DFITCSECTrdOnRspFASLUserLogout;
  static const enumtype DFITCSECTrdOnRspFASLQryAbleFinInfo =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryAbleFinInfo;
  static const enumtype DFITCSECTrdOnRspFASLQryAbleSloInfo =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryAbleSloInfo;
  static const enumtype DFITCSECTrdOnRspFASLTransferCollateral =
    TagType_enumtype_DFITCSECTrdOnRspFASLTransferCollateral;
  static const enumtype DFITCSECTrdOnRspFASLDirectRepayment =
    TagType_enumtype_DFITCSECTrdOnRspFASLDirectRepayment;
  static const enumtype DFITCSECTrdOnRspFASLRepayStockTransfer =
    TagType_enumtype_DFITCSECTrdOnRspFASLRepayStockTransfer;
  static const enumtype DFITCSECTrdOnRspFASLEntrustCrdtOrder =
    TagType_enumtype_DFITCSECTrdOnRspFASLEntrustCrdtOrder;
  static const enumtype DFITCSECTrdOnRspFASLEntrustOrder =
    TagType_enumtype_DFITCSECTrdOnRspFASLEntrustOrder;
  static const enumtype DFITCSECTrdOnRspFASLCalcAbleEntrustCrdtQty =
    TagType_enumtype_DFITCSECTrdOnRspFASLCalcAbleEntrustCrdtQty;
  static const enumtype DFITCSECTrdOnRspFASLQryCrdtFunds =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryCrdtFunds;
  static const enumtype DFITCSECTrdOnRspFASLQryCrdtContract =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryCrdtContract;
  static const enumtype DFITCSECTrdOnRspFASLQryCrdtConChangeInfo =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryCrdtConChangeInfo;
  static const enumtype DFITCSECTrdOnRspFASLTransferFunds =
    TagType_enumtype_DFITCSECTrdOnRspFASLTransferFunds;
  static const enumtype DFITCSECTrdOnRspFASLQryAccountInfo =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryAccountInfo;
  static const enumtype DFITCSECTrdOnRspFASLQryCapitalAccountInfo =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryCapitalAccountInfo;
  static const enumtype DFITCSECTrdOnRspFASLQryShareholderInfo =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryShareholderInfo;
  static const enumtype DFITCSECTrdOnRspFASLQryPosition =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryPosition;
  static const enumtype DFITCSECTrdOnRspFASLQryEntrustOrder =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryEntrustOrder;
  static const enumtype DFITCSECTrdOnRspFASLQrySerialTrade =
    TagType_enumtype_DFITCSECTrdOnRspFASLQrySerialTrade;
  static const enumtype DFITCSECTrdOnRspFASLQryRealTimeTrade =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryRealTimeTrade;
  static const enumtype DFITCSECTrdOnRspFASLQryFreezeFundsDetail =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryFreezeFundsDetail;
  static const enumtype DFITCSECTrdOnRspFASLQryFreezeStockDetail =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryFreezeStockDetail;
  static const enumtype DFITCSECTrdOnRspFASLQryTransferFundsDetail =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryTransferFundsDetail;
  static const enumtype DFITCSECTrdOnRspFASLWithdrawOrder =
    TagType_enumtype_DFITCSECTrdOnRspFASLWithdrawOrder;
  static const enumtype DFITCSECTrdOnRspFASLQrySystemTime =
    TagType_enumtype_DFITCSECTrdOnRspFASLQrySystemTime;
  static const enumtype DFITCSECTrdOnRspFASLQryTransferredContract =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryTransferredContract;
  static const enumtype DFITCSECTrdOnRspFASLDesirableFundsOut =
    TagType_enumtype_DFITCSECTrdOnRspFASLDesirableFundsOut;
  static const enumtype DFITCSECTrdOnRspFASLQryGuaranteedContract =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryGuaranteedContract;
  static const enumtype DFITCSECTrdOnRspFASLQryUnderlyingContract =
    TagType_enumtype_DFITCSECTrdOnRspFASLQryUnderlyingContract;
  static const enumtype DFITCSECTrdOnFASLEntrustOrderRtn =
    TagType_enumtype_DFITCSECTrdOnFASLEntrustOrderRtn;
  static const enumtype DFITCSECTrdOnFASLTradeRtn =
    TagType_enumtype_DFITCSECTrdOnFASLTradeRtn;
  static const enumtype DFITCSECTrdOnFASLWithdrawOrderRtn =
    TagType_enumtype_DFITCSECTrdOnFASLWithdrawOrderRtn;
  static const enumtype DFITCSECTrdReqStockUserLogin =
    TagType_enumtype_DFITCSECTrdReqStockUserLogin;
  static const enumtype DFITCSECTrdReqStockUserLogout =
    TagType_enumtype_DFITCSECTrdReqStockUserLogout;
  static const enumtype DFITCSECTrdReqStockUserPasswordUpdate =
    TagType_enumtype_DFITCSECTrdReqStockUserPasswordUpdate;
  static const enumtype DFITCSECTrdReqStockEntrustOrder =
    TagType_enumtype_DFITCSECTrdReqStockEntrustOrder;
  static const enumtype DFITCSECTrdReqStockWithdrawOrder =
    TagType_enumtype_DFITCSECTrdReqStockWithdrawOrder;
  static const enumtype DFITCSECTrdReqStockQryEntrustOrder =
    TagType_enumtype_DFITCSECTrdReqStockQryEntrustOrder;
  static const enumtype DFITCSECTrdReqStockQryRealTimeTrade =
    TagType_enumtype_DFITCSECTrdReqStockQryRealTimeTrade;
  static const enumtype DFITCSECTrdReqStockQrySerialTrade =
    TagType_enumtype_DFITCSECTrdReqStockQrySerialTrade;
  static const enumtype DFITCSECTrdReqStockQryPosition =
    TagType_enumtype_DFITCSECTrdReqStockQryPosition;
  static const enumtype DFITCSECTrdReqStockQryCapitalAccountInfo =
    TagType_enumtype_DFITCSECTrdReqStockQryCapitalAccountInfo;
  static const enumtype DFITCSECTrdReqStockQryAccountInfo =
    TagType_enumtype_DFITCSECTrdReqStockQryAccountInfo;
  static const enumtype DFITCSECTrdReqStockQryShareholderInfo =
    TagType_enumtype_DFITCSECTrdReqStockQryShareholderInfo;
  static const enumtype DFITCSECTrdReqStockTransferFunds =
    TagType_enumtype_DFITCSECTrdReqStockTransferFunds;
  static const enumtype DFITCSECTrdReqStockEntrustBatchOrder =
    TagType_enumtype_DFITCSECTrdReqStockEntrustBatchOrder;
  static const enumtype DFITCSECTrdReqStockWithdrawBatchOrder =
    TagType_enumtype_DFITCSECTrdReqStockWithdrawBatchOrder;
  static const enumtype DFITCSECTrdReqStockCalcAbleEntrustQty =
    TagType_enumtype_DFITCSECTrdReqStockCalcAbleEntrustQty;
  static const enumtype DFITCSECTrdReqStockCalcAblePurchaseETFQty =
    TagType_enumtype_DFITCSECTrdReqStockCalcAblePurchaseETFQty;
  static const enumtype DFITCSECTrdReqStockQryFreezeFundsDetail =
    TagType_enumtype_DFITCSECTrdReqStockQryFreezeFundsDetail;
  static const enumtype DFITCSECTrdReqStockQryFreezeStockDetail =
    TagType_enumtype_DFITCSECTrdReqStockQryFreezeStockDetail;
  static const enumtype DFITCSECTrdReqStockQryTransferFundsDetail =
    TagType_enumtype_DFITCSECTrdReqStockQryTransferFundsDetail;
  static const enumtype DFITCSECTrdReqStockQryTransferStockDetail =
    TagType_enumtype_DFITCSECTrdReqStockQryTransferStockDetail;
  static const enumtype DFITCSECTrdReqStockQryStockInfo =
    TagType_enumtype_DFITCSECTrdReqStockQryStockInfo;
  static const enumtype DFITCSECTrdReqStockQryStockStaticInfo =
    TagType_enumtype_DFITCSECTrdReqStockQryStockStaticInfo;
  static const enumtype DFITCSECTrdReqStockQryTradeTime =
    TagType_enumtype_DFITCSECTrdReqStockQryTradeTime;
  static const enumtype DFITCSECTrdReqSOPUserLogin =
    TagType_enumtype_DFITCSECTrdReqSOPUserLogin;
  static const enumtype DFITCSECTrdReqSOPUserLogout =
    TagType_enumtype_DFITCSECTrdReqSOPUserLogout;
  static const enumtype DFITCSECTrdReqSOPUserPasswordUpdate =
    TagType_enumtype_DFITCSECTrdReqSOPUserPasswordUpdate;
  static const enumtype DFITCSECTrdReqSOPEntrustOrder =
    TagType_enumtype_DFITCSECTrdReqSOPEntrustOrder;
  static const enumtype DFITCSECTrdReqSOPGroupSplit =
    TagType_enumtype_DFITCSECTrdReqSOPGroupSplit;
  static const enumtype DFITCSECTrdReqSOPQryGroupPosition =
    TagType_enumtype_DFITCSECTrdReqSOPQryGroupPosition;
  static const enumtype DFITCSECTrdReqSOPLockOUnLockStock =
    TagType_enumtype_DFITCSECTrdReqSOPLockOUnLockStock;
  static const enumtype DFITCSECTrdReqSOPWithdrawOrder =
    TagType_enumtype_DFITCSECTrdReqSOPWithdrawOrder;
  static const enumtype DFITCSECTrdReqSOPQryEntrustOrder =
    TagType_enumtype_DFITCSECTrdReqSOPQryEntrustOrder;
  static const enumtype DFITCSECTrdReqSOPQrySerialTrade =
    TagType_enumtype_DFITCSECTrdReqSOPQrySerialTrade;
  static const enumtype DFITCSECTrdReqSOPQryPosition =
    TagType_enumtype_DFITCSECTrdReqSOPQryPosition;
  static const enumtype DFITCSECTrdReqSOPQryCollateralPosition =
    TagType_enumtype_DFITCSECTrdReqSOPQryCollateralPosition;
  static const enumtype DFITCSECTrdReqSOPQryCapitalAccountInfo =
    TagType_enumtype_DFITCSECTrdReqSOPQryCapitalAccountInfo;
  static const enumtype DFITCSECTrdReqSOPQryAccountInfo =
    TagType_enumtype_DFITCSECTrdReqSOPQryAccountInfo;
  static const enumtype DFITCSECTrdReqSOPQryShareholderInfo =
    TagType_enumtype_DFITCSECTrdReqSOPQryShareholderInfo;
  static const enumtype DFITCSECTrdReqSOPCalcAbleEntrustQty =
    TagType_enumtype_DFITCSECTrdReqSOPCalcAbleEntrustQty;
  static const enumtype DFITCSECTrdReqSOPQryAbleLockStock =
    TagType_enumtype_DFITCSECTrdReqSOPQryAbleLockStock;
  static const enumtype DFITCSECTrdReqSOPQryContactInfo =
    TagType_enumtype_DFITCSECTrdReqSOPQryContactInfo;
  static const enumtype DFITCSECTrdReqSOPExectueOrder =
    TagType_enumtype_DFITCSECTrdReqSOPExectueOrder;
  static const enumtype DFITCSECTrdReqSOPQryExecAssiInfo =
    TagType_enumtype_DFITCSECTrdReqSOPQryExecAssiInfo;
  static const enumtype DFITCSECTrdReqSOPQryTradeTime =
    TagType_enumtype_DFITCSECTrdReqSOPQryTradeTime;
  static const enumtype DFITCSECTrdReqSOPQryExchangeInfo =
    TagType_enumtype_DFITCSECTrdReqSOPQryExchangeInfo;
  static const enumtype DFITCSECTrdReqSOPQryCommission =
    TagType_enumtype_DFITCSECTrdReqSOPQryCommission;
  static const enumtype DFITCSECTrdReqSOPQryDeposit =
    TagType_enumtype_DFITCSECTrdReqSOPQryDeposit;
  static const enumtype DFITCSECTrdReqSOPQryContractObjectInfo =
    TagType_enumtype_DFITCSECTrdReqSOPQryContractObjectInfo;
  static const enumtype DFITCSECTrdReqFASLUserLogin =
    TagType_enumtype_DFITCSECTrdReqFASLUserLogin;
  static const enumtype DFITCSECTrdReqFASLUserLogout =
    TagType_enumtype_DFITCSECTrdReqFASLUserLogout;
  static const enumtype DFITCSECTrdReqFASLQryAbleFinInfo =
    TagType_enumtype_DFITCSECTrdReqFASLQryAbleFinInfo;
  static const enumtype DFITCSECTrdReqFASLQryAbleSloInfo =
    TagType_enumtype_DFITCSECTrdReqFASLQryAbleSloInfo;
  static const enumtype DFITCSECTrdReqFASLTransferCollateral =
    TagType_enumtype_DFITCSECTrdReqFASLTransferCollateral;
  static const enumtype DFITCSECTrdReqFASLDirectRepayment =
    TagType_enumtype_DFITCSECTrdReqFASLDirectRepayment;
  static const enumtype DFITCSECTrdReqFASLRepayStockTransfer =
    TagType_enumtype_DFITCSECTrdReqFASLRepayStockTransfer;
  static const enumtype DFITCSECTrdReqFASLEntrustCrdtOrder =
    TagType_enumtype_DFITCSECTrdReqFASLEntrustCrdtOrder;
  static const enumtype DFITCSECTrdReqFASLEntrsuctOrder =
    TagType_enumtype_DFITCSECTrdReqFASLEntrsuctOrder;
  static const enumtype DFITCSECTrdReqFASLWithdrawOrder =
    TagType_enumtype_DFITCSECTrdReqFASLWithdrawOrder;
  static const enumtype DFITCSECTrdReqFASLCalcAbleEntrustCrdtQty =
    TagType_enumtype_DFITCSECTrdReqFASLCalcAbleEntrustCrdtQty;
  static const enumtype DFITCSECTrdReqFASLQryCrdtFunds =
    TagType_enumtype_DFITCSECTrdReqFASLQryCrdtFunds;
  static const enumtype DFITCSECTrdReqFASLQryCrdtContract =
    TagType_enumtype_DFITCSECTrdReqFASLQryCrdtContract;
  static const enumtype DFITCSECTrdReqFASLQryCrdtConChangeInfo =
    TagType_enumtype_DFITCSECTrdReqFASLQryCrdtConChangeInfo;
  static const enumtype DFITCSECTrdReqFASLTransferFunds =
    TagType_enumtype_DFITCSECTrdReqFASLTransferFunds;
  static const enumtype DFITCSECTrdReqFASLQryAccountInfo =
    TagType_enumtype_DFITCSECTrdReqFASLQryAccountInfo;
  static const enumtype DFITCSECTrdReqFASLQryCapitalAccountInfo =
    TagType_enumtype_DFITCSECTrdReqFASLQryCapitalAccountInfo;
  static const enumtype DFITCSECTrdReqFASLQryShareholderInfo =
    TagType_enumtype_DFITCSECTrdReqFASLQryShareholderInfo;
  static const enumtype DFITCSECTrdReqFASLQryPosition =
    TagType_enumtype_DFITCSECTrdReqFASLQryPosition;
  static const enumtype DFITCSECTrdReqFASLQryEntrustOrder =
    TagType_enumtype_DFITCSECTrdReqFASLQryEntrustOrder;
  static const enumtype DFITCSECTrdReqFASLQrySerialTrade =
    TagType_enumtype_DFITCSECTrdReqFASLQrySerialTrade;
  static const enumtype DFITCSECTrdReqFASLQryRealTimeTrade =
    TagType_enumtype_DFITCSECTrdReqFASLQryRealTimeTrade;
  static const enumtype DFITCSECTrdReqFASLQryFreezeFundsDetail =
    TagType_enumtype_DFITCSECTrdReqFASLQryFreezeFundsDetail;
  static const enumtype DFITCSECTrdReqFASLQryFreezeStockDetail =
    TagType_enumtype_DFITCSECTrdReqFASLQryFreezeStockDetail;
  static const enumtype DFITCSECTrdReqFASLQryTransferFundsDetail =
    TagType_enumtype_DFITCSECTrdReqFASLQryTransferFundsDetail;
  static const enumtype DFITCSECTrdReqFASLQrySystemTime =
    TagType_enumtype_DFITCSECTrdReqFASLQrySystemTime;
  static const enumtype DFITCSECTrdReqFASLQryTransferredContract =
    TagType_enumtype_DFITCSECTrdReqFASLQryTransferredContract;
  static const enumtype DFITCSECTrdReqFASLDesirableFundsOut =
    TagType_enumtype_DFITCSECTrdReqFASLDesirableFundsOut;
  static const enumtype DFITCSECTrdReqFASLQryGuaranteedContract =
    TagType_enumtype_DFITCSECTrdReqFASLQryGuaranteedContract;
  static const enumtype DFITCSECTrdReqFASLQryUnderlyingContract =
    TagType_enumtype_DFITCSECTrdReqFASLQryUnderlyingContract;
  static const enumtype XTPMdOnDisconnected =
    TagType_enumtype_XTPMdOnDisconnected;
  static const enumtype XTPMdOnError =
    TagType_enumtype_XTPMdOnError;
  static const enumtype XTPMdOnSubMarketData =
    TagType_enumtype_XTPMdOnSubMarketData;
  static const enumtype XTPMdOnUnSubMarketData =
    TagType_enumtype_XTPMdOnUnSubMarketData;
  static const enumtype XTPMdOnMarketData =
    TagType_enumtype_XTPMdOnMarketData;
  static const enumtype XTPMdOnSubOrderBook =
    TagType_enumtype_XTPMdOnSubOrderBook;
  static const enumtype XTPMdOnUnSubOrderBook =
    TagType_enumtype_XTPMdOnUnSubOrderBook;
  static const enumtype XTPMdOnOrderBook =
    TagType_enumtype_XTPMdOnOrderBook;
  static const enumtype XTPMdOnQueryAllTickers =
    TagType_enumtype_XTPMdOnQueryAllTickers;
  static const enumtype XTPMdGetTradingDay =
    TagType_enumtype_XTPMdGetTradingDay;
  static const enumtype XTPMdGetApiVersion =
    TagType_enumtype_XTPMdGetApiVersion;
  static const enumtype XTPMdGetApiLastError =
    TagType_enumtype_XTPMdGetApiLastError;
  static const enumtype XTPMdSubscribeMarketData =
    TagType_enumtype_XTPMdSubscribeMarketData;
  static const enumtype XTPMdUnSubscribeMarketData =
    TagType_enumtype_XTPMdUnSubscribeMarketData;
  static const enumtype XTPMdSubscribeOrderBook =
    TagType_enumtype_XTPMdSubscribeOrderBook;
  static const enumtype XTPMdUnSubscribeOrderBook =
    TagType_enumtype_XTPMdUnSubscribeOrderBook;
  static const enumtype XTPMdLogin =
    TagType_enumtype_XTPMdLogin;
  static const enumtype XTPMdLogout =
    TagType_enumtype_XTPMdLogout;
  static const enumtype XTPMdQueryAllTickers =
    TagType_enumtype_XTPMdQueryAllTickers;
  static const enumtype XTPTrdOnDisconnected =
    TagType_enumtype_XTPTrdOnDisconnected;
  static const enumtype XTPTrdOnError =
    TagType_enumtype_XTPTrdOnError;
  static const enumtype XTPTrdOnOrderEvent =
    TagType_enumtype_XTPTrdOnOrderEvent;
  static const enumtype XTPTrdOnTradeEvent =
    TagType_enumtype_XTPTrdOnTradeEvent;
  static const enumtype XTPTrdOnCancelOrderError =
    TagType_enumtype_XTPTrdOnCancelOrderError;
  static const enumtype XTPTrdOnQueryOrder =
    TagType_enumtype_XTPTrdOnQueryOrder;
  static const enumtype XTPTrdOnQueryTrade =
    TagType_enumtype_XTPTrdOnQueryTrade;
  static const enumtype XTPTrdOnQueryPosition =
    TagType_enumtype_XTPTrdOnQueryPosition;
  static const enumtype XTPTrdOnQueryAsset =
    TagType_enumtype_XTPTrdOnQueryAsset;
  static const enumtype XTPTrdGetTradingDay =
    TagType_enumtype_XTPTrdGetTradingDay;
  static const enumtype XTPTrdGetApiLastError =
    TagType_enumtype_XTPTrdGetApiLastError;
  static const enumtype XTPTrdGetApiVersion =
    TagType_enumtype_XTPTrdGetApiVersion;
  static const enumtype XTPTrdGetClientIDByXTPID =
    TagType_enumtype_XTPTrdGetClientIDByXTPID;
  static const enumtype XTPTrdGetAccountByXTPID =
    TagType_enumtype_XTPTrdGetAccountByXTPID;
  static const enumtype XTPTrdSetSoftwareVersion =
    TagType_enumtype_XTPTrdSetSoftwareVersion;
  static const enumtype XTPTrdSetSoftwareKey =
    TagType_enumtype_XTPTrdSetSoftwareKey;
  static const enumtype XTPTrdLogin =
    TagType_enumtype_XTPTrdLogin;
  static const enumtype XTPTrdLogout =
    TagType_enumtype_XTPTrdLogout;
  static const enumtype XTPTrdInsertOrder =
    TagType_enumtype_XTPTrdInsertOrder;
  static const enumtype XTPTrdCancelOrder =
    TagType_enumtype_XTPTrdCancelOrder;
  static const enumtype XTPTrdQueryOrderByXTPID =
    TagType_enumtype_XTPTrdQueryOrderByXTPID;
  static const enumtype XTPTrdQueryOrders =
    TagType_enumtype_XTPTrdQueryOrders;
  static const enumtype XTPTrdQueryTradesByXTPID =
    TagType_enumtype_XTPTrdQueryTradesByXTPID;
  static const enumtype XTPTrdQueryTrades =
    TagType_enumtype_XTPTrdQueryTrades;
  static const enumtype XTPTrdQueryPosition =
    TagType_enumtype_XTPTrdQueryPosition;
  static const enumtype XTPTrdQueryAsset =
    TagType_enumtype_XTPTrdQueryAsset;
  static const enumtype LTSMdOnFrontConnected =
    TagType_enumtype_LTSMdOnFrontConnected;
  static const enumtype LTSMdOnFrontDisconnected =
    TagType_enumtype_LTSMdOnFrontDisconnected;
  static const enumtype LTSMdOnHeartBeatWarning =
    TagType_enumtype_LTSMdOnHeartBeatWarning;
  static const enumtype LTSMdOnRspError =
    TagType_enumtype_LTSMdOnRspError;
  static const enumtype LTSMdOnRspUserLogin =
    TagType_enumtype_LTSMdOnRspUserLogin;
  static const enumtype LTSMdOnRspUserLogout =
    TagType_enumtype_LTSMdOnRspUserLogout;
  static const enumtype LTSMdOnRspSubMarketData =
    TagType_enumtype_LTSMdOnRspSubMarketData;
  static const enumtype LTSMdOnRspUnSubMarketData =
    TagType_enumtype_LTSMdOnRspUnSubMarketData;
  static const enumtype LTSMdOnRtnDepthMarketData =
    TagType_enumtype_LTSMdOnRtnDepthMarketData;
  static const enumtype LTSMdGetTradingDay =
    TagType_enumtype_LTSMdGetTradingDay;
  static const enumtype LTSMdRegisterFront =
    TagType_enumtype_LTSMdRegisterFront;
  static const enumtype LTSMdSubscribeMarketData =
    TagType_enumtype_LTSMdSubscribeMarketData;
  static const enumtype LTSMdUnSubscribeMarketData =
    TagType_enumtype_LTSMdUnSubscribeMarketData;
  static const enumtype LTSMdReqUserLogin =
    TagType_enumtype_LTSMdReqUserLogin;
  static const enumtype LTSMdReqUserLogout =
    TagType_enumtype_LTSMdReqUserLogout;
  static const enumtype LTSTrdOnFrontConnected =
    TagType_enumtype_LTSTrdOnFrontConnected;
  static const enumtype LTSTrdOnFrontDisconnected =
    TagType_enumtype_LTSTrdOnFrontDisconnected;
  static const enumtype LTSTrdOnHeartBeatWarning =
    TagType_enumtype_LTSTrdOnHeartBeatWarning;
  static const enumtype LTSTrdOnRspError =
    TagType_enumtype_LTSTrdOnRspError;
  static const enumtype LTSTrdOnRspUserLogin =
    TagType_enumtype_LTSTrdOnRspUserLogin;
  static const enumtype LTSTrdOnRspUserLogout =
    TagType_enumtype_LTSTrdOnRspUserLogout;
  static const enumtype LTSTrdOnRspFetchAuthRandCode =
    TagType_enumtype_LTSTrdOnRspFetchAuthRandCode;
  static const enumtype LTSTrdOnRspOrderInsert =
    TagType_enumtype_LTSTrdOnRspOrderInsert;
  static const enumtype LTSTrdOnRspOrderAction =
    TagType_enumtype_LTSTrdOnRspOrderAction;
  static const enumtype LTSTrdOnRspUserPasswordUpdate =
    TagType_enumtype_LTSTrdOnRspUserPasswordUpdate;
  static const enumtype LTSTrdOnRspTradingAccountPasswordUpdate =
    TagType_enumtype_LTSTrdOnRspTradingAccountPasswordUpdate;
  static const enumtype LTSTrdOnRtnOrder =
    TagType_enumtype_LTSTrdOnRtnOrder;
  static const enumtype LTSTrdOnRtnTrade =
    TagType_enumtype_LTSTrdOnRtnTrade;
  static const enumtype LTSTrdOnErrRtnOrderInsert =
    TagType_enumtype_LTSTrdOnErrRtnOrderInsert;
  static const enumtype LTSTrdOnErrRtnOrderAction =
    TagType_enumtype_LTSTrdOnErrRtnOrderAction;
  static const enumtype LTSTrdOnRspFundOutByLiber =
    TagType_enumtype_LTSTrdOnRspFundOutByLiber;
  static const enumtype LTSTrdOnRtnFundOutByLiber =
    TagType_enumtype_LTSTrdOnRtnFundOutByLiber;
  static const enumtype LTSTrdOnErrRtnFundOutByLiber =
    TagType_enumtype_LTSTrdOnErrRtnFundOutByLiber;
  static const enumtype LTSTrdOnRtnFundInByBank =
    TagType_enumtype_LTSTrdOnRtnFundInByBank;
  static const enumtype LTSTrdOnRspFundInterTransfer =
    TagType_enumtype_LTSTrdOnRspFundInterTransfer;
  static const enumtype LTSTrdOnRtnFundInterTransferSerial =
    TagType_enumtype_LTSTrdOnRtnFundInterTransferSerial;
  static const enumtype LTSTrdOnErrRtnFundInterTransfer =
    TagType_enumtype_LTSTrdOnErrRtnFundInterTransfer;
  static const enumtype LTSTrdGetTradingDay =
    TagType_enumtype_LTSTrdGetTradingDay;
  static const enumtype LTSTrdRegisterFront =
    TagType_enumtype_LTSTrdRegisterFront;
  static const enumtype LTSTrdSubscribePrivateTopic =
    TagType_enumtype_LTSTrdSubscribePrivateTopic;
  static const enumtype LTSTrdSubscribePublicTopic =
    TagType_enumtype_LTSTrdSubscribePublicTopic;
  static const enumtype LTSTrdReqUserLogin =
    TagType_enumtype_LTSTrdReqUserLogin;
  static const enumtype LTSTrdReqUserLogout =
    TagType_enumtype_LTSTrdReqUserLogout;
  static const enumtype LTSTrdReqFetchAuthRandCode =
    TagType_enumtype_LTSTrdReqFetchAuthRandCode;
  static const enumtype LTSTrdReqOrderInsert =
    TagType_enumtype_LTSTrdReqOrderInsert;
  static const enumtype LTSTrdReqOrderAction =
    TagType_enumtype_LTSTrdReqOrderAction;
  static const enumtype LTSTrdReqUserPasswordUpdate =
    TagType_enumtype_LTSTrdReqUserPasswordUpdate;
  static const enumtype LTSTrdReqTradingAccountPasswordUpdate =
    TagType_enumtype_LTSTrdReqTradingAccountPasswordUpdate;
  static const enumtype LTSTrdReqFundOutByLiber =
    TagType_enumtype_LTSTrdReqFundOutByLiber;
  static const enumtype LTSTrdReqFundInterTransfer =
    TagType_enumtype_LTSTrdReqFundInterTransfer;
  static const enumtype LTSQryOnFrontConnected =
    TagType_enumtype_LTSQryOnFrontConnected;
  static const enumtype LTSQryOnFrontDisconnected =
    TagType_enumtype_LTSQryOnFrontDisconnected;
  static const enumtype LTSQryOnHeartBeatWarning =
    TagType_enumtype_LTSQryOnHeartBeatWarning;
  static const enumtype LTSQryOnRspError =
    TagType_enumtype_LTSQryOnRspError;
  static const enumtype LTSQryOnRspUserLogin =
    TagType_enumtype_LTSQryOnRspUserLogin;
  static const enumtype LTSQryOnRspUserLogout =
    TagType_enumtype_LTSQryOnRspUserLogout;
  static const enumtype LTSQryOnRspFetchAuthRandCode =
    TagType_enumtype_LTSQryOnRspFetchAuthRandCode;
  static const enumtype LTSQryOnRspQryExchange =
    TagType_enumtype_LTSQryOnRspQryExchange;
  static const enumtype LTSQryOnRspQryInstrument =
    TagType_enumtype_LTSQryOnRspQryInstrument;
  static const enumtype LTSQryOnRspQryInvestor =
    TagType_enumtype_LTSQryOnRspQryInvestor;
  static const enumtype LTSQryOnRspQryTradingCode =
    TagType_enumtype_LTSQryOnRspQryTradingCode;
  static const enumtype LTSQryOnRspQryTradingAccount =
    TagType_enumtype_LTSQryOnRspQryTradingAccount;
  static const enumtype LTSQryOnRspQryBondInterest =
    TagType_enumtype_LTSQryOnRspQryBondInterest;
  static const enumtype LTSQryOnRspQryMarketRationInfo =
    TagType_enumtype_LTSQryOnRspQryMarketRationInfo;
  static const enumtype LTSQryOnRspQryInstrumentCommissionRate =
    TagType_enumtype_LTSQryOnRspQryInstrumentCommissionRate;
  static const enumtype LTSQryOnRspQryETFInstrument =
    TagType_enumtype_LTSQryOnRspQryETFInstrument;
  static const enumtype LTSQryOnRspQryETFBasket =
    TagType_enumtype_LTSQryOnRspQryETFBasket;
  static const enumtype LTSQryOnRspQryOFInstrument =
    TagType_enumtype_LTSQryOnRspQryOFInstrument;
  static const enumtype LTSQryOnRspQrySFInstrument =
    TagType_enumtype_LTSQryOnRspQrySFInstrument;
  static const enumtype LTSQryOnRspQryInstrumentUnitMargin =
    TagType_enumtype_LTSQryOnRspQryInstrumentUnitMargin;
  static const enumtype LTSQryOnRspQryPreDelivInfo =
    TagType_enumtype_LTSQryOnRspQryPreDelivInfo;
  static const enumtype LTSQryOnRspQryCreditStockAssignInfo =
    TagType_enumtype_LTSQryOnRspQryCreditStockAssignInfo;
  static const enumtype LTSQryOnRspQryCreditCashAssignInfo =
    TagType_enumtype_LTSQryOnRspQryCreditCashAssignInfo;
  static const enumtype LTSQryOnRspQryConversionRate =
    TagType_enumtype_LTSQryOnRspQryConversionRate;
  static const enumtype LTSQryOnRspQryHisCreditDebtInfo =
    TagType_enumtype_LTSQryOnRspQryHisCreditDebtInfo;
  static const enumtype LTSQryOnRspQryMarketDataStaticInfo =
    TagType_enumtype_LTSQryOnRspQryMarketDataStaticInfo;
  static const enumtype LTSQryOnRspQryExpireRepurchInfo =
    TagType_enumtype_LTSQryOnRspQryExpireRepurchInfo;
  static const enumtype LTSQryOnRspQryBondPledgeRate =
    TagType_enumtype_LTSQryOnRspQryBondPledgeRate;
  static const enumtype LTSQryOnRspQryPledgeBond =
    TagType_enumtype_LTSQryOnRspQryPledgeBond;
  static const enumtype LTSQryOnRspQryOrder =
    TagType_enumtype_LTSQryOnRspQryOrder;
  static const enumtype LTSQryOnRspQryTrade =
    TagType_enumtype_LTSQryOnRspQryTrade;
  static const enumtype LTSQryOnRspQryInvestorPosition =
    TagType_enumtype_LTSQryOnRspQryInvestorPosition;
  static const enumtype LTSQryOnRspQryFundTransferSerial =
    TagType_enumtype_LTSQryOnRspQryFundTransferSerial;
  static const enumtype LTSQryOnRspQryFundInterTransferSerial =
    TagType_enumtype_LTSQryOnRspQryFundInterTransferSerial;
  static const enumtype LTSQryGetTradingDay =
    TagType_enumtype_LTSQryGetTradingDay;
  static const enumtype LTSQryRegisterFront =
    TagType_enumtype_LTSQryRegisterFront;
  static const enumtype LTSQryReqUserLogin =
    TagType_enumtype_LTSQryReqUserLogin;
  static const enumtype LTSQryReqUserLogout =
    TagType_enumtype_LTSQryReqUserLogout;
  static const enumtype LTSQryReqFetchAuthRandCode =
    TagType_enumtype_LTSQryReqFetchAuthRandCode;
  static const enumtype LTSQryReqQryExchange =
    TagType_enumtype_LTSQryReqQryExchange;
  static const enumtype LTSQryReqQryInstrument =
    TagType_enumtype_LTSQryReqQryInstrument;
  static const enumtype LTSQryReqQryInvestor =
    TagType_enumtype_LTSQryReqQryInvestor;
  static const enumtype LTSQryReqQryTradingCode =
    TagType_enumtype_LTSQryReqQryTradingCode;
  static const enumtype LTSQryReqQryTradingAccount =
    TagType_enumtype_LTSQryReqQryTradingAccount;
  static const enumtype LTSQryReqQryBondInterest =
    TagType_enumtype_LTSQryReqQryBondInterest;
  static const enumtype LTSQryReqQryMarketRationInfo =
    TagType_enumtype_LTSQryReqQryMarketRationInfo;
  static const enumtype LTSQryReqQryInstrumentCommissionRate =
    TagType_enumtype_LTSQryReqQryInstrumentCommissionRate;
  static const enumtype LTSQryReqQryETFInstrument =
    TagType_enumtype_LTSQryReqQryETFInstrument;
  static const enumtype LTSQryReqQryETFBasket =
    TagType_enumtype_LTSQryReqQryETFBasket;
  static const enumtype LTSQryReqQryOFInstrument =
    TagType_enumtype_LTSQryReqQryOFInstrument;
  static const enumtype LTSQryReqQrySFInstrument =
    TagType_enumtype_LTSQryReqQrySFInstrument;
  static const enumtype LTSQryReqQryInstrumentUnitMargin =
    TagType_enumtype_LTSQryReqQryInstrumentUnitMargin;
  static const enumtype LTSQryReqQryPreDelivInfo =
    TagType_enumtype_LTSQryReqQryPreDelivInfo;
  static const enumtype LTSQryReqQryCreditStockAssignInfo =
    TagType_enumtype_LTSQryReqQryCreditStockAssignInfo;
  static const enumtype LTSQryReqQryCreditCashAssignInfo =
    TagType_enumtype_LTSQryReqQryCreditCashAssignInfo;
  static const enumtype LTSQryReqQryConversionRate =
    TagType_enumtype_LTSQryReqQryConversionRate;
  static const enumtype LTSQryReqQryHisCreditDebtInfo =
    TagType_enumtype_LTSQryReqQryHisCreditDebtInfo;
  static const enumtype LTSQryReqQryMarketDataStaticInfo =
    TagType_enumtype_LTSQryReqQryMarketDataStaticInfo;
  static const enumtype LTSQryReqQryExpireRepurchInfo =
    TagType_enumtype_LTSQryReqQryExpireRepurchInfo;
  static const enumtype LTSQryReqQryBondPledgeRate =
    TagType_enumtype_LTSQryReqQryBondPledgeRate;
  static const enumtype LTSQryReqQryPledgeBond =
    TagType_enumtype_LTSQryReqQryPledgeBond;
  static const enumtype LTSQryReqQryOrder =
    TagType_enumtype_LTSQryReqQryOrder;
  static const enumtype LTSQryReqQryTrade =
    TagType_enumtype_LTSQryReqQryTrade;
  static const enumtype LTSQryReqQryInvestorPosition =
    TagType_enumtype_LTSQryReqQryInvestorPosition;
  static const enumtype LTSQryReqQryFundTransferSerial =
    TagType_enumtype_LTSQryReqQryFundTransferSerial;
  static const enumtype LTSQryReqQryFundInterTransferSerial =
    TagType_enumtype_LTSQryReqQryFundInterTransferSerial;
  static const enumtype KCBPMdOnQuote =
    TagType_enumtype_KCBPMdOnQuote;
  static const enumtype KCBPMdOnMktTrd =
    TagType_enumtype_KCBPMdOnMktTrd;
  static const enumtype KCBTrdOnFill =
    TagType_enumtype_KCBTrdOnFill;
  static const enumtype YahooMdOnSnapshot =
    TagType_enumtype_YahooMdOnSnapshot;
  static const enumtype SinaMdOnSnapshot =
    TagType_enumtype_SinaMdOnSnapshot;
  static const enumtype LeverFunMdOnSnapshot =
    TagType_enumtype_LeverFunMdOnSnapshot;
  static const enumtype ESUNNY3MdOnRspLogin =
    TagType_enumtype_ESUNNY3MdOnRspLogin;
  static const enumtype ESUNNY3MdOnChannelLost =
    TagType_enumtype_ESUNNY3MdOnChannelLost;
  static const enumtype ESUNNY3MdOnStkQuot =
    TagType_enumtype_ESUNNY3MdOnStkQuot;
  static const enumtype ESUNNY3MdOnRspHistoryQuot =
    TagType_enumtype_ESUNNY3MdOnRspHistoryQuot;
  static const enumtype ESUNNY3MdOnRspTraceData =
    TagType_enumtype_ESUNNY3MdOnRspTraceData;
  static const enumtype ESUNNY3MdOnRspMarketInfo =
    TagType_enumtype_ESUNNY3MdOnRspMarketInfo;
  static const enumtype ESUNNY3TrdOnOpen =
    TagType_enumtype_ESUNNY3TrdOnOpen;
  static const enumtype ESUNNY3TrdOnClose =
    TagType_enumtype_ESUNNY3TrdOnClose;
  static const enumtype ESUNNY3TrdOnLogin =
    TagType_enumtype_ESUNNY3TrdOnLogin;
  static const enumtype ESUNNY3TrdOnInitFinished =
    TagType_enumtype_ESUNNY3TrdOnInitFinished;
  static const enumtype ESUNNY3TrdOnLogOut =
    TagType_enumtype_ESUNNY3TrdOnLogOut;
  static const enumtype ESUNNY3TrdOnRspSetPassword =
    TagType_enumtype_ESUNNY3TrdOnRspSetPassword;
  static const enumtype ESUNNY3TrdOnRspSetOperPassword =
    TagType_enumtype_ESUNNY3TrdOnRspSetOperPassword;
  static const enumtype ESUNNY3TrdOnQryMoney =
    TagType_enumtype_ESUNNY3TrdOnQryMoney;
  static const enumtype ESUNNY3TrdOnRtnMoney =
    TagType_enumtype_ESUNNY3TrdOnRtnMoney;
  static const enumtype ESUNNY3TrdOnRspCashOperQry =
    TagType_enumtype_ESUNNY3TrdOnRspCashOperQry;
  static const enumtype ESUNNY3TrdOnRspCashOper =
    TagType_enumtype_ESUNNY3TrdOnRspCashOper;
  static const enumtype ESUNNY3TrdOnRtnCashOper =
    TagType_enumtype_ESUNNY3TrdOnRtnCashOper;
  static const enumtype ESUNNY3TrdOnRspCashCheck =
    TagType_enumtype_ESUNNY3TrdOnRspCashCheck;
  static const enumtype ESUNNY3TrdOnRtnCashCheck =
    TagType_enumtype_ESUNNY3TrdOnRtnCashCheck;
  static const enumtype ESUNNY3TrdOnRspCashAdjustQry =
    TagType_enumtype_ESUNNY3TrdOnRspCashAdjustQry;
  static const enumtype ESUNNY3TrdOnRspOrderInsert =
    TagType_enumtype_ESUNNY3TrdOnRspOrderInsert;
  static const enumtype ESUNNY3TrdOnRspOrderModify =
    TagType_enumtype_ESUNNY3TrdOnRspOrderModify;
  static const enumtype ESUNNY3TrdOnRspOrderDelete =
    TagType_enumtype_ESUNNY3TrdOnRspOrderDelete;
  static const enumtype ESUNNY3TrdOnRspQryOrder =
    TagType_enumtype_ESUNNY3TrdOnRspQryOrder;
  static const enumtype ESUNNY3TrdOnRspHistOrderQry =
    TagType_enumtype_ESUNNY3TrdOnRspHistOrderQry;
  static const enumtype ESUNNY3TrdOnRtnOrderState =
    TagType_enumtype_ESUNNY3TrdOnRtnOrderState;
  static const enumtype ESUNNY3TrdOnRtnOrderInfo =
    TagType_enumtype_ESUNNY3TrdOnRtnOrderInfo;
  static const enumtype ESUNNY3TrdOnRspMatchQry =
    TagType_enumtype_ESUNNY3TrdOnRspMatchQry;
  static const enumtype ESUNNY3TrdOnRtnMatchState =
    TagType_enumtype_ESUNNY3TrdOnRtnMatchState;
  static const enumtype ESUNNY3TrdOnRtnMatchInfo =
    TagType_enumtype_ESUNNY3TrdOnRtnMatchInfo;
  static const enumtype ESUNNY3TrdOnRspHistMatchQry =
    TagType_enumtype_ESUNNY3TrdOnRspHistMatchQry;
  static const enumtype ESUNNY3TrdOnQryHold =
    TagType_enumtype_ESUNNY3TrdOnQryHold;
  static const enumtype ESUNNY3TrdOnRtnHold =
    TagType_enumtype_ESUNNY3TrdOnRtnHold;
  static const enumtype ESUNNY3TrdOnQryExchangeState =
    TagType_enumtype_ESUNNY3TrdOnQryExchangeState;
  static const enumtype ESUNNY3TrdOnRtnExchangeState =
    TagType_enumtype_ESUNNY3TrdOnRtnExchangeState;
  static const enumtype ESUNNY3TrdOnQryCommodity =
    TagType_enumtype_ESUNNY3TrdOnQryCommodity;
  static const enumtype ESUNNY3TrdOnQryContract =
    TagType_enumtype_ESUNNY3TrdOnQryContract;
  static const enumtype ESUNNY3TrdOnQryClient =
    TagType_enumtype_ESUNNY3TrdOnQryClient;
  static const enumtype ESUNNY3TrdOnRspHistCashOperQry =
    TagType_enumtype_ESUNNY3TrdOnRspHistCashOperQry;
  static const enumtype ESUNNY3TrdOnRspHistCashAdjustQry =
    TagType_enumtype_ESUNNY3TrdOnRspHistCashAdjustQry;
  static const enumtype ESUNNY3TrdOnRspAuthClient =
    TagType_enumtype_ESUNNY3TrdOnRspAuthClient;
  static const enumtype ESUNNY3TrdOnRspQryCurrency =
    TagType_enumtype_ESUNNY3TrdOnRspQryCurrency;
  static const enumtype ESUNNY3TrdOnRtnExchangeRateMod =
    TagType_enumtype_ESUNNY3TrdOnRtnExchangeRateMod;
  static const enumtype ESUNNY3TrdOnRtnOrderRemove =
    TagType_enumtype_ESUNNY3TrdOnRtnOrderRemove;
  static const enumtype ESUNNY3TrdOnRtnMatchRemove =
    TagType_enumtype_ESUNNY3TrdOnRtnMatchRemove;
  static const enumtype ESUNNY3TrdOnRtnCommodityState =
    TagType_enumtype_ESUNNY3TrdOnRtnCommodityState;
  static const enumtype ESUNNY3TrdOnRtnContractAdd =
    TagType_enumtype_ESUNNY3TrdOnRtnContractAdd;
  static const enumtype ESUNNY3TrdOnRspQryMonitorEvent =
    TagType_enumtype_ESUNNY3TrdOnRspQryMonitorEvent;
  static const enumtype ESUNNY3TrdOnRtnMonitorEvent =
    TagType_enumtype_ESUNNY3TrdOnRtnMonitorEvent;
  static const enumtype ESUNNY3TrdOnRspHKMarketOrder =
    TagType_enumtype_ESUNNY3TrdOnRspHKMarketOrder;
  static const enumtype ESUNNY3TrdOnRspQryClientCountRent =
    TagType_enumtype_ESUNNY3TrdOnRspQryClientCountRent;
  static const enumtype ESUNNY3TrdOnRspQryLmeContract =
    TagType_enumtype_ESUNNY3TrdOnRspQryLmeContract;
  static const enumtype ESUNNY3TrdOnRtnLmeContract =
    TagType_enumtype_ESUNNY3TrdOnRtnLmeContract;
  static const enumtype ESUNNY3TrdOnRspQryHisHold =
    TagType_enumtype_ESUNNY3TrdOnRspQryHisHold;
  static const enumtype ESUNNY3TrdOnRspQryHisMoney =
    TagType_enumtype_ESUNNY3TrdOnRspQryHisMoney;
  static const enumtype ESUNNY3TrdSetSpi =
    TagType_enumtype_ESUNNY3TrdSetSpi;
  static const enumtype ESUNNY3TrdFree =
    TagType_enumtype_ESUNNY3TrdFree;
  static const enumtype ESUNNY3TrdGetErrcodeDesc =
    TagType_enumtype_ESUNNY3TrdGetErrcodeDesc;
  static const enumtype ESUNNY3TrdOpen =
    TagType_enumtype_ESUNNY3TrdOpen;
  static const enumtype ESUNNY3TrdClose =
    TagType_enumtype_ESUNNY3TrdClose;
  static const enumtype ESUNNY3TrdIsOpen =
    TagType_enumtype_ESUNNY3TrdIsOpen;
  static const enumtype ESUNNY3TrdLogin =
    TagType_enumtype_ESUNNY3TrdLogin;
  static const enumtype ESUNNY3TrdSetVertificateCode =
    TagType_enumtype_ESUNNY3TrdSetVertificateCode;
  static const enumtype ESUNNY3TrdLogOut =
    TagType_enumtype_ESUNNY3TrdLogOut;
  static const enumtype ESUNNY3TrdSetPassword =
    TagType_enumtype_ESUNNY3TrdSetPassword;
  static const enumtype ESUNNY3TrdSetOperPassword =
    TagType_enumtype_ESUNNY3TrdSetOperPassword;
  static const enumtype ESUNNY3TrdQryClients =
    TagType_enumtype_ESUNNY3TrdQryClients;
  static const enumtype ESUNNY3TrdQryMoney =
    TagType_enumtype_ESUNNY3TrdQryMoney;
  static const enumtype ESUNNY3TrdQryOrder =
    TagType_enumtype_ESUNNY3TrdQryOrder;
  static const enumtype ESUNNY3TrdQryMatch =
    TagType_enumtype_ESUNNY3TrdQryMatch;
  static const enumtype ESUNNY3TrdQryHold =
    TagType_enumtype_ESUNNY3TrdQryHold;
  static const enumtype ESUNNY3TrdQryExchangeState =
    TagType_enumtype_ESUNNY3TrdQryExchangeState;
  static const enumtype ESUNNY3TrdQryCommodity =
    TagType_enumtype_ESUNNY3TrdQryCommodity;
  static const enumtype ESUNNY3TrdQryContract =
    TagType_enumtype_ESUNNY3TrdQryContract;
  static const enumtype ESUNNY3TrdOrderInsert =
    TagType_enumtype_ESUNNY3TrdOrderInsert;
  static const enumtype ESUNNY3TrdOrderModify =
    TagType_enumtype_ESUNNY3TrdOrderModify;
  static const enumtype ESUNNY3TrdOrderDelete =
    TagType_enumtype_ESUNNY3TrdOrderDelete;
  static const enumtype ESUNNY3TrdQryHistOrder =
    TagType_enumtype_ESUNNY3TrdQryHistOrder;
  static const enumtype ESUNNY3TrdQryHistMatch =
    TagType_enumtype_ESUNNY3TrdQryHistMatch;
  static const enumtype ESUNNY3TrdQryCashOper =
    TagType_enumtype_ESUNNY3TrdQryCashOper;
  static const enumtype ESUNNY3TrdCashOper =
    TagType_enumtype_ESUNNY3TrdCashOper;
  static const enumtype ESUNNY3TrdCashCheck =
    TagType_enumtype_ESUNNY3TrdCashCheck;
  static const enumtype ESUNNY3TrdQryCachAdjust =
    TagType_enumtype_ESUNNY3TrdQryCachAdjust;
  static const enumtype ESUNNY3TrdQryHistCashOper =
    TagType_enumtype_ESUNNY3TrdQryHistCashOper;
  static const enumtype ESUNNY3TrdQryHistCachAdjust =
    TagType_enumtype_ESUNNY3TrdQryHistCachAdjust;
  static const enumtype ESUNNY3TrdAuthClient =
    TagType_enumtype_ESUNNY3TrdAuthClient;
  static const enumtype ESUNNY3TrdQryCurrency =
    TagType_enumtype_ESUNNY3TrdQryCurrency;
  static const enumtype ESUNNY3TrdGetCertCodeExpireDate =
    TagType_enumtype_ESUNNY3TrdGetCertCodeExpireDate;
  static const enumtype ESUNNY3TrdQryMonitorEvent =
    TagType_enumtype_ESUNNY3TrdQryMonitorEvent;
  static const enumtype ESUNNY3TrdHKMarketOrderOperator =
    TagType_enumtype_ESUNNY3TrdHKMarketOrderOperator;
  static const enumtype ESUNNY3TrdQryCountRent =
    TagType_enumtype_ESUNNY3TrdQryCountRent;
  static const enumtype ESUNNY3TrdQryLmeContract =
    TagType_enumtype_ESUNNY3TrdQryLmeContract;
  static const enumtype ESUNNY3TrdQryHisHold =
    TagType_enumtype_ESUNNY3TrdQryHisHold;
  static const enumtype ESUNNY3TrdQryHisMoney =
    TagType_enumtype_ESUNNY3TrdQryHisMoney;
  static const enumtype ESUNNY9MdOnRspLogin =
    TagType_enumtype_ESUNNY9MdOnRspLogin;
  static const enumtype ESUNNY9MdOnAPIReady =
    TagType_enumtype_ESUNNY9MdOnAPIReady;
  static const enumtype ESUNNY9MdOnDisconnect =
    TagType_enumtype_ESUNNY9MdOnDisconnect;
  static const enumtype ESUNNY9MdOnRspQryCommodity =
    TagType_enumtype_ESUNNY9MdOnRspQryCommodity;
  static const enumtype ESUNNY9MdOnRspQryContract =
    TagType_enumtype_ESUNNY9MdOnRspQryContract;
  static const enumtype ESUNNY9MdOnRspSubscribeQuote =
    TagType_enumtype_ESUNNY9MdOnRspSubscribeQuote;
  static const enumtype ESUNNY9MdOnRspUnSubscribeQuote =
    TagType_enumtype_ESUNNY9MdOnRspUnSubscribeQuote;
  static const enumtype ESUNNY9MdOnRtnQuote =
    TagType_enumtype_ESUNNY9MdOnRtnQuote;
  static const enumtype ESUNNY9MdSetAPINotify =
    TagType_enumtype_ESUNNY9MdSetAPINotify;
  static const enumtype ESUNNY9MdSetHostAddress =
    TagType_enumtype_ESUNNY9MdSetHostAddress;
  static const enumtype ESUNNY9MdLogin =
    TagType_enumtype_ESUNNY9MdLogin;
  static const enumtype ESUNNY9MdDisconnect =
    TagType_enumtype_ESUNNY9MdDisconnect;
  static const enumtype ESUNNY9MdQryCommodity =
    TagType_enumtype_ESUNNY9MdQryCommodity;
  static const enumtype ESUNNY9MdQryContract =
    TagType_enumtype_ESUNNY9MdQryContract;
  static const enumtype ESUNNY9MdSubscribeQuote =
    TagType_enumtype_ESUNNY9MdSubscribeQuote;
  static const enumtype ESUNNY9MdUnSubscribeQuote =
    TagType_enumtype_ESUNNY9MdUnSubscribeQuote;
  static const enumtype ESUNNY9TrdOnConnect =
    TagType_enumtype_ESUNNY9TrdOnConnect;
  static const enumtype ESUNNY9TrdOnRspLogin =
    TagType_enumtype_ESUNNY9TrdOnRspLogin;
  static const enumtype ESUNNY9TrdOnExpriationDate =
    TagType_enumtype_ESUNNY9TrdOnExpriationDate;
  static const enumtype ESUNNY9TrdOnAPIReady =
    TagType_enumtype_ESUNNY9TrdOnAPIReady;
  static const enumtype ESUNNY9TrdOnDisconnect =
    TagType_enumtype_ESUNNY9TrdOnDisconnect;
  static const enumtype ESUNNY9TrdOnRspChangePassword =
    TagType_enumtype_ESUNNY9TrdOnRspChangePassword;
  static const enumtype ESUNNY9TrdOnRspSetReservedInfo =
    TagType_enumtype_ESUNNY9TrdOnRspSetReservedInfo;
  static const enumtype ESUNNY9TrdOnRspQryAccount =
    TagType_enumtype_ESUNNY9TrdOnRspQryAccount;
  static const enumtype ESUNNY9TrdOnRspQryFund =
    TagType_enumtype_ESUNNY9TrdOnRspQryFund;
  static const enumtype ESUNNY9TrdOnRtnFund =
    TagType_enumtype_ESUNNY9TrdOnRtnFund;
  static const enumtype ESUNNY9TrdOnRspQryExchange =
    TagType_enumtype_ESUNNY9TrdOnRspQryExchange;
  static const enumtype ESUNNY9TrdOnRspQryCommodity =
    TagType_enumtype_ESUNNY9TrdOnRspQryCommodity;
  static const enumtype ESUNNY9TrdOnRspQryContract =
    TagType_enumtype_ESUNNY9TrdOnRspQryContract;
  static const enumtype ESUNNY9TrdOnRtnContract =
    TagType_enumtype_ESUNNY9TrdOnRtnContract;
  static const enumtype ESUNNY9TrdOnRspOrderAction =
    TagType_enumtype_ESUNNY9TrdOnRspOrderAction;
  static const enumtype ESUNNY9TrdOnRtnOrder =
    TagType_enumtype_ESUNNY9TrdOnRtnOrder;
  static const enumtype ESUNNY9TrdOnRspQryOrder =
    TagType_enumtype_ESUNNY9TrdOnRspQryOrder;
  static const enumtype ESUNNY9TrdOnRspQryOrderProcess =
    TagType_enumtype_ESUNNY9TrdOnRspQryOrderProcess;
  static const enumtype ESUNNY9TrdOnRspQryFill =
    TagType_enumtype_ESUNNY9TrdOnRspQryFill;
  static const enumtype ESUNNY9TrdOnRtnFill =
    TagType_enumtype_ESUNNY9TrdOnRtnFill;
  static const enumtype ESUNNY9TrdOnRspQryPosition =
    TagType_enumtype_ESUNNY9TrdOnRspQryPosition;
  static const enumtype ESUNNY9TrdOnRtnPosition =
    TagType_enumtype_ESUNNY9TrdOnRtnPosition;
  static const enumtype ESUNNY9TrdOnRtnPositionProfit =
    TagType_enumtype_ESUNNY9TrdOnRtnPositionProfit;
  static const enumtype ESUNNY9TrdOnRspQryCurrency =
    TagType_enumtype_ESUNNY9TrdOnRspQryCurrency;
  static const enumtype ESUNNY9TrdOnRspQryTradeMessage =
    TagType_enumtype_ESUNNY9TrdOnRspQryTradeMessage;
  static const enumtype ESUNNY9TrdOnRtnTradeMessage =
    TagType_enumtype_ESUNNY9TrdOnRtnTradeMessage;
  static const enumtype ESUNNY9TrdOnRspQryHisOrder =
    TagType_enumtype_ESUNNY9TrdOnRspQryHisOrder;
  static const enumtype ESUNNY9TrdOnRspQryHisOrderProcess =
    TagType_enumtype_ESUNNY9TrdOnRspQryHisOrderProcess;
  static const enumtype ESUNNY9TrdOnRspQryHisMatch =
    TagType_enumtype_ESUNNY9TrdOnRspQryHisMatch;
  static const enumtype ESUNNY9TrdOnRspQryHisPosition =
    TagType_enumtype_ESUNNY9TrdOnRspQryHisPosition;
  static const enumtype ESUNNY9TrdOnRspQryHisDelivery =
    TagType_enumtype_ESUNNY9TrdOnRspQryHisDelivery;
  static const enumtype ESUNNY9TrdOnRspQryAccountCashAdjust =
    TagType_enumtype_ESUNNY9TrdOnRspQryAccountCashAdjust;
  static const enumtype ESUNNY9TrdOnRspQryBill =
    TagType_enumtype_ESUNNY9TrdOnRspQryBill;
  static const enumtype ESUNNY9TrdOnRspQryAccountFeeRent =
    TagType_enumtype_ESUNNY9TrdOnRspQryAccountFeeRent;
  static const enumtype ESUNNY9TrdOnRspQryAccountMarginRent =
    TagType_enumtype_ESUNNY9TrdOnRspQryAccountMarginRent;
  static const enumtype ESUNNY9TrdOnRspHKMarketOrderInsert =
    TagType_enumtype_ESUNNY9TrdOnRspHKMarketOrderInsert;
  static const enumtype ESUNNY9TrdOnRspHKMarketOrderDelete =
    TagType_enumtype_ESUNNY9TrdOnRspHKMarketOrderDelete;
  static const enumtype ESUNNY9TrdOnHKMarketQuoteNotice =
    TagType_enumtype_ESUNNY9TrdOnHKMarketQuoteNotice;
  static const enumtype ESUNNY9TrdOnRspOrderLocalRemove =
    TagType_enumtype_ESUNNY9TrdOnRspOrderLocalRemove;
  static const enumtype ESUNNY9TrdOnRspOrderLocalInput =
    TagType_enumtype_ESUNNY9TrdOnRspOrderLocalInput;
  static const enumtype ESUNNY9TrdOnRspOrderLocalModify =
    TagType_enumtype_ESUNNY9TrdOnRspOrderLocalModify;
  static const enumtype ESUNNY9TrdOnRspOrderLocalTransfer =
    TagType_enumtype_ESUNNY9TrdOnRspOrderLocalTransfer;
  static const enumtype ESUNNY9TrdOnRspFillLocalInput =
    TagType_enumtype_ESUNNY9TrdOnRspFillLocalInput;
  static const enumtype ESUNNY9TrdOnRspFillLocalRemove =
    TagType_enumtype_ESUNNY9TrdOnRspFillLocalRemove;
  static const enumtype ESUNNY9TrdSetAPINotify =
    TagType_enumtype_ESUNNY9TrdSetAPINotify;
  static const enumtype ESUNNY9TrdSetHostAddress =
    TagType_enumtype_ESUNNY9TrdSetHostAddress;
  static const enumtype ESUNNY9TrdLogin =
    TagType_enumtype_ESUNNY9TrdLogin;
  static const enumtype ESUNNY9TrdSetVertificateCode =
    TagType_enumtype_ESUNNY9TrdSetVertificateCode;
  static const enumtype ESUNNY9TrdDisconnect =
    TagType_enumtype_ESUNNY9TrdDisconnect;
  static const enumtype ESUNNY9TrdChangePassword =
    TagType_enumtype_ESUNNY9TrdChangePassword;
  static const enumtype ESUNNY9TrdHaveCertainRight =
    TagType_enumtype_ESUNNY9TrdHaveCertainRight;
  static const enumtype ESUNNY9TrdSetReservedInfo =
    TagType_enumtype_ESUNNY9TrdSetReservedInfo;
  static const enumtype ESUNNY9TrdQryAccount =
    TagType_enumtype_ESUNNY9TrdQryAccount;
  static const enumtype ESUNNY9TrdQryFund =
    TagType_enumtype_ESUNNY9TrdQryFund;
  static const enumtype ESUNNY9TrdQryExchange =
    TagType_enumtype_ESUNNY9TrdQryExchange;
  static const enumtype ESUNNY9TrdQryCommodity =
    TagType_enumtype_ESUNNY9TrdQryCommodity;
  static const enumtype ESUNNY9TrdQryContract =
    TagType_enumtype_ESUNNY9TrdQryContract;
  static const enumtype ESUNNY9TrdInsertOrder =
    TagType_enumtype_ESUNNY9TrdInsertOrder;
  static const enumtype ESUNNY9TrdCancelOrder =
    TagType_enumtype_ESUNNY9TrdCancelOrder;
  static const enumtype ESUNNY9TrdAmendOrder =
    TagType_enumtype_ESUNNY9TrdAmendOrder;
  static const enumtype ESUNNY9TrdActivateOrder =
    TagType_enumtype_ESUNNY9TrdActivateOrder;
  static const enumtype ESUNNY9TrdQryOrder =
    TagType_enumtype_ESUNNY9TrdQryOrder;
  static const enumtype ESUNNY9TrdQryOrderProcess =
    TagType_enumtype_ESUNNY9TrdQryOrderProcess;
  static const enumtype ESUNNY9TrdQryFill =
    TagType_enumtype_ESUNNY9TrdQryFill;
  static const enumtype ESUNNY9TrdQryPosition =
    TagType_enumtype_ESUNNY9TrdQryPosition;
  static const enumtype ESUNNY9TrdQryCurrency =
    TagType_enumtype_ESUNNY9TrdQryCurrency;
  static const enumtype ESUNNY9TrdQryAccountCashAdjust =
    TagType_enumtype_ESUNNY9TrdQryAccountCashAdjust;
  static const enumtype ESUNNY9TrdQryTradeMessage =
    TagType_enumtype_ESUNNY9TrdQryTradeMessage;
  static const enumtype ESUNNY9TrdQryBill =
    TagType_enumtype_ESUNNY9TrdQryBill;
  static const enumtype ESUNNY9TrdQryHisOrder =
    TagType_enumtype_ESUNNY9TrdQryHisOrder;
  static const enumtype ESUNNY9TrdQryHisOrderProcess =
    TagType_enumtype_ESUNNY9TrdQryHisOrderProcess;
  static const enumtype ESUNNY9TrdQryHisMatch =
    TagType_enumtype_ESUNNY9TrdQryHisMatch;
  static const enumtype ESUNNY9TrdQryHisPosition =
    TagType_enumtype_ESUNNY9TrdQryHisPosition;
  static const enumtype ESUNNY9TrdQryHisDelivery =
    TagType_enumtype_ESUNNY9TrdQryHisDelivery;
  static const enumtype ESUNNY9TrdQryAccountFeeRent =
    TagType_enumtype_ESUNNY9TrdQryAccountFeeRent;
  static const enumtype ESUNNY9TrdQryAccountMarginRent =
    TagType_enumtype_ESUNNY9TrdQryAccountMarginRent;
  static const enumtype ESUNNY9TrdInsertHKMarketOrder =
    TagType_enumtype_ESUNNY9TrdInsertHKMarketOrder;
  static const enumtype ESUNNY9TrdCancelHKMarketOrder =
    TagType_enumtype_ESUNNY9TrdCancelHKMarketOrder;
  static const enumtype ESUNNY9TrdOrderLocalRemove =
    TagType_enumtype_ESUNNY9TrdOrderLocalRemove;
  static const enumtype ESUNNY9TrdOrderLocalInput =
    TagType_enumtype_ESUNNY9TrdOrderLocalInput;
  static const enumtype ESUNNY9TrdOrderLocalModify =
    TagType_enumtype_ESUNNY9TrdOrderLocalModify;
  static const enumtype ESUNNY9TrdOrderLocalTransfer =
    TagType_enumtype_ESUNNY9TrdOrderLocalTransfer;
  static const enumtype ESUNNY9TrdFillLocalInput =
    TagType_enumtype_ESUNNY9TrdFillLocalInput;
  static const enumtype ESUNNY9TrdFillLocalRemove =
    TagType_enumtype_ESUNNY9TrdFillLocalRemove;
  static const enumtype InstrOnAdd =
    TagType_enumtype_InstrOnAdd;
  static const enumtype InstrOnMktData =
    TagType_enumtype_InstrOnMktData;
  static const enumtype InstrOnOrderFill =
    TagType_enumtype_InstrOnOrderFill;
  static const enumtype InstrOnOrderSentRejected =
    TagType_enumtype_InstrOnOrderSentRejected;
  static const enumtype InstrOnOrderCnf =
    TagType_enumtype_InstrOnOrderCnf;
  static const enumtype InstrOnOrderCxlRejected =
    TagType_enumtype_InstrOnOrderCxlRejected;
  static const enumtype InstrOnOrderCxl =
    TagType_enumtype_InstrOnOrderCxl;
  static const enumtype InstrOnOrderFinished =
    TagType_enumtype_InstrOnOrderFinished;
  static const enumtype ZMQInprocPubFlag =
    TagType_enumtype_ZMQInprocPubFlag;
  static const enumtype ZMQPubFlag =
    TagType_enumtype_ZMQPubFlag;
  static const enumtype ZMQInprocPubBindStr =
    TagType_enumtype_ZMQInprocPubBindStr;
  static const enumtype ZMQIpcPubBindStr =
    TagType_enumtype_ZMQIpcPubBindStr;
  static const enumtype ZMQTcpPubBindStr =
    TagType_enumtype_ZMQTcpPubBindStr;
  static const enumtype S =
    TagType_enumtype_S;
  static const enumtype X =
    TagType_enumtype_X;
  static const enumtype T =
    TagType_enumtype_T;
  static const enumtype r =
    TagType_enumtype_r;
  static const enumtype b =
    TagType_enumtype_b;
  static const enumtype sigma =
    TagType_enumtype_sigma;
  static const enumtype DTE =
    TagType_enumtype_DTE;
  static const enumtype Px =
    TagType_enumtype_Px;
  static const enumtype sigma0 =
    TagType_enumtype_sigma0;
  static const enumtype dS =
    TagType_enumtype_dS;
  static const enumtype d1 =
    TagType_enumtype_d1;
  static const enumtype d2 =
    TagType_enumtype_d2;
  static const enumtype nd1 =
    TagType_enumtype_nd1;
  static const enumtype nd2 =
    TagType_enumtype_nd2;
  static const enumtype pd1 =
    TagType_enumtype_pd1;
  static const enumtype pd2 =
    TagType_enumtype_pd2;
  static const enumtype Delta =
    TagType_enumtype_Delta;
  static const enumtype DeltaP =
    TagType_enumtype_DeltaP;
  static const enumtype DdeltaDvol =
    TagType_enumtype_DdeltaDvol;
  static const enumtype DvannaDvol =
    TagType_enumtype_DvannaDvol;
  static const enumtype DdeltaDtime =
    TagType_enumtype_DdeltaDtime;
  static const enumtype Elasticity =
    TagType_enumtype_Elasticity;
  static const enumtype Speed =
    TagType_enumtype_Speed;
  static const enumtype DeltaNorm =
    TagType_enumtype_DeltaNorm;
  static const enumtype OCDeltaNorm =
    TagType_enumtype_OCDeltaNorm;
  static const enumtype Gamma =
    TagType_enumtype_Gamma;
  static const enumtype GammaP =
    TagType_enumtype_GammaP;
  static const enumtype DgammaDvol =
    TagType_enumtype_DgammaDvol;
  static const enumtype DgammaPDvol =
    TagType_enumtype_DgammaPDvol;
  static const enumtype DgammaDspot =
    TagType_enumtype_DgammaDspot;
  static const enumtype DgammaPDspot =
    TagType_enumtype_DgammaPDspot;
  static const enumtype DgammaDtime =
    TagType_enumtype_DgammaDtime;
  static const enumtype DgammaPDtime =
    TagType_enumtype_DgammaPDtime;
  static const enumtype GammaNorm =
    TagType_enumtype_GammaNorm;
  static const enumtype OCGammaNorm =
    TagType_enumtype_OCGammaNorm;
  static const enumtype Vega =
    TagType_enumtype_Vega;
  static const enumtype VegaP =
    TagType_enumtype_VegaP;
  static const enumtype DvegaDvol =
    TagType_enumtype_DvegaDvol;
  static const enumtype DvegaPDvol =
    TagType_enumtype_DvegaPDvol;
  static const enumtype DvommaDvol =
    TagType_enumtype_DvommaDvol;
  static const enumtype DvegaDtime =
    TagType_enumtype_DvegaDtime;
  static const enumtype VegaNorm =
    TagType_enumtype_VegaNorm;
  static const enumtype OCVegaNorm =
    TagType_enumtype_OCVegaNorm;
  static const enumtype OCVega =
    TagType_enumtype_OCVega;
  static const enumtype VarianceVega =
    TagType_enumtype_VarianceVega;
  static const enumtype DdeltaDvar =
    TagType_enumtype_DdeltaDvar;
  static const enumtype VarianceVomma =
    TagType_enumtype_VarianceVomma;
  static const enumtype VarianceUltima =
    TagType_enumtype_VarianceUltima;
  static const enumtype Theta =
    TagType_enumtype_Theta;
  static const enumtype DriftlessTheta =
    TagType_enumtype_DriftlessTheta;
  static const enumtype Rho =
    TagType_enumtype_Rho;
  static const enumtype OOFRho =
    TagType_enumtype_OOFRho;
  static const enumtype Phi =
    TagType_enumtype_Phi;
  static const enumtype CarryRho =
    TagType_enumtype_CarryRho;
  static const enumtype Zeta =
    TagType_enumtype_Zeta;
  static const enumtype DzetaDvol =
    TagType_enumtype_DzetaDvol;
  static const enumtype DzetaDtime =
    TagType_enumtype_DzetaDtime;
  static const enumtype StrikeDelta =
    TagType_enumtype_StrikeDelta;
  static const enumtype StrikeGamma =
    TagType_enumtype_StrikeGamma;
  static const enumtype LocalDelta =
    TagType_enumtype_LocalDelta;
  static const enumtype LocalGamma =
    TagType_enumtype_LocalGamma;
  static const enumtype LocalVega =
    TagType_enumtype_LocalVega;
  static const enumtype LocalTheta =
    TagType_enumtype_LocalTheta;
  static const enumtype LocalRho =
    TagType_enumtype_LocalRho;
  static const enumtype ImpVol =
    TagType_enumtype_ImpVol;
  static const enumtype ImpVolBid =
    TagType_enumtype_ImpVolBid;
  static const enumtype ImpVolMid =
    TagType_enumtype_ImpVolMid;
  static const enumtype ImpVolAsk =
    TagType_enumtype_ImpVolAsk;
  static const enumtype ImpVolEpsilon =
    TagType_enumtype_ImpVolEpsilon;
  static const enumtype ImpVolPxEpsilon =
    TagType_enumtype_ImpVolPxEpsilon;
  static const enumtype TimeSteps =
    TagType_enumtype_TimeSteps;
  static const enumtype PxSteps =
    TagType_enumtype_PxSteps;
  static const enumtype AtmFwd =
    TagType_enumtype_AtmFwd;
  static const enumtype AtmVol =
    TagType_enumtype_AtmVol;
  static const enumtype HistVol =
    TagType_enumtype_HistVol;
  static const enumtype HistVolClose =
    TagType_enumtype_HistVolClose;
  static const enumtype HistVolHighLow =
    TagType_enumtype_HistVolHighLow;
  static const enumtype HistVolHighLowClose =
    TagType_enumtype_HistVolHighLowClose;
  static const enumtype SynFwd =
    TagType_enumtype_SynFwd;
  static const enumtype SynFwdBid =
    TagType_enumtype_SynFwdBid;
  static const enumtype SynFwdAsk =
    TagType_enumtype_SynFwdAsk;
  static const enumtype IntPx =
    TagType_enumtype_IntPx;
  static const enumtype Sz =
    TagType_enumtype_Sz;
  static const enumtype MktSz =
    TagType_enumtype_MktSz;
  static const enumtype Orders =
    TagType_enumtype_Orders;
  static const enumtype MktOrders =
    TagType_enumtype_MktOrders;
  static const enumtype Flag =
    TagType_enumtype_Flag;
  static const enumtype MaxBookLevels =
    TagType_enumtype_MaxBookLevels;
  static const enumtype SpreadTicks =
    TagType_enumtype_SpreadTicks;
  static const enumtype ChgedTicks =
    TagType_enumtype_ChgedTicks;
  static const enumtype MidPxWeighted =
    TagType_enumtype_MidPxWeighted;
  static const enumtype LastTs =
    TagType_enumtype_LastTs;
  static const enumtype BookCount =
    TagType_enumtype_BookCount;
  static const enumtype FlipUpsTot =
    TagType_enumtype_FlipUpsTot;
  static const enumtype FlipUps =
    TagType_enumtype_FlipUps;
  static const enumtype FlipDnsTot =
    TagType_enumtype_FlipDnsTot;
  static const enumtype FlipDns =
    TagType_enumtype_FlipDns;
  static const enumtype BestPxChged =
    TagType_enumtype_BestPxChged;
  static const enumtype BestQuoteChged =
    TagType_enumtype_BestQuoteChged;
  static const enumtype FlipNosTot =
    TagType_enumtype_FlipNosTot;
  static const enumtype FlipNos =
    TagType_enumtype_FlipNos;
  static const enumtype LastFlips =
    TagType_enumtype_LastFlips;
  static const enumtype LastFlipUps =
    TagType_enumtype_LastFlipUps;
  static const enumtype LastFlipDns =
    TagType_enumtype_LastFlipDns;
  static const enumtype VolCurveType =
    TagType_enumtype_VolCurveType;
  static const enumtype PriceCurr =
    TagType_enumtype_PriceCurr;
  static const enumtype PriceRef =
    TagType_enumtype_PriceRef;
  static const enumtype AtmVolRef =
    TagType_enumtype_AtmVolRef;
  static const enumtype SlopeRef =
    TagType_enumtype_SlopeRef;
  static const enumtype AtmVolCurr =
    TagType_enumtype_AtmVolCurr;
  static const enumtype SlopeCurr =
    TagType_enumtype_SlopeCurr;
  static const enumtype PutCurv =
    TagType_enumtype_PutCurv;
  static const enumtype CallCurv =
    TagType_enumtype_CallCurv;
  static const enumtype DownCut =
    TagType_enumtype_DownCut;
  static const enumtype UpCut =
    TagType_enumtype_UpCut;
  static const enumtype VCR =
    TagType_enumtype_VCR;
  static const enumtype SCR =
    TagType_enumtype_SCR;
  static const enumtype SSR =
    TagType_enumtype_SSR;
  static const enumtype DownSm =
    TagType_enumtype_DownSm;
  static const enumtype UpSm =
    TagType_enumtype_UpSm;
  static const enumtype CallPump =
    TagType_enumtype_CallPump;
  static const enumtype PutPump =
    TagType_enumtype_PutPump;
  static const enumtype XNormAlpha =
    TagType_enumtype_XNormAlpha;
  static const enumtype XNormRatio =
    TagType_enumtype_XNormRatio;
  static const enumtype XNormLog =
    TagType_enumtype_XNormLog;
  static const enumtype XNormLogSqrt =
    TagType_enumtype_XNormLogSqrt;
  static const enumtype XNorm =
    TagType_enumtype_XNorm;
  static const enumtype ScaleRatio =
    TagType_enumtype_ScaleRatio;
  static const enumtype ScaleX =
    TagType_enumtype_ScaleX;
  static const enumtype ScaleXX =
    TagType_enumtype_ScaleXX;
  static const enumtype ScaleXXX =
    TagType_enumtype_ScaleXXX;
  static const enumtype Curv =
    TagType_enumtype_Curv;
  static const enumtype VolMult =
    TagType_enumtype_VolMult;
  static const enumtype CurveVol =
    TagType_enumtype_CurveVol;
  static const enumtype Tag =
    TagType_enumtype_Tag;
  static const enumtype Value =
    TagType_enumtype_Value;
  static const enumtype Intercept =
    TagType_enumtype_Intercept;
  static const enumtype Slope =
    TagType_enumtype_Slope;
  static const enumtype PointX =
    TagType_enumtype_PointX;
  static const enumtype PointY =
    TagType_enumtype_PointY;
  static const enumtype PointZ =
    TagType_enumtype_PointZ;
  static const enumtype PointXh =
    TagType_enumtype_PointXh;
  static const enumtype PointYh =
    TagType_enumtype_PointYh;
  static const enumtype PointZh =
    TagType_enumtype_PointZh;
  static const enumtype PointW =
    TagType_enumtype_PointW;
  static const enumtype PointTag =
    TagType_enumtype_PointTag;
  static const enumtype PointFlag =
    TagType_enumtype_PointFlag;
  static const enumtype CurveName =
    TagType_enumtype_CurveName;
  static const enumtype Description =
    TagType_enumtype_Description;
  static const enumtype Epsilon =
    TagType_enumtype_Epsilon;
  static const enumtype TsSent =
    TagType_enumtype_TsSent;
  static const enumtype TsSentRejected =
    TagType_enumtype_TsSentRejected;
  static const enumtype TsRcv =
    TagType_enumtype_TsRcv;
  static const enumtype TsCnf =
    TagType_enumtype_TsCnf;
  static const enumtype TsCxlSent =
    TagType_enumtype_TsCxlSent;
  static const enumtype TsCxlRejected =
    TagType_enumtype_TsCxlRejected;
  static const enumtype TsCxlCnf =
    TagType_enumtype_TsCxlCnf;
  static const enumtype TsBidCxled =
    TagType_enumtype_TsBidCxled;
  static const enumtype TsAskCxled =
    TagType_enumtype_TsAskCxled;
  static const enumtype TsBidAllFilled =
    TagType_enumtype_TsBidAllFilled;
  static const enumtype TsAskAllFilled =
    TagType_enumtype_TsAskAllFilled;
  static const enumtype TsFinished =
    TagType_enumtype_TsFinished;
  static const enumtype Qid =
    TagType_enumtype_Qid;
  static const enumtype Oid =
    TagType_enumtype_Oid;
  static const enumtype BidOid =
    TagType_enumtype_BidOid;
  static const enumtype AskOid =
    TagType_enumtype_AskOid;
  static const enumtype BidFilled =
    TagType_enumtype_BidFilled;
  static const enumtype AskFilled =
    TagType_enumtype_AskFilled;
  static const enumtype SendReason =
    TagType_enumtype_SendReason;
  static const enumtype MaxDrawDown =
    TagType_enumtype_MaxDrawDown;
  static const enumtype MaxDollarDelta =
    TagType_enumtype_MaxDollarDelta;
  static const enumtype MaxDelta =
    TagType_enumtype_MaxDelta;
  static const enumtype MaxDeltaNorm =
    TagType_enumtype_MaxDeltaNorm;
  static const enumtype MaxDollarVega =
    TagType_enumtype_MaxDollarVega;
  static const enumtype MaxVega =
    TagType_enumtype_MaxVega;
  static const enumtype MaxVegaNorm =
    TagType_enumtype_MaxVegaNorm;
  static const enumtype MaxDollarGamma =
    TagType_enumtype_MaxDollarGamma;
  static const enumtype MaxGamma =
    TagType_enumtype_MaxGamma;
  static const enumtype MaxGammaNorm =
    TagType_enumtype_MaxGammaNorm;
  static const enumtype MaxDollarTheta =
    TagType_enumtype_MaxDollarTheta;
  static const enumtype MaxTheta =
    TagType_enumtype_MaxTheta;
  static const enumtype MaxThetaNorm =
    TagType_enumtype_MaxThetaNorm;
  static const enumtype MaxDollarRho =
    TagType_enumtype_MaxDollarRho;
  static const enumtype MaxRho =
    TagType_enumtype_MaxRho;
  static const enumtype MaxRhoNorm =
    TagType_enumtype_MaxRhoNorm;
  static const enumtype MaxCallTradeX =
    TagType_enumtype_MaxCallTradeX;
  static const enumtype MinCallTradeX =
    TagType_enumtype_MinCallTradeX;
  static const enumtype MaxPutTradeX =
    TagType_enumtype_MaxPutTradeX;
  static const enumtype MinPutTradeX =
    TagType_enumtype_MinPutTradeX;
  static const enumtype MaxPos =
    TagType_enumtype_MaxPos;
  static const enumtype PositionSource =
    TagType_enumtype_PositionSource;
  static const enumtype MorningBegin =
    TagType_enumtype_MorningBegin;
  static const enumtype MorningEnd =
    TagType_enumtype_MorningEnd;
  static const enumtype AfternoonBegin =
    TagType_enumtype_AfternoonBegin;
  static const enumtype AfternoonEnd =
    TagType_enumtype_AfternoonEnd;
  static const enumtype PeeBegin =
    TagType_enumtype_PeeBegin;
  static const enumtype PeeEnd =
    TagType_enumtype_PeeEnd;
  static const enumtype IdleBegin =
    TagType_enumtype_IdleBegin;
  static const enumtype IdleEnd =
    TagType_enumtype_IdleEnd;
  static const enumtype BaitRng =
    TagType_enumtype_BaitRng;
  static const enumtype BaitBuySz =
    TagType_enumtype_BaitBuySz;
  static const enumtype BaitSellSz =
    TagType_enumtype_BaitSellSz;
  static const enumtype JoinMktBidSz =
    TagType_enumtype_JoinMktBidSz;
  static const enumtype JoinMktBidDepth =
    TagType_enumtype_JoinMktBidDepth;
  static const enumtype JoinMktAskSz =
    TagType_enumtype_JoinMktAskSz;
  static const enumtype JoinMktAskDepth =
    TagType_enumtype_JoinMktAskDepth;
  static const enumtype JoinMktBidDist =
    TagType_enumtype_JoinMktBidDist;
  static const enumtype JoinMktAskDist =
    TagType_enumtype_JoinMktAskDist;
  static const enumtype IsElectronicEye =
    TagType_enumtype_IsElectronicEye;
  static const enumtype IsQuoteRsp =
    TagType_enumtype_IsQuoteRsp;
  static const enumtype QuotingStyle =
    TagType_enumtype_QuotingStyle;
  static const enumtype QuoteVolMask =
    TagType_enumtype_QuoteVolMask;
  static const enumtype OCCountMask =
    TagType_enumtype_OCCountMask;
  static const enumtype OCQuoteSpreadRatio =
    TagType_enumtype_OCQuoteSpreadRatio;
  static const enumtype BuyPos =
    TagType_enumtype_BuyPos;
  static const enumtype SellPos =
    TagType_enumtype_SellPos;
  static const enumtype BuyAvgPx =
    TagType_enumtype_BuyAvgPx;
  static const enumtype SellAvgPx =
    TagType_enumtype_SellAvgPx;
  static const enumtype MaxExpireIntDate =
    TagType_enumtype_MaxExpireIntDate;
  static const enumtype NormInstr =
    TagType_enumtype_NormInstr;
  static const enumtype HedgeInstr =
    TagType_enumtype_HedgeInstr;
  static const enumtype UndlyInstr =
    TagType_enumtype_UndlyInstr;
  static const enumtype MaxHedgeInstrPos =
    TagType_enumtype_MaxHedgeInstrPos;
  static const enumtype MaxHedgeInstrOpenSz =
    TagType_enumtype_MaxHedgeInstrOpenSz;
  static const enumtype MaxHedgeInstrOrderSz =
    TagType_enumtype_MaxHedgeInstrOrderSz;
  static const enumtype BookRatioThresh =
    TagType_enumtype_BookRatioThresh;
  static const enumtype NetPos =
    TagType_enumtype_NetPos;
  static const enumtype NetPosPrev =
    TagType_enumtype_NetPosPrev;
  static const enumtype RPxPnL =
    TagType_enumtype_RPxPnL;
  static const enumtype UPxPnL =
    TagType_enumtype_UPxPnL;
  static const enumtype RPnL =
    TagType_enumtype_RPnL;
  static const enumtype UPnL =
    TagType_enumtype_UPnL;
  static const enumtype PosPnL =
    TagType_enumtype_PosPnL;
  static const enumtype TrdSignal =
    TagType_enumtype_TrdSignal;
  static const enumtype TrdSigBuy =
    TagType_enumtype_TrdSigBuy;
  static const enumtype TrdSigSell =
    TagType_enumtype_TrdSigSell;
  static const enumtype TrdSigBuyExit =
    TagType_enumtype_TrdSigBuyExit;
  static const enumtype TrdSigSellExit =
    TagType_enumtype_TrdSigSellExit;
  static const enumtype TrdSigNone =
    TagType_enumtype_TrdSigNone;
  static const enumtype TrdStatus =
    TagType_enumtype_TrdStatus;
  static const enumtype TrdStatNone =
    TagType_enumtype_TrdStatNone;
  static const enumtype TrdStatOn =
    TagType_enumtype_TrdStatOn;
  static const enumtype TrdStatIdle =
    TagType_enumtype_TrdStatIdle;
  static const enumtype TrdStatFlat =
    TagType_enumtype_TrdStatFlat;
  static const enumtype TrdStatOnInstrs =
    TagType_enumtype_TrdStatOnInstrs;
  static const enumtype TrdStatIdleInstrs =
    TagType_enumtype_TrdStatIdleInstrs;
  static const enumtype TrdStatFlatInstrs =
    TagType_enumtype_TrdStatFlatInstrs;
  static const enumtype ExchangeType =
    TagType_enumtype_ExchangeType;
  static const enumtype CallPutType =
    TagType_enumtype_CallPutType;
  static const enumtype BuySellType =
    TagType_enumtype_BuySellType;
  static const enumtype RollingType =
    TagType_enumtype_RollingType;
  static const enumtype OptionExerciseStyle =
    TagType_enumtype_OptionExerciseStyle;
  static const enumtype ExpireIntDate =
    TagType_enumtype_ExpireIntDate;
  static const enumtype PxPointValue =
    TagType_enumtype_PxPointValue;
  static const enumtype TickValue =
    TagType_enumtype_TickValue;
  static const enumtype ScaleDoubleToInt64 =
    TagType_enumtype_ScaleDoubleToInt64;
  static const enumtype ScaleInt64ToDouble =
    TagType_enumtype_ScaleInt64ToDouble;
  static const enumtype TickInt64Px =
    TagType_enumtype_TickInt64Px;
  static const enumtype Int64PxPointValue =
    TagType_enumtype_Int64PxPointValue;
  static const enumtype StrikeScale =
    TagType_enumtype_StrikeScale;
  static const enumtype MonthSeq =
    TagType_enumtype_MonthSeq;
  static const enumtype CurrIntDate =
    TagType_enumtype_CurrIntDate;
  static const enumtype ListDate =
    TagType_enumtype_ListDate;
  static const enumtype ListIntDate =
    TagType_enumtype_ListIntDate;
  static const enumtype CanPxBeNegative =
    TagType_enumtype_CanPxBeNegative;
  static const enumtype BktestPnL =
    TagType_enumtype_BktestPnL;
  static const enumtype BktestPnLTicks =
    TagType_enumtype_BktestPnLTicks;
  static const enumtype BktestOrders =
    TagType_enumtype_BktestOrders;
  static const enumtype BktestWinOrders =
    TagType_enumtype_BktestWinOrders;
  static const enumtype BktestLoseOrders =
    TagType_enumtype_BktestLoseOrders;
  static const enumtype BktestProfitTaking =
    TagType_enumtype_BktestProfitTaking;
  static const enumtype BktestProfitTakingTicks =
    TagType_enumtype_BktestProfitTakingTicks;
  static const enumtype BktestPukePnL =
    TagType_enumtype_BktestPukePnL;
  static const enumtype BktestPukeTicks =
    TagType_enumtype_BktestPukeTicks;
  static const enumtype ProdPnL =
    TagType_enumtype_ProdPnL;
  static const enumtype ProdPnLTicks =
    TagType_enumtype_ProdPnLTicks;
  static const enumtype ProdOrders =
    TagType_enumtype_ProdOrders;
  static const enumtype ProdWinOrders =
    TagType_enumtype_ProdWinOrders;
  static const enumtype ProdLoseOrders =
    TagType_enumtype_ProdLoseOrders;
  static const enumtype ProdProfitTaking =
    TagType_enumtype_ProdProfitTaking;
  static const enumtype ProdProfitTakingTicks =
    TagType_enumtype_ProdProfitTakingTicks;
  static const enumtype ProdPukePnL =
    TagType_enumtype_ProdPukePnL;
  static const enumtype ProdPukeTicks =
    TagType_enumtype_ProdPukeTicks;
  static const enumtype ProfitTakingMin =
    TagType_enumtype_ProfitTakingMin;
  static const enumtype PukePnLMax =
    TagType_enumtype_PukePnLMax;
  static const enumtype EntryNorm =
    TagType_enumtype_EntryNorm;
  static const enumtype ExitNorm =
    TagType_enumtype_ExitNorm;
  static const enumtype EntryMaxNorm =
    TagType_enumtype_EntryMaxNorm;
  static const enumtype ExitMaxNorm =
    TagType_enumtype_ExitMaxNorm;
  static const enumtype PukeNorm =
    TagType_enumtype_PukeNorm;
  static const enumtype ProfitNorm =
    TagType_enumtype_ProfitNorm;
  static const enumtype ProfitTakingTicks =
    TagType_enumtype_ProfitTakingTicks;
  static const enumtype ProfitTakingTicksMin =
    TagType_enumtype_ProfitTakingTicksMin;
  static const enumtype ProfitTakingTicksMax =
    TagType_enumtype_ProfitTakingTicksMax;
  static const enumtype PukeTicks =
    TagType_enumtype_PukeTicks;
  static const enumtype RangeTgtSz =
    TagType_enumtype_RangeTgtSz;
  static const enumtype RangeTgtLevels =
    TagType_enumtype_RangeTgtLevels;
  static const enumtype RangeHighPx =
    TagType_enumtype_RangeHighPx;
  static const enumtype RangeLowPx =
    TagType_enumtype_RangeLowPx;
  static const enumtype RangeCurrBuySz =
    TagType_enumtype_RangeCurrBuySz;
  static const enumtype RangeCurrSellSz =
    TagType_enumtype_RangeCurrSellSz;
  static const enumtype MorningOpen =
    TagType_enumtype_MorningOpen;
  static const enumtype MorningOpenOffset =
    TagType_enumtype_MorningOpenOffset;
  static const enumtype MorningClose =
    TagType_enumtype_MorningClose;
  static const enumtype MorningCloseOffset =
    TagType_enumtype_MorningCloseOffset;
  static const enumtype AfternoonOpen =
    TagType_enumtype_AfternoonOpen;
  static const enumtype AfternoonOpenOffset =
    TagType_enumtype_AfternoonOpenOffset;
  static const enumtype AfternoonClose =
    TagType_enumtype_AfternoonClose;
  static const enumtype AfternoonCloseOffset =
    TagType_enumtype_AfternoonCloseOffset;
  static const enumtype NightOpen =
    TagType_enumtype_NightOpen;
  static const enumtype NightOpenOffset =
    TagType_enumtype_NightOpenOffset;
  static const enumtype NightClose =
    TagType_enumtype_NightClose;
  static const enumtype NightCloseOffset =
    TagType_enumtype_NightCloseOffset;
  static const enumtype LevelSz =
    TagType_enumtype_LevelSz;
  static const enumtype MaxLevels =
    TagType_enumtype_MaxLevels;
  static const enumtype MaxSz =
    TagType_enumtype_MaxSz;
  static const enumtype VolThresh =
    TagType_enumtype_VolThresh;
  static const enumtype PxThresh =
    TagType_enumtype_PxThresh;
  static const enumtype ScalpSeedDistance =
    TagType_enumtype_ScalpSeedDistance;
  static const enumtype ScalpOrderSize =
    TagType_enumtype_ScalpOrderSize;
  static const enumtype ScalpFarSeedLevels =
    TagType_enumtype_ScalpFarSeedLevels;
  static const enumtype ScalpFarSeedOffset =
    TagType_enumtype_ScalpFarSeedOffset;
  static const enumtype ScalpSeedLevels =
    TagType_enumtype_ScalpSeedLevels;
  static const enumtype ScalpSeedOffset =
    TagType_enumtype_ScalpSeedOffset;
  static const enumtype ScalpProfitTakingTicks =
    TagType_enumtype_ScalpProfitTakingTicks;
  static const enumtype ScalpMaxLoss =
    TagType_enumtype_ScalpMaxLoss;
  static const enumtype ScalpTickSize =
    TagType_enumtype_ScalpTickSize;
  static const enumtype ScalpMaxPositionAtPrice =
    TagType_enumtype_ScalpMaxPositionAtPrice;
  static const enumtype ScalpMaxPosition =
    TagType_enumtype_ScalpMaxPosition;
  static const enumtype ScalpMorningStartOffset =
    TagType_enumtype_ScalpMorningStartOffset;
  static const enumtype ScalpMorningPreCloseOffset =
    TagType_enumtype_ScalpMorningPreCloseOffset;
  static const enumtype ScalpMorningCloseOffset =
    TagType_enumtype_ScalpMorningCloseOffset;
  static const enumtype ScalpAfternoonStartOffset =
    TagType_enumtype_ScalpAfternoonStartOffset;
  static const enumtype ScalpAfternoonPreCloseOffset =
    TagType_enumtype_ScalpAfternoonPreCloseOffset;
  static const enumtype ScalpAfternoonCloseOffset =
    TagType_enumtype_ScalpAfternoonCloseOffset;
  static const enumtype ScalpKeepSeedLevels =
    TagType_enumtype_ScalpKeepSeedLevels;
  static const enumtype ScalpGetFlatRange =
    TagType_enumtype_ScalpGetFlatRange;
  static const enumtype ScalpEveningStartOffset =
    TagType_enumtype_ScalpEveningStartOffset;
  static const enumtype ScalpEveningPreCloseOffset =
    TagType_enumtype_ScalpEveningPreCloseOffset;
  static const enumtype ScalpEveningCloseOffset =
    TagType_enumtype_ScalpEveningCloseOffset;
  static const enumtype TA_None =
    TagType_enumtype_TA_None;
  static const enumtype TA_AD =
    TagType_enumtype_TA_AD;
  static const enumtype TA_ADOSC =
    TagType_enumtype_TA_ADOSC;
  static const enumtype TA_ADX =
    TagType_enumtype_TA_ADX;
  static const enumtype TA_ADXR =
    TagType_enumtype_TA_ADXR;
  static const enumtype TA_APO =
    TagType_enumtype_TA_APO;
  static const enumtype TA_AROON =
    TagType_enumtype_TA_AROON;
  static const enumtype TA_AROONOSC =
    TagType_enumtype_TA_AROONOSC;
  static const enumtype TA_ATR =
    TagType_enumtype_TA_ATR;
  static const enumtype TA_AVGPRICE =
    TagType_enumtype_TA_AVGPRICE;
  static const enumtype TA_BBANDS =
    TagType_enumtype_TA_BBANDS;
  static const enumtype TA_BETA =
    TagType_enumtype_TA_BETA;
  static const enumtype TA_BOP =
    TagType_enumtype_TA_BOP;
  static const enumtype TA_CCI =
    TagType_enumtype_TA_CCI;
  static const enumtype TA_CDL2CROWS =
    TagType_enumtype_TA_CDL2CROWS;
  static const enumtype TA_CDL3BLACKCROWS =
    TagType_enumtype_TA_CDL3BLACKCROWS;
  static const enumtype TA_CDL3INSIDE =
    TagType_enumtype_TA_CDL3INSIDE;
  static const enumtype TA_CDL3LINESTRIKE =
    TagType_enumtype_TA_CDL3LINESTRIKE;
  static const enumtype TA_CDL3OUTSIDE =
    TagType_enumtype_TA_CDL3OUTSIDE;
  static const enumtype TA_CDL3STARSINSOUTH =
    TagType_enumtype_TA_CDL3STARSINSOUTH;
  static const enumtype TA_CDL3WHITESOLDIERS =
    TagType_enumtype_TA_CDL3WHITESOLDIERS;
  static const enumtype TA_CDLABANDONEDBABY =
    TagType_enumtype_TA_CDLABANDONEDBABY;
  static const enumtype TA_CDLADVANCEBLOCK =
    TagType_enumtype_TA_CDLADVANCEBLOCK;
  static const enumtype TA_CDLBELTHOLD =
    TagType_enumtype_TA_CDLBELTHOLD;
  static const enumtype TA_CDLBREAKAWAY =
    TagType_enumtype_TA_CDLBREAKAWAY;
  static const enumtype TA_CDLCLOSINGMARUBOZU =
    TagType_enumtype_TA_CDLCLOSINGMARUBOZU;
  static const enumtype TA_CDLCONCEALBABYSWALL =
    TagType_enumtype_TA_CDLCONCEALBABYSWALL;
  static const enumtype TA_CDLCOUNTERATTACK =
    TagType_enumtype_TA_CDLCOUNTERATTACK;
  static const enumtype TA_CDLDARKCLOUDCOVER =
    TagType_enumtype_TA_CDLDARKCLOUDCOVER;
  static const enumtype TA_CDLDOJI =
    TagType_enumtype_TA_CDLDOJI;
  static const enumtype TA_CDLDOJISTAR =
    TagType_enumtype_TA_CDLDOJISTAR;
  static const enumtype TA_CDLDRAGONFLYDOJI =
    TagType_enumtype_TA_CDLDRAGONFLYDOJI;
  static const enumtype TA_CDLENGULFING =
    TagType_enumtype_TA_CDLENGULFING;
  static const enumtype TA_CDLEVENINGDOJISTAR =
    TagType_enumtype_TA_CDLEVENINGDOJISTAR;
  static const enumtype TA_CDLEVENINGSTAR =
    TagType_enumtype_TA_CDLEVENINGSTAR;
  static const enumtype TA_CDLGAPSIDESIDEWHITE =
    TagType_enumtype_TA_CDLGAPSIDESIDEWHITE;
  static const enumtype TA_CDLGRAVESTONEDOJI =
    TagType_enumtype_TA_CDLGRAVESTONEDOJI;
  static const enumtype TA_CDLHAMMER =
    TagType_enumtype_TA_CDLHAMMER;
  static const enumtype TA_CDLHANGINGMAN =
    TagType_enumtype_TA_CDLHANGINGMAN;
  static const enumtype TA_CDLHARAMI =
    TagType_enumtype_TA_CDLHARAMI;
  static const enumtype TA_CDLHARAMICROSS =
    TagType_enumtype_TA_CDLHARAMICROSS;
  static const enumtype TA_CDLHIGHWAVE =
    TagType_enumtype_TA_CDLHIGHWAVE;
  static const enumtype TA_CDLHIKKAKE =
    TagType_enumtype_TA_CDLHIKKAKE;
  static const enumtype TA_CDLHIKKAKEMOD =
    TagType_enumtype_TA_CDLHIKKAKEMOD;
  static const enumtype TA_CDLHOMINGPIGEON =
    TagType_enumtype_TA_CDLHOMINGPIGEON;
  static const enumtype TA_CDLIDENTICAL3CROWS =
    TagType_enumtype_TA_CDLIDENTICAL3CROWS;
  static const enumtype TA_CDLINNECK =
    TagType_enumtype_TA_CDLINNECK;
  static const enumtype TA_CDLINVERTEDHAMMER =
    TagType_enumtype_TA_CDLINVERTEDHAMMER;
  static const enumtype TA_CDLKICKING =
    TagType_enumtype_TA_CDLKICKING;
  static const enumtype TA_CDLKICKINGBYLENGTH =
    TagType_enumtype_TA_CDLKICKINGBYLENGTH;
  static const enumtype TA_CDLLADDERBOTTOM =
    TagType_enumtype_TA_CDLLADDERBOTTOM;
  static const enumtype TA_CDLLONGLEGGEDDOJI =
    TagType_enumtype_TA_CDLLONGLEGGEDDOJI;
  static const enumtype TA_CDLLONGLINE =
    TagType_enumtype_TA_CDLLONGLINE;
  static const enumtype TA_CDLMARUBOZU =
    TagType_enumtype_TA_CDLMARUBOZU;
  static const enumtype TA_CDLMATCHINGLOW =
    TagType_enumtype_TA_CDLMATCHINGLOW;
  static const enumtype TA_CDLMATHOLD =
    TagType_enumtype_TA_CDLMATHOLD;
  static const enumtype TA_CDLMORNINGDOJISTAR =
    TagType_enumtype_TA_CDLMORNINGDOJISTAR;
  static const enumtype TA_CDLMORNINGSTAR =
    TagType_enumtype_TA_CDLMORNINGSTAR;
  static const enumtype TA_CDLONNECK =
    TagType_enumtype_TA_CDLONNECK;
  static const enumtype TA_CDLPIERCING =
    TagType_enumtype_TA_CDLPIERCING;
  static const enumtype TA_CDLRICKSHAWMAN =
    TagType_enumtype_TA_CDLRICKSHAWMAN;
  static const enumtype TA_CDLRISEFALL3METHODS =
    TagType_enumtype_TA_CDLRISEFALL3METHODS;
  static const enumtype TA_CDLSEPARATINGLINES =
    TagType_enumtype_TA_CDLSEPARATINGLINES;
  static const enumtype TA_CDLSHOOTINGSTAR =
    TagType_enumtype_TA_CDLSHOOTINGSTAR;
  static const enumtype TA_CDLSHORTLINE =
    TagType_enumtype_TA_CDLSHORTLINE;
  static const enumtype TA_CDLSPINNINGTOP =
    TagType_enumtype_TA_CDLSPINNINGTOP;
  static const enumtype TA_CDLSTALLEDPATTERN =
    TagType_enumtype_TA_CDLSTALLEDPATTERN;
  static const enumtype TA_CDLSTICKSANDWICH =
    TagType_enumtype_TA_CDLSTICKSANDWICH;
  static const enumtype TA_CDLTAKURI =
    TagType_enumtype_TA_CDLTAKURI;
  static const enumtype TA_CDLTASUKIGAP =
    TagType_enumtype_TA_CDLTASUKIGAP;
  static const enumtype TA_CDLTHRUSTING =
    TagType_enumtype_TA_CDLTHRUSTING;
  static const enumtype TA_CDLTRISTAR =
    TagType_enumtype_TA_CDLTRISTAR;
  static const enumtype TA_CDLUNIQUE3RIVER =
    TagType_enumtype_TA_CDLUNIQUE3RIVER;
  static const enumtype TA_CDLUPSIDEGAP2CROWS =
    TagType_enumtype_TA_CDLUPSIDEGAP2CROWS;
  static const enumtype TA_CDLXSIDEGAP3METHODS =
    TagType_enumtype_TA_CDLXSIDEGAP3METHODS;
  static const enumtype TA_CMO =
    TagType_enumtype_TA_CMO;
  static const enumtype TA_CORREL =
    TagType_enumtype_TA_CORREL;
  static const enumtype TA_DEMA =
    TagType_enumtype_TA_DEMA;
  static const enumtype TA_DX =
    TagType_enumtype_TA_DX;
  static const enumtype TA_EMA =
    TagType_enumtype_TA_EMA;
  static const enumtype TA_HT_DCPERIOD =
    TagType_enumtype_TA_HT_DCPERIOD;
  static const enumtype TA_HT_DCPHASE =
    TagType_enumtype_TA_HT_DCPHASE;
  static const enumtype TA_HT_PHASOR =
    TagType_enumtype_TA_HT_PHASOR;
  static const enumtype TA_HT_SINE =
    TagType_enumtype_TA_HT_SINE;
  static const enumtype TA_HT_TRENDLINE =
    TagType_enumtype_TA_HT_TRENDLINE;
  static const enumtype TA_HT_TRENDMODE =
    TagType_enumtype_TA_HT_TRENDMODE;
  static const enumtype TA_KAMA =
    TagType_enumtype_TA_KAMA;
  static const enumtype TA_LINEARREG =
    TagType_enumtype_TA_LINEARREG;
  static const enumtype TA_LINEARREG_ANGLE =
    TagType_enumtype_TA_LINEARREG_ANGLE;
  static const enumtype TA_LINEARREG_INTERCEPT =
    TagType_enumtype_TA_LINEARREG_INTERCEPT;
  static const enumtype TA_LINEARREG_SLOPE =
    TagType_enumtype_TA_LINEARREG_SLOPE;
  static const enumtype TA_MA =
    TagType_enumtype_TA_MA;
  static const enumtype TA_MACD =
    TagType_enumtype_TA_MACD;
  static const enumtype TA_MACDEXT =
    TagType_enumtype_TA_MACDEXT;
  static const enumtype TA_MACDFIX =
    TagType_enumtype_TA_MACDFIX;
  static const enumtype TA_MAMA =
    TagType_enumtype_TA_MAMA;
  static const enumtype TA_MAX =
    TagType_enumtype_TA_MAX;
  static const enumtype TA_MAXINDEX =
    TagType_enumtype_TA_MAXINDEX;
  static const enumtype TA_MEDPRICE =
    TagType_enumtype_TA_MEDPRICE;
  static const enumtype TA_MFI =
    TagType_enumtype_TA_MFI;
  static const enumtype TA_MIDPOINT =
    TagType_enumtype_TA_MIDPOINT;
  static const enumtype TA_MIDPRICE =
    TagType_enumtype_TA_MIDPRICE;
  static const enumtype TA_MIN =
    TagType_enumtype_TA_MIN;
  static const enumtype TA_MININDEX =
    TagType_enumtype_TA_MININDEX;
  static const enumtype TA_MINMAX =
    TagType_enumtype_TA_MINMAX;
  static const enumtype TA_MINMAXINDEX =
    TagType_enumtype_TA_MINMAXINDEX;
  static const enumtype TA_MINUS_DI =
    TagType_enumtype_TA_MINUS_DI;
  static const enumtype TA_MINUS_DM =
    TagType_enumtype_TA_MINUS_DM;
  static const enumtype TA_MOM =
    TagType_enumtype_TA_MOM;
  static const enumtype TA_NATR =
    TagType_enumtype_TA_NATR;
  static const enumtype TA_OBV =
    TagType_enumtype_TA_OBV;
  static const enumtype TA_PLUS_DI =
    TagType_enumtype_TA_PLUS_DI;
  static const enumtype TA_PLUS_DM =
    TagType_enumtype_TA_PLUS_DM;
  static const enumtype TA_PPO =
    TagType_enumtype_TA_PPO;
  static const enumtype TA_ROC =
    TagType_enumtype_TA_ROC;
  static const enumtype TA_ROCP =
    TagType_enumtype_TA_ROCP;
  static const enumtype TA_ROCR =
    TagType_enumtype_TA_ROCR;
  static const enumtype TA_ROCR100 =
    TagType_enumtype_TA_ROCR100;
  static const enumtype TA_RSI =
    TagType_enumtype_TA_RSI;
  static const enumtype TA_SAR =
    TagType_enumtype_TA_SAR;
  static const enumtype TA_SAREXT =
    TagType_enumtype_TA_SAREXT;
  static const enumtype TA_SMA =
    TagType_enumtype_TA_SMA;
  static const enumtype TA_STDDEV =
    TagType_enumtype_TA_STDDEV;
  static const enumtype TA_STOCH =
    TagType_enumtype_TA_STOCH;
  static const enumtype TA_STOCHF =
    TagType_enumtype_TA_STOCHF;
  static const enumtype TA_STOCHRSI =
    TagType_enumtype_TA_STOCHRSI;
  static const enumtype TA_SUM =
    TagType_enumtype_TA_SUM;
  static const enumtype TA_T3 =
    TagType_enumtype_TA_T3;
  static const enumtype TA_TEMA =
    TagType_enumtype_TA_TEMA;
  static const enumtype TA_TRANGE =
    TagType_enumtype_TA_TRANGE;
  static const enumtype TA_TRIMA =
    TagType_enumtype_TA_TRIMA;
  static const enumtype TA_TRIX =
    TagType_enumtype_TA_TRIX;
  static const enumtype TA_TSF =
    TagType_enumtype_TA_TSF;
  static const enumtype TA_TYPPRICE =
    TagType_enumtype_TA_TYPPRICE;
  static const enumtype TA_ULTOSC =
    TagType_enumtype_TA_ULTOSC;
  static const enumtype TA_VAR =
    TagType_enumtype_TA_VAR;
  static const enumtype TA_WCLPRICE =
    TagType_enumtype_TA_WCLPRICE;
  static const enumtype TA_WILLR =
    TagType_enumtype_TA_WILLR;
  static const enumtype TA_WMA =
    TagType_enumtype_TA_WMA;
  static const enumtype TAIndicator =
    TagType_enumtype_TAIndicator;
  static const enumtype TAIndicatorName =
    TagType_enumtype_TAIndicatorName;
  static const enumtype TAName =
    TagType_enumtype_TAName;
  static const enumtype TAType =
    TagType_enumtype_TAType;
  static const enumtype BarSeconds =
    TagType_enumtype_BarSeconds;
  static const enumtype SMA =
    TagType_enumtype_SMA;
  static const enumtype SMAPeriod =
    TagType_enumtype_SMAPeriod;
  static const enumtype SMAFast =
    TagType_enumtype_SMAFast;
  static const enumtype SMAFastPeriod =
    TagType_enumtype_SMAFastPeriod;
  static const enumtype SMAMid =
    TagType_enumtype_SMAMid;
  static const enumtype SMAMidPeriod =
    TagType_enumtype_SMAMidPeriod;
  static const enumtype SMASlow =
    TagType_enumtype_SMASlow;
  static const enumtype SMASlowPeriod =
    TagType_enumtype_SMASlowPeriod;
  static const enumtype EMA =
    TagType_enumtype_EMA;
  static const enumtype EMAPeriod =
    TagType_enumtype_EMAPeriod;
  static const enumtype EMAFast =
    TagType_enumtype_EMAFast;
  static const enumtype EMAFastPeriod =
    TagType_enumtype_EMAFastPeriod;
  static const enumtype EMAMid =
    TagType_enumtype_EMAMid;
  static const enumtype EMAMidPeriod =
    TagType_enumtype_EMAMidPeriod;
  static const enumtype EMASlow =
    TagType_enumtype_EMASlow;
  static const enumtype EMASlowPeriod =
    TagType_enumtype_EMASlowPeriod;
  static const enumtype ATR =
    TagType_enumtype_ATR;
  static const enumtype ATRPeriod =
    TagType_enumtype_ATRPeriod;
  static const enumtype RSI =
    TagType_enumtype_RSI;
  static const enumtype RSIPeriod =
    TagType_enumtype_RSIPeriod;
  static const enumtype MACDMAType =
    TagType_enumtype_MACDMAType;
  static const enumtype MACDFastPeriod =
    TagType_enumtype_MACDFastPeriod;
  static const enumtype MACDSlowPeriod =
    TagType_enumtype_MACDSlowPeriod;
  static const enumtype MACDSignalPeriod =
    TagType_enumtype_MACDSignalPeriod;
  static const enumtype MACD =
    TagType_enumtype_MACD;
  static const enumtype MACDSignal =
    TagType_enumtype_MACDSignal;
  static const enumtype MACDHist =
    TagType_enumtype_MACDHist;
  static const enumtype MACDFast =
    TagType_enumtype_MACDFast;
  static const enumtype MACDSlow =
    TagType_enumtype_MACDSlow;
  static const enumtype BBPeriod =
    TagType_enumtype_BBPeriod;
  static const enumtype BBMid =
    TagType_enumtype_BBMid;
  static const enumtype BBNorm =
    TagType_enumtype_BBNorm;
  static const enumtype BBStd =
    TagType_enumtype_BBStd;
  static const enumtype BBNumStd =
    TagType_enumtype_BBNumStd;
  static const enumtype BBWidth =
    TagType_enumtype_BBWidth;
  static const enumtype BBWidthEma =
    TagType_enumtype_BBWidthEma;
  static const enumtype CCI =
    TagType_enumtype_CCI;
  static const enumtype CCIAvg =
    TagType_enumtype_CCIAvg;
  static const enumtype CCIDev =
    TagType_enumtype_CCIDev;
  static const enumtype CCIPeriod =
    TagType_enumtype_CCIPeriod;
  static const enumtype SAR =
    TagType_enumtype_SAR;
  static const enumtype SARPeriod =
    TagType_enumtype_SARPeriod;
  static const enumtype SARFast =
    TagType_enumtype_SARFast;
  static const enumtype SARFastPeriod =
    TagType_enumtype_SARFastPeriod;
  static const enumtype SARMid =
    TagType_enumtype_SARMid;
  static const enumtype SARMidPeriod =
    TagType_enumtype_SARMidPeriod;
  static const enumtype SARSlow =
    TagType_enumtype_SARSlow;
  static const enumtype SARSlowPeriod =
    TagType_enumtype_SARSlowPeriod;
  static const enumtype SARFastAccInit =
    TagType_enumtype_SARFastAccInit;
  static const enumtype SARFastAccStep =
    TagType_enumtype_SARFastAccStep;
  static const enumtype SARFastAccMax =
    TagType_enumtype_SARFastAccMax;
  static const enumtype SARMidAccInit =
    TagType_enumtype_SARMidAccInit;
  static const enumtype SARMidAccStep =
    TagType_enumtype_SARMidAccStep;
  static const enumtype SARMidAccMax =
    TagType_enumtype_SARMidAccMax;
  static const enumtype SARSlowAccInit =
    TagType_enumtype_SARSlowAccInit;
  static const enumtype SARSlowAccStep =
    TagType_enumtype_SARSlowAccStep;
  static const enumtype SARSlowAccMax =
    TagType_enumtype_SARSlowAccMax;
  static const enumtype SARFastStatus =
    TagType_enumtype_SARFastStatus;
  static const enumtype SARMidStatus =
    TagType_enumtype_SARMidStatus;
  static const enumtype SARSlowStatus =
    TagType_enumtype_SARSlowStatus;
  static const enumtype BSI =
    TagType_enumtype_BSI;
  static const enumtype BSIPeriod =
    TagType_enumtype_BSIPeriod;
  static const enumtype ADX =
    TagType_enumtype_ADX;
  static const enumtype ADXPeriod =
    TagType_enumtype_ADXPeriod;
  static const enumtype PDI =
    TagType_enumtype_PDI;
  static const enumtype MDI =
    TagType_enumtype_MDI;
  static const enumtype MFI =
    TagType_enumtype_MFI;
  static const enumtype MFIPeriod =
    TagType_enumtype_MFIPeriod;
  static const enumtype BSVD =
    TagType_enumtype_BSVD;
  static const enumtype BSVDBBPeriod =
    TagType_enumtype_BSVDBBPeriod;
  static const enumtype BSVDBBMid =
    TagType_enumtype_BSVDBBMid;
  static const enumtype BSVDBBStd =
    TagType_enumtype_BSVDBBStd;
  static const enumtype BSVDBBNumStd =
    TagType_enumtype_BSVDBBNumStd;
  static const enumtype OIChg =
    TagType_enumtype_OIChg;
  static const enumtype OIChgBBPeriod =
    TagType_enumtype_OIChgBBPeriod;
  static const enumtype OIChgBBMid =
    TagType_enumtype_OIChgBBMid;
  static const enumtype OIChgBBStd =
    TagType_enumtype_OIChgBBStd;
  static const enumtype OIChgBBNumStd =
    TagType_enumtype_OIChgBBNumStd;
  static const enumtype PTStatus =
    TagType_enumtype_PTStatus;
  static const enumtype PTStatus1 =
    TagType_enumtype_PTStatus1;
  static const enumtype PTStatus2 =
    TagType_enumtype_PTStatus2;
  static const enumtype PTStatus3 =
    TagType_enumtype_PTStatus3;
  static const enumtype PTStatus4 =
    TagType_enumtype_PTStatus4;
  static const enumtype PTStatus5 =
    TagType_enumtype_PTStatus5;
  static const enumtype PTStatus6 =
    TagType_enumtype_PTStatus6;
  static const enumtype PTStatus7 =
    TagType_enumtype_PTStatus7;
  static const enumtype PTStatus8 =
    TagType_enumtype_PTStatus8;
  static const enumtype PTStatus9 =
    TagType_enumtype_PTStatus9;
  static const enumtype BSTD =
    TagType_enumtype_BSTD;
  static const enumtype BSTDBBPeriod =
    TagType_enumtype_BSTDBBPeriod;
  static const enumtype BSTDBBMid =
    TagType_enumtype_BSTDBBMid;
  static const enumtype BSTDBBStd =
    TagType_enumtype_BSTDBBStd;
  static const enumtype BSTDBBNumStd =
    TagType_enumtype_BSTDBBNumStd;
  static const enumtype Flips =
    TagType_enumtype_Flips;
  static const enumtype FlipsBBPeriod =
    TagType_enumtype_FlipsBBPeriod;
  static const enumtype FlipsBBMid =
    TagType_enumtype_FlipsBBMid;
  static const enumtype FlipsBBStd =
    TagType_enumtype_FlipsBBStd;
  static const enumtype FlipsBBNumStd =
    TagType_enumtype_FlipsBBNumStd;
  static const enumtype BBSAR =
    TagType_enumtype_BBSAR;
  static const enumtype BBSARDist =
    TagType_enumtype_BBSARDist;
  static const enumtype ATRSAR =
    TagType_enumtype_ATRSAR;
  static const enumtype ATRSARDist =
    TagType_enumtype_ATRSARDist;
  static const enumtype MACDHistMAPeriod =
    TagType_enumtype_MACDHistMAPeriod;
  static const enumtype MACDHistMA =
    TagType_enumtype_MACDHistMA;
  static const enumtype MACDHistDiff =
    TagType_enumtype_MACDHistDiff;
  static const enumtype CCIMAPeriod =
    TagType_enumtype_CCIMAPeriod;
  static const enumtype CCIMA =
    TagType_enumtype_CCIMA;
  static const enumtype CCIDiff =
    TagType_enumtype_CCIDiff;
  static const enumtype BBNormMAPeriod =
    TagType_enumtype_BBNormMAPeriod;
  static const enumtype BBNormMA =
    TagType_enumtype_BBNormMA;
  static const enumtype BBNormDiff =
    TagType_enumtype_BBNormDiff;
  static const enumtype BSVDBBNormMAPeriod =
    TagType_enumtype_BSVDBBNormMAPeriod;
  static const enumtype BSVDBBNormMA =
    TagType_enumtype_BSVDBBNormMA;
  static const enumtype BSVDBBNormDiff =
    TagType_enumtype_BSVDBBNormDiff;
  static const enumtype BSTDBBNormMAPeriod =
    TagType_enumtype_BSTDBBNormMAPeriod;
  static const enumtype BSTDBBNormMA =
    TagType_enumtype_BSTDBBNormMA;
  static const enumtype BSTDBBNormDiff =
    TagType_enumtype_BSTDBBNormDiff;
  static const enumtype BBMidSlopePeriod =
    TagType_enumtype_BBMidSlopePeriod;
  static const enumtype BBMidSlope =
    TagType_enumtype_BBMidSlope;
  static const enumtype MASlopePeriod =
    TagType_enumtype_MASlopePeriod;
  static const enumtype MASlope =
    TagType_enumtype_MASlope;
  static const enumtype MACD2 =
    TagType_enumtype_MACD2;
  static const enumtype MACDSignal2 =
    TagType_enumtype_MACDSignal2;
  static const enumtype MACDHist2 =
    TagType_enumtype_MACDHist2;
  static const enumtype MACDFast2 =
    TagType_enumtype_MACDFast2;
  static const enumtype MACDHistMA2 =
    TagType_enumtype_MACDHistMA2;
  static const enumtype MACD3 =
    TagType_enumtype_MACD3;
  static const enumtype MACDSignal3 =
    TagType_enumtype_MACDSignal3;
  static const enumtype MACDHist3 =
    TagType_enumtype_MACDHist3;
  static const enumtype MACDFast3 =
    TagType_enumtype_MACDFast3;
  static const enumtype MACDHistMA3 =
    TagType_enumtype_MACDHistMA3;
  static const enumtype MACD5 =
    TagType_enumtype_MACD5;
  static const enumtype MACDSignal5 =
    TagType_enumtype_MACDSignal5;
  static const enumtype MACDHist5 =
    TagType_enumtype_MACDHist5;
  static const enumtype MACDFast5 =
    TagType_enumtype_MACDFast5;
  static const enumtype MACDHistMA5 =
    TagType_enumtype_MACDHistMA5;
  static const enumtype MACD8 =
    TagType_enumtype_MACD8;
  static const enumtype MACDSignal8 =
    TagType_enumtype_MACDSignal8;
  static const enumtype MACDHist8 =
    TagType_enumtype_MACDHist8;
  static const enumtype MACDFast8 =
    TagType_enumtype_MACDFast8;
  static const enumtype MACDHistMA8 =
    TagType_enumtype_MACDHistMA8;
  static const enumtype KBMid =
    TagType_enumtype_KBMid;
  static const enumtype KBPeriod =
    TagType_enumtype_KBPeriod;
  static const enumtype SlowKPeriod =
    TagType_enumtype_SlowKPeriod;
  static const enumtype SlowK =
    TagType_enumtype_SlowK;
  static const enumtype SlowDPeriod =
    TagType_enumtype_SlowDPeriod;
  static const enumtype SlowD =
    TagType_enumtype_SlowD;
  static const enumtype FastKPeriod =
    TagType_enumtype_FastKPeriod;
  static const enumtype FastK =
    TagType_enumtype_FastK;
  static const enumtype FastDPeriod =
    TagType_enumtype_FastDPeriod;
  static const enumtype FastD =
    TagType_enumtype_FastD;
  static const enumtype VolBB =
    TagType_enumtype_VolBB;
  static const enumtype VolBBPeriod =
    TagType_enumtype_VolBBPeriod;
  static const enumtype VolBBMid =
    TagType_enumtype_VolBBMid;
  static const enumtype VolBBStd =
    TagType_enumtype_VolBBStd;
  static const enumtype VolBBNumStd =
    TagType_enumtype_VolBBNumStd;
  static const enumtype DMI =
    TagType_enumtype_DMI;
  static const enumtype DX =
    TagType_enumtype_DX;
  static const enumtype ADXR =
    TagType_enumtype_ADXR;
  static const enumtype SARFastEP =
    TagType_enumtype_SARFastEP;
  static const enumtype SARFastAcc =
    TagType_enumtype_SARFastAcc;
  static const enumtype SARMidEP =
    TagType_enumtype_SARMidEP;
  static const enumtype SARMidAcc =
    TagType_enumtype_SARMidAcc;
  static const enumtype SARSlowEP =
    TagType_enumtype_SARSlowEP;
  static const enumtype SARSlowAcc =
    TagType_enumtype_SARSlowAcc;
  static const enumtype SARLookback =
    TagType_enumtype_SARLookback;
  static const enumtype SARMaxDist =
    TagType_enumtype_SARMaxDist;
  static const enumtype MAType =
    TagType_enumtype_MAType;
  static const enumtype MAPeriod1 =
    TagType_enumtype_MAPeriod1;
  static const enumtype MA1 =
    TagType_enumtype_MA1;
  static const enumtype MAPeriod2 =
    TagType_enumtype_MAPeriod2;
  static const enumtype MA2 =
    TagType_enumtype_MA2;
  static const enumtype MAPeriod3 =
    TagType_enumtype_MAPeriod3;
  static const enumtype MA3 =
    TagType_enumtype_MA3;
  static const enumtype MAPeriod4 =
    TagType_enumtype_MAPeriod4;
  static const enumtype MA4 =
    TagType_enumtype_MA4;
  static const enumtype MAPeriod5 =
    TagType_enumtype_MAPeriod5;
  static const enumtype MA5 =
    TagType_enumtype_MA5;
  static const enumtype MA1Chg =
    TagType_enumtype_MA1Chg;
  static const enumtype MA1NormChg =
    TagType_enumtype_MA1NormChg;
  static const enumtype MA2Chg =
    TagType_enumtype_MA2Chg;
  static const enumtype MA2NormChg =
    TagType_enumtype_MA2NormChg;
  static const enumtype MA3Chg =
    TagType_enumtype_MA3Chg;
  static const enumtype MA3NormChg =
    TagType_enumtype_MA3NormChg;
  static const enumtype MA4Chg =
    TagType_enumtype_MA4Chg;
  static const enumtype MA4NormChg =
    TagType_enumtype_MA4NormChg;
  static const enumtype MA5Chg =
    TagType_enumtype_MA5Chg;
  static const enumtype MA5NormChg =
    TagType_enumtype_MA5NormChg;
  static const enumtype UpDnFlag =
    TagType_enumtype_UpDnFlag;
  static const enumtype MAATR =
    TagType_enumtype_MAATR;
  static const enumtype IndustryCode =
    TagType_enumtype_IndustryCode;
  static const enumtype IndustrySector =
    TagType_enumtype_IndustrySector;
  static const enumtype IndustryGroup =
    TagType_enumtype_IndustryGroup;
  static const enumtype IndustrySubGroup =
    TagType_enumtype_IndustrySubGroup;
  static const enumtype CorporateActionType =
    TagType_enumtype_CorporateActionType;
  static const enumtype DeclaredDate =
    TagType_enumtype_DeclaredDate;
  static const enumtype RecordDate =
    TagType_enumtype_RecordDate;
  static const enumtype PayDate =
    TagType_enumtype_PayDate;
  static const enumtype DividendType =
    TagType_enumtype_DividendType;
  static const enumtype SplitType =
    TagType_enumtype_SplitType;
  static const enumtype RightsIssueType =
    TagType_enumtype_RightsIssueType;
  static const enumtype NetAmount =
    TagType_enumtype_NetAmount;
  static const enumtype GrossAmount =
    TagType_enumtype_GrossAmount;
  static const enumtype Ratio =
    TagType_enumtype_Ratio;
  static const enumtype Percent =
    TagType_enumtype_Percent;
  static const enumtype AdjustmentFactor =
    TagType_enumtype_AdjustmentFactor;
  static const enumtype EarningsPerShare =
    TagType_enumtype_EarningsPerShare;
  static const enumtype BookValuePerShare =
    TagType_enumtype_BookValuePerShare;
  static const enumtype CashPerShare =
    TagType_enumtype_CashPerShare;
  static const enumtype RevenuePerShare =
    TagType_enumtype_RevenuePerShare;
  static const enumtype DebtPerShare =
    TagType_enumtype_DebtPerShare;
  static const enumtype CashFlowPerShare =
    TagType_enumtype_CashFlowPerShare;
  static const enumtype InterestPaymentPerShare =
    TagType_enumtype_InterestPaymentPerShare;
  static const enumtype Strategy =
    TagType_enumtype_Strategy;
  static const enumtype StrategyComponent =
    TagType_enumtype_StrategyComponent;
  static const enumtype StrategyPrice =
    TagType_enumtype_StrategyPrice;
  static const enumtype StrategyFill =
    TagType_enumtype_StrategyFill;
  static const enumtype StrategyMode =
    TagType_enumtype_StrategyMode;
  static const enumtype ForceMarketOrder =
    TagType_enumtype_ForceMarketOrder;
  static const enumtype FillOnBarMode =
    TagType_enumtype_FillOnBarMode;
  static const enumtype TickSize =
    TagType_enumtype_TickSize;
  static const enumtype PriceDisplay =
    TagType_enumtype_PriceDisplay;
  static const enumtype SecurityAltExchange =
    TagType_enumtype_SecurityAltExchange;
  static const enumtype ClientOrderRefID =
    TagType_enumtype_ClientOrderRefID;
  static inline bool enumtype_IsValid(int value) {
    return TagType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    TagType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    TagType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    TagType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return TagType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return TagType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return TagType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.TagType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static TagType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API YahooQuoteType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.YahooQuoteType) */ {
 public:
  YahooQuoteType();
  virtual ~YahooQuoteType();

  YahooQuoteType(const YahooQuoteType& from);

  inline YahooQuoteType& operator=(const YahooQuoteType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YahooQuoteType& default_instance();

  void Swap(YahooQuoteType* other);

  // implements Message ----------------------------------------------

  inline YahooQuoteType* New() const { return New(NULL); }

  YahooQuoteType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YahooQuoteType& from);
  void MergeFrom(const YahooQuoteType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YahooQuoteType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef YahooQuoteType_enumtype enumtype;
  static const enumtype ask =
    YahooQuoteType_enumtype_ask;
  static const enumtype averageDailyVolume =
    YahooQuoteType_enumtype_averageDailyVolume;
  static const enumtype askSize =
    YahooQuoteType_enumtype_askSize;
  static const enumtype bid =
    YahooQuoteType_enumtype_bid;
  static const enumtype askRealTime =
    YahooQuoteType_enumtype_askRealTime;
  static const enumtype bidRealTime =
    YahooQuoteType_enumtype_bidRealTime;
  static const enumtype bookValue =
    YahooQuoteType_enumtype_bookValue;
  static const enumtype bidSize =
    YahooQuoteType_enumtype_bidSize;
  static const enumtype changeAndPercentChange =
    YahooQuoteType_enumtype_changeAndPercentChange;
  static const enumtype change =
    YahooQuoteType_enumtype_change;
  static const enumtype commission =
    YahooQuoteType_enumtype_commission;
  static const enumtype changeRealTime =
    YahooQuoteType_enumtype_changeRealTime;
  static const enumtype afterHoursChangeRealTime =
    YahooQuoteType_enumtype_afterHoursChangeRealTime;
  static const enumtype dividendShare =
    YahooQuoteType_enumtype_dividendShare;
  static const enumtype lastTradeDate =
    YahooQuoteType_enumtype_lastTradeDate;
  static const enumtype tradeDate =
    YahooQuoteType_enumtype_tradeDate;
  static const enumtype earningsShare =
    YahooQuoteType_enumtype_earningsShare;
  static const enumtype errorIndication =
    YahooQuoteType_enumtype_errorIndication;
  static const enumtype epsEstimateCurrentYear =
    YahooQuoteType_enumtype_epsEstimateCurrentYear;
  static const enumtype epsEstimateNextYear =
    YahooQuoteType_enumtype_epsEstimateNextYear;
  static const enumtype epsEstimateNextQuarter =
    YahooQuoteType_enumtype_epsEstimateNextQuarter;
  static const enumtype floatShares =
    YahooQuoteType_enumtype_floatShares;
  static const enumtype dayLow =
    YahooQuoteType_enumtype_dayLow;
  static const enumtype dayHigh =
    YahooQuoteType_enumtype_dayHigh;
  static const enumtype low52Week =
    YahooQuoteType_enumtype_low52Week;
  static const enumtype high52Week =
    YahooQuoteType_enumtype_high52Week;
  static const enumtype holdingsGainPercent =
    YahooQuoteType_enumtype_holdingsGainPercent;
  static const enumtype annualizedGain =
    YahooQuoteType_enumtype_annualizedGain;
  static const enumtype holdingsGain =
    YahooQuoteType_enumtype_holdingsGain;
  static const enumtype holdingsGainPercentRealTime =
    YahooQuoteType_enumtype_holdingsGainPercentRealTime;
  static const enumtype holdingsGainRealTime =
    YahooQuoteType_enumtype_holdingsGainRealTime;
  static const enumtype moreInfo =
    YahooQuoteType_enumtype_moreInfo;
  static const enumtype orderBookRealTime =
    YahooQuoteType_enumtype_orderBookRealTime;
  static const enumtype marketCapitalization =
    YahooQuoteType_enumtype_marketCapitalization;
  static const enumtype marketCapRealTime =
    YahooQuoteType_enumtype_marketCapRealTime;
  static const enumtype ebitda =
    YahooQuoteType_enumtype_ebitda;
  static const enumtype changeFrom52WeekLow =
    YahooQuoteType_enumtype_changeFrom52WeekLow;
  static const enumtype percentChangeFrom52WeekLow =
    YahooQuoteType_enumtype_percentChangeFrom52WeekLow;
  static const enumtype lastTradeRealTimeWithTime =
    YahooQuoteType_enumtype_lastTradeRealTimeWithTime;
  static const enumtype changePercentRealTime =
    YahooQuoteType_enumtype_changePercentRealTime;
  static const enumtype lastTradeSize =
    YahooQuoteType_enumtype_lastTradeSize;
  static const enumtype changeFrom52WeekHigh =
    YahooQuoteType_enumtype_changeFrom52WeekHigh;
  static const enumtype percebtChangeFrom52WeekHigh =
    YahooQuoteType_enumtype_percebtChangeFrom52WeekHigh;
  static const enumtype lastTradeWithTime =
    YahooQuoteType_enumtype_lastTradeWithTime;
  static const enumtype lastTradePriceOnly =
    YahooQuoteType_enumtype_lastTradePriceOnly;
  static const enumtype highLimit =
    YahooQuoteType_enumtype_highLimit;
  static const enumtype lowLimit =
    YahooQuoteType_enumtype_lowLimit;
  static const enumtype dayRange =
    YahooQuoteType_enumtype_dayRange;
  static const enumtype dayRangeRealTime =
    YahooQuoteType_enumtype_dayRangeRealTime;
  static const enumtype movingAverage50Day =
    YahooQuoteType_enumtype_movingAverage50Day;
  static const enumtype movingAverage200Day =
    YahooQuoteType_enumtype_movingAverage200Day;
  static const enumtype changeFrom200DayMovingAverage =
    YahooQuoteType_enumtype_changeFrom200DayMovingAverage;
  static const enumtype percentChangeFrom200DayMovingAverage =
    YahooQuoteType_enumtype_percentChangeFrom200DayMovingAverage;
  static const enumtype changeFrom50DayMovingAverage =
    YahooQuoteType_enumtype_changeFrom50DayMovingAverage;
  static const enumtype percentChangeFrom50DayMovingAverage =
    YahooQuoteType_enumtype_percentChangeFrom50DayMovingAverage;
  static const enumtype name =
    YahooQuoteType_enumtype_name;
  static const enumtype notes =
    YahooQuoteType_enumtype_notes;
  static const enumtype open =
    YahooQuoteType_enumtype_open;
  static const enumtype previousClose =
    YahooQuoteType_enumtype_previousClose;
  static const enumtype pricePaid =
    YahooQuoteType_enumtype_pricePaid;
  static const enumtype changeinPercent =
    YahooQuoteType_enumtype_changeinPercent;
  static const enumtype priceSales =
    YahooQuoteType_enumtype_priceSales;
  static const enumtype priceBook =
    YahooQuoteType_enumtype_priceBook;
  static const enumtype exDividendDate =
    YahooQuoteType_enumtype_exDividendDate;
  static const enumtype peRatio =
    YahooQuoteType_enumtype_peRatio;
  static const enumtype dividendPayDate =
    YahooQuoteType_enumtype_dividendPayDate;
  static const enumtype peRatioRealTime =
    YahooQuoteType_enumtype_peRatioRealTime;
  static const enumtype pegRatio =
    YahooQuoteType_enumtype_pegRatio;
  static const enumtype priceEpsEstimateCurrentYear =
    YahooQuoteType_enumtype_priceEpsEstimateCurrentYear;
  static const enumtype priceEpsEstimateNextYear =
    YahooQuoteType_enumtype_priceEpsEstimateNextYear;
  static const enumtype symbol =
    YahooQuoteType_enumtype_symbol;
  static const enumtype sharesOwned =
    YahooQuoteType_enumtype_sharesOwned;
  static const enumtype shortRatio =
    YahooQuoteType_enumtype_shortRatio;
  static const enumtype lastTradeTime =
    YahooQuoteType_enumtype_lastTradeTime;
  static const enumtype tradeLinks =
    YahooQuoteType_enumtype_tradeLinks;
  static const enumtype tickerTrend =
    YahooQuoteType_enumtype_tickerTrend;
  static const enumtype targetPrice1Yr =
    YahooQuoteType_enumtype_targetPrice1Yr;
  static const enumtype volume =
    YahooQuoteType_enumtype_volume;
  static const enumtype holdingsValue =
    YahooQuoteType_enumtype_holdingsValue;
  static const enumtype holdingsValueRealTime =
    YahooQuoteType_enumtype_holdingsValueRealTime;
  static const enumtype range52Week =
    YahooQuoteType_enumtype_range52Week;
  static const enumtype dayValueChange =
    YahooQuoteType_enumtype_dayValueChange;
  static const enumtype dayValueChangeRealTime =
    YahooQuoteType_enumtype_dayValueChangeRealTime;
  static const enumtype stockExchange =
    YahooQuoteType_enumtype_stockExchange;
  static const enumtype dividendYield =
    YahooQuoteType_enumtype_dividendYield;
  static inline bool enumtype_IsValid(int value) {
    return YahooQuoteType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    YahooQuoteType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    YahooQuoteType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    YahooQuoteType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return YahooQuoteType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return YahooQuoteType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return YahooQuoteType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.YahooQuoteType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static YahooQuoteType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API YahooRangeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.YahooRangeType) */ {
 public:
  YahooRangeType();
  virtual ~YahooRangeType();

  YahooRangeType(const YahooRangeType& from);

  inline YahooRangeType& operator=(const YahooRangeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YahooRangeType& default_instance();

  void Swap(YahooRangeType* other);

  // implements Message ----------------------------------------------

  inline YahooRangeType* New() const { return New(NULL); }

  YahooRangeType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YahooRangeType& from);
  void MergeFrom(const YahooRangeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YahooRangeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef YahooRangeType_enumtype enumtype;
  static const enumtype daily =
    YahooRangeType_enumtype_daily;
  static const enumtype weekly =
    YahooRangeType_enumtype_weekly;
  static const enumtype monthly =
    YahooRangeType_enumtype_monthly;
  static const enumtype dividendsOnly =
    YahooRangeType_enumtype_dividendsOnly;
  static inline bool enumtype_IsValid(int value) {
    return YahooRangeType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    YahooRangeType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    YahooRangeType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    YahooRangeType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return YahooRangeType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return YahooRangeType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return YahooRangeType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.YahooRangeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_XTEnum_2eproto();
  friend void protobuf_AssignDesc_XTEnum_2eproto();
  friend void protobuf_ShutdownFile_XTEnum_2eproto();

  void InitAsDefaultInstance();
  static YahooRangeType* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AsyncTaskStatus

// -------------------------------------------------------------------

// MdTrdType

// -------------------------------------------------------------------

// EventModeType

// -------------------------------------------------------------------

// EventCategoryType

// -------------------------------------------------------------------

// EventDataDstType

// -------------------------------------------------------------------

// MemDBMsgType

// -------------------------------------------------------------------

// BarDataFlagMask

// -------------------------------------------------------------------

// BrokerApiType

// -------------------------------------------------------------------

// PBTagMsgType

// -------------------------------------------------------------------

// BrokerServerType

// -------------------------------------------------------------------

// ConnectionStatus

// -------------------------------------------------------------------

// LogInStatus

// -------------------------------------------------------------------

// TaskStatus

// -------------------------------------------------------------------

// DisplayLanguageType

// -------------------------------------------------------------------

// ExchangeType

// -------------------------------------------------------------------

// AggressiveType

// -------------------------------------------------------------------

// BuySellType

// -------------------------------------------------------------------

// AccountTypeMask

// -------------------------------------------------------------------

// ExitPxType

// -------------------------------------------------------------------

// FillType

// -------------------------------------------------------------------

// FillInfoType

// -------------------------------------------------------------------

// FitDataType

// -------------------------------------------------------------------

// InstrumentCommissionRateType

// -------------------------------------------------------------------

// InstrFilterType

// -------------------------------------------------------------------

// MktRegimeType

// -------------------------------------------------------------------

// TrendingOrRangingType

// -------------------------------------------------------------------

// RollingType

// -------------------------------------------------------------------

// CallPutType

// -------------------------------------------------------------------

// OptionExerciseStyle

// -------------------------------------------------------------------

// OptionXType

// -------------------------------------------------------------------

// OptionCalcType

// -------------------------------------------------------------------

// OptionPxMethod

// -------------------------------------------------------------------

// TrdSigType

// -------------------------------------------------------------------

// TrdStatType

// -------------------------------------------------------------------

// CrossAboveBelowType

// -------------------------------------------------------------------

// SecurityType

// -------------------------------------------------------------------

// TAType

// -------------------------------------------------------------------

// TARetCode

// -------------------------------------------------------------------

// TAMAType

// -------------------------------------------------------------------

// TAFuncUnstId

// -------------------------------------------------------------------

// TARangeType

// -------------------------------------------------------------------

// TACandleSettingType

// -------------------------------------------------------------------

// DateTimeType

// -------------------------------------------------------------------

// DataType

// -------------------------------------------------------------------

// OpenCloseFlag

// -------------------------------------------------------------------

// OCFlagAutoType

// -------------------------------------------------------------------

// MktDataChgType

// -------------------------------------------------------------------

// InstrEventType

// -------------------------------------------------------------------

// OrderQuoteStatus

// -------------------------------------------------------------------

// OrderQuoteTsType

// -------------------------------------------------------------------

// OrderQuoteReasonType

// -------------------------------------------------------------------

// CurrPrevTempType

// -------------------------------------------------------------------

// VolCurveParamType

// -------------------------------------------------------------------

// PyAT_OrderAction

// -------------------------------------------------------------------

// PyAT_OrderState

// -------------------------------------------------------------------

// PyAT_OrderType

// -------------------------------------------------------------------

// TagType

// -------------------------------------------------------------------

// YahooQuoteType

// -------------------------------------------------------------------

// YahooRangeType

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XT

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::XT::AsyncTaskStatus_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::AsyncTaskStatus_enumtype>() {
  return ::XT::AsyncTaskStatus_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::MdTrdType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::MdTrdType_enumtype>() {
  return ::XT::MdTrdType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::EventModeType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::EventModeType_enumtype>() {
  return ::XT::EventModeType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::EventCategoryType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::EventCategoryType_enumtype>() {
  return ::XT::EventCategoryType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::EventDataDstType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::EventDataDstType_enumtype>() {
  return ::XT::EventDataDstType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::MemDBMsgType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::MemDBMsgType_enumtype>() {
  return ::XT::MemDBMsgType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::BarDataFlagMask_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::BarDataFlagMask_enumtype>() {
  return ::XT::BarDataFlagMask_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::BrokerApiType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::BrokerApiType_enumtype>() {
  return ::XT::BrokerApiType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::PBTagMsgType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::PBTagMsgType_enumtype>() {
  return ::XT::PBTagMsgType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::BrokerServerType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::BrokerServerType_enumtype>() {
  return ::XT::BrokerServerType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::ConnectionStatus_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::ConnectionStatus_enumtype>() {
  return ::XT::ConnectionStatus_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::LogInStatus_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::LogInStatus_enumtype>() {
  return ::XT::LogInStatus_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TaskStatus_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TaskStatus_enumtype>() {
  return ::XT::TaskStatus_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::DisplayLanguageType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::DisplayLanguageType_enumtype>() {
  return ::XT::DisplayLanguageType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::ExchangeType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::ExchangeType_enumtype>() {
  return ::XT::ExchangeType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::AggressiveType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::AggressiveType_enumtype>() {
  return ::XT::AggressiveType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::BuySellType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::BuySellType_enumtype>() {
  return ::XT::BuySellType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::AccountTypeMask_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::AccountTypeMask_enumtype>() {
  return ::XT::AccountTypeMask_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::ExitPxType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::ExitPxType_enumtype>() {
  return ::XT::ExitPxType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::FillType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::FillType_enumtype>() {
  return ::XT::FillType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::FillInfoType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::FillInfoType_enumtype>() {
  return ::XT::FillInfoType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::FitDataType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::FitDataType_enumtype>() {
  return ::XT::FitDataType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::InstrumentCommissionRateType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::InstrumentCommissionRateType_enumtype>() {
  return ::XT::InstrumentCommissionRateType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::InstrFilterType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::InstrFilterType_enumtype>() {
  return ::XT::InstrFilterType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::MktRegimeType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::MktRegimeType_enumtype>() {
  return ::XT::MktRegimeType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TrendingOrRangingType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TrendingOrRangingType_enumtype>() {
  return ::XT::TrendingOrRangingType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::RollingType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::RollingType_enumtype>() {
  return ::XT::RollingType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::CallPutType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::CallPutType_enumtype>() {
  return ::XT::CallPutType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OptionExerciseStyle_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OptionExerciseStyle_enumtype>() {
  return ::XT::OptionExerciseStyle_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OptionXType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OptionXType_enumtype>() {
  return ::XT::OptionXType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OptionCalcType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OptionCalcType_enumtype>() {
  return ::XT::OptionCalcType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OptionPxMethod_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OptionPxMethod_enumtype>() {
  return ::XT::OptionPxMethod_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TrdSigType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TrdSigType_enumtype>() {
  return ::XT::TrdSigType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TrdStatType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TrdStatType_enumtype>() {
  return ::XT::TrdStatType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::CrossAboveBelowType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::CrossAboveBelowType_enumtype>() {
  return ::XT::CrossAboveBelowType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::SecurityType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::SecurityType_enumtype>() {
  return ::XT::SecurityType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TAType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TAType_enumtype>() {
  return ::XT::TAType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TARetCode_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TARetCode_enumtype>() {
  return ::XT::TARetCode_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TAMAType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TAMAType_enumtype>() {
  return ::XT::TAMAType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TAFuncUnstId_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TAFuncUnstId_enumtype>() {
  return ::XT::TAFuncUnstId_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TARangeType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TARangeType_enumtype>() {
  return ::XT::TARangeType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TACandleSettingType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TACandleSettingType_enumtype>() {
  return ::XT::TACandleSettingType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::DateTimeType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::DateTimeType_enumtype>() {
  return ::XT::DateTimeType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::DataType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::DataType_enumtype>() {
  return ::XT::DataType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OpenCloseFlag_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OpenCloseFlag_enumtype>() {
  return ::XT::OpenCloseFlag_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OCFlagAutoType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OCFlagAutoType_enumtype>() {
  return ::XT::OCFlagAutoType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::MktDataChgType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::MktDataChgType_enumtype>() {
  return ::XT::MktDataChgType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::InstrEventType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::InstrEventType_enumtype>() {
  return ::XT::InstrEventType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OrderQuoteStatus_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OrderQuoteStatus_enumtype>() {
  return ::XT::OrderQuoteStatus_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OrderQuoteTsType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OrderQuoteTsType_enumtype>() {
  return ::XT::OrderQuoteTsType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::OrderQuoteReasonType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::OrderQuoteReasonType_enumtype>() {
  return ::XT::OrderQuoteReasonType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::CurrPrevTempType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::CurrPrevTempType_enumtype>() {
  return ::XT::CurrPrevTempType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::VolCurveParamType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::VolCurveParamType_enumtype>() {
  return ::XT::VolCurveParamType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::PyAT_OrderAction_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::PyAT_OrderAction_enumtype>() {
  return ::XT::PyAT_OrderAction_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::PyAT_OrderState_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::PyAT_OrderState_enumtype>() {
  return ::XT::PyAT_OrderState_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::PyAT_OrderType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::PyAT_OrderType_enumtype>() {
  return ::XT::PyAT_OrderType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::TagType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::TagType_enumtype>() {
  return ::XT::TagType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::YahooQuoteType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::YahooQuoteType_enumtype>() {
  return ::XT::YahooQuoteType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::YahooRangeType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::YahooRangeType_enumtype>() {
  return ::XT::YahooRangeType_enumtype_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_XTEnum_2eproto__INCLUDED
