// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XTData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "XTData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace XT {

namespace {

const ::google::protobuf::Descriptor* PBTagMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTagMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgMap_StrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PBTagMsgMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTagMsgMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTagMsgMap_StrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ApiPBTagMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApiPBTagMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagData_IntMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TagData_DoubleMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TagData_LongMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TagData_StrMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TagData_StrToStrMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TagData_NestedMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StringMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMapData_StrToStrMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TsRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Int64Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int64Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleIntParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleIntParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleFunctionParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleFunctionParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointDataMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointDataMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointDataMap_PointsmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PointDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveData_TagintmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CurveData_TagdoublemapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InstrSpecData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrSpecData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrSpecData_NamestrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StratCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StratCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StratCfgData_NamestrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InstrCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrCfgData_NamestrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InstrData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrData_TagdoublemapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InstrData_TagintmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FCCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FCCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FCCfgData_NamestrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FCData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FCData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FCData_TagdoublemapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FCData_TagintmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OCCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OCCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OCCfgData_NamestrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OCData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OCData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OCData_TagdoublemapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OCData_TagintmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PICfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PICfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PICfgData_NamestrmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PIData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PIData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PIData_TagdoublemapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PIData_TagintmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OrderMgrData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderMgrData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderMgrCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderMgrCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForQuoteMgrCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForQuoteMgrCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CfgData_StratcfgmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CfgData_PicfgmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CfgData_OccfgmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CfgData_FccfgmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CfgData_InstrcfgmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExchangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillStatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillStatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolumeOutlayPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolumeOutlayPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForQuoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForQuoteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolumeAmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolumeAmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PxVolume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PxVolume_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntPxHalfExposure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntPxHalfExposure_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntPxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntPxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntPxOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntPxOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntPxOrderInfo_Orderid2openszmapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HalfExposure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HalfExposure_reflection_ = NULL;
const ::google::protobuf::Descriptor* MktQuoteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MktQuoteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GreeksData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GreeksData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPnLData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPnLData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UPnLData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UPnLData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosGreeksData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosGreeksData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuoteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolatilityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolatilityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaqStatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaqStatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* XpStatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XpStatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrdersSzPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrdersSzPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderStatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderStatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BarInfoMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BarInfoMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* BarInfoMap_BarInfoMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentEventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentEventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* OHLCVData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OHLCVData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DateOHLCV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateOHLCV_reflection_ = NULL;
const ::google::protobuf::Descriptor* DateTimeOHLCV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateTimeOHLCV_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDXDayData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDXDayData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDXMinData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDXMinData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KCBPTagQuoteInfo10_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KCBPTagQuoteInfo10_reflection_ = NULL;
const ::google::protobuf::Descriptor* KCBPTagQuoteInfo5_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KCBPTagQuoteInfo5_reflection_ = NULL;
const ::google::protobuf::Descriptor* SinaQuoteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SinaQuoteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyAT_OrderExecutionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyAT_OrderExecutionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PyAT_OrderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PyAT_OrderData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_XTData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_XTData_2eproto() {
  protobuf_AddDesc_XTData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "XTData.proto");
  GOOGLE_CHECK(file != NULL);
  PBTagMsg_descriptor_ = file->message_type(0);
  static const int PBTagMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsg, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsg, msg_),
  };
  PBTagMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBTagMsg_descriptor_,
      PBTagMsg::default_instance_,
      PBTagMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBTagMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsg, _internal_metadata_),
      -1);
  PBMsg_descriptor_ = file->message_type(1);
  static const int PBMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, datastr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, cfgstr_),
  };
  PBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsg_descriptor_,
      PBMsg::default_instance_,
      PBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, _internal_metadata_),
      -1);
  PBMsgMap_descriptor_ = file->message_type(2);
  static const int PBMsgMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgMap, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgMap, strmap_),
  };
  PBMsgMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgMap_descriptor_,
      PBMsgMap::default_instance_,
      PBMsgMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBMsgMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgMap, _internal_metadata_),
      -1);
  PBMsgMap_StrmapEntry_descriptor_ = PBMsgMap_descriptor_->nested_type(0);
  PBTagMsgMap_descriptor_ = file->message_type(3);
  static const int PBTagMsgMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsgMap, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsgMap, strmap_),
  };
  PBTagMsgMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBTagMsgMap_descriptor_,
      PBTagMsgMap::default_instance_,
      PBTagMsgMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsgMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBTagMsgMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTagMsgMap, _internal_metadata_),
      -1);
  PBTagMsgMap_StrmapEntry_descriptor_ = PBTagMsgMap_descriptor_->nested_type(0);
  ApiPBTagMsg_descriptor_ = file->message_type(4);
  static const int ApiPBTagMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, last_),
  };
  ApiPBTagMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ApiPBTagMsg_descriptor_,
      ApiPBTagMsg::default_instance_,
      ApiPBTagMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ApiPBTagMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiPBTagMsg, _internal_metadata_),
      -1);
  TagMsg_descriptor_ = file->message_type(5);
  static const int TagMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, msg_),
  };
  TagMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TagMsg_descriptor_,
      TagMsg::default_instance_,
      TagMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(TagMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, _internal_metadata_),
      -1);
  TagData_descriptor_ = file->message_type(6);
  static const int TagData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, intmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, doublemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, longmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, strmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, strtostrmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, nestedmap_),
  };
  TagData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TagData_descriptor_,
      TagData::default_instance_,
      TagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TagData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagData, _internal_metadata_),
      -1);
  TagData_IntMapEntry_descriptor_ = TagData_descriptor_->nested_type(0);
  TagData_DoubleMapEntry_descriptor_ = TagData_descriptor_->nested_type(1);
  TagData_LongMapEntry_descriptor_ = TagData_descriptor_->nested_type(2);
  TagData_StrMapEntry_descriptor_ = TagData_descriptor_->nested_type(3);
  TagData_StrToStrMapEntry_descriptor_ = TagData_descriptor_->nested_type(4);
  TagData_NestedMapEntry_descriptor_ = TagData_descriptor_->nested_type(5);
  StringMapData_descriptor_ = file->message_type(7);
  static const int StringMapData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMapData, strtostrmap_),
  };
  StringMapData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringMapData_descriptor_,
      StringMapData::default_instance_,
      StringMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMapData, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringMapData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMapData, _internal_metadata_),
      -1);
  StringMapData_StrToStrMapEntry_descriptor_ = StringMapData_descriptor_->nested_type(0);
  TsRange_descriptor_ = file->message_type(8);
  static const int TsRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, begints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, endts_),
  };
  TsRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TsRange_descriptor_,
      TsRange::default_instance_,
      TsRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, _has_bits_[0]),
      -1,
      -1,
      sizeof(TsRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, _internal_metadata_),
      -1);
  SessionCfgData_descriptor_ = file->message_type(9);
  static const int SessionCfgData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, exchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, productids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, prevflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, endtime_),
  };
  SessionCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionCfgData_descriptor_,
      SessionCfgData::default_instance_,
      SessionCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(SessionCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCfgData, _internal_metadata_),
      -1);
  SessionInfo_descriptor_ = file->message_type(10);
  static const int SessionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, prevtradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, begints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, endts_),
  };
  SessionInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionInfo_descriptor_,
      SessionInfo::default_instance_,
      SessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SessionInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _internal_metadata_),
      -1);
  DoubleParam_descriptor_ = file->message_type(11);
  static const int DoubleParam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, curr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, name_),
  };
  DoubleParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoubleParam_descriptor_,
      DoubleParam::default_instance_,
      DoubleParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(DoubleParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleParam, _internal_metadata_),
      -1);
  IntParam_descriptor_ = file->message_type(12);
  static const int IntParam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, curr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, name_),
  };
  IntParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntParam_descriptor_,
      IntParam::default_instance_,
      IntParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(IntParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _internal_metadata_),
      -1);
  Int64Param_descriptor_ = file->message_type(13);
  static const int Int64Param_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, curr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, name_),
  };
  Int64Param_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Int64Param_descriptor_,
      Int64Param::default_instance_,
      Int64Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, _has_bits_[0]),
      -1,
      -1,
      sizeof(Int64Param),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Param, _internal_metadata_),
      -1);
  DoubleIntParams_descriptor_ = file->message_type(14);
  static const int DoubleIntParams_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleIntParams, doubleparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleIntParams, intparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleIntParams, name_),
  };
  DoubleIntParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoubleIntParams_descriptor_,
      DoubleIntParams::default_instance_,
      DoubleIntParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleIntParams, _has_bits_[0]),
      -1,
      -1,
      sizeof(DoubleIntParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleIntParams, _internal_metadata_),
      -1);
  DoubleFunctionParams_descriptor_ = file->message_type(15);
  static const int DoubleFunctionParams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleFunctionParams, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleFunctionParams, doubleparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleFunctionParams, intparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleFunctionParams, epsilon_),
  };
  DoubleFunctionParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoubleFunctionParams_descriptor_,
      DoubleFunctionParams::default_instance_,
      DoubleFunctionParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleFunctionParams, _has_bits_[0]),
      -1,
      -1,
      sizeof(DoubleFunctionParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleFunctionParams, _internal_metadata_),
      -1);
  PointData_descriptor_ = file->message_type(16);
  static const int PointData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, flag_),
  };
  PointData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointData_descriptor_,
      PointData::default_instance_,
      PointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, _internal_metadata_),
      -1);
  PointDataMap_descriptor_ = file->message_type(17);
  static const int PointDataMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDataMap, pointsmap_),
  };
  PointDataMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointDataMap_descriptor_,
      PointDataMap::default_instance_,
      PointDataMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDataMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointDataMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDataMap, _internal_metadata_),
      -1);
  PointDataMap_PointsmapEntry_descriptor_ = PointDataMap_descriptor_->nested_type(0);
  PointDataList_descriptor_ = file->message_type(18);
  static const int PointDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDataList, pointslist_),
  };
  PointDataList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointDataList_descriptor_,
      PointDataList::default_instance_,
      PointDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDataList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointDataList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDataList, _internal_metadata_),
      -1);
  CurveCfgData_descriptor_ = file->message_type(19);
  static const int CurveCfgData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, maxnoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, minstartnoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, roote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, funce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, gradnorme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, fitmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, weightmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, minweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, maxweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, minx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, maxx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, miny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, maxy_),
  };
  CurveCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurveCfgData_descriptor_,
      CurveCfgData::default_instance_,
      CurveCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CurveCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveCfgData, _internal_metadata_),
      -1);
  CurveData_descriptor_ = file->message_type(20);
  static const int CurveData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, fitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, fitfunccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, fitfuncvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, endcriteriatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, weightflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, fitts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, fitus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, currminw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, currmaxw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, tagintmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, tagdoublemap_),
  };
  CurveData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurveData_descriptor_,
      CurveData::default_instance_,
      CurveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CurveData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveData, _internal_metadata_),
      -1);
  CurveData_TagintmapEntry_descriptor_ = CurveData_descriptor_->nested_type(0);
  CurveData_TagdoublemapEntry_descriptor_ = CurveData_descriptor_->nested_type(1);
  InstrSpecData_descriptor_ = file->message_type(21);
  static const int InstrSpecData_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, expireintdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, callputtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, strikeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, contractmultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, tagdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, tradecurrencyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, securitytypestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, pxepsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, tickvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, int64pxtick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, int64pxpointvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, scaleint64todouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, scaledoubletoint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, concepts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, industries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, listintdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, productclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, deliveryyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, deliverymonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, maxmarketordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, minmarketordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, maxlimitordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, minlimitordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, positiondatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, closedealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, mortgagefunduserange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, exchangeproductid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, undlymultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, undlyproductid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, undlyinstrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, namestrmap_),
  };
  InstrSpecData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstrSpecData_descriptor_,
      InstrSpecData::default_instance_,
      InstrSpecData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, _has_bits_[0]),
      -1,
      -1,
      sizeof(InstrSpecData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrSpecData, _internal_metadata_),
      -1);
  InstrSpecData_NamestrmapEntry_descriptor_ = InstrSpecData_descriptor_->nested_type(0);
  StratCfgData_descriptor_ = file->message_type(22);
  static const int StratCfgData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, issim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, isnone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, prevtradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, currintdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, instrprefixes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, namestrmap_),
  };
  StratCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StratCfgData_descriptor_,
      StratCfgData::default_instance_,
      StratCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(StratCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StratCfgData, _internal_metadata_),
      -1);
  StratCfgData_NamestrmapEntry_descriptor_ = StratCfgData_descriptor_->nested_type(0);
  InstrCfgData_descriptor_ = file->message_type(23);
  static const int InstrCfgData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrCfgData, mdapi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrCfgData, trdapi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrCfgData, booklevels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrCfgData, mktrollingwindow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrCfgData, namestrmap_),
  };
  InstrCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstrCfgData_descriptor_,
      InstrCfgData::default_instance_,
      InstrCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(InstrCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrCfgData, _internal_metadata_),
      -1);
  InstrCfgData_NamestrmapEntry_descriptor_ = InstrCfgData_descriptor_->nested_type(0);
  InstrData_descriptor_ = file->message_type(24);
  static const int InstrData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrData, tagdoublemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrData, tagintmap_),
  };
  InstrData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstrData_descriptor_,
      InstrData::default_instance_,
      InstrData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrData, _has_bits_[0]),
      -1,
      -1,
      sizeof(InstrData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrData, _internal_metadata_),
      -1);
  InstrData_TagdoublemapEntry_descriptor_ = InstrData_descriptor_->nested_type(0);
  InstrData_TagintmapEntry_descriptor_ = InstrData_descriptor_->nested_type(1);
  FCCfgData_descriptor_ = file->message_type(25);
  static const int FCCfgData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCCfgData, deltanormmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCCfgData, namestrmap_),
  };
  FCCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FCCfgData_descriptor_,
      FCCfgData::default_instance_,
      FCCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(FCCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCCfgData, _internal_metadata_),
      -1);
  FCCfgData_NamestrmapEntry_descriptor_ = FCCfgData_descriptor_->nested_type(0);
  FCData_descriptor_ = file->message_type(26);
  static const int FCData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCData, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCData, tagdoublemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCData, tagintmap_),
  };
  FCData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FCData_descriptor_,
      FCData::default_instance_,
      FCData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCData, _has_bits_[0]),
      -1,
      -1,
      sizeof(FCData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCData, _internal_metadata_),
      -1);
  FCData_TagdoublemapEntry_descriptor_ = FCData_descriptor_->nested_type(0);
  FCData_TagintmapEntry_descriptor_ = FCData_descriptor_->nested_type(1);
  OCCfgData_descriptor_ = file->message_type(27);
  static const int OCCfgData_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, hedginginstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, pxundlyinstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlyinstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, pxundlyratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlybiasmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlybiasmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlybiascountmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlybiasrollingsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlybiasrollingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlybigmovethresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, minimpvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, maximpvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, quotingflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, rspflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, hedgingflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, fitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, fitmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, fitthreshticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, joinhedgethresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, hithedgethresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, safehedgedistticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, hedgedistticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, maxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, ocmaxdeltanorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, octgtdeltanorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, ocmaxvega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, octgtvega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, quotepxmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, maxhitticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, rcp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, rrp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, minretreatratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, maxretreatratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, leanonmktratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, pxchgthreshticksmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, pxchgthreshticksmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, pxchgthreshratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, minquotesz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, minrspsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlychgrollingsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, undlychgrollingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, vcrrollingsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, vcrrollingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, namestrmap_),
  };
  OCCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OCCfgData_descriptor_,
      OCCfgData::default_instance_,
      OCCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(OCCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCfgData, _internal_metadata_),
      -1);
  OCCfgData_NamestrmapEntry_descriptor_ = OCCfgData_descriptor_->nested_type(0);
  OCData_descriptor_ = file->message_type(28);
  static const int OCData_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, expiredate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, monthseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, prevtradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, atmindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, atmstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, atmintstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, atmstraddlevega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, undlybias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, lastundlyquotets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, lastoptionquotets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocrriskpnltdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocuriskpnltdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocrriskpnlytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocuriskpnlytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, xscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, pxprecision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, exercisetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, minoptionpxtick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocbuyvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocsellvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocbuyamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ocsellamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, dte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, tte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, nstrikes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, ncalls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, nputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, tagdoublemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, tagintmap_),
  };
  OCData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OCData_descriptor_,
      OCData::default_instance_,
      OCData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, _has_bits_[0]),
      -1,
      -1,
      sizeof(OCData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCData, _internal_metadata_),
      -1);
  OCData_TagdoublemapEntry_descriptor_ = OCData_descriptor_->nested_type(0);
  OCData_TagintmapEntry_descriptor_ = OCData_descriptor_->nested_type(1);
  PICfgData_descriptor_ = file->message_type(29);
  static const int PICfgData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICfgData, deltanormmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICfgData, namestrmap_),
  };
  PICfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PICfgData_descriptor_,
      PICfgData::default_instance_,
      PICfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PICfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICfgData, _internal_metadata_),
      -1);
  PICfgData_NamestrmapEntry_descriptor_ = PICfgData_descriptor_->nested_type(0);
  PIData_descriptor_ = file->message_type(30);
  static const int PIData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, prevtradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, currmktts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, currsessionidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, currsessionbegints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, currsessionendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, tagdoublemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, tagintmap_),
  };
  PIData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PIData_descriptor_,
      PIData::default_instance_,
      PIData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PIData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIData, _internal_metadata_),
      -1);
  PIData_TagdoublemapEntry_descriptor_ = PIData_descriptor_->nested_type(0);
  PIData_TagintmapEntry_descriptor_ = PIData_descriptor_->nested_type(1);
  OrderMgrData_descriptor_ = file->message_type(31);
  static const int OrderMgrData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, orderpoolsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, quotepoolsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numorderssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numorderssentrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numorderscxlsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numorderscxlrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numquotessent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numquotessentrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numquotescxlsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, numquotescxlrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, tssuspend_),
  };
  OrderMgrData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrderMgrData_descriptor_,
      OrderMgrData::default_instance_,
      OrderMgrData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrderMgrData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrData, _internal_metadata_),
      -1);
  OrderMgrCfgData_descriptor_ = file->message_type(32);
  static const int OrderMgrCfgData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, orderpoolszstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, orderpoolszmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, quotepoolszstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, quotepoolszmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, maxreqpersec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, maxfemasreqpersec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, maxorderssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, maxorderscxled_),
  };
  OrderMgrCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrderMgrCfgData_descriptor_,
      OrderMgrCfgData::default_instance_,
      OrderMgrCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrderMgrCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMgrCfgData, _internal_metadata_),
      -1);
  ForQuoteMgrCfgData_descriptor_ = file->message_type(33);
  static const int ForQuoteMgrCfgData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteMgrCfgData, rspwaitingseconds_),
  };
  ForQuoteMgrCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForQuoteMgrCfgData_descriptor_,
      ForQuoteMgrCfgData::default_instance_,
      ForQuoteMgrCfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteMgrCfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ForQuoteMgrCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteMgrCfgData, _internal_metadata_),
      -1);
  CfgData_descriptor_ = file->message_type(34);
  static const int CfgData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgData, stratcfgmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgData, picfgmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgData, occfgmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgData, fccfgmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgData, instrcfgmap_),
  };
  CfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CfgData_descriptor_,
      CfgData::default_instance_,
      CfgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgData, _internal_metadata_),
      -1);
  CfgData_StratcfgmapEntry_descriptor_ = CfgData_descriptor_->nested_type(0);
  CfgData_PicfgmapEntry_descriptor_ = CfgData_descriptor_->nested_type(1);
  CfgData_OccfgmapEntry_descriptor_ = CfgData_descriptor_->nested_type(2);
  CfgData_FccfgmapEntry_descriptor_ = CfgData_descriptor_->nested_type(3);
  CfgData_InstrcfgmapEntry_descriptor_ = CfgData_descriptor_->nested_type(4);
  ExchangeInfo_descriptor_ = file->message_type(35);
  static const int ExchangeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfo, exchangetype_),
  };
  ExchangeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExchangeInfo_descriptor_,
      ExchangeInfo::default_instance_,
      ExchangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExchangeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfo, _internal_metadata_),
      -1);
  FillInfo_descriptor_ = file->message_type(36);
  static const int FillInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, bstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, ocflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, flag_),
  };
  FillInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FillInfo_descriptor_,
      FillInfo::default_instance_,
      FillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(FillInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillInfo, _internal_metadata_),
      -1);
  FillStatData_descriptor_ = file->message_type(37);
  static const int FillStatData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, buypxvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, sellpxvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, buyvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, sellvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, rpxpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, poscost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, netpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, netposprev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, netposnew_),
  };
  FillStatData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FillStatData_descriptor_,
      FillStatData::default_instance_,
      FillStatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, _has_bits_[0]),
      -1,
      -1,
      sizeof(FillStatData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillStatData, _internal_metadata_),
      -1);
  VolumeOutlayPair_descriptor_ = file->message_type(38);
  static const int VolumeOutlayPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeOutlayPair, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeOutlayPair, pxvolume_),
  };
  VolumeOutlayPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VolumeOutlayPair_descriptor_,
      VolumeOutlayPair::default_instance_,
      VolumeOutlayPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeOutlayPair, _has_bits_[0]),
      -1,
      -1,
      sizeof(VolumeOutlayPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeOutlayPair, _internal_metadata_),
      -1);
  OrderInfo_descriptor_ = file->message_type(39);
  static const int OrderInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, qid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, bstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, origsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, opensz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, filledsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, trdapi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, tssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, tssentrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, tscnf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, tscxlsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, tscxlrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, tsfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, ocflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, oqrtypemask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, idx_),
  };
  OrderInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrderInfo_descriptor_,
      OrderInfo::default_instance_,
      OrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrderInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _internal_metadata_),
      -1);
  QuoteInfo_descriptor_ = file->message_type(40);
  static const int QuoteInfo_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, qid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, bidorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, askorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, bidocflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, askocflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, oqrtypemask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, quotesysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, bidordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, askordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, forquotesysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, forquotetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, quotelocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, bidpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, askpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, bidsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, asksz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, bidfilledsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, askfilledsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tssentrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tscnf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tscxlsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tscxlrejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tsfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tsbidcxled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tsaskcxled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tsbidallfilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, tsaskallfilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, reasonflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, mktbidpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, mktaskpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, netpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, ocposdeltanorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, ocposvega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, vega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, idx_),
  };
  QuoteInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuoteInfo_descriptor_,
      QuoteInfo::default_instance_,
      QuoteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(QuoteInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfo, _internal_metadata_),
      -1);
  ForQuoteInfo_descriptor_ = file->message_type(41);
  static const int ForQuoteInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, forquotesysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, forquotetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, rcvts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, rspts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, currqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, rspstatus_),
  };
  ForQuoteInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForQuoteInfo_descriptor_,
      ForQuoteInfo::default_instance_,
      ForQuoteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ForQuoteInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForQuoteInfo, _internal_metadata_),
      -1);
  VolumeAmount_descriptor_ = file->message_type(42);
  static const int VolumeAmount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeAmount, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeAmount, amount_),
  };
  VolumeAmount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VolumeAmount_descriptor_,
      VolumeAmount::default_instance_,
      VolumeAmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeAmount, _has_bits_[0]),
      -1,
      -1,
      sizeof(VolumeAmount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeAmount, _internal_metadata_),
      -1);
  PxVolume_descriptor_ = file->message_type(43);
  static const int PxVolume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PxVolume, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PxVolume, volume_),
  };
  PxVolume_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PxVolume_descriptor_,
      PxVolume::default_instance_,
      PxVolume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PxVolume, _has_bits_[0]),
      -1,
      -1,
      sizeof(PxVolume),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PxVolume, _internal_metadata_),
      -1);
  IntPxHalfExposure_descriptor_ = file->message_type(44);
  static const int IntPxHalfExposure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxHalfExposure, intpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxHalfExposure, workingnumorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxHalfExposure, workingsz_),
  };
  IntPxHalfExposure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntPxHalfExposure_descriptor_,
      IntPxHalfExposure::default_instance_,
      IntPxHalfExposure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxHalfExposure, _has_bits_[0]),
      -1,
      -1,
      sizeof(IntPxHalfExposure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxHalfExposure, _internal_metadata_),
      -1);
  IntPxInfo_descriptor_ = file->message_type(45);
  static const int IntPxInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, intpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, mktbstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, mktsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, mktnumorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, mktbuyvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, mktbuyamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, mktsellvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, mktsellamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, buyvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, buyamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, sellvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, sellamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, buynumorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, buysz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, sellnumorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, sellsz_),
  };
  IntPxInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntPxInfo_descriptor_,
      IntPxInfo::default_instance_,
      IntPxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(IntPxInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxInfo, _internal_metadata_),
      -1);
  IntPxOrderInfo_descriptor_ = file->message_type(46);
  static const int IntPxOrderInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxOrderInfo, intpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxOrderInfo, workingnumorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxOrderInfo, workingsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxOrderInfo, orderid2openszmap_),
  };
  IntPxOrderInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntPxOrderInfo_descriptor_,
      IntPxOrderInfo::default_instance_,
      IntPxOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxOrderInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(IntPxOrderInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPxOrderInfo, _internal_metadata_),
      -1);
  IntPxOrderInfo_Orderid2openszmapEntry_descriptor_ = IntPxOrderInfo_descriptor_->nested_type(0);
  HalfExposure_descriptor_ = file->message_type(47);
  static const int HalfExposure_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, workingnumorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, workingsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, volumesession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, amountsession_),
  };
  HalfExposure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HalfExposure_descriptor_,
      HalfExposure::default_instance_,
      HalfExposure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, _has_bits_[0]),
      -1,
      -1,
      sizeof(HalfExposure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfExposure, _internal_metadata_),
      -1);
  MktQuoteData_descriptor_ = file->message_type(48);
  static const int MktQuoteData_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, exchangets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, recvts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, lastpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, lastts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, totvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, totamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, totoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidpx0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, askpx0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidsz0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, asksz0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidpx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, askpx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidsz1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, asksz1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidpx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, askpx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidsz2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, asksz2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidpx3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, askpx3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidsz3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, asksz3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidpx4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, askpx4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, bidsz4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, asksz4_),
  };
  MktQuoteData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MktQuoteData_descriptor_,
      MktQuoteData::default_instance_,
      MktQuoteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, _has_bits_[0]),
      -1,
      -1,
      sizeof(MktQuoteData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktQuoteData, _internal_metadata_),
      -1);
  GreeksData_descriptor_ = file->message_type(49);
  static const int GreeksData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GreeksData, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GreeksData, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GreeksData, vega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GreeksData, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GreeksData, rho_),
  };
  GreeksData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GreeksData_descriptor_,
      GreeksData::default_instance_,
      GreeksData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GreeksData, _has_bits_[0]),
      -1,
      -1,
      sizeof(GreeksData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GreeksData, _internal_metadata_),
      -1);
  PosData_descriptor_ = file->message_type(50);
  static const int PosData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosData, netpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosData, netposprev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosData, netposnew_),
  };
  PosData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PosData_descriptor_,
      PosData::default_instance_,
      PosData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PosData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosData, _internal_metadata_),
      -1);
  RPnLData_descriptor_ = file->message_type(51);
  static const int RPnLData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPnLData, rpxpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPnLData, rpnl_),
  };
  RPnLData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RPnLData_descriptor_,
      RPnLData::default_instance_,
      RPnLData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPnLData, _has_bits_[0]),
      -1,
      -1,
      sizeof(RPnLData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPnLData, _internal_metadata_),
      -1);
  UPnLData_descriptor_ = file->message_type(52);
  static const int UPnLData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPnLData, upxpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPnLData, upnl_),
  };
  UPnLData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UPnLData_descriptor_,
      UPnLData::default_instance_,
      UPnLData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPnLData, _has_bits_[0]),
      -1,
      -1,
      sizeof(UPnLData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPnLData, _internal_metadata_),
      -1);
  PosGreeksData_descriptor_ = file->message_type(53);
  static const int PosGreeksData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, posdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, posdeltanorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, posgamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, posgammanorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, posvega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, posveganorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, postheta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, posrho_),
  };
  PosGreeksData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PosGreeksData_descriptor_,
      PosGreeksData::default_instance_,
      PosGreeksData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PosGreeksData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosGreeksData, _internal_metadata_),
      -1);
  QuoteData_descriptor_ = file->message_type(54);
  static const int QuoteData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, theopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, quotepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, quotebidpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, quoteaskpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, quotebidsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, quoteasksz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, riskpx_),
  };
  QuoteData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuoteData_descriptor_,
      QuoteData::default_instance_,
      QuoteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, _has_bits_[0]),
      -1,
      -1,
      sizeof(QuoteData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, _internal_metadata_),
      -1);
  VolatilityData_descriptor_ = file->message_type(55);
  static const int VolatilityData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, impvolbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, impvolask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, impvolmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, quotevol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, riskvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, fittedvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, prevsettlevol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, prevclosevol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, settlevol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, avgvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, histvol_),
  };
  VolatilityData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VolatilityData_descriptor_,
      VolatilityData::default_instance_,
      VolatilityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, _has_bits_[0]),
      -1,
      -1,
      sizeof(VolatilityData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatilityData, _internal_metadata_),
      -1);
  TaqStatData_descriptor_ = file->message_type(56);
  static const int TaqStatData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, numbookupdates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, bestszchged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, bestpxchged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, midpxchged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapoichg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapavgpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapbuyvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapsellvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapbsadiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapflipups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, snapflipdns_),
  };
  TaqStatData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaqStatData_descriptor_,
      TaqStatData::default_instance_,
      TaqStatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TaqStatData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaqStatData, _internal_metadata_),
      -1);
  XpStatData_descriptor_ = file->message_type(57);
  static const int XpStatData_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, netpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, netposprev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, netposnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, rpxpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, rpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, upxpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, upnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, rpxpnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, rpnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, upxpnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, upnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, utheopxpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, utheopnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, uriskpxpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, uriskpnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, utheopxpnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, utheopnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, uriskpxpnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, uriskpnlsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buysz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyordersopenytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyszopenytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellordersopenytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellszopenytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyorderscloseytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyszcloseytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellorderscloseytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellszcloseytd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyordersopentdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyszopentdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellordersopentdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellszopentdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyordersclosetdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, buyszclosetdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellordersclosetdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, sellszclosetdy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, orderssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, orderscxled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, quotessent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, quotescxled_),
  };
  XpStatData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      XpStatData_descriptor_,
      XpStatData::default_instance_,
      XpStatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, _has_bits_[0]),
      -1,
      -1,
      sizeof(XpStatData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpStatData, _internal_metadata_),
      -1);
  OrdersSzPair_descriptor_ = file->message_type(58);
  static const int OrdersSzPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersSzPair, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersSzPair, sz_),
  };
  OrdersSzPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrdersSzPair_descriptor_,
      OrdersSzPair::default_instance_,
      OrdersSzPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersSzPair, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrdersSzPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersSzPair, _internal_metadata_),
      -1);
  OrderStatData_descriptor_ = file->message_type(59);
  static const int OrderStatData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, orderssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, orderscxled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, quotessent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, quotescxled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, workingbuyorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, workingsellorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, workingbuysz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, workingsellsz_),
  };
  OrderStatData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrderStatData_descriptor_,
      OrderStatData::default_instance_,
      OrderStatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrderStatData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatData, _internal_metadata_),
      -1);
  DayData_descriptor_ = file->message_type(60);
  static const int DayData_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, prevtradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, hasprevsettle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, prevsettlepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, hasprevclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, prevclosepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, prevtotvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, prevtotamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, prevtotoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, haslimitpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, lowerlimitpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, upperlimitpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, highpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, lowpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, totvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, totamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, totoi_),
  };
  DayData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DayData_descriptor_,
      DayData::default_instance_,
      DayData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, _has_bits_[0]),
      -1,
      -1,
      sizeof(DayData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayData, _internal_metadata_),
      -1);
  BarInfo_descriptor_ = file->message_type(61);
  static const int BarInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, begindt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, enddt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, highpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, lowpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, oichg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, bsvoldiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, bsadiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, flipups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, flipdns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, tagdata_),
  };
  BarInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BarInfo_descriptor_,
      BarInfo::default_instance_,
      BarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BarInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, _internal_metadata_),
      -1);
  BarInfoMap_descriptor_ = file->message_type(62);
  static const int BarInfoMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoMap, barinfomap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoMap, tagdata_),
  };
  BarInfoMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BarInfoMap_descriptor_,
      BarInfoMap::default_instance_,
      BarInfoMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(BarInfoMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoMap, _internal_metadata_),
      -1);
  BarInfoMap_BarInfoMapEntry_descriptor_ = BarInfoMap_descriptor_->nested_type(0);
  ProductInfo_descriptor_ = file->message_type(63);
  static const int ProductInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, underlyingsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, contractmultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, tagdata_),
  };
  ProductInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProductInfo_descriptor_,
      ProductInfo::default_instance_,
      ProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProductInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _internal_metadata_),
      -1);
  InstrumentInfo_descriptor_ = file->message_type(64);
  static const int InstrumentInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, expireintdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, callputtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, strikeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, contractmultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, tagdata_),
  };
  InstrumentInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstrumentInfo_descriptor_,
      InstrumentInfo::default_instance_,
      InstrumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(InstrumentInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, _internal_metadata_),
      -1);
  InstrumentEventInfo_descriptor_ = file->message_type(65);
  static const int InstrumentEventInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentEventInfo, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentEventInfo, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentEventInfo, orderid_),
  };
  InstrumentEventInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstrumentEventInfo_descriptor_,
      InstrumentEventInfo::default_instance_,
      InstrumentEventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentEventInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(InstrumentEventInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentEventInfo, _internal_metadata_),
      -1);
  TAParams_descriptor_ = file->message_type(66);
  static const int TAParams_offsets_[56] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, smaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, smamidperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, smafastperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, smaslowperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, emaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, emamidperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, emafastperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, emaslowperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, atrperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, rsiperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, rsioverbought_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, rsioversold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, mfiperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, cciperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, ccioverbought_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, ccioversold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, ccimaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, adxperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, macdmatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, macdfastperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, macdslowperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, macdsignalperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, macdhistmaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, bbperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, volbbperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, bsvdbbperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, oichgbbperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, bbmaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, volbbmaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, bsvdbbmaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, oichgbbmaperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarfastaccinit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarfastaccstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarfastaccmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarmidaccinit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarmidaccstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarmidaccmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarslowaccinit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarslowaccstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, sarslowaccmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, bbsardist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, atrsardist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, bbmidslopeperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, kbperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, slowkperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, slowdperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, fastkperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, fastdperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, dmiatrperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, dmiadxperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, matype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, maperiod1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, maperiod2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, maperiod3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, maperiod4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, maperiod5_),
  };
  TAParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TAParams_descriptor_,
      TAParams::default_instance_,
      TAParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, _has_bits_[0]),
      -1,
      -1,
      sizeof(TAParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAParams, _internal_metadata_),
      -1);
  OHLCVData_descriptor_ = file->message_type(67);
  static const int OHLCVData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OHLCVData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OHLCVData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OHLCVData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OHLCVData, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OHLCVData, volume_),
  };
  OHLCVData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OHLCVData_descriptor_,
      OHLCVData::default_instance_,
      OHLCVData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OHLCVData, _has_bits_[0]),
      -1,
      -1,
      sizeof(OHLCVData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OHLCVData, _internal_metadata_),
      -1);
  DateOHLCV_descriptor_ = file->message_type(68);
  static const int DateOHLCV_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, volume_),
  };
  DateOHLCV_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DateOHLCV_descriptor_,
      DateOHLCV::default_instance_,
      DateOHLCV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, _has_bits_[0]),
      -1,
      -1,
      sizeof(DateOHLCV),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateOHLCV, _internal_metadata_),
      -1);
  DateTimeOHLCV_descriptor_ = file->message_type(69);
  static const int DateTimeOHLCV_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, volume_),
  };
  DateTimeOHLCV_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DateTimeOHLCV_descriptor_,
      DateTimeOHLCV::default_instance_,
      DateTimeOHLCV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, _has_bits_[0]),
      -1,
      -1,
      sizeof(DateTimeOHLCV),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeOHLCV, _internal_metadata_),
      -1);
  TDXDayData_descriptor_ = file->message_type(70);
  static const int TDXDayData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, reserve_),
  };
  TDXDayData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TDXDayData_descriptor_,
      TDXDayData::default_instance_,
      TDXDayData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TDXDayData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXDayData, _internal_metadata_),
      -1);
  TDXMinData_descriptor_ = file->message_type(71);
  static const int TDXMinData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, reserve_),
  };
  TDXMinData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TDXMinData_descriptor_,
      TDXMinData::default_instance_,
      TDXMinData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TDXMinData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDXMinData, _internal_metadata_),
      -1);
  KCBPTagQuoteInfo10_descriptor_ = file->message_type(72);
  static const int KCBPTagQuoteInfo10_offsets_[64] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, cmarket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, szstkcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, szstkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbcloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbopenprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dblastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbhighprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dblowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbmatchqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbmatchamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbmaxrisevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbmaxdownvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbavgprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbbuyprice10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbuyvolume10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsaleprice10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nsalevolume10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, cproductclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, npreopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbsettprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbpresettprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, dbftcloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, cstopflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nbusidate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, nupdatemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, szreserved_),
  };
  KCBPTagQuoteInfo10_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KCBPTagQuoteInfo10_descriptor_,
      KCBPTagQuoteInfo10::default_instance_,
      KCBPTagQuoteInfo10_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, _has_bits_[0]),
      -1,
      -1,
      sizeof(KCBPTagQuoteInfo10),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo10, _internal_metadata_),
      -1);
  KCBPTagQuoteInfo5_descriptor_ = file->message_type(73);
  static const int KCBPTagQuoteInfo5_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, cmarket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, szstkcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, szstkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, cproductclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, ntradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, npreopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbpresettprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbopenprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbupperlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dblowerlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbsettprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbcloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, ctpbz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nupdatemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbmatchqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbmatchamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dblastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbavgprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbhighprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dblowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbsaleprice0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nsalevolume0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbbuyprice0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nbuyvolume0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbsaleprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nsalevolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbbuyprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nbuyvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbsaleprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nsalevolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbbuyprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nbuyvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbsaleprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nsalevolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbbuyprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nbuyvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbsaleprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nsalevolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, dbbuyprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, nbuyvolume4_),
  };
  KCBPTagQuoteInfo5_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KCBPTagQuoteInfo5_descriptor_,
      KCBPTagQuoteInfo5::default_instance_,
      KCBPTagQuoteInfo5_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, _has_bits_[0]),
      -1,
      -1,
      sizeof(KCBPTagQuoteInfo5),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KCBPTagQuoteInfo5, _internal_metadata_),
      -1);
  SinaQuoteData_descriptor_ = file->message_type(74);
  static const int SinaQuoteData_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, instrumentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, timestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, dtotvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, lastpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, highpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, lowpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, bidvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, askvolume5_),
  };
  SinaQuoteData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SinaQuoteData_descriptor_,
      SinaQuoteData::default_instance_,
      SinaQuoteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, _has_bits_[0]),
      -1,
      -1,
      sizeof(SinaQuoteData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinaQuoteData, _internal_metadata_),
      -1);
  PyAT_OrderExecutionInfo_descriptor_ = file->message_type(75);
  static const int PyAT_OrderExecutionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderExecutionInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderExecutionInfo, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderExecutionInfo, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderExecutionInfo, filldatetime_),
  };
  PyAT_OrderExecutionInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PyAT_OrderExecutionInfo_descriptor_,
      PyAT_OrderExecutionInfo::default_instance_,
      PyAT_OrderExecutionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderExecutionInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PyAT_OrderExecutionInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderExecutionInfo, _internal_metadata_),
      -1);
  PyAT_OrderData_descriptor_ = file->message_type(76);
  static const int PyAT_OrderData_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, orderaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, filledsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, avgfillprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, goodtillcanceled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, commissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, allornone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, orderstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, submitdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, executionprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, executionquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, executioncommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, executiondatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, xtoid_),
  };
  PyAT_OrderData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PyAT_OrderData_descriptor_,
      PyAT_OrderData::default_instance_,
      PyAT_OrderData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PyAT_OrderData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PyAT_OrderData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_XTData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBTagMsg_descriptor_, &PBTagMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsg_descriptor_, &PBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgMap_descriptor_, &PBMsgMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PBMsgMap_StrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                PBMsgMap_StrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBTagMsgMap_descriptor_, &PBTagMsgMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PBTagMsgMap_StrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                PBTagMsgMap_StrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ApiPBTagMsg_descriptor_, &ApiPBTagMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TagMsg_descriptor_, &TagMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TagData_descriptor_, &TagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagData_IntMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                TagData_IntMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagData_DoubleMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                TagData_DoubleMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagData_LongMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                TagData_LongMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagData_StrMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TagData_StrMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagData_StrToStrMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TagData_StrToStrMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagData_NestedMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::XT::TagData,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TagData_NestedMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringMapData_descriptor_, &StringMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StringMapData_StrToStrMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                StringMapData_StrToStrMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TsRange_descriptor_, &TsRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionCfgData_descriptor_, &SessionCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionInfo_descriptor_, &SessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoubleParam_descriptor_, &DoubleParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntParam_descriptor_, &IntParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Int64Param_descriptor_, &Int64Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoubleIntParams_descriptor_, &DoubleIntParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoubleFunctionParams_descriptor_, &DoubleFunctionParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointData_descriptor_, &PointData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointDataMap_descriptor_, &PointDataMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PointDataMap_PointsmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::XT::PointData,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                PointDataMap_PointsmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointDataList_descriptor_, &PointDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurveCfgData_descriptor_, &CurveCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurveData_descriptor_, &CurveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CurveData_TagintmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                CurveData_TagintmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CurveData_TagdoublemapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                CurveData_TagdoublemapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstrSpecData_descriptor_, &InstrSpecData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        InstrSpecData_NamestrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                InstrSpecData_NamestrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StratCfgData_descriptor_, &StratCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StratCfgData_NamestrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                StratCfgData_NamestrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstrCfgData_descriptor_, &InstrCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        InstrCfgData_NamestrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                InstrCfgData_NamestrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstrData_descriptor_, &InstrData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        InstrData_TagdoublemapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                InstrData_TagdoublemapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        InstrData_TagintmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                InstrData_TagintmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FCCfgData_descriptor_, &FCCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FCCfgData_NamestrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                FCCfgData_NamestrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FCData_descriptor_, &FCData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FCData_TagdoublemapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                FCData_TagdoublemapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FCData_TagintmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                FCData_TagintmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OCCfgData_descriptor_, &OCCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        OCCfgData_NamestrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                OCCfgData_NamestrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OCData_descriptor_, &OCData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        OCData_TagdoublemapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                OCData_TagdoublemapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        OCData_TagintmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                OCData_TagintmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PICfgData_descriptor_, &PICfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PICfgData_NamestrmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                PICfgData_NamestrmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PIData_descriptor_, &PIData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PIData_TagdoublemapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                PIData_TagdoublemapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PIData_TagintmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                PIData_TagintmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrderMgrData_descriptor_, &OrderMgrData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrderMgrCfgData_descriptor_, &OrderMgrCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForQuoteMgrCfgData_descriptor_, &ForQuoteMgrCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CfgData_descriptor_, &CfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CfgData_StratcfgmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::XT::StratCfgData,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CfgData_StratcfgmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CfgData_PicfgmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::XT::PICfgData,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CfgData_PicfgmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CfgData_OccfgmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::XT::OCCfgData,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CfgData_OccfgmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CfgData_FccfgmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::XT::FCCfgData,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CfgData_FccfgmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CfgData_InstrcfgmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::XT::InstrCfgData,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CfgData_InstrcfgmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExchangeInfo_descriptor_, &ExchangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FillInfo_descriptor_, &FillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FillStatData_descriptor_, &FillStatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VolumeOutlayPair_descriptor_, &VolumeOutlayPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrderInfo_descriptor_, &OrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuoteInfo_descriptor_, &QuoteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForQuoteInfo_descriptor_, &ForQuoteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VolumeAmount_descriptor_, &VolumeAmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PxVolume_descriptor_, &PxVolume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntPxHalfExposure_descriptor_, &IntPxHalfExposure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntPxInfo_descriptor_, &IntPxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntPxOrderInfo_descriptor_, &IntPxOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        IntPxOrderInfo_Orderid2openszmapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                IntPxOrderInfo_Orderid2openszmapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HalfExposure_descriptor_, &HalfExposure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MktQuoteData_descriptor_, &MktQuoteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GreeksData_descriptor_, &GreeksData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PosData_descriptor_, &PosData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RPnLData_descriptor_, &RPnLData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UPnLData_descriptor_, &UPnLData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PosGreeksData_descriptor_, &PosGreeksData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuoteData_descriptor_, &QuoteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VolatilityData_descriptor_, &VolatilityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaqStatData_descriptor_, &TaqStatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      XpStatData_descriptor_, &XpStatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrdersSzPair_descriptor_, &OrdersSzPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrderStatData_descriptor_, &OrderStatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DayData_descriptor_, &DayData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BarInfo_descriptor_, &BarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BarInfoMap_descriptor_, &BarInfoMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        BarInfoMap_BarInfoMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::XT::BarInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                BarInfoMap_BarInfoMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProductInfo_descriptor_, &ProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstrumentInfo_descriptor_, &InstrumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstrumentEventInfo_descriptor_, &InstrumentEventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TAParams_descriptor_, &TAParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OHLCVData_descriptor_, &OHLCVData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DateOHLCV_descriptor_, &DateOHLCV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DateTimeOHLCV_descriptor_, &DateTimeOHLCV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TDXDayData_descriptor_, &TDXDayData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TDXMinData_descriptor_, &TDXMinData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KCBPTagQuoteInfo10_descriptor_, &KCBPTagQuoteInfo10::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KCBPTagQuoteInfo5_descriptor_, &KCBPTagQuoteInfo5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SinaQuoteData_descriptor_, &SinaQuoteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PyAT_OrderExecutionInfo_descriptor_, &PyAT_OrderExecutionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PyAT_OrderData_descriptor_, &PyAT_OrderData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_XTData_2eproto() {
  delete PBTagMsg::default_instance_;
  delete PBTagMsg_reflection_;
  delete PBMsg::default_instance_;
  delete PBMsg_reflection_;
  delete PBMsgMap::default_instance_;
  delete PBMsgMap_reflection_;
  delete PBTagMsgMap::default_instance_;
  delete PBTagMsgMap_reflection_;
  delete ApiPBTagMsg::default_instance_;
  delete ApiPBTagMsg_reflection_;
  delete TagMsg::default_instance_;
  delete TagMsg_reflection_;
  delete TagData::default_instance_;
  delete TagData_reflection_;
  delete StringMapData::default_instance_;
  delete StringMapData_reflection_;
  delete TsRange::default_instance_;
  delete TsRange_reflection_;
  delete SessionCfgData::default_instance_;
  delete SessionCfgData_reflection_;
  delete SessionCfgData::_default_begintime_;
  delete SessionCfgData::_default_endtime_;
  delete SessionInfo::default_instance_;
  delete SessionInfo_reflection_;
  delete DoubleParam::default_instance_;
  delete DoubleParam_reflection_;
  delete IntParam::default_instance_;
  delete IntParam_reflection_;
  delete Int64Param::default_instance_;
  delete Int64Param_reflection_;
  delete DoubleIntParams::default_instance_;
  delete DoubleIntParams_reflection_;
  delete DoubleFunctionParams::default_instance_;
  delete DoubleFunctionParams_reflection_;
  delete PointData::default_instance_;
  delete PointData_reflection_;
  delete PointDataMap::default_instance_;
  delete PointDataMap_reflection_;
  delete PointDataList::default_instance_;
  delete PointDataList_reflection_;
  delete CurveCfgData::default_instance_;
  delete CurveCfgData_reflection_;
  delete CurveData::default_instance_;
  delete CurveData_reflection_;
  delete InstrSpecData::default_instance_;
  delete InstrSpecData_reflection_;
  delete StratCfgData::default_instance_;
  delete StratCfgData_reflection_;
  delete StratCfgData::_default_name_;
  delete InstrCfgData::default_instance_;
  delete InstrCfgData_reflection_;
  delete InstrData::default_instance_;
  delete InstrData_reflection_;
  delete FCCfgData::default_instance_;
  delete FCCfgData_reflection_;
  delete FCData::default_instance_;
  delete FCData_reflection_;
  delete OCCfgData::default_instance_;
  delete OCCfgData_reflection_;
  delete OCData::default_instance_;
  delete OCData_reflection_;
  delete PICfgData::default_instance_;
  delete PICfgData_reflection_;
  delete PIData::default_instance_;
  delete PIData_reflection_;
  delete OrderMgrData::default_instance_;
  delete OrderMgrData_reflection_;
  delete OrderMgrCfgData::default_instance_;
  delete OrderMgrCfgData_reflection_;
  delete ForQuoteMgrCfgData::default_instance_;
  delete ForQuoteMgrCfgData_reflection_;
  delete CfgData::default_instance_;
  delete CfgData_reflection_;
  delete ExchangeInfo::default_instance_;
  delete ExchangeInfo_reflection_;
  delete FillInfo::default_instance_;
  delete FillInfo_reflection_;
  delete FillStatData::default_instance_;
  delete FillStatData_reflection_;
  delete VolumeOutlayPair::default_instance_;
  delete VolumeOutlayPair_reflection_;
  delete OrderInfo::default_instance_;
  delete OrderInfo_reflection_;
  delete QuoteInfo::default_instance_;
  delete QuoteInfo_reflection_;
  delete ForQuoteInfo::default_instance_;
  delete ForQuoteInfo_reflection_;
  delete VolumeAmount::default_instance_;
  delete VolumeAmount_reflection_;
  delete PxVolume::default_instance_;
  delete PxVolume_reflection_;
  delete IntPxHalfExposure::default_instance_;
  delete IntPxHalfExposure_reflection_;
  delete IntPxInfo::default_instance_;
  delete IntPxInfo_reflection_;
  delete IntPxOrderInfo::default_instance_;
  delete IntPxOrderInfo_reflection_;
  delete HalfExposure::default_instance_;
  delete HalfExposure_reflection_;
  delete MktQuoteData::default_instance_;
  delete MktQuoteData_reflection_;
  delete GreeksData::default_instance_;
  delete GreeksData_reflection_;
  delete PosData::default_instance_;
  delete PosData_reflection_;
  delete RPnLData::default_instance_;
  delete RPnLData_reflection_;
  delete UPnLData::default_instance_;
  delete UPnLData_reflection_;
  delete PosGreeksData::default_instance_;
  delete PosGreeksData_reflection_;
  delete QuoteData::default_instance_;
  delete QuoteData_reflection_;
  delete VolatilityData::default_instance_;
  delete VolatilityData_reflection_;
  delete TaqStatData::default_instance_;
  delete TaqStatData_reflection_;
  delete XpStatData::default_instance_;
  delete XpStatData_reflection_;
  delete OrdersSzPair::default_instance_;
  delete OrdersSzPair_reflection_;
  delete OrderStatData::default_instance_;
  delete OrderStatData_reflection_;
  delete DayData::default_instance_;
  delete DayData_reflection_;
  delete BarInfo::default_instance_;
  delete BarInfo_reflection_;
  delete BarInfoMap::default_instance_;
  delete BarInfoMap_reflection_;
  delete ProductInfo::default_instance_;
  delete ProductInfo_reflection_;
  delete InstrumentInfo::default_instance_;
  delete InstrumentInfo_reflection_;
  delete InstrumentEventInfo::default_instance_;
  delete InstrumentEventInfo_reflection_;
  delete TAParams::default_instance_;
  delete TAParams_reflection_;
  delete OHLCVData::default_instance_;
  delete OHLCVData_reflection_;
  delete DateOHLCV::default_instance_;
  delete DateOHLCV_reflection_;
  delete DateTimeOHLCV::default_instance_;
  delete DateTimeOHLCV_reflection_;
  delete TDXDayData::default_instance_;
  delete TDXDayData_reflection_;
  delete TDXMinData::default_instance_;
  delete TDXMinData_reflection_;
  delete KCBPTagQuoteInfo10::default_instance_;
  delete KCBPTagQuoteInfo10_reflection_;
  delete KCBPTagQuoteInfo5::default_instance_;
  delete KCBPTagQuoteInfo5_reflection_;
  delete SinaQuoteData::default_instance_;
  delete SinaQuoteData_reflection_;
  delete PyAT_OrderExecutionInfo::default_instance_;
  delete PyAT_OrderExecutionInfo_reflection_;
  delete PyAT_OrderData::default_instance_;
  delete PyAT_OrderData_reflection_;
}

void protobuf_AddDesc_XTData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_XTData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014XTData.proto\022\002XT\"$\n\010PBTagMsg\022\013\n\003tag\030\001 "
    "\001(\005\022\013\n\003msg\030\002 \001(\t\"L\n\005PBMsg\022\016\n\003tag\030\001 \001(\005:\001"
    "0\022\016\n\004name\030\002 \001(\t:\000\022\021\n\007datastr\030\003 \001(\t:\000\022\020\n\006"
    "cfgstr\030\004 \001(\t:\000\"s\n\010PBMsgMap\022\016\n\004name\030\001 \001(\t"
    ":\000\022(\n\006strmap\030\002 \003(\0132\030.XT.PBMsgMap.StrmapE"
    "ntry\032-\n\013StrmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\t:\0028\001\"y\n\013PBTagMsgMap\022\016\n\003tag\030\001 \001(\005:"
    "\0010\022+\n\006strmap\030\002 \003(\0132\033.XT.PBTagMsgMap.Strm"
    "apEntry\032-\n\013StrmapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
    "alue\030\002 \001(\t:\0028\001\"]\n\013ApiPBTagMsg\022\013\n\003tag\030\001 \001"
    "(\005\022\014\n\004data\030\002 \001(\t\022\014\n\004info\030\003 \001(\t\022\n\n\002id\030\004 \001"
    "(\005\022\013\n\003uid\030\005 \001(\r\022\014\n\004last\030\006 \001(\010\"\"\n\006TagMsg\022"
    "\013\n\003tag\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\326\004\n\007TagData\022\n\n"
    "\002id\030\001 \001(\005\022\'\n\006intMap\030\002 \003(\0132\027.XT.TagData.I"
    "ntMapEntry\022-\n\tdoubleMap\030\003 \003(\0132\032.XT.TagDa"
    "ta.DoubleMapEntry\022)\n\007longMap\030\004 \003(\0132\030.XT."
    "TagData.LongMapEntry\022\'\n\006strMap\030\005 \003(\0132\027.X"
    "T.TagData.StrMapEntry\0221\n\013strToStrMap\030\006 \003"
    "(\0132\034.XT.TagData.StrToStrMapEntry\022-\n\tnest"
    "edMap\030\007 \003(\0132\032.XT.TagData.NestedMapEntry\032"
    "-\n\013IntMapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001"
    "(\005:\0028\001\0320\n\016DoubleMapEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
    "\005value\030\002 \001(\001:\0028\001\032.\n\014LongMapEntry\022\013\n\003key\030"
    "\001 \001(\005\022\r\n\005value\030\002 \001(\003:\0028\001\032-\n\013StrMapEntry\022"
    "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020StrTo"
    "StrMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
    "\0028\001\032=\n\016NestedMapEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005va"
    "lue\030\002 \001(\0132\013.XT.TagData:\0028\001\"|\n\rStringMapD"
    "ata\0227\n\013strToStrMap\030\001 \003(\0132\".XT.StringMapD"
    "ata.StrToStrMapEntry\0322\n\020StrToStrMapEntry"
    "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"/\n\007TsRa"
    "nge\022\022\n\007begints\030\001 \001(\003:\0010\022\020\n\005endts\030\002 \001(\003:\001"
    "0\"\225\001\n\016SessionCfgData\022\016\n\004name\030\001 \001(\t:\000\022\020\n\006"
    "exchid\030\002 \001(\t:\000\022\024\n\nproductids\030\003 \001(\t:\000\022\023\n\010"
    "prevflag\030\004 \001(\005:\0010\022\033\n\tbegintime\030\005 \001(\t:\01000"
    ":00:00\022\031\n\007endtime\030\006 \001(\t:\01000:00:00\"u\n\013Ses"
    "sionInfo\022\016\n\004name\030\001 \001(\t:\000\022\025\n\ntradingday\030\002"
    " \001(\005:\0010\022\031\n\016prevtradingday\030\003 \001(\005:\0010\022\022\n\007be"
    "gints\030\004 \001(\003:\0010\022\020\n\005endts\030\005 \001(\003:\0010\"\246\001\n\013Dou"
    "bleParam\022\017\n\004curr\030\001 \001(\001:\0010\022\017\n\004prev\030\002 \001(\001:"
    "\0010\022\017\n\004temp\030\003 \001(\001:\0010\022\027\n\003min\030\004 \001(\001:\n-99999"
    "9999\022\026\n\003max\030\005 \001(\001:\t999999999\022\023\n\004step\030\006 \001"
    "(\001:\0050.001\022\016\n\003idx\030\007 \001(\005:\0010\022\016\n\004name\030\010 \001(\t:"
    "\000\"\237\001\n\010IntParam\022\017\n\004curr\030\001 \001(\005:\0010\022\017\n\004prev\030"
    "\002 \001(\005:\0010\022\017\n\004temp\030\003 \001(\005:\0010\022\027\n\003min\030\004 \001(\005:\n"
    "-999999999\022\026\n\003max\030\005 \001(\005:\t999999999\022\017\n\004st"
    "ep\030\006 \001(\005:\0011\022\016\n\003idx\030\007 \001(\005:\0010\022\016\n\004name\030\010 \001("
    "\t:\000\"\241\001\n\nInt64Param\022\017\n\004curr\030\001 \001(\003:\0010\022\017\n\004p"
    "rev\030\002 \001(\003:\0010\022\017\n\004temp\030\003 \001(\003:\0010\022\027\n\003min\030\004 \001"
    "(\003:\n-999999999\022\026\n\003max\030\005 \001(\003:\t999999999\022\017"
    "\n\004step\030\006 \001(\003:\0011\022\016\n\003idx\030\007 \001(\003:\0010\022\016\n\004name\030"
    "\010 \001(\t:\000\"i\n\017DoubleIntParams\022%\n\014doublepara"
    "ms\030\001 \003(\0132\017.XT.DoubleParam\022\037\n\tintparams\030\002"
    " \003(\0132\014.XT.IntParam\022\016\n\004name\030\003 \001(\t:\000\"\206\001\n\024D"
    "oubleFunctionParams\022\016\n\004name\030\001 \001(\t:\000\022%\n\014d"
    "oubleparams\030\002 \003(\0132\017.XT.DoubleParam\022\037\n\tin"
    "tparams\030\003 \003(\0132\014.XT.IntParam\022\026\n\007epsilon\030\004"
    " \001(\001:\0051e-06\"b\n\tPointData\022\014\n\001x\030\001 \001(\001:\0010\022\014"
    "\n\001y\030\002 \001(\001:\0010\022\014\n\001z\030\003 \001(\001:\0010\022\014\n\001v\030\004 \001(\001:\0010"
    "\022\014\n\001w\030\005 \001(\001:\0011\022\017\n\004flag\030\006 \001(\005:\0010\"\203\001\n\014Poin"
    "tDataMap\0222\n\tpointsmap\030\001 \003(\0132\037.XT.PointDa"
    "taMap.PointsmapEntry\032\?\n\016PointsmapEntry\022\013"
    "\n\003key\030\001 \001(\005\022\034\n\005value\030\002 \001(\0132\r.XT.PointDat"
    "a:\0028\001\"2\n\rPointDataList\022!\n\npointslist\030\001 \003"
    "(\0132\r.XT.PointData\"\336\002\n\014CurveCfgData\022\016\n\004na"
    "me\030\001 \001(\t:\000\022\024\n\006maxnoi\030\002 \001(\005:\0041000\022\026\n\013mins"
    "tartnoi\030\003 \001(\005:\0015\022\025\n\005roote\030\004 \001(\001:\0060.0001\022"
    "\025\n\005funce\030\005 \001(\001:\0060.0001\022\031\n\tgradnorme\030\006 \001("
    "\001:\0060.0001\022\024\n\tfitmethod\030\007 \001(\005:\0010\022\027\n\014weigh"
    "tmethod\030\010 \001(\005:\0010\022\024\n\tminweight\030\t \001(\001:\0010\022\034"
    "\n\tmaxweight\030\n \001(\001:\t999999999\022\030\n\004minx\030\013 \001"
    "(\001:\n-999999999\022\027\n\004maxx\030\014 \001(\001:\t999999999\022"
    "\030\n\004miny\030\r \001(\001:\n-999999999\022\027\n\004maxy\030\016 \001(\001:"
    "\t999999999\"\241\003\n\tCurveData\022\022\n\007fitflag\030\001 \001("
    "\005:\0010\022\027\n\014fitfunccount\030\002 \001(\005:\0010\022\027\n\014fitfunc"
    "value\030\003 \001(\001:\0010\022\032\n\017endcriteriatype\030\004 \001(\005:"
    "\0010\022\025\n\nweightflag\030\005 \001(\005:\0010\022\020\n\005fitts\030\006 \001(\003"
    ":\0010\022\020\n\005fitus\030\007 \001(\003:\0010\022\023\n\010currminw\030\010 \001(\001:"
    "\0010\022\023\n\010currmaxw\030\t \001(\001:\0010\022/\n\ttagintmap\030\n \003"
    "(\0132\034.XT.CurveData.TagintmapEntry\0225\n\014tagd"
    "oublemap\030\013 \003(\0132\037.XT.CurveData.Tagdoublem"
    "apEntry\0320\n\016TagintmapEntry\022\013\n\003key\030\001 \001(\005\022\r"
    "\n\005value\030\002 \001(\005:\0028\001\0323\n\021TagdoublemapEntry\022\013"
    "\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\"\336\010\n\rInstr"
    "SpecData\022\024\n\nexchangeid\030\001 \001(\t:\000\022\026\n\014instru"
    "mentid\030\002 \001(\t:\000\022\027\n\014securitytype\030\003 \001(\005:\0010\022"
    "\023\n\tproductid\030\004 \001(\t:\000\022\037\n\rexpireintdate\030\005 "
    "\001(\005:\01099990101\022\026\n\013callputtype\030\006 \001(\005:\0010\022\026\n"
    "\013strikeprice\030\007 \001(\001:\0010\022\024\n\tpricetick\030\010 \001(\001"
    ":\0010\022\035\n\022contractmultiplier\030\t \001(\001:\0011\022\021\n\007ta"
    "gdata\030\n \001(\t:\000\022\031\n\017tradecurrencyid\030\013 \001(\t:\000"
    "\022\031\n\017securitytypestr\030\014 \001(\t:\000\022\030\n\tpxepsilon"
    "\030\r \001(\001:\0051e-06\022\024\n\ttickvalue\030\017 \001(\001:\0010\022\026\n\013i"
    "nt64pxtick\030\020 \001(\003:\0010\022\034\n\021int64pxpointvalue"
    "\030\021 \001(\001:\0010\022\035\n\022scaleint64todouble\030\022 \001(\001:\0011"
    "\022\035\n\022scaledoubleToint64\030\023 \001(\003:\0011\022\017\n\005areas"
    "\030\024 \001(\t:\000\022\022\n\010concepts\030\025 \001(\t:\000\022\024\n\nindustri"
    "es\030\026 \001(\t:\000\022\026\n\013listintdate\030\027 \001(\005:\0010\022\030\n\016ex"
    "changeinstid\030e \001(\t:\000\022\027\n\014productclass\030f \001"
    "(\005:\0010\022\027\n\014deliveryyear\030g \001(\005:\0010\022\030\n\rdelive"
    "rymonth\030h \001(\005:\0010\022\037\n\024maxmarketordervolume"
    "\030i \001(\005:\0010\022\037\n\024minmarketordervolume\030j \001(\005:"
    "\0010\022\036\n\023maxlimitordervolume\030k \001(\005:\0010\022\036\n\023mi"
    "nlimitordervolume\030l \001(\005:\0010\022\027\n\014positionty"
    "pe\030m \001(\005:\0010\022\033\n\020positiondatetype\030n \001(\005:\0010"
    "\022\030\n\rclosedealtype\030o \001(\005:\0010\022\037\n\024mortgagefu"
    "nduserange\030p \001(\005:\0010\022\033\n\021exchangeproductid"
    "\030q \001(\t:\000\022\030\n\rundlymultiple\030r \001(\001:\0011\022\030\n\016un"
    "dlyproductid\030s \001(\t:\000\022\026\n\014undlyinstrid\030t \001"
    "(\t:\000\0226\n\nnamestrmap\030\310\001 \003(\0132!.XT.InstrSpec"
    "Data.NamestrmapEntry\0321\n\017NamestrmapEntry\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\227\002\n\014Stra"
    "tCfgData\022\026\n\004name\030\001 \001(\t:\010strategy\022\020\n\005issi"
    "m\030\002 \001(\005:\0010\022\021\n\006isnone\030\003 \001(\005:\0010\022\031\n\016prevtra"
    "dingday\030\004 \001(\005:\0010\022\025\n\ntradingday\030\005 \001(\005:\0010\022"
    "\026\n\013currintdate\030\006 \001(\005:\0010\022\027\n\rinstrprefixes"
    "\030\007 \001(\t:\000\0224\n\nnamestrmap\030\036 \003(\0132 .XT.StratC"
    "fgData.NamestrmapEntry\0321\n\017NamestrmapEntr"
    "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\321\001\n\014In"
    "strCfgData\022\020\n\005mdapi\030\001 \001(\005:\0010\022\021\n\006trdapi\030\002"
    " \001(\005:\0010\022\025\n\nbooklevels\030\003 \001(\005:\0015\022\034\n\020mktrol"
    "lingwindow\030\004 \001(\005:\00230\0224\n\nnamestrmap\030\036 \003(\013"
    "2 .XT.InstrCfgData.NamestrmapEntry\0321\n\017Na"
    "mestrmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\t:\0028\001\"\332\001\n\tInstrData\0225\n\014tagdoublemap\030\001 \003("
    "\0132\037.XT.InstrData.TagdoublemapEntry\022/\n\tta"
    "gintmap\030\002 \003(\0132\034.XT.InstrData.TagintmapEn"
    "try\0323\n\021TagdoublemapEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
    "\005value\030\002 \001(\001:\0028\001\0320\n\016TagintmapEntry\022\013\n\003ke"
    "y\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"\212\001\n\tFCCfgData"
    "\022\027\n\014deltanormmax\030\001 \001(\001:\0010\0221\n\nnamestrmap\030"
    "\036 \003(\0132\035.XT.FCCfgData.NamestrmapEntry\0321\n\017"
    "NamestrmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
    "\001(\t:\0028\001\"\364\001\n\006FCData\022\016\n\004name\030\001 \001(\t:\000\022\021\n\007pr"
    "oduct\030\002 \001(\t:\000\0222\n\014tagdoublemap\030\003 \003(\0132\034.XT"
    ".FCData.TagdoublemapEntry\022,\n\ttagintmap\030\004"
    " \003(\0132\031.XT.FCData.TagintmapEntry\0323\n\021Tagdo"
    "ublemapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001"
    ":\0028\001\0320\n\016TagintmapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
    "alue\030\002 \001(\005:\0028\001\"\335\t\n\tOCCfgData\022\026\n\014hedgingi"
    "nstr\030\001 \001(\t:\000\022\026\n\014pxundlyinstr\030\002 \001(\t:\000\022\024\n\n"
    "undlyinstr\030\003 \001(\t:\000\022\027\n\014pxundlyratio\030\004 \001(\001"
    ":\0011\022\032\n\014undlybiasmin\030\005 \001(\001:\004-100\022\031\n\014undly"
    "biasmax\030\006 \001(\001:\003100\022\035\n\021undlybiascountmin\030"
    "\007 \001(\005:\00230\022\037\n\022undlybiasrollingsz\030\010 \001(\005:\0033"
    "00\022\037\n\024undlybiasrollingtype\030\t \001(\005:\0010\022\035\n\022u"
    "ndlybigmovethresh\030\n \001(\001:\0010\022\027\n\tminimpvol\030"
    "\013 \001(\001:\0040.05\022\026\n\tmaximpvol\030\014 \001(\001:\0030.5\022\026\n\013q"
    "uotingflag\030\017 \001(\005:\0010\022\022\n\007rspflag\030\020 \001(\005:\0011\022"
    "\026\n\013hedgingflag\030\021 \001(\005:\0010\022\022\n\007fitflag\030\022 \001(\005"
    ":\0010\022\024\n\tfitmethod\030\023 \001(\005:\0010\022\032\n\016fitthreshti"
    "cks\030\024 \001(\001:\00210\022\032\n\017joinhedgethresh\030\025 \001(\001:\001"
    "1\022\031\n\016hithedgethresh\030\026 \001(\001:\0015\022\035\n\022safehedg"
    "edistticks\030\027 \001(\005:\0015\022\031\n\016hedgedistticks\030\030 "
    "\001(\005:\0011\022\022\n\006maxpos\030\032 \001(\005:\00210\022\032\n\016ocmaxdelta"
    "norm\030\033 \001(\001:\00210\022\031\n\016octgtdeltanorm\030\034 \001(\001:\001"
    "0\022\030\n\tocmaxvega\030\035 \001(\001:\00510000\022\024\n\toctgtvega"
    "\030\036 \001(\001:\0010\022\030\n\rquotepxmethod\030\037 \001(\005:\0010\022\026\n\013m"
    "axhitticks\030  \001(\005:\0010\022\020\n\003rcp\030! \001(\001:\0030.5\022\020\n"
    "\003rrp\030\" \001(\001:\0030.8\022\034\n\017minretreatratio\030# \001(\001"
    ":\0030.2\022\032\n\017maxretreatratio\030$ \001(\001:\0012\022\034\n\016lea"
    "nonmktratio\030% \001(\001:\0040.75\022\036\n\023pxchgthreshti"
    "cksmin\030& \001(\005:\0011\022\037\n\023pxchgthreshticksmax\030\'"
    " \001(\005:\00210\022\035\n\020pxchgthreshratio\030( \001(\001:\0030.2\022"
    "\025\n\nminquotesz\030) \001(\005:\0011\022\023\n\010minrspsz\030* \001(\005"
    ":\0011\022\035\n\021undlychgrollingsz\0302 \001(\005:\00236\022\036\n\023un"
    "dlychgrollingtype\0303 \001(\005:\0010\022\031\n\014vcrrolling"
    "sz\0304 \001(\005:\003300\022\031\n\016vcrrollingtype\0305 \001(\005:\0010"
    "\0221\n\nnamestrmap\030P \003(\0132\035.XT.OCCfgData.Name"
    "strmapEntry\0321\n\017NamestrmapEntry\022\013\n\003key\030\001 "
    "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\235\007\n\006OCData\022\016\n\004nam"
    "e\030\001 \001(\t:\000\022\021\n\007product\030\002 \001(\t:\000\022\034\n\nexpireda"
    "te\030\003 \001(\005:\01099990101\022\024\n\010monthseq\030\004 \001(\005:\002-1"
    "\022\025\n\ntradingday\030\005 \001(\005:\0010\022\031\n\016prevtradingda"
    "y\030\006 \001(\005:\0010\022\023\n\010atmindex\030\010 \001(\005:\0010\022\024\n\tatmst"
    "rike\030\t \001(\001:\0010\022\027\n\014atmintstrike\030\n \001(\003:\0010\022\032"
    "\n\017atmstraddlevega\030\013 \001(\001:\0010\022\024\n\tundlybias\030"
    "\014 \001(\001:\0010\022\033\n\020lastundlyquotets\030\017 \001(\003:\0010\022\034\n"
    "\021lastoptionquotets\030\020 \001(\003:\0010\022\030\n\rocrriskpn"
    "ltdy\030\021 \001(\001:\0010\022\030\n\rocuriskpnltdy\030\022 \001(\001:\0010\022"
    "\030\n\rocrriskpnlytd\030\023 \001(\001:\0010\022\030\n\rocuriskpnly"
    "td\030\024 \001(\001:\0010\022\021\n\006xscale\030\025 \001(\001:\0011\022\026\n\013pxprec"
    "ision\030\026 \001(\005:\0015\022\027\n\014exercisetype\030\027 \001(\005:\0010\022"
    "\032\n\017minoptionpxtick\030\030 \001(\001:\0010\022\026\n\013ocbuyvolu"
    "me\030\031 \001(\005:\0010\022\027\n\014ocsellvolume\030\032 \001(\005:\0010\022\026\n\013"
    "ocbuyamount\030\033 \001(\001:\0010\022\027\n\014ocsellamount\030\034 \001"
    "(\001:\0010\022\014\n\001T\030\036 \001(\001:\0010\022\016\n\003dte\030\037 \001(\001:\0010\022\016\n\003t"
    "te\030  \001(\001:\0010\022\023\n\010nstrikes\030! \001(\005:\0010\022\021\n\006ncal"
    "ls\030\" \001(\005:\0010\022\020\n\005nputs\030# \001(\005:\0010\0222\n\014tagdoub"
    "lemap\0302 \003(\0132\034.XT.OCData.TagdoublemapEntr"
    "y\022,\n\ttagintmap\0303 \003(\0132\031.XT.OCData.Tagintm"
    "apEntry\0323\n\021TagdoublemapEntry\022\013\n\003key\030\001 \001("
    "\005\022\r\n\005value\030\002 \001(\001:\0028\001\0320\n\016TagintmapEntry\022\013"
    "\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"\212\001\n\tPICfg"
    "Data\022\027\n\014deltanormmax\030\001 \001(\001:\0010\0221\n\nnamestr"
    "map\030\036 \003(\0132\035.XT.PICfgData.NamestrmapEntry"
    "\0321\n\017NamestrmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\t:\0028\001\"\223\003\n\006PIData\022\016\n\004name\030\001 \001(\t:\000\022\021"
    "\n\007product\030\002 \001(\t:\000\022\025\n\ntradingday\030\003 \001(\005:\0010"
    "\022\031\n\016prevtradingday\030\004 \001(\005:\0010\022\024\n\tcurrmktts"
    "\030\005 \001(\003:\0010\022\031\n\016currsessionidx\030\006 \001(\005:\0010\022\035\n\022"
    "currsessionbegints\030\007 \001(\003:\0010\022\033\n\020currsessi"
    "onendts\030\010 \001(\003:\0010\0222\n\014tagdoublemap\030\036 \003(\0132\034"
    ".XT.PIData.TagdoublemapEntry\022,\n\ttagintma"
    "p\030\037 \003(\0132\031.XT.PIData.TagintmapEntry\0323\n\021Ta"
    "gdoublemapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 "
    "\001(\001:\0028\001\0320\n\016TagintmapEntry\022\013\n\003key\030\001 \001(\005\022\r"
    "\n\005value\030\002 \001(\005:\0028\001\"\312\002\n\014OrderMgrData\022\030\n\013or"
    "derpoolsz\030\001 \001(\005:\003128\022\026\n\013quotepoolsz\030\002 \001("
    "\005:\0010\022\030\n\rnumorderssent\030\003 \001(\005:\0010\022 \n\025numord"
    "erssentrejected\030\004 \001(\005:\0010\022\033\n\020numorderscxl"
    "sent\030\005 \001(\005:\0010\022\037\n\024numorderscxlrejected\030\006 "
    "\001(\005:\0010\022\030\n\rnumquotessent\030\007 \001(\005:\0010\022 \n\025numq"
    "uotessentrejected\030\010 \001(\005:\0010\022\033\n\020numquotesc"
    "xlsent\030\t \001(\005:\0010\022\037\n\024numquotescxlrejected\030"
    "\n \001(\005:\0010\022\024\n\ttssuspend\030\013 \001(\003:\0010\"\371\001\n\017Order"
    "MgrCfgData\022\034\n\017orderpoolszstep\030\001 \001(\005:\003128"
    "\022\034\n\016orderpoolszmax\030\002 \001(\005:\0044096\022\034\n\017quotep"
    "oolszstep\030\003 \001(\005:\003128\022\034\n\016quotepoolszmax\030\004"
    " \001(\005:\0044096\022\031\n\014maxreqpersec\030\005 \001(\005:\003498\022\036\n"
    "\021maxfemasreqpersec\030\006 \001(\005:\003123\022\030\n\rmaxorde"
    "rssent\030\007 \001(\005:\0010\022\031\n\016maxorderscxled\030\010 \001(\005:"
    "\0010\"2\n\022ForQuoteMgrCfgData\022\034\n\021rspwaitingse"
    "conds\030\001 \001(\005:\0015\"\302\004\n\007CfgData\0221\n\013stratcfgma"
    "p\030\001 \003(\0132\034.XT.CfgData.StratcfgmapEntry\022+\n"
    "\010picfgmap\030\002 \003(\0132\031.XT.CfgData.PicfgmapEnt"
    "ry\022+\n\010occfgmap\030\003 \003(\0132\031.XT.CfgData.Occfgm"
    "apEntry\022+\n\010fccfgmap\030\004 \003(\0132\031.XT.CfgData.F"
    "ccfgmapEntry\0221\n\013instrcfgmap\030\005 \003(\0132\034.XT.C"
    "fgData.InstrcfgmapEntry\032D\n\020StratcfgmapEn"
    "try\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.XT.Str"
    "atCfgData:\0028\001\032>\n\rPicfgmapEntry\022\013\n\003key\030\001 "
    "\001(\t\022\034\n\005value\030\002 \001(\0132\r.XT.PICfgData:\0028\001\032>\n"
    "\rOccfgmapEntry\022\013\n\003key\030\001 \001(\t\022\034\n\005value\030\002 \001"
    "(\0132\r.XT.OCCfgData:\0028\001\032>\n\rFccfgmapEntry\022\013"
    "\n\003key\030\001 \001(\t\022\034\n\005value\030\002 \001(\0132\r.XT.FCCfgDat"
    "a:\0028\001\032D\n\020InstrcfgmapEntry\022\013\n\003key\030\001 \001(\t\022\037"
    "\n\005value\030\002 \001(\0132\020.XT.InstrCfgData:\0028\001\"8\n\014E"
    "xchangeInfo\022\022\n\nexchangeid\030\001 \001(\t\022\024\n\014excha"
    "ngetype\030\002 \001(\005\"\232\001\n\010FillInfo\022\026\n\014instrument"
    "id\030\001 \001(\t:\000\022\r\n\002ts\030\002 \001(\003:\0010\022\022\n\007orderid\030\003 \001"
    "(\005:\0010\022\021\n\006bstype\030\004 \001(\005:\0010\022\r\n\002px\030\005 \001(\001:\0010\022"
    "\r\n\002sz\030\006 \001(\005:\0010\022\021\n\006ocflag\030\007 \001(\005:\0010\022\017\n\004fla"
    "g\030\010 \001(\005:\0010\"\323\001\n\014FillStatData\022\026\n\013buypxvolu"
    "me\030\001 \001(\001:\0010\022\027\n\014sellpxvolume\030\002 \001(\001:\0010\022\024\n\t"
    "buyvolume\030\003 \001(\003:\0010\022\025\n\nsellvolume\030\004 \001(\003:\001"
    "0\022\021\n\006rpxpnl\030\005 \001(\001:\0010\022\022\n\007poscost\030\006 \001(\001:\0010"
    "\022\021\n\006netpos\030\007 \001(\005:\0010\022\025\n\nnetposprev\030\010 \001(\005:"
    "\0010\022\024\n\tnetposnew\030\t \001(\005:\0010\":\n\020VolumeOutlay"
    "Pair\022\021\n\006volume\030\001 \001(\003:\0010\022\023\n\010pxvolume\030\002 \001("
    "\001:\0010\"\262\003\n\tOrderInfo\022\026\n\014instrumentid\030\001 \001(\t"
    ":\000\022\016\n\003iid\030\002 \001(\005:\0010\022\022\n\007orderid\030\003 \001(\005:\0010\022\016"
    "\n\003qid\030\004 \001(\005:\0010\022\021\n\006bstype\030\005 \001(\005:\0010\022\r\n\002px\030"
    "\006 \001(\001:\0010\022\021\n\006origsz\030\007 \001(\005:\0010\022\021\n\006opensz\030\010 "
    "\001(\005:\0010\022\023\n\010filledsz\030\t \001(\005:\0010\022\021\n\006trdapi\030\n "
    "\001(\005:\0010\022\024\n\tordertype\030\013 \001(\005:\0010\022\021\n\006status\030\014"
    " \001(\005:\0010\022\021\n\006tssent\030\017 \001(\003:\0010\022\031\n\016tssentreje"
    "cted\030\020 \001(\003:\0010\022\020\n\005tscnf\030\021 \001(\003:\0010\022\024\n\ttscxl"
    "sent\030\022 \001(\003:\0010\022\030\n\rtscxlrejected\030\023 \001(\003:\0010\022"
    "\025\n\ntsfinished\030\024 \001(\003:\0010\022\021\n\006ocflag\030\025 \001(\005:\001"
    "0\022\026\n\013oqrtypemask\030\026 \001(\005:\0010\022\016\n\003idx\030\027 \001(\005:\001"
    "0\"\373\006\n\tQuoteInfo\022\026\n\014instrumentid\030\001 \001(\t:\000\022"
    "\016\n\003qid\030\002 \001(\005:\0010\022\025\n\nbidorderid\030\003 \001(\005:\0010\022\025"
    "\n\naskorderid\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010"
    "\022\024\n\tbidocflag\030\006 \001(\005:\0010\022\024\n\taskocflag\030\007 \001("
    "\005:\0010\022\026\n\013oqrtypemask\030\010 \001(\005:\0010\022\024\n\nexchange"
    "id\030\t \001(\t:\000\022\024\n\nquotesysid\030\n \001(\t:\000\022\027\n\rbido"
    "rdersysid\030\013 \001(\t:\000\022\027\n\raskordersysid\030\014 \001(\t"
    ":\000\022\027\n\rforquotesysid\030\r \001(\t:\000\022\026\n\014forquotet"
    "ime\030\016 \001(\t:\000\022\026\n\014quotelocalid\030\017 \001(\t:\000\022\020\n\005b"
    "idpx\030\020 \001(\001:\0010\022\020\n\005askpx\030\021 \001(\001:\0010\022\020\n\005bidsz"
    "\030\022 \001(\005:\0010\022\020\n\005asksz\030\023 \001(\005:\0010\022\026\n\013bidfilled"
    "sz\030\024 \001(\005:\0010\022\026\n\013askfilledsz\030\025 \001(\005:\0010\022\021\n\006t"
    "ssent\030\026 \001(\003:\0010\022\031\n\016tssentrejected\030\027 \001(\003:\001"
    "0\022\020\n\005tscnf\030\030 \001(\003:\0010\022\024\n\ttscxlsent\030\031 \001(\003:\001"
    "0\022\030\n\rtscxlrejected\030\032 \001(\003:\0010\022\025\n\ntsfinishe"
    "d\030\033 \001(\003:\0010\022\025\n\ntsbidcxled\030\034 \001(\003:\0010\022\025\n\ntsa"
    "skcxled\030\035 \001(\003:\0010\022\031\n\016tsbidallfilled\030\036 \001(\003"
    ":\0010\022\031\n\016tsaskallfilled\030\037 \001(\003:\0010\022\025\n\nreason"
    "flag\030  \001(\005:\0010\022\023\n\010mktbidpx\030! \001(\001:\0010\022\023\n\010mk"
    "taskpx\030\" \001(\001:\0010\022\021\n\006netpos\030# \001(\001:\0010\022\031\n\016oc"
    "posdeltanorm\030$ \001(\001:\0010\022\024\n\tocposvega\030% \001(\001"
    ":\0010\022\020\n\005delta\030& \001(\001:\0010\022\017\n\004vega\030\' \001(\001:\0010\022\017"
    "\n\003idx\030( \001(\001:\002-1\"\245\001\n\014ForQuoteInfo\022\026\n\014inst"
    "rumentid\030\001 \001(\t:\000\022\027\n\rforquotesysid\030\002 \001(\t:"
    "\000\022\026\n\014forquotetime\030\003 \001(\t:\000\022\020\n\005rcvts\030\004 \001(\003"
    ":\0010\022\020\n\005rspts\030\005 \001(\003:\0010\022\022\n\007currqid\030\006 \001(\005:\001"
    "0\022\024\n\trspstatus\030\007 \001(\005:\0010\"4\n\014VolumeAmount\022"
    "\021\n\006volume\030\001 \001(\003:\0010\022\021\n\006amount\030\002 \001(\001:\0010\",\n"
    "\010PxVolume\022\r\n\002px\030\001 \001(\001:\0010\022\021\n\006volume\030\002 \001(\003"
    ":\0010\"X\n\021IntPxHalfExposure\022\020\n\005intpx\030\001 \001(\003:"
    "\0010\022\033\n\020workingnumorders\030\002 \001(\005:\0010\022\024\n\tworki"
    "ngsz\030\003 \001(\005:\0010\"\366\002\n\tIntPxInfo\022\020\n\005intpx\030\001 \001"
    "(\003:\0010\022\024\n\tmktbstype\030\002 \001(\005:\0010\022\020\n\005mktsz\030\003 \001"
    "(\005:\0010\022\027\n\014mktnumorders\030\004 \001(\005:\0010\022\027\n\014mktbuy"
    "volume\030\005 \001(\003:\0010\022\027\n\014mktbuyamount\030\006 \001(\001:\0010"
    "\022\030\n\rmktsellvolume\030\007 \001(\003:\0010\022\030\n\rmktsellamo"
    "unt\030\010 \001(\001:\0010\022\024\n\tbuyvolume\030\025 \001(\003:\0010\022\024\n\tbu"
    "yamount\030\026 \001(\001:\0010\022\025\n\nsellvolume\030\027 \001(\003:\0010\022"
    "\025\n\nsellamount\030\030 \001(\001:\0010\022\027\n\014buynumorders\030\031"
    " \001(\005:\0010\022\020\n\005buysz\030\032 \001(\005:\0010\022\030\n\rsellnumorde"
    "rs\030\033 \001(\005:\0010\022\021\n\006sellsz\030\034 \001(\005:\0010\"\325\001\n\016IntPx"
    "OrderInfo\022\020\n\005intpx\030\001 \001(\003:\0010\022\033\n\020workingnu"
    "morders\030\002 \001(\005:\0010\022\024\n\tworkingsz\030\003 \001(\005:\0010\022D"
    "\n\021orderid2openszmap\030\004 \003(\0132).XT.IntPxOrde"
    "rInfo.Orderid2openszmapEntry\0328\n\026Orderid2"
    "openszmapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001"
    "(\005:\0028\001\"\233\001\n\014HalfExposure\022\033\n\020workingnumord"
    "ers\030\001 \001(\005:\0010\022\024\n\tworkingsz\030\002 \001(\005:\0010\022\021\n\006vo"
    "lume\030\003 \001(\003:\0010\022\021\n\006amount\030\004 \001(\001:\0010\022\030\n\rvolu"
    "mesession\030\005 \001(\003:\0010\022\030\n\ramountsession\030\006 \001("
    "\001:\0010\"\260\004\n\014MktQuoteData\022\026\n\014instrumentid\030\001 "
    "\001(\t:\000\022\025\n\nexchangets\030\002 \001(\003:\0010\022\021\n\006recvts\030\003"
    " \001(\003:\0010\022\021\n\006lastpx\030\004 \001(\001:\0010\022\021\n\006lastts\030\005 \001"
    "(\003:\0010\022\024\n\ttotvolume\030\006 \001(\003:\0010\022\024\n\ttotamount"
    "\030\007 \001(\001:\0010\022\020\n\005totoi\030\010 \001(\003:\0010\022\021\n\006bidpx0\030\t "
    "\001(\001:\0010\022\021\n\006askpx0\030\n \001(\001:\0010\022\021\n\006bidsz0\030\013 \001("
    "\005:\0010\022\021\n\006asksz0\030\014 \001(\005:\0010\022\021\n\006bidpx1\030\r \001(\001:"
    "\0010\022\021\n\006askpx1\030\016 \001(\001:\0010\022\021\n\006bidsz1\030\017 \001(\005:\0010"
    "\022\021\n\006asksz1\030\020 \001(\005:\0010\022\021\n\006bidpx2\030\021 \001(\001:\0010\022\021"
    "\n\006askpx2\030\022 \001(\001:\0010\022\021\n\006bidsz2\030\023 \001(\005:\0010\022\021\n\006"
    "asksz2\030\024 \001(\005:\0010\022\021\n\006bidpx3\030\025 \001(\001:\0010\022\021\n\006as"
    "kpx3\030\026 \001(\001:\0010\022\021\n\006bidsz3\030\027 \001(\005:\0010\022\021\n\006asks"
    "z3\030\030 \001(\005:\0010\022\021\n\006bidpx4\030\031 \001(\001:\0010\022\021\n\006askpx4"
    "\030\032 \001(\001:\0010\022\021\n\006bidsz4\030\033 \001(\005:\0010\022\021\n\006asksz4\030\034"
    " \001(\005:\0010\"c\n\nGreeksData\022\020\n\005delta\030\001 \001(\001:\0010\022"
    "\020\n\005gamma\030\002 \001(\001:\0010\022\017\n\004vega\030\003 \001(\001:\0010\022\020\n\005th"
    "eta\030\004 \001(\001:\0010\022\016\n\003rho\030\005 \001(\001:\0010\"I\n\007PosData\022"
    "\021\n\006netpos\030\001 \001(\005:\0010\022\025\n\nnetposprev\030\002 \001(\005:\001"
    "0\022\024\n\tnetposnew\030\003 \001(\005:\0010\".\n\010RPnLData\022\021\n\006r"
    "pxpnl\030\001 \001(\001:\0010\022\017\n\004rpnl\030\002 \001(\001:\0010\".\n\010UPnLD"
    "ata\022\021\n\006upxpnl\030\001 \001(\001:\0010\022\017\n\004upnl\030\002 \001(\001:\0010\""
    "\277\001\n\rPosGreeksData\022\023\n\010posdelta\030\001 \001(\001:\0010\022\027"
    "\n\014posdeltanorm\030\002 \001(\001:\0010\022\023\n\010posgamma\030\003 \001("
    "\001:\0010\022\027\n\014posgammanorm\030\004 \001(\001:\0010\022\022\n\007posvega"
    "\030\005 \001(\001:\0010\022\026\n\013posveganorm\030\006 \001(\001:\0010\022\023\n\010pos"
    "theta\030\007 \001(\001:\0010\022\021\n\006posrho\030\010 \001(\001:\0010\"\241\001\n\tQu"
    "oteData\022\021\n\006theopx\030\001 \001(\001:\0010\022\022\n\007quotepx\030\002 "
    "\001(\001:\0010\022\025\n\nquotebidpx\030\003 \001(\001:\0010\022\025\n\nquoteas"
    "kpx\030\004 \001(\001:\0010\022\025\n\nquotebidsz\030\005 \001(\005:\0010\022\025\n\nq"
    "uoteasksz\030\006 \001(\005:\0010\022\021\n\006riskpx\030\007 \001(\001:\0010\"\201\002"
    "\n\016VolatilityData\022\024\n\timpvolbid\030\001 \001(\001:\0010\022\024"
    "\n\timpvolask\030\002 \001(\001:\0010\022\024\n\timpvolmid\030\003 \001(\001:"
    "\0010\022\023\n\010quotevol\030\004 \001(\001:\0010\022\022\n\007riskvol\030\005 \001(\001"
    ":\0010\022\024\n\tfittedvol\030\006 \001(\001:\0010\022\030\n\rprevsettlev"
    "ol\030\007 \001(\001:\0010\022\027\n\014prevclosevol\030\010 \001(\001:\0010\022\024\n\t"
    "settlevol\030\t \001(\001:\0010\022\021\n\006avgvol\030\n \001(\001:\0010\022\022\n"
    "\007histvol\030\013 \001(\001:\0010\"\306\002\n\013TaqStatData\022\031\n\016num"
    "bookupdates\030\001 \001(\005:\0010\022\026\n\013bestszchged\030\002 \001("
    "\005:\0010\022\026\n\013bestpxchged\030\003 \001(\005:\0010\022\025\n\nmidpxchg"
    "ed\030\004 \001(\001:\0010\022\025\n\nsnapvolume\030\005 \001(\003:\0010\022\025\n\nsn"
    "apamount\030\006 \001(\001:\0010\022\024\n\tsnapoichg\030\007 \001(\003:\0010\022"
    "\024\n\tsnapavgpx\030\010 \001(\001:\0010\022\030\n\rsnapbuyvolume\030\t"
    " \001(\003:\0010\022\031\n\016snapsellvolume\030\n \001(\003:\0010\022\026\n\013sn"
    "apbsadiff\030\013 \001(\001:\0010\022\026\n\013snapflipups\030\014 \001(\001:"
    "\0010\022\026\n\013snapflipdns\030\r \001(\001:\0010\"\264\010\n\nXpStatDat"
    "a\022\021\n\006netpos\030\001 \001(\005:\0010\022\025\n\nnetposprev\030\002 \001(\005"
    ":\0010\022\024\n\tnetposnew\030\003 \001(\005:\0010\022\021\n\006rpxpnl\030\004 \001("
    "\001:\0010\022\017\n\004rpnl\030\005 \001(\001:\0010\022\021\n\006upxpnl\030\006 \001(\001:\0010"
    "\022\017\n\004upnl\030\007 \001(\001:\0010\022\030\n\rrpxpnlsession\030\010 \001(\001"
    ":\0010\022\026\n\013rpnlsession\030\t \001(\001:\0010\022\030\n\rupxpnlses"
    "sion\030\n \001(\001:\0010\022\026\n\013upnlsession\030\013 \001(\001:\0010\022\025\n"
    "\nutheopxpnl\030\014 \001(\001:\0010\022\023\n\010utheopnl\030\r \001(\001:\001"
    "0\022\025\n\nuriskpxpnl\030\016 \001(\001:\0010\022\023\n\010uriskpnl\030\017 \001"
    "(\001:\0010\022\034\n\021utheopxpnlsession\030\020 \001(\001:\0010\022\032\n\017u"
    "theopnlsession\030\021 \001(\001:\0010\022\034\n\021uriskpxpnlses"
    "sion\030\022 \001(\001:\0010\022\032\n\017uriskpnlsession\030\023 \001(\001:\001"
    "0\022\024\n\tbuyorders\030\025 \001(\005:\0010\022\020\n\005buysz\030\026 \001(\005:\001"
    "0\022\025\n\nsellorders\030\027 \001(\005:\0010\022\021\n\006sellsz\030\030 \001(\005"
    ":\0010\022\033\n\020buyordersopenytd\030\031 \001(\005:\0010\022\027\n\014buys"
    "zopenytd\030\032 \001(\005:\0010\022\034\n\021sellordersopenytd\030\033"
    " \001(\005:\0010\022\030\n\rsellszopenytd\030\034 \001(\005:\0010\022\034\n\021buy"
    "orderscloseytd\030\035 \001(\005:\0010\022\030\n\rbuyszcloseytd"
    "\030\036 \001(\005:\0010\022\035\n\022sellorderscloseytd\030\037 \001(\005:\0010"
    "\022\031\n\016sellszcloseytd\030  \001(\005:\0010\022\033\n\020buyorders"
    "opentdy\030! \001(\005:\0010\022\027\n\014buyszopentdy\030\" \001(\005:\001"
    "0\022\034\n\021sellordersopentdy\030# \001(\005:\0010\022\030\n\rsells"
    "zopentdy\030$ \001(\005:\0010\022\034\n\021buyordersclosetdy\030%"
    " \001(\005:\0010\022\030\n\rbuyszclosetdy\030& \001(\005:\0010\022\035\n\022sel"
    "lordersclosetdy\030\' \001(\005:\0010\022\031\n\016sellszcloset"
    "dy\030( \001(\005:\0010\022\025\n\norderssent\030) \001(\005:\0010\022\026\n\013or"
    "derscxled\030* \001(\005:\0010\022\025\n\nquotessent\030+ \001(\005:\001"
    "0\022\026\n\013quotescxled\030, \001(\005:\0010\"0\n\014OrdersSzPai"
    "r\022\021\n\006orders\030\001 \001(\005:\0010\022\r\n\002sz\030\002 \001(\005:\0010\"\333\001\n\r"
    "OrderStatData\022\025\n\norderssent\030\001 \001(\005:\0010\022\026\n\013"
    "orderscxled\030\002 \001(\005:\0010\022\025\n\nquotessent\030\003 \001(\005"
    ":\0010\022\026\n\013quotescxled\030\004 \001(\005:\0010\022\033\n\020workingbu"
    "yorders\030\005 \001(\005:\0010\022\034\n\021workingsellorders\030\006 "
    "\001(\005:\0010\022\027\n\014workingbuysz\030\007 \001(\005:\0010\022\030\n\rworki"
    "ngsellsz\030\010 \001(\005:\0010\"\302\003\n\007DayData\022\031\n\016prevtra"
    "dingday\030\001 \001(\005:\0010\022\030\n\rhasprevsettle\030\002 \001(\005:"
    "\0010\022\027\n\014prevsettlepx\030\003 \001(\001:\0010\022\027\n\014hasprevcl"
    "ose\030\004 \001(\005:\0010\022\026\n\013prevclosepx\030\005 \001(\001:\0010\022\030\n\r"
    "prevtotvolume\030\006 \001(\001:\0010\022\030\n\rprevtotamount\030"
    "\007 \001(\001:\0010\022\024\n\tprevtotoi\030\010 \001(\001:\0010\022\025\n\ntradin"
    "gday\030\n \001(\005:\0010\022\025\n\nhaslimitpx\030\013 \001(\005:\0010\022\027\n\014"
    "lowerlimitpx\030\014 \001(\001:\0010\022\027\n\014upperlimitpx\030\r "
    "\001(\001:\0010\022\024\n\topenprice\030\016 \001(\001:\0010\022\021\n\006highpx\030\017"
    " \001(\001:\0010\022\020\n\005lowpx\030\020 \001(\001:\0010\022\025\n\ncloseprice\030"
    "\021 \001(\001:\0010\022\024\n\ttotvolume\030\022 \001(\001:\0010\022\024\n\ttotamo"
    "unt\030\023 \001(\001:\0010\022\020\n\005totoi\030\024 \001(\001:\0010\"\203\002\n\007BarIn"
    "fo\022\017\n\007begindt\030\001 \001(\003\022\r\n\005enddt\030\002 \001(\003\022\021\n\top"
    "enprice\030\003 \001(\001\022\016\n\006highpx\030\004 \001(\001\022\r\n\005lowpx\030\005"
    " \001(\001\022\022\n\ncloseprice\030\006 \001(\001\022\016\n\006volume\030\007 \001(\003"
    "\022\r\n\005oichg\030\010 \001(\003\022\021\n\tbsvoldiff\030\t \001(\003\022\016\n\006am"
    "ount\030\n \001(\001\022\017\n\007bsadiff\030\013 \001(\001\022\017\n\007flipups\030\014"
    " \001(\001\022\017\n\007flipdns\030\r \001(\001\022\014\n\004flag\030\016 \001(\005\022\017\n\007t"
    "agdata\030\017 \001(\t\"\221\001\n\nBarInfoMap\0222\n\nbarInfoMa"
    "p\030\001 \003(\0132\036.XT.BarInfoMap.BarInfoMapEntry\022"
    "\017\n\007tagdata\030\002 \001(\t\032>\n\017BarInfoMapEntry\022\013\n\003k"
    "ey\030\001 \001(\003\022\032\n\005value\030\002 \001(\0132\013.XT.BarInfo:\0028\001"
    "\"\244\001\n\013ProductInfo\022\022\n\nexchangeid\030\001 \001(\t\022\024\n\014"
    "securitytype\030\002 \001(\t\022\021\n\tproductid\030\003 \001(\t\022\030\n"
    "\020underlyingsymbol\030\004 \001(\t\022\021\n\tpricetick\030\005 \001"
    "(\001\022\032\n\022contractmultiplier\030\006 \001(\001\022\017\n\007tagdat"
    "a\030\007 \001(\t\"\344\001\n\016InstrumentInfo\022\022\n\nexchangeid"
    "\030\001 \001(\t\022\024\n\014instrumentid\030\002 \001(\t\022\024\n\014security"
    "type\030\003 \001(\t\022\021\n\tproductid\030\004 \001(\t\022\025\n\rexpirei"
    "ntdate\030\005 \001(\005\022\023\n\013callputtype\030\006 \001(\005\022\023\n\013str"
    "ikeprice\030\007 \001(\001\022\021\n\tpricetick\030\010 \001(\001\022\032\n\022con"
    "tractmultiplier\030\t \001(\001\022\017\n\007tagdata\030\n \001(\t\"@"
    "\n\023InstrumentEventInfo\022\013\n\003tag\030\001 \001(\005\022\013\n\003ii"
    "d\030\002 \001(\005\022\017\n\007orderid\030\003 \001(\005\"\253\013\n\010TAParams\022\025\n"
    "\tsmaPeriod\030\001 \001(\005:\00212\022\030\n\014smaMidPeriod\030\002 \001"
    "(\005:\00212\022\031\n\rsmaFastPeriod\030\003 \001(\005:\00212\022\031\n\rsma"
    "SlowPeriod\030\004 \001(\005:\00226\022\025\n\temaPeriod\030\005 \001(\005:"
    "\00212\022\030\n\014emaMidPeriod\030\006 \001(\005:\00212\022\031\n\remaFast"
    "Period\030\007 \001(\005:\00212\022\031\n\remaSlowPeriod\030\010 \001(\005:"
    "\00226\022\025\n\tatrPeriod\030\t \001(\005:\00214\022\025\n\trsiPeriod\030"
    "\n \001(\005:\00214\022\031\n\rrsiOverbought\030\013 \001(\001:\00270\022\027\n\013"
    "rsiOversold\030\014 \001(\001:\00230\022\025\n\tmfiPeriod\030\r \001(\005"
    ":\00214\022\025\n\tcciPeriod\030\016 \001(\005:\00220\022\032\n\rcciOverbo"
    "ught\030\017 \001(\001:\0031.5\022\030\n\013cciOversold\030\020 \001(\001:\0031."
    "5\022\026\n\013cciMaPeriod\030\021 \001(\005:\0015\022\025\n\tadxPeriod\030\022"
    " \001(\005:\00214\022\025\n\nmacdMAType\030\023 \001(\005:\0010\022\032\n\016macdF"
    "astPeriod\030\024 \001(\005:\00212\022\032\n\016macdSlowPeriod\030\025 "
    "\001(\005:\00226\022\033\n\020macdSignalPeriod\030\026 \001(\005:\0019\022\033\n\020"
    "macdHistMaPeriod\030\027 \001(\005:\0015\022\024\n\010bbPeriod\030\030 "
    "\001(\005:\00220\022\027\n\013volbbPeriod\030\031 \001(\005:\00220\022\030\n\014bsvd"
    "BBPeriod\030\032 \001(\005:\00220\022\031\n\roichgBBPeriod\030\033 \001("
    "\005:\00220\022\026\n\nbbMaPeriod\030\034 \001(\005:\00220\022\031\n\rvolbbMa"
    "Period\030\035 \001(\005:\00220\022\032\n\016bsvdBBMaPeriod\030\036 \001(\005"
    ":\00220\022\033\n\017oichgBBMaPeriod\030\037 \001(\005:\00220\022\034\n\016sar"
    "FastAccInit\030  \001(\001:\0040.03\022\034\n\016sarFastAccSte"
    "p\030! \001(\001:\0040.03\022\032\n\rsarFastAccMax\030\" \001(\001:\0030."
    "3\022\033\n\rsarMidAccInit\030# \001(\001:\0040.02\022\033\n\rsarMid"
    "AccStep\030$ \001(\001:\0040.02\022\031\n\014sarMidAccMax\030% \001("
    "\001:\0030.2\022\034\n\016sarSlowAccInit\030& \001(\001:\0040.01\022\034\n\016"
    "sarSlowAccStep\030\' \001(\001:\0040.01\022\033\n\rsarSlowAcc"
    "Max\030( \001(\001:\0040.01\022\026\n\tbbsarDist\030) \001(\001:\0031.5\022"
    "\027\n\natrsarDist\030* \001(\001:\0031.5\022\034\n\020bbmidSlopePe"
    "riod\030+ \001(\005:\00210\022\024\n\010kbPeriod\030, \001(\005:\00220\022\027\n\013"
    "slowKPeriod\030- \001(\005:\00214\022\026\n\013slowDPeriod\030. \001"
    "(\005:\0013\022\027\n\013fastKPeriod\030/ \001(\005:\00214\022\026\n\013fastDP"
    "eriod\0300 \001(\005:\0013\022\030\n\014dmiatrPeriod\0301 \001(\005:\00214"
    "\022\027\n\014dmiadxPeriod\0302 \001(\005:\0016\022\021\n\006matype\0303 \001("
    "\005:\0010\022\024\n\tmaPeriod1\0304 \001(\005:\0015\022\025\n\tmaPeriod2\030"
    "5 \001(\005:\00210\022\025\n\tmaPeriod3\0306 \001(\005:\00220\022\025\n\tmaPe"
    "riod4\0307 \001(\005:\00240\022\025\n\tmaPeriod5\0308 \001(\005:\00260\"S"
    "\n\tOHLCVData\022\014\n\004open\030\001 \001(\001\022\014\n\004high\030\002 \001(\001\022"
    "\013\n\003low\030\003 \001(\001\022\r\n\005close\030\004 \001(\001\022\016\n\006volume\030\005 "
    "\001(\005\"q\n\tDateOHLCV\022\014\n\004date\030\001 \001(\005\022\014\n\004open\030\002"
    " \001(\002\022\014\n\004high\030\003 \001(\002\022\013\n\003low\030\004 \001(\002\022\r\n\005close"
    "\030\005 \001(\002\022\016\n\006amount\030\006 \001(\002\022\016\n\006volume\030\007 \001(\003\"\203"
    "\001\n\rDateTimeOHLCV\022\014\n\004date\030\001 \001(\005\022\014\n\004time\030\002"
    " \001(\005\022\014\n\004open\030\003 \001(\002\022\014\n\004high\030\004 \001(\002\022\013\n\003low\030"
    "\005 \001(\002\022\r\n\005close\030\006 \001(\002\022\016\n\006amount\030\007 \001(\002\022\016\n\006"
    "volume\030\010 \001(\003\"\203\001\n\nTDXDayData\022\014\n\004date\030\001 \001("
    "\005\022\014\n\004open\030\002 \001(\005\022\014\n\004high\030\003 \001(\005\022\013\n\003low\030\004 \001"
    "(\005\022\r\n\005close\030\005 \001(\005\022\016\n\006amount\030\006 \001(\002\022\016\n\006vol"
    "ume\030\007 \001(\005\022\017\n\007reserve\030\010 \001(\005\"\224\001\n\nTDXMinDat"
    "a\022\014\n\004date\030\001 \001(\005\022\017\n\007minutes\030\002 \001(\005\022\014\n\004open"
    "\030\003 \001(\002\022\014\n\004high\030\004 \001(\002\022\013\n\003low\030\005 \001(\002\022\r\n\005clo"
    "se\030\006 \001(\002\022\016\n\006amount\030\007 \001(\002\022\016\n\006volume\030\010 \001(\005"
    "\022\017\n\007reserve\030\t \001(\005\"\365\n\n\022KCBPTagQuoteInfo10"
    "\022\017\n\007cMarket\030\001 \001(\005\022\021\n\tszStkcode\030\002 \001(\t\022\021\n\t"
    "szStkname\030\003 \001(\t\022\024\n\014dbClosePrice\030\004 \001(\001\022\023\n"
    "\013dbOpenPrice\030\005 \001(\001\022\023\n\013dbLastPrice\030\006 \001(\001\022"
    "\023\n\013dbHighPrice\030\007 \001(\001\022\022\n\ndbLowPrice\030\010 \001(\001"
    "\022\022\n\ndbMatchQty\030\t \001(\001\022\022\n\ndbMatchAmt\030\n \001(\001"
    "\022\026\n\016dbMaxRiseValue\030\013 \001(\001\022\026\n\016dbMaxDownVal"
    "ue\030\014 \001(\001\022\022\n\ndbAvgPrice\030\r \001(\001\022\023\n\013dbBuyPri"
    "ce1\030\016 \001(\001\022\023\n\013nBuyVolume1\030\017 \001(\005\022\023\n\013dbBuyP"
    "rice2\030\020 \001(\001\022\023\n\013nBuyVolume2\030\021 \001(\005\022\023\n\013dbBu"
    "yPrice3\030\022 \001(\001\022\023\n\013nBuyVolume3\030\023 \001(\005\022\023\n\013db"
    "BuyPrice4\030\024 \001(\001\022\023\n\013nBuyVolume4\030\025 \001(\005\022\023\n\013"
    "dbBuyPrice5\030\026 \001(\001\022\023\n\013nBuyVolume5\030\027 \001(\005\022\023"
    "\n\013dbBuyPrice6\030\030 \001(\001\022\023\n\013nBuyVolume6\030\031 \001(\005"
    "\022\023\n\013dbBuyPrice7\030\032 \001(\001\022\023\n\013nBuyVolume7\030\033 \001"
    "(\005\022\023\n\013dbBuyPrice8\030\034 \001(\001\022\023\n\013nBuyVolume8\030\035"
    " \001(\005\022\023\n\013dbBuyPrice9\030\036 \001(\001\022\023\n\013nBuyVolume9"
    "\030\037 \001(\005\022\024\n\014dbBuyPrice10\030  \001(\001\022\024\n\014nBuyVolu"
    "me10\030! \001(\005\022\024\n\014dbSalePrice1\030\" \001(\001\022\024\n\014nSal"
    "eVolume1\030# \001(\005\022\024\n\014dbSalePrice2\030$ \001(\001\022\024\n\014"
    "nSaleVolume2\030% \001(\005\022\024\n\014dbSalePrice3\030& \001(\001"
    "\022\024\n\014nSaleVolume3\030\' \001(\005\022\024\n\014dbSalePrice4\030("
    " \001(\001\022\024\n\014nSaleVolume4\030) \001(\005\022\024\n\014dbSalePric"
    "e5\030* \001(\001\022\024\n\014nSaleVolume5\030+ \001(\005\022\024\n\014dbSale"
    "Price6\030, \001(\001\022\024\n\014nSaleVolume6\030- \001(\005\022\024\n\014db"
    "SalePrice7\030. \001(\001\022\024\n\014nSaleVolume7\030/ \001(\005\022\024"
    "\n\014dbSalePrice8\0300 \001(\001\022\024\n\014nSaleVolume8\0301 \001"
    "(\005\022\024\n\014dbSalePrice9\0302 \001(\001\022\024\n\014nSaleVolume9"
    "\0303 \001(\005\022\025\n\rdbSalePrice10\0304 \001(\001\022\025\n\rnSaleVo"
    "lume10\0305 \001(\005\022\025\n\rcProductClass\0306 \001(\005\022\030\n\020n"
    "PreOpenInterest\0307 \001(\005\022\025\n\rnOpenInterest\0308"
    " \001(\005\022\023\n\013dbSettPrice\0309 \001(\001\022\026\n\016dbPreSettPr"
    "ice\030: \001(\001\022\026\n\016dbFtClosePrice\030; \001(\001\022\021\n\tcSt"
    "opFlag\030< \001(\005\022\021\n\tnBusidate\030= \001(\005\022\023\n\013nUpda"
    "teTime\030> \001(\005\022\027\n\017nUpdateMillisec\030\? \001(\005\022\022\n"
    "\nszReserved\030@ \001(\t\"\232\007\n\021KCBPTagQuoteInfo5\022"
    "\017\n\007cMarket\030\001 \001(\005\022\021\n\tszStkcode\030\002 \001(\t\022\021\n\ts"
    "zStkname\030\003 \001(\t\022\025\n\rcProductClass\030\004 \001(\005\022\023\n"
    "\013nTradingDay\030\005 \001(\005\022\030\n\020nPreOpenInterest\030\006"
    " \001(\005\022\026\n\016dbPreSettPrice\030\007 \001(\001\022\023\n\013dbOpenPr"
    "ice\030\010 \001(\001\022\031\n\021dbUpperLimitPrice\030\t \001(\001\022\031\n\021"
    "dbLowerLimitPrice\030\n \001(\001\022\023\n\013dbSettPrice\030\013"
    " \001(\001\022\024\n\014dbClosePrice\030\014 \001(\001\022\r\n\005cTpbz\030\r \001("
    "\005\022\027\n\017nUpdateMillisec\030\016 \001(\005\022\023\n\013nUpdateTim"
    "e\030\017 \001(\005\022\025\n\rnOpenInterest\030\020 \001(\005\022\022\n\ndbMatc"
    "hQty\030\021 \001(\001\022\022\n\ndbMatchAmt\030\022 \001(\001\022\023\n\013dbLast"
    "Price\030\023 \001(\001\022\022\n\ndbAvgPrice\030\024 \001(\001\022\023\n\013dbHig"
    "hPrice\030\025 \001(\001\022\022\n\ndbLowPrice\030\026 \001(\001\022\024\n\014dbSa"
    "lePrice0\030\027 \001(\001\022\024\n\014nSaleVolume0\030\030 \001(\005\022\023\n\013"
    "dbBuyPrice0\030\031 \001(\001\022\023\n\013nBuyVolume0\030\032 \001(\005\022\024"
    "\n\014dbSalePrice1\030\033 \001(\001\022\024\n\014nSaleVolume1\030\034 \001"
    "(\005\022\023\n\013dbBuyPrice1\030\035 \001(\001\022\023\n\013nBuyVolume1\030\036"
    " \001(\005\022\024\n\014dbSalePrice2\030\037 \001(\001\022\024\n\014nSaleVolum"
    "e2\030  \001(\005\022\023\n\013dbBuyPrice2\030! \001(\001\022\023\n\013nBuyVol"
    "ume2\030\" \001(\005\022\024\n\014dbSalePrice3\030# \001(\001\022\024\n\014nSal"
    "eVolume3\030$ \001(\005\022\023\n\013dbBuyPrice3\030% \001(\001\022\023\n\013n"
    "BuyVolume3\030& \001(\005\022\024\n\014dbSalePrice4\030\' \001(\001\022\024"
    "\n\014nSaleVolume4\030( \001(\005\022\023\n\013dbBuyPrice4\030) \001("
    "\001\022\023\n\013nBuyVolume4\030* \001(\005\"\365\004\n\rSinaQuoteData"
    "\022\022\n\nexchangeID\030\001 \001(\t\022\024\n\014instrumentID\030\002 \001"
    "(\t\022\026\n\016instrumentName\030\003 \001(\t\022\017\n\007dateStr\030\004 "
    "\001(\t\022\017\n\007timeStr\030\005 \001(\t\022\022\n\ndTotVolume\030\006 \001(\001"
    "\022\020\n\010turnover\030\007 \001(\001\022\016\n\006lastPx\030\010 \001(\001\022\021\n\top"
    "enPrice\030\t \001(\001\022\016\n\006highPx\030\n \001(\001\022\r\n\005lowPx\030\013"
    " \001(\001\022\022\n\nclosePrice\030\014 \001(\001\022\021\n\tbidPrice1\030\r "
    "\001(\001\022\022\n\nbidVolume1\030\016 \001(\005\022\021\n\taskPrice1\030\017 \001"
    "(\001\022\022\n\naskVolume1\030\020 \001(\005\022\021\n\tbidPrice2\030\021 \001("
    "\001\022\022\n\nbidVolume2\030\022 \001(\005\022\021\n\taskPrice2\030\023 \001(\001"
    "\022\022\n\naskVolume2\030\024 \001(\005\022\021\n\tbidPrice3\030\025 \001(\001\022"
    "\022\n\nbidVolume3\030\026 \001(\005\022\021\n\taskPrice3\030\027 \001(\001\022\022"
    "\n\naskVolume3\030\030 \001(\005\022\021\n\tbidPrice4\030\031 \001(\001\022\022\n"
    "\nbidVolume4\030\032 \001(\005\022\021\n\taskPrice4\030\033 \001(\001\022\022\n\n"
    "askVolume4\030\034 \001(\005\022\021\n\tbidPrice5\030\035 \001(\001\022\022\n\nb"
    "idVolume5\030\036 \001(\005\022\021\n\taskPrice5\030\037 \001(\001\022\022\n\nas"
    "kVolume5\030  \001(\005\"o\n\027PyAT_OrderExecutionInf"
    "o\022\020\n\005price\030\001 \001(\001:\0010\022\023\n\010quantity\030\002 \001(\005:\0010"
    "\022\025\n\ncommission\030\003 \001(\001:\0010\022\026\n\014filldatetime\030"
    "\004 \001(\t:\000\"\263\003\n\016PyAT_OrderData\022\r\n\002id\030\001 \001(\005:\001"
    "0\022\024\n\tordertype\030\002 \001(\005:\0010\022\026\n\013orderaction\030\003"
    " \001(\005:\0010\022\026\n\014instrumentid\030\004 \001(\t:\000\022\023\n\010quant"
    "ity\030\005 \001(\005:\0010\022\023\n\010filledsz\030\006 \001(\005:\0010\022\027\n\014avg"
    "fillprice\030\007 \001(\001:\0010\022\036\n\020goodtillcanceled\030\010"
    " \001(\010:\004true\022\026\n\013commissions\030\t \001(\001:\0010\022\030\n\tal"
    "lornone\030\n \001(\010:\005false\022\025\n\norderstate\030\013 \001(\005"
    ":\0010\022\030\n\016submitdatetime\030\014 \001(\t:\000\022\031\n\016executi"
    "onprice\030\024 \001(\001:\0010\022\034\n\021executionquantity\030\025 "
    "\001(\005:\0010\022\036\n\023executioncommission\030\026 \001(\001:\0010\022\033"
    "\n\021executiondatetime\030\027 \001(\t:\000\022\020\n\005xtoid\030\036 \001"
    "(\005:\0010", 22485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "XTData.proto", &protobuf_RegisterTypes);
  PBTagMsg::default_instance_ = new PBTagMsg();
  PBMsg::default_instance_ = new PBMsg();
  PBMsgMap::default_instance_ = new PBMsgMap();
  PBTagMsgMap::default_instance_ = new PBTagMsgMap();
  ApiPBTagMsg::default_instance_ = new ApiPBTagMsg();
  TagMsg::default_instance_ = new TagMsg();
  TagData::default_instance_ = new TagData();
  StringMapData::default_instance_ = new StringMapData();
  TsRange::default_instance_ = new TsRange();
  SessionCfgData::_default_begintime_ =
      new ::std::string("00:00:00", 8);
  SessionCfgData::_default_endtime_ =
      new ::std::string("00:00:00", 8);
  SessionCfgData::default_instance_ = new SessionCfgData();
  SessionInfo::default_instance_ = new SessionInfo();
  DoubleParam::default_instance_ = new DoubleParam();
  IntParam::default_instance_ = new IntParam();
  Int64Param::default_instance_ = new Int64Param();
  DoubleIntParams::default_instance_ = new DoubleIntParams();
  DoubleFunctionParams::default_instance_ = new DoubleFunctionParams();
  PointData::default_instance_ = new PointData();
  PointDataMap::default_instance_ = new PointDataMap();
  PointDataList::default_instance_ = new PointDataList();
  CurveCfgData::default_instance_ = new CurveCfgData();
  CurveData::default_instance_ = new CurveData();
  InstrSpecData::default_instance_ = new InstrSpecData();
  StratCfgData::_default_name_ =
      new ::std::string("strategy", 8);
  StratCfgData::default_instance_ = new StratCfgData();
  InstrCfgData::default_instance_ = new InstrCfgData();
  InstrData::default_instance_ = new InstrData();
  FCCfgData::default_instance_ = new FCCfgData();
  FCData::default_instance_ = new FCData();
  OCCfgData::default_instance_ = new OCCfgData();
  OCData::default_instance_ = new OCData();
  PICfgData::default_instance_ = new PICfgData();
  PIData::default_instance_ = new PIData();
  OrderMgrData::default_instance_ = new OrderMgrData();
  OrderMgrCfgData::default_instance_ = new OrderMgrCfgData();
  ForQuoteMgrCfgData::default_instance_ = new ForQuoteMgrCfgData();
  CfgData::default_instance_ = new CfgData();
  ExchangeInfo::default_instance_ = new ExchangeInfo();
  FillInfo::default_instance_ = new FillInfo();
  FillStatData::default_instance_ = new FillStatData();
  VolumeOutlayPair::default_instance_ = new VolumeOutlayPair();
  OrderInfo::default_instance_ = new OrderInfo();
  QuoteInfo::default_instance_ = new QuoteInfo();
  ForQuoteInfo::default_instance_ = new ForQuoteInfo();
  VolumeAmount::default_instance_ = new VolumeAmount();
  PxVolume::default_instance_ = new PxVolume();
  IntPxHalfExposure::default_instance_ = new IntPxHalfExposure();
  IntPxInfo::default_instance_ = new IntPxInfo();
  IntPxOrderInfo::default_instance_ = new IntPxOrderInfo();
  HalfExposure::default_instance_ = new HalfExposure();
  MktQuoteData::default_instance_ = new MktQuoteData();
  GreeksData::default_instance_ = new GreeksData();
  PosData::default_instance_ = new PosData();
  RPnLData::default_instance_ = new RPnLData();
  UPnLData::default_instance_ = new UPnLData();
  PosGreeksData::default_instance_ = new PosGreeksData();
  QuoteData::default_instance_ = new QuoteData();
  VolatilityData::default_instance_ = new VolatilityData();
  TaqStatData::default_instance_ = new TaqStatData();
  XpStatData::default_instance_ = new XpStatData();
  OrdersSzPair::default_instance_ = new OrdersSzPair();
  OrderStatData::default_instance_ = new OrderStatData();
  DayData::default_instance_ = new DayData();
  BarInfo::default_instance_ = new BarInfo();
  BarInfoMap::default_instance_ = new BarInfoMap();
  ProductInfo::default_instance_ = new ProductInfo();
  InstrumentInfo::default_instance_ = new InstrumentInfo();
  InstrumentEventInfo::default_instance_ = new InstrumentEventInfo();
  TAParams::default_instance_ = new TAParams();
  OHLCVData::default_instance_ = new OHLCVData();
  DateOHLCV::default_instance_ = new DateOHLCV();
  DateTimeOHLCV::default_instance_ = new DateTimeOHLCV();
  TDXDayData::default_instance_ = new TDXDayData();
  TDXMinData::default_instance_ = new TDXMinData();
  KCBPTagQuoteInfo10::default_instance_ = new KCBPTagQuoteInfo10();
  KCBPTagQuoteInfo5::default_instance_ = new KCBPTagQuoteInfo5();
  SinaQuoteData::default_instance_ = new SinaQuoteData();
  PyAT_OrderExecutionInfo::default_instance_ = new PyAT_OrderExecutionInfo();
  PyAT_OrderData::default_instance_ = new PyAT_OrderData();
  PBTagMsg::default_instance_->InitAsDefaultInstance();
  PBMsg::default_instance_->InitAsDefaultInstance();
  PBMsgMap::default_instance_->InitAsDefaultInstance();
  PBTagMsgMap::default_instance_->InitAsDefaultInstance();
  ApiPBTagMsg::default_instance_->InitAsDefaultInstance();
  TagMsg::default_instance_->InitAsDefaultInstance();
  TagData::default_instance_->InitAsDefaultInstance();
  StringMapData::default_instance_->InitAsDefaultInstance();
  TsRange::default_instance_->InitAsDefaultInstance();
  SessionCfgData::default_instance_->InitAsDefaultInstance();
  SessionInfo::default_instance_->InitAsDefaultInstance();
  DoubleParam::default_instance_->InitAsDefaultInstance();
  IntParam::default_instance_->InitAsDefaultInstance();
  Int64Param::default_instance_->InitAsDefaultInstance();
  DoubleIntParams::default_instance_->InitAsDefaultInstance();
  DoubleFunctionParams::default_instance_->InitAsDefaultInstance();
  PointData::default_instance_->InitAsDefaultInstance();
  PointDataMap::default_instance_->InitAsDefaultInstance();
  PointDataList::default_instance_->InitAsDefaultInstance();
  CurveCfgData::default_instance_->InitAsDefaultInstance();
  CurveData::default_instance_->InitAsDefaultInstance();
  InstrSpecData::default_instance_->InitAsDefaultInstance();
  StratCfgData::default_instance_->InitAsDefaultInstance();
  InstrCfgData::default_instance_->InitAsDefaultInstance();
  InstrData::default_instance_->InitAsDefaultInstance();
  FCCfgData::default_instance_->InitAsDefaultInstance();
  FCData::default_instance_->InitAsDefaultInstance();
  OCCfgData::default_instance_->InitAsDefaultInstance();
  OCData::default_instance_->InitAsDefaultInstance();
  PICfgData::default_instance_->InitAsDefaultInstance();
  PIData::default_instance_->InitAsDefaultInstance();
  OrderMgrData::default_instance_->InitAsDefaultInstance();
  OrderMgrCfgData::default_instance_->InitAsDefaultInstance();
  ForQuoteMgrCfgData::default_instance_->InitAsDefaultInstance();
  CfgData::default_instance_->InitAsDefaultInstance();
  ExchangeInfo::default_instance_->InitAsDefaultInstance();
  FillInfo::default_instance_->InitAsDefaultInstance();
  FillStatData::default_instance_->InitAsDefaultInstance();
  VolumeOutlayPair::default_instance_->InitAsDefaultInstance();
  OrderInfo::default_instance_->InitAsDefaultInstance();
  QuoteInfo::default_instance_->InitAsDefaultInstance();
  ForQuoteInfo::default_instance_->InitAsDefaultInstance();
  VolumeAmount::default_instance_->InitAsDefaultInstance();
  PxVolume::default_instance_->InitAsDefaultInstance();
  IntPxHalfExposure::default_instance_->InitAsDefaultInstance();
  IntPxInfo::default_instance_->InitAsDefaultInstance();
  IntPxOrderInfo::default_instance_->InitAsDefaultInstance();
  HalfExposure::default_instance_->InitAsDefaultInstance();
  MktQuoteData::default_instance_->InitAsDefaultInstance();
  GreeksData::default_instance_->InitAsDefaultInstance();
  PosData::default_instance_->InitAsDefaultInstance();
  RPnLData::default_instance_->InitAsDefaultInstance();
  UPnLData::default_instance_->InitAsDefaultInstance();
  PosGreeksData::default_instance_->InitAsDefaultInstance();
  QuoteData::default_instance_->InitAsDefaultInstance();
  VolatilityData::default_instance_->InitAsDefaultInstance();
  TaqStatData::default_instance_->InitAsDefaultInstance();
  XpStatData::default_instance_->InitAsDefaultInstance();
  OrdersSzPair::default_instance_->InitAsDefaultInstance();
  OrderStatData::default_instance_->InitAsDefaultInstance();
  DayData::default_instance_->InitAsDefaultInstance();
  BarInfo::default_instance_->InitAsDefaultInstance();
  BarInfoMap::default_instance_->InitAsDefaultInstance();
  ProductInfo::default_instance_->InitAsDefaultInstance();
  InstrumentInfo::default_instance_->InitAsDefaultInstance();
  InstrumentEventInfo::default_instance_->InitAsDefaultInstance();
  TAParams::default_instance_->InitAsDefaultInstance();
  OHLCVData::default_instance_->InitAsDefaultInstance();
  DateOHLCV::default_instance_->InitAsDefaultInstance();
  DateTimeOHLCV::default_instance_->InitAsDefaultInstance();
  TDXDayData::default_instance_->InitAsDefaultInstance();
  TDXMinData::default_instance_->InitAsDefaultInstance();
  KCBPTagQuoteInfo10::default_instance_->InitAsDefaultInstance();
  KCBPTagQuoteInfo5::default_instance_->InitAsDefaultInstance();
  SinaQuoteData::default_instance_->InitAsDefaultInstance();
  PyAT_OrderExecutionInfo::default_instance_->InitAsDefaultInstance();
  PyAT_OrderData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_XTData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_XTData_2eproto {
  StaticDescriptorInitializer_XTData_2eproto() {
    protobuf_AddDesc_XTData_2eproto();
  }
} static_descriptor_initializer_XTData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBTagMsg::kTagFieldNumber;
const int PBTagMsg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBTagMsg::PBTagMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PBTagMsg)
}

void PBTagMsg::InitAsDefaultInstance() {
}

PBTagMsg::PBTagMsg(const PBTagMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PBTagMsg)
}

void PBTagMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTagMsg::~PBTagMsg() {
  // @@protoc_insertion_point(destructor:XT.PBTagMsg)
  SharedDtor();
}

void PBTagMsg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBTagMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTagMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTagMsg_descriptor_;
}

const PBTagMsg& PBTagMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PBTagMsg* PBTagMsg::default_instance_ = NULL;

PBTagMsg* PBTagMsg::New(::google::protobuf::Arena* arena) const {
  PBTagMsg* n = new PBTagMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBTagMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PBTagMsg)
  if (_has_bits_[0 / 32] & 3u) {
    tag_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBTagMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PBTagMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBTagMsg.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PBTagMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PBTagMsg)
  return false;
#undef DO_
}

void PBTagMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PBTagMsg)
  // optional int32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBTagMsg.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PBTagMsg)
}

::google::protobuf::uint8* PBTagMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PBTagMsg)
  // optional int32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBTagMsg.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PBTagMsg)
  return target;
}

int PBTagMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PBTagMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTagMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PBTagMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PBTagMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBTagMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PBTagMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PBTagMsg)
    MergeFrom(*source);
  }
}

void PBTagMsg::MergeFrom(const PBTagMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PBTagMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBTagMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PBTagMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTagMsg::CopyFrom(const PBTagMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PBTagMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTagMsg::IsInitialized() const {

  return true;
}

void PBTagMsg::Swap(PBTagMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBTagMsg::InternalSwap(PBTagMsg* other) {
  std::swap(tag_, other->tag_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBTagMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTagMsg_descriptor_;
  metadata.reflection = PBTagMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBTagMsg

// optional int32 tag = 1;
bool PBTagMsg::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBTagMsg::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void PBTagMsg::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBTagMsg::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::google::protobuf::int32 PBTagMsg::tag() const {
  // @@protoc_insertion_point(field_get:XT.PBTagMsg.tag)
  return tag_;
}
 void PBTagMsg::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:XT.PBTagMsg.tag)
}

// optional string msg = 2;
bool PBTagMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBTagMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void PBTagMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBTagMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& PBTagMsg::msg() const {
  // @@protoc_insertion_point(field_get:XT.PBTagMsg.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTagMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PBTagMsg.msg)
}
 void PBTagMsg::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PBTagMsg.msg)
}
 void PBTagMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PBTagMsg.msg)
}
 ::std::string* PBTagMsg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:XT.PBTagMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTagMsg::release_msg() {
  // @@protoc_insertion_point(field_release:XT.PBTagMsg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTagMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:XT.PBTagMsg.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsg::kTagFieldNumber;
const int PBMsg::kNameFieldNumber;
const int PBMsg::kDatastrFieldNumber;
const int PBMsg::kCfgstrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsg::PBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PBMsg)
}

void PBMsg::InitAsDefaultInstance() {
}

PBMsg::PBMsg(const PBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PBMsg)
}

void PBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datastr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsg::~PBMsg() {
  // @@protoc_insertion_point(destructor:XT.PBMsg)
  SharedDtor();
}

void PBMsg::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datastr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsg_descriptor_;
}

const PBMsg& PBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PBMsg* PBMsg::default_instance_ = NULL;

PBMsg* PBMsg::New(::google::protobuf::Arena* arena) const {
  PBMsg* n = new PBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PBMsg)
  if (_has_bits_[0 / 32] & 15u) {
    tag_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_datastr()) {
      datastr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cfgstr()) {
      cfgstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBMsg.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datastr;
        break;
      }

      // optional string datastr = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_datastr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datastr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datastr().data(), this->datastr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBMsg.datastr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cfgstr;
        break;
      }

      // optional string cfgstr = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_cfgstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cfgstr().data(), this->cfgstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBMsg.cfgstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PBMsg)
  return false;
#undef DO_
}

void PBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PBMsg)
  // optional int32 tag = 1 [default = 0];
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // optional string name = 2 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsg.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string datastr = 3 [default = ""];
  if (has_datastr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datastr().data(), this->datastr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsg.datastr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->datastr(), output);
  }

  // optional string cfgstr = 4 [default = ""];
  if (has_cfgstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfgstr().data(), this->cfgstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsg.cfgstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cfgstr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PBMsg)
}

::google::protobuf::uint8* PBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PBMsg)
  // optional int32 tag = 1 [default = 0];
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // optional string name = 2 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsg.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string datastr = 3 [default = ""];
  if (has_datastr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datastr().data(), this->datastr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsg.datastr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->datastr(), target);
  }

  // optional string cfgstr = 4 [default = ""];
  if (has_cfgstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfgstr().data(), this->cfgstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsg.cfgstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cfgstr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PBMsg)
  return target;
}

int PBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 tag = 1 [default = 0];
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional string name = 2 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string datastr = 3 [default = ""];
    if (has_datastr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datastr());
    }

    // optional string cfgstr = 4 [default = ""];
    if (has_cfgstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfgstr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PBMsg)
    MergeFrom(*source);
  }
}

void PBMsg::MergeFrom(const PBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_datastr()) {
      set_has_datastr();
      datastr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datastr_);
    }
    if (from.has_cfgstr()) {
      set_has_cfgstr();
      cfgstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgstr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsg::CopyFrom(const PBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsg::IsInitialized() const {

  return true;
}

void PBMsg::Swap(PBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsg::InternalSwap(PBMsg* other) {
  std::swap(tag_, other->tag_);
  name_.Swap(&other->name_);
  datastr_.Swap(&other->datastr_);
  cfgstr_.Swap(&other->cfgstr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsg_descriptor_;
  metadata.reflection = PBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsg

// optional int32 tag = 1 [default = 0];
bool PBMsg::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBMsg::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void PBMsg::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBMsg::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::google::protobuf::int32 PBMsg::tag() const {
  // @@protoc_insertion_point(field_get:XT.PBMsg.tag)
  return tag_;
}
 void PBMsg::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:XT.PBMsg.tag)
}

// optional string name = 2 [default = ""];
bool PBMsg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBMsg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void PBMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PBMsg::name() const {
  // @@protoc_insertion_point(field_get:XT.PBMsg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PBMsg.name)
}
 void PBMsg::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PBMsg.name)
}
 void PBMsg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PBMsg.name)
}
 ::std::string* PBMsg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.PBMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsg::release_name() {
  // @@protoc_insertion_point(field_release:XT.PBMsg.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.PBMsg.name)
}

// optional string datastr = 3 [default = ""];
bool PBMsg::has_datastr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBMsg::set_has_datastr() {
  _has_bits_[0] |= 0x00000004u;
}
void PBMsg::clear_has_datastr() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBMsg::clear_datastr() {
  datastr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datastr();
}
 const ::std::string& PBMsg::datastr() const {
  // @@protoc_insertion_point(field_get:XT.PBMsg.datastr)
  return datastr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsg::set_datastr(const ::std::string& value) {
  set_has_datastr();
  datastr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PBMsg.datastr)
}
 void PBMsg::set_datastr(const char* value) {
  set_has_datastr();
  datastr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PBMsg.datastr)
}
 void PBMsg::set_datastr(const char* value, size_t size) {
  set_has_datastr();
  datastr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PBMsg.datastr)
}
 ::std::string* PBMsg::mutable_datastr() {
  set_has_datastr();
  // @@protoc_insertion_point(field_mutable:XT.PBMsg.datastr)
  return datastr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsg::release_datastr() {
  // @@protoc_insertion_point(field_release:XT.PBMsg.datastr)
  clear_has_datastr();
  return datastr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsg::set_allocated_datastr(::std::string* datastr) {
  if (datastr != NULL) {
    set_has_datastr();
  } else {
    clear_has_datastr();
  }
  datastr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datastr);
  // @@protoc_insertion_point(field_set_allocated:XT.PBMsg.datastr)
}

// optional string cfgstr = 4 [default = ""];
bool PBMsg::has_cfgstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBMsg::set_has_cfgstr() {
  _has_bits_[0] |= 0x00000008u;
}
void PBMsg::clear_has_cfgstr() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBMsg::clear_cfgstr() {
  cfgstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cfgstr();
}
 const ::std::string& PBMsg::cfgstr() const {
  // @@protoc_insertion_point(field_get:XT.PBMsg.cfgstr)
  return cfgstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsg::set_cfgstr(const ::std::string& value) {
  set_has_cfgstr();
  cfgstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PBMsg.cfgstr)
}
 void PBMsg::set_cfgstr(const char* value) {
  set_has_cfgstr();
  cfgstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PBMsg.cfgstr)
}
 void PBMsg::set_cfgstr(const char* value, size_t size) {
  set_has_cfgstr();
  cfgstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PBMsg.cfgstr)
}
 ::std::string* PBMsg::mutable_cfgstr() {
  set_has_cfgstr();
  // @@protoc_insertion_point(field_mutable:XT.PBMsg.cfgstr)
  return cfgstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsg::release_cfgstr() {
  // @@protoc_insertion_point(field_release:XT.PBMsg.cfgstr)
  clear_has_cfgstr();
  return cfgstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsg::set_allocated_cfgstr(::std::string* cfgstr) {
  if (cfgstr != NULL) {
    set_has_cfgstr();
  } else {
    clear_has_cfgstr();
  }
  cfgstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgstr);
  // @@protoc_insertion_point(field_set_allocated:XT.PBMsg.cfgstr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgMap::kNameFieldNumber;
const int PBMsgMap::kStrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgMap::PBMsgMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PBMsgMap)
}

void PBMsgMap::InitAsDefaultInstance() {
}

PBMsgMap::PBMsgMap(const PBMsgMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PBMsgMap)
}

void PBMsgMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  strmap_.SetEntryDescriptor(
      &::XT::PBMsgMap_StrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsgMap::~PBMsgMap() {
  // @@protoc_insertion_point(destructor:XT.PBMsgMap)
  SharedDtor();
}

void PBMsgMap::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgMap_descriptor_;
}

const PBMsgMap& PBMsgMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PBMsgMap* PBMsgMap::default_instance_ = NULL;

PBMsgMap* PBMsgMap::New(::google::protobuf::Arena* arena) const {
  PBMsgMap* n = new PBMsgMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgMap::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PBMsgMap)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  strmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBMsgMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PBMsgMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBMsgMap.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strmap;
        break;
      }

      // map<string, string> strmap = 2;
      case 2: {
        if (tag == 18) {
         parse_strmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_strmap:
          PBMsgMap_StrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&strmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBMsgMap.StrmapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBMsgMap.StrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_strmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PBMsgMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PBMsgMap)
  return false;
#undef DO_
}

void PBMsgMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PBMsgMap)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsgMap.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, string> strmap = 2;
  if (!this->strmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PBMsgMap.StrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PBMsgMap.StrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->strmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PBMsgMap_StrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PBMsgMap_StrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it) {
        entry.reset(strmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PBMsgMap)
}

::google::protobuf::uint8* PBMsgMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PBMsgMap)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PBMsgMap.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, string> strmap = 2;
  if (!this->strmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PBMsgMap.StrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PBMsgMap.StrmapEntry.value");
      }
    };

    if (deterministic &&
        this->strmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PBMsgMap_StrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PBMsgMap_StrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it) {
        entry.reset(strmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PBMsgMap)
  return target;
}

int PBMsgMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PBMsgMap)
  int total_size = 0;

  // optional string name = 1 [default = ""];
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // map<string, string> strmap = 2;
  total_size += 1 * this->strmap_size();
  {
    ::google::protobuf::scoped_ptr<PBMsgMap_StrmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->strmap().begin();
        it != this->strmap().end(); ++it) {
      entry.reset(strmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PBMsgMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PBMsgMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PBMsgMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PBMsgMap)
    MergeFrom(*source);
  }
}

void PBMsgMap::MergeFrom(const PBMsgMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PBMsgMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  strmap_.MergeFrom(from.strmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBMsgMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PBMsgMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgMap::CopyFrom(const PBMsgMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PBMsgMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgMap::IsInitialized() const {

  return true;
}

void PBMsgMap::Swap(PBMsgMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgMap::InternalSwap(PBMsgMap* other) {
  name_.Swap(&other->name_);
  strmap_.Swap(&other->strmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgMap_descriptor_;
  metadata.reflection = PBMsgMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgMap

// optional string name = 1 [default = ""];
bool PBMsgMap::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBMsgMap::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PBMsgMap::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBMsgMap::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PBMsgMap::name() const {
  // @@protoc_insertion_point(field_get:XT.PBMsgMap.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgMap::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PBMsgMap.name)
}
 void PBMsgMap::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PBMsgMap.name)
}
 void PBMsgMap::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PBMsgMap.name)
}
 ::std::string* PBMsgMap::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.PBMsgMap.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgMap::release_name() {
  // @@protoc_insertion_point(field_release:XT.PBMsgMap.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgMap::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.PBMsgMap.name)
}

// map<string, string> strmap = 2;
int PBMsgMap::strmap_size() const {
  return strmap_.size();
}
void PBMsgMap::clear_strmap() {
  strmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
PBMsgMap::strmap() const {
  // @@protoc_insertion_point(field_map:XT.PBMsgMap.strmap)
  return strmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
PBMsgMap::mutable_strmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.PBMsgMap.strmap)
  return strmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBTagMsgMap::kTagFieldNumber;
const int PBTagMsgMap::kStrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBTagMsgMap::PBTagMsgMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PBTagMsgMap)
}

void PBTagMsgMap::InitAsDefaultInstance() {
}

PBTagMsgMap::PBTagMsgMap(const PBTagMsgMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PBTagMsgMap)
}

void PBTagMsgMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = 0;
  strmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  strmap_.SetEntryDescriptor(
      &::XT::PBTagMsgMap_StrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTagMsgMap::~PBTagMsgMap() {
  // @@protoc_insertion_point(destructor:XT.PBTagMsgMap)
  SharedDtor();
}

void PBTagMsgMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTagMsgMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTagMsgMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTagMsgMap_descriptor_;
}

const PBTagMsgMap& PBTagMsgMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PBTagMsgMap* PBTagMsgMap::default_instance_ = NULL;

PBTagMsgMap* PBTagMsgMap::New(::google::protobuf::Arena* arena) const {
  PBTagMsgMap* n = new PBTagMsgMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBTagMsgMap::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PBTagMsgMap)
  tag_ = 0;
  strmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBTagMsgMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PBTagMsgMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strmap;
        break;
      }

      // map<int32, string> strmap = 2;
      case 2: {
        if (tag == 18) {
         parse_strmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_strmap:
          PBTagMsgMap_StrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&strmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PBTagMsgMap.StrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_strmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PBTagMsgMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PBTagMsgMap)
  return false;
#undef DO_
}

void PBTagMsgMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PBTagMsgMap)
  // optional int32 tag = 1 [default = 0];
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // map<int32, string> strmap = 2;
  if (!this->strmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PBTagMsgMap.StrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->strmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PBTagMsgMap_StrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<PBTagMsgMap_StrmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it) {
        entry.reset(strmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PBTagMsgMap)
}

::google::protobuf::uint8* PBTagMsgMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PBTagMsgMap)
  // optional int32 tag = 1 [default = 0];
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // map<int32, string> strmap = 2;
  if (!this->strmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PBTagMsgMap.StrmapEntry.value");
      }
    };

    if (deterministic &&
        this->strmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PBTagMsgMap_StrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<PBTagMsgMap_StrmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it) {
        entry.reset(strmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PBTagMsgMap)
  return target;
}

int PBTagMsgMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PBTagMsgMap)
  int total_size = 0;

  // optional int32 tag = 1 [default = 0];
  if (has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag());
  }

  // map<int32, string> strmap = 2;
  total_size += 1 * this->strmap_size();
  {
    ::google::protobuf::scoped_ptr<PBTagMsgMap_StrmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->strmap().begin();
        it != this->strmap().end(); ++it) {
      entry.reset(strmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTagMsgMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PBTagMsgMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PBTagMsgMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBTagMsgMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PBTagMsgMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PBTagMsgMap)
    MergeFrom(*source);
  }
}

void PBTagMsgMap::MergeFrom(const PBTagMsgMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PBTagMsgMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  strmap_.MergeFrom(from.strmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBTagMsgMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PBTagMsgMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTagMsgMap::CopyFrom(const PBTagMsgMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PBTagMsgMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTagMsgMap::IsInitialized() const {

  return true;
}

void PBTagMsgMap::Swap(PBTagMsgMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBTagMsgMap::InternalSwap(PBTagMsgMap* other) {
  std::swap(tag_, other->tag_);
  strmap_.Swap(&other->strmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBTagMsgMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTagMsgMap_descriptor_;
  metadata.reflection = PBTagMsgMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBTagMsgMap

// optional int32 tag = 1 [default = 0];
bool PBTagMsgMap::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBTagMsgMap::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void PBTagMsgMap::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBTagMsgMap::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::google::protobuf::int32 PBTagMsgMap::tag() const {
  // @@protoc_insertion_point(field_get:XT.PBTagMsgMap.tag)
  return tag_;
}
 void PBTagMsgMap::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:XT.PBTagMsgMap.tag)
}

// map<int32, string> strmap = 2;
int PBTagMsgMap::strmap_size() const {
  return strmap_.size();
}
void PBTagMsgMap::clear_strmap() {
  strmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
PBTagMsgMap::strmap() const {
  // @@protoc_insertion_point(field_map:XT.PBTagMsgMap.strmap)
  return strmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
PBTagMsgMap::mutable_strmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.PBTagMsgMap.strmap)
  return strmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApiPBTagMsg::kTagFieldNumber;
const int ApiPBTagMsg::kDataFieldNumber;
const int ApiPBTagMsg::kInfoFieldNumber;
const int ApiPBTagMsg::kIdFieldNumber;
const int ApiPBTagMsg::kUidFieldNumber;
const int ApiPBTagMsg::kLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApiPBTagMsg::ApiPBTagMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.ApiPBTagMsg)
}

void ApiPBTagMsg::InitAsDefaultInstance() {
}

ApiPBTagMsg::ApiPBTagMsg(const ApiPBTagMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.ApiPBTagMsg)
}

void ApiPBTagMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  uid_ = 0u;
  last_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiPBTagMsg::~ApiPBTagMsg() {
  // @@protoc_insertion_point(destructor:XT.ApiPBTagMsg)
  SharedDtor();
}

void ApiPBTagMsg::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ApiPBTagMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApiPBTagMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApiPBTagMsg_descriptor_;
}

const ApiPBTagMsg& ApiPBTagMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

ApiPBTagMsg* ApiPBTagMsg::default_instance_ = NULL;

ApiPBTagMsg* ApiPBTagMsg::New(::google::protobuf::Arena* arena) const {
  ApiPBTagMsg* n = new ApiPBTagMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApiPBTagMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.ApiPBTagMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ApiPBTagMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ApiPBTagMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(tag_, id_);
    ZR_(uid_, last_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_info()) {
      info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ApiPBTagMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.ApiPBTagMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ApiPBTagMsg.data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional string info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ApiPBTagMsg.info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 5;
      case 5: {
        if (tag == 40) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last;
        break;
      }

      // optional bool last = 6;
      case 6: {
        if (tag == 48) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.ApiPBTagMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.ApiPBTagMsg)
  return false;
#undef DO_
}

void ApiPBTagMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.ApiPBTagMsg)
  // optional int32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ApiPBTagMsg.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ApiPBTagMsg.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional uint32 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uid(), output);
  }

  // optional bool last = 6;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->last(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.ApiPBTagMsg)
}

::google::protobuf::uint8* ApiPBTagMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.ApiPBTagMsg)
  // optional int32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ApiPBTagMsg.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ApiPBTagMsg.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional uint32 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uid(), target);
  }

  // optional bool last = 6;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->last(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.ApiPBTagMsg)
  return target;
}

int ApiPBTagMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.ApiPBTagMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bool last = 6;
    if (has_last()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiPBTagMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.ApiPBTagMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ApiPBTagMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ApiPBTagMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.ApiPBTagMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.ApiPBTagMsg)
    MergeFrom(*source);
  }
}

void ApiPBTagMsg::MergeFrom(const ApiPBTagMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.ApiPBTagMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_info()) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ApiPBTagMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.ApiPBTagMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApiPBTagMsg::CopyFrom(const ApiPBTagMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.ApiPBTagMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiPBTagMsg::IsInitialized() const {

  return true;
}

void ApiPBTagMsg::Swap(ApiPBTagMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApiPBTagMsg::InternalSwap(ApiPBTagMsg* other) {
  std::swap(tag_, other->tag_);
  data_.Swap(&other->data_);
  info_.Swap(&other->info_);
  std::swap(id_, other->id_);
  std::swap(uid_, other->uid_);
  std::swap(last_, other->last_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApiPBTagMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApiPBTagMsg_descriptor_;
  metadata.reflection = ApiPBTagMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ApiPBTagMsg

// optional int32 tag = 1;
bool ApiPBTagMsg::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ApiPBTagMsg::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void ApiPBTagMsg::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void ApiPBTagMsg::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::google::protobuf::int32 ApiPBTagMsg::tag() const {
  // @@protoc_insertion_point(field_get:XT.ApiPBTagMsg.tag)
  return tag_;
}
 void ApiPBTagMsg::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:XT.ApiPBTagMsg.tag)
}

// optional string data = 2;
bool ApiPBTagMsg::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ApiPBTagMsg::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ApiPBTagMsg::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ApiPBTagMsg::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ApiPBTagMsg::data() const {
  // @@protoc_insertion_point(field_get:XT.ApiPBTagMsg.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ApiPBTagMsg::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ApiPBTagMsg.data)
}
 void ApiPBTagMsg::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ApiPBTagMsg.data)
}
 void ApiPBTagMsg::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ApiPBTagMsg.data)
}
 ::std::string* ApiPBTagMsg::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:XT.ApiPBTagMsg.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ApiPBTagMsg::release_data() {
  // @@protoc_insertion_point(field_release:XT.ApiPBTagMsg.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ApiPBTagMsg::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:XT.ApiPBTagMsg.data)
}

// optional string info = 3;
bool ApiPBTagMsg::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ApiPBTagMsg::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
void ApiPBTagMsg::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void ApiPBTagMsg::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
 const ::std::string& ApiPBTagMsg::info() const {
  // @@protoc_insertion_point(field_get:XT.ApiPBTagMsg.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ApiPBTagMsg::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ApiPBTagMsg.info)
}
 void ApiPBTagMsg::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ApiPBTagMsg.info)
}
 void ApiPBTagMsg::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ApiPBTagMsg.info)
}
 ::std::string* ApiPBTagMsg::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:XT.ApiPBTagMsg.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ApiPBTagMsg::release_info() {
  // @@protoc_insertion_point(field_release:XT.ApiPBTagMsg.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ApiPBTagMsg::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:XT.ApiPBTagMsg.info)
}

// optional int32 id = 4;
bool ApiPBTagMsg::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ApiPBTagMsg::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ApiPBTagMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ApiPBTagMsg::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ApiPBTagMsg::id() const {
  // @@protoc_insertion_point(field_get:XT.ApiPBTagMsg.id)
  return id_;
}
 void ApiPBTagMsg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:XT.ApiPBTagMsg.id)
}

// optional uint32 uid = 5;
bool ApiPBTagMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ApiPBTagMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
void ApiPBTagMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ApiPBTagMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 ApiPBTagMsg::uid() const {
  // @@protoc_insertion_point(field_get:XT.ApiPBTagMsg.uid)
  return uid_;
}
 void ApiPBTagMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:XT.ApiPBTagMsg.uid)
}

// optional bool last = 6;
bool ApiPBTagMsg::has_last() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ApiPBTagMsg::set_has_last() {
  _has_bits_[0] |= 0x00000020u;
}
void ApiPBTagMsg::clear_has_last() {
  _has_bits_[0] &= ~0x00000020u;
}
void ApiPBTagMsg::clear_last() {
  last_ = false;
  clear_has_last();
}
 bool ApiPBTagMsg::last() const {
  // @@protoc_insertion_point(field_get:XT.ApiPBTagMsg.last)
  return last_;
}
 void ApiPBTagMsg::set_last(bool value) {
  set_has_last();
  last_ = value;
  // @@protoc_insertion_point(field_set:XT.ApiPBTagMsg.last)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TagMsg::kTagFieldNumber;
const int TagMsg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TagMsg::TagMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.TagMsg)
}

void TagMsg::InitAsDefaultInstance() {
}

TagMsg::TagMsg(const TagMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.TagMsg)
}

void TagMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagMsg::~TagMsg() {
  // @@protoc_insertion_point(destructor:XT.TagMsg)
  SharedDtor();
}

void TagMsg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TagMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagMsg_descriptor_;
}

const TagMsg& TagMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

TagMsg* TagMsg::default_instance_ = NULL;

TagMsg* TagMsg::New(::google::protobuf::Arena* arena) const {
  TagMsg* n = new TagMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TagMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.TagMsg)
  if (_has_bits_[0 / 32] & 3u) {
    tag_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TagMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.TagMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.TagMsg.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.TagMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.TagMsg)
  return false;
#undef DO_
}

void TagMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.TagMsg)
  // optional int32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.TagMsg.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.TagMsg)
}

::google::protobuf::uint8* TagMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.TagMsg)
  // optional int32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.TagMsg.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.TagMsg)
  return target;
}

int TagMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.TagMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.TagMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TagMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TagMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.TagMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.TagMsg)
    MergeFrom(*source);
  }
}

void TagMsg::MergeFrom(const TagMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.TagMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TagMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.TagMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagMsg::CopyFrom(const TagMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.TagMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagMsg::IsInitialized() const {

  return true;
}

void TagMsg::Swap(TagMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TagMsg::InternalSwap(TagMsg* other) {
  std::swap(tag_, other->tag_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TagMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagMsg_descriptor_;
  metadata.reflection = TagMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TagMsg

// optional int32 tag = 1;
bool TagMsg::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TagMsg::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void TagMsg::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void TagMsg::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::google::protobuf::int32 TagMsg::tag() const {
  // @@protoc_insertion_point(field_get:XT.TagMsg.tag)
  return tag_;
}
 void TagMsg::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:XT.TagMsg.tag)
}

// optional string msg = 2;
bool TagMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TagMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void TagMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void TagMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& TagMsg::msg() const {
  // @@protoc_insertion_point(field_get:XT.TagMsg.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.TagMsg.msg)
}
 void TagMsg::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.TagMsg.msg)
}
 void TagMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.TagMsg.msg)
}
 ::std::string* TagMsg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:XT.TagMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TagMsg::release_msg() {
  // @@protoc_insertion_point(field_release:XT.TagMsg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:XT.TagMsg.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TagData::kIdFieldNumber;
const int TagData::kIntMapFieldNumber;
const int TagData::kDoubleMapFieldNumber;
const int TagData::kLongMapFieldNumber;
const int TagData::kStrMapFieldNumber;
const int TagData::kStrToStrMapFieldNumber;
const int TagData::kNestedMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TagData::TagData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.TagData)
}

void TagData::InitAsDefaultInstance() {
}

TagData::TagData(const TagData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.TagData)
}

void TagData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  intmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  intmap_.SetEntryDescriptor(
      &::XT::TagData_IntMapEntry_descriptor_);
  doublemap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  doublemap_.SetEntryDescriptor(
      &::XT::TagData_DoubleMapEntry_descriptor_);
  longmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  longmap_.SetEntryDescriptor(
      &::XT::TagData_LongMapEntry_descriptor_);
  strmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  strmap_.SetEntryDescriptor(
      &::XT::TagData_StrMapEntry_descriptor_);
  strtostrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  strtostrmap_.SetEntryDescriptor(
      &::XT::TagData_StrToStrMapEntry_descriptor_);
  nestedmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  nestedmap_.SetEntryDescriptor(
      &::XT::TagData_NestedMapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagData::~TagData() {
  // @@protoc_insertion_point(destructor:XT.TagData)
  SharedDtor();
}

void TagData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagData_descriptor_;
}

const TagData& TagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

TagData* TagData::default_instance_ = NULL;

TagData* TagData::New(::google::protobuf::Arena* arena) const {
  TagData* n = new TagData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TagData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.TagData)
  id_ = 0;
  intmap_.Clear();
  doublemap_.Clear();
  longmap_.Clear();
  strmap_.Clear();
  strtostrmap_.Clear();
  nestedmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.TagData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_intMap;
        break;
      }

      // map<int32, int32> intMap = 2;
      case 2: {
        if (tag == 18) {
         parse_intMap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_intMap:
          TagData_IntMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&intmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_intMap;
        if (input->ExpectTag(26)) goto parse_loop_doubleMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, double> doubleMap = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_doubleMap:
          TagData_DoubleMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&doublemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_doubleMap;
        if (input->ExpectTag(34)) goto parse_loop_longMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, int64> longMap = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_longMap:
          TagData_LongMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 > > parser(&longmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_longMap;
        if (input->ExpectTag(42)) goto parse_loop_strMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, string> strMap = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_strMap:
          TagData_StrMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&strmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.TagData.StrMapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_strMap;
        if (input->ExpectTag(50)) goto parse_loop_strToStrMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> strToStrMap = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_strToStrMap:
          TagData_StrToStrMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&strtostrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.TagData.StrToStrMapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.TagData.StrToStrMapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_strToStrMap;
        if (input->ExpectTag(58)) goto parse_loop_nestedMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .XT.TagData> nestedMap = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nestedMap:
          TagData_NestedMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::XT::TagData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XT::TagData > > parser(&nestedmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.TagData.NestedMapEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_nestedMap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.TagData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.TagData)
  return false;
#undef DO_
}

void TagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.TagData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // map<int32, int32> intMap = 2;
  if (!this->intmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->intmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->intmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_IntMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_IntMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it) {
        entry.reset(intmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // map<int32, double> doubleMap = 3;
  if (!this->doublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->doublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->doublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->doublemap().begin();
          it != this->doublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_DoubleMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(doublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_DoubleMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->doublemap().begin();
          it != this->doublemap().end(); ++it) {
        entry.reset(doublemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // map<int32, int64> longMap = 4;
  if (!this->longmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->longmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->longmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->longmap().begin();
          it != this->longmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_LongMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(longmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_LongMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->longmap().begin();
          it != this->longmap().end(); ++it) {
        entry.reset(longmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  // map<int32, string> strMap = 5;
  if (!this->strmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.StrMapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->strmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_StrMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_StrMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it) {
        entry.reset(strmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> strToStrMap = 6;
  if (!this->strtostrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.StrToStrMapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.StrToStrMapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->strtostrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strtostrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_StrToStrMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_StrToStrMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.TagData> nestedMap = 7;
  if (!this->nestedmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::TagData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.NestedMapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->nestedmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nestedmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::TagData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::TagData >::const_iterator
          it = this->nestedmap().begin();
          it != this->nestedmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_NestedMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nestedmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_NestedMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::TagData >::const_iterator
          it = this->nestedmap().begin();
          it != this->nestedmap().end(); ++it) {
        entry.reset(nestedmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.TagData)
}

::google::protobuf::uint8* TagData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.TagData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // map<int32, int32> intMap = 2;
  if (!this->intmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->intmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->intmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_IntMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_IntMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it) {
        entry.reset(intmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, double> doubleMap = 3;
  if (!this->doublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->doublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->doublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->doublemap().begin();
          it != this->doublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_DoubleMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(doublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_DoubleMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->doublemap().begin();
          it != this->doublemap().end(); ++it) {
        entry.reset(doublemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int64> longMap = 4;
  if (!this->longmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->longmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->longmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->longmap().begin();
          it != this->longmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_LongMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(longmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_LongMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->longmap().begin();
          it != this->longmap().end(); ++it) {
        entry.reset(longmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, string> strMap = 5;
  if (!this->strmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.StrMapEntry.value");
      }
    };

    if (deterministic &&
        this->strmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_StrMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_StrMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->strmap().begin();
          it != this->strmap().end(); ++it) {
        entry.reset(strmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> strToStrMap = 6;
  if (!this->strtostrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.StrToStrMapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.StrToStrMapEntry.value");
      }
    };

    if (deterministic &&
        this->strtostrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strtostrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_StrToStrMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_StrToStrMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.TagData> nestedMap = 7;
  if (!this->nestedmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::TagData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.TagData.NestedMapEntry.key");
      }
    };

    if (deterministic &&
        this->nestedmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nestedmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::TagData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::TagData >::const_iterator
          it = this->nestedmap().begin();
          it != this->nestedmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TagData_NestedMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nestedmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TagData_NestedMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::TagData >::const_iterator
          it = this->nestedmap().begin();
          it != this->nestedmap().end(); ++it) {
        entry.reset(nestedmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.TagData)
  return target;
}

int TagData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.TagData)
  int total_size = 0;

  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // map<int32, int32> intMap = 2;
  total_size += 1 * this->intmap_size();
  {
    ::google::protobuf::scoped_ptr<TagData_IntMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->intmap().begin();
        it != this->intmap().end(); ++it) {
      entry.reset(intmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, double> doubleMap = 3;
  total_size += 1 * this->doublemap_size();
  {
    ::google::protobuf::scoped_ptr<TagData_DoubleMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->doublemap().begin();
        it != this->doublemap().end(); ++it) {
      entry.reset(doublemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int64> longMap = 4;
  total_size += 1 * this->longmap_size();
  {
    ::google::protobuf::scoped_ptr<TagData_LongMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
        it = this->longmap().begin();
        it != this->longmap().end(); ++it) {
      entry.reset(longmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, string> strMap = 5;
  total_size += 1 * this->strmap_size();
  {
    ::google::protobuf::scoped_ptr<TagData_StrMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->strmap().begin();
        it != this->strmap().end(); ++it) {
      entry.reset(strmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> strToStrMap = 6;
  total_size += 1 * this->strtostrmap_size();
  {
    ::google::protobuf::scoped_ptr<TagData_StrToStrMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->strtostrmap().begin();
        it != this->strtostrmap().end(); ++it) {
      entry.reset(strtostrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .XT.TagData> nestedMap = 7;
  total_size += 1 * this->nestedmap_size();
  {
    ::google::protobuf::scoped_ptr<TagData_NestedMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::XT::TagData >::const_iterator
        it = this->nestedmap().begin();
        it != this->nestedmap().end(); ++it) {
      entry.reset(nestedmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.TagData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TagData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TagData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.TagData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.TagData)
    MergeFrom(*source);
  }
}

void TagData::MergeFrom(const TagData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.TagData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  intmap_.MergeFrom(from.intmap_);
  doublemap_.MergeFrom(from.doublemap_);
  longmap_.MergeFrom(from.longmap_);
  strmap_.MergeFrom(from.strmap_);
  strtostrmap_.MergeFrom(from.strtostrmap_);
  nestedmap_.MergeFrom(from.nestedmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TagData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.TagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagData::CopyFrom(const TagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.TagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagData::IsInitialized() const {

  return true;
}

void TagData::Swap(TagData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TagData::InternalSwap(TagData* other) {
  std::swap(id_, other->id_);
  intmap_.Swap(&other->intmap_);
  doublemap_.Swap(&other->doublemap_);
  longmap_.Swap(&other->longmap_);
  strmap_.Swap(&other->strmap_);
  strtostrmap_.Swap(&other->strtostrmap_);
  nestedmap_.Swap(&other->nestedmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagData_descriptor_;
  metadata.reflection = TagData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TagData

// optional int32 id = 1;
bool TagData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TagData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TagData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TagData::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 TagData::id() const {
  // @@protoc_insertion_point(field_get:XT.TagData.id)
  return id_;
}
 void TagData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:XT.TagData.id)
}

// map<int32, int32> intMap = 2;
int TagData::intmap_size() const {
  return intmap_.size();
}
void TagData::clear_intmap() {
  intmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
TagData::intmap() const {
  // @@protoc_insertion_point(field_map:XT.TagData.intMap)
  return intmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
TagData::mutable_intmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.TagData.intMap)
  return intmap_.MutableMap();
}

// map<int32, double> doubleMap = 3;
int TagData::doublemap_size() const {
  return doublemap_.size();
}
void TagData::clear_doublemap() {
  doublemap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
TagData::doublemap() const {
  // @@protoc_insertion_point(field_map:XT.TagData.doubleMap)
  return doublemap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
TagData::mutable_doublemap() {
  // @@protoc_insertion_point(field_mutable_map:XT.TagData.doubleMap)
  return doublemap_.MutableMap();
}

// map<int32, int64> longMap = 4;
int TagData::longmap_size() const {
  return longmap_.size();
}
void TagData::clear_longmap() {
  longmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >&
TagData::longmap() const {
  // @@protoc_insertion_point(field_map:XT.TagData.longMap)
  return longmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >*
TagData::mutable_longmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.TagData.longMap)
  return longmap_.MutableMap();
}

// map<int32, string> strMap = 5;
int TagData::strmap_size() const {
  return strmap_.size();
}
void TagData::clear_strmap() {
  strmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
TagData::strmap() const {
  // @@protoc_insertion_point(field_map:XT.TagData.strMap)
  return strmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
TagData::mutable_strmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.TagData.strMap)
  return strmap_.MutableMap();
}

// map<string, string> strToStrMap = 6;
int TagData::strtostrmap_size() const {
  return strtostrmap_.size();
}
void TagData::clear_strtostrmap() {
  strtostrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
TagData::strtostrmap() const {
  // @@protoc_insertion_point(field_map:XT.TagData.strToStrMap)
  return strtostrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
TagData::mutable_strtostrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.TagData.strToStrMap)
  return strtostrmap_.MutableMap();
}

// map<string, .XT.TagData> nestedMap = 7;
int TagData::nestedmap_size() const {
  return nestedmap_.size();
}
void TagData::clear_nestedmap() {
  nestedmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::XT::TagData >&
TagData::nestedmap() const {
  // @@protoc_insertion_point(field_map:XT.TagData.nestedMap)
  return nestedmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::XT::TagData >*
TagData::mutable_nestedmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.TagData.nestedMap)
  return nestedmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringMapData::kStrToStrMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringMapData::StringMapData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.StringMapData)
}

void StringMapData::InitAsDefaultInstance() {
}

StringMapData::StringMapData(const StringMapData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.StringMapData)
}

void StringMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strtostrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  strtostrmap_.SetEntryDescriptor(
      &::XT::StringMapData_StrToStrMapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringMapData::~StringMapData() {
  // @@protoc_insertion_point(destructor:XT.StringMapData)
  SharedDtor();
}

void StringMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringMapData_descriptor_;
}

const StringMapData& StringMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

StringMapData* StringMapData::default_instance_ = NULL;

StringMapData* StringMapData::New(::google::protobuf::Arena* arena) const {
  StringMapData* n = new StringMapData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.StringMapData)
  strtostrmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.StringMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> strToStrMap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_strToStrMap:
          StringMapData_StrToStrMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&strtostrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.StringMapData.StrToStrMapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.StringMapData.StrToStrMapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_strToStrMap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.StringMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.StringMapData)
  return false;
#undef DO_
}

void StringMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.StringMapData)
  // map<string, string> strToStrMap = 1;
  if (!this->strtostrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StringMapData.StrToStrMapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StringMapData.StrToStrMapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->strtostrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strtostrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StringMapData_StrToStrMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StringMapData_StrToStrMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.StringMapData)
}

::google::protobuf::uint8* StringMapData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.StringMapData)
  // map<string, string> strToStrMap = 1;
  if (!this->strtostrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StringMapData.StrToStrMapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StringMapData.StrToStrMapEntry.value");
      }
    };

    if (deterministic &&
        this->strtostrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strtostrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StringMapData_StrToStrMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StringMapData_StrToStrMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strtostrmap().begin();
          it != this->strtostrmap().end(); ++it) {
        entry.reset(strtostrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.StringMapData)
  return target;
}

int StringMapData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.StringMapData)
  int total_size = 0;

  // map<string, string> strToStrMap = 1;
  total_size += 1 * this->strtostrmap_size();
  {
    ::google::protobuf::scoped_ptr<StringMapData_StrToStrMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->strtostrmap().begin();
        it != this->strtostrmap().end(); ++it) {
      entry.reset(strtostrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringMapData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.StringMapData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StringMapData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringMapData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.StringMapData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.StringMapData)
    MergeFrom(*source);
  }
}

void StringMapData::MergeFrom(const StringMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.StringMapData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  strtostrmap_.MergeFrom(from.strtostrmap_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringMapData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.StringMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMapData::CopyFrom(const StringMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.StringMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMapData::IsInitialized() const {

  return true;
}

void StringMapData::Swap(StringMapData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringMapData::InternalSwap(StringMapData* other) {
  strtostrmap_.Swap(&other->strtostrmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringMapData_descriptor_;
  metadata.reflection = StringMapData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringMapData

// map<string, string> strToStrMap = 1;
int StringMapData::strtostrmap_size() const {
  return strtostrmap_.size();
}
void StringMapData::clear_strtostrmap() {
  strtostrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
StringMapData::strtostrmap() const {
  // @@protoc_insertion_point(field_map:XT.StringMapData.strToStrMap)
  return strtostrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
StringMapData::mutable_strtostrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.StringMapData.strToStrMap)
  return strtostrmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TsRange::kBegintsFieldNumber;
const int TsRange::kEndtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TsRange::TsRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.TsRange)
}

void TsRange::InitAsDefaultInstance() {
}

TsRange::TsRange(const TsRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.TsRange)
}

void TsRange::SharedCtor() {
  _cached_size_ = 0;
  begints_ = GOOGLE_LONGLONG(0);
  endts_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsRange::~TsRange() {
  // @@protoc_insertion_point(destructor:XT.TsRange)
  SharedDtor();
}

void TsRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsRange_descriptor_;
}

const TsRange& TsRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

TsRange* TsRange::default_instance_ = NULL;

TsRange* TsRange::New(::google::protobuf::Arena* arena) const {
  TsRange* n = new TsRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TsRange::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.TsRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TsRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TsRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(begints_, endts_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TsRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.TsRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 begints = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begints_)));
          set_has_begints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endts;
        break;
      }

      // optional int64 endts = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_endts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endts_)));
          set_has_endts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.TsRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.TsRange)
  return false;
#undef DO_
}

void TsRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.TsRange)
  // optional int64 begints = 1 [default = 0];
  if (has_begints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begints(), output);
  }

  // optional int64 endts = 2 [default = 0];
  if (has_endts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.TsRange)
}

::google::protobuf::uint8* TsRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.TsRange)
  // optional int64 begints = 1 [default = 0];
  if (has_begints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begints(), target);
  }

  // optional int64 endts = 2 [default = 0];
  if (has_endts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.TsRange)
  return target;
}

int TsRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.TsRange)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 begints = 1 [default = 0];
    if (has_begints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begints());
    }

    // optional int64 endts = 2 [default = 0];
    if (has_endts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.TsRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TsRange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TsRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.TsRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.TsRange)
    MergeFrom(*source);
  }
}

void TsRange::MergeFrom(const TsRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.TsRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begints()) {
      set_begints(from.begints());
    }
    if (from.has_endts()) {
      set_endts(from.endts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TsRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.TsRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsRange::CopyFrom(const TsRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.TsRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsRange::IsInitialized() const {

  return true;
}

void TsRange::Swap(TsRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TsRange::InternalSwap(TsRange* other) {
  std::swap(begints_, other->begints_);
  std::swap(endts_, other->endts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TsRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsRange_descriptor_;
  metadata.reflection = TsRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TsRange

// optional int64 begints = 1 [default = 0];
bool TsRange::has_begints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TsRange::set_has_begints() {
  _has_bits_[0] |= 0x00000001u;
}
void TsRange::clear_has_begints() {
  _has_bits_[0] &= ~0x00000001u;
}
void TsRange::clear_begints() {
  begints_ = GOOGLE_LONGLONG(0);
  clear_has_begints();
}
 ::google::protobuf::int64 TsRange::begints() const {
  // @@protoc_insertion_point(field_get:XT.TsRange.begints)
  return begints_;
}
 void TsRange::set_begints(::google::protobuf::int64 value) {
  set_has_begints();
  begints_ = value;
  // @@protoc_insertion_point(field_set:XT.TsRange.begints)
}

// optional int64 endts = 2 [default = 0];
bool TsRange::has_endts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TsRange::set_has_endts() {
  _has_bits_[0] |= 0x00000002u;
}
void TsRange::clear_has_endts() {
  _has_bits_[0] &= ~0x00000002u;
}
void TsRange::clear_endts() {
  endts_ = GOOGLE_LONGLONG(0);
  clear_has_endts();
}
 ::google::protobuf::int64 TsRange::endts() const {
  // @@protoc_insertion_point(field_get:XT.TsRange.endts)
  return endts_;
}
 void TsRange::set_endts(::google::protobuf::int64 value) {
  set_has_endts();
  endts_ = value;
  // @@protoc_insertion_point(field_set:XT.TsRange.endts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* SessionCfgData::_default_begintime_ = NULL;
::std::string* SessionCfgData::_default_endtime_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionCfgData::kNameFieldNumber;
const int SessionCfgData::kExchidFieldNumber;
const int SessionCfgData::kProductidsFieldNumber;
const int SessionCfgData::kPrevflagFieldNumber;
const int SessionCfgData::kBegintimeFieldNumber;
const int SessionCfgData::kEndtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionCfgData::SessionCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.SessionCfgData)
}

void SessionCfgData::InitAsDefaultInstance() {
}

SessionCfgData::SessionCfgData(const SessionCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.SessionCfgData)
}

void SessionCfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevflag_ = 0;
  begintime_.UnsafeSetDefault(_default_begintime_);
  endtime_.UnsafeSetDefault(_default_endtime_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionCfgData::~SessionCfgData() {
  // @@protoc_insertion_point(destructor:XT.SessionCfgData)
  SharedDtor();
}

void SessionCfgData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productids_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begintime_.DestroyNoArena(_default_begintime_);
  endtime_.DestroyNoArena(_default_endtime_);
  if (this != default_instance_) {
  }
}

void SessionCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCfgData_descriptor_;
}

const SessionCfgData& SessionCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

SessionCfgData* SessionCfgData::default_instance_ = NULL;

SessionCfgData* SessionCfgData::New(::google::protobuf::Arena* arena) const {
  SessionCfgData* n = new SessionCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.SessionCfgData)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_exchid()) {
      exchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_productids()) {
      productids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    prevflag_ = 0;
    if (has_begintime()) {
      begintime_.ClearToDefaultNoArena(_default_begintime_);
    }
    if (has_endtime()) {
      endtime_.ClearToDefaultNoArena(_default_endtime_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SessionCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.SessionCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SessionCfgData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchid;
        break;
      }

      // optional string exchid = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_exchid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchid().data(), this->exchid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SessionCfgData.exchid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_productids;
        break;
      }

      // optional string productids = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_productids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productids().data(), this->productids().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SessionCfgData.productids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prevflag;
        break;
      }

      // optional int32 prevflag = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_prevflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevflag_)));
          set_has_prevflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_begintime;
        break;
      }

      // optional string begintime = 5 [default = "00:00:00"];
      case 5: {
        if (tag == 42) {
         parse_begintime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begintime().data(), this->begintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SessionCfgData.begintime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_endtime;
        break;
      }

      // optional string endtime = 6 [default = "00:00:00"];
      case 6: {
        if (tag == 50) {
         parse_endtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SessionCfgData.endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.SessionCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.SessionCfgData)
  return false;
#undef DO_
}

void SessionCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.SessionCfgData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string exchid = 2 [default = ""];
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.exchid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchid(), output);
  }

  // optional string productids = 3 [default = ""];
  if (has_productids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productids().data(), this->productids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.productids");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->productids(), output);
  }

  // optional int32 prevflag = 4 [default = 0];
  if (has_prevflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevflag(), output);
  }

  // optional string begintime = 5 [default = "00:00:00"];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.begintime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->begintime(), output);
  }

  // optional string endtime = 6 [default = "00:00:00"];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.SessionCfgData)
}

::google::protobuf::uint8* SessionCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.SessionCfgData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string exchid = 2 [default = ""];
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.exchid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchid(), target);
  }

  // optional string productids = 3 [default = ""];
  if (has_productids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productids().data(), this->productids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.productids");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->productids(), target);
  }

  // optional int32 prevflag = 4 [default = 0];
  if (has_prevflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevflag(), target);
  }

  // optional string begintime = 5 [default = "00:00:00"];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.begintime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->begintime(), target);
  }

  // optional string endtime = 6 [default = "00:00:00"];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionCfgData.endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.SessionCfgData)
  return target;
}

int SessionCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.SessionCfgData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string exchid = 2 [default = ""];
    if (has_exchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchid());
    }

    // optional string productids = 3 [default = ""];
    if (has_productids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productids());
    }

    // optional int32 prevflag = 4 [default = 0];
    if (has_prevflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevflag());
    }

    // optional string begintime = 5 [default = "00:00:00"];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begintime());
    }

    // optional string endtime = 6 [default = "00:00:00"];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.SessionCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.SessionCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.SessionCfgData)
    MergeFrom(*source);
  }
}

void SessionCfgData::MergeFrom(const SessionCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.SessionCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_exchid()) {
      set_has_exchid();
      exchid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchid_);
    }
    if (from.has_productids()) {
      set_has_productids();
      productids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productids_);
    }
    if (from.has_prevflag()) {
      set_prevflag(from.prevflag());
    }
    if (from.has_begintime()) {
      set_has_begintime();
      begintime_.AssignWithDefault(_default_begintime_, from.begintime_);
    }
    if (from.has_endtime()) {
      set_has_endtime();
      endtime_.AssignWithDefault(_default_endtime_, from.endtime_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SessionCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.SessionCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCfgData::CopyFrom(const SessionCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.SessionCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCfgData::IsInitialized() const {

  return true;
}

void SessionCfgData::Swap(SessionCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionCfgData::InternalSwap(SessionCfgData* other) {
  name_.Swap(&other->name_);
  exchid_.Swap(&other->exchid_);
  productids_.Swap(&other->productids_);
  std::swap(prevflag_, other->prevflag_);
  begintime_.Swap(&other->begintime_);
  endtime_.Swap(&other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionCfgData_descriptor_;
  metadata.reflection = SessionCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionCfgData

// optional string name = 1 [default = ""];
bool SessionCfgData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionCfgData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionCfgData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionCfgData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SessionCfgData::name() const {
  // @@protoc_insertion_point(field_get:XT.SessionCfgData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCfgData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SessionCfgData.name)
}
 void SessionCfgData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SessionCfgData.name)
}
 void SessionCfgData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SessionCfgData.name)
}
 ::std::string* SessionCfgData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.SessionCfgData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionCfgData::release_name() {
  // @@protoc_insertion_point(field_release:XT.SessionCfgData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCfgData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.SessionCfgData.name)
}

// optional string exchid = 2 [default = ""];
bool SessionCfgData::has_exchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionCfgData::set_has_exchid() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionCfgData::clear_has_exchid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionCfgData::clear_exchid() {
  exchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchid();
}
 const ::std::string& SessionCfgData::exchid() const {
  // @@protoc_insertion_point(field_get:XT.SessionCfgData.exchid)
  return exchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCfgData::set_exchid(const ::std::string& value) {
  set_has_exchid();
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SessionCfgData.exchid)
}
 void SessionCfgData::set_exchid(const char* value) {
  set_has_exchid();
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SessionCfgData.exchid)
}
 void SessionCfgData::set_exchid(const char* value, size_t size) {
  set_has_exchid();
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SessionCfgData.exchid)
}
 ::std::string* SessionCfgData::mutable_exchid() {
  set_has_exchid();
  // @@protoc_insertion_point(field_mutable:XT.SessionCfgData.exchid)
  return exchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionCfgData::release_exchid() {
  // @@protoc_insertion_point(field_release:XT.SessionCfgData.exchid)
  clear_has_exchid();
  return exchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCfgData::set_allocated_exchid(::std::string* exchid) {
  if (exchid != NULL) {
    set_has_exchid();
  } else {
    clear_has_exchid();
  }
  exchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchid);
  // @@protoc_insertion_point(field_set_allocated:XT.SessionCfgData.exchid)
}

// optional string productids = 3 [default = ""];
bool SessionCfgData::has_productids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionCfgData::set_has_productids() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionCfgData::clear_has_productids() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionCfgData::clear_productids() {
  productids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productids();
}
 const ::std::string& SessionCfgData::productids() const {
  // @@protoc_insertion_point(field_get:XT.SessionCfgData.productids)
  return productids_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCfgData::set_productids(const ::std::string& value) {
  set_has_productids();
  productids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SessionCfgData.productids)
}
 void SessionCfgData::set_productids(const char* value) {
  set_has_productids();
  productids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SessionCfgData.productids)
}
 void SessionCfgData::set_productids(const char* value, size_t size) {
  set_has_productids();
  productids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SessionCfgData.productids)
}
 ::std::string* SessionCfgData::mutable_productids() {
  set_has_productids();
  // @@protoc_insertion_point(field_mutable:XT.SessionCfgData.productids)
  return productids_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionCfgData::release_productids() {
  // @@protoc_insertion_point(field_release:XT.SessionCfgData.productids)
  clear_has_productids();
  return productids_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCfgData::set_allocated_productids(::std::string* productids) {
  if (productids != NULL) {
    set_has_productids();
  } else {
    clear_has_productids();
  }
  productids_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productids);
  // @@protoc_insertion_point(field_set_allocated:XT.SessionCfgData.productids)
}

// optional int32 prevflag = 4 [default = 0];
bool SessionCfgData::has_prevflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionCfgData::set_has_prevflag() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionCfgData::clear_has_prevflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionCfgData::clear_prevflag() {
  prevflag_ = 0;
  clear_has_prevflag();
}
 ::google::protobuf::int32 SessionCfgData::prevflag() const {
  // @@protoc_insertion_point(field_get:XT.SessionCfgData.prevflag)
  return prevflag_;
}
 void SessionCfgData::set_prevflag(::google::protobuf::int32 value) {
  set_has_prevflag();
  prevflag_ = value;
  // @@protoc_insertion_point(field_set:XT.SessionCfgData.prevflag)
}

// optional string begintime = 5 [default = "00:00:00"];
bool SessionCfgData::has_begintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SessionCfgData::set_has_begintime() {
  _has_bits_[0] |= 0x00000010u;
}
void SessionCfgData::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000010u;
}
void SessionCfgData::clear_begintime() {
  begintime_.ClearToDefaultNoArena(_default_begintime_);
  clear_has_begintime();
}
 const ::std::string& SessionCfgData::begintime() const {
  // @@protoc_insertion_point(field_get:XT.SessionCfgData.begintime)
  return begintime_.GetNoArena(_default_begintime_);
}
 void SessionCfgData::set_begintime(const ::std::string& value) {
  set_has_begintime();
  begintime_.SetNoArena(_default_begintime_, value);
  // @@protoc_insertion_point(field_set:XT.SessionCfgData.begintime)
}
 void SessionCfgData::set_begintime(const char* value) {
  set_has_begintime();
  begintime_.SetNoArena(_default_begintime_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SessionCfgData.begintime)
}
 void SessionCfgData::set_begintime(const char* value, size_t size) {
  set_has_begintime();
  begintime_.SetNoArena(_default_begintime_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SessionCfgData.begintime)
}
 ::std::string* SessionCfgData::mutable_begintime() {
  set_has_begintime();
  // @@protoc_insertion_point(field_mutable:XT.SessionCfgData.begintime)
  return begintime_.MutableNoArena(_default_begintime_);
}
 ::std::string* SessionCfgData::release_begintime() {
  // @@protoc_insertion_point(field_release:XT.SessionCfgData.begintime)
  clear_has_begintime();
  return begintime_.ReleaseNoArena(_default_begintime_);
}
 void SessionCfgData::set_allocated_begintime(::std::string* begintime) {
  if (begintime != NULL) {
    set_has_begintime();
  } else {
    clear_has_begintime();
  }
  begintime_.SetAllocatedNoArena(_default_begintime_, begintime);
  // @@protoc_insertion_point(field_set_allocated:XT.SessionCfgData.begintime)
}

// optional string endtime = 6 [default = "00:00:00"];
bool SessionCfgData::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SessionCfgData::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
void SessionCfgData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
void SessionCfgData::clear_endtime() {
  endtime_.ClearToDefaultNoArena(_default_endtime_);
  clear_has_endtime();
}
 const ::std::string& SessionCfgData::endtime() const {
  // @@protoc_insertion_point(field_get:XT.SessionCfgData.endtime)
  return endtime_.GetNoArena(_default_endtime_);
}
 void SessionCfgData::set_endtime(const ::std::string& value) {
  set_has_endtime();
  endtime_.SetNoArena(_default_endtime_, value);
  // @@protoc_insertion_point(field_set:XT.SessionCfgData.endtime)
}
 void SessionCfgData::set_endtime(const char* value) {
  set_has_endtime();
  endtime_.SetNoArena(_default_endtime_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SessionCfgData.endtime)
}
 void SessionCfgData::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  endtime_.SetNoArena(_default_endtime_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SessionCfgData.endtime)
}
 ::std::string* SessionCfgData::mutable_endtime() {
  set_has_endtime();
  // @@protoc_insertion_point(field_mutable:XT.SessionCfgData.endtime)
  return endtime_.MutableNoArena(_default_endtime_);
}
 ::std::string* SessionCfgData::release_endtime() {
  // @@protoc_insertion_point(field_release:XT.SessionCfgData.endtime)
  clear_has_endtime();
  return endtime_.ReleaseNoArena(_default_endtime_);
}
 void SessionCfgData::set_allocated_endtime(::std::string* endtime) {
  if (endtime != NULL) {
    set_has_endtime();
  } else {
    clear_has_endtime();
  }
  endtime_.SetAllocatedNoArena(_default_endtime_, endtime);
  // @@protoc_insertion_point(field_set_allocated:XT.SessionCfgData.endtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionInfo::kNameFieldNumber;
const int SessionInfo::kTradingdayFieldNumber;
const int SessionInfo::kPrevtradingdayFieldNumber;
const int SessionInfo::kBegintsFieldNumber;
const int SessionInfo::kEndtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionInfo::SessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.SessionInfo)
}

void SessionInfo::InitAsDefaultInstance() {
}

SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.SessionInfo)
}

void SessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_ = 0;
  prevtradingday_ = 0;
  begints_ = GOOGLE_LONGLONG(0);
  endts_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:XT.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionInfo_descriptor_;
}

const SessionInfo& SessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

SessionInfo* SessionInfo::default_instance_ = NULL;

SessionInfo* SessionInfo::New(::google::protobuf::Arena* arena) const {
  SessionInfo* n = new SessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.SessionInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SessionInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SessionInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(tradingday_, endts_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SessionInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tradingday;
        break;
      }

      // optional int32 tradingday = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_tradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prevtradingday;
        break;
      }

      // optional int32 prevtradingday = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_prevtradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevtradingday_)));
          set_has_prevtradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_begints;
        break;
      }

      // optional int64 begints = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_begints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begints_)));
          set_has_begints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endts;
        break;
      }

      // optional int64 endts = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_endts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endts_)));
          set_has_endts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.SessionInfo)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 tradingday = 2 [default = 0];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tradingday(), output);
  }

  // optional int32 prevtradingday = 3 [default = 0];
  if (has_prevtradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prevtradingday(), output);
  }

  // optional int64 begints = 4 [default = 0];
  if (has_begints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begints(), output);
  }

  // optional int64 endts = 5 [default = 0];
  if (has_endts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->endts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.SessionInfo)
}

::google::protobuf::uint8* SessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.SessionInfo)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SessionInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 tradingday = 2 [default = 0];
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tradingday(), target);
  }

  // optional int32 prevtradingday = 3 [default = 0];
  if (has_prevtradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prevtradingday(), target);
  }

  // optional int64 begints = 4 [default = 0];
  if (has_begints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begints(), target);
  }

  // optional int64 endts = 5 [default = 0];
  if (has_endts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->endts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.SessionInfo)
  return target;
}

int SessionInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.SessionInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 tradingday = 2 [default = 0];
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // optional int32 prevtradingday = 3 [default = 0];
    if (has_prevtradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevtradingday());
    }

    // optional int64 begints = 4 [default = 0];
    if (has_begints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begints());
    }

    // optional int64 endts = 5 [default = 0];
    if (has_endts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.SessionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.SessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.SessionInfo)
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.SessionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_prevtradingday()) {
      set_prevtradingday(from.prevtradingday());
    }
    if (from.has_begints()) {
      set_begints(from.begints());
    }
    if (from.has_endts()) {
      set_endts(from.endts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {

  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionInfo::InternalSwap(SessionInfo* other) {
  name_.Swap(&other->name_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(prevtradingday_, other->prevtradingday_);
  std::swap(begints_, other->begints_);
  std::swap(endts_, other->endts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionInfo_descriptor_;
  metadata.reflection = SessionInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionInfo

// optional string name = 1 [default = ""];
bool SessionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SessionInfo::name() const {
  // @@protoc_insertion_point(field_get:XT.SessionInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SessionInfo.name)
}
 void SessionInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SessionInfo.name)
}
 void SessionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SessionInfo.name)
}
 ::std::string* SessionInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.SessionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionInfo::release_name() {
  // @@protoc_insertion_point(field_release:XT.SessionInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.SessionInfo.name)
}

// optional int32 tradingday = 2 [default = 0];
bool SessionInfo::has_tradingday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionInfo::set_has_tradingday() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionInfo::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionInfo::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
 ::google::protobuf::int32 SessionInfo::tradingday() const {
  // @@protoc_insertion_point(field_get:XT.SessionInfo.tradingday)
  return tradingday_;
}
 void SessionInfo::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.SessionInfo.tradingday)
}

// optional int32 prevtradingday = 3 [default = 0];
bool SessionInfo::has_prevtradingday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionInfo::set_has_prevtradingday() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionInfo::clear_has_prevtradingday() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionInfo::clear_prevtradingday() {
  prevtradingday_ = 0;
  clear_has_prevtradingday();
}
 ::google::protobuf::int32 SessionInfo::prevtradingday() const {
  // @@protoc_insertion_point(field_get:XT.SessionInfo.prevtradingday)
  return prevtradingday_;
}
 void SessionInfo::set_prevtradingday(::google::protobuf::int32 value) {
  set_has_prevtradingday();
  prevtradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.SessionInfo.prevtradingday)
}

// optional int64 begints = 4 [default = 0];
bool SessionInfo::has_begints() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionInfo::set_has_begints() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionInfo::clear_has_begints() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionInfo::clear_begints() {
  begints_ = GOOGLE_LONGLONG(0);
  clear_has_begints();
}
 ::google::protobuf::int64 SessionInfo::begints() const {
  // @@protoc_insertion_point(field_get:XT.SessionInfo.begints)
  return begints_;
}
 void SessionInfo::set_begints(::google::protobuf::int64 value) {
  set_has_begints();
  begints_ = value;
  // @@protoc_insertion_point(field_set:XT.SessionInfo.begints)
}

// optional int64 endts = 5 [default = 0];
bool SessionInfo::has_endts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SessionInfo::set_has_endts() {
  _has_bits_[0] |= 0x00000010u;
}
void SessionInfo::clear_has_endts() {
  _has_bits_[0] &= ~0x00000010u;
}
void SessionInfo::clear_endts() {
  endts_ = GOOGLE_LONGLONG(0);
  clear_has_endts();
}
 ::google::protobuf::int64 SessionInfo::endts() const {
  // @@protoc_insertion_point(field_get:XT.SessionInfo.endts)
  return endts_;
}
 void SessionInfo::set_endts(::google::protobuf::int64 value) {
  set_has_endts();
  endts_ = value;
  // @@protoc_insertion_point(field_set:XT.SessionInfo.endts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleParam::kCurrFieldNumber;
const int DoubleParam::kPrevFieldNumber;
const int DoubleParam::kTempFieldNumber;
const int DoubleParam::kMinFieldNumber;
const int DoubleParam::kMaxFieldNumber;
const int DoubleParam::kStepFieldNumber;
const int DoubleParam::kIdxFieldNumber;
const int DoubleParam::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleParam::DoubleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.DoubleParam)
}

void DoubleParam::InitAsDefaultInstance() {
}

DoubleParam::DoubleParam(const DoubleParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.DoubleParam)
}

void DoubleParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curr_ = 0;
  prev_ = 0;
  temp_ = 0;
  min_ = -999999999;
  max_ = 999999999;
  step_ = 0.001;
  idx_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleParam::~DoubleParam() {
  // @@protoc_insertion_point(destructor:XT.DoubleParam)
  SharedDtor();
}

void DoubleParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DoubleParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleParam_descriptor_;
}

const DoubleParam& DoubleParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

DoubleParam* DoubleParam::default_instance_ = NULL;

DoubleParam* DoubleParam::New(::google::protobuf::Arena* arena) const {
  DoubleParam* n = new DoubleParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.DoubleParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DoubleParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DoubleParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(curr_, temp_);
    min_ = -999999999;
    max_ = 999999999;
    step_ = 0.001;
    idx_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DoubleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.DoubleParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double curr = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curr_)));
          set_has_curr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_prev;
        break;
      }

      // optional double prev = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_prev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prev_)));
          set_has_prev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_temp;
        break;
      }

      // optional double temp = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_min;
        break;
      }

      // optional double min = 4 [default = -999999999];
      case 4: {
        if (tag == 33) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max;
        break;
      }

      // optional double max = 5 [default = 999999999];
      case 5: {
        if (tag == 41) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_step;
        break;
      }

      // optional double step = 6 [default = 0.001];
      case 6: {
        if (tag == 49) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_idx;
        break;
      }

      // optional int32 idx = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.DoubleParam.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.DoubleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.DoubleParam)
  return false;
#undef DO_
}

void DoubleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.DoubleParam)
  // optional double curr = 1 [default = 0];
  if (has_curr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->curr(), output);
  }

  // optional double prev = 2 [default = 0];
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->prev(), output);
  }

  // optional double temp = 3 [default = 0];
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->temp(), output);
  }

  // optional double min = 4 [default = -999999999];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min(), output);
  }

  // optional double max = 5 [default = 999999999];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max(), output);
  }

  // optional double step = 6 [default = 0.001];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->step(), output);
  }

  // optional int32 idx = 7 [default = 0];
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->idx(), output);
  }

  // optional string name = 8 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.DoubleParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.DoubleParam)
}

::google::protobuf::uint8* DoubleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.DoubleParam)
  // optional double curr = 1 [default = 0];
  if (has_curr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->curr(), target);
  }

  // optional double prev = 2 [default = 0];
  if (has_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->prev(), target);
  }

  // optional double temp = 3 [default = 0];
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->temp(), target);
  }

  // optional double min = 4 [default = -999999999];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min(), target);
  }

  // optional double max = 5 [default = 999999999];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max(), target);
  }

  // optional double step = 6 [default = 0.001];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->step(), target);
  }

  // optional int32 idx = 7 [default = 0];
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->idx(), target);
  }

  // optional string name = 8 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.DoubleParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.DoubleParam)
  return target;
}

int DoubleParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.DoubleParam)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double curr = 1 [default = 0];
    if (has_curr()) {
      total_size += 1 + 8;
    }

    // optional double prev = 2 [default = 0];
    if (has_prev()) {
      total_size += 1 + 8;
    }

    // optional double temp = 3 [default = 0];
    if (has_temp()) {
      total_size += 1 + 8;
    }

    // optional double min = 4 [default = -999999999];
    if (has_min()) {
      total_size += 1 + 8;
    }

    // optional double max = 5 [default = 999999999];
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double step = 6 [default = 0.001];
    if (has_step()) {
      total_size += 1 + 8;
    }

    // optional int32 idx = 7 [default = 0];
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional string name = 8 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.DoubleParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DoubleParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.DoubleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.DoubleParam)
    MergeFrom(*source);
  }
}

void DoubleParam::MergeFrom(const DoubleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.DoubleParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr()) {
      set_curr(from.curr());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DoubleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.DoubleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleParam::CopyFrom(const DoubleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.DoubleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleParam::IsInitialized() const {

  return true;
}

void DoubleParam::Swap(DoubleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleParam::InternalSwap(DoubleParam* other) {
  std::swap(curr_, other->curr_);
  std::swap(prev_, other->prev_);
  std::swap(temp_, other->temp_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(step_, other->step_);
  std::swap(idx_, other->idx_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleParam_descriptor_;
  metadata.reflection = DoubleParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleParam

// optional double curr = 1 [default = 0];
bool DoubleParam::has_curr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DoubleParam::set_has_curr() {
  _has_bits_[0] |= 0x00000001u;
}
void DoubleParam::clear_has_curr() {
  _has_bits_[0] &= ~0x00000001u;
}
void DoubleParam::clear_curr() {
  curr_ = 0;
  clear_has_curr();
}
 double DoubleParam::curr() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.curr)
  return curr_;
}
 void DoubleParam::set_curr(double value) {
  set_has_curr();
  curr_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleParam.curr)
}

// optional double prev = 2 [default = 0];
bool DoubleParam::has_prev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DoubleParam::set_has_prev() {
  _has_bits_[0] |= 0x00000002u;
}
void DoubleParam::clear_has_prev() {
  _has_bits_[0] &= ~0x00000002u;
}
void DoubleParam::clear_prev() {
  prev_ = 0;
  clear_has_prev();
}
 double DoubleParam::prev() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.prev)
  return prev_;
}
 void DoubleParam::set_prev(double value) {
  set_has_prev();
  prev_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleParam.prev)
}

// optional double temp = 3 [default = 0];
bool DoubleParam::has_temp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DoubleParam::set_has_temp() {
  _has_bits_[0] |= 0x00000004u;
}
void DoubleParam::clear_has_temp() {
  _has_bits_[0] &= ~0x00000004u;
}
void DoubleParam::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
 double DoubleParam::temp() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.temp)
  return temp_;
}
 void DoubleParam::set_temp(double value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleParam.temp)
}

// optional double min = 4 [default = -999999999];
bool DoubleParam::has_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DoubleParam::set_has_min() {
  _has_bits_[0] |= 0x00000008u;
}
void DoubleParam::clear_has_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void DoubleParam::clear_min() {
  min_ = -999999999;
  clear_has_min();
}
 double DoubleParam::min() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.min)
  return min_;
}
 void DoubleParam::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleParam.min)
}

// optional double max = 5 [default = 999999999];
bool DoubleParam::has_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DoubleParam::set_has_max() {
  _has_bits_[0] |= 0x00000010u;
}
void DoubleParam::clear_has_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void DoubleParam::clear_max() {
  max_ = 999999999;
  clear_has_max();
}
 double DoubleParam::max() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.max)
  return max_;
}
 void DoubleParam::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleParam.max)
}

// optional double step = 6 [default = 0.001];
bool DoubleParam::has_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DoubleParam::set_has_step() {
  _has_bits_[0] |= 0x00000020u;
}
void DoubleParam::clear_has_step() {
  _has_bits_[0] &= ~0x00000020u;
}
void DoubleParam::clear_step() {
  step_ = 0.001;
  clear_has_step();
}
 double DoubleParam::step() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.step)
  return step_;
}
 void DoubleParam::set_step(double value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleParam.step)
}

// optional int32 idx = 7 [default = 0];
bool DoubleParam::has_idx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DoubleParam::set_has_idx() {
  _has_bits_[0] |= 0x00000040u;
}
void DoubleParam::clear_has_idx() {
  _has_bits_[0] &= ~0x00000040u;
}
void DoubleParam::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
 ::google::protobuf::int32 DoubleParam::idx() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.idx)
  return idx_;
}
 void DoubleParam::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleParam.idx)
}

// optional string name = 8 [default = ""];
bool DoubleParam::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DoubleParam::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
void DoubleParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void DoubleParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DoubleParam::name() const {
  // @@protoc_insertion_point(field_get:XT.DoubleParam.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DoubleParam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.DoubleParam.name)
}
 void DoubleParam::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.DoubleParam.name)
}
 void DoubleParam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.DoubleParam.name)
}
 ::std::string* DoubleParam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.DoubleParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DoubleParam::release_name() {
  // @@protoc_insertion_point(field_release:XT.DoubleParam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DoubleParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.DoubleParam.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntParam::kCurrFieldNumber;
const int IntParam::kPrevFieldNumber;
const int IntParam::kTempFieldNumber;
const int IntParam::kMinFieldNumber;
const int IntParam::kMaxFieldNumber;
const int IntParam::kStepFieldNumber;
const int IntParam::kIdxFieldNumber;
const int IntParam::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntParam::IntParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.IntParam)
}

void IntParam::InitAsDefaultInstance() {
}

IntParam::IntParam(const IntParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.IntParam)
}

void IntParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curr_ = 0;
  prev_ = 0;
  temp_ = 0;
  min_ = -999999999;
  max_ = 999999999;
  step_ = 1;
  idx_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntParam::~IntParam() {
  // @@protoc_insertion_point(destructor:XT.IntParam)
  SharedDtor();
}

void IntParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IntParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntParam_descriptor_;
}

const IntParam& IntParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

IntParam* IntParam::default_instance_ = NULL;

IntParam* IntParam::New(::google::protobuf::Arena* arena) const {
  IntParam* n = new IntParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntParam::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.IntParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IntParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IntParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(curr_, temp_);
    min_ = -999999999;
    max_ = 999999999;
    step_ = 1;
    idx_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IntParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.IntParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curr = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_)));
          set_has_curr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prev;
        break;
      }

      // optional int32 prev = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_prev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_)));
          set_has_prev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_temp;
        break;
      }

      // optional int32 temp = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min;
        break;
      }

      // optional int32 min = 4 [default = -999999999];
      case 4: {
        if (tag == 32) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max;
        break;
      }

      // optional int32 max = 5 [default = 999999999];
      case 5: {
        if (tag == 40) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_step;
        break;
      }

      // optional int32 step = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_idx;
        break;
      }

      // optional int32 idx = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.IntParam.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.IntParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.IntParam)
  return false;
#undef DO_
}

void IntParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.IntParam)
  // optional int32 curr = 1 [default = 0];
  if (has_curr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curr(), output);
  }

  // optional int32 prev = 2 [default = 0];
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prev(), output);
  }

  // optional int32 temp = 3 [default = 0];
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->temp(), output);
  }

  // optional int32 min = 4 [default = -999999999];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min(), output);
  }

  // optional int32 max = 5 [default = 999999999];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max(), output);
  }

  // optional int32 step = 6 [default = 1];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->step(), output);
  }

  // optional int32 idx = 7 [default = 0];
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->idx(), output);
  }

  // optional string name = 8 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.IntParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.IntParam)
}

::google::protobuf::uint8* IntParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.IntParam)
  // optional int32 curr = 1 [default = 0];
  if (has_curr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curr(), target);
  }

  // optional int32 prev = 2 [default = 0];
  if (has_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prev(), target);
  }

  // optional int32 temp = 3 [default = 0];
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->temp(), target);
  }

  // optional int32 min = 4 [default = -999999999];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min(), target);
  }

  // optional int32 max = 5 [default = 999999999];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max(), target);
  }

  // optional int32 step = 6 [default = 1];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->step(), target);
  }

  // optional int32 idx = 7 [default = 0];
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->idx(), target);
  }

  // optional string name = 8 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.IntParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.IntParam)
  return target;
}

int IntParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.IntParam)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 curr = 1 [default = 0];
    if (has_curr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr());
    }

    // optional int32 prev = 2 [default = 0];
    if (has_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev());
    }

    // optional int32 temp = 3 [default = 0];
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temp());
    }

    // optional int32 min = 4 [default = -999999999];
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // optional int32 max = 5 [default = 999999999];
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

    // optional int32 step = 6 [default = 1];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional int32 idx = 7 [default = 0];
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional string name = 8 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.IntParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.IntParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.IntParam)
    MergeFrom(*source);
  }
}

void IntParam::MergeFrom(const IntParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.IntParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr()) {
      set_curr(from.curr());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IntParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.IntParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntParam::CopyFrom(const IntParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.IntParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntParam::IsInitialized() const {

  return true;
}

void IntParam::Swap(IntParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntParam::InternalSwap(IntParam* other) {
  std::swap(curr_, other->curr_);
  std::swap(prev_, other->prev_);
  std::swap(temp_, other->temp_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(step_, other->step_);
  std::swap(idx_, other->idx_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntParam_descriptor_;
  metadata.reflection = IntParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntParam

// optional int32 curr = 1 [default = 0];
bool IntParam::has_curr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntParam::set_has_curr() {
  _has_bits_[0] |= 0x00000001u;
}
void IntParam::clear_has_curr() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntParam::clear_curr() {
  curr_ = 0;
  clear_has_curr();
}
 ::google::protobuf::int32 IntParam::curr() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.curr)
  return curr_;
}
 void IntParam::set_curr(::google::protobuf::int32 value) {
  set_has_curr();
  curr_ = value;
  // @@protoc_insertion_point(field_set:XT.IntParam.curr)
}

// optional int32 prev = 2 [default = 0];
bool IntParam::has_prev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntParam::set_has_prev() {
  _has_bits_[0] |= 0x00000002u;
}
void IntParam::clear_has_prev() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntParam::clear_prev() {
  prev_ = 0;
  clear_has_prev();
}
 ::google::protobuf::int32 IntParam::prev() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.prev)
  return prev_;
}
 void IntParam::set_prev(::google::protobuf::int32 value) {
  set_has_prev();
  prev_ = value;
  // @@protoc_insertion_point(field_set:XT.IntParam.prev)
}

// optional int32 temp = 3 [default = 0];
bool IntParam::has_temp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IntParam::set_has_temp() {
  _has_bits_[0] |= 0x00000004u;
}
void IntParam::clear_has_temp() {
  _has_bits_[0] &= ~0x00000004u;
}
void IntParam::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
 ::google::protobuf::int32 IntParam::temp() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.temp)
  return temp_;
}
 void IntParam::set_temp(::google::protobuf::int32 value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:XT.IntParam.temp)
}

// optional int32 min = 4 [default = -999999999];
bool IntParam::has_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IntParam::set_has_min() {
  _has_bits_[0] |= 0x00000008u;
}
void IntParam::clear_has_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void IntParam::clear_min() {
  min_ = -999999999;
  clear_has_min();
}
 ::google::protobuf::int32 IntParam::min() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.min)
  return min_;
}
 void IntParam::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:XT.IntParam.min)
}

// optional int32 max = 5 [default = 999999999];
bool IntParam::has_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IntParam::set_has_max() {
  _has_bits_[0] |= 0x00000010u;
}
void IntParam::clear_has_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void IntParam::clear_max() {
  max_ = 999999999;
  clear_has_max();
}
 ::google::protobuf::int32 IntParam::max() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.max)
  return max_;
}
 void IntParam::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:XT.IntParam.max)
}

// optional int32 step = 6 [default = 1];
bool IntParam::has_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IntParam::set_has_step() {
  _has_bits_[0] |= 0x00000020u;
}
void IntParam::clear_has_step() {
  _has_bits_[0] &= ~0x00000020u;
}
void IntParam::clear_step() {
  step_ = 1;
  clear_has_step();
}
 ::google::protobuf::int32 IntParam::step() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.step)
  return step_;
}
 void IntParam::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:XT.IntParam.step)
}

// optional int32 idx = 7 [default = 0];
bool IntParam::has_idx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IntParam::set_has_idx() {
  _has_bits_[0] |= 0x00000040u;
}
void IntParam::clear_has_idx() {
  _has_bits_[0] &= ~0x00000040u;
}
void IntParam::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
 ::google::protobuf::int32 IntParam::idx() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.idx)
  return idx_;
}
 void IntParam::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:XT.IntParam.idx)
}

// optional string name = 8 [default = ""];
bool IntParam::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IntParam::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
void IntParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void IntParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& IntParam::name() const {
  // @@protoc_insertion_point(field_get:XT.IntParam.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IntParam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.IntParam.name)
}
 void IntParam::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.IntParam.name)
}
 void IntParam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.IntParam.name)
}
 ::std::string* IntParam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.IntParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IntParam::release_name() {
  // @@protoc_insertion_point(field_release:XT.IntParam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IntParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.IntParam.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64Param::kCurrFieldNumber;
const int Int64Param::kPrevFieldNumber;
const int Int64Param::kTempFieldNumber;
const int Int64Param::kMinFieldNumber;
const int Int64Param::kMaxFieldNumber;
const int Int64Param::kStepFieldNumber;
const int Int64Param::kIdxFieldNumber;
const int Int64Param::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64Param::Int64Param()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.Int64Param)
}

void Int64Param::InitAsDefaultInstance() {
}

Int64Param::Int64Param(const Int64Param& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.Int64Param)
}

void Int64Param::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curr_ = GOOGLE_LONGLONG(0);
  prev_ = GOOGLE_LONGLONG(0);
  temp_ = GOOGLE_LONGLONG(0);
  min_ = GOOGLE_LONGLONG(-999999999);
  max_ = GOOGLE_LONGLONG(999999999);
  step_ = GOOGLE_LONGLONG(1);
  idx_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Int64Param::~Int64Param() {
  // @@protoc_insertion_point(destructor:XT.Int64Param)
  SharedDtor();
}

void Int64Param::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Int64Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int64Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int64Param_descriptor_;
}

const Int64Param& Int64Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

Int64Param* Int64Param::default_instance_ = NULL;

Int64Param* Int64Param::New(::google::protobuf::Arena* arena) const {
  Int64Param* n = new Int64Param;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int64Param::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.Int64Param)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Int64Param, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Int64Param*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(curr_, temp_);
    min_ = GOOGLE_LONGLONG(-999999999);
    max_ = GOOGLE_LONGLONG(999999999);
    step_ = GOOGLE_LONGLONG(1);
    idx_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Int64Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.Int64Param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 curr = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curr_)));
          set_has_curr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prev;
        break;
      }

      // optional int64 prev = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_prev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prev_)));
          set_has_prev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_temp;
        break;
      }

      // optional int64 temp = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min;
        break;
      }

      // optional int64 min = 4 [default = -999999999];
      case 4: {
        if (tag == 32) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max;
        break;
      }

      // optional int64 max = 5 [default = 999999999];
      case 5: {
        if (tag == 40) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_step;
        break;
      }

      // optional int64 step = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_idx;
        break;
      }

      // optional int64 idx = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.Int64Param.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.Int64Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.Int64Param)
  return false;
#undef DO_
}

void Int64Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.Int64Param)
  // optional int64 curr = 1 [default = 0];
  if (has_curr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->curr(), output);
  }

  // optional int64 prev = 2 [default = 0];
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->prev(), output);
  }

  // optional int64 temp = 3 [default = 0];
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->temp(), output);
  }

  // optional int64 min = 4 [default = -999999999];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->min(), output);
  }

  // optional int64 max = 5 [default = 999999999];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max(), output);
  }

  // optional int64 step = 6 [default = 1];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->step(), output);
  }

  // optional int64 idx = 7 [default = 0];
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->idx(), output);
  }

  // optional string name = 8 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.Int64Param.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.Int64Param)
}

::google::protobuf::uint8* Int64Param::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.Int64Param)
  // optional int64 curr = 1 [default = 0];
  if (has_curr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->curr(), target);
  }

  // optional int64 prev = 2 [default = 0];
  if (has_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->prev(), target);
  }

  // optional int64 temp = 3 [default = 0];
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->temp(), target);
  }

  // optional int64 min = 4 [default = -999999999];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->min(), target);
  }

  // optional int64 max = 5 [default = 999999999];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max(), target);
  }

  // optional int64 step = 6 [default = 1];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->step(), target);
  }

  // optional int64 idx = 7 [default = 0];
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->idx(), target);
  }

  // optional string name = 8 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.Int64Param.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.Int64Param)
  return target;
}

int Int64Param::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.Int64Param)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 curr = 1 [default = 0];
    if (has_curr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curr());
    }

    // optional int64 prev = 2 [default = 0];
    if (has_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prev());
    }

    // optional int64 temp = 3 [default = 0];
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->temp());
    }

    // optional int64 min = 4 [default = -999999999];
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min());
    }

    // optional int64 max = 5 [default = 999999999];
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max());
    }

    // optional int64 step = 6 [default = 1];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->step());
    }

    // optional int64 idx = 7 [default = 0];
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idx());
    }

    // optional string name = 8 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int64Param::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.Int64Param)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Int64Param* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Int64Param>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.Int64Param)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.Int64Param)
    MergeFrom(*source);
  }
}

void Int64Param::MergeFrom(const Int64Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.Int64Param)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr()) {
      set_curr(from.curr());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Int64Param::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.Int64Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64Param::CopyFrom(const Int64Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.Int64Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Param::IsInitialized() const {

  return true;
}

void Int64Param::Swap(Int64Param* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64Param::InternalSwap(Int64Param* other) {
  std::swap(curr_, other->curr_);
  std::swap(prev_, other->prev_);
  std::swap(temp_, other->temp_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(step_, other->step_);
  std::swap(idx_, other->idx_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int64Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int64Param_descriptor_;
  metadata.reflection = Int64Param_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int64Param

// optional int64 curr = 1 [default = 0];
bool Int64Param::has_curr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Int64Param::set_has_curr() {
  _has_bits_[0] |= 0x00000001u;
}
void Int64Param::clear_has_curr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Int64Param::clear_curr() {
  curr_ = GOOGLE_LONGLONG(0);
  clear_has_curr();
}
 ::google::protobuf::int64 Int64Param::curr() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.curr)
  return curr_;
}
 void Int64Param::set_curr(::google::protobuf::int64 value) {
  set_has_curr();
  curr_ = value;
  // @@protoc_insertion_point(field_set:XT.Int64Param.curr)
}

// optional int64 prev = 2 [default = 0];
bool Int64Param::has_prev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Int64Param::set_has_prev() {
  _has_bits_[0] |= 0x00000002u;
}
void Int64Param::clear_has_prev() {
  _has_bits_[0] &= ~0x00000002u;
}
void Int64Param::clear_prev() {
  prev_ = GOOGLE_LONGLONG(0);
  clear_has_prev();
}
 ::google::protobuf::int64 Int64Param::prev() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.prev)
  return prev_;
}
 void Int64Param::set_prev(::google::protobuf::int64 value) {
  set_has_prev();
  prev_ = value;
  // @@protoc_insertion_point(field_set:XT.Int64Param.prev)
}

// optional int64 temp = 3 [default = 0];
bool Int64Param::has_temp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Int64Param::set_has_temp() {
  _has_bits_[0] |= 0x00000004u;
}
void Int64Param::clear_has_temp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Int64Param::clear_temp() {
  temp_ = GOOGLE_LONGLONG(0);
  clear_has_temp();
}
 ::google::protobuf::int64 Int64Param::temp() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.temp)
  return temp_;
}
 void Int64Param::set_temp(::google::protobuf::int64 value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:XT.Int64Param.temp)
}

// optional int64 min = 4 [default = -999999999];
bool Int64Param::has_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Int64Param::set_has_min() {
  _has_bits_[0] |= 0x00000008u;
}
void Int64Param::clear_has_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void Int64Param::clear_min() {
  min_ = GOOGLE_LONGLONG(-999999999);
  clear_has_min();
}
 ::google::protobuf::int64 Int64Param::min() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.min)
  return min_;
}
 void Int64Param::set_min(::google::protobuf::int64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:XT.Int64Param.min)
}

// optional int64 max = 5 [default = 999999999];
bool Int64Param::has_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Int64Param::set_has_max() {
  _has_bits_[0] |= 0x00000010u;
}
void Int64Param::clear_has_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void Int64Param::clear_max() {
  max_ = GOOGLE_LONGLONG(999999999);
  clear_has_max();
}
 ::google::protobuf::int64 Int64Param::max() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.max)
  return max_;
}
 void Int64Param::set_max(::google::protobuf::int64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:XT.Int64Param.max)
}

// optional int64 step = 6 [default = 1];
bool Int64Param::has_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Int64Param::set_has_step() {
  _has_bits_[0] |= 0x00000020u;
}
void Int64Param::clear_has_step() {
  _has_bits_[0] &= ~0x00000020u;
}
void Int64Param::clear_step() {
  step_ = GOOGLE_LONGLONG(1);
  clear_has_step();
}
 ::google::protobuf::int64 Int64Param::step() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.step)
  return step_;
}
 void Int64Param::set_step(::google::protobuf::int64 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:XT.Int64Param.step)
}

// optional int64 idx = 7 [default = 0];
bool Int64Param::has_idx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Int64Param::set_has_idx() {
  _has_bits_[0] |= 0x00000040u;
}
void Int64Param::clear_has_idx() {
  _has_bits_[0] &= ~0x00000040u;
}
void Int64Param::clear_idx() {
  idx_ = GOOGLE_LONGLONG(0);
  clear_has_idx();
}
 ::google::protobuf::int64 Int64Param::idx() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.idx)
  return idx_;
}
 void Int64Param::set_idx(::google::protobuf::int64 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:XT.Int64Param.idx)
}

// optional string name = 8 [default = ""];
bool Int64Param::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Int64Param::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
void Int64Param::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void Int64Param::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Int64Param::name() const {
  // @@protoc_insertion_point(field_get:XT.Int64Param.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Int64Param::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.Int64Param.name)
}
 void Int64Param::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.Int64Param.name)
}
 void Int64Param::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.Int64Param.name)
}
 ::std::string* Int64Param::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.Int64Param.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Int64Param::release_name() {
  // @@protoc_insertion_point(field_release:XT.Int64Param.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Int64Param::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.Int64Param.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleIntParams::kDoubleparamsFieldNumber;
const int DoubleIntParams::kIntparamsFieldNumber;
const int DoubleIntParams::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleIntParams::DoubleIntParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.DoubleIntParams)
}

void DoubleIntParams::InitAsDefaultInstance() {
}

DoubleIntParams::DoubleIntParams(const DoubleIntParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.DoubleIntParams)
}

void DoubleIntParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleIntParams::~DoubleIntParams() {
  // @@protoc_insertion_point(destructor:XT.DoubleIntParams)
  SharedDtor();
}

void DoubleIntParams::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DoubleIntParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleIntParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleIntParams_descriptor_;
}

const DoubleIntParams& DoubleIntParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

DoubleIntParams* DoubleIntParams::default_instance_ = NULL;

DoubleIntParams* DoubleIntParams::New(::google::protobuf::Arena* arena) const {
  DoubleIntParams* n = new DoubleIntParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleIntParams::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.DoubleIntParams)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  doubleparams_.Clear();
  intparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DoubleIntParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.DoubleIntParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .XT.DoubleParam doubleparams = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_doubleparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_doubleparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_doubleparams;
        if (input->ExpectTag(18)) goto parse_loop_intparams;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .XT.IntParam intparams = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_intparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_intparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_intparams;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.DoubleIntParams.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.DoubleIntParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.DoubleIntParams)
  return false;
#undef DO_
}

void DoubleIntParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.DoubleIntParams)
  // repeated .XT.DoubleParam doubleparams = 1;
  for (unsigned int i = 0, n = this->doubleparams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doubleparams(i), output);
  }

  // repeated .XT.IntParam intparams = 2;
  for (unsigned int i = 0, n = this->intparams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intparams(i), output);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.DoubleIntParams.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.DoubleIntParams)
}

::google::protobuf::uint8* DoubleIntParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.DoubleIntParams)
  // repeated .XT.DoubleParam doubleparams = 1;
  for (unsigned int i = 0, n = this->doubleparams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->doubleparams(i), false, target);
  }

  // repeated .XT.IntParam intparams = 2;
  for (unsigned int i = 0, n = this->intparams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->intparams(i), false, target);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.DoubleIntParams.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.DoubleIntParams)
  return target;
}

int DoubleIntParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.DoubleIntParams)
  int total_size = 0;

  // optional string name = 3 [default = ""];
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .XT.DoubleParam doubleparams = 1;
  total_size += 1 * this->doubleparams_size();
  for (int i = 0; i < this->doubleparams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doubleparams(i));
  }

  // repeated .XT.IntParam intparams = 2;
  total_size += 1 * this->intparams_size();
  for (int i = 0; i < this->intparams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intparams(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleIntParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.DoubleIntParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DoubleIntParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleIntParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.DoubleIntParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.DoubleIntParams)
    MergeFrom(*source);
  }
}

void DoubleIntParams::MergeFrom(const DoubleIntParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.DoubleIntParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  doubleparams_.MergeFrom(from.doubleparams_);
  intparams_.MergeFrom(from.intparams_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DoubleIntParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.DoubleIntParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleIntParams::CopyFrom(const DoubleIntParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.DoubleIntParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleIntParams::IsInitialized() const {

  return true;
}

void DoubleIntParams::Swap(DoubleIntParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleIntParams::InternalSwap(DoubleIntParams* other) {
  doubleparams_.UnsafeArenaSwap(&other->doubleparams_);
  intparams_.UnsafeArenaSwap(&other->intparams_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleIntParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleIntParams_descriptor_;
  metadata.reflection = DoubleIntParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleIntParams

// repeated .XT.DoubleParam doubleparams = 1;
int DoubleIntParams::doubleparams_size() const {
  return doubleparams_.size();
}
void DoubleIntParams::clear_doubleparams() {
  doubleparams_.Clear();
}
const ::XT::DoubleParam& DoubleIntParams::doubleparams(int index) const {
  // @@protoc_insertion_point(field_get:XT.DoubleIntParams.doubleparams)
  return doubleparams_.Get(index);
}
::XT::DoubleParam* DoubleIntParams::mutable_doubleparams(int index) {
  // @@protoc_insertion_point(field_mutable:XT.DoubleIntParams.doubleparams)
  return doubleparams_.Mutable(index);
}
::XT::DoubleParam* DoubleIntParams::add_doubleparams() {
  // @@protoc_insertion_point(field_add:XT.DoubleIntParams.doubleparams)
  return doubleparams_.Add();
}
::google::protobuf::RepeatedPtrField< ::XT::DoubleParam >*
DoubleIntParams::mutable_doubleparams() {
  // @@protoc_insertion_point(field_mutable_list:XT.DoubleIntParams.doubleparams)
  return &doubleparams_;
}
const ::google::protobuf::RepeatedPtrField< ::XT::DoubleParam >&
DoubleIntParams::doubleparams() const {
  // @@protoc_insertion_point(field_list:XT.DoubleIntParams.doubleparams)
  return doubleparams_;
}

// repeated .XT.IntParam intparams = 2;
int DoubleIntParams::intparams_size() const {
  return intparams_.size();
}
void DoubleIntParams::clear_intparams() {
  intparams_.Clear();
}
const ::XT::IntParam& DoubleIntParams::intparams(int index) const {
  // @@protoc_insertion_point(field_get:XT.DoubleIntParams.intparams)
  return intparams_.Get(index);
}
::XT::IntParam* DoubleIntParams::mutable_intparams(int index) {
  // @@protoc_insertion_point(field_mutable:XT.DoubleIntParams.intparams)
  return intparams_.Mutable(index);
}
::XT::IntParam* DoubleIntParams::add_intparams() {
  // @@protoc_insertion_point(field_add:XT.DoubleIntParams.intparams)
  return intparams_.Add();
}
::google::protobuf::RepeatedPtrField< ::XT::IntParam >*
DoubleIntParams::mutable_intparams() {
  // @@protoc_insertion_point(field_mutable_list:XT.DoubleIntParams.intparams)
  return &intparams_;
}
const ::google::protobuf::RepeatedPtrField< ::XT::IntParam >&
DoubleIntParams::intparams() const {
  // @@protoc_insertion_point(field_list:XT.DoubleIntParams.intparams)
  return intparams_;
}

// optional string name = 3 [default = ""];
bool DoubleIntParams::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DoubleIntParams::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void DoubleIntParams::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void DoubleIntParams::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DoubleIntParams::name() const {
  // @@protoc_insertion_point(field_get:XT.DoubleIntParams.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DoubleIntParams::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.DoubleIntParams.name)
}
 void DoubleIntParams::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.DoubleIntParams.name)
}
 void DoubleIntParams::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.DoubleIntParams.name)
}
 ::std::string* DoubleIntParams::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.DoubleIntParams.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DoubleIntParams::release_name() {
  // @@protoc_insertion_point(field_release:XT.DoubleIntParams.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DoubleIntParams::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.DoubleIntParams.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleFunctionParams::kNameFieldNumber;
const int DoubleFunctionParams::kDoubleparamsFieldNumber;
const int DoubleFunctionParams::kIntparamsFieldNumber;
const int DoubleFunctionParams::kEpsilonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleFunctionParams::DoubleFunctionParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.DoubleFunctionParams)
}

void DoubleFunctionParams::InitAsDefaultInstance() {
}

DoubleFunctionParams::DoubleFunctionParams(const DoubleFunctionParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.DoubleFunctionParams)
}

void DoubleFunctionParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epsilon_ = 1e-06;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleFunctionParams::~DoubleFunctionParams() {
  // @@protoc_insertion_point(destructor:XT.DoubleFunctionParams)
  SharedDtor();
}

void DoubleFunctionParams::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DoubleFunctionParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleFunctionParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleFunctionParams_descriptor_;
}

const DoubleFunctionParams& DoubleFunctionParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

DoubleFunctionParams* DoubleFunctionParams::default_instance_ = NULL;

DoubleFunctionParams* DoubleFunctionParams::New(::google::protobuf::Arena* arena) const {
  DoubleFunctionParams* n = new DoubleFunctionParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleFunctionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.DoubleFunctionParams)
  if (_has_bits_[0 / 32] & 9u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    epsilon_ = 1e-06;
  }
  doubleparams_.Clear();
  intparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DoubleFunctionParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.DoubleFunctionParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.DoubleFunctionParams.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_doubleparams;
        break;
      }

      // repeated .XT.DoubleParam doubleparams = 2;
      case 2: {
        if (tag == 18) {
         parse_doubleparams:
          DO_(input->IncrementRecursionDepth());
         parse_loop_doubleparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_doubleparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_doubleparams;
        if (input->ExpectTag(26)) goto parse_loop_intparams;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .XT.IntParam intparams = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_intparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_intparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_intparams;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(33)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 4 [default = 1e-06];
      case 4: {
        if (tag == 33) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.DoubleFunctionParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.DoubleFunctionParams)
  return false;
#undef DO_
}

void DoubleFunctionParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.DoubleFunctionParams)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.DoubleFunctionParams.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .XT.DoubleParam doubleparams = 2;
  for (unsigned int i = 0, n = this->doubleparams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doubleparams(i), output);
  }

  // repeated .XT.IntParam intparams = 3;
  for (unsigned int i = 0, n = this->intparams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->intparams(i), output);
  }

  // optional double epsilon = 4 [default = 1e-06];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->epsilon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.DoubleFunctionParams)
}

::google::protobuf::uint8* DoubleFunctionParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.DoubleFunctionParams)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.DoubleFunctionParams.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .XT.DoubleParam doubleparams = 2;
  for (unsigned int i = 0, n = this->doubleparams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->doubleparams(i), false, target);
  }

  // repeated .XT.IntParam intparams = 3;
  for (unsigned int i = 0, n = this->intparams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->intparams(i), false, target);
  }

  // optional double epsilon = 4 [default = 1e-06];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->epsilon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.DoubleFunctionParams)
  return target;
}

int DoubleFunctionParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.DoubleFunctionParams)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 9u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double epsilon = 4 [default = 1e-06];
    if (has_epsilon()) {
      total_size += 1 + 8;
    }

  }
  // repeated .XT.DoubleParam doubleparams = 2;
  total_size += 1 * this->doubleparams_size();
  for (int i = 0; i < this->doubleparams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doubleparams(i));
  }

  // repeated .XT.IntParam intparams = 3;
  total_size += 1 * this->intparams_size();
  for (int i = 0; i < this->intparams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intparams(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleFunctionParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.DoubleFunctionParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DoubleFunctionParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleFunctionParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.DoubleFunctionParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.DoubleFunctionParams)
    MergeFrom(*source);
  }
}

void DoubleFunctionParams::MergeFrom(const DoubleFunctionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.DoubleFunctionParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  doubleparams_.MergeFrom(from.doubleparams_);
  intparams_.MergeFrom(from.intparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DoubleFunctionParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.DoubleFunctionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleFunctionParams::CopyFrom(const DoubleFunctionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.DoubleFunctionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleFunctionParams::IsInitialized() const {

  return true;
}

void DoubleFunctionParams::Swap(DoubleFunctionParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleFunctionParams::InternalSwap(DoubleFunctionParams* other) {
  name_.Swap(&other->name_);
  doubleparams_.UnsafeArenaSwap(&other->doubleparams_);
  intparams_.UnsafeArenaSwap(&other->intparams_);
  std::swap(epsilon_, other->epsilon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleFunctionParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleFunctionParams_descriptor_;
  metadata.reflection = DoubleFunctionParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleFunctionParams

// optional string name = 1 [default = ""];
bool DoubleFunctionParams::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DoubleFunctionParams::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DoubleFunctionParams::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DoubleFunctionParams::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DoubleFunctionParams::name() const {
  // @@protoc_insertion_point(field_get:XT.DoubleFunctionParams.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DoubleFunctionParams::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.DoubleFunctionParams.name)
}
 void DoubleFunctionParams::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.DoubleFunctionParams.name)
}
 void DoubleFunctionParams::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.DoubleFunctionParams.name)
}
 ::std::string* DoubleFunctionParams::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.DoubleFunctionParams.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DoubleFunctionParams::release_name() {
  // @@protoc_insertion_point(field_release:XT.DoubleFunctionParams.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DoubleFunctionParams::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.DoubleFunctionParams.name)
}

// repeated .XT.DoubleParam doubleparams = 2;
int DoubleFunctionParams::doubleparams_size() const {
  return doubleparams_.size();
}
void DoubleFunctionParams::clear_doubleparams() {
  doubleparams_.Clear();
}
const ::XT::DoubleParam& DoubleFunctionParams::doubleparams(int index) const {
  // @@protoc_insertion_point(field_get:XT.DoubleFunctionParams.doubleparams)
  return doubleparams_.Get(index);
}
::XT::DoubleParam* DoubleFunctionParams::mutable_doubleparams(int index) {
  // @@protoc_insertion_point(field_mutable:XT.DoubleFunctionParams.doubleparams)
  return doubleparams_.Mutable(index);
}
::XT::DoubleParam* DoubleFunctionParams::add_doubleparams() {
  // @@protoc_insertion_point(field_add:XT.DoubleFunctionParams.doubleparams)
  return doubleparams_.Add();
}
::google::protobuf::RepeatedPtrField< ::XT::DoubleParam >*
DoubleFunctionParams::mutable_doubleparams() {
  // @@protoc_insertion_point(field_mutable_list:XT.DoubleFunctionParams.doubleparams)
  return &doubleparams_;
}
const ::google::protobuf::RepeatedPtrField< ::XT::DoubleParam >&
DoubleFunctionParams::doubleparams() const {
  // @@protoc_insertion_point(field_list:XT.DoubleFunctionParams.doubleparams)
  return doubleparams_;
}

// repeated .XT.IntParam intparams = 3;
int DoubleFunctionParams::intparams_size() const {
  return intparams_.size();
}
void DoubleFunctionParams::clear_intparams() {
  intparams_.Clear();
}
const ::XT::IntParam& DoubleFunctionParams::intparams(int index) const {
  // @@protoc_insertion_point(field_get:XT.DoubleFunctionParams.intparams)
  return intparams_.Get(index);
}
::XT::IntParam* DoubleFunctionParams::mutable_intparams(int index) {
  // @@protoc_insertion_point(field_mutable:XT.DoubleFunctionParams.intparams)
  return intparams_.Mutable(index);
}
::XT::IntParam* DoubleFunctionParams::add_intparams() {
  // @@protoc_insertion_point(field_add:XT.DoubleFunctionParams.intparams)
  return intparams_.Add();
}
::google::protobuf::RepeatedPtrField< ::XT::IntParam >*
DoubleFunctionParams::mutable_intparams() {
  // @@protoc_insertion_point(field_mutable_list:XT.DoubleFunctionParams.intparams)
  return &intparams_;
}
const ::google::protobuf::RepeatedPtrField< ::XT::IntParam >&
DoubleFunctionParams::intparams() const {
  // @@protoc_insertion_point(field_list:XT.DoubleFunctionParams.intparams)
  return intparams_;
}

// optional double epsilon = 4 [default = 1e-06];
bool DoubleFunctionParams::has_epsilon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DoubleFunctionParams::set_has_epsilon() {
  _has_bits_[0] |= 0x00000008u;
}
void DoubleFunctionParams::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000008u;
}
void DoubleFunctionParams::clear_epsilon() {
  epsilon_ = 1e-06;
  clear_has_epsilon();
}
 double DoubleFunctionParams::epsilon() const {
  // @@protoc_insertion_point(field_get:XT.DoubleFunctionParams.epsilon)
  return epsilon_;
}
 void DoubleFunctionParams::set_epsilon(double value) {
  set_has_epsilon();
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:XT.DoubleFunctionParams.epsilon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointData::kXFieldNumber;
const int PointData::kYFieldNumber;
const int PointData::kZFieldNumber;
const int PointData::kVFieldNumber;
const int PointData::kWFieldNumber;
const int PointData::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointData::PointData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PointData)
}

void PointData::InitAsDefaultInstance() {
}

PointData::PointData(const PointData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PointData)
}

void PointData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  v_ = 0;
  w_ = 1;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointData::~PointData() {
  // @@protoc_insertion_point(destructor:XT.PointData)
  SharedDtor();
}

void PointData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointData_descriptor_;
}

const PointData& PointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PointData* PointData::default_instance_ = NULL;

PointData* PointData::New(::google::protobuf::Arena* arena) const {
  PointData* n = new PointData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PointData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(x_, v_);
    w_ = 1;
    flag_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PointData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_v;
        break;
      }

      // optional double v = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_w;
        break;
      }

      // optional double w = 5 [default = 1];
      case 5: {
        if (tag == 41) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flag;
        break;
      }

      // optional int32 flag = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PointData)
  return false;
#undef DO_
}

void PointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PointData)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double v = 4 [default = 0];
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->v(), output);
  }

  // optional double w = 5 [default = 1];
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->w(), output);
  }

  // optional int32 flag = 6 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PointData)
}

::google::protobuf::uint8* PointData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PointData)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double v = 4 [default = 0];
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->v(), target);
  }

  // optional double w = 5 [default = 1];
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->w(), target);
  }

  // optional int32 flag = 6 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PointData)
  return target;
}

int PointData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PointData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double v = 4 [default = 0];
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double w = 5 [default = 1];
    if (has_w()) {
      total_size += 1 + 8;
    }

    // optional int32 flag = 6 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PointData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PointData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PointData)
    MergeFrom(*source);
  }
}

void PointData::MergeFrom(const PointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PointData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointData::CopyFrom(const PointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointData::IsInitialized() const {

  return true;
}

void PointData::Swap(PointData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointData::InternalSwap(PointData* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(v_, other->v_);
  std::swap(w_, other->w_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointData_descriptor_;
  metadata.reflection = PointData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointData

// optional double x = 1 [default = 0];
bool PointData::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointData::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PointData::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointData::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double PointData::x() const {
  // @@protoc_insertion_point(field_get:XT.PointData.x)
  return x_;
}
 void PointData::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:XT.PointData.x)
}

// optional double y = 2 [default = 0];
bool PointData::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointData::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PointData::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointData::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double PointData::y() const {
  // @@protoc_insertion_point(field_get:XT.PointData.y)
  return y_;
}
 void PointData::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:XT.PointData.y)
}

// optional double z = 3 [default = 0];
bool PointData::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointData::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void PointData::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointData::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double PointData::z() const {
  // @@protoc_insertion_point(field_get:XT.PointData.z)
  return z_;
}
 void PointData::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:XT.PointData.z)
}

// optional double v = 4 [default = 0];
bool PointData::has_v() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PointData::set_has_v() {
  _has_bits_[0] |= 0x00000008u;
}
void PointData::clear_has_v() {
  _has_bits_[0] &= ~0x00000008u;
}
void PointData::clear_v() {
  v_ = 0;
  clear_has_v();
}
 double PointData::v() const {
  // @@protoc_insertion_point(field_get:XT.PointData.v)
  return v_;
}
 void PointData::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:XT.PointData.v)
}

// optional double w = 5 [default = 1];
bool PointData::has_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PointData::set_has_w() {
  _has_bits_[0] |= 0x00000010u;
}
void PointData::clear_has_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void PointData::clear_w() {
  w_ = 1;
  clear_has_w();
}
 double PointData::w() const {
  // @@protoc_insertion_point(field_get:XT.PointData.w)
  return w_;
}
 void PointData::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:XT.PointData.w)
}

// optional int32 flag = 6 [default = 0];
bool PointData::has_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PointData::set_has_flag() {
  _has_bits_[0] |= 0x00000020u;
}
void PointData::clear_has_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
void PointData::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
 ::google::protobuf::int32 PointData::flag() const {
  // @@protoc_insertion_point(field_get:XT.PointData.flag)
  return flag_;
}
 void PointData::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:XT.PointData.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointDataMap::kPointsmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointDataMap::PointDataMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PointDataMap)
}

void PointDataMap::InitAsDefaultInstance() {
}

PointDataMap::PointDataMap(const PointDataMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PointDataMap)
}

void PointDataMap::SharedCtor() {
  _cached_size_ = 0;
  pointsmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  pointsmap_.SetEntryDescriptor(
      &::XT::PointDataMap_PointsmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointDataMap::~PointDataMap() {
  // @@protoc_insertion_point(destructor:XT.PointDataMap)
  SharedDtor();
}

void PointDataMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointDataMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointDataMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointDataMap_descriptor_;
}

const PointDataMap& PointDataMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PointDataMap* PointDataMap::default_instance_ = NULL;

PointDataMap* PointDataMap::New(::google::protobuf::Arena* arena) const {
  PointDataMap* n = new PointDataMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointDataMap::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PointDataMap)
  pointsmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointDataMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PointDataMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .XT.PointData> pointsmap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pointsmap:
          PointDataMap_PointsmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::XT::PointData,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData > > parser(&pointsmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pointsmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PointDataMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PointDataMap)
  return false;
#undef DO_
}

void PointDataMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PointDataMap)
  // map<int32, .XT.PointData> pointsmap = 1;
  if (!this->pointsmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->pointsmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->pointsmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::const_iterator
          it = this->pointsmap().begin();
          it != this->pointsmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PointDataMap_PointsmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(pointsmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PointDataMap_PointsmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::const_iterator
          it = this->pointsmap().begin();
          it != this->pointsmap().end(); ++it) {
        entry.reset(pointsmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PointDataMap)
}

::google::protobuf::uint8* PointDataMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PointDataMap)
  // map<int32, .XT.PointData> pointsmap = 1;
  if (!this->pointsmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->pointsmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->pointsmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::const_iterator
          it = this->pointsmap().begin();
          it != this->pointsmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PointDataMap_PointsmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(pointsmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PointDataMap_PointsmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::const_iterator
          it = this->pointsmap().begin();
          it != this->pointsmap().end(); ++it) {
        entry.reset(pointsmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PointDataMap)
  return target;
}

int PointDataMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PointDataMap)
  int total_size = 0;

  // map<int32, .XT.PointData> pointsmap = 1;
  total_size += 1 * this->pointsmap_size();
  {
    ::google::protobuf::scoped_ptr<PointDataMap_PointsmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >::const_iterator
        it = this->pointsmap().begin();
        it != this->pointsmap().end(); ++it) {
      entry.reset(pointsmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointDataMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PointDataMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointDataMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointDataMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PointDataMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PointDataMap)
    MergeFrom(*source);
  }
}

void PointDataMap::MergeFrom(const PointDataMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PointDataMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pointsmap_.MergeFrom(from.pointsmap_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointDataMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PointDataMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointDataMap::CopyFrom(const PointDataMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PointDataMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDataMap::IsInitialized() const {

  return true;
}

void PointDataMap::Swap(PointDataMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointDataMap::InternalSwap(PointDataMap* other) {
  pointsmap_.Swap(&other->pointsmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointDataMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointDataMap_descriptor_;
  metadata.reflection = PointDataMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointDataMap

// map<int32, .XT.PointData> pointsmap = 1;
int PointDataMap::pointsmap_size() const {
  return pointsmap_.size();
}
void PointDataMap::clear_pointsmap() {
  pointsmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >&
PointDataMap::pointsmap() const {
  // @@protoc_insertion_point(field_map:XT.PointDataMap.pointsmap)
  return pointsmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::XT::PointData >*
PointDataMap::mutable_pointsmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.PointDataMap.pointsmap)
  return pointsmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointDataList::kPointslistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointDataList::PointDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PointDataList)
}

void PointDataList::InitAsDefaultInstance() {
}

PointDataList::PointDataList(const PointDataList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PointDataList)
}

void PointDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointDataList::~PointDataList() {
  // @@protoc_insertion_point(destructor:XT.PointDataList)
  SharedDtor();
}

void PointDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointDataList_descriptor_;
}

const PointDataList& PointDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PointDataList* PointDataList::default_instance_ = NULL;

PointDataList* PointDataList::New(::google::protobuf::Arena* arena) const {
  PointDataList* n = new PointDataList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PointDataList)
  pointslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PointDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .XT.PointData pointslist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pointslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pointslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pointslist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PointDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PointDataList)
  return false;
#undef DO_
}

void PointDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PointDataList)
  // repeated .XT.PointData pointslist = 1;
  for (unsigned int i = 0, n = this->pointslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pointslist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PointDataList)
}

::google::protobuf::uint8* PointDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PointDataList)
  // repeated .XT.PointData pointslist = 1;
  for (unsigned int i = 0, n = this->pointslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pointslist(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PointDataList)
  return target;
}

int PointDataList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PointDataList)
  int total_size = 0;

  // repeated .XT.PointData pointslist = 1;
  total_size += 1 * this->pointslist_size();
  for (int i = 0; i < this->pointslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointslist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PointDataList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointDataList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PointDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PointDataList)
    MergeFrom(*source);
  }
}

void PointDataList::MergeFrom(const PointDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PointDataList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pointslist_.MergeFrom(from.pointslist_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PointDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointDataList::CopyFrom(const PointDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PointDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDataList::IsInitialized() const {

  return true;
}

void PointDataList::Swap(PointDataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointDataList::InternalSwap(PointDataList* other) {
  pointslist_.UnsafeArenaSwap(&other->pointslist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointDataList_descriptor_;
  metadata.reflection = PointDataList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointDataList

// repeated .XT.PointData pointslist = 1;
int PointDataList::pointslist_size() const {
  return pointslist_.size();
}
void PointDataList::clear_pointslist() {
  pointslist_.Clear();
}
const ::XT::PointData& PointDataList::pointslist(int index) const {
  // @@protoc_insertion_point(field_get:XT.PointDataList.pointslist)
  return pointslist_.Get(index);
}
::XT::PointData* PointDataList::mutable_pointslist(int index) {
  // @@protoc_insertion_point(field_mutable:XT.PointDataList.pointslist)
  return pointslist_.Mutable(index);
}
::XT::PointData* PointDataList::add_pointslist() {
  // @@protoc_insertion_point(field_add:XT.PointDataList.pointslist)
  return pointslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::XT::PointData >*
PointDataList::mutable_pointslist() {
  // @@protoc_insertion_point(field_mutable_list:XT.PointDataList.pointslist)
  return &pointslist_;
}
const ::google::protobuf::RepeatedPtrField< ::XT::PointData >&
PointDataList::pointslist() const {
  // @@protoc_insertion_point(field_list:XT.PointDataList.pointslist)
  return pointslist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveCfgData::kNameFieldNumber;
const int CurveCfgData::kMaxnoiFieldNumber;
const int CurveCfgData::kMinstartnoiFieldNumber;
const int CurveCfgData::kRooteFieldNumber;
const int CurveCfgData::kFunceFieldNumber;
const int CurveCfgData::kGradnormeFieldNumber;
const int CurveCfgData::kFitmethodFieldNumber;
const int CurveCfgData::kWeightmethodFieldNumber;
const int CurveCfgData::kMinweightFieldNumber;
const int CurveCfgData::kMaxweightFieldNumber;
const int CurveCfgData::kMinxFieldNumber;
const int CurveCfgData::kMaxxFieldNumber;
const int CurveCfgData::kMinyFieldNumber;
const int CurveCfgData::kMaxyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveCfgData::CurveCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.CurveCfgData)
}

void CurveCfgData::InitAsDefaultInstance() {
}

CurveCfgData::CurveCfgData(const CurveCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.CurveCfgData)
}

void CurveCfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxnoi_ = 1000;
  minstartnoi_ = 5;
  roote_ = 0.0001;
  funce_ = 0.0001;
  gradnorme_ = 0.0001;
  fitmethod_ = 0;
  weightmethod_ = 0;
  minweight_ = 0;
  maxweight_ = 999999999;
  minx_ = -999999999;
  maxx_ = 999999999;
  miny_ = -999999999;
  maxy_ = 999999999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurveCfgData::~CurveCfgData() {
  // @@protoc_insertion_point(destructor:XT.CurveCfgData)
  SharedDtor();
}

void CurveCfgData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CurveCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveCfgData_descriptor_;
}

const CurveCfgData& CurveCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

CurveCfgData* CurveCfgData::default_instance_ = NULL;

CurveCfgData* CurveCfgData::New(::google::protobuf::Arena* arena) const {
  CurveCfgData* n = new CurveCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurveCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.CurveCfgData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CurveCfgData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CurveCfgData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(fitmethod_, weightmethod_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    maxnoi_ = 1000;
    minstartnoi_ = 5;
    roote_ = 0.0001;
    funce_ = 0.0001;
    gradnorme_ = 0.0001;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    minweight_ = 0;
    maxweight_ = 999999999;
    minx_ = -999999999;
    maxx_ = 999999999;
    miny_ = -999999999;
    maxy_ = 999999999;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CurveCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.CurveCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.CurveCfgData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxnoi;
        break;
      }

      // optional int32 maxnoi = 2 [default = 1000];
      case 2: {
        if (tag == 16) {
         parse_maxnoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnoi_)));
          set_has_maxnoi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minstartnoi;
        break;
      }

      // optional int32 minstartnoi = 3 [default = 5];
      case 3: {
        if (tag == 24) {
         parse_minstartnoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minstartnoi_)));
          set_has_minstartnoi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_roote;
        break;
      }

      // optional double roote = 4 [default = 0.0001];
      case 4: {
        if (tag == 33) {
         parse_roote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roote_)));
          set_has_roote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_funce;
        break;
      }

      // optional double funce = 5 [default = 0.0001];
      case 5: {
        if (tag == 41) {
         parse_funce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &funce_)));
          set_has_funce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_gradnorme;
        break;
      }

      // optional double gradnorme = 6 [default = 0.0001];
      case 6: {
        if (tag == 49) {
         parse_gradnorme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gradnorme_)));
          set_has_gradnorme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fitmethod;
        break;
      }

      // optional int32 fitmethod = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_fitmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitmethod_)));
          set_has_fitmethod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_weightmethod;
        break;
      }

      // optional int32 weightmethod = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_weightmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weightmethod_)));
          set_has_weightmethod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_minweight;
        break;
      }

      // optional double minweight = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_minweight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minweight_)));
          set_has_minweight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_maxweight;
        break;
      }

      // optional double maxweight = 10 [default = 999999999];
      case 10: {
        if (tag == 81) {
         parse_maxweight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxweight_)));
          set_has_maxweight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_minx;
        break;
      }

      // optional double minx = 11 [default = -999999999];
      case 11: {
        if (tag == 89) {
         parse_minx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minx_)));
          set_has_minx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_maxx;
        break;
      }

      // optional double maxx = 12 [default = 999999999];
      case 12: {
        if (tag == 97) {
         parse_maxx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxx_)));
          set_has_maxx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_miny;
        break;
      }

      // optional double miny = 13 [default = -999999999];
      case 13: {
        if (tag == 105) {
         parse_miny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &miny_)));
          set_has_miny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_maxy;
        break;
      }

      // optional double maxy = 14 [default = 999999999];
      case 14: {
        if (tag == 113) {
         parse_maxy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxy_)));
          set_has_maxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.CurveCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.CurveCfgData)
  return false;
#undef DO_
}

void CurveCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.CurveCfgData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.CurveCfgData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 maxnoi = 2 [default = 1000];
  if (has_maxnoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxnoi(), output);
  }

  // optional int32 minstartnoi = 3 [default = 5];
  if (has_minstartnoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minstartnoi(), output);
  }

  // optional double roote = 4 [default = 0.0001];
  if (has_roote()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->roote(), output);
  }

  // optional double funce = 5 [default = 0.0001];
  if (has_funce()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->funce(), output);
  }

  // optional double gradnorme = 6 [default = 0.0001];
  if (has_gradnorme()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gradnorme(), output);
  }

  // optional int32 fitmethod = 7 [default = 0];
  if (has_fitmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fitmethod(), output);
  }

  // optional int32 weightmethod = 8 [default = 0];
  if (has_weightmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->weightmethod(), output);
  }

  // optional double minweight = 9 [default = 0];
  if (has_minweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->minweight(), output);
  }

  // optional double maxweight = 10 [default = 999999999];
  if (has_maxweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->maxweight(), output);
  }

  // optional double minx = 11 [default = -999999999];
  if (has_minx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->minx(), output);
  }

  // optional double maxx = 12 [default = 999999999];
  if (has_maxx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->maxx(), output);
  }

  // optional double miny = 13 [default = -999999999];
  if (has_miny()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->miny(), output);
  }

  // optional double maxy = 14 [default = 999999999];
  if (has_maxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->maxy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.CurveCfgData)
}

::google::protobuf::uint8* CurveCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.CurveCfgData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.CurveCfgData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 maxnoi = 2 [default = 1000];
  if (has_maxnoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxnoi(), target);
  }

  // optional int32 minstartnoi = 3 [default = 5];
  if (has_minstartnoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minstartnoi(), target);
  }

  // optional double roote = 4 [default = 0.0001];
  if (has_roote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->roote(), target);
  }

  // optional double funce = 5 [default = 0.0001];
  if (has_funce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->funce(), target);
  }

  // optional double gradnorme = 6 [default = 0.0001];
  if (has_gradnorme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gradnorme(), target);
  }

  // optional int32 fitmethod = 7 [default = 0];
  if (has_fitmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fitmethod(), target);
  }

  // optional int32 weightmethod = 8 [default = 0];
  if (has_weightmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->weightmethod(), target);
  }

  // optional double minweight = 9 [default = 0];
  if (has_minweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->minweight(), target);
  }

  // optional double maxweight = 10 [default = 999999999];
  if (has_maxweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->maxweight(), target);
  }

  // optional double minx = 11 [default = -999999999];
  if (has_minx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->minx(), target);
  }

  // optional double maxx = 12 [default = 999999999];
  if (has_maxx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->maxx(), target);
  }

  // optional double miny = 13 [default = -999999999];
  if (has_miny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->miny(), target);
  }

  // optional double maxy = 14 [default = 999999999];
  if (has_maxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->maxy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.CurveCfgData)
  return target;
}

int CurveCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.CurveCfgData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 maxnoi = 2 [default = 1000];
    if (has_maxnoi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnoi());
    }

    // optional int32 minstartnoi = 3 [default = 5];
    if (has_minstartnoi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minstartnoi());
    }

    // optional double roote = 4 [default = 0.0001];
    if (has_roote()) {
      total_size += 1 + 8;
    }

    // optional double funce = 5 [default = 0.0001];
    if (has_funce()) {
      total_size += 1 + 8;
    }

    // optional double gradnorme = 6 [default = 0.0001];
    if (has_gradnorme()) {
      total_size += 1 + 8;
    }

    // optional int32 fitmethod = 7 [default = 0];
    if (has_fitmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fitmethod());
    }

    // optional int32 weightmethod = 8 [default = 0];
    if (has_weightmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weightmethod());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double minweight = 9 [default = 0];
    if (has_minweight()) {
      total_size += 1 + 8;
    }

    // optional double maxweight = 10 [default = 999999999];
    if (has_maxweight()) {
      total_size += 1 + 8;
    }

    // optional double minx = 11 [default = -999999999];
    if (has_minx()) {
      total_size += 1 + 8;
    }

    // optional double maxx = 12 [default = 999999999];
    if (has_maxx()) {
      total_size += 1 + 8;
    }

    // optional double miny = 13 [default = -999999999];
    if (has_miny()) {
      total_size += 1 + 8;
    }

    // optional double maxy = 14 [default = 999999999];
    if (has_maxy()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.CurveCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurveCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.CurveCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.CurveCfgData)
    MergeFrom(*source);
  }
}

void CurveCfgData::MergeFrom(const CurveCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.CurveCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_maxnoi()) {
      set_maxnoi(from.maxnoi());
    }
    if (from.has_minstartnoi()) {
      set_minstartnoi(from.minstartnoi());
    }
    if (from.has_roote()) {
      set_roote(from.roote());
    }
    if (from.has_funce()) {
      set_funce(from.funce());
    }
    if (from.has_gradnorme()) {
      set_gradnorme(from.gradnorme());
    }
    if (from.has_fitmethod()) {
      set_fitmethod(from.fitmethod());
    }
    if (from.has_weightmethod()) {
      set_weightmethod(from.weightmethod());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minweight()) {
      set_minweight(from.minweight());
    }
    if (from.has_maxweight()) {
      set_maxweight(from.maxweight());
    }
    if (from.has_minx()) {
      set_minx(from.minx());
    }
    if (from.has_maxx()) {
      set_maxx(from.maxx());
    }
    if (from.has_miny()) {
      set_miny(from.miny());
    }
    if (from.has_maxy()) {
      set_maxy(from.maxy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CurveCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.CurveCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveCfgData::CopyFrom(const CurveCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.CurveCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveCfgData::IsInitialized() const {

  return true;
}

void CurveCfgData::Swap(CurveCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveCfgData::InternalSwap(CurveCfgData* other) {
  name_.Swap(&other->name_);
  std::swap(maxnoi_, other->maxnoi_);
  std::swap(minstartnoi_, other->minstartnoi_);
  std::swap(roote_, other->roote_);
  std::swap(funce_, other->funce_);
  std::swap(gradnorme_, other->gradnorme_);
  std::swap(fitmethod_, other->fitmethod_);
  std::swap(weightmethod_, other->weightmethod_);
  std::swap(minweight_, other->minweight_);
  std::swap(maxweight_, other->maxweight_);
  std::swap(minx_, other->minx_);
  std::swap(maxx_, other->maxx_);
  std::swap(miny_, other->miny_);
  std::swap(maxy_, other->maxy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurveCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveCfgData_descriptor_;
  metadata.reflection = CurveCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurveCfgData

// optional string name = 1 [default = ""];
bool CurveCfgData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurveCfgData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CurveCfgData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurveCfgData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CurveCfgData::name() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CurveCfgData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.name)
}
 void CurveCfgData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.CurveCfgData.name)
}
 void CurveCfgData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.CurveCfgData.name)
}
 ::std::string* CurveCfgData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.CurveCfgData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CurveCfgData::release_name() {
  // @@protoc_insertion_point(field_release:XT.CurveCfgData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CurveCfgData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.CurveCfgData.name)
}

// optional int32 maxnoi = 2 [default = 1000];
bool CurveCfgData::has_maxnoi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurveCfgData::set_has_maxnoi() {
  _has_bits_[0] |= 0x00000002u;
}
void CurveCfgData::clear_has_maxnoi() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurveCfgData::clear_maxnoi() {
  maxnoi_ = 1000;
  clear_has_maxnoi();
}
 ::google::protobuf::int32 CurveCfgData::maxnoi() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.maxnoi)
  return maxnoi_;
}
 void CurveCfgData::set_maxnoi(::google::protobuf::int32 value) {
  set_has_maxnoi();
  maxnoi_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.maxnoi)
}

// optional int32 minstartnoi = 3 [default = 5];
bool CurveCfgData::has_minstartnoi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CurveCfgData::set_has_minstartnoi() {
  _has_bits_[0] |= 0x00000004u;
}
void CurveCfgData::clear_has_minstartnoi() {
  _has_bits_[0] &= ~0x00000004u;
}
void CurveCfgData::clear_minstartnoi() {
  minstartnoi_ = 5;
  clear_has_minstartnoi();
}
 ::google::protobuf::int32 CurveCfgData::minstartnoi() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.minstartnoi)
  return minstartnoi_;
}
 void CurveCfgData::set_minstartnoi(::google::protobuf::int32 value) {
  set_has_minstartnoi();
  minstartnoi_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.minstartnoi)
}

// optional double roote = 4 [default = 0.0001];
bool CurveCfgData::has_roote() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CurveCfgData::set_has_roote() {
  _has_bits_[0] |= 0x00000008u;
}
void CurveCfgData::clear_has_roote() {
  _has_bits_[0] &= ~0x00000008u;
}
void CurveCfgData::clear_roote() {
  roote_ = 0.0001;
  clear_has_roote();
}
 double CurveCfgData::roote() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.roote)
  return roote_;
}
 void CurveCfgData::set_roote(double value) {
  set_has_roote();
  roote_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.roote)
}

// optional double funce = 5 [default = 0.0001];
bool CurveCfgData::has_funce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CurveCfgData::set_has_funce() {
  _has_bits_[0] |= 0x00000010u;
}
void CurveCfgData::clear_has_funce() {
  _has_bits_[0] &= ~0x00000010u;
}
void CurveCfgData::clear_funce() {
  funce_ = 0.0001;
  clear_has_funce();
}
 double CurveCfgData::funce() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.funce)
  return funce_;
}
 void CurveCfgData::set_funce(double value) {
  set_has_funce();
  funce_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.funce)
}

// optional double gradnorme = 6 [default = 0.0001];
bool CurveCfgData::has_gradnorme() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CurveCfgData::set_has_gradnorme() {
  _has_bits_[0] |= 0x00000020u;
}
void CurveCfgData::clear_has_gradnorme() {
  _has_bits_[0] &= ~0x00000020u;
}
void CurveCfgData::clear_gradnorme() {
  gradnorme_ = 0.0001;
  clear_has_gradnorme();
}
 double CurveCfgData::gradnorme() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.gradnorme)
  return gradnorme_;
}
 void CurveCfgData::set_gradnorme(double value) {
  set_has_gradnorme();
  gradnorme_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.gradnorme)
}

// optional int32 fitmethod = 7 [default = 0];
bool CurveCfgData::has_fitmethod() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CurveCfgData::set_has_fitmethod() {
  _has_bits_[0] |= 0x00000040u;
}
void CurveCfgData::clear_has_fitmethod() {
  _has_bits_[0] &= ~0x00000040u;
}
void CurveCfgData::clear_fitmethod() {
  fitmethod_ = 0;
  clear_has_fitmethod();
}
 ::google::protobuf::int32 CurveCfgData::fitmethod() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.fitmethod)
  return fitmethod_;
}
 void CurveCfgData::set_fitmethod(::google::protobuf::int32 value) {
  set_has_fitmethod();
  fitmethod_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.fitmethod)
}

// optional int32 weightmethod = 8 [default = 0];
bool CurveCfgData::has_weightmethod() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CurveCfgData::set_has_weightmethod() {
  _has_bits_[0] |= 0x00000080u;
}
void CurveCfgData::clear_has_weightmethod() {
  _has_bits_[0] &= ~0x00000080u;
}
void CurveCfgData::clear_weightmethod() {
  weightmethod_ = 0;
  clear_has_weightmethod();
}
 ::google::protobuf::int32 CurveCfgData::weightmethod() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.weightmethod)
  return weightmethod_;
}
 void CurveCfgData::set_weightmethod(::google::protobuf::int32 value) {
  set_has_weightmethod();
  weightmethod_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.weightmethod)
}

// optional double minweight = 9 [default = 0];
bool CurveCfgData::has_minweight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CurveCfgData::set_has_minweight() {
  _has_bits_[0] |= 0x00000100u;
}
void CurveCfgData::clear_has_minweight() {
  _has_bits_[0] &= ~0x00000100u;
}
void CurveCfgData::clear_minweight() {
  minweight_ = 0;
  clear_has_minweight();
}
 double CurveCfgData::minweight() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.minweight)
  return minweight_;
}
 void CurveCfgData::set_minweight(double value) {
  set_has_minweight();
  minweight_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.minweight)
}

// optional double maxweight = 10 [default = 999999999];
bool CurveCfgData::has_maxweight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CurveCfgData::set_has_maxweight() {
  _has_bits_[0] |= 0x00000200u;
}
void CurveCfgData::clear_has_maxweight() {
  _has_bits_[0] &= ~0x00000200u;
}
void CurveCfgData::clear_maxweight() {
  maxweight_ = 999999999;
  clear_has_maxweight();
}
 double CurveCfgData::maxweight() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.maxweight)
  return maxweight_;
}
 void CurveCfgData::set_maxweight(double value) {
  set_has_maxweight();
  maxweight_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.maxweight)
}

// optional double minx = 11 [default = -999999999];
bool CurveCfgData::has_minx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CurveCfgData::set_has_minx() {
  _has_bits_[0] |= 0x00000400u;
}
void CurveCfgData::clear_has_minx() {
  _has_bits_[0] &= ~0x00000400u;
}
void CurveCfgData::clear_minx() {
  minx_ = -999999999;
  clear_has_minx();
}
 double CurveCfgData::minx() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.minx)
  return minx_;
}
 void CurveCfgData::set_minx(double value) {
  set_has_minx();
  minx_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.minx)
}

// optional double maxx = 12 [default = 999999999];
bool CurveCfgData::has_maxx() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CurveCfgData::set_has_maxx() {
  _has_bits_[0] |= 0x00000800u;
}
void CurveCfgData::clear_has_maxx() {
  _has_bits_[0] &= ~0x00000800u;
}
void CurveCfgData::clear_maxx() {
  maxx_ = 999999999;
  clear_has_maxx();
}
 double CurveCfgData::maxx() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.maxx)
  return maxx_;
}
 void CurveCfgData::set_maxx(double value) {
  set_has_maxx();
  maxx_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.maxx)
}

// optional double miny = 13 [default = -999999999];
bool CurveCfgData::has_miny() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CurveCfgData::set_has_miny() {
  _has_bits_[0] |= 0x00001000u;
}
void CurveCfgData::clear_has_miny() {
  _has_bits_[0] &= ~0x00001000u;
}
void CurveCfgData::clear_miny() {
  miny_ = -999999999;
  clear_has_miny();
}
 double CurveCfgData::miny() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.miny)
  return miny_;
}
 void CurveCfgData::set_miny(double value) {
  set_has_miny();
  miny_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.miny)
}

// optional double maxy = 14 [default = 999999999];
bool CurveCfgData::has_maxy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CurveCfgData::set_has_maxy() {
  _has_bits_[0] |= 0x00002000u;
}
void CurveCfgData::clear_has_maxy() {
  _has_bits_[0] &= ~0x00002000u;
}
void CurveCfgData::clear_maxy() {
  maxy_ = 999999999;
  clear_has_maxy();
}
 double CurveCfgData::maxy() const {
  // @@protoc_insertion_point(field_get:XT.CurveCfgData.maxy)
  return maxy_;
}
 void CurveCfgData::set_maxy(double value) {
  set_has_maxy();
  maxy_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveCfgData.maxy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveData::kFitflagFieldNumber;
const int CurveData::kFitfunccountFieldNumber;
const int CurveData::kFitfuncvalueFieldNumber;
const int CurveData::kEndcriteriatypeFieldNumber;
const int CurveData::kWeightflagFieldNumber;
const int CurveData::kFittsFieldNumber;
const int CurveData::kFitusFieldNumber;
const int CurveData::kCurrminwFieldNumber;
const int CurveData::kCurrmaxwFieldNumber;
const int CurveData::kTagintmapFieldNumber;
const int CurveData::kTagdoublemapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveData::CurveData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.CurveData)
}

void CurveData::InitAsDefaultInstance() {
}

CurveData::CurveData(const CurveData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.CurveData)
}

void CurveData::SharedCtor() {
  _cached_size_ = 0;
  fitflag_ = 0;
  fitfunccount_ = 0;
  fitfuncvalue_ = 0;
  endcriteriatype_ = 0;
  weightflag_ = 0;
  fitts_ = GOOGLE_LONGLONG(0);
  fitus_ = GOOGLE_LONGLONG(0);
  currminw_ = 0;
  currmaxw_ = 0;
  tagintmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagintmap_.SetEntryDescriptor(
      &::XT::CurveData_TagintmapEntry_descriptor_);
  tagdoublemap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagdoublemap_.SetEntryDescriptor(
      &::XT::CurveData_TagdoublemapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurveData::~CurveData() {
  // @@protoc_insertion_point(destructor:XT.CurveData)
  SharedDtor();
}

void CurveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveData_descriptor_;
}

const CurveData& CurveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

CurveData* CurveData::default_instance_ = NULL;

CurveData* CurveData::New(::google::protobuf::Arena* arena) const {
  CurveData* n = new CurveData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurveData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.CurveData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CurveData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CurveData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(fitflag_, currminw_);
  }
  currmaxw_ = 0;

#undef ZR_HELPER_
#undef ZR_

  tagintmap_.Clear();
  tagdoublemap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CurveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.CurveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fitflag = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitflag_)));
          set_has_fitflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fitfunccount;
        break;
      }

      // optional int32 fitfunccount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_fitfunccount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitfunccount_)));
          set_has_fitfunccount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_fitfuncvalue;
        break;
      }

      // optional double fitfuncvalue = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_fitfuncvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fitfuncvalue_)));
          set_has_fitfuncvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endcriteriatype;
        break;
      }

      // optional int32 endcriteriatype = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_endcriteriatype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endcriteriatype_)));
          set_has_endcriteriatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weightflag;
        break;
      }

      // optional int32 weightflag = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_weightflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weightflag_)));
          set_has_weightflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fitts;
        break;
      }

      // optional int64 fitts = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_fitts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fitts_)));
          set_has_fitts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fitus;
        break;
      }

      // optional int64 fitus = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_fitus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fitus_)));
          set_has_fitus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_currminw;
        break;
      }

      // optional double currminw = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_currminw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currminw_)));
          set_has_currminw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_currmaxw;
        break;
      }

      // optional double currmaxw = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_currmaxw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmaxw_)));
          set_has_currmaxw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tagintmap;
        break;
      }

      // map<int32, int32> tagintmap = 10;
      case 10: {
        if (tag == 82) {
         parse_tagintmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagintmap:
          CurveData_TagintmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&tagintmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_tagintmap;
        if (input->ExpectTag(90)) goto parse_loop_tagdoublemap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, double> tagdoublemap = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagdoublemap:
          CurveData_TagdoublemapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&tagdoublemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_tagdoublemap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.CurveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.CurveData)
  return false;
#undef DO_
}

void CurveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.CurveData)
  // optional int32 fitflag = 1 [default = 0];
  if (has_fitflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fitflag(), output);
  }

  // optional int32 fitfunccount = 2 [default = 0];
  if (has_fitfunccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fitfunccount(), output);
  }

  // optional double fitfuncvalue = 3 [default = 0];
  if (has_fitfuncvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fitfuncvalue(), output);
  }

  // optional int32 endcriteriatype = 4 [default = 0];
  if (has_endcriteriatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endcriteriatype(), output);
  }

  // optional int32 weightflag = 5 [default = 0];
  if (has_weightflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->weightflag(), output);
  }

  // optional int64 fitts = 6 [default = 0];
  if (has_fitts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fitts(), output);
  }

  // optional int64 fitus = 7 [default = 0];
  if (has_fitus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fitus(), output);
  }

  // optional double currminw = 8 [default = 0];
  if (has_currminw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->currminw(), output);
  }

  // optional double currmaxw = 9 [default = 0];
  if (has_currmaxw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->currmaxw(), output);
  }

  // map<int32, int32> tagintmap = 10;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CurveData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<CurveData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    }
  }

  // map<int32, double> tagdoublemap = 11;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CurveData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<CurveData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.CurveData)
}

::google::protobuf::uint8* CurveData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.CurveData)
  // optional int32 fitflag = 1 [default = 0];
  if (has_fitflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fitflag(), target);
  }

  // optional int32 fitfunccount = 2 [default = 0];
  if (has_fitfunccount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fitfunccount(), target);
  }

  // optional double fitfuncvalue = 3 [default = 0];
  if (has_fitfuncvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fitfuncvalue(), target);
  }

  // optional int32 endcriteriatype = 4 [default = 0];
  if (has_endcriteriatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endcriteriatype(), target);
  }

  // optional int32 weightflag = 5 [default = 0];
  if (has_weightflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->weightflag(), target);
  }

  // optional int64 fitts = 6 [default = 0];
  if (has_fitts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fitts(), target);
  }

  // optional int64 fitus = 7 [default = 0];
  if (has_fitus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fitus(), target);
  }

  // optional double currminw = 8 [default = 0];
  if (has_currminw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->currminw(), target);
  }

  // optional double currmaxw = 9 [default = 0];
  if (has_currmaxw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->currmaxw(), target);
  }

  // map<int32, int32> tagintmap = 10;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CurveData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<CurveData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, double> tagdoublemap = 11;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CurveData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<CurveData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.CurveData)
  return target;
}

int CurveData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.CurveData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 fitflag = 1 [default = 0];
    if (has_fitflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fitflag());
    }

    // optional int32 fitfunccount = 2 [default = 0];
    if (has_fitfunccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fitfunccount());
    }

    // optional double fitfuncvalue = 3 [default = 0];
    if (has_fitfuncvalue()) {
      total_size += 1 + 8;
    }

    // optional int32 endcriteriatype = 4 [default = 0];
    if (has_endcriteriatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endcriteriatype());
    }

    // optional int32 weightflag = 5 [default = 0];
    if (has_weightflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weightflag());
    }

    // optional int64 fitts = 6 [default = 0];
    if (has_fitts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fitts());
    }

    // optional int64 fitus = 7 [default = 0];
    if (has_fitus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fitus());
    }

    // optional double currminw = 8 [default = 0];
    if (has_currminw()) {
      total_size += 1 + 8;
    }

  }
  // optional double currmaxw = 9 [default = 0];
  if (has_currmaxw()) {
    total_size += 1 + 8;
  }

  // map<int32, int32> tagintmap = 10;
  total_size += 1 * this->tagintmap_size();
  {
    ::google::protobuf::scoped_ptr<CurveData_TagintmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->tagintmap().begin();
        it != this->tagintmap().end(); ++it) {
      entry.reset(tagintmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, double> tagdoublemap = 11;
  total_size += 1 * this->tagdoublemap_size();
  {
    ::google::protobuf::scoped_ptr<CurveData_TagdoublemapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->tagdoublemap().begin();
        it != this->tagdoublemap().end(); ++it) {
      entry.reset(tagdoublemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.CurveData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurveData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.CurveData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.CurveData)
    MergeFrom(*source);
  }
}

void CurveData::MergeFrom(const CurveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.CurveData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tagintmap_.MergeFrom(from.tagintmap_);
  tagdoublemap_.MergeFrom(from.tagdoublemap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fitflag()) {
      set_fitflag(from.fitflag());
    }
    if (from.has_fitfunccount()) {
      set_fitfunccount(from.fitfunccount());
    }
    if (from.has_fitfuncvalue()) {
      set_fitfuncvalue(from.fitfuncvalue());
    }
    if (from.has_endcriteriatype()) {
      set_endcriteriatype(from.endcriteriatype());
    }
    if (from.has_weightflag()) {
      set_weightflag(from.weightflag());
    }
    if (from.has_fitts()) {
      set_fitts(from.fitts());
    }
    if (from.has_fitus()) {
      set_fitus(from.fitus());
    }
    if (from.has_currminw()) {
      set_currminw(from.currminw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currmaxw()) {
      set_currmaxw(from.currmaxw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CurveData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.CurveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveData::CopyFrom(const CurveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.CurveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveData::IsInitialized() const {

  return true;
}

void CurveData::Swap(CurveData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveData::InternalSwap(CurveData* other) {
  std::swap(fitflag_, other->fitflag_);
  std::swap(fitfunccount_, other->fitfunccount_);
  std::swap(fitfuncvalue_, other->fitfuncvalue_);
  std::swap(endcriteriatype_, other->endcriteriatype_);
  std::swap(weightflag_, other->weightflag_);
  std::swap(fitts_, other->fitts_);
  std::swap(fitus_, other->fitus_);
  std::swap(currminw_, other->currminw_);
  std::swap(currmaxw_, other->currmaxw_);
  tagintmap_.Swap(&other->tagintmap_);
  tagdoublemap_.Swap(&other->tagdoublemap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveData_descriptor_;
  metadata.reflection = CurveData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurveData

// optional int32 fitflag = 1 [default = 0];
bool CurveData::has_fitflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurveData::set_has_fitflag() {
  _has_bits_[0] |= 0x00000001u;
}
void CurveData::clear_has_fitflag() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurveData::clear_fitflag() {
  fitflag_ = 0;
  clear_has_fitflag();
}
 ::google::protobuf::int32 CurveData::fitflag() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.fitflag)
  return fitflag_;
}
 void CurveData::set_fitflag(::google::protobuf::int32 value) {
  set_has_fitflag();
  fitflag_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.fitflag)
}

// optional int32 fitfunccount = 2 [default = 0];
bool CurveData::has_fitfunccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurveData::set_has_fitfunccount() {
  _has_bits_[0] |= 0x00000002u;
}
void CurveData::clear_has_fitfunccount() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurveData::clear_fitfunccount() {
  fitfunccount_ = 0;
  clear_has_fitfunccount();
}
 ::google::protobuf::int32 CurveData::fitfunccount() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.fitfunccount)
  return fitfunccount_;
}
 void CurveData::set_fitfunccount(::google::protobuf::int32 value) {
  set_has_fitfunccount();
  fitfunccount_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.fitfunccount)
}

// optional double fitfuncvalue = 3 [default = 0];
bool CurveData::has_fitfuncvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CurveData::set_has_fitfuncvalue() {
  _has_bits_[0] |= 0x00000004u;
}
void CurveData::clear_has_fitfuncvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
void CurveData::clear_fitfuncvalue() {
  fitfuncvalue_ = 0;
  clear_has_fitfuncvalue();
}
 double CurveData::fitfuncvalue() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.fitfuncvalue)
  return fitfuncvalue_;
}
 void CurveData::set_fitfuncvalue(double value) {
  set_has_fitfuncvalue();
  fitfuncvalue_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.fitfuncvalue)
}

// optional int32 endcriteriatype = 4 [default = 0];
bool CurveData::has_endcriteriatype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CurveData::set_has_endcriteriatype() {
  _has_bits_[0] |= 0x00000008u;
}
void CurveData::clear_has_endcriteriatype() {
  _has_bits_[0] &= ~0x00000008u;
}
void CurveData::clear_endcriteriatype() {
  endcriteriatype_ = 0;
  clear_has_endcriteriatype();
}
 ::google::protobuf::int32 CurveData::endcriteriatype() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.endcriteriatype)
  return endcriteriatype_;
}
 void CurveData::set_endcriteriatype(::google::protobuf::int32 value) {
  set_has_endcriteriatype();
  endcriteriatype_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.endcriteriatype)
}

// optional int32 weightflag = 5 [default = 0];
bool CurveData::has_weightflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CurveData::set_has_weightflag() {
  _has_bits_[0] |= 0x00000010u;
}
void CurveData::clear_has_weightflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void CurveData::clear_weightflag() {
  weightflag_ = 0;
  clear_has_weightflag();
}
 ::google::protobuf::int32 CurveData::weightflag() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.weightflag)
  return weightflag_;
}
 void CurveData::set_weightflag(::google::protobuf::int32 value) {
  set_has_weightflag();
  weightflag_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.weightflag)
}

// optional int64 fitts = 6 [default = 0];
bool CurveData::has_fitts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CurveData::set_has_fitts() {
  _has_bits_[0] |= 0x00000020u;
}
void CurveData::clear_has_fitts() {
  _has_bits_[0] &= ~0x00000020u;
}
void CurveData::clear_fitts() {
  fitts_ = GOOGLE_LONGLONG(0);
  clear_has_fitts();
}
 ::google::protobuf::int64 CurveData::fitts() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.fitts)
  return fitts_;
}
 void CurveData::set_fitts(::google::protobuf::int64 value) {
  set_has_fitts();
  fitts_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.fitts)
}

// optional int64 fitus = 7 [default = 0];
bool CurveData::has_fitus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CurveData::set_has_fitus() {
  _has_bits_[0] |= 0x00000040u;
}
void CurveData::clear_has_fitus() {
  _has_bits_[0] &= ~0x00000040u;
}
void CurveData::clear_fitus() {
  fitus_ = GOOGLE_LONGLONG(0);
  clear_has_fitus();
}
 ::google::protobuf::int64 CurveData::fitus() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.fitus)
  return fitus_;
}
 void CurveData::set_fitus(::google::protobuf::int64 value) {
  set_has_fitus();
  fitus_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.fitus)
}

// optional double currminw = 8 [default = 0];
bool CurveData::has_currminw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CurveData::set_has_currminw() {
  _has_bits_[0] |= 0x00000080u;
}
void CurveData::clear_has_currminw() {
  _has_bits_[0] &= ~0x00000080u;
}
void CurveData::clear_currminw() {
  currminw_ = 0;
  clear_has_currminw();
}
 double CurveData::currminw() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.currminw)
  return currminw_;
}
 void CurveData::set_currminw(double value) {
  set_has_currminw();
  currminw_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.currminw)
}

// optional double currmaxw = 9 [default = 0];
bool CurveData::has_currmaxw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CurveData::set_has_currmaxw() {
  _has_bits_[0] |= 0x00000100u;
}
void CurveData::clear_has_currmaxw() {
  _has_bits_[0] &= ~0x00000100u;
}
void CurveData::clear_currmaxw() {
  currmaxw_ = 0;
  clear_has_currmaxw();
}
 double CurveData::currmaxw() const {
  // @@protoc_insertion_point(field_get:XT.CurveData.currmaxw)
  return currmaxw_;
}
 void CurveData::set_currmaxw(double value) {
  set_has_currmaxw();
  currmaxw_ = value;
  // @@protoc_insertion_point(field_set:XT.CurveData.currmaxw)
}

// map<int32, int32> tagintmap = 10;
int CurveData::tagintmap_size() const {
  return tagintmap_.size();
}
void CurveData::clear_tagintmap() {
  tagintmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
CurveData::tagintmap() const {
  // @@protoc_insertion_point(field_map:XT.CurveData.tagintmap)
  return tagintmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
CurveData::mutable_tagintmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.CurveData.tagintmap)
  return tagintmap_.MutableMap();
}

// map<int32, double> tagdoublemap = 11;
int CurveData::tagdoublemap_size() const {
  return tagdoublemap_.size();
}
void CurveData::clear_tagdoublemap() {
  tagdoublemap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
CurveData::tagdoublemap() const {
  // @@protoc_insertion_point(field_map:XT.CurveData.tagdoublemap)
  return tagdoublemap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
CurveData::mutable_tagdoublemap() {
  // @@protoc_insertion_point(field_mutable_map:XT.CurveData.tagdoublemap)
  return tagdoublemap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrSpecData::kExchangeidFieldNumber;
const int InstrSpecData::kInstrumentidFieldNumber;
const int InstrSpecData::kSecuritytypeFieldNumber;
const int InstrSpecData::kProductidFieldNumber;
const int InstrSpecData::kExpireintdateFieldNumber;
const int InstrSpecData::kCallputtypeFieldNumber;
const int InstrSpecData::kStrikepriceFieldNumber;
const int InstrSpecData::kPricetickFieldNumber;
const int InstrSpecData::kContractmultiplierFieldNumber;
const int InstrSpecData::kTagdataFieldNumber;
const int InstrSpecData::kTradecurrencyidFieldNumber;
const int InstrSpecData::kSecuritytypestrFieldNumber;
const int InstrSpecData::kPxepsilonFieldNumber;
const int InstrSpecData::kTickvalueFieldNumber;
const int InstrSpecData::kInt64PxtickFieldNumber;
const int InstrSpecData::kInt64PxpointvalueFieldNumber;
const int InstrSpecData::kScaleint64TodoubleFieldNumber;
const int InstrSpecData::kScaledoubleToint64FieldNumber;
const int InstrSpecData::kAreasFieldNumber;
const int InstrSpecData::kConceptsFieldNumber;
const int InstrSpecData::kIndustriesFieldNumber;
const int InstrSpecData::kListintdateFieldNumber;
const int InstrSpecData::kExchangeinstidFieldNumber;
const int InstrSpecData::kProductclassFieldNumber;
const int InstrSpecData::kDeliveryyearFieldNumber;
const int InstrSpecData::kDeliverymonthFieldNumber;
const int InstrSpecData::kMaxmarketordervolumeFieldNumber;
const int InstrSpecData::kMinmarketordervolumeFieldNumber;
const int InstrSpecData::kMaxlimitordervolumeFieldNumber;
const int InstrSpecData::kMinlimitordervolumeFieldNumber;
const int InstrSpecData::kPositiontypeFieldNumber;
const int InstrSpecData::kPositiondatetypeFieldNumber;
const int InstrSpecData::kClosedealtypeFieldNumber;
const int InstrSpecData::kMortgagefunduserangeFieldNumber;
const int InstrSpecData::kExchangeproductidFieldNumber;
const int InstrSpecData::kUndlymultipleFieldNumber;
const int InstrSpecData::kUndlyproductidFieldNumber;
const int InstrSpecData::kUndlyinstridFieldNumber;
const int InstrSpecData::kNamestrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrSpecData::InstrSpecData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.InstrSpecData)
}

void InstrSpecData::InitAsDefaultInstance() {
}

InstrSpecData::InstrSpecData(const InstrSpecData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.InstrSpecData)
}

void InstrSpecData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expireintdate_ = 99990101;
  callputtype_ = 0;
  strikeprice_ = 0;
  pricetick_ = 0;
  contractmultiplier_ = 1;
  tagdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradecurrencyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytypestr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pxepsilon_ = 1e-06;
  tickvalue_ = 0;
  int64pxtick_ = GOOGLE_LONGLONG(0);
  int64pxpointvalue_ = 0;
  scaleint64todouble_ = 1;
  scaledoubletoint64_ = GOOGLE_LONGLONG(1);
  areas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  concepts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  industries_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listintdate_ = 0;
  exchangeinstid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_ = 0;
  deliveryyear_ = 0;
  deliverymonth_ = 0;
  maxmarketordervolume_ = 0;
  minmarketordervolume_ = 0;
  maxlimitordervolume_ = 0;
  minlimitordervolume_ = 0;
  positiontype_ = 0;
  positiondatetype_ = 0;
  closedealtype_ = 0;
  mortgagefunduserange_ = 0;
  exchangeproductid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undlymultiple_ = 1;
  undlyproductid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undlyinstrid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namestrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  namestrmap_.SetEntryDescriptor(
      &::XT::InstrSpecData_NamestrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrSpecData::~InstrSpecData() {
  // @@protoc_insertion_point(destructor:XT.InstrSpecData)
  SharedDtor();
}

void InstrSpecData::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradecurrencyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytypestr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  areas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  concepts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  industries_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeproductid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undlyproductid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undlyinstrid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InstrSpecData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrSpecData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrSpecData_descriptor_;
}

const InstrSpecData& InstrSpecData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

InstrSpecData* InstrSpecData::default_instance_ = NULL;

InstrSpecData* InstrSpecData::New(::google::protobuf::Arena* arena) const {
  InstrSpecData* n = new InstrSpecData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstrSpecData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.InstrSpecData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InstrSpecData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InstrSpecData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(strikeprice_, pricetick_);
    if (has_exchangeid()) {
      exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    securitytype_ = 0;
    if (has_productid()) {
      productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    expireintdate_ = 99990101;
    callputtype_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(int64pxtick_, int64pxpointvalue_);
    contractmultiplier_ = 1;
    if (has_tagdata()) {
      tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tradecurrencyid()) {
      tradecurrencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_securitytypestr()) {
      securitytypestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pxepsilon_ = 1e-06;
    tickvalue_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    scaleint64todouble_ = 1;
    scaledoubletoint64_ = GOOGLE_LONGLONG(1);
    if (has_areas()) {
      areas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_concepts()) {
      concepts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_industries()) {
      industries_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    listintdate_ = 0;
    if (has_exchangeinstid()) {
      exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    productclass_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(deliveryyear_, positiondatetype_);
  }
  if (_has_bits_[32 / 32] & 63u) {
    closedealtype_ = 0;
    mortgagefunduserange_ = 0;
    if (has_exchangeproductid()) {
      exchangeproductid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    undlymultiple_ = 1;
    if (has_undlyproductid()) {
      undlyproductid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_undlyinstrid()) {
      undlyinstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  namestrmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InstrSpecData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.InstrSpecData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exchangeid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instrumentid;
        break;
      }

      // optional string instrumentid = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_instrumentid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_securitytype;
        break;
      }

      // optional int32 securitytype = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_securitytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &securitytype_)));
          set_has_securitytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_productid;
        break;
      }

      // optional string productid = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.productid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expireintdate;
        break;
      }

      // optional int32 expireintdate = 5 [default = 99990101];
      case 5: {
        if (tag == 40) {
         parse_expireintdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expireintdate_)));
          set_has_expireintdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_callputtype;
        break;
      }

      // optional int32 callputtype = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_callputtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callputtype_)));
          set_has_callputtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_strikeprice;
        break;
      }

      // optional double strikeprice = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_strikeprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikeprice_)));
          set_has_strikeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_pricetick;
        break;
      }

      // optional double pricetick = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_pricetick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_contractmultiplier;
        break;
      }

      // optional double contractmultiplier = 9 [default = 1];
      case 9: {
        if (tag == 73) {
         parse_contractmultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contractmultiplier_)));
          set_has_contractmultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tagdata;
        break;
      }

      // optional string tagdata = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_tagdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagdata().data(), this->tagdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.tagdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_tradecurrencyid;
        break;
      }

      // optional string tradecurrencyid = 11 [default = ""];
      case 11: {
        if (tag == 90) {
         parse_tradecurrencyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradecurrencyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradecurrencyid().data(), this->tradecurrencyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.tradecurrencyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_securitytypestr;
        break;
      }

      // optional string securitytypestr = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_securitytypestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitytypestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitytypestr().data(), this->securitytypestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.securitytypestr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_pxepsilon;
        break;
      }

      // optional double pxepsilon = 13 [default = 1e-06];
      case 13: {
        if (tag == 105) {
         parse_pxepsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pxepsilon_)));
          set_has_pxepsilon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_tickvalue;
        break;
      }

      // optional double tickvalue = 15 [default = 0];
      case 15: {
        if (tag == 121) {
         parse_tickvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tickvalue_)));
          set_has_tickvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_int64pxtick;
        break;
      }

      // optional int64 int64pxtick = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_int64pxtick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64pxtick_)));
          set_has_int64pxtick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_int64pxpointvalue;
        break;
      }

      // optional double int64pxpointvalue = 17 [default = 0];
      case 17: {
        if (tag == 137) {
         parse_int64pxpointvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &int64pxpointvalue_)));
          set_has_int64pxpointvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_scaleint64todouble;
        break;
      }

      // optional double scaleint64todouble = 18 [default = 1];
      case 18: {
        if (tag == 145) {
         parse_scaleint64todouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scaleint64todouble_)));
          set_has_scaleint64todouble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_scaledoubleToint64;
        break;
      }

      // optional int64 scaledoubleToint64 = 19 [default = 1];
      case 19: {
        if (tag == 152) {
         parse_scaledoubleToint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scaledoubletoint64_)));
          set_has_scaledoubletoint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_areas;
        break;
      }

      // optional string areas = 20 [default = ""];
      case 20: {
        if (tag == 162) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areas()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->areas().data(), this->areas().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.areas");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_concepts;
        break;
      }

      // optional string concepts = 21 [default = ""];
      case 21: {
        if (tag == 170) {
         parse_concepts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_concepts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->concepts().data(), this->concepts().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.concepts");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_industries;
        break;
      }

      // optional string industries = 22 [default = ""];
      case 22: {
        if (tag == 178) {
         parse_industries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_industries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->industries().data(), this->industries().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.industries");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_listintdate;
        break;
      }

      // optional int32 listintdate = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_listintdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listintdate_)));
          set_has_listintdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_exchangeinstid;
        break;
      }

      // optional string exchangeinstid = 101 [default = ""];
      case 101: {
        if (tag == 810) {
         parse_exchangeinstid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.exchangeinstid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_productclass;
        break;
      }

      // optional int32 productclass = 102 [default = 0];
      case 102: {
        if (tag == 816) {
         parse_productclass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productclass_)));
          set_has_productclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_deliveryyear;
        break;
      }

      // optional int32 deliveryyear = 103 [default = 0];
      case 103: {
        if (tag == 824) {
         parse_deliveryyear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliveryyear_)));
          set_has_deliveryyear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_deliverymonth;
        break;
      }

      // optional int32 deliverymonth = 104 [default = 0];
      case 104: {
        if (tag == 832) {
         parse_deliverymonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliverymonth_)));
          set_has_deliverymonth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_maxmarketordervolume;
        break;
      }

      // optional int32 maxmarketordervolume = 105 [default = 0];
      case 105: {
        if (tag == 840) {
         parse_maxmarketordervolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmarketordervolume_)));
          set_has_maxmarketordervolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_minmarketordervolume;
        break;
      }

      // optional int32 minmarketordervolume = 106 [default = 0];
      case 106: {
        if (tag == 848) {
         parse_minmarketordervolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmarketordervolume_)));
          set_has_minmarketordervolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(856)) goto parse_maxlimitordervolume;
        break;
      }

      // optional int32 maxlimitordervolume = 107 [default = 0];
      case 107: {
        if (tag == 856) {
         parse_maxlimitordervolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlimitordervolume_)));
          set_has_maxlimitordervolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_minlimitordervolume;
        break;
      }

      // optional int32 minlimitordervolume = 108 [default = 0];
      case 108: {
        if (tag == 864) {
         parse_minlimitordervolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlimitordervolume_)));
          set_has_minlimitordervolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(872)) goto parse_positiontype;
        break;
      }

      // optional int32 positiontype = 109 [default = 0];
      case 109: {
        if (tag == 872) {
         parse_positiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiontype_)));
          set_has_positiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_positiondatetype;
        break;
      }

      // optional int32 positiondatetype = 110 [default = 0];
      case 110: {
        if (tag == 880) {
         parse_positiondatetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiondatetype_)));
          set_has_positiondatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(888)) goto parse_closedealtype;
        break;
      }

      // optional int32 closedealtype = 111 [default = 0];
      case 111: {
        if (tag == 888) {
         parse_closedealtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closedealtype_)));
          set_has_closedealtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(896)) goto parse_mortgagefunduserange;
        break;
      }

      // optional int32 mortgagefunduserange = 112 [default = 0];
      case 112: {
        if (tag == 896) {
         parse_mortgagefunduserange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mortgagefunduserange_)));
          set_has_mortgagefunduserange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(906)) goto parse_exchangeproductid;
        break;
      }

      // optional string exchangeproductid = 113 [default = ""];
      case 113: {
        if (tag == 906) {
         parse_exchangeproductid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeproductid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeproductid().data(), this->exchangeproductid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.exchangeproductid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(913)) goto parse_undlymultiple;
        break;
      }

      // optional double undlymultiple = 114 [default = 1];
      case 114: {
        if (tag == 913) {
         parse_undlymultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &undlymultiple_)));
          set_has_undlymultiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_undlyproductid;
        break;
      }

      // optional string undlyproductid = 115 [default = ""];
      case 115: {
        if (tag == 922) {
         parse_undlyproductid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_undlyproductid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->undlyproductid().data(), this->undlyproductid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.undlyproductid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_undlyinstrid;
        break;
      }

      // optional string undlyinstrid = 116 [default = ""];
      case 116: {
        if (tag == 930) {
         parse_undlyinstrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_undlyinstrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->undlyinstrid().data(), this->undlyinstrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.undlyinstrid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_namestrmap;
        break;
      }

      // map<string, string> namestrmap = 200;
      case 200: {
        if (tag == 1602) {
         parse_namestrmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_namestrmap:
          InstrSpecData_NamestrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&namestrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.NamestrmapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrSpecData.NamestrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_loop_namestrmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.InstrSpecData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.InstrSpecData)
  return false;
#undef DO_
}

void InstrSpecData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.InstrSpecData)
  // optional string exchangeid = 1 [default = ""];
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchangeid(), output);
  }

  // optional string instrumentid = 2 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // optional int32 securitytype = 3 [default = 0];
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->securitytype(), output);
  }

  // optional string productid = 4 [default = ""];
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.productid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->productid(), output);
  }

  // optional int32 expireintdate = 5 [default = 99990101];
  if (has_expireintdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expireintdate(), output);
  }

  // optional int32 callputtype = 6 [default = 0];
  if (has_callputtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->callputtype(), output);
  }

  // optional double strikeprice = 7 [default = 0];
  if (has_strikeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->strikeprice(), output);
  }

  // optional double pricetick = 8 [default = 0];
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pricetick(), output);
  }

  // optional double contractmultiplier = 9 [default = 1];
  if (has_contractmultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->contractmultiplier(), output);
  }

  // optional string tagdata = 10 [default = ""];
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.tagdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tagdata(), output);
  }

  // optional string tradecurrencyid = 11 [default = ""];
  if (has_tradecurrencyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradecurrencyid().data(), this->tradecurrencyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.tradecurrencyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->tradecurrencyid(), output);
  }

  // optional string securitytypestr = 12 [default = ""];
  if (has_securitytypestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitytypestr().data(), this->securitytypestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.securitytypestr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->securitytypestr(), output);
  }

  // optional double pxepsilon = 13 [default = 1e-06];
  if (has_pxepsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->pxepsilon(), output);
  }

  // optional double tickvalue = 15 [default = 0];
  if (has_tickvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->tickvalue(), output);
  }

  // optional int64 int64pxtick = 16 [default = 0];
  if (has_int64pxtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->int64pxtick(), output);
  }

  // optional double int64pxpointvalue = 17 [default = 0];
  if (has_int64pxpointvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->int64pxpointvalue(), output);
  }

  // optional double scaleint64todouble = 18 [default = 1];
  if (has_scaleint64todouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->scaleint64todouble(), output);
  }

  // optional int64 scaledoubleToint64 = 19 [default = 1];
  if (has_scaledoubletoint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->scaledoubletoint64(), output);
  }

  // optional string areas = 20 [default = ""];
  if (has_areas()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->areas().data(), this->areas().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.areas");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->areas(), output);
  }

  // optional string concepts = 21 [default = ""];
  if (has_concepts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->concepts().data(), this->concepts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.concepts");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->concepts(), output);
  }

  // optional string industries = 22 [default = ""];
  if (has_industries()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industries().data(), this->industries().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.industries");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->industries(), output);
  }

  // optional int32 listintdate = 23 [default = 0];
  if (has_listintdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->listintdate(), output);
  }

  // optional string exchangeinstid = 101 [default = ""];
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.exchangeinstid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->exchangeinstid(), output);
  }

  // optional int32 productclass = 102 [default = 0];
  if (has_productclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->productclass(), output);
  }

  // optional int32 deliveryyear = 103 [default = 0];
  if (has_deliveryyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->deliveryyear(), output);
  }

  // optional int32 deliverymonth = 104 [default = 0];
  if (has_deliverymonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(104, this->deliverymonth(), output);
  }

  // optional int32 maxmarketordervolume = 105 [default = 0];
  if (has_maxmarketordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(105, this->maxmarketordervolume(), output);
  }

  // optional int32 minmarketordervolume = 106 [default = 0];
  if (has_minmarketordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(106, this->minmarketordervolume(), output);
  }

  // optional int32 maxlimitordervolume = 107 [default = 0];
  if (has_maxlimitordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(107, this->maxlimitordervolume(), output);
  }

  // optional int32 minlimitordervolume = 108 [default = 0];
  if (has_minlimitordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(108, this->minlimitordervolume(), output);
  }

  // optional int32 positiontype = 109 [default = 0];
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(109, this->positiontype(), output);
  }

  // optional int32 positiondatetype = 110 [default = 0];
  if (has_positiondatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->positiondatetype(), output);
  }

  // optional int32 closedealtype = 111 [default = 0];
  if (has_closedealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(111, this->closedealtype(), output);
  }

  // optional int32 mortgagefunduserange = 112 [default = 0];
  if (has_mortgagefunduserange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(112, this->mortgagefunduserange(), output);
  }

  // optional string exchangeproductid = 113 [default = ""];
  if (has_exchangeproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeproductid().data(), this->exchangeproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.exchangeproductid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      113, this->exchangeproductid(), output);
  }

  // optional double undlymultiple = 114 [default = 1];
  if (has_undlymultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(114, this->undlymultiple(), output);
  }

  // optional string undlyproductid = 115 [default = ""];
  if (has_undlyproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->undlyproductid().data(), this->undlyproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.undlyproductid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      115, this->undlyproductid(), output);
  }

  // optional string undlyinstrid = 116 [default = ""];
  if (has_undlyinstrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->undlyinstrid().data(), this->undlyinstrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.undlyinstrid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      116, this->undlyinstrid(), output);
  }

  // map<string, string> namestrmap = 200;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrSpecData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrSpecData.NamestrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrSpecData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            200, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrSpecData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            200, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.InstrSpecData)
}

::google::protobuf::uint8* InstrSpecData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.InstrSpecData)
  // optional string exchangeid = 1 [default = ""];
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchangeid(), target);
  }

  // optional string instrumentid = 2 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional int32 securitytype = 3 [default = 0];
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->securitytype(), target);
  }

  // optional string productid = 4 [default = ""];
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.productid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->productid(), target);
  }

  // optional int32 expireintdate = 5 [default = 99990101];
  if (has_expireintdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expireintdate(), target);
  }

  // optional int32 callputtype = 6 [default = 0];
  if (has_callputtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->callputtype(), target);
  }

  // optional double strikeprice = 7 [default = 0];
  if (has_strikeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->strikeprice(), target);
  }

  // optional double pricetick = 8 [default = 0];
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pricetick(), target);
  }

  // optional double contractmultiplier = 9 [default = 1];
  if (has_contractmultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->contractmultiplier(), target);
  }

  // optional string tagdata = 10 [default = ""];
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.tagdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tagdata(), target);
  }

  // optional string tradecurrencyid = 11 [default = ""];
  if (has_tradecurrencyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradecurrencyid().data(), this->tradecurrencyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.tradecurrencyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tradecurrencyid(), target);
  }

  // optional string securitytypestr = 12 [default = ""];
  if (has_securitytypestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitytypestr().data(), this->securitytypestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.securitytypestr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->securitytypestr(), target);
  }

  // optional double pxepsilon = 13 [default = 1e-06];
  if (has_pxepsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->pxepsilon(), target);
  }

  // optional double tickvalue = 15 [default = 0];
  if (has_tickvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->tickvalue(), target);
  }

  // optional int64 int64pxtick = 16 [default = 0];
  if (has_int64pxtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->int64pxtick(), target);
  }

  // optional double int64pxpointvalue = 17 [default = 0];
  if (has_int64pxpointvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->int64pxpointvalue(), target);
  }

  // optional double scaleint64todouble = 18 [default = 1];
  if (has_scaleint64todouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->scaleint64todouble(), target);
  }

  // optional int64 scaledoubleToint64 = 19 [default = 1];
  if (has_scaledoubletoint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->scaledoubletoint64(), target);
  }

  // optional string areas = 20 [default = ""];
  if (has_areas()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->areas().data(), this->areas().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.areas");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->areas(), target);
  }

  // optional string concepts = 21 [default = ""];
  if (has_concepts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->concepts().data(), this->concepts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.concepts");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->concepts(), target);
  }

  // optional string industries = 22 [default = ""];
  if (has_industries()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industries().data(), this->industries().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.industries");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->industries(), target);
  }

  // optional int32 listintdate = 23 [default = 0];
  if (has_listintdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->listintdate(), target);
  }

  // optional string exchangeinstid = 101 [default = ""];
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.exchangeinstid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->exchangeinstid(), target);
  }

  // optional int32 productclass = 102 [default = 0];
  if (has_productclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->productclass(), target);
  }

  // optional int32 deliveryyear = 103 [default = 0];
  if (has_deliveryyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->deliveryyear(), target);
  }

  // optional int32 deliverymonth = 104 [default = 0];
  if (has_deliverymonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(104, this->deliverymonth(), target);
  }

  // optional int32 maxmarketordervolume = 105 [default = 0];
  if (has_maxmarketordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(105, this->maxmarketordervolume(), target);
  }

  // optional int32 minmarketordervolume = 106 [default = 0];
  if (has_minmarketordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(106, this->minmarketordervolume(), target);
  }

  // optional int32 maxlimitordervolume = 107 [default = 0];
  if (has_maxlimitordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(107, this->maxlimitordervolume(), target);
  }

  // optional int32 minlimitordervolume = 108 [default = 0];
  if (has_minlimitordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(108, this->minlimitordervolume(), target);
  }

  // optional int32 positiontype = 109 [default = 0];
  if (has_positiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(109, this->positiontype(), target);
  }

  // optional int32 positiondatetype = 110 [default = 0];
  if (has_positiondatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->positiondatetype(), target);
  }

  // optional int32 closedealtype = 111 [default = 0];
  if (has_closedealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(111, this->closedealtype(), target);
  }

  // optional int32 mortgagefunduserange = 112 [default = 0];
  if (has_mortgagefunduserange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(112, this->mortgagefunduserange(), target);
  }

  // optional string exchangeproductid = 113 [default = ""];
  if (has_exchangeproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeproductid().data(), this->exchangeproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.exchangeproductid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        113, this->exchangeproductid(), target);
  }

  // optional double undlymultiple = 114 [default = 1];
  if (has_undlymultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(114, this->undlymultiple(), target);
  }

  // optional string undlyproductid = 115 [default = ""];
  if (has_undlyproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->undlyproductid().data(), this->undlyproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.undlyproductid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        115, this->undlyproductid(), target);
  }

  // optional string undlyinstrid = 116 [default = ""];
  if (has_undlyinstrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->undlyinstrid().data(), this->undlyinstrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrSpecData.undlyinstrid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        116, this->undlyinstrid(), target);
  }

  // map<string, string> namestrmap = 200;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrSpecData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrSpecData.NamestrmapEntry.value");
      }
    };

    if (deterministic &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrSpecData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       200, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrSpecData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       200, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.InstrSpecData)
  return target;
}

int InstrSpecData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.InstrSpecData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string exchangeid = 1 [default = ""];
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string instrumentid = 2 [default = ""];
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional int32 securitytype = 3 [default = 0];
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->securitytype());
    }

    // optional string productid = 4 [default = ""];
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional int32 expireintdate = 5 [default = 99990101];
    if (has_expireintdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expireintdate());
    }

    // optional int32 callputtype = 6 [default = 0];
    if (has_callputtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callputtype());
    }

    // optional double strikeprice = 7 [default = 0];
    if (has_strikeprice()) {
      total_size += 1 + 8;
    }

    // optional double pricetick = 8 [default = 0];
    if (has_pricetick()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double contractmultiplier = 9 [default = 1];
    if (has_contractmultiplier()) {
      total_size += 1 + 8;
    }

    // optional string tagdata = 10 [default = ""];
    if (has_tagdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagdata());
    }

    // optional string tradecurrencyid = 11 [default = ""];
    if (has_tradecurrencyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradecurrencyid());
    }

    // optional string securitytypestr = 12 [default = ""];
    if (has_securitytypestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitytypestr());
    }

    // optional double pxepsilon = 13 [default = 1e-06];
    if (has_pxepsilon()) {
      total_size += 1 + 8;
    }

    // optional double tickvalue = 15 [default = 0];
    if (has_tickvalue()) {
      total_size += 1 + 8;
    }

    // optional int64 int64pxtick = 16 [default = 0];
    if (has_int64pxtick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64pxtick());
    }

    // optional double int64pxpointvalue = 17 [default = 0];
    if (has_int64pxpointvalue()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double scaleint64todouble = 18 [default = 1];
    if (has_scaleint64todouble()) {
      total_size += 2 + 8;
    }

    // optional int64 scaledoubleToint64 = 19 [default = 1];
    if (has_scaledoubletoint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scaledoubletoint64());
    }

    // optional string areas = 20 [default = ""];
    if (has_areas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areas());
    }

    // optional string concepts = 21 [default = ""];
    if (has_concepts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->concepts());
    }

    // optional string industries = 22 [default = ""];
    if (has_industries()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->industries());
    }

    // optional int32 listintdate = 23 [default = 0];
    if (has_listintdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listintdate());
    }

    // optional string exchangeinstid = 101 [default = ""];
    if (has_exchangeinstid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }

    // optional int32 productclass = 102 [default = 0];
    if (has_productclass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productclass());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 deliveryyear = 103 [default = 0];
    if (has_deliveryyear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deliveryyear());
    }

    // optional int32 deliverymonth = 104 [default = 0];
    if (has_deliverymonth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deliverymonth());
    }

    // optional int32 maxmarketordervolume = 105 [default = 0];
    if (has_maxmarketordervolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmarketordervolume());
    }

    // optional int32 minmarketordervolume = 106 [default = 0];
    if (has_minmarketordervolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minmarketordervolume());
    }

    // optional int32 maxlimitordervolume = 107 [default = 0];
    if (has_maxlimitordervolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlimitordervolume());
    }

    // optional int32 minlimitordervolume = 108 [default = 0];
    if (has_minlimitordervolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlimitordervolume());
    }

    // optional int32 positiontype = 109 [default = 0];
    if (has_positiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiontype());
    }

    // optional int32 positiondatetype = 110 [default = 0];
    if (has_positiondatetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiondatetype());
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional int32 closedealtype = 111 [default = 0];
    if (has_closedealtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closedealtype());
    }

    // optional int32 mortgagefunduserange = 112 [default = 0];
    if (has_mortgagefunduserange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mortgagefunduserange());
    }

    // optional string exchangeproductid = 113 [default = ""];
    if (has_exchangeproductid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeproductid());
    }

    // optional double undlymultiple = 114 [default = 1];
    if (has_undlymultiple()) {
      total_size += 2 + 8;
    }

    // optional string undlyproductid = 115 [default = ""];
    if (has_undlyproductid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->undlyproductid());
    }

    // optional string undlyinstrid = 116 [default = ""];
    if (has_undlyinstrid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->undlyinstrid());
    }

  }
  // map<string, string> namestrmap = 200;
  total_size += 2 * this->namestrmap_size();
  {
    ::google::protobuf::scoped_ptr<InstrSpecData_NamestrmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->namestrmap().begin();
        it != this->namestrmap().end(); ++it) {
      entry.reset(namestrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrSpecData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.InstrSpecData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstrSpecData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstrSpecData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.InstrSpecData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.InstrSpecData)
    MergeFrom(*source);
  }
}

void InstrSpecData::MergeFrom(const InstrSpecData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.InstrSpecData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  namestrmap_.MergeFrom(from.namestrmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_has_exchangeid();
      exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
    }
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_productid()) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (from.has_expireintdate()) {
      set_expireintdate(from.expireintdate());
    }
    if (from.has_callputtype()) {
      set_callputtype(from.callputtype());
    }
    if (from.has_strikeprice()) {
      set_strikeprice(from.strikeprice());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contractmultiplier()) {
      set_contractmultiplier(from.contractmultiplier());
    }
    if (from.has_tagdata()) {
      set_has_tagdata();
      tagdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagdata_);
    }
    if (from.has_tradecurrencyid()) {
      set_has_tradecurrencyid();
      tradecurrencyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradecurrencyid_);
    }
    if (from.has_securitytypestr()) {
      set_has_securitytypestr();
      securitytypestr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitytypestr_);
    }
    if (from.has_pxepsilon()) {
      set_pxepsilon(from.pxepsilon());
    }
    if (from.has_tickvalue()) {
      set_tickvalue(from.tickvalue());
    }
    if (from.has_int64pxtick()) {
      set_int64pxtick(from.int64pxtick());
    }
    if (from.has_int64pxpointvalue()) {
      set_int64pxpointvalue(from.int64pxpointvalue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scaleint64todouble()) {
      set_scaleint64todouble(from.scaleint64todouble());
    }
    if (from.has_scaledoubletoint64()) {
      set_scaledoubletoint64(from.scaledoubletoint64());
    }
    if (from.has_areas()) {
      set_has_areas();
      areas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.areas_);
    }
    if (from.has_concepts()) {
      set_has_concepts();
      concepts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.concepts_);
    }
    if (from.has_industries()) {
      set_has_industries();
      industries_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.industries_);
    }
    if (from.has_listintdate()) {
      set_listintdate(from.listintdate());
    }
    if (from.has_exchangeinstid()) {
      set_has_exchangeinstid();
      exchangeinstid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
    }
    if (from.has_productclass()) {
      set_productclass(from.productclass());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_deliveryyear()) {
      set_deliveryyear(from.deliveryyear());
    }
    if (from.has_deliverymonth()) {
      set_deliverymonth(from.deliverymonth());
    }
    if (from.has_maxmarketordervolume()) {
      set_maxmarketordervolume(from.maxmarketordervolume());
    }
    if (from.has_minmarketordervolume()) {
      set_minmarketordervolume(from.minmarketordervolume());
    }
    if (from.has_maxlimitordervolume()) {
      set_maxlimitordervolume(from.maxlimitordervolume());
    }
    if (from.has_minlimitordervolume()) {
      set_minlimitordervolume(from.minlimitordervolume());
    }
    if (from.has_positiontype()) {
      set_positiontype(from.positiontype());
    }
    if (from.has_positiondatetype()) {
      set_positiondatetype(from.positiondatetype());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_closedealtype()) {
      set_closedealtype(from.closedealtype());
    }
    if (from.has_mortgagefunduserange()) {
      set_mortgagefunduserange(from.mortgagefunduserange());
    }
    if (from.has_exchangeproductid()) {
      set_has_exchangeproductid();
      exchangeproductid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeproductid_);
    }
    if (from.has_undlymultiple()) {
      set_undlymultiple(from.undlymultiple());
    }
    if (from.has_undlyproductid()) {
      set_has_undlyproductid();
      undlyproductid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.undlyproductid_);
    }
    if (from.has_undlyinstrid()) {
      set_has_undlyinstrid();
      undlyinstrid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.undlyinstrid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InstrSpecData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.InstrSpecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrSpecData::CopyFrom(const InstrSpecData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.InstrSpecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrSpecData::IsInitialized() const {

  return true;
}

void InstrSpecData::Swap(InstrSpecData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrSpecData::InternalSwap(InstrSpecData* other) {
  exchangeid_.Swap(&other->exchangeid_);
  instrumentid_.Swap(&other->instrumentid_);
  std::swap(securitytype_, other->securitytype_);
  productid_.Swap(&other->productid_);
  std::swap(expireintdate_, other->expireintdate_);
  std::swap(callputtype_, other->callputtype_);
  std::swap(strikeprice_, other->strikeprice_);
  std::swap(pricetick_, other->pricetick_);
  std::swap(contractmultiplier_, other->contractmultiplier_);
  tagdata_.Swap(&other->tagdata_);
  tradecurrencyid_.Swap(&other->tradecurrencyid_);
  securitytypestr_.Swap(&other->securitytypestr_);
  std::swap(pxepsilon_, other->pxepsilon_);
  std::swap(tickvalue_, other->tickvalue_);
  std::swap(int64pxtick_, other->int64pxtick_);
  std::swap(int64pxpointvalue_, other->int64pxpointvalue_);
  std::swap(scaleint64todouble_, other->scaleint64todouble_);
  std::swap(scaledoubletoint64_, other->scaledoubletoint64_);
  areas_.Swap(&other->areas_);
  concepts_.Swap(&other->concepts_);
  industries_.Swap(&other->industries_);
  std::swap(listintdate_, other->listintdate_);
  exchangeinstid_.Swap(&other->exchangeinstid_);
  std::swap(productclass_, other->productclass_);
  std::swap(deliveryyear_, other->deliveryyear_);
  std::swap(deliverymonth_, other->deliverymonth_);
  std::swap(maxmarketordervolume_, other->maxmarketordervolume_);
  std::swap(minmarketordervolume_, other->minmarketordervolume_);
  std::swap(maxlimitordervolume_, other->maxlimitordervolume_);
  std::swap(minlimitordervolume_, other->minlimitordervolume_);
  std::swap(positiontype_, other->positiontype_);
  std::swap(positiondatetype_, other->positiondatetype_);
  std::swap(closedealtype_, other->closedealtype_);
  std::swap(mortgagefunduserange_, other->mortgagefunduserange_);
  exchangeproductid_.Swap(&other->exchangeproductid_);
  std::swap(undlymultiple_, other->undlymultiple_);
  undlyproductid_.Swap(&other->undlyproductid_);
  undlyinstrid_.Swap(&other->undlyinstrid_);
  namestrmap_.Swap(&other->namestrmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstrSpecData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrSpecData_descriptor_;
  metadata.reflection = InstrSpecData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstrSpecData

// optional string exchangeid = 1 [default = ""];
bool InstrSpecData::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InstrSpecData::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
void InstrSpecData::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void InstrSpecData::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeid();
}
 const ::std::string& InstrSpecData::exchangeid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.exchangeid)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.exchangeid)
}
 void InstrSpecData::set_exchangeid(const char* value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.exchangeid)
}
 void InstrSpecData::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.exchangeid)
}
 ::std::string* InstrSpecData::mutable_exchangeid() {
  set_has_exchangeid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_exchangeid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.exchangeid)
  clear_has_exchangeid();
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    set_has_exchangeid();
  } else {
    clear_has_exchangeid();
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.exchangeid)
}

// optional string instrumentid = 2 [default = ""];
bool InstrSpecData::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InstrSpecData::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000002u;
}
void InstrSpecData::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
void InstrSpecData::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& InstrSpecData::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.instrumentid)
}
 void InstrSpecData::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.instrumentid)
}
 void InstrSpecData::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.instrumentid)
}
 ::std::string* InstrSpecData::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.instrumentid)
}

// optional int32 securitytype = 3 [default = 0];
bool InstrSpecData::has_securitytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InstrSpecData::set_has_securitytype() {
  _has_bits_[0] |= 0x00000004u;
}
void InstrSpecData::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void InstrSpecData::clear_securitytype() {
  securitytype_ = 0;
  clear_has_securitytype();
}
 ::google::protobuf::int32 InstrSpecData::securitytype() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.securitytype)
  return securitytype_;
}
 void InstrSpecData::set_securitytype(::google::protobuf::int32 value) {
  set_has_securitytype();
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.securitytype)
}

// optional string productid = 4 [default = ""];
bool InstrSpecData::has_productid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InstrSpecData::set_has_productid() {
  _has_bits_[0] |= 0x00000008u;
}
void InstrSpecData::clear_has_productid() {
  _has_bits_[0] &= ~0x00000008u;
}
void InstrSpecData::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
 const ::std::string& InstrSpecData::productid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.productid)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.productid)
}
 void InstrSpecData::set_productid(const char* value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.productid)
}
 void InstrSpecData::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.productid)
}
 ::std::string* InstrSpecData::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.productid)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_productid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.productid)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.productid)
}

// optional int32 expireintdate = 5 [default = 99990101];
bool InstrSpecData::has_expireintdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InstrSpecData::set_has_expireintdate() {
  _has_bits_[0] |= 0x00000010u;
}
void InstrSpecData::clear_has_expireintdate() {
  _has_bits_[0] &= ~0x00000010u;
}
void InstrSpecData::clear_expireintdate() {
  expireintdate_ = 99990101;
  clear_has_expireintdate();
}
 ::google::protobuf::int32 InstrSpecData::expireintdate() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.expireintdate)
  return expireintdate_;
}
 void InstrSpecData::set_expireintdate(::google::protobuf::int32 value) {
  set_has_expireintdate();
  expireintdate_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.expireintdate)
}

// optional int32 callputtype = 6 [default = 0];
bool InstrSpecData::has_callputtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InstrSpecData::set_has_callputtype() {
  _has_bits_[0] |= 0x00000020u;
}
void InstrSpecData::clear_has_callputtype() {
  _has_bits_[0] &= ~0x00000020u;
}
void InstrSpecData::clear_callputtype() {
  callputtype_ = 0;
  clear_has_callputtype();
}
 ::google::protobuf::int32 InstrSpecData::callputtype() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.callputtype)
  return callputtype_;
}
 void InstrSpecData::set_callputtype(::google::protobuf::int32 value) {
  set_has_callputtype();
  callputtype_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.callputtype)
}

// optional double strikeprice = 7 [default = 0];
bool InstrSpecData::has_strikeprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InstrSpecData::set_has_strikeprice() {
  _has_bits_[0] |= 0x00000040u;
}
void InstrSpecData::clear_has_strikeprice() {
  _has_bits_[0] &= ~0x00000040u;
}
void InstrSpecData::clear_strikeprice() {
  strikeprice_ = 0;
  clear_has_strikeprice();
}
 double InstrSpecData::strikeprice() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.strikeprice)
  return strikeprice_;
}
 void InstrSpecData::set_strikeprice(double value) {
  set_has_strikeprice();
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.strikeprice)
}

// optional double pricetick = 8 [default = 0];
bool InstrSpecData::has_pricetick() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InstrSpecData::set_has_pricetick() {
  _has_bits_[0] |= 0x00000080u;
}
void InstrSpecData::clear_has_pricetick() {
  _has_bits_[0] &= ~0x00000080u;
}
void InstrSpecData::clear_pricetick() {
  pricetick_ = 0;
  clear_has_pricetick();
}
 double InstrSpecData::pricetick() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.pricetick)
  return pricetick_;
}
 void InstrSpecData::set_pricetick(double value) {
  set_has_pricetick();
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.pricetick)
}

// optional double contractmultiplier = 9 [default = 1];
bool InstrSpecData::has_contractmultiplier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InstrSpecData::set_has_contractmultiplier() {
  _has_bits_[0] |= 0x00000100u;
}
void InstrSpecData::clear_has_contractmultiplier() {
  _has_bits_[0] &= ~0x00000100u;
}
void InstrSpecData::clear_contractmultiplier() {
  contractmultiplier_ = 1;
  clear_has_contractmultiplier();
}
 double InstrSpecData::contractmultiplier() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.contractmultiplier)
  return contractmultiplier_;
}
 void InstrSpecData::set_contractmultiplier(double value) {
  set_has_contractmultiplier();
  contractmultiplier_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.contractmultiplier)
}

// optional string tagdata = 10 [default = ""];
bool InstrSpecData::has_tagdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void InstrSpecData::set_has_tagdata() {
  _has_bits_[0] |= 0x00000200u;
}
void InstrSpecData::clear_has_tagdata() {
  _has_bits_[0] &= ~0x00000200u;
}
void InstrSpecData::clear_tagdata() {
  tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagdata();
}
 const ::std::string& InstrSpecData::tagdata() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.tagdata)
  return tagdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_tagdata(const ::std::string& value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.tagdata)
}
 void InstrSpecData::set_tagdata(const char* value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.tagdata)
}
 void InstrSpecData::set_tagdata(const char* value, size_t size) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.tagdata)
}
 ::std::string* InstrSpecData::mutable_tagdata() {
  set_has_tagdata();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.tagdata)
  return tagdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_tagdata() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.tagdata)
  clear_has_tagdata();
  return tagdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_tagdata(::std::string* tagdata) {
  if (tagdata != NULL) {
    set_has_tagdata();
  } else {
    clear_has_tagdata();
  }
  tagdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagdata);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.tagdata)
}

// optional string tradecurrencyid = 11 [default = ""];
bool InstrSpecData::has_tradecurrencyid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void InstrSpecData::set_has_tradecurrencyid() {
  _has_bits_[0] |= 0x00000400u;
}
void InstrSpecData::clear_has_tradecurrencyid() {
  _has_bits_[0] &= ~0x00000400u;
}
void InstrSpecData::clear_tradecurrencyid() {
  tradecurrencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradecurrencyid();
}
 const ::std::string& InstrSpecData::tradecurrencyid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.tradecurrencyid)
  return tradecurrencyid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_tradecurrencyid(const ::std::string& value) {
  set_has_tradecurrencyid();
  tradecurrencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.tradecurrencyid)
}
 void InstrSpecData::set_tradecurrencyid(const char* value) {
  set_has_tradecurrencyid();
  tradecurrencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.tradecurrencyid)
}
 void InstrSpecData::set_tradecurrencyid(const char* value, size_t size) {
  set_has_tradecurrencyid();
  tradecurrencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.tradecurrencyid)
}
 ::std::string* InstrSpecData::mutable_tradecurrencyid() {
  set_has_tradecurrencyid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.tradecurrencyid)
  return tradecurrencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_tradecurrencyid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.tradecurrencyid)
  clear_has_tradecurrencyid();
  return tradecurrencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_tradecurrencyid(::std::string* tradecurrencyid) {
  if (tradecurrencyid != NULL) {
    set_has_tradecurrencyid();
  } else {
    clear_has_tradecurrencyid();
  }
  tradecurrencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradecurrencyid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.tradecurrencyid)
}

// optional string securitytypestr = 12 [default = ""];
bool InstrSpecData::has_securitytypestr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void InstrSpecData::set_has_securitytypestr() {
  _has_bits_[0] |= 0x00000800u;
}
void InstrSpecData::clear_has_securitytypestr() {
  _has_bits_[0] &= ~0x00000800u;
}
void InstrSpecData::clear_securitytypestr() {
  securitytypestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitytypestr();
}
 const ::std::string& InstrSpecData::securitytypestr() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.securitytypestr)
  return securitytypestr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_securitytypestr(const ::std::string& value) {
  set_has_securitytypestr();
  securitytypestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.securitytypestr)
}
 void InstrSpecData::set_securitytypestr(const char* value) {
  set_has_securitytypestr();
  securitytypestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.securitytypestr)
}
 void InstrSpecData::set_securitytypestr(const char* value, size_t size) {
  set_has_securitytypestr();
  securitytypestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.securitytypestr)
}
 ::std::string* InstrSpecData::mutable_securitytypestr() {
  set_has_securitytypestr();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.securitytypestr)
  return securitytypestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_securitytypestr() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.securitytypestr)
  clear_has_securitytypestr();
  return securitytypestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_securitytypestr(::std::string* securitytypestr) {
  if (securitytypestr != NULL) {
    set_has_securitytypestr();
  } else {
    clear_has_securitytypestr();
  }
  securitytypestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitytypestr);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.securitytypestr)
}

// optional double pxepsilon = 13 [default = 1e-06];
bool InstrSpecData::has_pxepsilon() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void InstrSpecData::set_has_pxepsilon() {
  _has_bits_[0] |= 0x00001000u;
}
void InstrSpecData::clear_has_pxepsilon() {
  _has_bits_[0] &= ~0x00001000u;
}
void InstrSpecData::clear_pxepsilon() {
  pxepsilon_ = 1e-06;
  clear_has_pxepsilon();
}
 double InstrSpecData::pxepsilon() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.pxepsilon)
  return pxepsilon_;
}
 void InstrSpecData::set_pxepsilon(double value) {
  set_has_pxepsilon();
  pxepsilon_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.pxepsilon)
}

// optional double tickvalue = 15 [default = 0];
bool InstrSpecData::has_tickvalue() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void InstrSpecData::set_has_tickvalue() {
  _has_bits_[0] |= 0x00002000u;
}
void InstrSpecData::clear_has_tickvalue() {
  _has_bits_[0] &= ~0x00002000u;
}
void InstrSpecData::clear_tickvalue() {
  tickvalue_ = 0;
  clear_has_tickvalue();
}
 double InstrSpecData::tickvalue() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.tickvalue)
  return tickvalue_;
}
 void InstrSpecData::set_tickvalue(double value) {
  set_has_tickvalue();
  tickvalue_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.tickvalue)
}

// optional int64 int64pxtick = 16 [default = 0];
bool InstrSpecData::has_int64pxtick() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void InstrSpecData::set_has_int64pxtick() {
  _has_bits_[0] |= 0x00004000u;
}
void InstrSpecData::clear_has_int64pxtick() {
  _has_bits_[0] &= ~0x00004000u;
}
void InstrSpecData::clear_int64pxtick() {
  int64pxtick_ = GOOGLE_LONGLONG(0);
  clear_has_int64pxtick();
}
 ::google::protobuf::int64 InstrSpecData::int64pxtick() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.int64pxtick)
  return int64pxtick_;
}
 void InstrSpecData::set_int64pxtick(::google::protobuf::int64 value) {
  set_has_int64pxtick();
  int64pxtick_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.int64pxtick)
}

// optional double int64pxpointvalue = 17 [default = 0];
bool InstrSpecData::has_int64pxpointvalue() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void InstrSpecData::set_has_int64pxpointvalue() {
  _has_bits_[0] |= 0x00008000u;
}
void InstrSpecData::clear_has_int64pxpointvalue() {
  _has_bits_[0] &= ~0x00008000u;
}
void InstrSpecData::clear_int64pxpointvalue() {
  int64pxpointvalue_ = 0;
  clear_has_int64pxpointvalue();
}
 double InstrSpecData::int64pxpointvalue() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.int64pxpointvalue)
  return int64pxpointvalue_;
}
 void InstrSpecData::set_int64pxpointvalue(double value) {
  set_has_int64pxpointvalue();
  int64pxpointvalue_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.int64pxpointvalue)
}

// optional double scaleint64todouble = 18 [default = 1];
bool InstrSpecData::has_scaleint64todouble() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void InstrSpecData::set_has_scaleint64todouble() {
  _has_bits_[0] |= 0x00010000u;
}
void InstrSpecData::clear_has_scaleint64todouble() {
  _has_bits_[0] &= ~0x00010000u;
}
void InstrSpecData::clear_scaleint64todouble() {
  scaleint64todouble_ = 1;
  clear_has_scaleint64todouble();
}
 double InstrSpecData::scaleint64todouble() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.scaleint64todouble)
  return scaleint64todouble_;
}
 void InstrSpecData::set_scaleint64todouble(double value) {
  set_has_scaleint64todouble();
  scaleint64todouble_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.scaleint64todouble)
}

// optional int64 scaledoubleToint64 = 19 [default = 1];
bool InstrSpecData::has_scaledoubletoint64() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void InstrSpecData::set_has_scaledoubletoint64() {
  _has_bits_[0] |= 0x00020000u;
}
void InstrSpecData::clear_has_scaledoubletoint64() {
  _has_bits_[0] &= ~0x00020000u;
}
void InstrSpecData::clear_scaledoubletoint64() {
  scaledoubletoint64_ = GOOGLE_LONGLONG(1);
  clear_has_scaledoubletoint64();
}
 ::google::protobuf::int64 InstrSpecData::scaledoubletoint64() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.scaledoubleToint64)
  return scaledoubletoint64_;
}
 void InstrSpecData::set_scaledoubletoint64(::google::protobuf::int64 value) {
  set_has_scaledoubletoint64();
  scaledoubletoint64_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.scaledoubleToint64)
}

// optional string areas = 20 [default = ""];
bool InstrSpecData::has_areas() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void InstrSpecData::set_has_areas() {
  _has_bits_[0] |= 0x00040000u;
}
void InstrSpecData::clear_has_areas() {
  _has_bits_[0] &= ~0x00040000u;
}
void InstrSpecData::clear_areas() {
  areas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_areas();
}
 const ::std::string& InstrSpecData::areas() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.areas)
  return areas_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_areas(const ::std::string& value) {
  set_has_areas();
  areas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.areas)
}
 void InstrSpecData::set_areas(const char* value) {
  set_has_areas();
  areas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.areas)
}
 void InstrSpecData::set_areas(const char* value, size_t size) {
  set_has_areas();
  areas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.areas)
}
 ::std::string* InstrSpecData::mutable_areas() {
  set_has_areas();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.areas)
  return areas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_areas() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.areas)
  clear_has_areas();
  return areas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_areas(::std::string* areas) {
  if (areas != NULL) {
    set_has_areas();
  } else {
    clear_has_areas();
  }
  areas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), areas);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.areas)
}

// optional string concepts = 21 [default = ""];
bool InstrSpecData::has_concepts() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void InstrSpecData::set_has_concepts() {
  _has_bits_[0] |= 0x00080000u;
}
void InstrSpecData::clear_has_concepts() {
  _has_bits_[0] &= ~0x00080000u;
}
void InstrSpecData::clear_concepts() {
  concepts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_concepts();
}
 const ::std::string& InstrSpecData::concepts() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.concepts)
  return concepts_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_concepts(const ::std::string& value) {
  set_has_concepts();
  concepts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.concepts)
}
 void InstrSpecData::set_concepts(const char* value) {
  set_has_concepts();
  concepts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.concepts)
}
 void InstrSpecData::set_concepts(const char* value, size_t size) {
  set_has_concepts();
  concepts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.concepts)
}
 ::std::string* InstrSpecData::mutable_concepts() {
  set_has_concepts();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.concepts)
  return concepts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_concepts() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.concepts)
  clear_has_concepts();
  return concepts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_concepts(::std::string* concepts) {
  if (concepts != NULL) {
    set_has_concepts();
  } else {
    clear_has_concepts();
  }
  concepts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), concepts);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.concepts)
}

// optional string industries = 22 [default = ""];
bool InstrSpecData::has_industries() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void InstrSpecData::set_has_industries() {
  _has_bits_[0] |= 0x00100000u;
}
void InstrSpecData::clear_has_industries() {
  _has_bits_[0] &= ~0x00100000u;
}
void InstrSpecData::clear_industries() {
  industries_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_industries();
}
 const ::std::string& InstrSpecData::industries() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.industries)
  return industries_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_industries(const ::std::string& value) {
  set_has_industries();
  industries_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.industries)
}
 void InstrSpecData::set_industries(const char* value) {
  set_has_industries();
  industries_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.industries)
}
 void InstrSpecData::set_industries(const char* value, size_t size) {
  set_has_industries();
  industries_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.industries)
}
 ::std::string* InstrSpecData::mutable_industries() {
  set_has_industries();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.industries)
  return industries_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_industries() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.industries)
  clear_has_industries();
  return industries_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_industries(::std::string* industries) {
  if (industries != NULL) {
    set_has_industries();
  } else {
    clear_has_industries();
  }
  industries_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), industries);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.industries)
}

// optional int32 listintdate = 23 [default = 0];
bool InstrSpecData::has_listintdate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void InstrSpecData::set_has_listintdate() {
  _has_bits_[0] |= 0x00200000u;
}
void InstrSpecData::clear_has_listintdate() {
  _has_bits_[0] &= ~0x00200000u;
}
void InstrSpecData::clear_listintdate() {
  listintdate_ = 0;
  clear_has_listintdate();
}
 ::google::protobuf::int32 InstrSpecData::listintdate() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.listintdate)
  return listintdate_;
}
 void InstrSpecData::set_listintdate(::google::protobuf::int32 value) {
  set_has_listintdate();
  listintdate_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.listintdate)
}

// optional string exchangeinstid = 101 [default = ""];
bool InstrSpecData::has_exchangeinstid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void InstrSpecData::set_has_exchangeinstid() {
  _has_bits_[0] |= 0x00400000u;
}
void InstrSpecData::clear_has_exchangeinstid() {
  _has_bits_[0] &= ~0x00400000u;
}
void InstrSpecData::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeinstid();
}
 const ::std::string& InstrSpecData::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.exchangeinstid)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_exchangeinstid(const ::std::string& value) {
  set_has_exchangeinstid();
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.exchangeinstid)
}
 void InstrSpecData::set_exchangeinstid(const char* value) {
  set_has_exchangeinstid();
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.exchangeinstid)
}
 void InstrSpecData::set_exchangeinstid(const char* value, size_t size) {
  set_has_exchangeinstid();
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.exchangeinstid)
}
 ::std::string* InstrSpecData::mutable_exchangeinstid() {
  set_has_exchangeinstid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.exchangeinstid)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_exchangeinstid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.exchangeinstid)
  clear_has_exchangeinstid();
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    set_has_exchangeinstid();
  } else {
    clear_has_exchangeinstid();
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.exchangeinstid)
}

// optional int32 productclass = 102 [default = 0];
bool InstrSpecData::has_productclass() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void InstrSpecData::set_has_productclass() {
  _has_bits_[0] |= 0x00800000u;
}
void InstrSpecData::clear_has_productclass() {
  _has_bits_[0] &= ~0x00800000u;
}
void InstrSpecData::clear_productclass() {
  productclass_ = 0;
  clear_has_productclass();
}
 ::google::protobuf::int32 InstrSpecData::productclass() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.productclass)
  return productclass_;
}
 void InstrSpecData::set_productclass(::google::protobuf::int32 value) {
  set_has_productclass();
  productclass_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.productclass)
}

// optional int32 deliveryyear = 103 [default = 0];
bool InstrSpecData::has_deliveryyear() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void InstrSpecData::set_has_deliveryyear() {
  _has_bits_[0] |= 0x01000000u;
}
void InstrSpecData::clear_has_deliveryyear() {
  _has_bits_[0] &= ~0x01000000u;
}
void InstrSpecData::clear_deliveryyear() {
  deliveryyear_ = 0;
  clear_has_deliveryyear();
}
 ::google::protobuf::int32 InstrSpecData::deliveryyear() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.deliveryyear)
  return deliveryyear_;
}
 void InstrSpecData::set_deliveryyear(::google::protobuf::int32 value) {
  set_has_deliveryyear();
  deliveryyear_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.deliveryyear)
}

// optional int32 deliverymonth = 104 [default = 0];
bool InstrSpecData::has_deliverymonth() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void InstrSpecData::set_has_deliverymonth() {
  _has_bits_[0] |= 0x02000000u;
}
void InstrSpecData::clear_has_deliverymonth() {
  _has_bits_[0] &= ~0x02000000u;
}
void InstrSpecData::clear_deliverymonth() {
  deliverymonth_ = 0;
  clear_has_deliverymonth();
}
 ::google::protobuf::int32 InstrSpecData::deliverymonth() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.deliverymonth)
  return deliverymonth_;
}
 void InstrSpecData::set_deliverymonth(::google::protobuf::int32 value) {
  set_has_deliverymonth();
  deliverymonth_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.deliverymonth)
}

// optional int32 maxmarketordervolume = 105 [default = 0];
bool InstrSpecData::has_maxmarketordervolume() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void InstrSpecData::set_has_maxmarketordervolume() {
  _has_bits_[0] |= 0x04000000u;
}
void InstrSpecData::clear_has_maxmarketordervolume() {
  _has_bits_[0] &= ~0x04000000u;
}
void InstrSpecData::clear_maxmarketordervolume() {
  maxmarketordervolume_ = 0;
  clear_has_maxmarketordervolume();
}
 ::google::protobuf::int32 InstrSpecData::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.maxmarketordervolume)
  return maxmarketordervolume_;
}
 void InstrSpecData::set_maxmarketordervolume(::google::protobuf::int32 value) {
  set_has_maxmarketordervolume();
  maxmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.maxmarketordervolume)
}

// optional int32 minmarketordervolume = 106 [default = 0];
bool InstrSpecData::has_minmarketordervolume() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void InstrSpecData::set_has_minmarketordervolume() {
  _has_bits_[0] |= 0x08000000u;
}
void InstrSpecData::clear_has_minmarketordervolume() {
  _has_bits_[0] &= ~0x08000000u;
}
void InstrSpecData::clear_minmarketordervolume() {
  minmarketordervolume_ = 0;
  clear_has_minmarketordervolume();
}
 ::google::protobuf::int32 InstrSpecData::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.minmarketordervolume)
  return minmarketordervolume_;
}
 void InstrSpecData::set_minmarketordervolume(::google::protobuf::int32 value) {
  set_has_minmarketordervolume();
  minmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.minmarketordervolume)
}

// optional int32 maxlimitordervolume = 107 [default = 0];
bool InstrSpecData::has_maxlimitordervolume() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void InstrSpecData::set_has_maxlimitordervolume() {
  _has_bits_[0] |= 0x10000000u;
}
void InstrSpecData::clear_has_maxlimitordervolume() {
  _has_bits_[0] &= ~0x10000000u;
}
void InstrSpecData::clear_maxlimitordervolume() {
  maxlimitordervolume_ = 0;
  clear_has_maxlimitordervolume();
}
 ::google::protobuf::int32 InstrSpecData::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.maxlimitordervolume)
  return maxlimitordervolume_;
}
 void InstrSpecData::set_maxlimitordervolume(::google::protobuf::int32 value) {
  set_has_maxlimitordervolume();
  maxlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.maxlimitordervolume)
}

// optional int32 minlimitordervolume = 108 [default = 0];
bool InstrSpecData::has_minlimitordervolume() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void InstrSpecData::set_has_minlimitordervolume() {
  _has_bits_[0] |= 0x20000000u;
}
void InstrSpecData::clear_has_minlimitordervolume() {
  _has_bits_[0] &= ~0x20000000u;
}
void InstrSpecData::clear_minlimitordervolume() {
  minlimitordervolume_ = 0;
  clear_has_minlimitordervolume();
}
 ::google::protobuf::int32 InstrSpecData::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.minlimitordervolume)
  return minlimitordervolume_;
}
 void InstrSpecData::set_minlimitordervolume(::google::protobuf::int32 value) {
  set_has_minlimitordervolume();
  minlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.minlimitordervolume)
}

// optional int32 positiontype = 109 [default = 0];
bool InstrSpecData::has_positiontype() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void InstrSpecData::set_has_positiontype() {
  _has_bits_[0] |= 0x40000000u;
}
void InstrSpecData::clear_has_positiontype() {
  _has_bits_[0] &= ~0x40000000u;
}
void InstrSpecData::clear_positiontype() {
  positiontype_ = 0;
  clear_has_positiontype();
}
 ::google::protobuf::int32 InstrSpecData::positiontype() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.positiontype)
  return positiontype_;
}
 void InstrSpecData::set_positiontype(::google::protobuf::int32 value) {
  set_has_positiontype();
  positiontype_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.positiontype)
}

// optional int32 positiondatetype = 110 [default = 0];
bool InstrSpecData::has_positiondatetype() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void InstrSpecData::set_has_positiondatetype() {
  _has_bits_[0] |= 0x80000000u;
}
void InstrSpecData::clear_has_positiondatetype() {
  _has_bits_[0] &= ~0x80000000u;
}
void InstrSpecData::clear_positiondatetype() {
  positiondatetype_ = 0;
  clear_has_positiondatetype();
}
 ::google::protobuf::int32 InstrSpecData::positiondatetype() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.positiondatetype)
  return positiondatetype_;
}
 void InstrSpecData::set_positiondatetype(::google::protobuf::int32 value) {
  set_has_positiondatetype();
  positiondatetype_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.positiondatetype)
}

// optional int32 closedealtype = 111 [default = 0];
bool InstrSpecData::has_closedealtype() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void InstrSpecData::set_has_closedealtype() {
  _has_bits_[1] |= 0x00000001u;
}
void InstrSpecData::clear_has_closedealtype() {
  _has_bits_[1] &= ~0x00000001u;
}
void InstrSpecData::clear_closedealtype() {
  closedealtype_ = 0;
  clear_has_closedealtype();
}
 ::google::protobuf::int32 InstrSpecData::closedealtype() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.closedealtype)
  return closedealtype_;
}
 void InstrSpecData::set_closedealtype(::google::protobuf::int32 value) {
  set_has_closedealtype();
  closedealtype_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.closedealtype)
}

// optional int32 mortgagefunduserange = 112 [default = 0];
bool InstrSpecData::has_mortgagefunduserange() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void InstrSpecData::set_has_mortgagefunduserange() {
  _has_bits_[1] |= 0x00000002u;
}
void InstrSpecData::clear_has_mortgagefunduserange() {
  _has_bits_[1] &= ~0x00000002u;
}
void InstrSpecData::clear_mortgagefunduserange() {
  mortgagefunduserange_ = 0;
  clear_has_mortgagefunduserange();
}
 ::google::protobuf::int32 InstrSpecData::mortgagefunduserange() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.mortgagefunduserange)
  return mortgagefunduserange_;
}
 void InstrSpecData::set_mortgagefunduserange(::google::protobuf::int32 value) {
  set_has_mortgagefunduserange();
  mortgagefunduserange_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.mortgagefunduserange)
}

// optional string exchangeproductid = 113 [default = ""];
bool InstrSpecData::has_exchangeproductid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void InstrSpecData::set_has_exchangeproductid() {
  _has_bits_[1] |= 0x00000004u;
}
void InstrSpecData::clear_has_exchangeproductid() {
  _has_bits_[1] &= ~0x00000004u;
}
void InstrSpecData::clear_exchangeproductid() {
  exchangeproductid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeproductid();
}
 const ::std::string& InstrSpecData::exchangeproductid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.exchangeproductid)
  return exchangeproductid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_exchangeproductid(const ::std::string& value) {
  set_has_exchangeproductid();
  exchangeproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.exchangeproductid)
}
 void InstrSpecData::set_exchangeproductid(const char* value) {
  set_has_exchangeproductid();
  exchangeproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.exchangeproductid)
}
 void InstrSpecData::set_exchangeproductid(const char* value, size_t size) {
  set_has_exchangeproductid();
  exchangeproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.exchangeproductid)
}
 ::std::string* InstrSpecData::mutable_exchangeproductid() {
  set_has_exchangeproductid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.exchangeproductid)
  return exchangeproductid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_exchangeproductid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.exchangeproductid)
  clear_has_exchangeproductid();
  return exchangeproductid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_exchangeproductid(::std::string* exchangeproductid) {
  if (exchangeproductid != NULL) {
    set_has_exchangeproductid();
  } else {
    clear_has_exchangeproductid();
  }
  exchangeproductid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeproductid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.exchangeproductid)
}

// optional double undlymultiple = 114 [default = 1];
bool InstrSpecData::has_undlymultiple() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void InstrSpecData::set_has_undlymultiple() {
  _has_bits_[1] |= 0x00000008u;
}
void InstrSpecData::clear_has_undlymultiple() {
  _has_bits_[1] &= ~0x00000008u;
}
void InstrSpecData::clear_undlymultiple() {
  undlymultiple_ = 1;
  clear_has_undlymultiple();
}
 double InstrSpecData::undlymultiple() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.undlymultiple)
  return undlymultiple_;
}
 void InstrSpecData::set_undlymultiple(double value) {
  set_has_undlymultiple();
  undlymultiple_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.undlymultiple)
}

// optional string undlyproductid = 115 [default = ""];
bool InstrSpecData::has_undlyproductid() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void InstrSpecData::set_has_undlyproductid() {
  _has_bits_[1] |= 0x00000010u;
}
void InstrSpecData::clear_has_undlyproductid() {
  _has_bits_[1] &= ~0x00000010u;
}
void InstrSpecData::clear_undlyproductid() {
  undlyproductid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_undlyproductid();
}
 const ::std::string& InstrSpecData::undlyproductid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.undlyproductid)
  return undlyproductid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_undlyproductid(const ::std::string& value) {
  set_has_undlyproductid();
  undlyproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.undlyproductid)
}
 void InstrSpecData::set_undlyproductid(const char* value) {
  set_has_undlyproductid();
  undlyproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.undlyproductid)
}
 void InstrSpecData::set_undlyproductid(const char* value, size_t size) {
  set_has_undlyproductid();
  undlyproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.undlyproductid)
}
 ::std::string* InstrSpecData::mutable_undlyproductid() {
  set_has_undlyproductid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.undlyproductid)
  return undlyproductid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_undlyproductid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.undlyproductid)
  clear_has_undlyproductid();
  return undlyproductid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_undlyproductid(::std::string* undlyproductid) {
  if (undlyproductid != NULL) {
    set_has_undlyproductid();
  } else {
    clear_has_undlyproductid();
  }
  undlyproductid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), undlyproductid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.undlyproductid)
}

// optional string undlyinstrid = 116 [default = ""];
bool InstrSpecData::has_undlyinstrid() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void InstrSpecData::set_has_undlyinstrid() {
  _has_bits_[1] |= 0x00000020u;
}
void InstrSpecData::clear_has_undlyinstrid() {
  _has_bits_[1] &= ~0x00000020u;
}
void InstrSpecData::clear_undlyinstrid() {
  undlyinstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_undlyinstrid();
}
 const ::std::string& InstrSpecData::undlyinstrid() const {
  // @@protoc_insertion_point(field_get:XT.InstrSpecData.undlyinstrid)
  return undlyinstrid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_undlyinstrid(const ::std::string& value) {
  set_has_undlyinstrid();
  undlyinstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrSpecData.undlyinstrid)
}
 void InstrSpecData::set_undlyinstrid(const char* value) {
  set_has_undlyinstrid();
  undlyinstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrSpecData.undlyinstrid)
}
 void InstrSpecData::set_undlyinstrid(const char* value, size_t size) {
  set_has_undlyinstrid();
  undlyinstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrSpecData.undlyinstrid)
}
 ::std::string* InstrSpecData::mutable_undlyinstrid() {
  set_has_undlyinstrid();
  // @@protoc_insertion_point(field_mutable:XT.InstrSpecData.undlyinstrid)
  return undlyinstrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrSpecData::release_undlyinstrid() {
  // @@protoc_insertion_point(field_release:XT.InstrSpecData.undlyinstrid)
  clear_has_undlyinstrid();
  return undlyinstrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrSpecData::set_allocated_undlyinstrid(::std::string* undlyinstrid) {
  if (undlyinstrid != NULL) {
    set_has_undlyinstrid();
  } else {
    clear_has_undlyinstrid();
  }
  undlyinstrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), undlyinstrid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrSpecData.undlyinstrid)
}

// map<string, string> namestrmap = 200;
int InstrSpecData::namestrmap_size() const {
  return namestrmap_.size();
}
void InstrSpecData::clear_namestrmap() {
  namestrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
InstrSpecData::namestrmap() const {
  // @@protoc_insertion_point(field_map:XT.InstrSpecData.namestrmap)
  return namestrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
InstrSpecData::mutable_namestrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.InstrSpecData.namestrmap)
  return namestrmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* StratCfgData::_default_name_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StratCfgData::kNameFieldNumber;
const int StratCfgData::kIssimFieldNumber;
const int StratCfgData::kIsnoneFieldNumber;
const int StratCfgData::kPrevtradingdayFieldNumber;
const int StratCfgData::kTradingdayFieldNumber;
const int StratCfgData::kCurrintdateFieldNumber;
const int StratCfgData::kInstrprefixesFieldNumber;
const int StratCfgData::kNamestrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StratCfgData::StratCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.StratCfgData)
}

void StratCfgData::InitAsDefaultInstance() {
}

StratCfgData::StratCfgData(const StratCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.StratCfgData)
}

void StratCfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  issim_ = 0;
  isnone_ = 0;
  prevtradingday_ = 0;
  tradingday_ = 0;
  currintdate_ = 0;
  instrprefixes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namestrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  namestrmap_.SetEntryDescriptor(
      &::XT::StratCfgData_NamestrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StratCfgData::~StratCfgData() {
  // @@protoc_insertion_point(destructor:XT.StratCfgData)
  SharedDtor();
}

void StratCfgData::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  instrprefixes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StratCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StratCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StratCfgData_descriptor_;
}

const StratCfgData& StratCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

StratCfgData* StratCfgData::default_instance_ = NULL;

StratCfgData* StratCfgData::New(::google::protobuf::Arena* arena) const {
  StratCfgData* n = new StratCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StratCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.StratCfgData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StratCfgData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StratCfgData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(issim_, tradingday_);
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    currintdate_ = 0;
    if (has_instrprefixes()) {
      instrprefixes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  namestrmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StratCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.StratCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "strategy"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.StratCfgData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_issim;
        break;
      }

      // optional int32 issim = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_issim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issim_)));
          set_has_issim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isnone;
        break;
      }

      // optional int32 isnone = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_isnone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnone_)));
          set_has_isnone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prevtradingday;
        break;
      }

      // optional int32 prevtradingday = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_prevtradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevtradingday_)));
          set_has_prevtradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tradingday;
        break;
      }

      // optional int32 tradingday = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_tradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currintdate;
        break;
      }

      // optional int32 currintdate = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_currintdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currintdate_)));
          set_has_currintdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_instrprefixes;
        break;
      }

      // optional string instrprefixes = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_instrprefixes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrprefixes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrprefixes().data(), this->instrprefixes().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.StratCfgData.instrprefixes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_namestrmap;
        break;
      }

      // map<string, string> namestrmap = 30;
      case 30: {
        if (tag == 242) {
         parse_namestrmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_namestrmap:
          StratCfgData_NamestrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&namestrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.StratCfgData.NamestrmapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.StratCfgData.NamestrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_namestrmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.StratCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.StratCfgData)
  return false;
#undef DO_
}

void StratCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.StratCfgData)
  // optional string name = 1 [default = "strategy"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.StratCfgData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 issim = 2 [default = 0];
  if (has_issim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->issim(), output);
  }

  // optional int32 isnone = 3 [default = 0];
  if (has_isnone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isnone(), output);
  }

  // optional int32 prevtradingday = 4 [default = 0];
  if (has_prevtradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevtradingday(), output);
  }

  // optional int32 tradingday = 5 [default = 0];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tradingday(), output);
  }

  // optional int32 currintdate = 6 [default = 0];
  if (has_currintdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currintdate(), output);
  }

  // optional string instrprefixes = 7 [default = ""];
  if (has_instrprefixes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrprefixes().data(), this->instrprefixes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.StratCfgData.instrprefixes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->instrprefixes(), output);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StratCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StratCfgData.NamestrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StratCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StratCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.StratCfgData)
}

::google::protobuf::uint8* StratCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.StratCfgData)
  // optional string name = 1 [default = "strategy"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.StratCfgData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 issim = 2 [default = 0];
  if (has_issim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->issim(), target);
  }

  // optional int32 isnone = 3 [default = 0];
  if (has_isnone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isnone(), target);
  }

  // optional int32 prevtradingday = 4 [default = 0];
  if (has_prevtradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevtradingday(), target);
  }

  // optional int32 tradingday = 5 [default = 0];
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tradingday(), target);
  }

  // optional int32 currintdate = 6 [default = 0];
  if (has_currintdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currintdate(), target);
  }

  // optional string instrprefixes = 7 [default = ""];
  if (has_instrprefixes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrprefixes().data(), this->instrprefixes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.StratCfgData.instrprefixes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->instrprefixes(), target);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StratCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.StratCfgData.NamestrmapEntry.value");
      }
    };

    if (deterministic &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StratCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StratCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.StratCfgData)
  return target;
}

int StratCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.StratCfgData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1 [default = "strategy"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 issim = 2 [default = 0];
    if (has_issim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issim());
    }

    // optional int32 isnone = 3 [default = 0];
    if (has_isnone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnone());
    }

    // optional int32 prevtradingday = 4 [default = 0];
    if (has_prevtradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevtradingday());
    }

    // optional int32 tradingday = 5 [default = 0];
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // optional int32 currintdate = 6 [default = 0];
    if (has_currintdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currintdate());
    }

    // optional string instrprefixes = 7 [default = ""];
    if (has_instrprefixes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrprefixes());
    }

  }
  // map<string, string> namestrmap = 30;
  total_size += 2 * this->namestrmap_size();
  {
    ::google::protobuf::scoped_ptr<StratCfgData_NamestrmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->namestrmap().begin();
        it != this->namestrmap().end(); ++it) {
      entry.reset(namestrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StratCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.StratCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StratCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StratCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.StratCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.StratCfgData)
    MergeFrom(*source);
  }
}

void StratCfgData::MergeFrom(const StratCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.StratCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  namestrmap_.MergeFrom(from.namestrmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_issim()) {
      set_issim(from.issim());
    }
    if (from.has_isnone()) {
      set_isnone(from.isnone());
    }
    if (from.has_prevtradingday()) {
      set_prevtradingday(from.prevtradingday());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_currintdate()) {
      set_currintdate(from.currintdate());
    }
    if (from.has_instrprefixes()) {
      set_has_instrprefixes();
      instrprefixes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrprefixes_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StratCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.StratCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StratCfgData::CopyFrom(const StratCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.StratCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StratCfgData::IsInitialized() const {

  return true;
}

void StratCfgData::Swap(StratCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StratCfgData::InternalSwap(StratCfgData* other) {
  name_.Swap(&other->name_);
  std::swap(issim_, other->issim_);
  std::swap(isnone_, other->isnone_);
  std::swap(prevtradingday_, other->prevtradingday_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(currintdate_, other->currintdate_);
  instrprefixes_.Swap(&other->instrprefixes_);
  namestrmap_.Swap(&other->namestrmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StratCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StratCfgData_descriptor_;
  metadata.reflection = StratCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StratCfgData

// optional string name = 1 [default = "strategy"];
bool StratCfgData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StratCfgData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StratCfgData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StratCfgData::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& StratCfgData::name() const {
  // @@protoc_insertion_point(field_get:XT.StratCfgData.name)
  return name_.GetNoArena(_default_name_);
}
 void StratCfgData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:XT.StratCfgData.name)
}
 void StratCfgData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.StratCfgData.name)
}
 void StratCfgData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.StratCfgData.name)
}
 ::std::string* StratCfgData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.StratCfgData.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* StratCfgData::release_name() {
  // @@protoc_insertion_point(field_release:XT.StratCfgData.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void StratCfgData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:XT.StratCfgData.name)
}

// optional int32 issim = 2 [default = 0];
bool StratCfgData::has_issim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StratCfgData::set_has_issim() {
  _has_bits_[0] |= 0x00000002u;
}
void StratCfgData::clear_has_issim() {
  _has_bits_[0] &= ~0x00000002u;
}
void StratCfgData::clear_issim() {
  issim_ = 0;
  clear_has_issim();
}
 ::google::protobuf::int32 StratCfgData::issim() const {
  // @@protoc_insertion_point(field_get:XT.StratCfgData.issim)
  return issim_;
}
 void StratCfgData::set_issim(::google::protobuf::int32 value) {
  set_has_issim();
  issim_ = value;
  // @@protoc_insertion_point(field_set:XT.StratCfgData.issim)
}

// optional int32 isnone = 3 [default = 0];
bool StratCfgData::has_isnone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StratCfgData::set_has_isnone() {
  _has_bits_[0] |= 0x00000004u;
}
void StratCfgData::clear_has_isnone() {
  _has_bits_[0] &= ~0x00000004u;
}
void StratCfgData::clear_isnone() {
  isnone_ = 0;
  clear_has_isnone();
}
 ::google::protobuf::int32 StratCfgData::isnone() const {
  // @@protoc_insertion_point(field_get:XT.StratCfgData.isnone)
  return isnone_;
}
 void StratCfgData::set_isnone(::google::protobuf::int32 value) {
  set_has_isnone();
  isnone_ = value;
  // @@protoc_insertion_point(field_set:XT.StratCfgData.isnone)
}

// optional int32 prevtradingday = 4 [default = 0];
bool StratCfgData::has_prevtradingday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StratCfgData::set_has_prevtradingday() {
  _has_bits_[0] |= 0x00000008u;
}
void StratCfgData::clear_has_prevtradingday() {
  _has_bits_[0] &= ~0x00000008u;
}
void StratCfgData::clear_prevtradingday() {
  prevtradingday_ = 0;
  clear_has_prevtradingday();
}
 ::google::protobuf::int32 StratCfgData::prevtradingday() const {
  // @@protoc_insertion_point(field_get:XT.StratCfgData.prevtradingday)
  return prevtradingday_;
}
 void StratCfgData::set_prevtradingday(::google::protobuf::int32 value) {
  set_has_prevtradingday();
  prevtradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.StratCfgData.prevtradingday)
}

// optional int32 tradingday = 5 [default = 0];
bool StratCfgData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StratCfgData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000010u;
}
void StratCfgData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000010u;
}
void StratCfgData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
 ::google::protobuf::int32 StratCfgData::tradingday() const {
  // @@protoc_insertion_point(field_get:XT.StratCfgData.tradingday)
  return tradingday_;
}
 void StratCfgData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.StratCfgData.tradingday)
}

// optional int32 currintdate = 6 [default = 0];
bool StratCfgData::has_currintdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StratCfgData::set_has_currintdate() {
  _has_bits_[0] |= 0x00000020u;
}
void StratCfgData::clear_has_currintdate() {
  _has_bits_[0] &= ~0x00000020u;
}
void StratCfgData::clear_currintdate() {
  currintdate_ = 0;
  clear_has_currintdate();
}
 ::google::protobuf::int32 StratCfgData::currintdate() const {
  // @@protoc_insertion_point(field_get:XT.StratCfgData.currintdate)
  return currintdate_;
}
 void StratCfgData::set_currintdate(::google::protobuf::int32 value) {
  set_has_currintdate();
  currintdate_ = value;
  // @@protoc_insertion_point(field_set:XT.StratCfgData.currintdate)
}

// optional string instrprefixes = 7 [default = ""];
bool StratCfgData::has_instrprefixes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StratCfgData::set_has_instrprefixes() {
  _has_bits_[0] |= 0x00000040u;
}
void StratCfgData::clear_has_instrprefixes() {
  _has_bits_[0] &= ~0x00000040u;
}
void StratCfgData::clear_instrprefixes() {
  instrprefixes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrprefixes();
}
 const ::std::string& StratCfgData::instrprefixes() const {
  // @@protoc_insertion_point(field_get:XT.StratCfgData.instrprefixes)
  return instrprefixes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StratCfgData::set_instrprefixes(const ::std::string& value) {
  set_has_instrprefixes();
  instrprefixes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.StratCfgData.instrprefixes)
}
 void StratCfgData::set_instrprefixes(const char* value) {
  set_has_instrprefixes();
  instrprefixes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.StratCfgData.instrprefixes)
}
 void StratCfgData::set_instrprefixes(const char* value, size_t size) {
  set_has_instrprefixes();
  instrprefixes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.StratCfgData.instrprefixes)
}
 ::std::string* StratCfgData::mutable_instrprefixes() {
  set_has_instrprefixes();
  // @@protoc_insertion_point(field_mutable:XT.StratCfgData.instrprefixes)
  return instrprefixes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StratCfgData::release_instrprefixes() {
  // @@protoc_insertion_point(field_release:XT.StratCfgData.instrprefixes)
  clear_has_instrprefixes();
  return instrprefixes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StratCfgData::set_allocated_instrprefixes(::std::string* instrprefixes) {
  if (instrprefixes != NULL) {
    set_has_instrprefixes();
  } else {
    clear_has_instrprefixes();
  }
  instrprefixes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrprefixes);
  // @@protoc_insertion_point(field_set_allocated:XT.StratCfgData.instrprefixes)
}

// map<string, string> namestrmap = 30;
int StratCfgData::namestrmap_size() const {
  return namestrmap_.size();
}
void StratCfgData::clear_namestrmap() {
  namestrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
StratCfgData::namestrmap() const {
  // @@protoc_insertion_point(field_map:XT.StratCfgData.namestrmap)
  return namestrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
StratCfgData::mutable_namestrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.StratCfgData.namestrmap)
  return namestrmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrCfgData::kMdapiFieldNumber;
const int InstrCfgData::kTrdapiFieldNumber;
const int InstrCfgData::kBooklevelsFieldNumber;
const int InstrCfgData::kMktrollingwindowFieldNumber;
const int InstrCfgData::kNamestrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrCfgData::InstrCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.InstrCfgData)
}

void InstrCfgData::InitAsDefaultInstance() {
}

InstrCfgData::InstrCfgData(const InstrCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.InstrCfgData)
}

void InstrCfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mdapi_ = 0;
  trdapi_ = 0;
  booklevels_ = 5;
  mktrollingwindow_ = 30;
  namestrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  namestrmap_.SetEntryDescriptor(
      &::XT::InstrCfgData_NamestrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrCfgData::~InstrCfgData() {
  // @@protoc_insertion_point(destructor:XT.InstrCfgData)
  SharedDtor();
}

void InstrCfgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrCfgData_descriptor_;
}

const InstrCfgData& InstrCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

InstrCfgData* InstrCfgData::default_instance_ = NULL;

InstrCfgData* InstrCfgData::New(::google::protobuf::Arena* arena) const {
  InstrCfgData* n = new InstrCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstrCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.InstrCfgData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InstrCfgData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InstrCfgData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(mdapi_, trdapi_);
    booklevels_ = 5;
    mktrollingwindow_ = 30;
  }

#undef ZR_HELPER_
#undef ZR_

  namestrmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InstrCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.InstrCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mdapi = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdapi_)));
          set_has_mdapi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trdapi;
        break;
      }

      // optional int32 trdapi = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_trdapi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdapi_)));
          set_has_trdapi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_booklevels;
        break;
      }

      // optional int32 booklevels = 3 [default = 5];
      case 3: {
        if (tag == 24) {
         parse_booklevels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &booklevels_)));
          set_has_booklevels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mktrollingwindow;
        break;
      }

      // optional int32 mktrollingwindow = 4 [default = 30];
      case 4: {
        if (tag == 32) {
         parse_mktrollingwindow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mktrollingwindow_)));
          set_has_mktrollingwindow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_namestrmap;
        break;
      }

      // map<string, string> namestrmap = 30;
      case 30: {
        if (tag == 242) {
         parse_namestrmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_namestrmap:
          InstrCfgData_NamestrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&namestrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrCfgData.NamestrmapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrCfgData.NamestrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_namestrmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.InstrCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.InstrCfgData)
  return false;
#undef DO_
}

void InstrCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.InstrCfgData)
  // optional int32 mdapi = 1 [default = 0];
  if (has_mdapi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mdapi(), output);
  }

  // optional int32 trdapi = 2 [default = 0];
  if (has_trdapi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trdapi(), output);
  }

  // optional int32 booklevels = 3 [default = 5];
  if (has_booklevels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->booklevels(), output);
  }

  // optional int32 mktrollingwindow = 4 [default = 30];
  if (has_mktrollingwindow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mktrollingwindow(), output);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrCfgData.NamestrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.InstrCfgData)
}

::google::protobuf::uint8* InstrCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.InstrCfgData)
  // optional int32 mdapi = 1 [default = 0];
  if (has_mdapi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mdapi(), target);
  }

  // optional int32 trdapi = 2 [default = 0];
  if (has_trdapi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trdapi(), target);
  }

  // optional int32 booklevels = 3 [default = 5];
  if (has_booklevels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->booklevels(), target);
  }

  // optional int32 mktrollingwindow = 4 [default = 30];
  if (has_mktrollingwindow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mktrollingwindow(), target);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.InstrCfgData.NamestrmapEntry.value");
      }
    };

    if (deterministic &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.InstrCfgData)
  return target;
}

int InstrCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.InstrCfgData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 mdapi = 1 [default = 0];
    if (has_mdapi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdapi());
    }

    // optional int32 trdapi = 2 [default = 0];
    if (has_trdapi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trdapi());
    }

    // optional int32 booklevels = 3 [default = 5];
    if (has_booklevels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->booklevels());
    }

    // optional int32 mktrollingwindow = 4 [default = 30];
    if (has_mktrollingwindow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mktrollingwindow());
    }

  }
  // map<string, string> namestrmap = 30;
  total_size += 2 * this->namestrmap_size();
  {
    ::google::protobuf::scoped_ptr<InstrCfgData_NamestrmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->namestrmap().begin();
        it != this->namestrmap().end(); ++it) {
      entry.reset(namestrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.InstrCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstrCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstrCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.InstrCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.InstrCfgData)
    MergeFrom(*source);
  }
}

void InstrCfgData::MergeFrom(const InstrCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.InstrCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  namestrmap_.MergeFrom(from.namestrmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mdapi()) {
      set_mdapi(from.mdapi());
    }
    if (from.has_trdapi()) {
      set_trdapi(from.trdapi());
    }
    if (from.has_booklevels()) {
      set_booklevels(from.booklevels());
    }
    if (from.has_mktrollingwindow()) {
      set_mktrollingwindow(from.mktrollingwindow());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InstrCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.InstrCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrCfgData::CopyFrom(const InstrCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.InstrCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrCfgData::IsInitialized() const {

  return true;
}

void InstrCfgData::Swap(InstrCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrCfgData::InternalSwap(InstrCfgData* other) {
  std::swap(mdapi_, other->mdapi_);
  std::swap(trdapi_, other->trdapi_);
  std::swap(booklevels_, other->booklevels_);
  std::swap(mktrollingwindow_, other->mktrollingwindow_);
  namestrmap_.Swap(&other->namestrmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstrCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrCfgData_descriptor_;
  metadata.reflection = InstrCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstrCfgData

// optional int32 mdapi = 1 [default = 0];
bool InstrCfgData::has_mdapi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InstrCfgData::set_has_mdapi() {
  _has_bits_[0] |= 0x00000001u;
}
void InstrCfgData::clear_has_mdapi() {
  _has_bits_[0] &= ~0x00000001u;
}
void InstrCfgData::clear_mdapi() {
  mdapi_ = 0;
  clear_has_mdapi();
}
 ::google::protobuf::int32 InstrCfgData::mdapi() const {
  // @@protoc_insertion_point(field_get:XT.InstrCfgData.mdapi)
  return mdapi_;
}
 void InstrCfgData::set_mdapi(::google::protobuf::int32 value) {
  set_has_mdapi();
  mdapi_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrCfgData.mdapi)
}

// optional int32 trdapi = 2 [default = 0];
bool InstrCfgData::has_trdapi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InstrCfgData::set_has_trdapi() {
  _has_bits_[0] |= 0x00000002u;
}
void InstrCfgData::clear_has_trdapi() {
  _has_bits_[0] &= ~0x00000002u;
}
void InstrCfgData::clear_trdapi() {
  trdapi_ = 0;
  clear_has_trdapi();
}
 ::google::protobuf::int32 InstrCfgData::trdapi() const {
  // @@protoc_insertion_point(field_get:XT.InstrCfgData.trdapi)
  return trdapi_;
}
 void InstrCfgData::set_trdapi(::google::protobuf::int32 value) {
  set_has_trdapi();
  trdapi_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrCfgData.trdapi)
}

// optional int32 booklevels = 3 [default = 5];
bool InstrCfgData::has_booklevels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InstrCfgData::set_has_booklevels() {
  _has_bits_[0] |= 0x00000004u;
}
void InstrCfgData::clear_has_booklevels() {
  _has_bits_[0] &= ~0x00000004u;
}
void InstrCfgData::clear_booklevels() {
  booklevels_ = 5;
  clear_has_booklevels();
}
 ::google::protobuf::int32 InstrCfgData::booklevels() const {
  // @@protoc_insertion_point(field_get:XT.InstrCfgData.booklevels)
  return booklevels_;
}
 void InstrCfgData::set_booklevels(::google::protobuf::int32 value) {
  set_has_booklevels();
  booklevels_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrCfgData.booklevels)
}

// optional int32 mktrollingwindow = 4 [default = 30];
bool InstrCfgData::has_mktrollingwindow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InstrCfgData::set_has_mktrollingwindow() {
  _has_bits_[0] |= 0x00000008u;
}
void InstrCfgData::clear_has_mktrollingwindow() {
  _has_bits_[0] &= ~0x00000008u;
}
void InstrCfgData::clear_mktrollingwindow() {
  mktrollingwindow_ = 30;
  clear_has_mktrollingwindow();
}
 ::google::protobuf::int32 InstrCfgData::mktrollingwindow() const {
  // @@protoc_insertion_point(field_get:XT.InstrCfgData.mktrollingwindow)
  return mktrollingwindow_;
}
 void InstrCfgData::set_mktrollingwindow(::google::protobuf::int32 value) {
  set_has_mktrollingwindow();
  mktrollingwindow_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrCfgData.mktrollingwindow)
}

// map<string, string> namestrmap = 30;
int InstrCfgData::namestrmap_size() const {
  return namestrmap_.size();
}
void InstrCfgData::clear_namestrmap() {
  namestrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
InstrCfgData::namestrmap() const {
  // @@protoc_insertion_point(field_map:XT.InstrCfgData.namestrmap)
  return namestrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
InstrCfgData::mutable_namestrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.InstrCfgData.namestrmap)
  return namestrmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrData::kTagdoublemapFieldNumber;
const int InstrData::kTagintmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrData::InstrData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.InstrData)
}

void InstrData::InitAsDefaultInstance() {
}

InstrData::InstrData(const InstrData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.InstrData)
}

void InstrData::SharedCtor() {
  _cached_size_ = 0;
  tagdoublemap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagdoublemap_.SetEntryDescriptor(
      &::XT::InstrData_TagdoublemapEntry_descriptor_);
  tagintmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagintmap_.SetEntryDescriptor(
      &::XT::InstrData_TagintmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrData::~InstrData() {
  // @@protoc_insertion_point(destructor:XT.InstrData)
  SharedDtor();
}

void InstrData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrData_descriptor_;
}

const InstrData& InstrData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

InstrData* InstrData::default_instance_ = NULL;

InstrData* InstrData::New(::google::protobuf::Arena* arena) const {
  InstrData* n = new InstrData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstrData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.InstrData)
  tagdoublemap_.Clear();
  tagintmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InstrData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.InstrData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, double> tagdoublemap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagdoublemap:
          InstrData_TagdoublemapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&tagdoublemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tagdoublemap;
        if (input->ExpectTag(18)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, int32> tagintmap = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagintmap:
          InstrData_TagintmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&tagintmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.InstrData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.InstrData)
  return false;
#undef DO_
}

void InstrData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.InstrData)
  // map<int32, double> tagdoublemap = 1;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // map<int32, int32> tagintmap = 2;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.InstrData)
}

::google::protobuf::uint8* InstrData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.InstrData)
  // map<int32, double> tagdoublemap = 1;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int32> tagintmap = 2;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InstrData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<InstrData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.InstrData)
  return target;
}

int InstrData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.InstrData)
  int total_size = 0;

  // map<int32, double> tagdoublemap = 1;
  total_size += 1 * this->tagdoublemap_size();
  {
    ::google::protobuf::scoped_ptr<InstrData_TagdoublemapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->tagdoublemap().begin();
        it != this->tagdoublemap().end(); ++it) {
      entry.reset(tagdoublemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int32> tagintmap = 2;
  total_size += 1 * this->tagintmap_size();
  {
    ::google::protobuf::scoped_ptr<InstrData_TagintmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->tagintmap().begin();
        it != this->tagintmap().end(); ++it) {
      entry.reset(tagintmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.InstrData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstrData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstrData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.InstrData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.InstrData)
    MergeFrom(*source);
  }
}

void InstrData::MergeFrom(const InstrData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.InstrData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tagdoublemap_.MergeFrom(from.tagdoublemap_);
  tagintmap_.MergeFrom(from.tagintmap_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InstrData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.InstrData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrData::CopyFrom(const InstrData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.InstrData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrData::IsInitialized() const {

  return true;
}

void InstrData::Swap(InstrData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrData::InternalSwap(InstrData* other) {
  tagdoublemap_.Swap(&other->tagdoublemap_);
  tagintmap_.Swap(&other->tagintmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstrData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrData_descriptor_;
  metadata.reflection = InstrData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstrData

// map<int32, double> tagdoublemap = 1;
int InstrData::tagdoublemap_size() const {
  return tagdoublemap_.size();
}
void InstrData::clear_tagdoublemap() {
  tagdoublemap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
InstrData::tagdoublemap() const {
  // @@protoc_insertion_point(field_map:XT.InstrData.tagdoublemap)
  return tagdoublemap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
InstrData::mutable_tagdoublemap() {
  // @@protoc_insertion_point(field_mutable_map:XT.InstrData.tagdoublemap)
  return tagdoublemap_.MutableMap();
}

// map<int32, int32> tagintmap = 2;
int InstrData::tagintmap_size() const {
  return tagintmap_.size();
}
void InstrData::clear_tagintmap() {
  tagintmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
InstrData::tagintmap() const {
  // @@protoc_insertion_point(field_map:XT.InstrData.tagintmap)
  return tagintmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
InstrData::mutable_tagintmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.InstrData.tagintmap)
  return tagintmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCCfgData::kDeltanormmaxFieldNumber;
const int FCCfgData::kNamestrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCCfgData::FCCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.FCCfgData)
}

void FCCfgData::InitAsDefaultInstance() {
}

FCCfgData::FCCfgData(const FCCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.FCCfgData)
}

void FCCfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deltanormmax_ = 0;
  namestrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  namestrmap_.SetEntryDescriptor(
      &::XT::FCCfgData_NamestrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FCCfgData::~FCCfgData() {
  // @@protoc_insertion_point(destructor:XT.FCCfgData)
  SharedDtor();
}

void FCCfgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FCCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCCfgData_descriptor_;
}

const FCCfgData& FCCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

FCCfgData* FCCfgData::default_instance_ = NULL;

FCCfgData* FCCfgData::New(::google::protobuf::Arena* arena) const {
  FCCfgData* n = new FCCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.FCCfgData)
  deltanormmax_ = 0;
  namestrmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FCCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.FCCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double deltanormmax = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltanormmax_)));
          set_has_deltanormmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_namestrmap;
        break;
      }

      // map<string, string> namestrmap = 30;
      case 30: {
        if (tag == 242) {
         parse_namestrmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_namestrmap:
          FCCfgData_NamestrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&namestrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.FCCfgData.NamestrmapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.FCCfgData.NamestrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_namestrmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.FCCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.FCCfgData)
  return false;
#undef DO_
}

void FCCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.FCCfgData)
  // optional double deltanormmax = 1 [default = 0];
  if (has_deltanormmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->deltanormmax(), output);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.FCCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.FCCfgData.NamestrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FCCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FCCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.FCCfgData)
}

::google::protobuf::uint8* FCCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.FCCfgData)
  // optional double deltanormmax = 1 [default = 0];
  if (has_deltanormmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->deltanormmax(), target);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.FCCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.FCCfgData.NamestrmapEntry.value");
      }
    };

    if (deterministic &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FCCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FCCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.FCCfgData)
  return target;
}

int FCCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.FCCfgData)
  int total_size = 0;

  // optional double deltanormmax = 1 [default = 0];
  if (has_deltanormmax()) {
    total_size += 1 + 8;
  }

  // map<string, string> namestrmap = 30;
  total_size += 2 * this->namestrmap_size();
  {
    ::google::protobuf::scoped_ptr<FCCfgData_NamestrmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->namestrmap().begin();
        it != this->namestrmap().end(); ++it) {
      entry.reset(namestrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.FCCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FCCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FCCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.FCCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.FCCfgData)
    MergeFrom(*source);
  }
}

void FCCfgData::MergeFrom(const FCCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.FCCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  namestrmap_.MergeFrom(from.namestrmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deltanormmax()) {
      set_deltanormmax(from.deltanormmax());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FCCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.FCCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCCfgData::CopyFrom(const FCCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.FCCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCCfgData::IsInitialized() const {

  return true;
}

void FCCfgData::Swap(FCCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCCfgData::InternalSwap(FCCfgData* other) {
  std::swap(deltanormmax_, other->deltanormmax_);
  namestrmap_.Swap(&other->namestrmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FCCfgData_descriptor_;
  metadata.reflection = FCCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCCfgData

// optional double deltanormmax = 1 [default = 0];
bool FCCfgData::has_deltanormmax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCCfgData::set_has_deltanormmax() {
  _has_bits_[0] |= 0x00000001u;
}
void FCCfgData::clear_has_deltanormmax() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCCfgData::clear_deltanormmax() {
  deltanormmax_ = 0;
  clear_has_deltanormmax();
}
 double FCCfgData::deltanormmax() const {
  // @@protoc_insertion_point(field_get:XT.FCCfgData.deltanormmax)
  return deltanormmax_;
}
 void FCCfgData::set_deltanormmax(double value) {
  set_has_deltanormmax();
  deltanormmax_ = value;
  // @@protoc_insertion_point(field_set:XT.FCCfgData.deltanormmax)
}

// map<string, string> namestrmap = 30;
int FCCfgData::namestrmap_size() const {
  return namestrmap_.size();
}
void FCCfgData::clear_namestrmap() {
  namestrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
FCCfgData::namestrmap() const {
  // @@protoc_insertion_point(field_map:XT.FCCfgData.namestrmap)
  return namestrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
FCCfgData::mutable_namestrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.FCCfgData.namestrmap)
  return namestrmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCData::kNameFieldNumber;
const int FCData::kProductFieldNumber;
const int FCData::kTagdoublemapFieldNumber;
const int FCData::kTagintmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCData::FCData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.FCData)
}

void FCData::InitAsDefaultInstance() {
}

FCData::FCData(const FCData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.FCData)
}

void FCData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagdoublemap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagdoublemap_.SetEntryDescriptor(
      &::XT::FCData_TagdoublemapEntry_descriptor_);
  tagintmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagintmap_.SetEntryDescriptor(
      &::XT::FCData_TagintmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FCData::~FCData() {
  // @@protoc_insertion_point(destructor:XT.FCData)
  SharedDtor();
}

void FCData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FCData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCData_descriptor_;
}

const FCData& FCData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

FCData* FCData::default_instance_ = NULL;

FCData* FCData::New(::google::protobuf::Arena* arena) const {
  FCData* n = new FCData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.FCData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_product()) {
      product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  tagdoublemap_.Clear();
  tagintmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FCData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.FCData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.FCData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }

      // optional string product = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.FCData.product");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tagdoublemap;
        break;
      }

      // map<int32, double> tagdoublemap = 3;
      case 3: {
        if (tag == 26) {
         parse_tagdoublemap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagdoublemap:
          FCData_TagdoublemapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&tagdoublemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_tagdoublemap;
        if (input->ExpectTag(34)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, int32> tagintmap = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagintmap:
          FCData_TagintmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&tagintmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.FCData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.FCData)
  return false;
#undef DO_
}

void FCData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.FCData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.FCData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string product = 2 [default = ""];
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.FCData.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product(), output);
  }

  // map<int32, double> tagdoublemap = 3;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FCData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FCData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // map<int32, int32> tagintmap = 4;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FCData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FCData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.FCData)
}

::google::protobuf::uint8* FCData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.FCData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.FCData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string product = 2 [default = ""];
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.FCData.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product(), target);
  }

  // map<int32, double> tagdoublemap = 3;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FCData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FCData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int32> tagintmap = 4;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FCData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FCData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.FCData)
  return target;
}

int FCData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.FCData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string product = 2 [default = ""];
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

  }
  // map<int32, double> tagdoublemap = 3;
  total_size += 1 * this->tagdoublemap_size();
  {
    ::google::protobuf::scoped_ptr<FCData_TagdoublemapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->tagdoublemap().begin();
        it != this->tagdoublemap().end(); ++it) {
      entry.reset(tagdoublemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int32> tagintmap = 4;
  total_size += 1 * this->tagintmap_size();
  {
    ::google::protobuf::scoped_ptr<FCData_TagintmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->tagintmap().begin();
        it != this->tagintmap().end(); ++it) {
      entry.reset(tagintmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.FCData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FCData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FCData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.FCData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.FCData)
    MergeFrom(*source);
  }
}

void FCData::MergeFrom(const FCData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.FCData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tagdoublemap_.MergeFrom(from.tagdoublemap_);
  tagintmap_.MergeFrom(from.tagintmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_product()) {
      set_has_product();
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FCData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.FCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCData::CopyFrom(const FCData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.FCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCData::IsInitialized() const {

  return true;
}

void FCData::Swap(FCData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCData::InternalSwap(FCData* other) {
  name_.Swap(&other->name_);
  product_.Swap(&other->product_);
  tagdoublemap_.Swap(&other->tagdoublemap_);
  tagintmap_.Swap(&other->tagintmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FCData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FCData_descriptor_;
  metadata.reflection = FCData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCData

// optional string name = 1 [default = ""];
bool FCData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FCData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FCData::name() const {
  // @@protoc_insertion_point(field_get:XT.FCData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FCData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.FCData.name)
}
 void FCData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.FCData.name)
}
 void FCData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.FCData.name)
}
 ::std::string* FCData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.FCData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FCData::release_name() {
  // @@protoc_insertion_point(field_release:XT.FCData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FCData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.FCData.name)
}

// optional string product = 2 [default = ""];
bool FCData::has_product() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCData::set_has_product() {
  _has_bits_[0] |= 0x00000002u;
}
void FCData::clear_has_product() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCData::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}
 const ::std::string& FCData::product() const {
  // @@protoc_insertion_point(field_get:XT.FCData.product)
  return product_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FCData::set_product(const ::std::string& value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.FCData.product)
}
 void FCData::set_product(const char* value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.FCData.product)
}
 void FCData::set_product(const char* value, size_t size) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.FCData.product)
}
 ::std::string* FCData::mutable_product() {
  set_has_product();
  // @@protoc_insertion_point(field_mutable:XT.FCData.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FCData::release_product() {
  // @@protoc_insertion_point(field_release:XT.FCData.product)
  clear_has_product();
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FCData::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    set_has_product();
  } else {
    clear_has_product();
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:XT.FCData.product)
}

// map<int32, double> tagdoublemap = 3;
int FCData::tagdoublemap_size() const {
  return tagdoublemap_.size();
}
void FCData::clear_tagdoublemap() {
  tagdoublemap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
FCData::tagdoublemap() const {
  // @@protoc_insertion_point(field_map:XT.FCData.tagdoublemap)
  return tagdoublemap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
FCData::mutable_tagdoublemap() {
  // @@protoc_insertion_point(field_mutable_map:XT.FCData.tagdoublemap)
  return tagdoublemap_.MutableMap();
}

// map<int32, int32> tagintmap = 4;
int FCData::tagintmap_size() const {
  return tagintmap_.size();
}
void FCData::clear_tagintmap() {
  tagintmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
FCData::tagintmap() const {
  // @@protoc_insertion_point(field_map:XT.FCData.tagintmap)
  return tagintmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
FCData::mutable_tagintmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.FCData.tagintmap)
  return tagintmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OCCfgData::kHedginginstrFieldNumber;
const int OCCfgData::kPxundlyinstrFieldNumber;
const int OCCfgData::kUndlyinstrFieldNumber;
const int OCCfgData::kPxundlyratioFieldNumber;
const int OCCfgData::kUndlybiasminFieldNumber;
const int OCCfgData::kUndlybiasmaxFieldNumber;
const int OCCfgData::kUndlybiascountminFieldNumber;
const int OCCfgData::kUndlybiasrollingszFieldNumber;
const int OCCfgData::kUndlybiasrollingtypeFieldNumber;
const int OCCfgData::kUndlybigmovethreshFieldNumber;
const int OCCfgData::kMinimpvolFieldNumber;
const int OCCfgData::kMaximpvolFieldNumber;
const int OCCfgData::kQuotingflagFieldNumber;
const int OCCfgData::kRspflagFieldNumber;
const int OCCfgData::kHedgingflagFieldNumber;
const int OCCfgData::kFitflagFieldNumber;
const int OCCfgData::kFitmethodFieldNumber;
const int OCCfgData::kFitthreshticksFieldNumber;
const int OCCfgData::kJoinhedgethreshFieldNumber;
const int OCCfgData::kHithedgethreshFieldNumber;
const int OCCfgData::kSafehedgedistticksFieldNumber;
const int OCCfgData::kHedgedistticksFieldNumber;
const int OCCfgData::kMaxposFieldNumber;
const int OCCfgData::kOcmaxdeltanormFieldNumber;
const int OCCfgData::kOctgtdeltanormFieldNumber;
const int OCCfgData::kOcmaxvegaFieldNumber;
const int OCCfgData::kOctgtvegaFieldNumber;
const int OCCfgData::kQuotepxmethodFieldNumber;
const int OCCfgData::kMaxhitticksFieldNumber;
const int OCCfgData::kRcpFieldNumber;
const int OCCfgData::kRrpFieldNumber;
const int OCCfgData::kMinretreatratioFieldNumber;
const int OCCfgData::kMaxretreatratioFieldNumber;
const int OCCfgData::kLeanonmktratioFieldNumber;
const int OCCfgData::kPxchgthreshticksminFieldNumber;
const int OCCfgData::kPxchgthreshticksmaxFieldNumber;
const int OCCfgData::kPxchgthreshratioFieldNumber;
const int OCCfgData::kMinquoteszFieldNumber;
const int OCCfgData::kMinrspszFieldNumber;
const int OCCfgData::kUndlychgrollingszFieldNumber;
const int OCCfgData::kUndlychgrollingtypeFieldNumber;
const int OCCfgData::kVcrrollingszFieldNumber;
const int OCCfgData::kVcrrollingtypeFieldNumber;
const int OCCfgData::kNamestrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OCCfgData::OCCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OCCfgData)
}

void OCCfgData::InitAsDefaultInstance() {
}

OCCfgData::OCCfgData(const OCCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OCCfgData)
}

void OCCfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hedginginstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pxundlyinstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undlyinstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pxundlyratio_ = 1;
  undlybiasmin_ = -100;
  undlybiasmax_ = 100;
  undlybiascountmin_ = 30;
  undlybiasrollingsz_ = 300;
  undlybiasrollingtype_ = 0;
  undlybigmovethresh_ = 0;
  minimpvol_ = 0.05;
  maximpvol_ = 0.5;
  quotingflag_ = 0;
  rspflag_ = 1;
  hedgingflag_ = 0;
  fitflag_ = 0;
  fitmethod_ = 0;
  fitthreshticks_ = 10;
  joinhedgethresh_ = 1;
  hithedgethresh_ = 5;
  safehedgedistticks_ = 5;
  hedgedistticks_ = 1;
  maxpos_ = 10;
  ocmaxdeltanorm_ = 10;
  octgtdeltanorm_ = 0;
  ocmaxvega_ = 10000;
  octgtvega_ = 0;
  quotepxmethod_ = 0;
  maxhitticks_ = 0;
  rcp_ = 0.5;
  rrp_ = 0.8;
  minretreatratio_ = 0.2;
  maxretreatratio_ = 2;
  leanonmktratio_ = 0.75;
  pxchgthreshticksmin_ = 1;
  pxchgthreshticksmax_ = 10;
  pxchgthreshratio_ = 0.2;
  minquotesz_ = 1;
  minrspsz_ = 1;
  undlychgrollingsz_ = 36;
  undlychgrollingtype_ = 0;
  vcrrollingsz_ = 300;
  vcrrollingtype_ = 0;
  namestrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  namestrmap_.SetEntryDescriptor(
      &::XT::OCCfgData_NamestrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OCCfgData::~OCCfgData() {
  // @@protoc_insertion_point(destructor:XT.OCCfgData)
  SharedDtor();
}

void OCCfgData::SharedDtor() {
  hedginginstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pxundlyinstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undlyinstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OCCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OCCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OCCfgData_descriptor_;
}

const OCCfgData& OCCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OCCfgData* OCCfgData::default_instance_ = NULL;

OCCfgData* OCCfgData::New(::google::protobuf::Arena* arena) const {
  OCCfgData* n = new OCCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OCCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OCCfgData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OCCfgData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OCCfgData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_hedginginstr()) {
      hedginginstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pxundlyinstr()) {
      pxundlyinstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_undlyinstr()) {
      undlyinstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pxundlyratio_ = 1;
    undlybiasmin_ = -100;
    undlybiasmax_ = 100;
    undlybiascountmin_ = 30;
    undlybiasrollingsz_ = 300;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(undlybiasrollingtype_, quotingflag_);
    ZR_(hedgingflag_, fitflag_);
    undlybigmovethresh_ = 0;
    minimpvol_ = 0.05;
    maximpvol_ = 0.5;
    rspflag_ = 1;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    fitmethod_ = 0;
    fitthreshticks_ = 10;
    joinhedgethresh_ = 1;
    hithedgethresh_ = 5;
    safehedgedistticks_ = 5;
    hedgedistticks_ = 1;
    maxpos_ = 10;
    ocmaxdeltanorm_ = 10;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    octgtdeltanorm_ = 0;
    ocmaxvega_ = 10000;
    octgtvega_ = 0;
    quotepxmethod_ = 0;
    maxhitticks_ = 0;
    rcp_ = 0.5;
    rrp_ = 0.8;
    minretreatratio_ = 0.2;
  }
  if (_has_bits_[32 / 32] & 255u) {
    maxretreatratio_ = 2;
    leanonmktratio_ = 0.75;
    pxchgthreshticksmin_ = 1;
    pxchgthreshticksmax_ = 10;
    pxchgthreshratio_ = 0.2;
    minquotesz_ = 1;
    minrspsz_ = 1;
    undlychgrollingsz_ = 36;
  }
  if (_has_bits_[40 / 32] & 1792u) {
    undlychgrollingtype_ = 0;
    vcrrollingsz_ = 300;
    vcrrollingtype_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  namestrmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OCCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OCCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hedginginstr = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hedginginstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hedginginstr().data(), this->hedginginstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OCCfgData.hedginginstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pxundlyinstr;
        break;
      }

      // optional string pxundlyinstr = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_pxundlyinstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pxundlyinstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pxundlyinstr().data(), this->pxundlyinstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OCCfgData.pxundlyinstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_undlyinstr;
        break;
      }

      // optional string undlyinstr = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_undlyinstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_undlyinstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->undlyinstr().data(), this->undlyinstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OCCfgData.undlyinstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pxundlyratio;
        break;
      }

      // optional double pxundlyratio = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_pxundlyratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pxundlyratio_)));
          set_has_pxundlyratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_undlybiasmin;
        break;
      }

      // optional double undlybiasmin = 5 [default = -100];
      case 5: {
        if (tag == 41) {
         parse_undlybiasmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &undlybiasmin_)));
          set_has_undlybiasmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_undlybiasmax;
        break;
      }

      // optional double undlybiasmax = 6 [default = 100];
      case 6: {
        if (tag == 49) {
         parse_undlybiasmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &undlybiasmax_)));
          set_has_undlybiasmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_undlybiascountmin;
        break;
      }

      // optional int32 undlybiascountmin = 7 [default = 30];
      case 7: {
        if (tag == 56) {
         parse_undlybiascountmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undlybiascountmin_)));
          set_has_undlybiascountmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_undlybiasrollingsz;
        break;
      }

      // optional int32 undlybiasrollingsz = 8 [default = 300];
      case 8: {
        if (tag == 64) {
         parse_undlybiasrollingsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undlybiasrollingsz_)));
          set_has_undlybiasrollingsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_undlybiasrollingtype;
        break;
      }

      // optional int32 undlybiasrollingtype = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_undlybiasrollingtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undlybiasrollingtype_)));
          set_has_undlybiasrollingtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_undlybigmovethresh;
        break;
      }

      // optional double undlybigmovethresh = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_undlybigmovethresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &undlybigmovethresh_)));
          set_has_undlybigmovethresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_minimpvol;
        break;
      }

      // optional double minimpvol = 11 [default = 0.05];
      case 11: {
        if (tag == 89) {
         parse_minimpvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimpvol_)));
          set_has_minimpvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_maximpvol;
        break;
      }

      // optional double maximpvol = 12 [default = 0.5];
      case 12: {
        if (tag == 97) {
         parse_maximpvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximpvol_)));
          set_has_maximpvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_quotingflag;
        break;
      }

      // optional int32 quotingflag = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_quotingflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotingflag_)));
          set_has_quotingflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_rspflag;
        break;
      }

      // optional int32 rspflag = 16 [default = 1];
      case 16: {
        if (tag == 128) {
         parse_rspflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rspflag_)));
          set_has_rspflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_hedgingflag;
        break;
      }

      // optional int32 hedgingflag = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_hedgingflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedgingflag_)));
          set_has_hedgingflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_fitflag;
        break;
      }

      // optional int32 fitflag = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_fitflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitflag_)));
          set_has_fitflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_fitmethod;
        break;
      }

      // optional int32 fitmethod = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_fitmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitmethod_)));
          set_has_fitmethod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_fitthreshticks;
        break;
      }

      // optional double fitthreshticks = 20 [default = 10];
      case 20: {
        if (tag == 161) {
         parse_fitthreshticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fitthreshticks_)));
          set_has_fitthreshticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_joinhedgethresh;
        break;
      }

      // optional double joinhedgethresh = 21 [default = 1];
      case 21: {
        if (tag == 169) {
         parse_joinhedgethresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &joinhedgethresh_)));
          set_has_joinhedgethresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_hithedgethresh;
        break;
      }

      // optional double hithedgethresh = 22 [default = 5];
      case 22: {
        if (tag == 177) {
         parse_hithedgethresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hithedgethresh_)));
          set_has_hithedgethresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_safehedgedistticks;
        break;
      }

      // optional int32 safehedgedistticks = 23 [default = 5];
      case 23: {
        if (tag == 184) {
         parse_safehedgedistticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safehedgedistticks_)));
          set_has_safehedgedistticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_hedgedistticks;
        break;
      }

      // optional int32 hedgedistticks = 24 [default = 1];
      case 24: {
        if (tag == 192) {
         parse_hedgedistticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedgedistticks_)));
          set_has_hedgedistticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_maxpos;
        break;
      }

      // optional int32 maxpos = 26 [default = 10];
      case 26: {
        if (tag == 208) {
         parse_maxpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpos_)));
          set_has_maxpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_ocmaxdeltanorm;
        break;
      }

      // optional double ocmaxdeltanorm = 27 [default = 10];
      case 27: {
        if (tag == 217) {
         parse_ocmaxdeltanorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocmaxdeltanorm_)));
          set_has_ocmaxdeltanorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_octgtdeltanorm;
        break;
      }

      // optional double octgtdeltanorm = 28 [default = 0];
      case 28: {
        if (tag == 225) {
         parse_octgtdeltanorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &octgtdeltanorm_)));
          set_has_octgtdeltanorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_ocmaxvega;
        break;
      }

      // optional double ocmaxvega = 29 [default = 10000];
      case 29: {
        if (tag == 233) {
         parse_ocmaxvega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocmaxvega_)));
          set_has_ocmaxvega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_octgtvega;
        break;
      }

      // optional double octgtvega = 30 [default = 0];
      case 30: {
        if (tag == 241) {
         parse_octgtvega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &octgtvega_)));
          set_has_octgtvega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_quotepxmethod;
        break;
      }

      // optional int32 quotepxmethod = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_quotepxmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotepxmethod_)));
          set_has_quotepxmethod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_maxhitticks;
        break;
      }

      // optional int32 maxhitticks = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_maxhitticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhitticks_)));
          set_has_maxhitticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_rcp;
        break;
      }

      // optional double rcp = 33 [default = 0.5];
      case 33: {
        if (tag == 265) {
         parse_rcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcp_)));
          set_has_rcp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_rrp;
        break;
      }

      // optional double rrp = 34 [default = 0.8];
      case 34: {
        if (tag == 273) {
         parse_rrp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rrp_)));
          set_has_rrp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_minretreatratio;
        break;
      }

      // optional double minretreatratio = 35 [default = 0.2];
      case 35: {
        if (tag == 281) {
         parse_minretreatratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minretreatratio_)));
          set_has_minretreatratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_maxretreatratio;
        break;
      }

      // optional double maxretreatratio = 36 [default = 2];
      case 36: {
        if (tag == 289) {
         parse_maxretreatratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxretreatratio_)));
          set_has_maxretreatratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_leanonmktratio;
        break;
      }

      // optional double leanonmktratio = 37 [default = 0.75];
      case 37: {
        if (tag == 297) {
         parse_leanonmktratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leanonmktratio_)));
          set_has_leanonmktratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_pxchgthreshticksmin;
        break;
      }

      // optional int32 pxchgthreshticksmin = 38 [default = 1];
      case 38: {
        if (tag == 304) {
         parse_pxchgthreshticksmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pxchgthreshticksmin_)));
          set_has_pxchgthreshticksmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_pxchgthreshticksmax;
        break;
      }

      // optional int32 pxchgthreshticksmax = 39 [default = 10];
      case 39: {
        if (tag == 312) {
         parse_pxchgthreshticksmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pxchgthreshticksmax_)));
          set_has_pxchgthreshticksmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_pxchgthreshratio;
        break;
      }

      // optional double pxchgthreshratio = 40 [default = 0.2];
      case 40: {
        if (tag == 321) {
         parse_pxchgthreshratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pxchgthreshratio_)));
          set_has_pxchgthreshratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_minquotesz;
        break;
      }

      // optional int32 minquotesz = 41 [default = 1];
      case 41: {
        if (tag == 328) {
         parse_minquotesz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minquotesz_)));
          set_has_minquotesz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_minrspsz;
        break;
      }

      // optional int32 minrspsz = 42 [default = 1];
      case 42: {
        if (tag == 336) {
         parse_minrspsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minrspsz_)));
          set_has_minrspsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_undlychgrollingsz;
        break;
      }

      // optional int32 undlychgrollingsz = 50 [default = 36];
      case 50: {
        if (tag == 400) {
         parse_undlychgrollingsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undlychgrollingsz_)));
          set_has_undlychgrollingsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_undlychgrollingtype;
        break;
      }

      // optional int32 undlychgrollingtype = 51 [default = 0];
      case 51: {
        if (tag == 408) {
         parse_undlychgrollingtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undlychgrollingtype_)));
          set_has_undlychgrollingtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_vcrrollingsz;
        break;
      }

      // optional int32 vcrrollingsz = 52 [default = 300];
      case 52: {
        if (tag == 416) {
         parse_vcrrollingsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcrrollingsz_)));
          set_has_vcrrollingsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_vcrrollingtype;
        break;
      }

      // optional int32 vcrrollingtype = 53 [default = 0];
      case 53: {
        if (tag == 424) {
         parse_vcrrollingtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcrrollingtype_)));
          set_has_vcrrollingtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_namestrmap;
        break;
      }

      // map<string, string> namestrmap = 80;
      case 80: {
        if (tag == 642) {
         parse_namestrmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_namestrmap:
          OCCfgData_NamestrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&namestrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OCCfgData.NamestrmapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OCCfgData.NamestrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_loop_namestrmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OCCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OCCfgData)
  return false;
#undef DO_
}

void OCCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OCCfgData)
  // optional string hedginginstr = 1 [default = ""];
  if (has_hedginginstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hedginginstr().data(), this->hedginginstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCCfgData.hedginginstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hedginginstr(), output);
  }

  // optional string pxundlyinstr = 2 [default = ""];
  if (has_pxundlyinstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pxundlyinstr().data(), this->pxundlyinstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCCfgData.pxundlyinstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pxundlyinstr(), output);
  }

  // optional string undlyinstr = 3 [default = ""];
  if (has_undlyinstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->undlyinstr().data(), this->undlyinstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCCfgData.undlyinstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->undlyinstr(), output);
  }

  // optional double pxundlyratio = 4 [default = 1];
  if (has_pxundlyratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pxundlyratio(), output);
  }

  // optional double undlybiasmin = 5 [default = -100];
  if (has_undlybiasmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->undlybiasmin(), output);
  }

  // optional double undlybiasmax = 6 [default = 100];
  if (has_undlybiasmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->undlybiasmax(), output);
  }

  // optional int32 undlybiascountmin = 7 [default = 30];
  if (has_undlybiascountmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->undlybiascountmin(), output);
  }

  // optional int32 undlybiasrollingsz = 8 [default = 300];
  if (has_undlybiasrollingsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->undlybiasrollingsz(), output);
  }

  // optional int32 undlybiasrollingtype = 9 [default = 0];
  if (has_undlybiasrollingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->undlybiasrollingtype(), output);
  }

  // optional double undlybigmovethresh = 10 [default = 0];
  if (has_undlybigmovethresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->undlybigmovethresh(), output);
  }

  // optional double minimpvol = 11 [default = 0.05];
  if (has_minimpvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->minimpvol(), output);
  }

  // optional double maximpvol = 12 [default = 0.5];
  if (has_maximpvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->maximpvol(), output);
  }

  // optional int32 quotingflag = 15 [default = 0];
  if (has_quotingflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->quotingflag(), output);
  }

  // optional int32 rspflag = 16 [default = 1];
  if (has_rspflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->rspflag(), output);
  }

  // optional int32 hedgingflag = 17 [default = 0];
  if (has_hedgingflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hedgingflag(), output);
  }

  // optional int32 fitflag = 18 [default = 0];
  if (has_fitflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->fitflag(), output);
  }

  // optional int32 fitmethod = 19 [default = 0];
  if (has_fitmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fitmethod(), output);
  }

  // optional double fitthreshticks = 20 [default = 10];
  if (has_fitthreshticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->fitthreshticks(), output);
  }

  // optional double joinhedgethresh = 21 [default = 1];
  if (has_joinhedgethresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->joinhedgethresh(), output);
  }

  // optional double hithedgethresh = 22 [default = 5];
  if (has_hithedgethresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->hithedgethresh(), output);
  }

  // optional int32 safehedgedistticks = 23 [default = 5];
  if (has_safehedgedistticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->safehedgedistticks(), output);
  }

  // optional int32 hedgedistticks = 24 [default = 1];
  if (has_hedgedistticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->hedgedistticks(), output);
  }

  // optional int32 maxpos = 26 [default = 10];
  if (has_maxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->maxpos(), output);
  }

  // optional double ocmaxdeltanorm = 27 [default = 10];
  if (has_ocmaxdeltanorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->ocmaxdeltanorm(), output);
  }

  // optional double octgtdeltanorm = 28 [default = 0];
  if (has_octgtdeltanorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->octgtdeltanorm(), output);
  }

  // optional double ocmaxvega = 29 [default = 10000];
  if (has_ocmaxvega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->ocmaxvega(), output);
  }

  // optional double octgtvega = 30 [default = 0];
  if (has_octgtvega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->octgtvega(), output);
  }

  // optional int32 quotepxmethod = 31 [default = 0];
  if (has_quotepxmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->quotepxmethod(), output);
  }

  // optional int32 maxhitticks = 32 [default = 0];
  if (has_maxhitticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->maxhitticks(), output);
  }

  // optional double rcp = 33 [default = 0.5];
  if (has_rcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->rcp(), output);
  }

  // optional double rrp = 34 [default = 0.8];
  if (has_rrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->rrp(), output);
  }

  // optional double minretreatratio = 35 [default = 0.2];
  if (has_minretreatratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->minretreatratio(), output);
  }

  // optional double maxretreatratio = 36 [default = 2];
  if (has_maxretreatratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->maxretreatratio(), output);
  }

  // optional double leanonmktratio = 37 [default = 0.75];
  if (has_leanonmktratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->leanonmktratio(), output);
  }

  // optional int32 pxchgthreshticksmin = 38 [default = 1];
  if (has_pxchgthreshticksmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->pxchgthreshticksmin(), output);
  }

  // optional int32 pxchgthreshticksmax = 39 [default = 10];
  if (has_pxchgthreshticksmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->pxchgthreshticksmax(), output);
  }

  // optional double pxchgthreshratio = 40 [default = 0.2];
  if (has_pxchgthreshratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->pxchgthreshratio(), output);
  }

  // optional int32 minquotesz = 41 [default = 1];
  if (has_minquotesz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->minquotesz(), output);
  }

  // optional int32 minrspsz = 42 [default = 1];
  if (has_minrspsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->minrspsz(), output);
  }

  // optional int32 undlychgrollingsz = 50 [default = 36];
  if (has_undlychgrollingsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->undlychgrollingsz(), output);
  }

  // optional int32 undlychgrollingtype = 51 [default = 0];
  if (has_undlychgrollingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->undlychgrollingtype(), output);
  }

  // optional int32 vcrrollingsz = 52 [default = 300];
  if (has_vcrrollingsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->vcrrollingsz(), output);
  }

  // optional int32 vcrrollingtype = 53 [default = 0];
  if (has_vcrrollingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->vcrrollingtype(), output);
  }

  // map<string, string> namestrmap = 80;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.OCCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.OCCfgData.NamestrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OCCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            80, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OCCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            80, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OCCfgData)
}

::google::protobuf::uint8* OCCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OCCfgData)
  // optional string hedginginstr = 1 [default = ""];
  if (has_hedginginstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hedginginstr().data(), this->hedginginstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCCfgData.hedginginstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hedginginstr(), target);
  }

  // optional string pxundlyinstr = 2 [default = ""];
  if (has_pxundlyinstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pxundlyinstr().data(), this->pxundlyinstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCCfgData.pxundlyinstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pxundlyinstr(), target);
  }

  // optional string undlyinstr = 3 [default = ""];
  if (has_undlyinstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->undlyinstr().data(), this->undlyinstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCCfgData.undlyinstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->undlyinstr(), target);
  }

  // optional double pxundlyratio = 4 [default = 1];
  if (has_pxundlyratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pxundlyratio(), target);
  }

  // optional double undlybiasmin = 5 [default = -100];
  if (has_undlybiasmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->undlybiasmin(), target);
  }

  // optional double undlybiasmax = 6 [default = 100];
  if (has_undlybiasmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->undlybiasmax(), target);
  }

  // optional int32 undlybiascountmin = 7 [default = 30];
  if (has_undlybiascountmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->undlybiascountmin(), target);
  }

  // optional int32 undlybiasrollingsz = 8 [default = 300];
  if (has_undlybiasrollingsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->undlybiasrollingsz(), target);
  }

  // optional int32 undlybiasrollingtype = 9 [default = 0];
  if (has_undlybiasrollingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->undlybiasrollingtype(), target);
  }

  // optional double undlybigmovethresh = 10 [default = 0];
  if (has_undlybigmovethresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->undlybigmovethresh(), target);
  }

  // optional double minimpvol = 11 [default = 0.05];
  if (has_minimpvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->minimpvol(), target);
  }

  // optional double maximpvol = 12 [default = 0.5];
  if (has_maximpvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->maximpvol(), target);
  }

  // optional int32 quotingflag = 15 [default = 0];
  if (has_quotingflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->quotingflag(), target);
  }

  // optional int32 rspflag = 16 [default = 1];
  if (has_rspflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->rspflag(), target);
  }

  // optional int32 hedgingflag = 17 [default = 0];
  if (has_hedgingflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hedgingflag(), target);
  }

  // optional int32 fitflag = 18 [default = 0];
  if (has_fitflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->fitflag(), target);
  }

  // optional int32 fitmethod = 19 [default = 0];
  if (has_fitmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fitmethod(), target);
  }

  // optional double fitthreshticks = 20 [default = 10];
  if (has_fitthreshticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->fitthreshticks(), target);
  }

  // optional double joinhedgethresh = 21 [default = 1];
  if (has_joinhedgethresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->joinhedgethresh(), target);
  }

  // optional double hithedgethresh = 22 [default = 5];
  if (has_hithedgethresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->hithedgethresh(), target);
  }

  // optional int32 safehedgedistticks = 23 [default = 5];
  if (has_safehedgedistticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->safehedgedistticks(), target);
  }

  // optional int32 hedgedistticks = 24 [default = 1];
  if (has_hedgedistticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->hedgedistticks(), target);
  }

  // optional int32 maxpos = 26 [default = 10];
  if (has_maxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->maxpos(), target);
  }

  // optional double ocmaxdeltanorm = 27 [default = 10];
  if (has_ocmaxdeltanorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->ocmaxdeltanorm(), target);
  }

  // optional double octgtdeltanorm = 28 [default = 0];
  if (has_octgtdeltanorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->octgtdeltanorm(), target);
  }

  // optional double ocmaxvega = 29 [default = 10000];
  if (has_ocmaxvega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->ocmaxvega(), target);
  }

  // optional double octgtvega = 30 [default = 0];
  if (has_octgtvega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->octgtvega(), target);
  }

  // optional int32 quotepxmethod = 31 [default = 0];
  if (has_quotepxmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->quotepxmethod(), target);
  }

  // optional int32 maxhitticks = 32 [default = 0];
  if (has_maxhitticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->maxhitticks(), target);
  }

  // optional double rcp = 33 [default = 0.5];
  if (has_rcp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->rcp(), target);
  }

  // optional double rrp = 34 [default = 0.8];
  if (has_rrp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->rrp(), target);
  }

  // optional double minretreatratio = 35 [default = 0.2];
  if (has_minretreatratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->minretreatratio(), target);
  }

  // optional double maxretreatratio = 36 [default = 2];
  if (has_maxretreatratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->maxretreatratio(), target);
  }

  // optional double leanonmktratio = 37 [default = 0.75];
  if (has_leanonmktratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->leanonmktratio(), target);
  }

  // optional int32 pxchgthreshticksmin = 38 [default = 1];
  if (has_pxchgthreshticksmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->pxchgthreshticksmin(), target);
  }

  // optional int32 pxchgthreshticksmax = 39 [default = 10];
  if (has_pxchgthreshticksmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->pxchgthreshticksmax(), target);
  }

  // optional double pxchgthreshratio = 40 [default = 0.2];
  if (has_pxchgthreshratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->pxchgthreshratio(), target);
  }

  // optional int32 minquotesz = 41 [default = 1];
  if (has_minquotesz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->minquotesz(), target);
  }

  // optional int32 minrspsz = 42 [default = 1];
  if (has_minrspsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->minrspsz(), target);
  }

  // optional int32 undlychgrollingsz = 50 [default = 36];
  if (has_undlychgrollingsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->undlychgrollingsz(), target);
  }

  // optional int32 undlychgrollingtype = 51 [default = 0];
  if (has_undlychgrollingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->undlychgrollingtype(), target);
  }

  // optional int32 vcrrollingsz = 52 [default = 300];
  if (has_vcrrollingsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->vcrrollingsz(), target);
  }

  // optional int32 vcrrollingtype = 53 [default = 0];
  if (has_vcrrollingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->vcrrollingtype(), target);
  }

  // map<string, string> namestrmap = 80;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.OCCfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.OCCfgData.NamestrmapEntry.value");
      }
    };

    if (deterministic &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OCCfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       80, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OCCfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       80, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OCCfgData)
  return target;
}

int OCCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OCCfgData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string hedginginstr = 1 [default = ""];
    if (has_hedginginstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hedginginstr());
    }

    // optional string pxundlyinstr = 2 [default = ""];
    if (has_pxundlyinstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pxundlyinstr());
    }

    // optional string undlyinstr = 3 [default = ""];
    if (has_undlyinstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->undlyinstr());
    }

    // optional double pxundlyratio = 4 [default = 1];
    if (has_pxundlyratio()) {
      total_size += 1 + 8;
    }

    // optional double undlybiasmin = 5 [default = -100];
    if (has_undlybiasmin()) {
      total_size += 1 + 8;
    }

    // optional double undlybiasmax = 6 [default = 100];
    if (has_undlybiasmax()) {
      total_size += 1 + 8;
    }

    // optional int32 undlybiascountmin = 7 [default = 30];
    if (has_undlybiascountmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undlybiascountmin());
    }

    // optional int32 undlybiasrollingsz = 8 [default = 300];
    if (has_undlybiasrollingsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undlybiasrollingsz());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 undlybiasrollingtype = 9 [default = 0];
    if (has_undlybiasrollingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undlybiasrollingtype());
    }

    // optional double undlybigmovethresh = 10 [default = 0];
    if (has_undlybigmovethresh()) {
      total_size += 1 + 8;
    }

    // optional double minimpvol = 11 [default = 0.05];
    if (has_minimpvol()) {
      total_size += 1 + 8;
    }

    // optional double maximpvol = 12 [default = 0.5];
    if (has_maximpvol()) {
      total_size += 1 + 8;
    }

    // optional int32 quotingflag = 15 [default = 0];
    if (has_quotingflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotingflag());
    }

    // optional int32 rspflag = 16 [default = 1];
    if (has_rspflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rspflag());
    }

    // optional int32 hedgingflag = 17 [default = 0];
    if (has_hedgingflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedgingflag());
    }

    // optional int32 fitflag = 18 [default = 0];
    if (has_fitflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fitflag());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 fitmethod = 19 [default = 0];
    if (has_fitmethod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fitmethod());
    }

    // optional double fitthreshticks = 20 [default = 10];
    if (has_fitthreshticks()) {
      total_size += 2 + 8;
    }

    // optional double joinhedgethresh = 21 [default = 1];
    if (has_joinhedgethresh()) {
      total_size += 2 + 8;
    }

    // optional double hithedgethresh = 22 [default = 5];
    if (has_hithedgethresh()) {
      total_size += 2 + 8;
    }

    // optional int32 safehedgedistticks = 23 [default = 5];
    if (has_safehedgedistticks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safehedgedistticks());
    }

    // optional int32 hedgedistticks = 24 [default = 1];
    if (has_hedgedistticks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedgedistticks());
    }

    // optional int32 maxpos = 26 [default = 10];
    if (has_maxpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpos());
    }

    // optional double ocmaxdeltanorm = 27 [default = 10];
    if (has_ocmaxdeltanorm()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double octgtdeltanorm = 28 [default = 0];
    if (has_octgtdeltanorm()) {
      total_size += 2 + 8;
    }

    // optional double ocmaxvega = 29 [default = 10000];
    if (has_ocmaxvega()) {
      total_size += 2 + 8;
    }

    // optional double octgtvega = 30 [default = 0];
    if (has_octgtvega()) {
      total_size += 2 + 8;
    }

    // optional int32 quotepxmethod = 31 [default = 0];
    if (has_quotepxmethod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotepxmethod());
    }

    // optional int32 maxhitticks = 32 [default = 0];
    if (has_maxhitticks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhitticks());
    }

    // optional double rcp = 33 [default = 0.5];
    if (has_rcp()) {
      total_size += 2 + 8;
    }

    // optional double rrp = 34 [default = 0.8];
    if (has_rrp()) {
      total_size += 2 + 8;
    }

    // optional double minretreatratio = 35 [default = 0.2];
    if (has_minretreatratio()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional double maxretreatratio = 36 [default = 2];
    if (has_maxretreatratio()) {
      total_size += 2 + 8;
    }

    // optional double leanonmktratio = 37 [default = 0.75];
    if (has_leanonmktratio()) {
      total_size += 2 + 8;
    }

    // optional int32 pxchgthreshticksmin = 38 [default = 1];
    if (has_pxchgthreshticksmin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pxchgthreshticksmin());
    }

    // optional int32 pxchgthreshticksmax = 39 [default = 10];
    if (has_pxchgthreshticksmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pxchgthreshticksmax());
    }

    // optional double pxchgthreshratio = 40 [default = 0.2];
    if (has_pxchgthreshratio()) {
      total_size += 2 + 8;
    }

    // optional int32 minquotesz = 41 [default = 1];
    if (has_minquotesz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minquotesz());
    }

    // optional int32 minrspsz = 42 [default = 1];
    if (has_minrspsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minrspsz());
    }

    // optional int32 undlychgrollingsz = 50 [default = 36];
    if (has_undlychgrollingsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undlychgrollingsz());
    }

  }
  if (_has_bits_[40 / 32] & 1792u) {
    // optional int32 undlychgrollingtype = 51 [default = 0];
    if (has_undlychgrollingtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undlychgrollingtype());
    }

    // optional int32 vcrrollingsz = 52 [default = 300];
    if (has_vcrrollingsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vcrrollingsz());
    }

    // optional int32 vcrrollingtype = 53 [default = 0];
    if (has_vcrrollingtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vcrrollingtype());
    }

  }
  // map<string, string> namestrmap = 80;
  total_size += 2 * this->namestrmap_size();
  {
    ::google::protobuf::scoped_ptr<OCCfgData_NamestrmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->namestrmap().begin();
        it != this->namestrmap().end(); ++it) {
      entry.reset(namestrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OCCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OCCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OCCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OCCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OCCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OCCfgData)
    MergeFrom(*source);
  }
}

void OCCfgData::MergeFrom(const OCCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OCCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  namestrmap_.MergeFrom(from.namestrmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hedginginstr()) {
      set_has_hedginginstr();
      hedginginstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hedginginstr_);
    }
    if (from.has_pxundlyinstr()) {
      set_has_pxundlyinstr();
      pxundlyinstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pxundlyinstr_);
    }
    if (from.has_undlyinstr()) {
      set_has_undlyinstr();
      undlyinstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.undlyinstr_);
    }
    if (from.has_pxundlyratio()) {
      set_pxundlyratio(from.pxundlyratio());
    }
    if (from.has_undlybiasmin()) {
      set_undlybiasmin(from.undlybiasmin());
    }
    if (from.has_undlybiasmax()) {
      set_undlybiasmax(from.undlybiasmax());
    }
    if (from.has_undlybiascountmin()) {
      set_undlybiascountmin(from.undlybiascountmin());
    }
    if (from.has_undlybiasrollingsz()) {
      set_undlybiasrollingsz(from.undlybiasrollingsz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_undlybiasrollingtype()) {
      set_undlybiasrollingtype(from.undlybiasrollingtype());
    }
    if (from.has_undlybigmovethresh()) {
      set_undlybigmovethresh(from.undlybigmovethresh());
    }
    if (from.has_minimpvol()) {
      set_minimpvol(from.minimpvol());
    }
    if (from.has_maximpvol()) {
      set_maximpvol(from.maximpvol());
    }
    if (from.has_quotingflag()) {
      set_quotingflag(from.quotingflag());
    }
    if (from.has_rspflag()) {
      set_rspflag(from.rspflag());
    }
    if (from.has_hedgingflag()) {
      set_hedgingflag(from.hedgingflag());
    }
    if (from.has_fitflag()) {
      set_fitflag(from.fitflag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fitmethod()) {
      set_fitmethod(from.fitmethod());
    }
    if (from.has_fitthreshticks()) {
      set_fitthreshticks(from.fitthreshticks());
    }
    if (from.has_joinhedgethresh()) {
      set_joinhedgethresh(from.joinhedgethresh());
    }
    if (from.has_hithedgethresh()) {
      set_hithedgethresh(from.hithedgethresh());
    }
    if (from.has_safehedgedistticks()) {
      set_safehedgedistticks(from.safehedgedistticks());
    }
    if (from.has_hedgedistticks()) {
      set_hedgedistticks(from.hedgedistticks());
    }
    if (from.has_maxpos()) {
      set_maxpos(from.maxpos());
    }
    if (from.has_ocmaxdeltanorm()) {
      set_ocmaxdeltanorm(from.ocmaxdeltanorm());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_octgtdeltanorm()) {
      set_octgtdeltanorm(from.octgtdeltanorm());
    }
    if (from.has_ocmaxvega()) {
      set_ocmaxvega(from.ocmaxvega());
    }
    if (from.has_octgtvega()) {
      set_octgtvega(from.octgtvega());
    }
    if (from.has_quotepxmethod()) {
      set_quotepxmethod(from.quotepxmethod());
    }
    if (from.has_maxhitticks()) {
      set_maxhitticks(from.maxhitticks());
    }
    if (from.has_rcp()) {
      set_rcp(from.rcp());
    }
    if (from.has_rrp()) {
      set_rrp(from.rrp());
    }
    if (from.has_minretreatratio()) {
      set_minretreatratio(from.minretreatratio());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_maxretreatratio()) {
      set_maxretreatratio(from.maxretreatratio());
    }
    if (from.has_leanonmktratio()) {
      set_leanonmktratio(from.leanonmktratio());
    }
    if (from.has_pxchgthreshticksmin()) {
      set_pxchgthreshticksmin(from.pxchgthreshticksmin());
    }
    if (from.has_pxchgthreshticksmax()) {
      set_pxchgthreshticksmax(from.pxchgthreshticksmax());
    }
    if (from.has_pxchgthreshratio()) {
      set_pxchgthreshratio(from.pxchgthreshratio());
    }
    if (from.has_minquotesz()) {
      set_minquotesz(from.minquotesz());
    }
    if (from.has_minrspsz()) {
      set_minrspsz(from.minrspsz());
    }
    if (from.has_undlychgrollingsz()) {
      set_undlychgrollingsz(from.undlychgrollingsz());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_undlychgrollingtype()) {
      set_undlychgrollingtype(from.undlychgrollingtype());
    }
    if (from.has_vcrrollingsz()) {
      set_vcrrollingsz(from.vcrrollingsz());
    }
    if (from.has_vcrrollingtype()) {
      set_vcrrollingtype(from.vcrrollingtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OCCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OCCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCCfgData::CopyFrom(const OCCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OCCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCCfgData::IsInitialized() const {

  return true;
}

void OCCfgData::Swap(OCCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OCCfgData::InternalSwap(OCCfgData* other) {
  hedginginstr_.Swap(&other->hedginginstr_);
  pxundlyinstr_.Swap(&other->pxundlyinstr_);
  undlyinstr_.Swap(&other->undlyinstr_);
  std::swap(pxundlyratio_, other->pxundlyratio_);
  std::swap(undlybiasmin_, other->undlybiasmin_);
  std::swap(undlybiasmax_, other->undlybiasmax_);
  std::swap(undlybiascountmin_, other->undlybiascountmin_);
  std::swap(undlybiasrollingsz_, other->undlybiasrollingsz_);
  std::swap(undlybiasrollingtype_, other->undlybiasrollingtype_);
  std::swap(undlybigmovethresh_, other->undlybigmovethresh_);
  std::swap(minimpvol_, other->minimpvol_);
  std::swap(maximpvol_, other->maximpvol_);
  std::swap(quotingflag_, other->quotingflag_);
  std::swap(rspflag_, other->rspflag_);
  std::swap(hedgingflag_, other->hedgingflag_);
  std::swap(fitflag_, other->fitflag_);
  std::swap(fitmethod_, other->fitmethod_);
  std::swap(fitthreshticks_, other->fitthreshticks_);
  std::swap(joinhedgethresh_, other->joinhedgethresh_);
  std::swap(hithedgethresh_, other->hithedgethresh_);
  std::swap(safehedgedistticks_, other->safehedgedistticks_);
  std::swap(hedgedistticks_, other->hedgedistticks_);
  std::swap(maxpos_, other->maxpos_);
  std::swap(ocmaxdeltanorm_, other->ocmaxdeltanorm_);
  std::swap(octgtdeltanorm_, other->octgtdeltanorm_);
  std::swap(ocmaxvega_, other->ocmaxvega_);
  std::swap(octgtvega_, other->octgtvega_);
  std::swap(quotepxmethod_, other->quotepxmethod_);
  std::swap(maxhitticks_, other->maxhitticks_);
  std::swap(rcp_, other->rcp_);
  std::swap(rrp_, other->rrp_);
  std::swap(minretreatratio_, other->minretreatratio_);
  std::swap(maxretreatratio_, other->maxretreatratio_);
  std::swap(leanonmktratio_, other->leanonmktratio_);
  std::swap(pxchgthreshticksmin_, other->pxchgthreshticksmin_);
  std::swap(pxchgthreshticksmax_, other->pxchgthreshticksmax_);
  std::swap(pxchgthreshratio_, other->pxchgthreshratio_);
  std::swap(minquotesz_, other->minquotesz_);
  std::swap(minrspsz_, other->minrspsz_);
  std::swap(undlychgrollingsz_, other->undlychgrollingsz_);
  std::swap(undlychgrollingtype_, other->undlychgrollingtype_);
  std::swap(vcrrollingsz_, other->vcrrollingsz_);
  std::swap(vcrrollingtype_, other->vcrrollingtype_);
  namestrmap_.Swap(&other->namestrmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OCCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OCCfgData_descriptor_;
  metadata.reflection = OCCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OCCfgData

// optional string hedginginstr = 1 [default = ""];
bool OCCfgData::has_hedginginstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OCCfgData::set_has_hedginginstr() {
  _has_bits_[0] |= 0x00000001u;
}
void OCCfgData::clear_has_hedginginstr() {
  _has_bits_[0] &= ~0x00000001u;
}
void OCCfgData::clear_hedginginstr() {
  hedginginstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hedginginstr();
}
 const ::std::string& OCCfgData::hedginginstr() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.hedginginstr)
  return hedginginstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCCfgData::set_hedginginstr(const ::std::string& value) {
  set_has_hedginginstr();
  hedginginstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.OCCfgData.hedginginstr)
}
 void OCCfgData::set_hedginginstr(const char* value) {
  set_has_hedginginstr();
  hedginginstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.OCCfgData.hedginginstr)
}
 void OCCfgData::set_hedginginstr(const char* value, size_t size) {
  set_has_hedginginstr();
  hedginginstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.OCCfgData.hedginginstr)
}
 ::std::string* OCCfgData::mutable_hedginginstr() {
  set_has_hedginginstr();
  // @@protoc_insertion_point(field_mutable:XT.OCCfgData.hedginginstr)
  return hedginginstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OCCfgData::release_hedginginstr() {
  // @@protoc_insertion_point(field_release:XT.OCCfgData.hedginginstr)
  clear_has_hedginginstr();
  return hedginginstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCCfgData::set_allocated_hedginginstr(::std::string* hedginginstr) {
  if (hedginginstr != NULL) {
    set_has_hedginginstr();
  } else {
    clear_has_hedginginstr();
  }
  hedginginstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedginginstr);
  // @@protoc_insertion_point(field_set_allocated:XT.OCCfgData.hedginginstr)
}

// optional string pxundlyinstr = 2 [default = ""];
bool OCCfgData::has_pxundlyinstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OCCfgData::set_has_pxundlyinstr() {
  _has_bits_[0] |= 0x00000002u;
}
void OCCfgData::clear_has_pxundlyinstr() {
  _has_bits_[0] &= ~0x00000002u;
}
void OCCfgData::clear_pxundlyinstr() {
  pxundlyinstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pxundlyinstr();
}
 const ::std::string& OCCfgData::pxundlyinstr() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.pxundlyinstr)
  return pxundlyinstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCCfgData::set_pxundlyinstr(const ::std::string& value) {
  set_has_pxundlyinstr();
  pxundlyinstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.OCCfgData.pxundlyinstr)
}
 void OCCfgData::set_pxundlyinstr(const char* value) {
  set_has_pxundlyinstr();
  pxundlyinstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.OCCfgData.pxundlyinstr)
}
 void OCCfgData::set_pxundlyinstr(const char* value, size_t size) {
  set_has_pxundlyinstr();
  pxundlyinstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.OCCfgData.pxundlyinstr)
}
 ::std::string* OCCfgData::mutable_pxundlyinstr() {
  set_has_pxundlyinstr();
  // @@protoc_insertion_point(field_mutable:XT.OCCfgData.pxundlyinstr)
  return pxundlyinstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OCCfgData::release_pxundlyinstr() {
  // @@protoc_insertion_point(field_release:XT.OCCfgData.pxundlyinstr)
  clear_has_pxundlyinstr();
  return pxundlyinstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCCfgData::set_allocated_pxundlyinstr(::std::string* pxundlyinstr) {
  if (pxundlyinstr != NULL) {
    set_has_pxundlyinstr();
  } else {
    clear_has_pxundlyinstr();
  }
  pxundlyinstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pxundlyinstr);
  // @@protoc_insertion_point(field_set_allocated:XT.OCCfgData.pxundlyinstr)
}

// optional string undlyinstr = 3 [default = ""];
bool OCCfgData::has_undlyinstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OCCfgData::set_has_undlyinstr() {
  _has_bits_[0] |= 0x00000004u;
}
void OCCfgData::clear_has_undlyinstr() {
  _has_bits_[0] &= ~0x00000004u;
}
void OCCfgData::clear_undlyinstr() {
  undlyinstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_undlyinstr();
}
 const ::std::string& OCCfgData::undlyinstr() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlyinstr)
  return undlyinstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCCfgData::set_undlyinstr(const ::std::string& value) {
  set_has_undlyinstr();
  undlyinstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlyinstr)
}
 void OCCfgData::set_undlyinstr(const char* value) {
  set_has_undlyinstr();
  undlyinstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.OCCfgData.undlyinstr)
}
 void OCCfgData::set_undlyinstr(const char* value, size_t size) {
  set_has_undlyinstr();
  undlyinstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.OCCfgData.undlyinstr)
}
 ::std::string* OCCfgData::mutable_undlyinstr() {
  set_has_undlyinstr();
  // @@protoc_insertion_point(field_mutable:XT.OCCfgData.undlyinstr)
  return undlyinstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OCCfgData::release_undlyinstr() {
  // @@protoc_insertion_point(field_release:XT.OCCfgData.undlyinstr)
  clear_has_undlyinstr();
  return undlyinstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCCfgData::set_allocated_undlyinstr(::std::string* undlyinstr) {
  if (undlyinstr != NULL) {
    set_has_undlyinstr();
  } else {
    clear_has_undlyinstr();
  }
  undlyinstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), undlyinstr);
  // @@protoc_insertion_point(field_set_allocated:XT.OCCfgData.undlyinstr)
}

// optional double pxundlyratio = 4 [default = 1];
bool OCCfgData::has_pxundlyratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OCCfgData::set_has_pxundlyratio() {
  _has_bits_[0] |= 0x00000008u;
}
void OCCfgData::clear_has_pxundlyratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void OCCfgData::clear_pxundlyratio() {
  pxundlyratio_ = 1;
  clear_has_pxundlyratio();
}
 double OCCfgData::pxundlyratio() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.pxundlyratio)
  return pxundlyratio_;
}
 void OCCfgData::set_pxundlyratio(double value) {
  set_has_pxundlyratio();
  pxundlyratio_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.pxundlyratio)
}

// optional double undlybiasmin = 5 [default = -100];
bool OCCfgData::has_undlybiasmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OCCfgData::set_has_undlybiasmin() {
  _has_bits_[0] |= 0x00000010u;
}
void OCCfgData::clear_has_undlybiasmin() {
  _has_bits_[0] &= ~0x00000010u;
}
void OCCfgData::clear_undlybiasmin() {
  undlybiasmin_ = -100;
  clear_has_undlybiasmin();
}
 double OCCfgData::undlybiasmin() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlybiasmin)
  return undlybiasmin_;
}
 void OCCfgData::set_undlybiasmin(double value) {
  set_has_undlybiasmin();
  undlybiasmin_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlybiasmin)
}

// optional double undlybiasmax = 6 [default = 100];
bool OCCfgData::has_undlybiasmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OCCfgData::set_has_undlybiasmax() {
  _has_bits_[0] |= 0x00000020u;
}
void OCCfgData::clear_has_undlybiasmax() {
  _has_bits_[0] &= ~0x00000020u;
}
void OCCfgData::clear_undlybiasmax() {
  undlybiasmax_ = 100;
  clear_has_undlybiasmax();
}
 double OCCfgData::undlybiasmax() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlybiasmax)
  return undlybiasmax_;
}
 void OCCfgData::set_undlybiasmax(double value) {
  set_has_undlybiasmax();
  undlybiasmax_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlybiasmax)
}

// optional int32 undlybiascountmin = 7 [default = 30];
bool OCCfgData::has_undlybiascountmin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OCCfgData::set_has_undlybiascountmin() {
  _has_bits_[0] |= 0x00000040u;
}
void OCCfgData::clear_has_undlybiascountmin() {
  _has_bits_[0] &= ~0x00000040u;
}
void OCCfgData::clear_undlybiascountmin() {
  undlybiascountmin_ = 30;
  clear_has_undlybiascountmin();
}
 ::google::protobuf::int32 OCCfgData::undlybiascountmin() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlybiascountmin)
  return undlybiascountmin_;
}
 void OCCfgData::set_undlybiascountmin(::google::protobuf::int32 value) {
  set_has_undlybiascountmin();
  undlybiascountmin_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlybiascountmin)
}

// optional int32 undlybiasrollingsz = 8 [default = 300];
bool OCCfgData::has_undlybiasrollingsz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OCCfgData::set_has_undlybiasrollingsz() {
  _has_bits_[0] |= 0x00000080u;
}
void OCCfgData::clear_has_undlybiasrollingsz() {
  _has_bits_[0] &= ~0x00000080u;
}
void OCCfgData::clear_undlybiasrollingsz() {
  undlybiasrollingsz_ = 300;
  clear_has_undlybiasrollingsz();
}
 ::google::protobuf::int32 OCCfgData::undlybiasrollingsz() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlybiasrollingsz)
  return undlybiasrollingsz_;
}
 void OCCfgData::set_undlybiasrollingsz(::google::protobuf::int32 value) {
  set_has_undlybiasrollingsz();
  undlybiasrollingsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlybiasrollingsz)
}

// optional int32 undlybiasrollingtype = 9 [default = 0];
bool OCCfgData::has_undlybiasrollingtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OCCfgData::set_has_undlybiasrollingtype() {
  _has_bits_[0] |= 0x00000100u;
}
void OCCfgData::clear_has_undlybiasrollingtype() {
  _has_bits_[0] &= ~0x00000100u;
}
void OCCfgData::clear_undlybiasrollingtype() {
  undlybiasrollingtype_ = 0;
  clear_has_undlybiasrollingtype();
}
 ::google::protobuf::int32 OCCfgData::undlybiasrollingtype() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlybiasrollingtype)
  return undlybiasrollingtype_;
}
 void OCCfgData::set_undlybiasrollingtype(::google::protobuf::int32 value) {
  set_has_undlybiasrollingtype();
  undlybiasrollingtype_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlybiasrollingtype)
}

// optional double undlybigmovethresh = 10 [default = 0];
bool OCCfgData::has_undlybigmovethresh() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OCCfgData::set_has_undlybigmovethresh() {
  _has_bits_[0] |= 0x00000200u;
}
void OCCfgData::clear_has_undlybigmovethresh() {
  _has_bits_[0] &= ~0x00000200u;
}
void OCCfgData::clear_undlybigmovethresh() {
  undlybigmovethresh_ = 0;
  clear_has_undlybigmovethresh();
}
 double OCCfgData::undlybigmovethresh() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlybigmovethresh)
  return undlybigmovethresh_;
}
 void OCCfgData::set_undlybigmovethresh(double value) {
  set_has_undlybigmovethresh();
  undlybigmovethresh_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlybigmovethresh)
}

// optional double minimpvol = 11 [default = 0.05];
bool OCCfgData::has_minimpvol() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OCCfgData::set_has_minimpvol() {
  _has_bits_[0] |= 0x00000400u;
}
void OCCfgData::clear_has_minimpvol() {
  _has_bits_[0] &= ~0x00000400u;
}
void OCCfgData::clear_minimpvol() {
  minimpvol_ = 0.05;
  clear_has_minimpvol();
}
 double OCCfgData::minimpvol() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.minimpvol)
  return minimpvol_;
}
 void OCCfgData::set_minimpvol(double value) {
  set_has_minimpvol();
  minimpvol_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.minimpvol)
}

// optional double maximpvol = 12 [default = 0.5];
bool OCCfgData::has_maximpvol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OCCfgData::set_has_maximpvol() {
  _has_bits_[0] |= 0x00000800u;
}
void OCCfgData::clear_has_maximpvol() {
  _has_bits_[0] &= ~0x00000800u;
}
void OCCfgData::clear_maximpvol() {
  maximpvol_ = 0.5;
  clear_has_maximpvol();
}
 double OCCfgData::maximpvol() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.maximpvol)
  return maximpvol_;
}
 void OCCfgData::set_maximpvol(double value) {
  set_has_maximpvol();
  maximpvol_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.maximpvol)
}

// optional int32 quotingflag = 15 [default = 0];
bool OCCfgData::has_quotingflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OCCfgData::set_has_quotingflag() {
  _has_bits_[0] |= 0x00001000u;
}
void OCCfgData::clear_has_quotingflag() {
  _has_bits_[0] &= ~0x00001000u;
}
void OCCfgData::clear_quotingflag() {
  quotingflag_ = 0;
  clear_has_quotingflag();
}
 ::google::protobuf::int32 OCCfgData::quotingflag() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.quotingflag)
  return quotingflag_;
}
 void OCCfgData::set_quotingflag(::google::protobuf::int32 value) {
  set_has_quotingflag();
  quotingflag_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.quotingflag)
}

// optional int32 rspflag = 16 [default = 1];
bool OCCfgData::has_rspflag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OCCfgData::set_has_rspflag() {
  _has_bits_[0] |= 0x00002000u;
}
void OCCfgData::clear_has_rspflag() {
  _has_bits_[0] &= ~0x00002000u;
}
void OCCfgData::clear_rspflag() {
  rspflag_ = 1;
  clear_has_rspflag();
}
 ::google::protobuf::int32 OCCfgData::rspflag() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.rspflag)
  return rspflag_;
}
 void OCCfgData::set_rspflag(::google::protobuf::int32 value) {
  set_has_rspflag();
  rspflag_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.rspflag)
}

// optional int32 hedgingflag = 17 [default = 0];
bool OCCfgData::has_hedgingflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OCCfgData::set_has_hedgingflag() {
  _has_bits_[0] |= 0x00004000u;
}
void OCCfgData::clear_has_hedgingflag() {
  _has_bits_[0] &= ~0x00004000u;
}
void OCCfgData::clear_hedgingflag() {
  hedgingflag_ = 0;
  clear_has_hedgingflag();
}
 ::google::protobuf::int32 OCCfgData::hedgingflag() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.hedgingflag)
  return hedgingflag_;
}
 void OCCfgData::set_hedgingflag(::google::protobuf::int32 value) {
  set_has_hedgingflag();
  hedgingflag_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.hedgingflag)
}

// optional int32 fitflag = 18 [default = 0];
bool OCCfgData::has_fitflag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void OCCfgData::set_has_fitflag() {
  _has_bits_[0] |= 0x00008000u;
}
void OCCfgData::clear_has_fitflag() {
  _has_bits_[0] &= ~0x00008000u;
}
void OCCfgData::clear_fitflag() {
  fitflag_ = 0;
  clear_has_fitflag();
}
 ::google::protobuf::int32 OCCfgData::fitflag() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.fitflag)
  return fitflag_;
}
 void OCCfgData::set_fitflag(::google::protobuf::int32 value) {
  set_has_fitflag();
  fitflag_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.fitflag)
}

// optional int32 fitmethod = 19 [default = 0];
bool OCCfgData::has_fitmethod() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void OCCfgData::set_has_fitmethod() {
  _has_bits_[0] |= 0x00010000u;
}
void OCCfgData::clear_has_fitmethod() {
  _has_bits_[0] &= ~0x00010000u;
}
void OCCfgData::clear_fitmethod() {
  fitmethod_ = 0;
  clear_has_fitmethod();
}
 ::google::protobuf::int32 OCCfgData::fitmethod() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.fitmethod)
  return fitmethod_;
}
 void OCCfgData::set_fitmethod(::google::protobuf::int32 value) {
  set_has_fitmethod();
  fitmethod_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.fitmethod)
}

// optional double fitthreshticks = 20 [default = 10];
bool OCCfgData::has_fitthreshticks() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void OCCfgData::set_has_fitthreshticks() {
  _has_bits_[0] |= 0x00020000u;
}
void OCCfgData::clear_has_fitthreshticks() {
  _has_bits_[0] &= ~0x00020000u;
}
void OCCfgData::clear_fitthreshticks() {
  fitthreshticks_ = 10;
  clear_has_fitthreshticks();
}
 double OCCfgData::fitthreshticks() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.fitthreshticks)
  return fitthreshticks_;
}
 void OCCfgData::set_fitthreshticks(double value) {
  set_has_fitthreshticks();
  fitthreshticks_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.fitthreshticks)
}

// optional double joinhedgethresh = 21 [default = 1];
bool OCCfgData::has_joinhedgethresh() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void OCCfgData::set_has_joinhedgethresh() {
  _has_bits_[0] |= 0x00040000u;
}
void OCCfgData::clear_has_joinhedgethresh() {
  _has_bits_[0] &= ~0x00040000u;
}
void OCCfgData::clear_joinhedgethresh() {
  joinhedgethresh_ = 1;
  clear_has_joinhedgethresh();
}
 double OCCfgData::joinhedgethresh() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.joinhedgethresh)
  return joinhedgethresh_;
}
 void OCCfgData::set_joinhedgethresh(double value) {
  set_has_joinhedgethresh();
  joinhedgethresh_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.joinhedgethresh)
}

// optional double hithedgethresh = 22 [default = 5];
bool OCCfgData::has_hithedgethresh() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void OCCfgData::set_has_hithedgethresh() {
  _has_bits_[0] |= 0x00080000u;
}
void OCCfgData::clear_has_hithedgethresh() {
  _has_bits_[0] &= ~0x00080000u;
}
void OCCfgData::clear_hithedgethresh() {
  hithedgethresh_ = 5;
  clear_has_hithedgethresh();
}
 double OCCfgData::hithedgethresh() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.hithedgethresh)
  return hithedgethresh_;
}
 void OCCfgData::set_hithedgethresh(double value) {
  set_has_hithedgethresh();
  hithedgethresh_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.hithedgethresh)
}

// optional int32 safehedgedistticks = 23 [default = 5];
bool OCCfgData::has_safehedgedistticks() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void OCCfgData::set_has_safehedgedistticks() {
  _has_bits_[0] |= 0x00100000u;
}
void OCCfgData::clear_has_safehedgedistticks() {
  _has_bits_[0] &= ~0x00100000u;
}
void OCCfgData::clear_safehedgedistticks() {
  safehedgedistticks_ = 5;
  clear_has_safehedgedistticks();
}
 ::google::protobuf::int32 OCCfgData::safehedgedistticks() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.safehedgedistticks)
  return safehedgedistticks_;
}
 void OCCfgData::set_safehedgedistticks(::google::protobuf::int32 value) {
  set_has_safehedgedistticks();
  safehedgedistticks_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.safehedgedistticks)
}

// optional int32 hedgedistticks = 24 [default = 1];
bool OCCfgData::has_hedgedistticks() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void OCCfgData::set_has_hedgedistticks() {
  _has_bits_[0] |= 0x00200000u;
}
void OCCfgData::clear_has_hedgedistticks() {
  _has_bits_[0] &= ~0x00200000u;
}
void OCCfgData::clear_hedgedistticks() {
  hedgedistticks_ = 1;
  clear_has_hedgedistticks();
}
 ::google::protobuf::int32 OCCfgData::hedgedistticks() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.hedgedistticks)
  return hedgedistticks_;
}
 void OCCfgData::set_hedgedistticks(::google::protobuf::int32 value) {
  set_has_hedgedistticks();
  hedgedistticks_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.hedgedistticks)
}

// optional int32 maxpos = 26 [default = 10];
bool OCCfgData::has_maxpos() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void OCCfgData::set_has_maxpos() {
  _has_bits_[0] |= 0x00400000u;
}
void OCCfgData::clear_has_maxpos() {
  _has_bits_[0] &= ~0x00400000u;
}
void OCCfgData::clear_maxpos() {
  maxpos_ = 10;
  clear_has_maxpos();
}
 ::google::protobuf::int32 OCCfgData::maxpos() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.maxpos)
  return maxpos_;
}
 void OCCfgData::set_maxpos(::google::protobuf::int32 value) {
  set_has_maxpos();
  maxpos_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.maxpos)
}

// optional double ocmaxdeltanorm = 27 [default = 10];
bool OCCfgData::has_ocmaxdeltanorm() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void OCCfgData::set_has_ocmaxdeltanorm() {
  _has_bits_[0] |= 0x00800000u;
}
void OCCfgData::clear_has_ocmaxdeltanorm() {
  _has_bits_[0] &= ~0x00800000u;
}
void OCCfgData::clear_ocmaxdeltanorm() {
  ocmaxdeltanorm_ = 10;
  clear_has_ocmaxdeltanorm();
}
 double OCCfgData::ocmaxdeltanorm() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.ocmaxdeltanorm)
  return ocmaxdeltanorm_;
}
 void OCCfgData::set_ocmaxdeltanorm(double value) {
  set_has_ocmaxdeltanorm();
  ocmaxdeltanorm_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.ocmaxdeltanorm)
}

// optional double octgtdeltanorm = 28 [default = 0];
bool OCCfgData::has_octgtdeltanorm() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void OCCfgData::set_has_octgtdeltanorm() {
  _has_bits_[0] |= 0x01000000u;
}
void OCCfgData::clear_has_octgtdeltanorm() {
  _has_bits_[0] &= ~0x01000000u;
}
void OCCfgData::clear_octgtdeltanorm() {
  octgtdeltanorm_ = 0;
  clear_has_octgtdeltanorm();
}
 double OCCfgData::octgtdeltanorm() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.octgtdeltanorm)
  return octgtdeltanorm_;
}
 void OCCfgData::set_octgtdeltanorm(double value) {
  set_has_octgtdeltanorm();
  octgtdeltanorm_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.octgtdeltanorm)
}

// optional double ocmaxvega = 29 [default = 10000];
bool OCCfgData::has_ocmaxvega() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void OCCfgData::set_has_ocmaxvega() {
  _has_bits_[0] |= 0x02000000u;
}
void OCCfgData::clear_has_ocmaxvega() {
  _has_bits_[0] &= ~0x02000000u;
}
void OCCfgData::clear_ocmaxvega() {
  ocmaxvega_ = 10000;
  clear_has_ocmaxvega();
}
 double OCCfgData::ocmaxvega() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.ocmaxvega)
  return ocmaxvega_;
}
 void OCCfgData::set_ocmaxvega(double value) {
  set_has_ocmaxvega();
  ocmaxvega_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.ocmaxvega)
}

// optional double octgtvega = 30 [default = 0];
bool OCCfgData::has_octgtvega() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void OCCfgData::set_has_octgtvega() {
  _has_bits_[0] |= 0x04000000u;
}
void OCCfgData::clear_has_octgtvega() {
  _has_bits_[0] &= ~0x04000000u;
}
void OCCfgData::clear_octgtvega() {
  octgtvega_ = 0;
  clear_has_octgtvega();
}
 double OCCfgData::octgtvega() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.octgtvega)
  return octgtvega_;
}
 void OCCfgData::set_octgtvega(double value) {
  set_has_octgtvega();
  octgtvega_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.octgtvega)
}

// optional int32 quotepxmethod = 31 [default = 0];
bool OCCfgData::has_quotepxmethod() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void OCCfgData::set_has_quotepxmethod() {
  _has_bits_[0] |= 0x08000000u;
}
void OCCfgData::clear_has_quotepxmethod() {
  _has_bits_[0] &= ~0x08000000u;
}
void OCCfgData::clear_quotepxmethod() {
  quotepxmethod_ = 0;
  clear_has_quotepxmethod();
}
 ::google::protobuf::int32 OCCfgData::quotepxmethod() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.quotepxmethod)
  return quotepxmethod_;
}
 void OCCfgData::set_quotepxmethod(::google::protobuf::int32 value) {
  set_has_quotepxmethod();
  quotepxmethod_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.quotepxmethod)
}

// optional int32 maxhitticks = 32 [default = 0];
bool OCCfgData::has_maxhitticks() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void OCCfgData::set_has_maxhitticks() {
  _has_bits_[0] |= 0x10000000u;
}
void OCCfgData::clear_has_maxhitticks() {
  _has_bits_[0] &= ~0x10000000u;
}
void OCCfgData::clear_maxhitticks() {
  maxhitticks_ = 0;
  clear_has_maxhitticks();
}
 ::google::protobuf::int32 OCCfgData::maxhitticks() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.maxhitticks)
  return maxhitticks_;
}
 void OCCfgData::set_maxhitticks(::google::protobuf::int32 value) {
  set_has_maxhitticks();
  maxhitticks_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.maxhitticks)
}

// optional double rcp = 33 [default = 0.5];
bool OCCfgData::has_rcp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void OCCfgData::set_has_rcp() {
  _has_bits_[0] |= 0x20000000u;
}
void OCCfgData::clear_has_rcp() {
  _has_bits_[0] &= ~0x20000000u;
}
void OCCfgData::clear_rcp() {
  rcp_ = 0.5;
  clear_has_rcp();
}
 double OCCfgData::rcp() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.rcp)
  return rcp_;
}
 void OCCfgData::set_rcp(double value) {
  set_has_rcp();
  rcp_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.rcp)
}

// optional double rrp = 34 [default = 0.8];
bool OCCfgData::has_rrp() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void OCCfgData::set_has_rrp() {
  _has_bits_[0] |= 0x40000000u;
}
void OCCfgData::clear_has_rrp() {
  _has_bits_[0] &= ~0x40000000u;
}
void OCCfgData::clear_rrp() {
  rrp_ = 0.8;
  clear_has_rrp();
}
 double OCCfgData::rrp() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.rrp)
  return rrp_;
}
 void OCCfgData::set_rrp(double value) {
  set_has_rrp();
  rrp_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.rrp)
}

// optional double minretreatratio = 35 [default = 0.2];
bool OCCfgData::has_minretreatratio() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void OCCfgData::set_has_minretreatratio() {
  _has_bits_[0] |= 0x80000000u;
}
void OCCfgData::clear_has_minretreatratio() {
  _has_bits_[0] &= ~0x80000000u;
}
void OCCfgData::clear_minretreatratio() {
  minretreatratio_ = 0.2;
  clear_has_minretreatratio();
}
 double OCCfgData::minretreatratio() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.minretreatratio)
  return minretreatratio_;
}
 void OCCfgData::set_minretreatratio(double value) {
  set_has_minretreatratio();
  minretreatratio_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.minretreatratio)
}

// optional double maxretreatratio = 36 [default = 2];
bool OCCfgData::has_maxretreatratio() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void OCCfgData::set_has_maxretreatratio() {
  _has_bits_[1] |= 0x00000001u;
}
void OCCfgData::clear_has_maxretreatratio() {
  _has_bits_[1] &= ~0x00000001u;
}
void OCCfgData::clear_maxretreatratio() {
  maxretreatratio_ = 2;
  clear_has_maxretreatratio();
}
 double OCCfgData::maxretreatratio() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.maxretreatratio)
  return maxretreatratio_;
}
 void OCCfgData::set_maxretreatratio(double value) {
  set_has_maxretreatratio();
  maxretreatratio_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.maxretreatratio)
}

// optional double leanonmktratio = 37 [default = 0.75];
bool OCCfgData::has_leanonmktratio() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void OCCfgData::set_has_leanonmktratio() {
  _has_bits_[1] |= 0x00000002u;
}
void OCCfgData::clear_has_leanonmktratio() {
  _has_bits_[1] &= ~0x00000002u;
}
void OCCfgData::clear_leanonmktratio() {
  leanonmktratio_ = 0.75;
  clear_has_leanonmktratio();
}
 double OCCfgData::leanonmktratio() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.leanonmktratio)
  return leanonmktratio_;
}
 void OCCfgData::set_leanonmktratio(double value) {
  set_has_leanonmktratio();
  leanonmktratio_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.leanonmktratio)
}

// optional int32 pxchgthreshticksmin = 38 [default = 1];
bool OCCfgData::has_pxchgthreshticksmin() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void OCCfgData::set_has_pxchgthreshticksmin() {
  _has_bits_[1] |= 0x00000004u;
}
void OCCfgData::clear_has_pxchgthreshticksmin() {
  _has_bits_[1] &= ~0x00000004u;
}
void OCCfgData::clear_pxchgthreshticksmin() {
  pxchgthreshticksmin_ = 1;
  clear_has_pxchgthreshticksmin();
}
 ::google::protobuf::int32 OCCfgData::pxchgthreshticksmin() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.pxchgthreshticksmin)
  return pxchgthreshticksmin_;
}
 void OCCfgData::set_pxchgthreshticksmin(::google::protobuf::int32 value) {
  set_has_pxchgthreshticksmin();
  pxchgthreshticksmin_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.pxchgthreshticksmin)
}

// optional int32 pxchgthreshticksmax = 39 [default = 10];
bool OCCfgData::has_pxchgthreshticksmax() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void OCCfgData::set_has_pxchgthreshticksmax() {
  _has_bits_[1] |= 0x00000008u;
}
void OCCfgData::clear_has_pxchgthreshticksmax() {
  _has_bits_[1] &= ~0x00000008u;
}
void OCCfgData::clear_pxchgthreshticksmax() {
  pxchgthreshticksmax_ = 10;
  clear_has_pxchgthreshticksmax();
}
 ::google::protobuf::int32 OCCfgData::pxchgthreshticksmax() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.pxchgthreshticksmax)
  return pxchgthreshticksmax_;
}
 void OCCfgData::set_pxchgthreshticksmax(::google::protobuf::int32 value) {
  set_has_pxchgthreshticksmax();
  pxchgthreshticksmax_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.pxchgthreshticksmax)
}

// optional double pxchgthreshratio = 40 [default = 0.2];
bool OCCfgData::has_pxchgthreshratio() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void OCCfgData::set_has_pxchgthreshratio() {
  _has_bits_[1] |= 0x00000010u;
}
void OCCfgData::clear_has_pxchgthreshratio() {
  _has_bits_[1] &= ~0x00000010u;
}
void OCCfgData::clear_pxchgthreshratio() {
  pxchgthreshratio_ = 0.2;
  clear_has_pxchgthreshratio();
}
 double OCCfgData::pxchgthreshratio() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.pxchgthreshratio)
  return pxchgthreshratio_;
}
 void OCCfgData::set_pxchgthreshratio(double value) {
  set_has_pxchgthreshratio();
  pxchgthreshratio_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.pxchgthreshratio)
}

// optional int32 minquotesz = 41 [default = 1];
bool OCCfgData::has_minquotesz() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void OCCfgData::set_has_minquotesz() {
  _has_bits_[1] |= 0x00000020u;
}
void OCCfgData::clear_has_minquotesz() {
  _has_bits_[1] &= ~0x00000020u;
}
void OCCfgData::clear_minquotesz() {
  minquotesz_ = 1;
  clear_has_minquotesz();
}
 ::google::protobuf::int32 OCCfgData::minquotesz() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.minquotesz)
  return minquotesz_;
}
 void OCCfgData::set_minquotesz(::google::protobuf::int32 value) {
  set_has_minquotesz();
  minquotesz_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.minquotesz)
}

// optional int32 minrspsz = 42 [default = 1];
bool OCCfgData::has_minrspsz() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void OCCfgData::set_has_minrspsz() {
  _has_bits_[1] |= 0x00000040u;
}
void OCCfgData::clear_has_minrspsz() {
  _has_bits_[1] &= ~0x00000040u;
}
void OCCfgData::clear_minrspsz() {
  minrspsz_ = 1;
  clear_has_minrspsz();
}
 ::google::protobuf::int32 OCCfgData::minrspsz() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.minrspsz)
  return minrspsz_;
}
 void OCCfgData::set_minrspsz(::google::protobuf::int32 value) {
  set_has_minrspsz();
  minrspsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.minrspsz)
}

// optional int32 undlychgrollingsz = 50 [default = 36];
bool OCCfgData::has_undlychgrollingsz() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void OCCfgData::set_has_undlychgrollingsz() {
  _has_bits_[1] |= 0x00000080u;
}
void OCCfgData::clear_has_undlychgrollingsz() {
  _has_bits_[1] &= ~0x00000080u;
}
void OCCfgData::clear_undlychgrollingsz() {
  undlychgrollingsz_ = 36;
  clear_has_undlychgrollingsz();
}
 ::google::protobuf::int32 OCCfgData::undlychgrollingsz() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlychgrollingsz)
  return undlychgrollingsz_;
}
 void OCCfgData::set_undlychgrollingsz(::google::protobuf::int32 value) {
  set_has_undlychgrollingsz();
  undlychgrollingsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlychgrollingsz)
}

// optional int32 undlychgrollingtype = 51 [default = 0];
bool OCCfgData::has_undlychgrollingtype() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void OCCfgData::set_has_undlychgrollingtype() {
  _has_bits_[1] |= 0x00000100u;
}
void OCCfgData::clear_has_undlychgrollingtype() {
  _has_bits_[1] &= ~0x00000100u;
}
void OCCfgData::clear_undlychgrollingtype() {
  undlychgrollingtype_ = 0;
  clear_has_undlychgrollingtype();
}
 ::google::protobuf::int32 OCCfgData::undlychgrollingtype() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.undlychgrollingtype)
  return undlychgrollingtype_;
}
 void OCCfgData::set_undlychgrollingtype(::google::protobuf::int32 value) {
  set_has_undlychgrollingtype();
  undlychgrollingtype_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.undlychgrollingtype)
}

// optional int32 vcrrollingsz = 52 [default = 300];
bool OCCfgData::has_vcrrollingsz() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void OCCfgData::set_has_vcrrollingsz() {
  _has_bits_[1] |= 0x00000200u;
}
void OCCfgData::clear_has_vcrrollingsz() {
  _has_bits_[1] &= ~0x00000200u;
}
void OCCfgData::clear_vcrrollingsz() {
  vcrrollingsz_ = 300;
  clear_has_vcrrollingsz();
}
 ::google::protobuf::int32 OCCfgData::vcrrollingsz() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.vcrrollingsz)
  return vcrrollingsz_;
}
 void OCCfgData::set_vcrrollingsz(::google::protobuf::int32 value) {
  set_has_vcrrollingsz();
  vcrrollingsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.vcrrollingsz)
}

// optional int32 vcrrollingtype = 53 [default = 0];
bool OCCfgData::has_vcrrollingtype() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void OCCfgData::set_has_vcrrollingtype() {
  _has_bits_[1] |= 0x00000400u;
}
void OCCfgData::clear_has_vcrrollingtype() {
  _has_bits_[1] &= ~0x00000400u;
}
void OCCfgData::clear_vcrrollingtype() {
  vcrrollingtype_ = 0;
  clear_has_vcrrollingtype();
}
 ::google::protobuf::int32 OCCfgData::vcrrollingtype() const {
  // @@protoc_insertion_point(field_get:XT.OCCfgData.vcrrollingtype)
  return vcrrollingtype_;
}
 void OCCfgData::set_vcrrollingtype(::google::protobuf::int32 value) {
  set_has_vcrrollingtype();
  vcrrollingtype_ = value;
  // @@protoc_insertion_point(field_set:XT.OCCfgData.vcrrollingtype)
}

// map<string, string> namestrmap = 80;
int OCCfgData::namestrmap_size() const {
  return namestrmap_.size();
}
void OCCfgData::clear_namestrmap() {
  namestrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
OCCfgData::namestrmap() const {
  // @@protoc_insertion_point(field_map:XT.OCCfgData.namestrmap)
  return namestrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
OCCfgData::mutable_namestrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.OCCfgData.namestrmap)
  return namestrmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OCData::kNameFieldNumber;
const int OCData::kProductFieldNumber;
const int OCData::kExpiredateFieldNumber;
const int OCData::kMonthseqFieldNumber;
const int OCData::kTradingdayFieldNumber;
const int OCData::kPrevtradingdayFieldNumber;
const int OCData::kAtmindexFieldNumber;
const int OCData::kAtmstrikeFieldNumber;
const int OCData::kAtmintstrikeFieldNumber;
const int OCData::kAtmstraddlevegaFieldNumber;
const int OCData::kUndlybiasFieldNumber;
const int OCData::kLastundlyquotetsFieldNumber;
const int OCData::kLastoptionquotetsFieldNumber;
const int OCData::kOcrriskpnltdyFieldNumber;
const int OCData::kOcuriskpnltdyFieldNumber;
const int OCData::kOcrriskpnlytdFieldNumber;
const int OCData::kOcuriskpnlytdFieldNumber;
const int OCData::kXscaleFieldNumber;
const int OCData::kPxprecisionFieldNumber;
const int OCData::kExercisetypeFieldNumber;
const int OCData::kMinoptionpxtickFieldNumber;
const int OCData::kOcbuyvolumeFieldNumber;
const int OCData::kOcsellvolumeFieldNumber;
const int OCData::kOcbuyamountFieldNumber;
const int OCData::kOcsellamountFieldNumber;
const int OCData::kTFieldNumber;
const int OCData::kDteFieldNumber;
const int OCData::kTteFieldNumber;
const int OCData::kNstrikesFieldNumber;
const int OCData::kNcallsFieldNumber;
const int OCData::kNputsFieldNumber;
const int OCData::kTagdoublemapFieldNumber;
const int OCData::kTagintmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OCData::OCData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OCData)
}

void OCData::InitAsDefaultInstance() {
}

OCData::OCData(const OCData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OCData)
}

void OCData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_ = 99990101;
  monthseq_ = -1;
  tradingday_ = 0;
  prevtradingday_ = 0;
  atmindex_ = 0;
  atmstrike_ = 0;
  atmintstrike_ = GOOGLE_LONGLONG(0);
  atmstraddlevega_ = 0;
  undlybias_ = 0;
  lastundlyquotets_ = GOOGLE_LONGLONG(0);
  lastoptionquotets_ = GOOGLE_LONGLONG(0);
  ocrriskpnltdy_ = 0;
  ocuriskpnltdy_ = 0;
  ocrriskpnlytd_ = 0;
  ocuriskpnlytd_ = 0;
  xscale_ = 1;
  pxprecision_ = 5;
  exercisetype_ = 0;
  minoptionpxtick_ = 0;
  ocbuyvolume_ = 0;
  ocsellvolume_ = 0;
  ocbuyamount_ = 0;
  ocsellamount_ = 0;
  t_ = 0;
  dte_ = 0;
  tte_ = 0;
  nstrikes_ = 0;
  ncalls_ = 0;
  nputs_ = 0;
  tagdoublemap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagdoublemap_.SetEntryDescriptor(
      &::XT::OCData_TagdoublemapEntry_descriptor_);
  tagintmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagintmap_.SetEntryDescriptor(
      &::XT::OCData_TagintmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OCData::~OCData() {
  // @@protoc_insertion_point(destructor:XT.OCData)
  SharedDtor();
}

void OCData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OCData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OCData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OCData_descriptor_;
}

const OCData& OCData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OCData* OCData::default_instance_ = NULL;

OCData* OCData::New(::google::protobuf::Arena* arena) const {
  OCData* n = new OCData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OCData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OCData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OCData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OCData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(tradingday_, atmstrike_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_product()) {
      product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    expiredate_ = 99990101;
    monthseq_ = -1;
    atmindex_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(atmintstrike_, lastoptionquotets_);
    ZR_(ocrriskpnltdy_, ocrriskpnlytd_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(minoptionpxtick_, ocbuyamount_);
    ocuriskpnlytd_ = 0;
    xscale_ = 1;
    pxprecision_ = 5;
    ocsellvolume_ = 0;
  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    ZR_(ocsellamount_, t_);
    ZR_(nstrikes_, nputs_);
  }

#undef ZR_HELPER_
#undef ZR_

  tagdoublemap_.Clear();
  tagintmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OCData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OCData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OCData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }

      // optional string product = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OCData.product");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expiredate;
        break;
      }

      // optional int32 expiredate = 3 [default = 99990101];
      case 3: {
        if (tag == 24) {
         parse_expiredate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiredate_)));
          set_has_expiredate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_monthseq;
        break;
      }

      // optional int32 monthseq = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_monthseq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthseq_)));
          set_has_monthseq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tradingday;
        break;
      }

      // optional int32 tradingday = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_tradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prevtradingday;
        break;
      }

      // optional int32 prevtradingday = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_prevtradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevtradingday_)));
          set_has_prevtradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_atmindex;
        break;
      }

      // optional int32 atmindex = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_atmindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atmindex_)));
          set_has_atmindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_atmstrike;
        break;
      }

      // optional double atmstrike = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_atmstrike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atmstrike_)));
          set_has_atmstrike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_atmintstrike;
        break;
      }

      // optional int64 atmintstrike = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_atmintstrike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atmintstrike_)));
          set_has_atmintstrike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_atmstraddlevega;
        break;
      }

      // optional double atmstraddlevega = 11 [default = 0];
      case 11: {
        if (tag == 89) {
         parse_atmstraddlevega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atmstraddlevega_)));
          set_has_atmstraddlevega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_undlybias;
        break;
      }

      // optional double undlybias = 12 [default = 0];
      case 12: {
        if (tag == 97) {
         parse_undlybias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &undlybias_)));
          set_has_undlybias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_lastundlyquotets;
        break;
      }

      // optional int64 lastundlyquotets = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_lastundlyquotets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastundlyquotets_)));
          set_has_lastundlyquotets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_lastoptionquotets;
        break;
      }

      // optional int64 lastoptionquotets = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_lastoptionquotets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastoptionquotets_)));
          set_has_lastoptionquotets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_ocrriskpnltdy;
        break;
      }

      // optional double ocrriskpnltdy = 17 [default = 0];
      case 17: {
        if (tag == 137) {
         parse_ocrriskpnltdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocrriskpnltdy_)));
          set_has_ocrriskpnltdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_ocuriskpnltdy;
        break;
      }

      // optional double ocuriskpnltdy = 18 [default = 0];
      case 18: {
        if (tag == 145) {
         parse_ocuriskpnltdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocuriskpnltdy_)));
          set_has_ocuriskpnltdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_ocrriskpnlytd;
        break;
      }

      // optional double ocrriskpnlytd = 19 [default = 0];
      case 19: {
        if (tag == 153) {
         parse_ocrriskpnlytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocrriskpnlytd_)));
          set_has_ocrriskpnlytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_ocuriskpnlytd;
        break;
      }

      // optional double ocuriskpnlytd = 20 [default = 0];
      case 20: {
        if (tag == 161) {
         parse_ocuriskpnlytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocuriskpnlytd_)));
          set_has_ocuriskpnlytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_xscale;
        break;
      }

      // optional double xscale = 21 [default = 1];
      case 21: {
        if (tag == 169) {
         parse_xscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xscale_)));
          set_has_xscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_pxprecision;
        break;
      }

      // optional int32 pxprecision = 22 [default = 5];
      case 22: {
        if (tag == 176) {
         parse_pxprecision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pxprecision_)));
          set_has_pxprecision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_exercisetype;
        break;
      }

      // optional int32 exercisetype = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_exercisetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exercisetype_)));
          set_has_exercisetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_minoptionpxtick;
        break;
      }

      // optional double minoptionpxtick = 24 [default = 0];
      case 24: {
        if (tag == 193) {
         parse_minoptionpxtick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minoptionpxtick_)));
          set_has_minoptionpxtick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_ocbuyvolume;
        break;
      }

      // optional int32 ocbuyvolume = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_ocbuyvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ocbuyvolume_)));
          set_has_ocbuyvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_ocsellvolume;
        break;
      }

      // optional int32 ocsellvolume = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_ocsellvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ocsellvolume_)));
          set_has_ocsellvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_ocbuyamount;
        break;
      }

      // optional double ocbuyamount = 27 [default = 0];
      case 27: {
        if (tag == 217) {
         parse_ocbuyamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocbuyamount_)));
          set_has_ocbuyamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_ocsellamount;
        break;
      }

      // optional double ocsellamount = 28 [default = 0];
      case 28: {
        if (tag == 225) {
         parse_ocsellamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocsellamount_)));
          set_has_ocsellamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_T;
        break;
      }

      // optional double T = 30 [default = 0];
      case 30: {
        if (tag == 241) {
         parse_T:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_dte;
        break;
      }

      // optional double dte = 31 [default = 0];
      case 31: {
        if (tag == 249) {
         parse_dte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dte_)));
          set_has_dte();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_tte;
        break;
      }

      // optional double tte = 32 [default = 0];
      case 32: {
        if (tag == 257) {
         parse_tte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tte_)));
          set_has_tte();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_nstrikes;
        break;
      }

      // optional int32 nstrikes = 33 [default = 0];
      case 33: {
        if (tag == 264) {
         parse_nstrikes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstrikes_)));
          set_has_nstrikes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_ncalls;
        break;
      }

      // optional int32 ncalls = 34 [default = 0];
      case 34: {
        if (tag == 272) {
         parse_ncalls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncalls_)));
          set_has_ncalls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_nputs;
        break;
      }

      // optional int32 nputs = 35 [default = 0];
      case 35: {
        if (tag == 280) {
         parse_nputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nputs_)));
          set_has_nputs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_tagdoublemap;
        break;
      }

      // map<int32, double> tagdoublemap = 50;
      case 50: {
        if (tag == 402) {
         parse_tagdoublemap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagdoublemap:
          OCData_TagdoublemapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&tagdoublemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_loop_tagdoublemap;
        if (input->ExpectTag(410)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, int32> tagintmap = 51;
      case 51: {
        if (tag == 410) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagintmap:
          OCData_TagintmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&tagintmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OCData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OCData)
  return false;
#undef DO_
}

void OCData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OCData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string product = 2 [default = ""];
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCData.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product(), output);
  }

  // optional int32 expiredate = 3 [default = 99990101];
  if (has_expiredate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expiredate(), output);
  }

  // optional int32 monthseq = 4 [default = -1];
  if (has_monthseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->monthseq(), output);
  }

  // optional int32 tradingday = 5 [default = 0];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tradingday(), output);
  }

  // optional int32 prevtradingday = 6 [default = 0];
  if (has_prevtradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prevtradingday(), output);
  }

  // optional int32 atmindex = 8 [default = 0];
  if (has_atmindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->atmindex(), output);
  }

  // optional double atmstrike = 9 [default = 0];
  if (has_atmstrike()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->atmstrike(), output);
  }

  // optional int64 atmintstrike = 10 [default = 0];
  if (has_atmintstrike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->atmintstrike(), output);
  }

  // optional double atmstraddlevega = 11 [default = 0];
  if (has_atmstraddlevega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->atmstraddlevega(), output);
  }

  // optional double undlybias = 12 [default = 0];
  if (has_undlybias()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->undlybias(), output);
  }

  // optional int64 lastundlyquotets = 15 [default = 0];
  if (has_lastundlyquotets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->lastundlyquotets(), output);
  }

  // optional int64 lastoptionquotets = 16 [default = 0];
  if (has_lastoptionquotets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->lastoptionquotets(), output);
  }

  // optional double ocrriskpnltdy = 17 [default = 0];
  if (has_ocrriskpnltdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->ocrriskpnltdy(), output);
  }

  // optional double ocuriskpnltdy = 18 [default = 0];
  if (has_ocuriskpnltdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ocuriskpnltdy(), output);
  }

  // optional double ocrriskpnlytd = 19 [default = 0];
  if (has_ocrriskpnlytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->ocrriskpnlytd(), output);
  }

  // optional double ocuriskpnlytd = 20 [default = 0];
  if (has_ocuriskpnlytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ocuriskpnlytd(), output);
  }

  // optional double xscale = 21 [default = 1];
  if (has_xscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->xscale(), output);
  }

  // optional int32 pxprecision = 22 [default = 5];
  if (has_pxprecision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->pxprecision(), output);
  }

  // optional int32 exercisetype = 23 [default = 0];
  if (has_exercisetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->exercisetype(), output);
  }

  // optional double minoptionpxtick = 24 [default = 0];
  if (has_minoptionpxtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->minoptionpxtick(), output);
  }

  // optional int32 ocbuyvolume = 25 [default = 0];
  if (has_ocbuyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ocbuyvolume(), output);
  }

  // optional int32 ocsellvolume = 26 [default = 0];
  if (has_ocsellvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ocsellvolume(), output);
  }

  // optional double ocbuyamount = 27 [default = 0];
  if (has_ocbuyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->ocbuyamount(), output);
  }

  // optional double ocsellamount = 28 [default = 0];
  if (has_ocsellamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->ocsellamount(), output);
  }

  // optional double T = 30 [default = 0];
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->t(), output);
  }

  // optional double dte = 31 [default = 0];
  if (has_dte()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->dte(), output);
  }

  // optional double tte = 32 [default = 0];
  if (has_tte()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->tte(), output);
  }

  // optional int32 nstrikes = 33 [default = 0];
  if (has_nstrikes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->nstrikes(), output);
  }

  // optional int32 ncalls = 34 [default = 0];
  if (has_ncalls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->ncalls(), output);
  }

  // optional int32 nputs = 35 [default = 0];
  if (has_nputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->nputs(), output);
  }

  // map<int32, double> tagdoublemap = 50;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OCData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            50, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<OCData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            50, *entry, output);
      }
    }
  }

  // map<int32, int32> tagintmap = 51;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OCData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            51, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<OCData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            51, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OCData)
}

::google::protobuf::uint8* OCData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OCData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string product = 2 [default = ""];
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OCData.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product(), target);
  }

  // optional int32 expiredate = 3 [default = 99990101];
  if (has_expiredate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expiredate(), target);
  }

  // optional int32 monthseq = 4 [default = -1];
  if (has_monthseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->monthseq(), target);
  }

  // optional int32 tradingday = 5 [default = 0];
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tradingday(), target);
  }

  // optional int32 prevtradingday = 6 [default = 0];
  if (has_prevtradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->prevtradingday(), target);
  }

  // optional int32 atmindex = 8 [default = 0];
  if (has_atmindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->atmindex(), target);
  }

  // optional double atmstrike = 9 [default = 0];
  if (has_atmstrike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->atmstrike(), target);
  }

  // optional int64 atmintstrike = 10 [default = 0];
  if (has_atmintstrike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->atmintstrike(), target);
  }

  // optional double atmstraddlevega = 11 [default = 0];
  if (has_atmstraddlevega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->atmstraddlevega(), target);
  }

  // optional double undlybias = 12 [default = 0];
  if (has_undlybias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->undlybias(), target);
  }

  // optional int64 lastundlyquotets = 15 [default = 0];
  if (has_lastundlyquotets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->lastundlyquotets(), target);
  }

  // optional int64 lastoptionquotets = 16 [default = 0];
  if (has_lastoptionquotets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->lastoptionquotets(), target);
  }

  // optional double ocrriskpnltdy = 17 [default = 0];
  if (has_ocrriskpnltdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->ocrriskpnltdy(), target);
  }

  // optional double ocuriskpnltdy = 18 [default = 0];
  if (has_ocuriskpnltdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->ocuriskpnltdy(), target);
  }

  // optional double ocrriskpnlytd = 19 [default = 0];
  if (has_ocrriskpnlytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->ocrriskpnlytd(), target);
  }

  // optional double ocuriskpnlytd = 20 [default = 0];
  if (has_ocuriskpnlytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ocuriskpnlytd(), target);
  }

  // optional double xscale = 21 [default = 1];
  if (has_xscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->xscale(), target);
  }

  // optional int32 pxprecision = 22 [default = 5];
  if (has_pxprecision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->pxprecision(), target);
  }

  // optional int32 exercisetype = 23 [default = 0];
  if (has_exercisetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->exercisetype(), target);
  }

  // optional double minoptionpxtick = 24 [default = 0];
  if (has_minoptionpxtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->minoptionpxtick(), target);
  }

  // optional int32 ocbuyvolume = 25 [default = 0];
  if (has_ocbuyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ocbuyvolume(), target);
  }

  // optional int32 ocsellvolume = 26 [default = 0];
  if (has_ocsellvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ocsellvolume(), target);
  }

  // optional double ocbuyamount = 27 [default = 0];
  if (has_ocbuyamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->ocbuyamount(), target);
  }

  // optional double ocsellamount = 28 [default = 0];
  if (has_ocsellamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->ocsellamount(), target);
  }

  // optional double T = 30 [default = 0];
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->t(), target);
  }

  // optional double dte = 31 [default = 0];
  if (has_dte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->dte(), target);
  }

  // optional double tte = 32 [default = 0];
  if (has_tte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->tte(), target);
  }

  // optional int32 nstrikes = 33 [default = 0];
  if (has_nstrikes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->nstrikes(), target);
  }

  // optional int32 ncalls = 34 [default = 0];
  if (has_ncalls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->ncalls(), target);
  }

  // optional int32 nputs = 35 [default = 0];
  if (has_nputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->nputs(), target);
  }

  // map<int32, double> tagdoublemap = 50;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OCData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       50, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<OCData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       50, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int32> tagintmap = 51;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OCData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       51, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<OCData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       51, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OCData)
  return target;
}

int OCData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OCData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string product = 2 [default = ""];
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional int32 expiredate = 3 [default = 99990101];
    if (has_expiredate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expiredate());
    }

    // optional int32 monthseq = 4 [default = -1];
    if (has_monthseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthseq());
    }

    // optional int32 tradingday = 5 [default = 0];
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // optional int32 prevtradingday = 6 [default = 0];
    if (has_prevtradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevtradingday());
    }

    // optional int32 atmindex = 8 [default = 0];
    if (has_atmindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atmindex());
    }

    // optional double atmstrike = 9 [default = 0];
    if (has_atmstrike()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 atmintstrike = 10 [default = 0];
    if (has_atmintstrike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atmintstrike());
    }

    // optional double atmstraddlevega = 11 [default = 0];
    if (has_atmstraddlevega()) {
      total_size += 1 + 8;
    }

    // optional double undlybias = 12 [default = 0];
    if (has_undlybias()) {
      total_size += 1 + 8;
    }

    // optional int64 lastundlyquotets = 15 [default = 0];
    if (has_lastundlyquotets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastundlyquotets());
    }

    // optional int64 lastoptionquotets = 16 [default = 0];
    if (has_lastoptionquotets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastoptionquotets());
    }

    // optional double ocrriskpnltdy = 17 [default = 0];
    if (has_ocrriskpnltdy()) {
      total_size += 2 + 8;
    }

    // optional double ocuriskpnltdy = 18 [default = 0];
    if (has_ocuriskpnltdy()) {
      total_size += 2 + 8;
    }

    // optional double ocrriskpnlytd = 19 [default = 0];
    if (has_ocrriskpnlytd()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double ocuriskpnlytd = 20 [default = 0];
    if (has_ocuriskpnlytd()) {
      total_size += 2 + 8;
    }

    // optional double xscale = 21 [default = 1];
    if (has_xscale()) {
      total_size += 2 + 8;
    }

    // optional int32 pxprecision = 22 [default = 5];
    if (has_pxprecision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pxprecision());
    }

    // optional int32 exercisetype = 23 [default = 0];
    if (has_exercisetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exercisetype());
    }

    // optional double minoptionpxtick = 24 [default = 0];
    if (has_minoptionpxtick()) {
      total_size += 2 + 8;
    }

    // optional int32 ocbuyvolume = 25 [default = 0];
    if (has_ocbuyvolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ocbuyvolume());
    }

    // optional int32 ocsellvolume = 26 [default = 0];
    if (has_ocsellvolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ocsellvolume());
    }

    // optional double ocbuyamount = 27 [default = 0];
    if (has_ocbuyamount()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional double ocsellamount = 28 [default = 0];
    if (has_ocsellamount()) {
      total_size += 2 + 8;
    }

    // optional double T = 30 [default = 0];
    if (has_t()) {
      total_size += 2 + 8;
    }

    // optional double dte = 31 [default = 0];
    if (has_dte()) {
      total_size += 2 + 8;
    }

    // optional double tte = 32 [default = 0];
    if (has_tte()) {
      total_size += 2 + 8;
    }

    // optional int32 nstrikes = 33 [default = 0];
    if (has_nstrikes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstrikes());
    }

    // optional int32 ncalls = 34 [default = 0];
    if (has_ncalls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncalls());
    }

    // optional int32 nputs = 35 [default = 0];
    if (has_nputs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nputs());
    }

  }
  // map<int32, double> tagdoublemap = 50;
  total_size += 2 * this->tagdoublemap_size();
  {
    ::google::protobuf::scoped_ptr<OCData_TagdoublemapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->tagdoublemap().begin();
        it != this->tagdoublemap().end(); ++it) {
      entry.reset(tagdoublemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int32> tagintmap = 51;
  total_size += 2 * this->tagintmap_size();
  {
    ::google::protobuf::scoped_ptr<OCData_TagintmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->tagintmap().begin();
        it != this->tagintmap().end(); ++it) {
      entry.reset(tagintmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OCData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OCData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OCData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OCData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OCData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OCData)
    MergeFrom(*source);
  }
}

void OCData::MergeFrom(const OCData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OCData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tagdoublemap_.MergeFrom(from.tagdoublemap_);
  tagintmap_.MergeFrom(from.tagintmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_product()) {
      set_has_product();
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (from.has_expiredate()) {
      set_expiredate(from.expiredate());
    }
    if (from.has_monthseq()) {
      set_monthseq(from.monthseq());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_prevtradingday()) {
      set_prevtradingday(from.prevtradingday());
    }
    if (from.has_atmindex()) {
      set_atmindex(from.atmindex());
    }
    if (from.has_atmstrike()) {
      set_atmstrike(from.atmstrike());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_atmintstrike()) {
      set_atmintstrike(from.atmintstrike());
    }
    if (from.has_atmstraddlevega()) {
      set_atmstraddlevega(from.atmstraddlevega());
    }
    if (from.has_undlybias()) {
      set_undlybias(from.undlybias());
    }
    if (from.has_lastundlyquotets()) {
      set_lastundlyquotets(from.lastundlyquotets());
    }
    if (from.has_lastoptionquotets()) {
      set_lastoptionquotets(from.lastoptionquotets());
    }
    if (from.has_ocrriskpnltdy()) {
      set_ocrriskpnltdy(from.ocrriskpnltdy());
    }
    if (from.has_ocuriskpnltdy()) {
      set_ocuriskpnltdy(from.ocuriskpnltdy());
    }
    if (from.has_ocrriskpnlytd()) {
      set_ocrriskpnlytd(from.ocrriskpnlytd());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ocuriskpnlytd()) {
      set_ocuriskpnlytd(from.ocuriskpnlytd());
    }
    if (from.has_xscale()) {
      set_xscale(from.xscale());
    }
    if (from.has_pxprecision()) {
      set_pxprecision(from.pxprecision());
    }
    if (from.has_exercisetype()) {
      set_exercisetype(from.exercisetype());
    }
    if (from.has_minoptionpxtick()) {
      set_minoptionpxtick(from.minoptionpxtick());
    }
    if (from.has_ocbuyvolume()) {
      set_ocbuyvolume(from.ocbuyvolume());
    }
    if (from.has_ocsellvolume()) {
      set_ocsellvolume(from.ocsellvolume());
    }
    if (from.has_ocbuyamount()) {
      set_ocbuyamount(from.ocbuyamount());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ocsellamount()) {
      set_ocsellamount(from.ocsellamount());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_dte()) {
      set_dte(from.dte());
    }
    if (from.has_tte()) {
      set_tte(from.tte());
    }
    if (from.has_nstrikes()) {
      set_nstrikes(from.nstrikes());
    }
    if (from.has_ncalls()) {
      set_ncalls(from.ncalls());
    }
    if (from.has_nputs()) {
      set_nputs(from.nputs());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OCData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCData::CopyFrom(const OCData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCData::IsInitialized() const {

  return true;
}

void OCData::Swap(OCData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OCData::InternalSwap(OCData* other) {
  name_.Swap(&other->name_);
  product_.Swap(&other->product_);
  std::swap(expiredate_, other->expiredate_);
  std::swap(monthseq_, other->monthseq_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(prevtradingday_, other->prevtradingday_);
  std::swap(atmindex_, other->atmindex_);
  std::swap(atmstrike_, other->atmstrike_);
  std::swap(atmintstrike_, other->atmintstrike_);
  std::swap(atmstraddlevega_, other->atmstraddlevega_);
  std::swap(undlybias_, other->undlybias_);
  std::swap(lastundlyquotets_, other->lastundlyquotets_);
  std::swap(lastoptionquotets_, other->lastoptionquotets_);
  std::swap(ocrriskpnltdy_, other->ocrriskpnltdy_);
  std::swap(ocuriskpnltdy_, other->ocuriskpnltdy_);
  std::swap(ocrriskpnlytd_, other->ocrriskpnlytd_);
  std::swap(ocuriskpnlytd_, other->ocuriskpnlytd_);
  std::swap(xscale_, other->xscale_);
  std::swap(pxprecision_, other->pxprecision_);
  std::swap(exercisetype_, other->exercisetype_);
  std::swap(minoptionpxtick_, other->minoptionpxtick_);
  std::swap(ocbuyvolume_, other->ocbuyvolume_);
  std::swap(ocsellvolume_, other->ocsellvolume_);
  std::swap(ocbuyamount_, other->ocbuyamount_);
  std::swap(ocsellamount_, other->ocsellamount_);
  std::swap(t_, other->t_);
  std::swap(dte_, other->dte_);
  std::swap(tte_, other->tte_);
  std::swap(nstrikes_, other->nstrikes_);
  std::swap(ncalls_, other->ncalls_);
  std::swap(nputs_, other->nputs_);
  tagdoublemap_.Swap(&other->tagdoublemap_);
  tagintmap_.Swap(&other->tagintmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OCData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OCData_descriptor_;
  metadata.reflection = OCData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OCData

// optional string name = 1 [default = ""];
bool OCData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OCData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void OCData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void OCData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& OCData::name() const {
  // @@protoc_insertion_point(field_get:XT.OCData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.OCData.name)
}
 void OCData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.OCData.name)
}
 void OCData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.OCData.name)
}
 ::std::string* OCData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.OCData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OCData::release_name() {
  // @@protoc_insertion_point(field_release:XT.OCData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.OCData.name)
}

// optional string product = 2 [default = ""];
bool OCData::has_product() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OCData::set_has_product() {
  _has_bits_[0] |= 0x00000002u;
}
void OCData::clear_has_product() {
  _has_bits_[0] &= ~0x00000002u;
}
void OCData::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}
 const ::std::string& OCData::product() const {
  // @@protoc_insertion_point(field_get:XT.OCData.product)
  return product_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCData::set_product(const ::std::string& value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.OCData.product)
}
 void OCData::set_product(const char* value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.OCData.product)
}
 void OCData::set_product(const char* value, size_t size) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.OCData.product)
}
 ::std::string* OCData::mutable_product() {
  set_has_product();
  // @@protoc_insertion_point(field_mutable:XT.OCData.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OCData::release_product() {
  // @@protoc_insertion_point(field_release:XT.OCData.product)
  clear_has_product();
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OCData::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    set_has_product();
  } else {
    clear_has_product();
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:XT.OCData.product)
}

// optional int32 expiredate = 3 [default = 99990101];
bool OCData::has_expiredate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OCData::set_has_expiredate() {
  _has_bits_[0] |= 0x00000004u;
}
void OCData::clear_has_expiredate() {
  _has_bits_[0] &= ~0x00000004u;
}
void OCData::clear_expiredate() {
  expiredate_ = 99990101;
  clear_has_expiredate();
}
 ::google::protobuf::int32 OCData::expiredate() const {
  // @@protoc_insertion_point(field_get:XT.OCData.expiredate)
  return expiredate_;
}
 void OCData::set_expiredate(::google::protobuf::int32 value) {
  set_has_expiredate();
  expiredate_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.expiredate)
}

// optional int32 monthseq = 4 [default = -1];
bool OCData::has_monthseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OCData::set_has_monthseq() {
  _has_bits_[0] |= 0x00000008u;
}
void OCData::clear_has_monthseq() {
  _has_bits_[0] &= ~0x00000008u;
}
void OCData::clear_monthseq() {
  monthseq_ = -1;
  clear_has_monthseq();
}
 ::google::protobuf::int32 OCData::monthseq() const {
  // @@protoc_insertion_point(field_get:XT.OCData.monthseq)
  return monthseq_;
}
 void OCData::set_monthseq(::google::protobuf::int32 value) {
  set_has_monthseq();
  monthseq_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.monthseq)
}

// optional int32 tradingday = 5 [default = 0];
bool OCData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OCData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000010u;
}
void OCData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000010u;
}
void OCData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
 ::google::protobuf::int32 OCData::tradingday() const {
  // @@protoc_insertion_point(field_get:XT.OCData.tradingday)
  return tradingday_;
}
 void OCData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.tradingday)
}

// optional int32 prevtradingday = 6 [default = 0];
bool OCData::has_prevtradingday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OCData::set_has_prevtradingday() {
  _has_bits_[0] |= 0x00000020u;
}
void OCData::clear_has_prevtradingday() {
  _has_bits_[0] &= ~0x00000020u;
}
void OCData::clear_prevtradingday() {
  prevtradingday_ = 0;
  clear_has_prevtradingday();
}
 ::google::protobuf::int32 OCData::prevtradingday() const {
  // @@protoc_insertion_point(field_get:XT.OCData.prevtradingday)
  return prevtradingday_;
}
 void OCData::set_prevtradingday(::google::protobuf::int32 value) {
  set_has_prevtradingday();
  prevtradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.prevtradingday)
}

// optional int32 atmindex = 8 [default = 0];
bool OCData::has_atmindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OCData::set_has_atmindex() {
  _has_bits_[0] |= 0x00000040u;
}
void OCData::clear_has_atmindex() {
  _has_bits_[0] &= ~0x00000040u;
}
void OCData::clear_atmindex() {
  atmindex_ = 0;
  clear_has_atmindex();
}
 ::google::protobuf::int32 OCData::atmindex() const {
  // @@protoc_insertion_point(field_get:XT.OCData.atmindex)
  return atmindex_;
}
 void OCData::set_atmindex(::google::protobuf::int32 value) {
  set_has_atmindex();
  atmindex_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.atmindex)
}

// optional double atmstrike = 9 [default = 0];
bool OCData::has_atmstrike() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OCData::set_has_atmstrike() {
  _has_bits_[0] |= 0x00000080u;
}
void OCData::clear_has_atmstrike() {
  _has_bits_[0] &= ~0x00000080u;
}
void OCData::clear_atmstrike() {
  atmstrike_ = 0;
  clear_has_atmstrike();
}
 double OCData::atmstrike() const {
  // @@protoc_insertion_point(field_get:XT.OCData.atmstrike)
  return atmstrike_;
}
 void OCData::set_atmstrike(double value) {
  set_has_atmstrike();
  atmstrike_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.atmstrike)
}

// optional int64 atmintstrike = 10 [default = 0];
bool OCData::has_atmintstrike() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OCData::set_has_atmintstrike() {
  _has_bits_[0] |= 0x00000100u;
}
void OCData::clear_has_atmintstrike() {
  _has_bits_[0] &= ~0x00000100u;
}
void OCData::clear_atmintstrike() {
  atmintstrike_ = GOOGLE_LONGLONG(0);
  clear_has_atmintstrike();
}
 ::google::protobuf::int64 OCData::atmintstrike() const {
  // @@protoc_insertion_point(field_get:XT.OCData.atmintstrike)
  return atmintstrike_;
}
 void OCData::set_atmintstrike(::google::protobuf::int64 value) {
  set_has_atmintstrike();
  atmintstrike_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.atmintstrike)
}

// optional double atmstraddlevega = 11 [default = 0];
bool OCData::has_atmstraddlevega() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OCData::set_has_atmstraddlevega() {
  _has_bits_[0] |= 0x00000200u;
}
void OCData::clear_has_atmstraddlevega() {
  _has_bits_[0] &= ~0x00000200u;
}
void OCData::clear_atmstraddlevega() {
  atmstraddlevega_ = 0;
  clear_has_atmstraddlevega();
}
 double OCData::atmstraddlevega() const {
  // @@protoc_insertion_point(field_get:XT.OCData.atmstraddlevega)
  return atmstraddlevega_;
}
 void OCData::set_atmstraddlevega(double value) {
  set_has_atmstraddlevega();
  atmstraddlevega_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.atmstraddlevega)
}

// optional double undlybias = 12 [default = 0];
bool OCData::has_undlybias() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OCData::set_has_undlybias() {
  _has_bits_[0] |= 0x00000400u;
}
void OCData::clear_has_undlybias() {
  _has_bits_[0] &= ~0x00000400u;
}
void OCData::clear_undlybias() {
  undlybias_ = 0;
  clear_has_undlybias();
}
 double OCData::undlybias() const {
  // @@protoc_insertion_point(field_get:XT.OCData.undlybias)
  return undlybias_;
}
 void OCData::set_undlybias(double value) {
  set_has_undlybias();
  undlybias_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.undlybias)
}

// optional int64 lastundlyquotets = 15 [default = 0];
bool OCData::has_lastundlyquotets() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OCData::set_has_lastundlyquotets() {
  _has_bits_[0] |= 0x00000800u;
}
void OCData::clear_has_lastundlyquotets() {
  _has_bits_[0] &= ~0x00000800u;
}
void OCData::clear_lastundlyquotets() {
  lastundlyquotets_ = GOOGLE_LONGLONG(0);
  clear_has_lastundlyquotets();
}
 ::google::protobuf::int64 OCData::lastundlyquotets() const {
  // @@protoc_insertion_point(field_get:XT.OCData.lastundlyquotets)
  return lastundlyquotets_;
}
 void OCData::set_lastundlyquotets(::google::protobuf::int64 value) {
  set_has_lastundlyquotets();
  lastundlyquotets_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.lastundlyquotets)
}

// optional int64 lastoptionquotets = 16 [default = 0];
bool OCData::has_lastoptionquotets() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OCData::set_has_lastoptionquotets() {
  _has_bits_[0] |= 0x00001000u;
}
void OCData::clear_has_lastoptionquotets() {
  _has_bits_[0] &= ~0x00001000u;
}
void OCData::clear_lastoptionquotets() {
  lastoptionquotets_ = GOOGLE_LONGLONG(0);
  clear_has_lastoptionquotets();
}
 ::google::protobuf::int64 OCData::lastoptionquotets() const {
  // @@protoc_insertion_point(field_get:XT.OCData.lastoptionquotets)
  return lastoptionquotets_;
}
 void OCData::set_lastoptionquotets(::google::protobuf::int64 value) {
  set_has_lastoptionquotets();
  lastoptionquotets_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.lastoptionquotets)
}

// optional double ocrriskpnltdy = 17 [default = 0];
bool OCData::has_ocrriskpnltdy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OCData::set_has_ocrriskpnltdy() {
  _has_bits_[0] |= 0x00002000u;
}
void OCData::clear_has_ocrriskpnltdy() {
  _has_bits_[0] &= ~0x00002000u;
}
void OCData::clear_ocrriskpnltdy() {
  ocrriskpnltdy_ = 0;
  clear_has_ocrriskpnltdy();
}
 double OCData::ocrriskpnltdy() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocrriskpnltdy)
  return ocrriskpnltdy_;
}
 void OCData::set_ocrriskpnltdy(double value) {
  set_has_ocrriskpnltdy();
  ocrriskpnltdy_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocrriskpnltdy)
}

// optional double ocuriskpnltdy = 18 [default = 0];
bool OCData::has_ocuriskpnltdy() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OCData::set_has_ocuriskpnltdy() {
  _has_bits_[0] |= 0x00004000u;
}
void OCData::clear_has_ocuriskpnltdy() {
  _has_bits_[0] &= ~0x00004000u;
}
void OCData::clear_ocuriskpnltdy() {
  ocuriskpnltdy_ = 0;
  clear_has_ocuriskpnltdy();
}
 double OCData::ocuriskpnltdy() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocuriskpnltdy)
  return ocuriskpnltdy_;
}
 void OCData::set_ocuriskpnltdy(double value) {
  set_has_ocuriskpnltdy();
  ocuriskpnltdy_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocuriskpnltdy)
}

// optional double ocrriskpnlytd = 19 [default = 0];
bool OCData::has_ocrriskpnlytd() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void OCData::set_has_ocrriskpnlytd() {
  _has_bits_[0] |= 0x00008000u;
}
void OCData::clear_has_ocrriskpnlytd() {
  _has_bits_[0] &= ~0x00008000u;
}
void OCData::clear_ocrriskpnlytd() {
  ocrriskpnlytd_ = 0;
  clear_has_ocrriskpnlytd();
}
 double OCData::ocrriskpnlytd() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocrriskpnlytd)
  return ocrriskpnlytd_;
}
 void OCData::set_ocrriskpnlytd(double value) {
  set_has_ocrriskpnlytd();
  ocrriskpnlytd_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocrriskpnlytd)
}

// optional double ocuriskpnlytd = 20 [default = 0];
bool OCData::has_ocuriskpnlytd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void OCData::set_has_ocuriskpnlytd() {
  _has_bits_[0] |= 0x00010000u;
}
void OCData::clear_has_ocuriskpnlytd() {
  _has_bits_[0] &= ~0x00010000u;
}
void OCData::clear_ocuriskpnlytd() {
  ocuriskpnlytd_ = 0;
  clear_has_ocuriskpnlytd();
}
 double OCData::ocuriskpnlytd() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocuriskpnlytd)
  return ocuriskpnlytd_;
}
 void OCData::set_ocuriskpnlytd(double value) {
  set_has_ocuriskpnlytd();
  ocuriskpnlytd_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocuriskpnlytd)
}

// optional double xscale = 21 [default = 1];
bool OCData::has_xscale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void OCData::set_has_xscale() {
  _has_bits_[0] |= 0x00020000u;
}
void OCData::clear_has_xscale() {
  _has_bits_[0] &= ~0x00020000u;
}
void OCData::clear_xscale() {
  xscale_ = 1;
  clear_has_xscale();
}
 double OCData::xscale() const {
  // @@protoc_insertion_point(field_get:XT.OCData.xscale)
  return xscale_;
}
 void OCData::set_xscale(double value) {
  set_has_xscale();
  xscale_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.xscale)
}

// optional int32 pxprecision = 22 [default = 5];
bool OCData::has_pxprecision() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void OCData::set_has_pxprecision() {
  _has_bits_[0] |= 0x00040000u;
}
void OCData::clear_has_pxprecision() {
  _has_bits_[0] &= ~0x00040000u;
}
void OCData::clear_pxprecision() {
  pxprecision_ = 5;
  clear_has_pxprecision();
}
 ::google::protobuf::int32 OCData::pxprecision() const {
  // @@protoc_insertion_point(field_get:XT.OCData.pxprecision)
  return pxprecision_;
}
 void OCData::set_pxprecision(::google::protobuf::int32 value) {
  set_has_pxprecision();
  pxprecision_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.pxprecision)
}

// optional int32 exercisetype = 23 [default = 0];
bool OCData::has_exercisetype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void OCData::set_has_exercisetype() {
  _has_bits_[0] |= 0x00080000u;
}
void OCData::clear_has_exercisetype() {
  _has_bits_[0] &= ~0x00080000u;
}
void OCData::clear_exercisetype() {
  exercisetype_ = 0;
  clear_has_exercisetype();
}
 ::google::protobuf::int32 OCData::exercisetype() const {
  // @@protoc_insertion_point(field_get:XT.OCData.exercisetype)
  return exercisetype_;
}
 void OCData::set_exercisetype(::google::protobuf::int32 value) {
  set_has_exercisetype();
  exercisetype_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.exercisetype)
}

// optional double minoptionpxtick = 24 [default = 0];
bool OCData::has_minoptionpxtick() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void OCData::set_has_minoptionpxtick() {
  _has_bits_[0] |= 0x00100000u;
}
void OCData::clear_has_minoptionpxtick() {
  _has_bits_[0] &= ~0x00100000u;
}
void OCData::clear_minoptionpxtick() {
  minoptionpxtick_ = 0;
  clear_has_minoptionpxtick();
}
 double OCData::minoptionpxtick() const {
  // @@protoc_insertion_point(field_get:XT.OCData.minoptionpxtick)
  return minoptionpxtick_;
}
 void OCData::set_minoptionpxtick(double value) {
  set_has_minoptionpxtick();
  minoptionpxtick_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.minoptionpxtick)
}

// optional int32 ocbuyvolume = 25 [default = 0];
bool OCData::has_ocbuyvolume() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void OCData::set_has_ocbuyvolume() {
  _has_bits_[0] |= 0x00200000u;
}
void OCData::clear_has_ocbuyvolume() {
  _has_bits_[0] &= ~0x00200000u;
}
void OCData::clear_ocbuyvolume() {
  ocbuyvolume_ = 0;
  clear_has_ocbuyvolume();
}
 ::google::protobuf::int32 OCData::ocbuyvolume() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocbuyvolume)
  return ocbuyvolume_;
}
 void OCData::set_ocbuyvolume(::google::protobuf::int32 value) {
  set_has_ocbuyvolume();
  ocbuyvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocbuyvolume)
}

// optional int32 ocsellvolume = 26 [default = 0];
bool OCData::has_ocsellvolume() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void OCData::set_has_ocsellvolume() {
  _has_bits_[0] |= 0x00400000u;
}
void OCData::clear_has_ocsellvolume() {
  _has_bits_[0] &= ~0x00400000u;
}
void OCData::clear_ocsellvolume() {
  ocsellvolume_ = 0;
  clear_has_ocsellvolume();
}
 ::google::protobuf::int32 OCData::ocsellvolume() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocsellvolume)
  return ocsellvolume_;
}
 void OCData::set_ocsellvolume(::google::protobuf::int32 value) {
  set_has_ocsellvolume();
  ocsellvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocsellvolume)
}

// optional double ocbuyamount = 27 [default = 0];
bool OCData::has_ocbuyamount() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void OCData::set_has_ocbuyamount() {
  _has_bits_[0] |= 0x00800000u;
}
void OCData::clear_has_ocbuyamount() {
  _has_bits_[0] &= ~0x00800000u;
}
void OCData::clear_ocbuyamount() {
  ocbuyamount_ = 0;
  clear_has_ocbuyamount();
}
 double OCData::ocbuyamount() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocbuyamount)
  return ocbuyamount_;
}
 void OCData::set_ocbuyamount(double value) {
  set_has_ocbuyamount();
  ocbuyamount_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocbuyamount)
}

// optional double ocsellamount = 28 [default = 0];
bool OCData::has_ocsellamount() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void OCData::set_has_ocsellamount() {
  _has_bits_[0] |= 0x01000000u;
}
void OCData::clear_has_ocsellamount() {
  _has_bits_[0] &= ~0x01000000u;
}
void OCData::clear_ocsellamount() {
  ocsellamount_ = 0;
  clear_has_ocsellamount();
}
 double OCData::ocsellamount() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ocsellamount)
  return ocsellamount_;
}
 void OCData::set_ocsellamount(double value) {
  set_has_ocsellamount();
  ocsellamount_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ocsellamount)
}

// optional double T = 30 [default = 0];
bool OCData::has_t() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void OCData::set_has_t() {
  _has_bits_[0] |= 0x02000000u;
}
void OCData::clear_has_t() {
  _has_bits_[0] &= ~0x02000000u;
}
void OCData::clear_t() {
  t_ = 0;
  clear_has_t();
}
 double OCData::t() const {
  // @@protoc_insertion_point(field_get:XT.OCData.T)
  return t_;
}
 void OCData::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.T)
}

// optional double dte = 31 [default = 0];
bool OCData::has_dte() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void OCData::set_has_dte() {
  _has_bits_[0] |= 0x04000000u;
}
void OCData::clear_has_dte() {
  _has_bits_[0] &= ~0x04000000u;
}
void OCData::clear_dte() {
  dte_ = 0;
  clear_has_dte();
}
 double OCData::dte() const {
  // @@protoc_insertion_point(field_get:XT.OCData.dte)
  return dte_;
}
 void OCData::set_dte(double value) {
  set_has_dte();
  dte_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.dte)
}

// optional double tte = 32 [default = 0];
bool OCData::has_tte() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void OCData::set_has_tte() {
  _has_bits_[0] |= 0x08000000u;
}
void OCData::clear_has_tte() {
  _has_bits_[0] &= ~0x08000000u;
}
void OCData::clear_tte() {
  tte_ = 0;
  clear_has_tte();
}
 double OCData::tte() const {
  // @@protoc_insertion_point(field_get:XT.OCData.tte)
  return tte_;
}
 void OCData::set_tte(double value) {
  set_has_tte();
  tte_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.tte)
}

// optional int32 nstrikes = 33 [default = 0];
bool OCData::has_nstrikes() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void OCData::set_has_nstrikes() {
  _has_bits_[0] |= 0x10000000u;
}
void OCData::clear_has_nstrikes() {
  _has_bits_[0] &= ~0x10000000u;
}
void OCData::clear_nstrikes() {
  nstrikes_ = 0;
  clear_has_nstrikes();
}
 ::google::protobuf::int32 OCData::nstrikes() const {
  // @@protoc_insertion_point(field_get:XT.OCData.nstrikes)
  return nstrikes_;
}
 void OCData::set_nstrikes(::google::protobuf::int32 value) {
  set_has_nstrikes();
  nstrikes_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.nstrikes)
}

// optional int32 ncalls = 34 [default = 0];
bool OCData::has_ncalls() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void OCData::set_has_ncalls() {
  _has_bits_[0] |= 0x20000000u;
}
void OCData::clear_has_ncalls() {
  _has_bits_[0] &= ~0x20000000u;
}
void OCData::clear_ncalls() {
  ncalls_ = 0;
  clear_has_ncalls();
}
 ::google::protobuf::int32 OCData::ncalls() const {
  // @@protoc_insertion_point(field_get:XT.OCData.ncalls)
  return ncalls_;
}
 void OCData::set_ncalls(::google::protobuf::int32 value) {
  set_has_ncalls();
  ncalls_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.ncalls)
}

// optional int32 nputs = 35 [default = 0];
bool OCData::has_nputs() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void OCData::set_has_nputs() {
  _has_bits_[0] |= 0x40000000u;
}
void OCData::clear_has_nputs() {
  _has_bits_[0] &= ~0x40000000u;
}
void OCData::clear_nputs() {
  nputs_ = 0;
  clear_has_nputs();
}
 ::google::protobuf::int32 OCData::nputs() const {
  // @@protoc_insertion_point(field_get:XT.OCData.nputs)
  return nputs_;
}
 void OCData::set_nputs(::google::protobuf::int32 value) {
  set_has_nputs();
  nputs_ = value;
  // @@protoc_insertion_point(field_set:XT.OCData.nputs)
}

// map<int32, double> tagdoublemap = 50;
int OCData::tagdoublemap_size() const {
  return tagdoublemap_.size();
}
void OCData::clear_tagdoublemap() {
  tagdoublemap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
OCData::tagdoublemap() const {
  // @@protoc_insertion_point(field_map:XT.OCData.tagdoublemap)
  return tagdoublemap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
OCData::mutable_tagdoublemap() {
  // @@protoc_insertion_point(field_mutable_map:XT.OCData.tagdoublemap)
  return tagdoublemap_.MutableMap();
}

// map<int32, int32> tagintmap = 51;
int OCData::tagintmap_size() const {
  return tagintmap_.size();
}
void OCData::clear_tagintmap() {
  tagintmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
OCData::tagintmap() const {
  // @@protoc_insertion_point(field_map:XT.OCData.tagintmap)
  return tagintmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
OCData::mutable_tagintmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.OCData.tagintmap)
  return tagintmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PICfgData::kDeltanormmaxFieldNumber;
const int PICfgData::kNamestrmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PICfgData::PICfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PICfgData)
}

void PICfgData::InitAsDefaultInstance() {
}

PICfgData::PICfgData(const PICfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PICfgData)
}

void PICfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deltanormmax_ = 0;
  namestrmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  namestrmap_.SetEntryDescriptor(
      &::XT::PICfgData_NamestrmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PICfgData::~PICfgData() {
  // @@protoc_insertion_point(destructor:XT.PICfgData)
  SharedDtor();
}

void PICfgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PICfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PICfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PICfgData_descriptor_;
}

const PICfgData& PICfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PICfgData* PICfgData::default_instance_ = NULL;

PICfgData* PICfgData::New(::google::protobuf::Arena* arena) const {
  PICfgData* n = new PICfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PICfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PICfgData)
  deltanormmax_ = 0;
  namestrmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PICfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PICfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double deltanormmax = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltanormmax_)));
          set_has_deltanormmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_namestrmap;
        break;
      }

      // map<string, string> namestrmap = 30;
      case 30: {
        if (tag == 242) {
         parse_namestrmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_namestrmap:
          PICfgData_NamestrmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&namestrmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PICfgData.NamestrmapEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PICfgData.NamestrmapEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_namestrmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PICfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PICfgData)
  return false;
#undef DO_
}

void PICfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PICfgData)
  // optional double deltanormmax = 1 [default = 0];
  if (has_deltanormmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->deltanormmax(), output);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PICfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PICfgData.NamestrmapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PICfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PICfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PICfgData)
}

::google::protobuf::uint8* PICfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PICfgData)
  // optional double deltanormmax = 1 [default = 0];
  if (has_deltanormmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->deltanormmax(), target);
  }

  // map<string, string> namestrmap = 30;
  if (!this->namestrmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PICfgData.NamestrmapEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.PICfgData.NamestrmapEntry.value");
      }
    };

    if (deterministic &&
        this->namestrmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->namestrmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PICfgData_NamestrmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namestrmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PICfgData_NamestrmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namestrmap().begin();
          it != this->namestrmap().end(); ++it) {
        entry.reset(namestrmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PICfgData)
  return target;
}

int PICfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PICfgData)
  int total_size = 0;

  // optional double deltanormmax = 1 [default = 0];
  if (has_deltanormmax()) {
    total_size += 1 + 8;
  }

  // map<string, string> namestrmap = 30;
  total_size += 2 * this->namestrmap_size();
  {
    ::google::protobuf::scoped_ptr<PICfgData_NamestrmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->namestrmap().begin();
        it != this->namestrmap().end(); ++it) {
      entry.reset(namestrmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PICfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PICfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PICfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PICfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PICfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PICfgData)
    MergeFrom(*source);
  }
}

void PICfgData::MergeFrom(const PICfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PICfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  namestrmap_.MergeFrom(from.namestrmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deltanormmax()) {
      set_deltanormmax(from.deltanormmax());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PICfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PICfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PICfgData::CopyFrom(const PICfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PICfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PICfgData::IsInitialized() const {

  return true;
}

void PICfgData::Swap(PICfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PICfgData::InternalSwap(PICfgData* other) {
  std::swap(deltanormmax_, other->deltanormmax_);
  namestrmap_.Swap(&other->namestrmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PICfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PICfgData_descriptor_;
  metadata.reflection = PICfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PICfgData

// optional double deltanormmax = 1 [default = 0];
bool PICfgData::has_deltanormmax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PICfgData::set_has_deltanormmax() {
  _has_bits_[0] |= 0x00000001u;
}
void PICfgData::clear_has_deltanormmax() {
  _has_bits_[0] &= ~0x00000001u;
}
void PICfgData::clear_deltanormmax() {
  deltanormmax_ = 0;
  clear_has_deltanormmax();
}
 double PICfgData::deltanormmax() const {
  // @@protoc_insertion_point(field_get:XT.PICfgData.deltanormmax)
  return deltanormmax_;
}
 void PICfgData::set_deltanormmax(double value) {
  set_has_deltanormmax();
  deltanormmax_ = value;
  // @@protoc_insertion_point(field_set:XT.PICfgData.deltanormmax)
}

// map<string, string> namestrmap = 30;
int PICfgData::namestrmap_size() const {
  return namestrmap_.size();
}
void PICfgData::clear_namestrmap() {
  namestrmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
PICfgData::namestrmap() const {
  // @@protoc_insertion_point(field_map:XT.PICfgData.namestrmap)
  return namestrmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
PICfgData::mutable_namestrmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.PICfgData.namestrmap)
  return namestrmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PIData::kNameFieldNumber;
const int PIData::kProductFieldNumber;
const int PIData::kTradingdayFieldNumber;
const int PIData::kPrevtradingdayFieldNumber;
const int PIData::kCurrmkttsFieldNumber;
const int PIData::kCurrsessionidxFieldNumber;
const int PIData::kCurrsessionbegintsFieldNumber;
const int PIData::kCurrsessionendtsFieldNumber;
const int PIData::kTagdoublemapFieldNumber;
const int PIData::kTagintmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PIData::PIData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PIData)
}

void PIData::InitAsDefaultInstance() {
}

PIData::PIData(const PIData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PIData)
}

void PIData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_ = 0;
  prevtradingday_ = 0;
  currmktts_ = GOOGLE_LONGLONG(0);
  currsessionidx_ = 0;
  currsessionbegints_ = GOOGLE_LONGLONG(0);
  currsessionendts_ = GOOGLE_LONGLONG(0);
  tagdoublemap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagdoublemap_.SetEntryDescriptor(
      &::XT::PIData_TagdoublemapEntry_descriptor_);
  tagintmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tagintmap_.SetEntryDescriptor(
      &::XT::PIData_TagintmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PIData::~PIData() {
  // @@protoc_insertion_point(destructor:XT.PIData)
  SharedDtor();
}

void PIData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PIData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PIData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PIData_descriptor_;
}

const PIData& PIData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PIData* PIData::default_instance_ = NULL;

PIData* PIData::New(::google::protobuf::Arena* arena) const {
  PIData* n = new PIData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PIData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PIData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PIData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PIData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(tradingday_, currsessionendts_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_product()) {
      product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    currsessionidx_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  tagdoublemap_.Clear();
  tagintmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PIData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PIData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PIData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }

      // optional string product = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PIData.product");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tradingday;
        break;
      }

      // optional int32 tradingday = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_tradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prevtradingday;
        break;
      }

      // optional int32 prevtradingday = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_prevtradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevtradingday_)));
          set_has_prevtradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_currmktts;
        break;
      }

      // optional int64 currmktts = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_currmktts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currmktts_)));
          set_has_currmktts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currsessionidx;
        break;
      }

      // optional int32 currsessionidx = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_currsessionidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currsessionidx_)));
          set_has_currsessionidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_currsessionbegints;
        break;
      }

      // optional int64 currsessionbegints = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_currsessionbegints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currsessionbegints_)));
          set_has_currsessionbegints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_currsessionendts;
        break;
      }

      // optional int64 currsessionendts = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_currsessionendts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currsessionendts_)));
          set_has_currsessionendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_tagdoublemap;
        break;
      }

      // map<int32, double> tagdoublemap = 30;
      case 30: {
        if (tag == 242) {
         parse_tagdoublemap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagdoublemap:
          PIData_TagdoublemapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&tagdoublemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_tagdoublemap;
        if (input->ExpectTag(250)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, int32> tagintmap = 31;
      case 31: {
        if (tag == 250) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tagintmap:
          PIData_TagintmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&tagintmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_loop_tagintmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PIData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PIData)
  return false;
#undef DO_
}

void PIData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PIData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PIData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string product = 2 [default = ""];
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PIData.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product(), output);
  }

  // optional int32 tradingday = 3 [default = 0];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tradingday(), output);
  }

  // optional int32 prevtradingday = 4 [default = 0];
  if (has_prevtradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevtradingday(), output);
  }

  // optional int64 currmktts = 5 [default = 0];
  if (has_currmktts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->currmktts(), output);
  }

  // optional int32 currsessionidx = 6 [default = 0];
  if (has_currsessionidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currsessionidx(), output);
  }

  // optional int64 currsessionbegints = 7 [default = 0];
  if (has_currsessionbegints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->currsessionbegints(), output);
  }

  // optional int64 currsessionendts = 8 [default = 0];
  if (has_currsessionendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->currsessionendts(), output);
  }

  // map<int32, double> tagdoublemap = 30;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PIData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PIData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
      }
    }
  }

  // map<int32, int32> tagintmap = 31;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PIData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            31, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PIData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            31, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PIData)
}

::google::protobuf::uint8* PIData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PIData)
  // optional string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PIData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string product = 2 [default = ""];
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PIData.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product(), target);
  }

  // optional int32 tradingday = 3 [default = 0];
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tradingday(), target);
  }

  // optional int32 prevtradingday = 4 [default = 0];
  if (has_prevtradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevtradingday(), target);
  }

  // optional int64 currmktts = 5 [default = 0];
  if (has_currmktts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->currmktts(), target);
  }

  // optional int32 currsessionidx = 6 [default = 0];
  if (has_currsessionidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currsessionidx(), target);
  }

  // optional int64 currsessionbegints = 7 [default = 0];
  if (has_currsessionbegints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->currsessionbegints(), target);
  }

  // optional int64 currsessionendts = 8 [default = 0];
  if (has_currsessionendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->currsessionendts(), target);
  }

  // map<int32, double> tagdoublemap = 30;
  if (!this->tagdoublemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagdoublemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagdoublemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PIData_TagdoublemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PIData_TagdoublemapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->tagdoublemap().begin();
          it != this->tagdoublemap().end(); ++it) {
        entry.reset(tagdoublemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int32> tagintmap = 31;
  if (!this->tagintmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tagintmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tagintmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PIData_TagintmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tagintmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       31, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PIData_TagintmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->tagintmap().begin();
          it != this->tagintmap().end(); ++it) {
        entry.reset(tagintmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       31, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PIData)
  return target;
}

int PIData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PIData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string product = 2 [default = ""];
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional int32 tradingday = 3 [default = 0];
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // optional int32 prevtradingday = 4 [default = 0];
    if (has_prevtradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevtradingday());
    }

    // optional int64 currmktts = 5 [default = 0];
    if (has_currmktts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currmktts());
    }

    // optional int32 currsessionidx = 6 [default = 0];
    if (has_currsessionidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currsessionidx());
    }

    // optional int64 currsessionbegints = 7 [default = 0];
    if (has_currsessionbegints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currsessionbegints());
    }

    // optional int64 currsessionendts = 8 [default = 0];
    if (has_currsessionendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currsessionendts());
    }

  }
  // map<int32, double> tagdoublemap = 30;
  total_size += 2 * this->tagdoublemap_size();
  {
    ::google::protobuf::scoped_ptr<PIData_TagdoublemapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->tagdoublemap().begin();
        it != this->tagdoublemap().end(); ++it) {
      entry.reset(tagdoublemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int32> tagintmap = 31;
  total_size += 2 * this->tagintmap_size();
  {
    ::google::protobuf::scoped_ptr<PIData_TagintmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->tagintmap().begin();
        it != this->tagintmap().end(); ++it) {
      entry.reset(tagintmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PIData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PIData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PIData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PIData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PIData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PIData)
    MergeFrom(*source);
  }
}

void PIData::MergeFrom(const PIData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PIData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tagdoublemap_.MergeFrom(from.tagdoublemap_);
  tagintmap_.MergeFrom(from.tagintmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_product()) {
      set_has_product();
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_prevtradingday()) {
      set_prevtradingday(from.prevtradingday());
    }
    if (from.has_currmktts()) {
      set_currmktts(from.currmktts());
    }
    if (from.has_currsessionidx()) {
      set_currsessionidx(from.currsessionidx());
    }
    if (from.has_currsessionbegints()) {
      set_currsessionbegints(from.currsessionbegints());
    }
    if (from.has_currsessionendts()) {
      set_currsessionendts(from.currsessionendts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PIData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PIData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PIData::CopyFrom(const PIData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PIData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PIData::IsInitialized() const {

  return true;
}

void PIData::Swap(PIData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PIData::InternalSwap(PIData* other) {
  name_.Swap(&other->name_);
  product_.Swap(&other->product_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(prevtradingday_, other->prevtradingday_);
  std::swap(currmktts_, other->currmktts_);
  std::swap(currsessionidx_, other->currsessionidx_);
  std::swap(currsessionbegints_, other->currsessionbegints_);
  std::swap(currsessionendts_, other->currsessionendts_);
  tagdoublemap_.Swap(&other->tagdoublemap_);
  tagintmap_.Swap(&other->tagintmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PIData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PIData_descriptor_;
  metadata.reflection = PIData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PIData

// optional string name = 1 [default = ""];
bool PIData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PIData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PIData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PIData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PIData::name() const {
  // @@protoc_insertion_point(field_get:XT.PIData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PIData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PIData.name)
}
 void PIData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PIData.name)
}
 void PIData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PIData.name)
}
 ::std::string* PIData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:XT.PIData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PIData::release_name() {
  // @@protoc_insertion_point(field_release:XT.PIData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PIData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XT.PIData.name)
}

// optional string product = 2 [default = ""];
bool PIData::has_product() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PIData::set_has_product() {
  _has_bits_[0] |= 0x00000002u;
}
void PIData::clear_has_product() {
  _has_bits_[0] &= ~0x00000002u;
}
void PIData::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}
 const ::std::string& PIData::product() const {
  // @@protoc_insertion_point(field_get:XT.PIData.product)
  return product_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PIData::set_product(const ::std::string& value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PIData.product)
}
 void PIData::set_product(const char* value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PIData.product)
}
 void PIData::set_product(const char* value, size_t size) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PIData.product)
}
 ::std::string* PIData::mutable_product() {
  set_has_product();
  // @@protoc_insertion_point(field_mutable:XT.PIData.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PIData::release_product() {
  // @@protoc_insertion_point(field_release:XT.PIData.product)
  clear_has_product();
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PIData::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    set_has_product();
  } else {
    clear_has_product();
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:XT.PIData.product)
}

// optional int32 tradingday = 3 [default = 0];
bool PIData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PIData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000004u;
}
void PIData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000004u;
}
void PIData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
 ::google::protobuf::int32 PIData::tradingday() const {
  // @@protoc_insertion_point(field_get:XT.PIData.tradingday)
  return tradingday_;
}
 void PIData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.PIData.tradingday)
}

// optional int32 prevtradingday = 4 [default = 0];
bool PIData::has_prevtradingday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PIData::set_has_prevtradingday() {
  _has_bits_[0] |= 0x00000008u;
}
void PIData::clear_has_prevtradingday() {
  _has_bits_[0] &= ~0x00000008u;
}
void PIData::clear_prevtradingday() {
  prevtradingday_ = 0;
  clear_has_prevtradingday();
}
 ::google::protobuf::int32 PIData::prevtradingday() const {
  // @@protoc_insertion_point(field_get:XT.PIData.prevtradingday)
  return prevtradingday_;
}
 void PIData::set_prevtradingday(::google::protobuf::int32 value) {
  set_has_prevtradingday();
  prevtradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.PIData.prevtradingday)
}

// optional int64 currmktts = 5 [default = 0];
bool PIData::has_currmktts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PIData::set_has_currmktts() {
  _has_bits_[0] |= 0x00000010u;
}
void PIData::clear_has_currmktts() {
  _has_bits_[0] &= ~0x00000010u;
}
void PIData::clear_currmktts() {
  currmktts_ = GOOGLE_LONGLONG(0);
  clear_has_currmktts();
}
 ::google::protobuf::int64 PIData::currmktts() const {
  // @@protoc_insertion_point(field_get:XT.PIData.currmktts)
  return currmktts_;
}
 void PIData::set_currmktts(::google::protobuf::int64 value) {
  set_has_currmktts();
  currmktts_ = value;
  // @@protoc_insertion_point(field_set:XT.PIData.currmktts)
}

// optional int32 currsessionidx = 6 [default = 0];
bool PIData::has_currsessionidx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PIData::set_has_currsessionidx() {
  _has_bits_[0] |= 0x00000020u;
}
void PIData::clear_has_currsessionidx() {
  _has_bits_[0] &= ~0x00000020u;
}
void PIData::clear_currsessionidx() {
  currsessionidx_ = 0;
  clear_has_currsessionidx();
}
 ::google::protobuf::int32 PIData::currsessionidx() const {
  // @@protoc_insertion_point(field_get:XT.PIData.currsessionidx)
  return currsessionidx_;
}
 void PIData::set_currsessionidx(::google::protobuf::int32 value) {
  set_has_currsessionidx();
  currsessionidx_ = value;
  // @@protoc_insertion_point(field_set:XT.PIData.currsessionidx)
}

// optional int64 currsessionbegints = 7 [default = 0];
bool PIData::has_currsessionbegints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PIData::set_has_currsessionbegints() {
  _has_bits_[0] |= 0x00000040u;
}
void PIData::clear_has_currsessionbegints() {
  _has_bits_[0] &= ~0x00000040u;
}
void PIData::clear_currsessionbegints() {
  currsessionbegints_ = GOOGLE_LONGLONG(0);
  clear_has_currsessionbegints();
}
 ::google::protobuf::int64 PIData::currsessionbegints() const {
  // @@protoc_insertion_point(field_get:XT.PIData.currsessionbegints)
  return currsessionbegints_;
}
 void PIData::set_currsessionbegints(::google::protobuf::int64 value) {
  set_has_currsessionbegints();
  currsessionbegints_ = value;
  // @@protoc_insertion_point(field_set:XT.PIData.currsessionbegints)
}

// optional int64 currsessionendts = 8 [default = 0];
bool PIData::has_currsessionendts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PIData::set_has_currsessionendts() {
  _has_bits_[0] |= 0x00000080u;
}
void PIData::clear_has_currsessionendts() {
  _has_bits_[0] &= ~0x00000080u;
}
void PIData::clear_currsessionendts() {
  currsessionendts_ = GOOGLE_LONGLONG(0);
  clear_has_currsessionendts();
}
 ::google::protobuf::int64 PIData::currsessionendts() const {
  // @@protoc_insertion_point(field_get:XT.PIData.currsessionendts)
  return currsessionendts_;
}
 void PIData::set_currsessionendts(::google::protobuf::int64 value) {
  set_has_currsessionendts();
  currsessionendts_ = value;
  // @@protoc_insertion_point(field_set:XT.PIData.currsessionendts)
}

// map<int32, double> tagdoublemap = 30;
int PIData::tagdoublemap_size() const {
  return tagdoublemap_.size();
}
void PIData::clear_tagdoublemap() {
  tagdoublemap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
PIData::tagdoublemap() const {
  // @@protoc_insertion_point(field_map:XT.PIData.tagdoublemap)
  return tagdoublemap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
PIData::mutable_tagdoublemap() {
  // @@protoc_insertion_point(field_mutable_map:XT.PIData.tagdoublemap)
  return tagdoublemap_.MutableMap();
}

// map<int32, int32> tagintmap = 31;
int PIData::tagintmap_size() const {
  return tagintmap_.size();
}
void PIData::clear_tagintmap() {
  tagintmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
PIData::tagintmap() const {
  // @@protoc_insertion_point(field_map:XT.PIData.tagintmap)
  return tagintmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
PIData::mutable_tagintmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.PIData.tagintmap)
  return tagintmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderMgrData::kOrderpoolszFieldNumber;
const int OrderMgrData::kQuotepoolszFieldNumber;
const int OrderMgrData::kNumorderssentFieldNumber;
const int OrderMgrData::kNumorderssentrejectedFieldNumber;
const int OrderMgrData::kNumorderscxlsentFieldNumber;
const int OrderMgrData::kNumorderscxlrejectedFieldNumber;
const int OrderMgrData::kNumquotessentFieldNumber;
const int OrderMgrData::kNumquotessentrejectedFieldNumber;
const int OrderMgrData::kNumquotescxlsentFieldNumber;
const int OrderMgrData::kNumquotescxlrejectedFieldNumber;
const int OrderMgrData::kTssuspendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderMgrData::OrderMgrData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OrderMgrData)
}

void OrderMgrData::InitAsDefaultInstance() {
}

OrderMgrData::OrderMgrData(const OrderMgrData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OrderMgrData)
}

void OrderMgrData::SharedCtor() {
  _cached_size_ = 0;
  orderpoolsz_ = 128;
  quotepoolsz_ = 0;
  numorderssent_ = 0;
  numorderssentrejected_ = 0;
  numorderscxlsent_ = 0;
  numorderscxlrejected_ = 0;
  numquotessent_ = 0;
  numquotessentrejected_ = 0;
  numquotescxlsent_ = 0;
  numquotescxlrejected_ = 0;
  tssuspend_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderMgrData::~OrderMgrData() {
  // @@protoc_insertion_point(destructor:XT.OrderMgrData)
  SharedDtor();
}

void OrderMgrData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderMgrData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderMgrData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderMgrData_descriptor_;
}

const OrderMgrData& OrderMgrData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OrderMgrData* OrderMgrData::default_instance_ = NULL;

OrderMgrData* OrderMgrData::New(::google::protobuf::Arena* arena) const {
  OrderMgrData* n = new OrderMgrData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderMgrData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OrderMgrData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OrderMgrData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OrderMgrData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(quotepoolsz_, numquotessentrejected_);
    orderpoolsz_ = 128;
  }
  ZR_(numquotescxlsent_, tssuspend_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrderMgrData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OrderMgrData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 orderpoolsz = 1 [default = 128];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderpoolsz_)));
          set_has_orderpoolsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quotepoolsz;
        break;
      }

      // optional int32 quotepoolsz = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_quotepoolsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotepoolsz_)));
          set_has_quotepoolsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_numorderssent;
        break;
      }

      // optional int32 numorderssent = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_numorderssent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numorderssent_)));
          set_has_numorderssent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_numorderssentrejected;
        break;
      }

      // optional int32 numorderssentrejected = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_numorderssentrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numorderssentrejected_)));
          set_has_numorderssentrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numorderscxlsent;
        break;
      }

      // optional int32 numorderscxlsent = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_numorderscxlsent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numorderscxlsent_)));
          set_has_numorderscxlsent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_numorderscxlrejected;
        break;
      }

      // optional int32 numorderscxlrejected = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_numorderscxlrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numorderscxlrejected_)));
          set_has_numorderscxlrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_numquotessent;
        break;
      }

      // optional int32 numquotessent = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_numquotessent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numquotessent_)));
          set_has_numquotessent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_numquotessentrejected;
        break;
      }

      // optional int32 numquotessentrejected = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_numquotessentrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numquotessentrejected_)));
          set_has_numquotessentrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_numquotescxlsent;
        break;
      }

      // optional int32 numquotescxlsent = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_numquotescxlsent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numquotescxlsent_)));
          set_has_numquotescxlsent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_numquotescxlrejected;
        break;
      }

      // optional int32 numquotescxlrejected = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_numquotescxlrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numquotescxlrejected_)));
          set_has_numquotescxlrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tssuspend;
        break;
      }

      // optional int64 tssuspend = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_tssuspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tssuspend_)));
          set_has_tssuspend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OrderMgrData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OrderMgrData)
  return false;
#undef DO_
}

void OrderMgrData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OrderMgrData)
  // optional int32 orderpoolsz = 1 [default = 128];
  if (has_orderpoolsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderpoolsz(), output);
  }

  // optional int32 quotepoolsz = 2 [default = 0];
  if (has_quotepoolsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quotepoolsz(), output);
  }

  // optional int32 numorderssent = 3 [default = 0];
  if (has_numorderssent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numorderssent(), output);
  }

  // optional int32 numorderssentrejected = 4 [default = 0];
  if (has_numorderssentrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->numorderssentrejected(), output);
  }

  // optional int32 numorderscxlsent = 5 [default = 0];
  if (has_numorderscxlsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numorderscxlsent(), output);
  }

  // optional int32 numorderscxlrejected = 6 [default = 0];
  if (has_numorderscxlrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->numorderscxlrejected(), output);
  }

  // optional int32 numquotessent = 7 [default = 0];
  if (has_numquotessent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->numquotessent(), output);
  }

  // optional int32 numquotessentrejected = 8 [default = 0];
  if (has_numquotessentrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->numquotessentrejected(), output);
  }

  // optional int32 numquotescxlsent = 9 [default = 0];
  if (has_numquotescxlsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->numquotescxlsent(), output);
  }

  // optional int32 numquotescxlrejected = 10 [default = 0];
  if (has_numquotescxlrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->numquotescxlrejected(), output);
  }

  // optional int64 tssuspend = 11 [default = 0];
  if (has_tssuspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->tssuspend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OrderMgrData)
}

::google::protobuf::uint8* OrderMgrData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OrderMgrData)
  // optional int32 orderpoolsz = 1 [default = 128];
  if (has_orderpoolsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderpoolsz(), target);
  }

  // optional int32 quotepoolsz = 2 [default = 0];
  if (has_quotepoolsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quotepoolsz(), target);
  }

  // optional int32 numorderssent = 3 [default = 0];
  if (has_numorderssent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numorderssent(), target);
  }

  // optional int32 numorderssentrejected = 4 [default = 0];
  if (has_numorderssentrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->numorderssentrejected(), target);
  }

  // optional int32 numorderscxlsent = 5 [default = 0];
  if (has_numorderscxlsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numorderscxlsent(), target);
  }

  // optional int32 numorderscxlrejected = 6 [default = 0];
  if (has_numorderscxlrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->numorderscxlrejected(), target);
  }

  // optional int32 numquotessent = 7 [default = 0];
  if (has_numquotessent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->numquotessent(), target);
  }

  // optional int32 numquotessentrejected = 8 [default = 0];
  if (has_numquotessentrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->numquotessentrejected(), target);
  }

  // optional int32 numquotescxlsent = 9 [default = 0];
  if (has_numquotescxlsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->numquotescxlsent(), target);
  }

  // optional int32 numquotescxlrejected = 10 [default = 0];
  if (has_numquotescxlrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->numquotescxlrejected(), target);
  }

  // optional int64 tssuspend = 11 [default = 0];
  if (has_tssuspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->tssuspend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OrderMgrData)
  return target;
}

int OrderMgrData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OrderMgrData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 orderpoolsz = 1 [default = 128];
    if (has_orderpoolsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderpoolsz());
    }

    // optional int32 quotepoolsz = 2 [default = 0];
    if (has_quotepoolsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotepoolsz());
    }

    // optional int32 numorderssent = 3 [default = 0];
    if (has_numorderssent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numorderssent());
    }

    // optional int32 numorderssentrejected = 4 [default = 0];
    if (has_numorderssentrejected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numorderssentrejected());
    }

    // optional int32 numorderscxlsent = 5 [default = 0];
    if (has_numorderscxlsent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numorderscxlsent());
    }

    // optional int32 numorderscxlrejected = 6 [default = 0];
    if (has_numorderscxlrejected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numorderscxlrejected());
    }

    // optional int32 numquotessent = 7 [default = 0];
    if (has_numquotessent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numquotessent());
    }

    // optional int32 numquotessentrejected = 8 [default = 0];
    if (has_numquotessentrejected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numquotessentrejected());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 numquotescxlsent = 9 [default = 0];
    if (has_numquotescxlsent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numquotescxlsent());
    }

    // optional int32 numquotescxlrejected = 10 [default = 0];
    if (has_numquotescxlrejected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numquotescxlrejected());
    }

    // optional int64 tssuspend = 11 [default = 0];
    if (has_tssuspend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tssuspend());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderMgrData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OrderMgrData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OrderMgrData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderMgrData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OrderMgrData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OrderMgrData)
    MergeFrom(*source);
  }
}

void OrderMgrData::MergeFrom(const OrderMgrData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OrderMgrData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderpoolsz()) {
      set_orderpoolsz(from.orderpoolsz());
    }
    if (from.has_quotepoolsz()) {
      set_quotepoolsz(from.quotepoolsz());
    }
    if (from.has_numorderssent()) {
      set_numorderssent(from.numorderssent());
    }
    if (from.has_numorderssentrejected()) {
      set_numorderssentrejected(from.numorderssentrejected());
    }
    if (from.has_numorderscxlsent()) {
      set_numorderscxlsent(from.numorderscxlsent());
    }
    if (from.has_numorderscxlrejected()) {
      set_numorderscxlrejected(from.numorderscxlrejected());
    }
    if (from.has_numquotessent()) {
      set_numquotessent(from.numquotessent());
    }
    if (from.has_numquotessentrejected()) {
      set_numquotessentrejected(from.numquotessentrejected());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_numquotescxlsent()) {
      set_numquotescxlsent(from.numquotescxlsent());
    }
    if (from.has_numquotescxlrejected()) {
      set_numquotescxlrejected(from.numquotescxlrejected());
    }
    if (from.has_tssuspend()) {
      set_tssuspend(from.tssuspend());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrderMgrData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OrderMgrData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMgrData::CopyFrom(const OrderMgrData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OrderMgrData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMgrData::IsInitialized() const {

  return true;
}

void OrderMgrData::Swap(OrderMgrData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderMgrData::InternalSwap(OrderMgrData* other) {
  std::swap(orderpoolsz_, other->orderpoolsz_);
  std::swap(quotepoolsz_, other->quotepoolsz_);
  std::swap(numorderssent_, other->numorderssent_);
  std::swap(numorderssentrejected_, other->numorderssentrejected_);
  std::swap(numorderscxlsent_, other->numorderscxlsent_);
  std::swap(numorderscxlrejected_, other->numorderscxlrejected_);
  std::swap(numquotessent_, other->numquotessent_);
  std::swap(numquotessentrejected_, other->numquotessentrejected_);
  std::swap(numquotescxlsent_, other->numquotescxlsent_);
  std::swap(numquotescxlrejected_, other->numquotescxlrejected_);
  std::swap(tssuspend_, other->tssuspend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderMgrData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderMgrData_descriptor_;
  metadata.reflection = OrderMgrData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderMgrData

// optional int32 orderpoolsz = 1 [default = 128];
bool OrderMgrData::has_orderpoolsz() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderMgrData::set_has_orderpoolsz() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderMgrData::clear_has_orderpoolsz() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderMgrData::clear_orderpoolsz() {
  orderpoolsz_ = 128;
  clear_has_orderpoolsz();
}
 ::google::protobuf::int32 OrderMgrData::orderpoolsz() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.orderpoolsz)
  return orderpoolsz_;
}
 void OrderMgrData::set_orderpoolsz(::google::protobuf::int32 value) {
  set_has_orderpoolsz();
  orderpoolsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.orderpoolsz)
}

// optional int32 quotepoolsz = 2 [default = 0];
bool OrderMgrData::has_quotepoolsz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderMgrData::set_has_quotepoolsz() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderMgrData::clear_has_quotepoolsz() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderMgrData::clear_quotepoolsz() {
  quotepoolsz_ = 0;
  clear_has_quotepoolsz();
}
 ::google::protobuf::int32 OrderMgrData::quotepoolsz() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.quotepoolsz)
  return quotepoolsz_;
}
 void OrderMgrData::set_quotepoolsz(::google::protobuf::int32 value) {
  set_has_quotepoolsz();
  quotepoolsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.quotepoolsz)
}

// optional int32 numorderssent = 3 [default = 0];
bool OrderMgrData::has_numorderssent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderMgrData::set_has_numorderssent() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderMgrData::clear_has_numorderssent() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderMgrData::clear_numorderssent() {
  numorderssent_ = 0;
  clear_has_numorderssent();
}
 ::google::protobuf::int32 OrderMgrData::numorderssent() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numorderssent)
  return numorderssent_;
}
 void OrderMgrData::set_numorderssent(::google::protobuf::int32 value) {
  set_has_numorderssent();
  numorderssent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numorderssent)
}

// optional int32 numorderssentrejected = 4 [default = 0];
bool OrderMgrData::has_numorderssentrejected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrderMgrData::set_has_numorderssentrejected() {
  _has_bits_[0] |= 0x00000008u;
}
void OrderMgrData::clear_has_numorderssentrejected() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrderMgrData::clear_numorderssentrejected() {
  numorderssentrejected_ = 0;
  clear_has_numorderssentrejected();
}
 ::google::protobuf::int32 OrderMgrData::numorderssentrejected() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numorderssentrejected)
  return numorderssentrejected_;
}
 void OrderMgrData::set_numorderssentrejected(::google::protobuf::int32 value) {
  set_has_numorderssentrejected();
  numorderssentrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numorderssentrejected)
}

// optional int32 numorderscxlsent = 5 [default = 0];
bool OrderMgrData::has_numorderscxlsent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrderMgrData::set_has_numorderscxlsent() {
  _has_bits_[0] |= 0x00000010u;
}
void OrderMgrData::clear_has_numorderscxlsent() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrderMgrData::clear_numorderscxlsent() {
  numorderscxlsent_ = 0;
  clear_has_numorderscxlsent();
}
 ::google::protobuf::int32 OrderMgrData::numorderscxlsent() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numorderscxlsent)
  return numorderscxlsent_;
}
 void OrderMgrData::set_numorderscxlsent(::google::protobuf::int32 value) {
  set_has_numorderscxlsent();
  numorderscxlsent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numorderscxlsent)
}

// optional int32 numorderscxlrejected = 6 [default = 0];
bool OrderMgrData::has_numorderscxlrejected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrderMgrData::set_has_numorderscxlrejected() {
  _has_bits_[0] |= 0x00000020u;
}
void OrderMgrData::clear_has_numorderscxlrejected() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrderMgrData::clear_numorderscxlrejected() {
  numorderscxlrejected_ = 0;
  clear_has_numorderscxlrejected();
}
 ::google::protobuf::int32 OrderMgrData::numorderscxlrejected() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numorderscxlrejected)
  return numorderscxlrejected_;
}
 void OrderMgrData::set_numorderscxlrejected(::google::protobuf::int32 value) {
  set_has_numorderscxlrejected();
  numorderscxlrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numorderscxlrejected)
}

// optional int32 numquotessent = 7 [default = 0];
bool OrderMgrData::has_numquotessent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrderMgrData::set_has_numquotessent() {
  _has_bits_[0] |= 0x00000040u;
}
void OrderMgrData::clear_has_numquotessent() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrderMgrData::clear_numquotessent() {
  numquotessent_ = 0;
  clear_has_numquotessent();
}
 ::google::protobuf::int32 OrderMgrData::numquotessent() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numquotessent)
  return numquotessent_;
}
 void OrderMgrData::set_numquotessent(::google::protobuf::int32 value) {
  set_has_numquotessent();
  numquotessent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numquotessent)
}

// optional int32 numquotessentrejected = 8 [default = 0];
bool OrderMgrData::has_numquotessentrejected() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OrderMgrData::set_has_numquotessentrejected() {
  _has_bits_[0] |= 0x00000080u;
}
void OrderMgrData::clear_has_numquotessentrejected() {
  _has_bits_[0] &= ~0x00000080u;
}
void OrderMgrData::clear_numquotessentrejected() {
  numquotessentrejected_ = 0;
  clear_has_numquotessentrejected();
}
 ::google::protobuf::int32 OrderMgrData::numquotessentrejected() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numquotessentrejected)
  return numquotessentrejected_;
}
 void OrderMgrData::set_numquotessentrejected(::google::protobuf::int32 value) {
  set_has_numquotessentrejected();
  numquotessentrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numquotessentrejected)
}

// optional int32 numquotescxlsent = 9 [default = 0];
bool OrderMgrData::has_numquotescxlsent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OrderMgrData::set_has_numquotescxlsent() {
  _has_bits_[0] |= 0x00000100u;
}
void OrderMgrData::clear_has_numquotescxlsent() {
  _has_bits_[0] &= ~0x00000100u;
}
void OrderMgrData::clear_numquotescxlsent() {
  numquotescxlsent_ = 0;
  clear_has_numquotescxlsent();
}
 ::google::protobuf::int32 OrderMgrData::numquotescxlsent() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numquotescxlsent)
  return numquotescxlsent_;
}
 void OrderMgrData::set_numquotescxlsent(::google::protobuf::int32 value) {
  set_has_numquotescxlsent();
  numquotescxlsent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numquotescxlsent)
}

// optional int32 numquotescxlrejected = 10 [default = 0];
bool OrderMgrData::has_numquotescxlrejected() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OrderMgrData::set_has_numquotescxlrejected() {
  _has_bits_[0] |= 0x00000200u;
}
void OrderMgrData::clear_has_numquotescxlrejected() {
  _has_bits_[0] &= ~0x00000200u;
}
void OrderMgrData::clear_numquotescxlrejected() {
  numquotescxlrejected_ = 0;
  clear_has_numquotescxlrejected();
}
 ::google::protobuf::int32 OrderMgrData::numquotescxlrejected() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.numquotescxlrejected)
  return numquotescxlrejected_;
}
 void OrderMgrData::set_numquotescxlrejected(::google::protobuf::int32 value) {
  set_has_numquotescxlrejected();
  numquotescxlrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.numquotescxlrejected)
}

// optional int64 tssuspend = 11 [default = 0];
bool OrderMgrData::has_tssuspend() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OrderMgrData::set_has_tssuspend() {
  _has_bits_[0] |= 0x00000400u;
}
void OrderMgrData::clear_has_tssuspend() {
  _has_bits_[0] &= ~0x00000400u;
}
void OrderMgrData::clear_tssuspend() {
  tssuspend_ = GOOGLE_LONGLONG(0);
  clear_has_tssuspend();
}
 ::google::protobuf::int64 OrderMgrData::tssuspend() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrData.tssuspend)
  return tssuspend_;
}
 void OrderMgrData::set_tssuspend(::google::protobuf::int64 value) {
  set_has_tssuspend();
  tssuspend_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrData.tssuspend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderMgrCfgData::kOrderpoolszstepFieldNumber;
const int OrderMgrCfgData::kOrderpoolszmaxFieldNumber;
const int OrderMgrCfgData::kQuotepoolszstepFieldNumber;
const int OrderMgrCfgData::kQuotepoolszmaxFieldNumber;
const int OrderMgrCfgData::kMaxreqpersecFieldNumber;
const int OrderMgrCfgData::kMaxfemasreqpersecFieldNumber;
const int OrderMgrCfgData::kMaxorderssentFieldNumber;
const int OrderMgrCfgData::kMaxorderscxledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderMgrCfgData::OrderMgrCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OrderMgrCfgData)
}

void OrderMgrCfgData::InitAsDefaultInstance() {
}

OrderMgrCfgData::OrderMgrCfgData(const OrderMgrCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OrderMgrCfgData)
}

void OrderMgrCfgData::SharedCtor() {
  _cached_size_ = 0;
  orderpoolszstep_ = 128;
  orderpoolszmax_ = 4096;
  quotepoolszstep_ = 128;
  quotepoolszmax_ = 4096;
  maxreqpersec_ = 498;
  maxfemasreqpersec_ = 123;
  maxorderssent_ = 0;
  maxorderscxled_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderMgrCfgData::~OrderMgrCfgData() {
  // @@protoc_insertion_point(destructor:XT.OrderMgrCfgData)
  SharedDtor();
}

void OrderMgrCfgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderMgrCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderMgrCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderMgrCfgData_descriptor_;
}

const OrderMgrCfgData& OrderMgrCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OrderMgrCfgData* OrderMgrCfgData::default_instance_ = NULL;

OrderMgrCfgData* OrderMgrCfgData::New(::google::protobuf::Arena* arena) const {
  OrderMgrCfgData* n = new OrderMgrCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderMgrCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OrderMgrCfgData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OrderMgrCfgData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OrderMgrCfgData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(maxorderssent_, maxorderscxled_);
    orderpoolszstep_ = 128;
    orderpoolszmax_ = 4096;
    quotepoolszstep_ = 128;
    quotepoolszmax_ = 4096;
    maxreqpersec_ = 498;
    maxfemasreqpersec_ = 123;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrderMgrCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OrderMgrCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 orderpoolszstep = 1 [default = 128];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderpoolszstep_)));
          set_has_orderpoolszstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orderpoolszmax;
        break;
      }

      // optional int32 orderpoolszmax = 2 [default = 4096];
      case 2: {
        if (tag == 16) {
         parse_orderpoolszmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderpoolszmax_)));
          set_has_orderpoolszmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quotepoolszstep;
        break;
      }

      // optional int32 quotepoolszstep = 3 [default = 128];
      case 3: {
        if (tag == 24) {
         parse_quotepoolszstep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotepoolszstep_)));
          set_has_quotepoolszstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quotepoolszmax;
        break;
      }

      // optional int32 quotepoolszmax = 4 [default = 4096];
      case 4: {
        if (tag == 32) {
         parse_quotepoolszmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotepoolszmax_)));
          set_has_quotepoolszmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxreqpersec;
        break;
      }

      // optional int32 maxreqpersec = 5 [default = 498];
      case 5: {
        if (tag == 40) {
         parse_maxreqpersec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxreqpersec_)));
          set_has_maxreqpersec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxfemasreqpersec;
        break;
      }

      // optional int32 maxfemasreqpersec = 6 [default = 123];
      case 6: {
        if (tag == 48) {
         parse_maxfemasreqpersec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfemasreqpersec_)));
          set_has_maxfemasreqpersec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxorderssent;
        break;
      }

      // optional int32 maxorderssent = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_maxorderssent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxorderssent_)));
          set_has_maxorderssent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxorderscxled;
        break;
      }

      // optional int32 maxorderscxled = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_maxorderscxled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxorderscxled_)));
          set_has_maxorderscxled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OrderMgrCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OrderMgrCfgData)
  return false;
#undef DO_
}

void OrderMgrCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OrderMgrCfgData)
  // optional int32 orderpoolszstep = 1 [default = 128];
  if (has_orderpoolszstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderpoolszstep(), output);
  }

  // optional int32 orderpoolszmax = 2 [default = 4096];
  if (has_orderpoolszmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orderpoolszmax(), output);
  }

  // optional int32 quotepoolszstep = 3 [default = 128];
  if (has_quotepoolszstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quotepoolszstep(), output);
  }

  // optional int32 quotepoolszmax = 4 [default = 4096];
  if (has_quotepoolszmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quotepoolszmax(), output);
  }

  // optional int32 maxreqpersec = 5 [default = 498];
  if (has_maxreqpersec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxreqpersec(), output);
  }

  // optional int32 maxfemasreqpersec = 6 [default = 123];
  if (has_maxfemasreqpersec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxfemasreqpersec(), output);
  }

  // optional int32 maxorderssent = 7 [default = 0];
  if (has_maxorderssent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxorderssent(), output);
  }

  // optional int32 maxorderscxled = 8 [default = 0];
  if (has_maxorderscxled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxorderscxled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OrderMgrCfgData)
}

::google::protobuf::uint8* OrderMgrCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OrderMgrCfgData)
  // optional int32 orderpoolszstep = 1 [default = 128];
  if (has_orderpoolszstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderpoolszstep(), target);
  }

  // optional int32 orderpoolszmax = 2 [default = 4096];
  if (has_orderpoolszmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orderpoolszmax(), target);
  }

  // optional int32 quotepoolszstep = 3 [default = 128];
  if (has_quotepoolszstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quotepoolszstep(), target);
  }

  // optional int32 quotepoolszmax = 4 [default = 4096];
  if (has_quotepoolszmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quotepoolszmax(), target);
  }

  // optional int32 maxreqpersec = 5 [default = 498];
  if (has_maxreqpersec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxreqpersec(), target);
  }

  // optional int32 maxfemasreqpersec = 6 [default = 123];
  if (has_maxfemasreqpersec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxfemasreqpersec(), target);
  }

  // optional int32 maxorderssent = 7 [default = 0];
  if (has_maxorderssent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxorderssent(), target);
  }

  // optional int32 maxorderscxled = 8 [default = 0];
  if (has_maxorderscxled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxorderscxled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OrderMgrCfgData)
  return target;
}

int OrderMgrCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OrderMgrCfgData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 orderpoolszstep = 1 [default = 128];
    if (has_orderpoolszstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderpoolszstep());
    }

    // optional int32 orderpoolszmax = 2 [default = 4096];
    if (has_orderpoolszmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderpoolszmax());
    }

    // optional int32 quotepoolszstep = 3 [default = 128];
    if (has_quotepoolszstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotepoolszstep());
    }

    // optional int32 quotepoolszmax = 4 [default = 4096];
    if (has_quotepoolszmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotepoolszmax());
    }

    // optional int32 maxreqpersec = 5 [default = 498];
    if (has_maxreqpersec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxreqpersec());
    }

    // optional int32 maxfemasreqpersec = 6 [default = 123];
    if (has_maxfemasreqpersec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfemasreqpersec());
    }

    // optional int32 maxorderssent = 7 [default = 0];
    if (has_maxorderssent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxorderssent());
    }

    // optional int32 maxorderscxled = 8 [default = 0];
    if (has_maxorderscxled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxorderscxled());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderMgrCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OrderMgrCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OrderMgrCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderMgrCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OrderMgrCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OrderMgrCfgData)
    MergeFrom(*source);
  }
}

void OrderMgrCfgData::MergeFrom(const OrderMgrCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OrderMgrCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderpoolszstep()) {
      set_orderpoolszstep(from.orderpoolszstep());
    }
    if (from.has_orderpoolszmax()) {
      set_orderpoolszmax(from.orderpoolszmax());
    }
    if (from.has_quotepoolszstep()) {
      set_quotepoolszstep(from.quotepoolszstep());
    }
    if (from.has_quotepoolszmax()) {
      set_quotepoolszmax(from.quotepoolszmax());
    }
    if (from.has_maxreqpersec()) {
      set_maxreqpersec(from.maxreqpersec());
    }
    if (from.has_maxfemasreqpersec()) {
      set_maxfemasreqpersec(from.maxfemasreqpersec());
    }
    if (from.has_maxorderssent()) {
      set_maxorderssent(from.maxorderssent());
    }
    if (from.has_maxorderscxled()) {
      set_maxorderscxled(from.maxorderscxled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrderMgrCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OrderMgrCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMgrCfgData::CopyFrom(const OrderMgrCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OrderMgrCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMgrCfgData::IsInitialized() const {

  return true;
}

void OrderMgrCfgData::Swap(OrderMgrCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderMgrCfgData::InternalSwap(OrderMgrCfgData* other) {
  std::swap(orderpoolszstep_, other->orderpoolszstep_);
  std::swap(orderpoolszmax_, other->orderpoolszmax_);
  std::swap(quotepoolszstep_, other->quotepoolszstep_);
  std::swap(quotepoolszmax_, other->quotepoolszmax_);
  std::swap(maxreqpersec_, other->maxreqpersec_);
  std::swap(maxfemasreqpersec_, other->maxfemasreqpersec_);
  std::swap(maxorderssent_, other->maxorderssent_);
  std::swap(maxorderscxled_, other->maxorderscxled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderMgrCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderMgrCfgData_descriptor_;
  metadata.reflection = OrderMgrCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderMgrCfgData

// optional int32 orderpoolszstep = 1 [default = 128];
bool OrderMgrCfgData::has_orderpoolszstep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderMgrCfgData::set_has_orderpoolszstep() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderMgrCfgData::clear_has_orderpoolszstep() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderMgrCfgData::clear_orderpoolszstep() {
  orderpoolszstep_ = 128;
  clear_has_orderpoolszstep();
}
 ::google::protobuf::int32 OrderMgrCfgData::orderpoolszstep() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.orderpoolszstep)
  return orderpoolszstep_;
}
 void OrderMgrCfgData::set_orderpoolszstep(::google::protobuf::int32 value) {
  set_has_orderpoolszstep();
  orderpoolszstep_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.orderpoolszstep)
}

// optional int32 orderpoolszmax = 2 [default = 4096];
bool OrderMgrCfgData::has_orderpoolszmax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderMgrCfgData::set_has_orderpoolszmax() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderMgrCfgData::clear_has_orderpoolszmax() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderMgrCfgData::clear_orderpoolszmax() {
  orderpoolszmax_ = 4096;
  clear_has_orderpoolszmax();
}
 ::google::protobuf::int32 OrderMgrCfgData::orderpoolszmax() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.orderpoolszmax)
  return orderpoolszmax_;
}
 void OrderMgrCfgData::set_orderpoolszmax(::google::protobuf::int32 value) {
  set_has_orderpoolszmax();
  orderpoolszmax_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.orderpoolszmax)
}

// optional int32 quotepoolszstep = 3 [default = 128];
bool OrderMgrCfgData::has_quotepoolszstep() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderMgrCfgData::set_has_quotepoolszstep() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderMgrCfgData::clear_has_quotepoolszstep() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderMgrCfgData::clear_quotepoolszstep() {
  quotepoolszstep_ = 128;
  clear_has_quotepoolszstep();
}
 ::google::protobuf::int32 OrderMgrCfgData::quotepoolszstep() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.quotepoolszstep)
  return quotepoolszstep_;
}
 void OrderMgrCfgData::set_quotepoolszstep(::google::protobuf::int32 value) {
  set_has_quotepoolszstep();
  quotepoolszstep_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.quotepoolszstep)
}

// optional int32 quotepoolszmax = 4 [default = 4096];
bool OrderMgrCfgData::has_quotepoolszmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrderMgrCfgData::set_has_quotepoolszmax() {
  _has_bits_[0] |= 0x00000008u;
}
void OrderMgrCfgData::clear_has_quotepoolszmax() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrderMgrCfgData::clear_quotepoolszmax() {
  quotepoolszmax_ = 4096;
  clear_has_quotepoolszmax();
}
 ::google::protobuf::int32 OrderMgrCfgData::quotepoolszmax() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.quotepoolszmax)
  return quotepoolszmax_;
}
 void OrderMgrCfgData::set_quotepoolszmax(::google::protobuf::int32 value) {
  set_has_quotepoolszmax();
  quotepoolszmax_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.quotepoolszmax)
}

// optional int32 maxreqpersec = 5 [default = 498];
bool OrderMgrCfgData::has_maxreqpersec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrderMgrCfgData::set_has_maxreqpersec() {
  _has_bits_[0] |= 0x00000010u;
}
void OrderMgrCfgData::clear_has_maxreqpersec() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrderMgrCfgData::clear_maxreqpersec() {
  maxreqpersec_ = 498;
  clear_has_maxreqpersec();
}
 ::google::protobuf::int32 OrderMgrCfgData::maxreqpersec() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.maxreqpersec)
  return maxreqpersec_;
}
 void OrderMgrCfgData::set_maxreqpersec(::google::protobuf::int32 value) {
  set_has_maxreqpersec();
  maxreqpersec_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.maxreqpersec)
}

// optional int32 maxfemasreqpersec = 6 [default = 123];
bool OrderMgrCfgData::has_maxfemasreqpersec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrderMgrCfgData::set_has_maxfemasreqpersec() {
  _has_bits_[0] |= 0x00000020u;
}
void OrderMgrCfgData::clear_has_maxfemasreqpersec() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrderMgrCfgData::clear_maxfemasreqpersec() {
  maxfemasreqpersec_ = 123;
  clear_has_maxfemasreqpersec();
}
 ::google::protobuf::int32 OrderMgrCfgData::maxfemasreqpersec() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.maxfemasreqpersec)
  return maxfemasreqpersec_;
}
 void OrderMgrCfgData::set_maxfemasreqpersec(::google::protobuf::int32 value) {
  set_has_maxfemasreqpersec();
  maxfemasreqpersec_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.maxfemasreqpersec)
}

// optional int32 maxorderssent = 7 [default = 0];
bool OrderMgrCfgData::has_maxorderssent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrderMgrCfgData::set_has_maxorderssent() {
  _has_bits_[0] |= 0x00000040u;
}
void OrderMgrCfgData::clear_has_maxorderssent() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrderMgrCfgData::clear_maxorderssent() {
  maxorderssent_ = 0;
  clear_has_maxorderssent();
}
 ::google::protobuf::int32 OrderMgrCfgData::maxorderssent() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.maxorderssent)
  return maxorderssent_;
}
 void OrderMgrCfgData::set_maxorderssent(::google::protobuf::int32 value) {
  set_has_maxorderssent();
  maxorderssent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.maxorderssent)
}

// optional int32 maxorderscxled = 8 [default = 0];
bool OrderMgrCfgData::has_maxorderscxled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OrderMgrCfgData::set_has_maxorderscxled() {
  _has_bits_[0] |= 0x00000080u;
}
void OrderMgrCfgData::clear_has_maxorderscxled() {
  _has_bits_[0] &= ~0x00000080u;
}
void OrderMgrCfgData::clear_maxorderscxled() {
  maxorderscxled_ = 0;
  clear_has_maxorderscxled();
}
 ::google::protobuf::int32 OrderMgrCfgData::maxorderscxled() const {
  // @@protoc_insertion_point(field_get:XT.OrderMgrCfgData.maxorderscxled)
  return maxorderscxled_;
}
 void OrderMgrCfgData::set_maxorderscxled(::google::protobuf::int32 value) {
  set_has_maxorderscxled();
  maxorderscxled_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderMgrCfgData.maxorderscxled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForQuoteMgrCfgData::kRspwaitingsecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForQuoteMgrCfgData::ForQuoteMgrCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.ForQuoteMgrCfgData)
}

void ForQuoteMgrCfgData::InitAsDefaultInstance() {
}

ForQuoteMgrCfgData::ForQuoteMgrCfgData(const ForQuoteMgrCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.ForQuoteMgrCfgData)
}

void ForQuoteMgrCfgData::SharedCtor() {
  _cached_size_ = 0;
  rspwaitingseconds_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForQuoteMgrCfgData::~ForQuoteMgrCfgData() {
  // @@protoc_insertion_point(destructor:XT.ForQuoteMgrCfgData)
  SharedDtor();
}

void ForQuoteMgrCfgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForQuoteMgrCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForQuoteMgrCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForQuoteMgrCfgData_descriptor_;
}

const ForQuoteMgrCfgData& ForQuoteMgrCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

ForQuoteMgrCfgData* ForQuoteMgrCfgData::default_instance_ = NULL;

ForQuoteMgrCfgData* ForQuoteMgrCfgData::New(::google::protobuf::Arena* arena) const {
  ForQuoteMgrCfgData* n = new ForQuoteMgrCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForQuoteMgrCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.ForQuoteMgrCfgData)
  rspwaitingseconds_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ForQuoteMgrCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.ForQuoteMgrCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rspwaitingseconds = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rspwaitingseconds_)));
          set_has_rspwaitingseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.ForQuoteMgrCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.ForQuoteMgrCfgData)
  return false;
#undef DO_
}

void ForQuoteMgrCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.ForQuoteMgrCfgData)
  // optional int32 rspwaitingseconds = 1 [default = 5];
  if (has_rspwaitingseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rspwaitingseconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.ForQuoteMgrCfgData)
}

::google::protobuf::uint8* ForQuoteMgrCfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.ForQuoteMgrCfgData)
  // optional int32 rspwaitingseconds = 1 [default = 5];
  if (has_rspwaitingseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rspwaitingseconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.ForQuoteMgrCfgData)
  return target;
}

int ForQuoteMgrCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.ForQuoteMgrCfgData)
  int total_size = 0;

  // optional int32 rspwaitingseconds = 1 [default = 5];
  if (has_rspwaitingseconds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rspwaitingseconds());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForQuoteMgrCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.ForQuoteMgrCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ForQuoteMgrCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ForQuoteMgrCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.ForQuoteMgrCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.ForQuoteMgrCfgData)
    MergeFrom(*source);
  }
}

void ForQuoteMgrCfgData::MergeFrom(const ForQuoteMgrCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.ForQuoteMgrCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rspwaitingseconds()) {
      set_rspwaitingseconds(from.rspwaitingseconds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ForQuoteMgrCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.ForQuoteMgrCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForQuoteMgrCfgData::CopyFrom(const ForQuoteMgrCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.ForQuoteMgrCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForQuoteMgrCfgData::IsInitialized() const {

  return true;
}

void ForQuoteMgrCfgData::Swap(ForQuoteMgrCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForQuoteMgrCfgData::InternalSwap(ForQuoteMgrCfgData* other) {
  std::swap(rspwaitingseconds_, other->rspwaitingseconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForQuoteMgrCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForQuoteMgrCfgData_descriptor_;
  metadata.reflection = ForQuoteMgrCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForQuoteMgrCfgData

// optional int32 rspwaitingseconds = 1 [default = 5];
bool ForQuoteMgrCfgData::has_rspwaitingseconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ForQuoteMgrCfgData::set_has_rspwaitingseconds() {
  _has_bits_[0] |= 0x00000001u;
}
void ForQuoteMgrCfgData::clear_has_rspwaitingseconds() {
  _has_bits_[0] &= ~0x00000001u;
}
void ForQuoteMgrCfgData::clear_rspwaitingseconds() {
  rspwaitingseconds_ = 5;
  clear_has_rspwaitingseconds();
}
 ::google::protobuf::int32 ForQuoteMgrCfgData::rspwaitingseconds() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteMgrCfgData.rspwaitingseconds)
  return rspwaitingseconds_;
}
 void ForQuoteMgrCfgData::set_rspwaitingseconds(::google::protobuf::int32 value) {
  set_has_rspwaitingseconds();
  rspwaitingseconds_ = value;
  // @@protoc_insertion_point(field_set:XT.ForQuoteMgrCfgData.rspwaitingseconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CfgData::kStratcfgmapFieldNumber;
const int CfgData::kPicfgmapFieldNumber;
const int CfgData::kOccfgmapFieldNumber;
const int CfgData::kFccfgmapFieldNumber;
const int CfgData::kInstrcfgmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CfgData::CfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.CfgData)
}

void CfgData::InitAsDefaultInstance() {
}

CfgData::CfgData(const CfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.CfgData)
}

void CfgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stratcfgmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  stratcfgmap_.SetEntryDescriptor(
      &::XT::CfgData_StratcfgmapEntry_descriptor_);
  picfgmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  picfgmap_.SetEntryDescriptor(
      &::XT::CfgData_PicfgmapEntry_descriptor_);
  occfgmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  occfgmap_.SetEntryDescriptor(
      &::XT::CfgData_OccfgmapEntry_descriptor_);
  fccfgmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  fccfgmap_.SetEntryDescriptor(
      &::XT::CfgData_FccfgmapEntry_descriptor_);
  instrcfgmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  instrcfgmap_.SetEntryDescriptor(
      &::XT::CfgData_InstrcfgmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CfgData::~CfgData() {
  // @@protoc_insertion_point(destructor:XT.CfgData)
  SharedDtor();
}

void CfgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CfgData_descriptor_;
}

const CfgData& CfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

CfgData* CfgData::default_instance_ = NULL;

CfgData* CfgData::New(::google::protobuf::Arena* arena) const {
  CfgData* n = new CfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.CfgData)
  stratcfgmap_.Clear();
  picfgmap_.Clear();
  occfgmap_.Clear();
  fccfgmap_.Clear();
  instrcfgmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.CfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .XT.StratCfgData> stratcfgmap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stratcfgmap:
          CfgData_StratcfgmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::XT::StratCfgData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XT::StratCfgData > > parser(&stratcfgmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.CfgData.StratcfgmapEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_stratcfgmap;
        if (input->ExpectTag(18)) goto parse_loop_picfgmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .XT.PICfgData> picfgmap = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_picfgmap:
          CfgData_PicfgmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::XT::PICfgData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XT::PICfgData > > parser(&picfgmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.CfgData.PicfgmapEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_picfgmap;
        if (input->ExpectTag(26)) goto parse_loop_occfgmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .XT.OCCfgData> occfgmap = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_occfgmap:
          CfgData_OccfgmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::XT::OCCfgData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XT::OCCfgData > > parser(&occfgmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.CfgData.OccfgmapEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_occfgmap;
        if (input->ExpectTag(34)) goto parse_loop_fccfgmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .XT.FCCfgData> fccfgmap = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fccfgmap:
          CfgData_FccfgmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::XT::FCCfgData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XT::FCCfgData > > parser(&fccfgmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.CfgData.FccfgmapEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_fccfgmap;
        if (input->ExpectTag(42)) goto parse_loop_instrcfgmap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .XT.InstrCfgData> instrcfgmap = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_instrcfgmap:
          CfgData_InstrcfgmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::XT::InstrCfgData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XT::InstrCfgData > > parser(&instrcfgmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.CfgData.InstrcfgmapEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_instrcfgmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.CfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.CfgData)
  return false;
#undef DO_
}

void CfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.CfgData)
  // map<string, .XT.StratCfgData> stratcfgmap = 1;
  if (!this->stratcfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.StratcfgmapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->stratcfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stratcfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::const_iterator
          it = this->stratcfgmap().begin();
          it != this->stratcfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_StratcfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stratcfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_StratcfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::const_iterator
          it = this->stratcfgmap().begin();
          it != this->stratcfgmap().end(); ++it) {
        entry.reset(stratcfgmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.PICfgData> picfgmap = 2;
  if (!this->picfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::PICfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.PicfgmapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->picfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->picfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::PICfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::PICfgData >::const_iterator
          it = this->picfgmap().begin();
          it != this->picfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_PicfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(picfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_PicfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::PICfgData >::const_iterator
          it = this->picfgmap().begin();
          it != this->picfgmap().end(); ++it) {
        entry.reset(picfgmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.OCCfgData> occfgmap = 3;
  if (!this->occfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.OccfgmapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->occfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->occfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::const_iterator
          it = this->occfgmap().begin();
          it != this->occfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_OccfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(occfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_OccfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::const_iterator
          it = this->occfgmap().begin();
          it != this->occfgmap().end(); ++it) {
        entry.reset(occfgmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.FCCfgData> fccfgmap = 4;
  if (!this->fccfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.FccfgmapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->fccfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fccfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::const_iterator
          it = this->fccfgmap().begin();
          it != this->fccfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_FccfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fccfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_FccfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::const_iterator
          it = this->fccfgmap().begin();
          it != this->fccfgmap().end(); ++it) {
        entry.reset(fccfgmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.InstrCfgData> instrcfgmap = 5;
  if (!this->instrcfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.InstrcfgmapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->instrcfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->instrcfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::const_iterator
          it = this->instrcfgmap().begin();
          it != this->instrcfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_InstrcfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(instrcfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_InstrcfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::const_iterator
          it = this->instrcfgmap().begin();
          it != this->instrcfgmap().end(); ++it) {
        entry.reset(instrcfgmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.CfgData)
}

::google::protobuf::uint8* CfgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.CfgData)
  // map<string, .XT.StratCfgData> stratcfgmap = 1;
  if (!this->stratcfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.StratcfgmapEntry.key");
      }
    };

    if (deterministic &&
        this->stratcfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stratcfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::const_iterator
          it = this->stratcfgmap().begin();
          it != this->stratcfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_StratcfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stratcfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_StratcfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::const_iterator
          it = this->stratcfgmap().begin();
          it != this->stratcfgmap().end(); ++it) {
        entry.reset(stratcfgmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.PICfgData> picfgmap = 2;
  if (!this->picfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::PICfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.PicfgmapEntry.key");
      }
    };

    if (deterministic &&
        this->picfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->picfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::PICfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::PICfgData >::const_iterator
          it = this->picfgmap().begin();
          it != this->picfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_PicfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(picfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_PicfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::PICfgData >::const_iterator
          it = this->picfgmap().begin();
          it != this->picfgmap().end(); ++it) {
        entry.reset(picfgmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.OCCfgData> occfgmap = 3;
  if (!this->occfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.OccfgmapEntry.key");
      }
    };

    if (deterministic &&
        this->occfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->occfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::const_iterator
          it = this->occfgmap().begin();
          it != this->occfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_OccfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(occfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_OccfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::const_iterator
          it = this->occfgmap().begin();
          it != this->occfgmap().end(); ++it) {
        entry.reset(occfgmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.FCCfgData> fccfgmap = 4;
  if (!this->fccfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.FccfgmapEntry.key");
      }
    };

    if (deterministic &&
        this->fccfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fccfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::const_iterator
          it = this->fccfgmap().begin();
          it != this->fccfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_FccfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fccfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_FccfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::const_iterator
          it = this->fccfgmap().begin();
          it != this->fccfgmap().end(); ++it) {
        entry.reset(fccfgmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XT.InstrCfgData> instrcfgmap = 5;
  if (!this->instrcfgmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "XT.CfgData.InstrcfgmapEntry.key");
      }
    };

    if (deterministic &&
        this->instrcfgmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->instrcfgmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::const_iterator
          it = this->instrcfgmap().begin();
          it != this->instrcfgmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CfgData_InstrcfgmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(instrcfgmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CfgData_InstrcfgmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::const_iterator
          it = this->instrcfgmap().begin();
          it != this->instrcfgmap().end(); ++it) {
        entry.reset(instrcfgmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.CfgData)
  return target;
}

int CfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.CfgData)
  int total_size = 0;

  // map<string, .XT.StratCfgData> stratcfgmap = 1;
  total_size += 1 * this->stratcfgmap_size();
  {
    ::google::protobuf::scoped_ptr<CfgData_StratcfgmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::XT::StratCfgData >::const_iterator
        it = this->stratcfgmap().begin();
        it != this->stratcfgmap().end(); ++it) {
      entry.reset(stratcfgmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .XT.PICfgData> picfgmap = 2;
  total_size += 1 * this->picfgmap_size();
  {
    ::google::protobuf::scoped_ptr<CfgData_PicfgmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::XT::PICfgData >::const_iterator
        it = this->picfgmap().begin();
        it != this->picfgmap().end(); ++it) {
      entry.reset(picfgmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .XT.OCCfgData> occfgmap = 3;
  total_size += 1 * this->occfgmap_size();
  {
    ::google::protobuf::scoped_ptr<CfgData_OccfgmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::XT::OCCfgData >::const_iterator
        it = this->occfgmap().begin();
        it != this->occfgmap().end(); ++it) {
      entry.reset(occfgmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .XT.FCCfgData> fccfgmap = 4;
  total_size += 1 * this->fccfgmap_size();
  {
    ::google::protobuf::scoped_ptr<CfgData_FccfgmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::XT::FCCfgData >::const_iterator
        it = this->fccfgmap().begin();
        it != this->fccfgmap().end(); ++it) {
      entry.reset(fccfgmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .XT.InstrCfgData> instrcfgmap = 5;
  total_size += 1 * this->instrcfgmap_size();
  {
    ::google::protobuf::scoped_ptr<CfgData_InstrcfgmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >::const_iterator
        it = this->instrcfgmap().begin();
        it != this->instrcfgmap().end(); ++it) {
      entry.reset(instrcfgmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.CfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.CfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.CfgData)
    MergeFrom(*source);
  }
}

void CfgData::MergeFrom(const CfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.CfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stratcfgmap_.MergeFrom(from.stratcfgmap_);
  picfgmap_.MergeFrom(from.picfgmap_);
  occfgmap_.MergeFrom(from.occfgmap_);
  fccfgmap_.MergeFrom(from.fccfgmap_);
  instrcfgmap_.MergeFrom(from.instrcfgmap_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.CfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CfgData::CopyFrom(const CfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.CfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CfgData::IsInitialized() const {

  return true;
}

void CfgData::Swap(CfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CfgData::InternalSwap(CfgData* other) {
  stratcfgmap_.Swap(&other->stratcfgmap_);
  picfgmap_.Swap(&other->picfgmap_);
  occfgmap_.Swap(&other->occfgmap_);
  fccfgmap_.Swap(&other->fccfgmap_);
  instrcfgmap_.Swap(&other->instrcfgmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CfgData_descriptor_;
  metadata.reflection = CfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CfgData

// map<string, .XT.StratCfgData> stratcfgmap = 1;
int CfgData::stratcfgmap_size() const {
  return stratcfgmap_.size();
}
void CfgData::clear_stratcfgmap() {
  stratcfgmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::XT::StratCfgData >&
CfgData::stratcfgmap() const {
  // @@protoc_insertion_point(field_map:XT.CfgData.stratcfgmap)
  return stratcfgmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::XT::StratCfgData >*
CfgData::mutable_stratcfgmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.CfgData.stratcfgmap)
  return stratcfgmap_.MutableMap();
}

// map<string, .XT.PICfgData> picfgmap = 2;
int CfgData::picfgmap_size() const {
  return picfgmap_.size();
}
void CfgData::clear_picfgmap() {
  picfgmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::XT::PICfgData >&
CfgData::picfgmap() const {
  // @@protoc_insertion_point(field_map:XT.CfgData.picfgmap)
  return picfgmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::XT::PICfgData >*
CfgData::mutable_picfgmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.CfgData.picfgmap)
  return picfgmap_.MutableMap();
}

// map<string, .XT.OCCfgData> occfgmap = 3;
int CfgData::occfgmap_size() const {
  return occfgmap_.size();
}
void CfgData::clear_occfgmap() {
  occfgmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::XT::OCCfgData >&
CfgData::occfgmap() const {
  // @@protoc_insertion_point(field_map:XT.CfgData.occfgmap)
  return occfgmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::XT::OCCfgData >*
CfgData::mutable_occfgmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.CfgData.occfgmap)
  return occfgmap_.MutableMap();
}

// map<string, .XT.FCCfgData> fccfgmap = 4;
int CfgData::fccfgmap_size() const {
  return fccfgmap_.size();
}
void CfgData::clear_fccfgmap() {
  fccfgmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::XT::FCCfgData >&
CfgData::fccfgmap() const {
  // @@protoc_insertion_point(field_map:XT.CfgData.fccfgmap)
  return fccfgmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::XT::FCCfgData >*
CfgData::mutable_fccfgmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.CfgData.fccfgmap)
  return fccfgmap_.MutableMap();
}

// map<string, .XT.InstrCfgData> instrcfgmap = 5;
int CfgData::instrcfgmap_size() const {
  return instrcfgmap_.size();
}
void CfgData::clear_instrcfgmap() {
  instrcfgmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >&
CfgData::instrcfgmap() const {
  // @@protoc_insertion_point(field_map:XT.CfgData.instrcfgmap)
  return instrcfgmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::XT::InstrCfgData >*
CfgData::mutable_instrcfgmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.CfgData.instrcfgmap)
  return instrcfgmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeInfo::kExchangeidFieldNumber;
const int ExchangeInfo::kExchangetypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeInfo::ExchangeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.ExchangeInfo)
}

void ExchangeInfo::InitAsDefaultInstance() {
}

ExchangeInfo::ExchangeInfo(const ExchangeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.ExchangeInfo)
}

void ExchangeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeInfo::~ExchangeInfo() {
  // @@protoc_insertion_point(destructor:XT.ExchangeInfo)
  SharedDtor();
}

void ExchangeInfo::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExchangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeInfo_descriptor_;
}

const ExchangeInfo& ExchangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

ExchangeInfo* ExchangeInfo::default_instance_ = NULL;

ExchangeInfo* ExchangeInfo::New(::google::protobuf::Arena* arena) const {
  ExchangeInfo* n = new ExchangeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExchangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.ExchangeInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_exchangeid()) {
      exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    exchangetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExchangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.ExchangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exchangeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ExchangeInfo.exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exchangetype;
        break;
      }

      // optional int32 exchangetype = 2;
      case 2: {
        if (tag == 16) {
         parse_exchangetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetype_)));
          set_has_exchangetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.ExchangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.ExchangeInfo)
  return false;
#undef DO_
}

void ExchangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.ExchangeInfo)
  // optional string exchangeid = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ExchangeInfo.exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchangeid(), output);
  }

  // optional int32 exchangetype = 2;
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchangetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.ExchangeInfo)
}

::google::protobuf::uint8* ExchangeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.ExchangeInfo)
  // optional string exchangeid = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ExchangeInfo.exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchangeid(), target);
  }

  // optional int32 exchangetype = 2;
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchangetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.ExchangeInfo)
  return target;
}

int ExchangeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.ExchangeInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string exchangeid = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional int32 exchangetype = 2;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangetype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.ExchangeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExchangeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.ExchangeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.ExchangeInfo)
    MergeFrom(*source);
  }
}

void ExchangeInfo::MergeFrom(const ExchangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.ExchangeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_has_exchangeid();
      exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExchangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.ExchangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeInfo::CopyFrom(const ExchangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.ExchangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeInfo::IsInitialized() const {

  return true;
}

void ExchangeInfo::Swap(ExchangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeInfo::InternalSwap(ExchangeInfo* other) {
  exchangeid_.Swap(&other->exchangeid_);
  std::swap(exchangetype_, other->exchangetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExchangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeInfo_descriptor_;
  metadata.reflection = ExchangeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExchangeInfo

// optional string exchangeid = 1;
bool ExchangeInfo::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExchangeInfo::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
void ExchangeInfo::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExchangeInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeid();
}
 const ::std::string& ExchangeInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:XT.ExchangeInfo.exchangeid)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExchangeInfo::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ExchangeInfo.exchangeid)
}
 void ExchangeInfo::set_exchangeid(const char* value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ExchangeInfo.exchangeid)
}
 void ExchangeInfo::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ExchangeInfo.exchangeid)
}
 ::std::string* ExchangeInfo::mutable_exchangeid() {
  set_has_exchangeid();
  // @@protoc_insertion_point(field_mutable:XT.ExchangeInfo.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExchangeInfo::release_exchangeid() {
  // @@protoc_insertion_point(field_release:XT.ExchangeInfo.exchangeid)
  clear_has_exchangeid();
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExchangeInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    set_has_exchangeid();
  } else {
    clear_has_exchangeid();
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:XT.ExchangeInfo.exchangeid)
}

// optional int32 exchangetype = 2;
bool ExchangeInfo::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExchangeInfo::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000002u;
}
void ExchangeInfo::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExchangeInfo::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
 ::google::protobuf::int32 ExchangeInfo::exchangetype() const {
  // @@protoc_insertion_point(field_get:XT.ExchangeInfo.exchangetype)
  return exchangetype_;
}
 void ExchangeInfo::set_exchangetype(::google::protobuf::int32 value) {
  set_has_exchangetype();
  exchangetype_ = value;
  // @@protoc_insertion_point(field_set:XT.ExchangeInfo.exchangetype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillInfo::kInstrumentidFieldNumber;
const int FillInfo::kTsFieldNumber;
const int FillInfo::kOrderidFieldNumber;
const int FillInfo::kBstypeFieldNumber;
const int FillInfo::kPxFieldNumber;
const int FillInfo::kSzFieldNumber;
const int FillInfo::kOcflagFieldNumber;
const int FillInfo::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillInfo::FillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.FillInfo)
}

void FillInfo::InitAsDefaultInstance() {
}

FillInfo::FillInfo(const FillInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.FillInfo)
}

void FillInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_LONGLONG(0);
  orderid_ = 0;
  bstype_ = 0;
  px_ = 0;
  sz_ = 0;
  ocflag_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillInfo::~FillInfo() {
  // @@protoc_insertion_point(destructor:XT.FillInfo)
  SharedDtor();
}

void FillInfo::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillInfo_descriptor_;
}

const FillInfo& FillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

FillInfo* FillInfo::default_instance_ = NULL;

FillInfo* FillInfo::New(::google::protobuf::Arena* arena) const {
  FillInfo* n = new FillInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.FillInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FillInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FillInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ts_, flag_);
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.FillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrumentid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.FillInfo.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // optional int64 ts = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderid;
        break;
      }

      // optional int32 orderid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bstype;
        break;
      }

      // optional int32 bstype = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_bstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bstype_)));
          set_has_bstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_px;
        break;
      }

      // optional double px = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sz;
        break;
      }

      // optional int32 sz = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_sz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sz_)));
          set_has_sz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ocflag;
        break;
      }

      // optional int32 ocflag = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_ocflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ocflag_)));
          set_has_ocflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }

      // optional int32 flag = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.FillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.FillInfo)
  return false;
#undef DO_
}

void FillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.FillInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.FillInfo.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentid(), output);
  }

  // optional int64 ts = 2 [default = 0];
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ts(), output);
  }

  // optional int32 orderid = 3 [default = 0];
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderid(), output);
  }

  // optional int32 bstype = 4 [default = 0];
  if (has_bstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bstype(), output);
  }

  // optional double px = 5 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->px(), output);
  }

  // optional int32 sz = 6 [default = 0];
  if (has_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sz(), output);
  }

  // optional int32 ocflag = 7 [default = 0];
  if (has_ocflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ocflag(), output);
  }

  // optional int32 flag = 8 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.FillInfo)
}

::google::protobuf::uint8* FillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.FillInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.FillInfo.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // optional int64 ts = 2 [default = 0];
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ts(), target);
  }

  // optional int32 orderid = 3 [default = 0];
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderid(), target);
  }

  // optional int32 bstype = 4 [default = 0];
  if (has_bstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bstype(), target);
  }

  // optional double px = 5 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->px(), target);
  }

  // optional int32 sz = 6 [default = 0];
  if (has_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sz(), target);
  }

  // optional int32 ocflag = 7 [default = 0];
  if (has_ocflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ocflag(), target);
  }

  // optional int32 flag = 8 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.FillInfo)
  return target;
}

int FillInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.FillInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string instrumentid = 1 [default = ""];
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional int64 ts = 2 [default = 0];
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ts());
    }

    // optional int32 orderid = 3 [default = 0];
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 bstype = 4 [default = 0];
    if (has_bstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bstype());
    }

    // optional double px = 5 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }

    // optional int32 sz = 6 [default = 0];
    if (has_sz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sz());
    }

    // optional int32 ocflag = 7 [default = 0];
    if (has_ocflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ocflag());
    }

    // optional int32 flag = 8 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.FillInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FillInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.FillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.FillInfo)
    MergeFrom(*source);
  }
}

void FillInfo::MergeFrom(const FillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.FillInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_bstype()) {
      set_bstype(from.bstype());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_sz()) {
      set_sz(from.sz());
    }
    if (from.has_ocflag()) {
      set_ocflag(from.ocflag());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.FillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillInfo::CopyFrom(const FillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.FillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillInfo::IsInitialized() const {

  return true;
}

void FillInfo::Swap(FillInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillInfo::InternalSwap(FillInfo* other) {
  instrumentid_.Swap(&other->instrumentid_);
  std::swap(ts_, other->ts_);
  std::swap(orderid_, other->orderid_);
  std::swap(bstype_, other->bstype_);
  std::swap(px_, other->px_);
  std::swap(sz_, other->sz_);
  std::swap(ocflag_, other->ocflag_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillInfo_descriptor_;
  metadata.reflection = FillInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillInfo

// optional string instrumentid = 1 [default = ""];
bool FillInfo::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillInfo::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000001u;
}
void FillInfo::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& FillInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FillInfo::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.FillInfo.instrumentid)
}
 void FillInfo::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.FillInfo.instrumentid)
}
 void FillInfo::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.FillInfo.instrumentid)
}
 ::std::string* FillInfo::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.FillInfo.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FillInfo::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.FillInfo.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FillInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.FillInfo.instrumentid)
}

// optional int64 ts = 2 [default = 0];
bool FillInfo::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillInfo::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void FillInfo::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillInfo::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::int64 FillInfo::ts() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.ts)
  return ts_;
}
 void FillInfo::set_ts(::google::protobuf::int64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:XT.FillInfo.ts)
}

// optional int32 orderid = 3 [default = 0];
bool FillInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
void FillInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillInfo::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
 ::google::protobuf::int32 FillInfo::orderid() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.orderid)
  return orderid_;
}
 void FillInfo::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:XT.FillInfo.orderid)
}

// optional int32 bstype = 4 [default = 0];
bool FillInfo::has_bstype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillInfo::set_has_bstype() {
  _has_bits_[0] |= 0x00000008u;
}
void FillInfo::clear_has_bstype() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillInfo::clear_bstype() {
  bstype_ = 0;
  clear_has_bstype();
}
 ::google::protobuf::int32 FillInfo::bstype() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.bstype)
  return bstype_;
}
 void FillInfo::set_bstype(::google::protobuf::int32 value) {
  set_has_bstype();
  bstype_ = value;
  // @@protoc_insertion_point(field_set:XT.FillInfo.bstype)
}

// optional double px = 5 [default = 0];
bool FillInfo::has_px() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FillInfo::set_has_px() {
  _has_bits_[0] |= 0x00000010u;
}
void FillInfo::clear_has_px() {
  _has_bits_[0] &= ~0x00000010u;
}
void FillInfo::clear_px() {
  px_ = 0;
  clear_has_px();
}
 double FillInfo::px() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.px)
  return px_;
}
 void FillInfo::set_px(double value) {
  set_has_px();
  px_ = value;
  // @@protoc_insertion_point(field_set:XT.FillInfo.px)
}

// optional int32 sz = 6 [default = 0];
bool FillInfo::has_sz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FillInfo::set_has_sz() {
  _has_bits_[0] |= 0x00000020u;
}
void FillInfo::clear_has_sz() {
  _has_bits_[0] &= ~0x00000020u;
}
void FillInfo::clear_sz() {
  sz_ = 0;
  clear_has_sz();
}
 ::google::protobuf::int32 FillInfo::sz() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.sz)
  return sz_;
}
 void FillInfo::set_sz(::google::protobuf::int32 value) {
  set_has_sz();
  sz_ = value;
  // @@protoc_insertion_point(field_set:XT.FillInfo.sz)
}

// optional int32 ocflag = 7 [default = 0];
bool FillInfo::has_ocflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FillInfo::set_has_ocflag() {
  _has_bits_[0] |= 0x00000040u;
}
void FillInfo::clear_has_ocflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void FillInfo::clear_ocflag() {
  ocflag_ = 0;
  clear_has_ocflag();
}
 ::google::protobuf::int32 FillInfo::ocflag() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.ocflag)
  return ocflag_;
}
 void FillInfo::set_ocflag(::google::protobuf::int32 value) {
  set_has_ocflag();
  ocflag_ = value;
  // @@protoc_insertion_point(field_set:XT.FillInfo.ocflag)
}

// optional int32 flag = 8 [default = 0];
bool FillInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FillInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
void FillInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
void FillInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
 ::google::protobuf::int32 FillInfo::flag() const {
  // @@protoc_insertion_point(field_get:XT.FillInfo.flag)
  return flag_;
}
 void FillInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:XT.FillInfo.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillStatData::kBuypxvolumeFieldNumber;
const int FillStatData::kSellpxvolumeFieldNumber;
const int FillStatData::kBuyvolumeFieldNumber;
const int FillStatData::kSellvolumeFieldNumber;
const int FillStatData::kRpxpnlFieldNumber;
const int FillStatData::kPoscostFieldNumber;
const int FillStatData::kNetposFieldNumber;
const int FillStatData::kNetposprevFieldNumber;
const int FillStatData::kNetposnewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillStatData::FillStatData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.FillStatData)
}

void FillStatData::InitAsDefaultInstance() {
}

FillStatData::FillStatData(const FillStatData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.FillStatData)
}

void FillStatData::SharedCtor() {
  _cached_size_ = 0;
  buypxvolume_ = 0;
  sellpxvolume_ = 0;
  buyvolume_ = GOOGLE_LONGLONG(0);
  sellvolume_ = GOOGLE_LONGLONG(0);
  rpxpnl_ = 0;
  poscost_ = 0;
  netpos_ = 0;
  netposprev_ = 0;
  netposnew_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillStatData::~FillStatData() {
  // @@protoc_insertion_point(destructor:XT.FillStatData)
  SharedDtor();
}

void FillStatData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FillStatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillStatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillStatData_descriptor_;
}

const FillStatData& FillStatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

FillStatData* FillStatData::default_instance_ = NULL;

FillStatData* FillStatData::New(::google::protobuf::Arena* arena) const {
  FillStatData* n = new FillStatData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillStatData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.FillStatData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FillStatData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FillStatData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(buypxvolume_, netposprev_);
  }
  netposnew_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FillStatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.FillStatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double buypxvolume = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buypxvolume_)));
          set_has_buypxvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sellpxvolume;
        break;
      }

      // optional double sellpxvolume = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_sellpxvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellpxvolume_)));
          set_has_sellpxvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buyvolume;
        break;
      }

      // optional int64 buyvolume = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_buyvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyvolume_)));
          set_has_buyvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sellvolume;
        break;
      }

      // optional int64 sellvolume = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sellvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sellvolume_)));
          set_has_sellvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_rpxpnl;
        break;
      }

      // optional double rpxpnl = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_rpxpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpxpnl_)));
          set_has_rpxpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_poscost;
        break;
      }

      // optional double poscost = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_poscost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poscost_)));
          set_has_poscost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_netpos;
        break;
      }

      // optional int32 netpos = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_netpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netpos_)));
          set_has_netpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_netposprev;
        break;
      }

      // optional int32 netposprev = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_netposprev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netposprev_)));
          set_has_netposprev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_netposnew;
        break;
      }

      // optional int32 netposnew = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_netposnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netposnew_)));
          set_has_netposnew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.FillStatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.FillStatData)
  return false;
#undef DO_
}

void FillStatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.FillStatData)
  // optional double buypxvolume = 1 [default = 0];
  if (has_buypxvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->buypxvolume(), output);
  }

  // optional double sellpxvolume = 2 [default = 0];
  if (has_sellpxvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sellpxvolume(), output);
  }

  // optional int64 buyvolume = 3 [default = 0];
  if (has_buyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->buyvolume(), output);
  }

  // optional int64 sellvolume = 4 [default = 0];
  if (has_sellvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sellvolume(), output);
  }

  // optional double rpxpnl = 5 [default = 0];
  if (has_rpxpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rpxpnl(), output);
  }

  // optional double poscost = 6 [default = 0];
  if (has_poscost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->poscost(), output);
  }

  // optional int32 netpos = 7 [default = 0];
  if (has_netpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->netpos(), output);
  }

  // optional int32 netposprev = 8 [default = 0];
  if (has_netposprev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->netposprev(), output);
  }

  // optional int32 netposnew = 9 [default = 0];
  if (has_netposnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->netposnew(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.FillStatData)
}

::google::protobuf::uint8* FillStatData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.FillStatData)
  // optional double buypxvolume = 1 [default = 0];
  if (has_buypxvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->buypxvolume(), target);
  }

  // optional double sellpxvolume = 2 [default = 0];
  if (has_sellpxvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sellpxvolume(), target);
  }

  // optional int64 buyvolume = 3 [default = 0];
  if (has_buyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->buyvolume(), target);
  }

  // optional int64 sellvolume = 4 [default = 0];
  if (has_sellvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sellvolume(), target);
  }

  // optional double rpxpnl = 5 [default = 0];
  if (has_rpxpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rpxpnl(), target);
  }

  // optional double poscost = 6 [default = 0];
  if (has_poscost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->poscost(), target);
  }

  // optional int32 netpos = 7 [default = 0];
  if (has_netpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->netpos(), target);
  }

  // optional int32 netposprev = 8 [default = 0];
  if (has_netposprev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->netposprev(), target);
  }

  // optional int32 netposnew = 9 [default = 0];
  if (has_netposnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->netposnew(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.FillStatData)
  return target;
}

int FillStatData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.FillStatData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double buypxvolume = 1 [default = 0];
    if (has_buypxvolume()) {
      total_size += 1 + 8;
    }

    // optional double sellpxvolume = 2 [default = 0];
    if (has_sellpxvolume()) {
      total_size += 1 + 8;
    }

    // optional int64 buyvolume = 3 [default = 0];
    if (has_buyvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buyvolume());
    }

    // optional int64 sellvolume = 4 [default = 0];
    if (has_sellvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sellvolume());
    }

    // optional double rpxpnl = 5 [default = 0];
    if (has_rpxpnl()) {
      total_size += 1 + 8;
    }

    // optional double poscost = 6 [default = 0];
    if (has_poscost()) {
      total_size += 1 + 8;
    }

    // optional int32 netpos = 7 [default = 0];
    if (has_netpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netpos());
    }

    // optional int32 netposprev = 8 [default = 0];
    if (has_netposprev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netposprev());
    }

  }
  // optional int32 netposnew = 9 [default = 0];
  if (has_netposnew()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->netposnew());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillStatData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.FillStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FillStatData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FillStatData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.FillStatData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.FillStatData)
    MergeFrom(*source);
  }
}

void FillStatData::MergeFrom(const FillStatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.FillStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buypxvolume()) {
      set_buypxvolume(from.buypxvolume());
    }
    if (from.has_sellpxvolume()) {
      set_sellpxvolume(from.sellpxvolume());
    }
    if (from.has_buyvolume()) {
      set_buyvolume(from.buyvolume());
    }
    if (from.has_sellvolume()) {
      set_sellvolume(from.sellvolume());
    }
    if (from.has_rpxpnl()) {
      set_rpxpnl(from.rpxpnl());
    }
    if (from.has_poscost()) {
      set_poscost(from.poscost());
    }
    if (from.has_netpos()) {
      set_netpos(from.netpos());
    }
    if (from.has_netposprev()) {
      set_netposprev(from.netposprev());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_netposnew()) {
      set_netposnew(from.netposnew());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FillStatData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.FillStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillStatData::CopyFrom(const FillStatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.FillStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillStatData::IsInitialized() const {

  return true;
}

void FillStatData::Swap(FillStatData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillStatData::InternalSwap(FillStatData* other) {
  std::swap(buypxvolume_, other->buypxvolume_);
  std::swap(sellpxvolume_, other->sellpxvolume_);
  std::swap(buyvolume_, other->buyvolume_);
  std::swap(sellvolume_, other->sellvolume_);
  std::swap(rpxpnl_, other->rpxpnl_);
  std::swap(poscost_, other->poscost_);
  std::swap(netpos_, other->netpos_);
  std::swap(netposprev_, other->netposprev_);
  std::swap(netposnew_, other->netposnew_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillStatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillStatData_descriptor_;
  metadata.reflection = FillStatData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillStatData

// optional double buypxvolume = 1 [default = 0];
bool FillStatData::has_buypxvolume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillStatData::set_has_buypxvolume() {
  _has_bits_[0] |= 0x00000001u;
}
void FillStatData::clear_has_buypxvolume() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillStatData::clear_buypxvolume() {
  buypxvolume_ = 0;
  clear_has_buypxvolume();
}
 double FillStatData::buypxvolume() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.buypxvolume)
  return buypxvolume_;
}
 void FillStatData::set_buypxvolume(double value) {
  set_has_buypxvolume();
  buypxvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.buypxvolume)
}

// optional double sellpxvolume = 2 [default = 0];
bool FillStatData::has_sellpxvolume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillStatData::set_has_sellpxvolume() {
  _has_bits_[0] |= 0x00000002u;
}
void FillStatData::clear_has_sellpxvolume() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillStatData::clear_sellpxvolume() {
  sellpxvolume_ = 0;
  clear_has_sellpxvolume();
}
 double FillStatData::sellpxvolume() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.sellpxvolume)
  return sellpxvolume_;
}
 void FillStatData::set_sellpxvolume(double value) {
  set_has_sellpxvolume();
  sellpxvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.sellpxvolume)
}

// optional int64 buyvolume = 3 [default = 0];
bool FillStatData::has_buyvolume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillStatData::set_has_buyvolume() {
  _has_bits_[0] |= 0x00000004u;
}
void FillStatData::clear_has_buyvolume() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillStatData::clear_buyvolume() {
  buyvolume_ = GOOGLE_LONGLONG(0);
  clear_has_buyvolume();
}
 ::google::protobuf::int64 FillStatData::buyvolume() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.buyvolume)
  return buyvolume_;
}
 void FillStatData::set_buyvolume(::google::protobuf::int64 value) {
  set_has_buyvolume();
  buyvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.buyvolume)
}

// optional int64 sellvolume = 4 [default = 0];
bool FillStatData::has_sellvolume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillStatData::set_has_sellvolume() {
  _has_bits_[0] |= 0x00000008u;
}
void FillStatData::clear_has_sellvolume() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillStatData::clear_sellvolume() {
  sellvolume_ = GOOGLE_LONGLONG(0);
  clear_has_sellvolume();
}
 ::google::protobuf::int64 FillStatData::sellvolume() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.sellvolume)
  return sellvolume_;
}
 void FillStatData::set_sellvolume(::google::protobuf::int64 value) {
  set_has_sellvolume();
  sellvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.sellvolume)
}

// optional double rpxpnl = 5 [default = 0];
bool FillStatData::has_rpxpnl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FillStatData::set_has_rpxpnl() {
  _has_bits_[0] |= 0x00000010u;
}
void FillStatData::clear_has_rpxpnl() {
  _has_bits_[0] &= ~0x00000010u;
}
void FillStatData::clear_rpxpnl() {
  rpxpnl_ = 0;
  clear_has_rpxpnl();
}
 double FillStatData::rpxpnl() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.rpxpnl)
  return rpxpnl_;
}
 void FillStatData::set_rpxpnl(double value) {
  set_has_rpxpnl();
  rpxpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.rpxpnl)
}

// optional double poscost = 6 [default = 0];
bool FillStatData::has_poscost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FillStatData::set_has_poscost() {
  _has_bits_[0] |= 0x00000020u;
}
void FillStatData::clear_has_poscost() {
  _has_bits_[0] &= ~0x00000020u;
}
void FillStatData::clear_poscost() {
  poscost_ = 0;
  clear_has_poscost();
}
 double FillStatData::poscost() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.poscost)
  return poscost_;
}
 void FillStatData::set_poscost(double value) {
  set_has_poscost();
  poscost_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.poscost)
}

// optional int32 netpos = 7 [default = 0];
bool FillStatData::has_netpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FillStatData::set_has_netpos() {
  _has_bits_[0] |= 0x00000040u;
}
void FillStatData::clear_has_netpos() {
  _has_bits_[0] &= ~0x00000040u;
}
void FillStatData::clear_netpos() {
  netpos_ = 0;
  clear_has_netpos();
}
 ::google::protobuf::int32 FillStatData::netpos() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.netpos)
  return netpos_;
}
 void FillStatData::set_netpos(::google::protobuf::int32 value) {
  set_has_netpos();
  netpos_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.netpos)
}

// optional int32 netposprev = 8 [default = 0];
bool FillStatData::has_netposprev() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FillStatData::set_has_netposprev() {
  _has_bits_[0] |= 0x00000080u;
}
void FillStatData::clear_has_netposprev() {
  _has_bits_[0] &= ~0x00000080u;
}
void FillStatData::clear_netposprev() {
  netposprev_ = 0;
  clear_has_netposprev();
}
 ::google::protobuf::int32 FillStatData::netposprev() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.netposprev)
  return netposprev_;
}
 void FillStatData::set_netposprev(::google::protobuf::int32 value) {
  set_has_netposprev();
  netposprev_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.netposprev)
}

// optional int32 netposnew = 9 [default = 0];
bool FillStatData::has_netposnew() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FillStatData::set_has_netposnew() {
  _has_bits_[0] |= 0x00000100u;
}
void FillStatData::clear_has_netposnew() {
  _has_bits_[0] &= ~0x00000100u;
}
void FillStatData::clear_netposnew() {
  netposnew_ = 0;
  clear_has_netposnew();
}
 ::google::protobuf::int32 FillStatData::netposnew() const {
  // @@protoc_insertion_point(field_get:XT.FillStatData.netposnew)
  return netposnew_;
}
 void FillStatData::set_netposnew(::google::protobuf::int32 value) {
  set_has_netposnew();
  netposnew_ = value;
  // @@protoc_insertion_point(field_set:XT.FillStatData.netposnew)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VolumeOutlayPair::kVolumeFieldNumber;
const int VolumeOutlayPair::kPxvolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VolumeOutlayPair::VolumeOutlayPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.VolumeOutlayPair)
}

void VolumeOutlayPair::InitAsDefaultInstance() {
}

VolumeOutlayPair::VolumeOutlayPair(const VolumeOutlayPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.VolumeOutlayPair)
}

void VolumeOutlayPair::SharedCtor() {
  _cached_size_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  pxvolume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeOutlayPair::~VolumeOutlayPair() {
  // @@protoc_insertion_point(destructor:XT.VolumeOutlayPair)
  SharedDtor();
}

void VolumeOutlayPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolumeOutlayPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeOutlayPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeOutlayPair_descriptor_;
}

const VolumeOutlayPair& VolumeOutlayPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

VolumeOutlayPair* VolumeOutlayPair::default_instance_ = NULL;

VolumeOutlayPair* VolumeOutlayPair::New(::google::protobuf::Arena* arena) const {
  VolumeOutlayPair* n = new VolumeOutlayPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VolumeOutlayPair::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.VolumeOutlayPair)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VolumeOutlayPair, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VolumeOutlayPair*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(volume_, pxvolume_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VolumeOutlayPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.VolumeOutlayPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 volume = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_pxvolume;
        break;
      }

      // optional double pxvolume = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_pxvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pxvolume_)));
          set_has_pxvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.VolumeOutlayPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.VolumeOutlayPair)
  return false;
#undef DO_
}

void VolumeOutlayPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.VolumeOutlayPair)
  // optional int64 volume = 1 [default = 0];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->volume(), output);
  }

  // optional double pxvolume = 2 [default = 0];
  if (has_pxvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pxvolume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.VolumeOutlayPair)
}

::google::protobuf::uint8* VolumeOutlayPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.VolumeOutlayPair)
  // optional int64 volume = 1 [default = 0];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->volume(), target);
  }

  // optional double pxvolume = 2 [default = 0];
  if (has_pxvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pxvolume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.VolumeOutlayPair)
  return target;
}

int VolumeOutlayPair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.VolumeOutlayPair)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 volume = 1 [default = 0];
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional double pxvolume = 2 [default = 0];
    if (has_pxvolume()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeOutlayPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.VolumeOutlayPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VolumeOutlayPair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VolumeOutlayPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.VolumeOutlayPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.VolumeOutlayPair)
    MergeFrom(*source);
  }
}

void VolumeOutlayPair::MergeFrom(const VolumeOutlayPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.VolumeOutlayPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_pxvolume()) {
      set_pxvolume(from.pxvolume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VolumeOutlayPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.VolumeOutlayPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeOutlayPair::CopyFrom(const VolumeOutlayPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.VolumeOutlayPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeOutlayPair::IsInitialized() const {

  return true;
}

void VolumeOutlayPair::Swap(VolumeOutlayPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VolumeOutlayPair::InternalSwap(VolumeOutlayPair* other) {
  std::swap(volume_, other->volume_);
  std::swap(pxvolume_, other->pxvolume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VolumeOutlayPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolumeOutlayPair_descriptor_;
  metadata.reflection = VolumeOutlayPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VolumeOutlayPair

// optional int64 volume = 1 [default = 0];
bool VolumeOutlayPair::has_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VolumeOutlayPair::set_has_volume() {
  _has_bits_[0] |= 0x00000001u;
}
void VolumeOutlayPair::clear_has_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
void VolumeOutlayPair::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 VolumeOutlayPair::volume() const {
  // @@protoc_insertion_point(field_get:XT.VolumeOutlayPair.volume)
  return volume_;
}
 void VolumeOutlayPair::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.VolumeOutlayPair.volume)
}

// optional double pxvolume = 2 [default = 0];
bool VolumeOutlayPair::has_pxvolume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VolumeOutlayPair::set_has_pxvolume() {
  _has_bits_[0] |= 0x00000002u;
}
void VolumeOutlayPair::clear_has_pxvolume() {
  _has_bits_[0] &= ~0x00000002u;
}
void VolumeOutlayPair::clear_pxvolume() {
  pxvolume_ = 0;
  clear_has_pxvolume();
}
 double VolumeOutlayPair::pxvolume() const {
  // @@protoc_insertion_point(field_get:XT.VolumeOutlayPair.pxvolume)
  return pxvolume_;
}
 void VolumeOutlayPair::set_pxvolume(double value) {
  set_has_pxvolume();
  pxvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.VolumeOutlayPair.pxvolume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderInfo::kInstrumentidFieldNumber;
const int OrderInfo::kIidFieldNumber;
const int OrderInfo::kOrderidFieldNumber;
const int OrderInfo::kQidFieldNumber;
const int OrderInfo::kBstypeFieldNumber;
const int OrderInfo::kPxFieldNumber;
const int OrderInfo::kOrigszFieldNumber;
const int OrderInfo::kOpenszFieldNumber;
const int OrderInfo::kFilledszFieldNumber;
const int OrderInfo::kTrdapiFieldNumber;
const int OrderInfo::kOrdertypeFieldNumber;
const int OrderInfo::kStatusFieldNumber;
const int OrderInfo::kTssentFieldNumber;
const int OrderInfo::kTssentrejectedFieldNumber;
const int OrderInfo::kTscnfFieldNumber;
const int OrderInfo::kTscxlsentFieldNumber;
const int OrderInfo::kTscxlrejectedFieldNumber;
const int OrderInfo::kTsfinishedFieldNumber;
const int OrderInfo::kOcflagFieldNumber;
const int OrderInfo::kOqrtypemaskFieldNumber;
const int OrderInfo::kIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderInfo::OrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OrderInfo)
}

void OrderInfo::InitAsDefaultInstance() {
}

OrderInfo::OrderInfo(const OrderInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OrderInfo)
}

void OrderInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iid_ = 0;
  orderid_ = 0;
  qid_ = 0;
  bstype_ = 0;
  px_ = 0;
  origsz_ = 0;
  opensz_ = 0;
  filledsz_ = 0;
  trdapi_ = 0;
  ordertype_ = 0;
  status_ = 0;
  tssent_ = GOOGLE_LONGLONG(0);
  tssentrejected_ = GOOGLE_LONGLONG(0);
  tscnf_ = GOOGLE_LONGLONG(0);
  tscxlsent_ = GOOGLE_LONGLONG(0);
  tscxlrejected_ = GOOGLE_LONGLONG(0);
  tsfinished_ = GOOGLE_LONGLONG(0);
  ocflag_ = 0;
  oqrtypemask_ = 0;
  idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderInfo::~OrderInfo() {
  // @@protoc_insertion_point(destructor:XT.OrderInfo)
  SharedDtor();
}

void OrderInfo::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderInfo_descriptor_;
}

const OrderInfo& OrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OrderInfo* OrderInfo::default_instance_ = NULL;

OrderInfo* OrderInfo::New(::google::protobuf::Arena* arena) const {
  OrderInfo* n = new OrderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OrderInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OrderInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OrderInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(iid_, opensz_);
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(filledsz_, tscxlsent_);
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(tscxlrejected_, idx_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrumentid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.OrderInfo.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iid;
        break;
      }

      // optional int32 iid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_iid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderid;
        break;
      }

      // optional int32 orderid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_qid;
        break;
      }

      // optional int32 qid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_qid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qid_)));
          set_has_qid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bstype;
        break;
      }

      // optional int32 bstype = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_bstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bstype_)));
          set_has_bstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_px;
        break;
      }

      // optional double px = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_origsz;
        break;
      }

      // optional int32 origsz = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_origsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origsz_)));
          set_has_origsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_opensz;
        break;
      }

      // optional int32 opensz = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_opensz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opensz_)));
          set_has_opensz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_filledsz;
        break;
      }

      // optional int32 filledsz = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_filledsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filledsz_)));
          set_has_filledsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_trdapi;
        break;
      }

      // optional int32 trdapi = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_trdapi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trdapi_)));
          set_has_trdapi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ordertype;
        break;
      }

      // optional int32 ordertype = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_ordertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertype_)));
          set_has_ordertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }

      // optional int32 status = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_tssent;
        break;
      }

      // optional int64 tssent = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_tssent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tssent_)));
          set_has_tssent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_tssentrejected;
        break;
      }

      // optional int64 tssentrejected = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_tssentrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tssentrejected_)));
          set_has_tssentrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_tscnf;
        break;
      }

      // optional int64 tscnf = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_tscnf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tscnf_)));
          set_has_tscnf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_tscxlsent;
        break;
      }

      // optional int64 tscxlsent = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_tscxlsent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tscxlsent_)));
          set_has_tscxlsent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tscxlrejected;
        break;
      }

      // optional int64 tscxlrejected = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_tscxlrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tscxlrejected_)));
          set_has_tscxlrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_tsfinished;
        break;
      }

      // optional int64 tsfinished = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_tsfinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tsfinished_)));
          set_has_tsfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ocflag;
        break;
      }

      // optional int32 ocflag = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_ocflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ocflag_)));
          set_has_ocflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_oqrtypemask;
        break;
      }

      // optional int32 oqrtypemask = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_oqrtypemask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oqrtypemask_)));
          set_has_oqrtypemask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_idx;
        break;
      }

      // optional int32 idx = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OrderInfo)
  return false;
#undef DO_
}

void OrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OrderInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OrderInfo.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentid(), output);
  }

  // optional int32 iid = 2 [default = 0];
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iid(), output);
  }

  // optional int32 orderid = 3 [default = 0];
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderid(), output);
  }

  // optional int32 qid = 4 [default = 0];
  if (has_qid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->qid(), output);
  }

  // optional int32 bstype = 5 [default = 0];
  if (has_bstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bstype(), output);
  }

  // optional double px = 6 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->px(), output);
  }

  // optional int32 origsz = 7 [default = 0];
  if (has_origsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->origsz(), output);
  }

  // optional int32 opensz = 8 [default = 0];
  if (has_opensz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->opensz(), output);
  }

  // optional int32 filledsz = 9 [default = 0];
  if (has_filledsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->filledsz(), output);
  }

  // optional int32 trdapi = 10 [default = 0];
  if (has_trdapi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->trdapi(), output);
  }

  // optional int32 ordertype = 11 [default = 0];
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ordertype(), output);
  }

  // optional int32 status = 12 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->status(), output);
  }

  // optional int64 tssent = 15 [default = 0];
  if (has_tssent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->tssent(), output);
  }

  // optional int64 tssentrejected = 16 [default = 0];
  if (has_tssentrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->tssentrejected(), output);
  }

  // optional int64 tscnf = 17 [default = 0];
  if (has_tscnf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->tscnf(), output);
  }

  // optional int64 tscxlsent = 18 [default = 0];
  if (has_tscxlsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->tscxlsent(), output);
  }

  // optional int64 tscxlrejected = 19 [default = 0];
  if (has_tscxlrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->tscxlrejected(), output);
  }

  // optional int64 tsfinished = 20 [default = 0];
  if (has_tsfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->tsfinished(), output);
  }

  // optional int32 ocflag = 21 [default = 0];
  if (has_ocflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ocflag(), output);
  }

  // optional int32 oqrtypemask = 22 [default = 0];
  if (has_oqrtypemask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->oqrtypemask(), output);
  }

  // optional int32 idx = 23 [default = 0];
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OrderInfo)
}

::google::protobuf::uint8* OrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OrderInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.OrderInfo.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // optional int32 iid = 2 [default = 0];
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iid(), target);
  }

  // optional int32 orderid = 3 [default = 0];
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderid(), target);
  }

  // optional int32 qid = 4 [default = 0];
  if (has_qid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->qid(), target);
  }

  // optional int32 bstype = 5 [default = 0];
  if (has_bstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bstype(), target);
  }

  // optional double px = 6 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->px(), target);
  }

  // optional int32 origsz = 7 [default = 0];
  if (has_origsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->origsz(), target);
  }

  // optional int32 opensz = 8 [default = 0];
  if (has_opensz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->opensz(), target);
  }

  // optional int32 filledsz = 9 [default = 0];
  if (has_filledsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->filledsz(), target);
  }

  // optional int32 trdapi = 10 [default = 0];
  if (has_trdapi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->trdapi(), target);
  }

  // optional int32 ordertype = 11 [default = 0];
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ordertype(), target);
  }

  // optional int32 status = 12 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->status(), target);
  }

  // optional int64 tssent = 15 [default = 0];
  if (has_tssent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->tssent(), target);
  }

  // optional int64 tssentrejected = 16 [default = 0];
  if (has_tssentrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->tssentrejected(), target);
  }

  // optional int64 tscnf = 17 [default = 0];
  if (has_tscnf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->tscnf(), target);
  }

  // optional int64 tscxlsent = 18 [default = 0];
  if (has_tscxlsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->tscxlsent(), target);
  }

  // optional int64 tscxlrejected = 19 [default = 0];
  if (has_tscxlrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->tscxlrejected(), target);
  }

  // optional int64 tsfinished = 20 [default = 0];
  if (has_tsfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->tsfinished(), target);
  }

  // optional int32 ocflag = 21 [default = 0];
  if (has_ocflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ocflag(), target);
  }

  // optional int32 oqrtypemask = 22 [default = 0];
  if (has_oqrtypemask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->oqrtypemask(), target);
  }

  // optional int32 idx = 23 [default = 0];
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OrderInfo)
  return target;
}

int OrderInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OrderInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string instrumentid = 1 [default = ""];
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional int32 iid = 2 [default = 0];
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

    // optional int32 orderid = 3 [default = 0];
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 qid = 4 [default = 0];
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qid());
    }

    // optional int32 bstype = 5 [default = 0];
    if (has_bstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bstype());
    }

    // optional double px = 6 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }

    // optional int32 origsz = 7 [default = 0];
    if (has_origsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origsz());
    }

    // optional int32 opensz = 8 [default = 0];
    if (has_opensz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opensz());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 filledsz = 9 [default = 0];
    if (has_filledsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filledsz());
    }

    // optional int32 trdapi = 10 [default = 0];
    if (has_trdapi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trdapi());
    }

    // optional int32 ordertype = 11 [default = 0];
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordertype());
    }

    // optional int32 status = 12 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 tssent = 15 [default = 0];
    if (has_tssent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tssent());
    }

    // optional int64 tssentrejected = 16 [default = 0];
    if (has_tssentrejected()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tssentrejected());
    }

    // optional int64 tscnf = 17 [default = 0];
    if (has_tscnf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tscnf());
    }

    // optional int64 tscxlsent = 18 [default = 0];
    if (has_tscxlsent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tscxlsent());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int64 tscxlrejected = 19 [default = 0];
    if (has_tscxlrejected()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tscxlrejected());
    }

    // optional int64 tsfinished = 20 [default = 0];
    if (has_tsfinished()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tsfinished());
    }

    // optional int32 ocflag = 21 [default = 0];
    if (has_ocflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ocflag());
    }

    // optional int32 oqrtypemask = 22 [default = 0];
    if (has_oqrtypemask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oqrtypemask());
    }

    // optional int32 idx = 23 [default = 0];
    if (has_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OrderInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OrderInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OrderInfo)
    MergeFrom(*source);
  }
}

void OrderInfo::MergeFrom(const OrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OrderInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_qid()) {
      set_qid(from.qid());
    }
    if (from.has_bstype()) {
      set_bstype(from.bstype());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_origsz()) {
      set_origsz(from.origsz());
    }
    if (from.has_opensz()) {
      set_opensz(from.opensz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filledsz()) {
      set_filledsz(from.filledsz());
    }
    if (from.has_trdapi()) {
      set_trdapi(from.trdapi());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_tssent()) {
      set_tssent(from.tssent());
    }
    if (from.has_tssentrejected()) {
      set_tssentrejected(from.tssentrejected());
    }
    if (from.has_tscnf()) {
      set_tscnf(from.tscnf());
    }
    if (from.has_tscxlsent()) {
      set_tscxlsent(from.tscxlsent());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tscxlrejected()) {
      set_tscxlrejected(from.tscxlrejected());
    }
    if (from.has_tsfinished()) {
      set_tsfinished(from.tsfinished());
    }
    if (from.has_ocflag()) {
      set_ocflag(from.ocflag());
    }
    if (from.has_oqrtypemask()) {
      set_oqrtypemask(from.oqrtypemask());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderInfo::CopyFrom(const OrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfo::IsInitialized() const {

  return true;
}

void OrderInfo::Swap(OrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderInfo::InternalSwap(OrderInfo* other) {
  instrumentid_.Swap(&other->instrumentid_);
  std::swap(iid_, other->iid_);
  std::swap(orderid_, other->orderid_);
  std::swap(qid_, other->qid_);
  std::swap(bstype_, other->bstype_);
  std::swap(px_, other->px_);
  std::swap(origsz_, other->origsz_);
  std::swap(opensz_, other->opensz_);
  std::swap(filledsz_, other->filledsz_);
  std::swap(trdapi_, other->trdapi_);
  std::swap(ordertype_, other->ordertype_);
  std::swap(status_, other->status_);
  std::swap(tssent_, other->tssent_);
  std::swap(tssentrejected_, other->tssentrejected_);
  std::swap(tscnf_, other->tscnf_);
  std::swap(tscxlsent_, other->tscxlsent_);
  std::swap(tscxlrejected_, other->tscxlrejected_);
  std::swap(tsfinished_, other->tsfinished_);
  std::swap(ocflag_, other->ocflag_);
  std::swap(oqrtypemask_, other->oqrtypemask_);
  std::swap(idx_, other->idx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderInfo_descriptor_;
  metadata.reflection = OrderInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderInfo

// optional string instrumentid = 1 [default = ""];
bool OrderInfo::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderInfo::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderInfo::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& OrderInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OrderInfo::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.OrderInfo.instrumentid)
}
 void OrderInfo::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.OrderInfo.instrumentid)
}
 void OrderInfo::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.OrderInfo.instrumentid)
}
 ::std::string* OrderInfo::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.OrderInfo.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OrderInfo::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.OrderInfo.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OrderInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.OrderInfo.instrumentid)
}

// optional int32 iid = 2 [default = 0];
bool OrderInfo::has_iid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderInfo::set_has_iid() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderInfo::clear_has_iid() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderInfo::clear_iid() {
  iid_ = 0;
  clear_has_iid();
}
 ::google::protobuf::int32 OrderInfo::iid() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.iid)
  return iid_;
}
 void OrderInfo::set_iid(::google::protobuf::int32 value) {
  set_has_iid();
  iid_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.iid)
}

// optional int32 orderid = 3 [default = 0];
bool OrderInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderInfo::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
 ::google::protobuf::int32 OrderInfo::orderid() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.orderid)
  return orderid_;
}
 void OrderInfo::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.orderid)
}

// optional int32 qid = 4 [default = 0];
bool OrderInfo::has_qid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrderInfo::set_has_qid() {
  _has_bits_[0] |= 0x00000008u;
}
void OrderInfo::clear_has_qid() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrderInfo::clear_qid() {
  qid_ = 0;
  clear_has_qid();
}
 ::google::protobuf::int32 OrderInfo::qid() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.qid)
  return qid_;
}
 void OrderInfo::set_qid(::google::protobuf::int32 value) {
  set_has_qid();
  qid_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.qid)
}

// optional int32 bstype = 5 [default = 0];
bool OrderInfo::has_bstype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrderInfo::set_has_bstype() {
  _has_bits_[0] |= 0x00000010u;
}
void OrderInfo::clear_has_bstype() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrderInfo::clear_bstype() {
  bstype_ = 0;
  clear_has_bstype();
}
 ::google::protobuf::int32 OrderInfo::bstype() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.bstype)
  return bstype_;
}
 void OrderInfo::set_bstype(::google::protobuf::int32 value) {
  set_has_bstype();
  bstype_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.bstype)
}

// optional double px = 6 [default = 0];
bool OrderInfo::has_px() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrderInfo::set_has_px() {
  _has_bits_[0] |= 0x00000020u;
}
void OrderInfo::clear_has_px() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrderInfo::clear_px() {
  px_ = 0;
  clear_has_px();
}
 double OrderInfo::px() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.px)
  return px_;
}
 void OrderInfo::set_px(double value) {
  set_has_px();
  px_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.px)
}

// optional int32 origsz = 7 [default = 0];
bool OrderInfo::has_origsz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrderInfo::set_has_origsz() {
  _has_bits_[0] |= 0x00000040u;
}
void OrderInfo::clear_has_origsz() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrderInfo::clear_origsz() {
  origsz_ = 0;
  clear_has_origsz();
}
 ::google::protobuf::int32 OrderInfo::origsz() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.origsz)
  return origsz_;
}
 void OrderInfo::set_origsz(::google::protobuf::int32 value) {
  set_has_origsz();
  origsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.origsz)
}

// optional int32 opensz = 8 [default = 0];
bool OrderInfo::has_opensz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OrderInfo::set_has_opensz() {
  _has_bits_[0] |= 0x00000080u;
}
void OrderInfo::clear_has_opensz() {
  _has_bits_[0] &= ~0x00000080u;
}
void OrderInfo::clear_opensz() {
  opensz_ = 0;
  clear_has_opensz();
}
 ::google::protobuf::int32 OrderInfo::opensz() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.opensz)
  return opensz_;
}
 void OrderInfo::set_opensz(::google::protobuf::int32 value) {
  set_has_opensz();
  opensz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.opensz)
}

// optional int32 filledsz = 9 [default = 0];
bool OrderInfo::has_filledsz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OrderInfo::set_has_filledsz() {
  _has_bits_[0] |= 0x00000100u;
}
void OrderInfo::clear_has_filledsz() {
  _has_bits_[0] &= ~0x00000100u;
}
void OrderInfo::clear_filledsz() {
  filledsz_ = 0;
  clear_has_filledsz();
}
 ::google::protobuf::int32 OrderInfo::filledsz() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.filledsz)
  return filledsz_;
}
 void OrderInfo::set_filledsz(::google::protobuf::int32 value) {
  set_has_filledsz();
  filledsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.filledsz)
}

// optional int32 trdapi = 10 [default = 0];
bool OrderInfo::has_trdapi() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OrderInfo::set_has_trdapi() {
  _has_bits_[0] |= 0x00000200u;
}
void OrderInfo::clear_has_trdapi() {
  _has_bits_[0] &= ~0x00000200u;
}
void OrderInfo::clear_trdapi() {
  trdapi_ = 0;
  clear_has_trdapi();
}
 ::google::protobuf::int32 OrderInfo::trdapi() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.trdapi)
  return trdapi_;
}
 void OrderInfo::set_trdapi(::google::protobuf::int32 value) {
  set_has_trdapi();
  trdapi_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.trdapi)
}

// optional int32 ordertype = 11 [default = 0];
bool OrderInfo::has_ordertype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OrderInfo::set_has_ordertype() {
  _has_bits_[0] |= 0x00000400u;
}
void OrderInfo::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000400u;
}
void OrderInfo::clear_ordertype() {
  ordertype_ = 0;
  clear_has_ordertype();
}
 ::google::protobuf::int32 OrderInfo::ordertype() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.ordertype)
  return ordertype_;
}
 void OrderInfo::set_ordertype(::google::protobuf::int32 value) {
  set_has_ordertype();
  ordertype_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.ordertype)
}

// optional int32 status = 12 [default = 0];
bool OrderInfo::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OrderInfo::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
void OrderInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
void OrderInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 OrderInfo::status() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.status)
  return status_;
}
 void OrderInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.status)
}

// optional int64 tssent = 15 [default = 0];
bool OrderInfo::has_tssent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OrderInfo::set_has_tssent() {
  _has_bits_[0] |= 0x00001000u;
}
void OrderInfo::clear_has_tssent() {
  _has_bits_[0] &= ~0x00001000u;
}
void OrderInfo::clear_tssent() {
  tssent_ = GOOGLE_LONGLONG(0);
  clear_has_tssent();
}
 ::google::protobuf::int64 OrderInfo::tssent() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.tssent)
  return tssent_;
}
 void OrderInfo::set_tssent(::google::protobuf::int64 value) {
  set_has_tssent();
  tssent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.tssent)
}

// optional int64 tssentrejected = 16 [default = 0];
bool OrderInfo::has_tssentrejected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OrderInfo::set_has_tssentrejected() {
  _has_bits_[0] |= 0x00002000u;
}
void OrderInfo::clear_has_tssentrejected() {
  _has_bits_[0] &= ~0x00002000u;
}
void OrderInfo::clear_tssentrejected() {
  tssentrejected_ = GOOGLE_LONGLONG(0);
  clear_has_tssentrejected();
}
 ::google::protobuf::int64 OrderInfo::tssentrejected() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.tssentrejected)
  return tssentrejected_;
}
 void OrderInfo::set_tssentrejected(::google::protobuf::int64 value) {
  set_has_tssentrejected();
  tssentrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.tssentrejected)
}

// optional int64 tscnf = 17 [default = 0];
bool OrderInfo::has_tscnf() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OrderInfo::set_has_tscnf() {
  _has_bits_[0] |= 0x00004000u;
}
void OrderInfo::clear_has_tscnf() {
  _has_bits_[0] &= ~0x00004000u;
}
void OrderInfo::clear_tscnf() {
  tscnf_ = GOOGLE_LONGLONG(0);
  clear_has_tscnf();
}
 ::google::protobuf::int64 OrderInfo::tscnf() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.tscnf)
  return tscnf_;
}
 void OrderInfo::set_tscnf(::google::protobuf::int64 value) {
  set_has_tscnf();
  tscnf_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.tscnf)
}

// optional int64 tscxlsent = 18 [default = 0];
bool OrderInfo::has_tscxlsent() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void OrderInfo::set_has_tscxlsent() {
  _has_bits_[0] |= 0x00008000u;
}
void OrderInfo::clear_has_tscxlsent() {
  _has_bits_[0] &= ~0x00008000u;
}
void OrderInfo::clear_tscxlsent() {
  tscxlsent_ = GOOGLE_LONGLONG(0);
  clear_has_tscxlsent();
}
 ::google::protobuf::int64 OrderInfo::tscxlsent() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.tscxlsent)
  return tscxlsent_;
}
 void OrderInfo::set_tscxlsent(::google::protobuf::int64 value) {
  set_has_tscxlsent();
  tscxlsent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.tscxlsent)
}

// optional int64 tscxlrejected = 19 [default = 0];
bool OrderInfo::has_tscxlrejected() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void OrderInfo::set_has_tscxlrejected() {
  _has_bits_[0] |= 0x00010000u;
}
void OrderInfo::clear_has_tscxlrejected() {
  _has_bits_[0] &= ~0x00010000u;
}
void OrderInfo::clear_tscxlrejected() {
  tscxlrejected_ = GOOGLE_LONGLONG(0);
  clear_has_tscxlrejected();
}
 ::google::protobuf::int64 OrderInfo::tscxlrejected() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.tscxlrejected)
  return tscxlrejected_;
}
 void OrderInfo::set_tscxlrejected(::google::protobuf::int64 value) {
  set_has_tscxlrejected();
  tscxlrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.tscxlrejected)
}

// optional int64 tsfinished = 20 [default = 0];
bool OrderInfo::has_tsfinished() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void OrderInfo::set_has_tsfinished() {
  _has_bits_[0] |= 0x00020000u;
}
void OrderInfo::clear_has_tsfinished() {
  _has_bits_[0] &= ~0x00020000u;
}
void OrderInfo::clear_tsfinished() {
  tsfinished_ = GOOGLE_LONGLONG(0);
  clear_has_tsfinished();
}
 ::google::protobuf::int64 OrderInfo::tsfinished() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.tsfinished)
  return tsfinished_;
}
 void OrderInfo::set_tsfinished(::google::protobuf::int64 value) {
  set_has_tsfinished();
  tsfinished_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.tsfinished)
}

// optional int32 ocflag = 21 [default = 0];
bool OrderInfo::has_ocflag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void OrderInfo::set_has_ocflag() {
  _has_bits_[0] |= 0x00040000u;
}
void OrderInfo::clear_has_ocflag() {
  _has_bits_[0] &= ~0x00040000u;
}
void OrderInfo::clear_ocflag() {
  ocflag_ = 0;
  clear_has_ocflag();
}
 ::google::protobuf::int32 OrderInfo::ocflag() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.ocflag)
  return ocflag_;
}
 void OrderInfo::set_ocflag(::google::protobuf::int32 value) {
  set_has_ocflag();
  ocflag_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.ocflag)
}

// optional int32 oqrtypemask = 22 [default = 0];
bool OrderInfo::has_oqrtypemask() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void OrderInfo::set_has_oqrtypemask() {
  _has_bits_[0] |= 0x00080000u;
}
void OrderInfo::clear_has_oqrtypemask() {
  _has_bits_[0] &= ~0x00080000u;
}
void OrderInfo::clear_oqrtypemask() {
  oqrtypemask_ = 0;
  clear_has_oqrtypemask();
}
 ::google::protobuf::int32 OrderInfo::oqrtypemask() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.oqrtypemask)
  return oqrtypemask_;
}
 void OrderInfo::set_oqrtypemask(::google::protobuf::int32 value) {
  set_has_oqrtypemask();
  oqrtypemask_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.oqrtypemask)
}

// optional int32 idx = 23 [default = 0];
bool OrderInfo::has_idx() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void OrderInfo::set_has_idx() {
  _has_bits_[0] |= 0x00100000u;
}
void OrderInfo::clear_has_idx() {
  _has_bits_[0] &= ~0x00100000u;
}
void OrderInfo::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
 ::google::protobuf::int32 OrderInfo::idx() const {
  // @@protoc_insertion_point(field_get:XT.OrderInfo.idx)
  return idx_;
}
 void OrderInfo::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderInfo.idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuoteInfo::kInstrumentidFieldNumber;
const int QuoteInfo::kQidFieldNumber;
const int QuoteInfo::kBidorderidFieldNumber;
const int QuoteInfo::kAskorderidFieldNumber;
const int QuoteInfo::kStatusFieldNumber;
const int QuoteInfo::kBidocflagFieldNumber;
const int QuoteInfo::kAskocflagFieldNumber;
const int QuoteInfo::kOqrtypemaskFieldNumber;
const int QuoteInfo::kExchangeidFieldNumber;
const int QuoteInfo::kQuotesysidFieldNumber;
const int QuoteInfo::kBidordersysidFieldNumber;
const int QuoteInfo::kAskordersysidFieldNumber;
const int QuoteInfo::kForquotesysidFieldNumber;
const int QuoteInfo::kForquotetimeFieldNumber;
const int QuoteInfo::kQuotelocalidFieldNumber;
const int QuoteInfo::kBidpxFieldNumber;
const int QuoteInfo::kAskpxFieldNumber;
const int QuoteInfo::kBidszFieldNumber;
const int QuoteInfo::kAskszFieldNumber;
const int QuoteInfo::kBidfilledszFieldNumber;
const int QuoteInfo::kAskfilledszFieldNumber;
const int QuoteInfo::kTssentFieldNumber;
const int QuoteInfo::kTssentrejectedFieldNumber;
const int QuoteInfo::kTscnfFieldNumber;
const int QuoteInfo::kTscxlsentFieldNumber;
const int QuoteInfo::kTscxlrejectedFieldNumber;
const int QuoteInfo::kTsfinishedFieldNumber;
const int QuoteInfo::kTsbidcxledFieldNumber;
const int QuoteInfo::kTsaskcxledFieldNumber;
const int QuoteInfo::kTsbidallfilledFieldNumber;
const int QuoteInfo::kTsaskallfilledFieldNumber;
const int QuoteInfo::kReasonflagFieldNumber;
const int QuoteInfo::kMktbidpxFieldNumber;
const int QuoteInfo::kMktaskpxFieldNumber;
const int QuoteInfo::kNetposFieldNumber;
const int QuoteInfo::kOcposdeltanormFieldNumber;
const int QuoteInfo::kOcposvegaFieldNumber;
const int QuoteInfo::kDeltaFieldNumber;
const int QuoteInfo::kVegaFieldNumber;
const int QuoteInfo::kIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuoteInfo::QuoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.QuoteInfo)
}

void QuoteInfo::InitAsDefaultInstance() {
}

QuoteInfo::QuoteInfo(const QuoteInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.QuoteInfo)
}

void QuoteInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qid_ = 0;
  bidorderid_ = 0;
  askorderid_ = 0;
  status_ = 0;
  bidocflag_ = 0;
  askocflag_ = 0;
  oqrtypemask_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotesysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  askordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotesysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotelocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidpx_ = 0;
  askpx_ = 0;
  bidsz_ = 0;
  asksz_ = 0;
  bidfilledsz_ = 0;
  askfilledsz_ = 0;
  tssent_ = GOOGLE_LONGLONG(0);
  tssentrejected_ = GOOGLE_LONGLONG(0);
  tscnf_ = GOOGLE_LONGLONG(0);
  tscxlsent_ = GOOGLE_LONGLONG(0);
  tscxlrejected_ = GOOGLE_LONGLONG(0);
  tsfinished_ = GOOGLE_LONGLONG(0);
  tsbidcxled_ = GOOGLE_LONGLONG(0);
  tsaskcxled_ = GOOGLE_LONGLONG(0);
  tsbidallfilled_ = GOOGLE_LONGLONG(0);
  tsaskallfilled_ = GOOGLE_LONGLONG(0);
  reasonflag_ = 0;
  mktbidpx_ = 0;
  mktaskpx_ = 0;
  netpos_ = 0;
  ocposdeltanorm_ = 0;
  ocposvega_ = 0;
  delta_ = 0;
  vega_ = 0;
  idx_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuoteInfo::~QuoteInfo() {
  // @@protoc_insertion_point(destructor:XT.QuoteInfo)
  SharedDtor();
}

void QuoteInfo::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotesysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  askordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotesysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotelocalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QuoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteInfo_descriptor_;
}

const QuoteInfo& QuoteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

QuoteInfo* QuoteInfo::default_instance_ = NULL;

QuoteInfo* QuoteInfo::New(::google::protobuf::Arena* arena) const {
  QuoteInfo* n = new QuoteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.QuoteInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuoteInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuoteInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(qid_, askocflag_);
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    oqrtypemask_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_exchangeid()) {
      exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_quotesysid()) {
      quotesysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bidordersysid()) {
      bidordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_askordersysid()) {
      askordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_forquotesysid()) {
      forquotesysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_forquotetime()) {
      forquotetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_quotelocalid()) {
      quotelocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bidpx_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(askpx_, tscnf_);
    bidsz_ = 0;
    askfilledsz_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(tscxlsent_, tscxlrejected_);
    ZR_(reasonflag_, tsaskallfilled_);
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(mktbidpx_, vega_);
    idx_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QuoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.QuoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrumentid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qid;
        break;
      }

      // optional int32 qid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_qid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qid_)));
          set_has_qid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bidorderid;
        break;
      }

      // optional int32 bidorderid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_bidorderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidorderid_)));
          set_has_bidorderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_askorderid;
        break;
      }

      // optional int32 askorderid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_askorderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askorderid_)));
          set_has_askorderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bidocflag;
        break;
      }

      // optional int32 bidocflag = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_bidocflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidocflag_)));
          set_has_bidocflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_askocflag;
        break;
      }

      // optional int32 askocflag = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_askocflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askocflag_)));
          set_has_askocflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_oqrtypemask;
        break;
      }

      // optional int32 oqrtypemask = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_oqrtypemask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oqrtypemask_)));
          set_has_oqrtypemask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_exchangeid;
        break;
      }

      // optional string exchangeid = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_exchangeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_quotesysid;
        break;
      }

      // optional string quotesysid = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_quotesysid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotesysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quotesysid().data(), this->quotesysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.quotesysid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_bidordersysid;
        break;
      }

      // optional string bidordersysid = 11 [default = ""];
      case 11: {
        if (tag == 90) {
         parse_bidordersysid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidordersysid().data(), this->bidordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.bidordersysid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_askordersysid;
        break;
      }

      // optional string askordersysid = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_askordersysid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_askordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->askordersysid().data(), this->askordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.askordersysid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_forquotesysid;
        break;
      }

      // optional string forquotesysid = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_forquotesysid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forquotesysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forquotesysid().data(), this->forquotesysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.forquotesysid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_forquotetime;
        break;
      }

      // optional string forquotetime = 14 [default = ""];
      case 14: {
        if (tag == 114) {
         parse_forquotetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forquotetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forquotetime().data(), this->forquotetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.forquotetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_quotelocalid;
        break;
      }

      // optional string quotelocalid = 15 [default = ""];
      case 15: {
        if (tag == 122) {
         parse_quotelocalid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotelocalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quotelocalid().data(), this->quotelocalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.QuoteInfo.quotelocalid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_bidpx;
        break;
      }

      // optional double bidpx = 16 [default = 0];
      case 16: {
        if (tag == 129) {
         parse_bidpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidpx_)));
          set_has_bidpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_askpx;
        break;
      }

      // optional double askpx = 17 [default = 0];
      case 17: {
        if (tag == 137) {
         parse_askpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askpx_)));
          set_has_askpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_bidsz;
        break;
      }

      // optional int32 bidsz = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_bidsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsz_)));
          set_has_bidsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_asksz;
        break;
      }

      // optional int32 asksz = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_asksz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksz_)));
          set_has_asksz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_bidfilledsz;
        break;
      }

      // optional int32 bidfilledsz = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_bidfilledsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidfilledsz_)));
          set_has_bidfilledsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_askfilledsz;
        break;
      }

      // optional int32 askfilledsz = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_askfilledsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askfilledsz_)));
          set_has_askfilledsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_tssent;
        break;
      }

      // optional int64 tssent = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_tssent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tssent_)));
          set_has_tssent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_tssentrejected;
        break;
      }

      // optional int64 tssentrejected = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_tssentrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tssentrejected_)));
          set_has_tssentrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_tscnf;
        break;
      }

      // optional int64 tscnf = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_tscnf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tscnf_)));
          set_has_tscnf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_tscxlsent;
        break;
      }

      // optional int64 tscxlsent = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_tscxlsent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tscxlsent_)));
          set_has_tscxlsent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_tscxlrejected;
        break;
      }

      // optional int64 tscxlrejected = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_tscxlrejected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tscxlrejected_)));
          set_has_tscxlrejected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_tsfinished;
        break;
      }

      // optional int64 tsfinished = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_tsfinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tsfinished_)));
          set_has_tsfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_tsbidcxled;
        break;
      }

      // optional int64 tsbidcxled = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_tsbidcxled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tsbidcxled_)));
          set_has_tsbidcxled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_tsaskcxled;
        break;
      }

      // optional int64 tsaskcxled = 29 [default = 0];
      case 29: {
        if (tag == 232) {
         parse_tsaskcxled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tsaskcxled_)));
          set_has_tsaskcxled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_tsbidallfilled;
        break;
      }

      // optional int64 tsbidallfilled = 30 [default = 0];
      case 30: {
        if (tag == 240) {
         parse_tsbidallfilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tsbidallfilled_)));
          set_has_tsbidallfilled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_tsaskallfilled;
        break;
      }

      // optional int64 tsaskallfilled = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_tsaskallfilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tsaskallfilled_)));
          set_has_tsaskallfilled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_reasonflag;
        break;
      }

      // optional int32 reasonflag = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_reasonflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reasonflag_)));
          set_has_reasonflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_mktbidpx;
        break;
      }

      // optional double mktbidpx = 33 [default = 0];
      case 33: {
        if (tag == 265) {
         parse_mktbidpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mktbidpx_)));
          set_has_mktbidpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_mktaskpx;
        break;
      }

      // optional double mktaskpx = 34 [default = 0];
      case 34: {
        if (tag == 273) {
         parse_mktaskpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mktaskpx_)));
          set_has_mktaskpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_netpos;
        break;
      }

      // optional double netpos = 35 [default = 0];
      case 35: {
        if (tag == 281) {
         parse_netpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &netpos_)));
          set_has_netpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_ocposdeltanorm;
        break;
      }

      // optional double ocposdeltanorm = 36 [default = 0];
      case 36: {
        if (tag == 289) {
         parse_ocposdeltanorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocposdeltanorm_)));
          set_has_ocposdeltanorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_ocposvega;
        break;
      }

      // optional double ocposvega = 37 [default = 0];
      case 37: {
        if (tag == 297) {
         parse_ocposvega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ocposvega_)));
          set_has_ocposvega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_delta;
        break;
      }

      // optional double delta = 38 [default = 0];
      case 38: {
        if (tag == 305) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(313)) goto parse_vega;
        break;
      }

      // optional double vega = 39 [default = 0];
      case 39: {
        if (tag == 313) {
         parse_vega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vega_)));
          set_has_vega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_idx;
        break;
      }

      // optional double idx = 40 [default = -1];
      case 40: {
        if (tag == 321) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.QuoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.QuoteInfo)
  return false;
#undef DO_
}

void QuoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.QuoteInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentid(), output);
  }

  // optional int32 qid = 2 [default = 0];
  if (has_qid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->qid(), output);
  }

  // optional int32 bidorderid = 3 [default = 0];
  if (has_bidorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bidorderid(), output);
  }

  // optional int32 askorderid = 4 [default = 0];
  if (has_askorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->askorderid(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional int32 bidocflag = 6 [default = 0];
  if (has_bidocflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bidocflag(), output);
  }

  // optional int32 askocflag = 7 [default = 0];
  if (has_askocflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->askocflag(), output);
  }

  // optional int32 oqrtypemask = 8 [default = 0];
  if (has_oqrtypemask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->oqrtypemask(), output);
  }

  // optional string exchangeid = 9 [default = ""];
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->exchangeid(), output);
  }

  // optional string quotesysid = 10 [default = ""];
  if (has_quotesysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotesysid().data(), this->quotesysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.quotesysid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->quotesysid(), output);
  }

  // optional string bidordersysid = 11 [default = ""];
  if (has_bidordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidordersysid().data(), this->bidordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.bidordersysid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->bidordersysid(), output);
  }

  // optional string askordersysid = 12 [default = ""];
  if (has_askordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->askordersysid().data(), this->askordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.askordersysid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->askordersysid(), output);
  }

  // optional string forquotesysid = 13 [default = ""];
  if (has_forquotesysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotesysid().data(), this->forquotesysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.forquotesysid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->forquotesysid(), output);
  }

  // optional string forquotetime = 14 [default = ""];
  if (has_forquotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotetime().data(), this->forquotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.forquotetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->forquotetime(), output);
  }

  // optional string quotelocalid = 15 [default = ""];
  if (has_quotelocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotelocalid().data(), this->quotelocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.quotelocalid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->quotelocalid(), output);
  }

  // optional double bidpx = 16 [default = 0];
  if (has_bidpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidpx(), output);
  }

  // optional double askpx = 17 [default = 0];
  if (has_askpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->askpx(), output);
  }

  // optional int32 bidsz = 18 [default = 0];
  if (has_bidsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bidsz(), output);
  }

  // optional int32 asksz = 19 [default = 0];
  if (has_asksz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->asksz(), output);
  }

  // optional int32 bidfilledsz = 20 [default = 0];
  if (has_bidfilledsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bidfilledsz(), output);
  }

  // optional int32 askfilledsz = 21 [default = 0];
  if (has_askfilledsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->askfilledsz(), output);
  }

  // optional int64 tssent = 22 [default = 0];
  if (has_tssent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->tssent(), output);
  }

  // optional int64 tssentrejected = 23 [default = 0];
  if (has_tssentrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->tssentrejected(), output);
  }

  // optional int64 tscnf = 24 [default = 0];
  if (has_tscnf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->tscnf(), output);
  }

  // optional int64 tscxlsent = 25 [default = 0];
  if (has_tscxlsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->tscxlsent(), output);
  }

  // optional int64 tscxlrejected = 26 [default = 0];
  if (has_tscxlrejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->tscxlrejected(), output);
  }

  // optional int64 tsfinished = 27 [default = 0];
  if (has_tsfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->tsfinished(), output);
  }

  // optional int64 tsbidcxled = 28 [default = 0];
  if (has_tsbidcxled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->tsbidcxled(), output);
  }

  // optional int64 tsaskcxled = 29 [default = 0];
  if (has_tsaskcxled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->tsaskcxled(), output);
  }

  // optional int64 tsbidallfilled = 30 [default = 0];
  if (has_tsbidallfilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->tsbidallfilled(), output);
  }

  // optional int64 tsaskallfilled = 31 [default = 0];
  if (has_tsaskallfilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->tsaskallfilled(), output);
  }

  // optional int32 reasonflag = 32 [default = 0];
  if (has_reasonflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->reasonflag(), output);
  }

  // optional double mktbidpx = 33 [default = 0];
  if (has_mktbidpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->mktbidpx(), output);
  }

  // optional double mktaskpx = 34 [default = 0];
  if (has_mktaskpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->mktaskpx(), output);
  }

  // optional double netpos = 35 [default = 0];
  if (has_netpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->netpos(), output);
  }

  // optional double ocposdeltanorm = 36 [default = 0];
  if (has_ocposdeltanorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->ocposdeltanorm(), output);
  }

  // optional double ocposvega = 37 [default = 0];
  if (has_ocposvega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->ocposvega(), output);
  }

  // optional double delta = 38 [default = 0];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->delta(), output);
  }

  // optional double vega = 39 [default = 0];
  if (has_vega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->vega(), output);
  }

  // optional double idx = 40 [default = -1];
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.QuoteInfo)
}

::google::protobuf::uint8* QuoteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.QuoteInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // optional int32 qid = 2 [default = 0];
  if (has_qid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->qid(), target);
  }

  // optional int32 bidorderid = 3 [default = 0];
  if (has_bidorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bidorderid(), target);
  }

  // optional int32 askorderid = 4 [default = 0];
  if (has_askorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->askorderid(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional int32 bidocflag = 6 [default = 0];
  if (has_bidocflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bidocflag(), target);
  }

  // optional int32 askocflag = 7 [default = 0];
  if (has_askocflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->askocflag(), target);
  }

  // optional int32 oqrtypemask = 8 [default = 0];
  if (has_oqrtypemask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->oqrtypemask(), target);
  }

  // optional string exchangeid = 9 [default = ""];
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->exchangeid(), target);
  }

  // optional string quotesysid = 10 [default = ""];
  if (has_quotesysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotesysid().data(), this->quotesysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.quotesysid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->quotesysid(), target);
  }

  // optional string bidordersysid = 11 [default = ""];
  if (has_bidordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidordersysid().data(), this->bidordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.bidordersysid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bidordersysid(), target);
  }

  // optional string askordersysid = 12 [default = ""];
  if (has_askordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->askordersysid().data(), this->askordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.askordersysid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->askordersysid(), target);
  }

  // optional string forquotesysid = 13 [default = ""];
  if (has_forquotesysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotesysid().data(), this->forquotesysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.forquotesysid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->forquotesysid(), target);
  }

  // optional string forquotetime = 14 [default = ""];
  if (has_forquotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotetime().data(), this->forquotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.forquotetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->forquotetime(), target);
  }

  // optional string quotelocalid = 15 [default = ""];
  if (has_quotelocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotelocalid().data(), this->quotelocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.QuoteInfo.quotelocalid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->quotelocalid(), target);
  }

  // optional double bidpx = 16 [default = 0];
  if (has_bidpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidpx(), target);
  }

  // optional double askpx = 17 [default = 0];
  if (has_askpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->askpx(), target);
  }

  // optional int32 bidsz = 18 [default = 0];
  if (has_bidsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bidsz(), target);
  }

  // optional int32 asksz = 19 [default = 0];
  if (has_asksz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->asksz(), target);
  }

  // optional int32 bidfilledsz = 20 [default = 0];
  if (has_bidfilledsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bidfilledsz(), target);
  }

  // optional int32 askfilledsz = 21 [default = 0];
  if (has_askfilledsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->askfilledsz(), target);
  }

  // optional int64 tssent = 22 [default = 0];
  if (has_tssent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->tssent(), target);
  }

  // optional int64 tssentrejected = 23 [default = 0];
  if (has_tssentrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->tssentrejected(), target);
  }

  // optional int64 tscnf = 24 [default = 0];
  if (has_tscnf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->tscnf(), target);
  }

  // optional int64 tscxlsent = 25 [default = 0];
  if (has_tscxlsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->tscxlsent(), target);
  }

  // optional int64 tscxlrejected = 26 [default = 0];
  if (has_tscxlrejected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->tscxlrejected(), target);
  }

  // optional int64 tsfinished = 27 [default = 0];
  if (has_tsfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->tsfinished(), target);
  }

  // optional int64 tsbidcxled = 28 [default = 0];
  if (has_tsbidcxled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->tsbidcxled(), target);
  }

  // optional int64 tsaskcxled = 29 [default = 0];
  if (has_tsaskcxled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->tsaskcxled(), target);
  }

  // optional int64 tsbidallfilled = 30 [default = 0];
  if (has_tsbidallfilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->tsbidallfilled(), target);
  }

  // optional int64 tsaskallfilled = 31 [default = 0];
  if (has_tsaskallfilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->tsaskallfilled(), target);
  }

  // optional int32 reasonflag = 32 [default = 0];
  if (has_reasonflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->reasonflag(), target);
  }

  // optional double mktbidpx = 33 [default = 0];
  if (has_mktbidpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->mktbidpx(), target);
  }

  // optional double mktaskpx = 34 [default = 0];
  if (has_mktaskpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->mktaskpx(), target);
  }

  // optional double netpos = 35 [default = 0];
  if (has_netpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->netpos(), target);
  }

  // optional double ocposdeltanorm = 36 [default = 0];
  if (has_ocposdeltanorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->ocposdeltanorm(), target);
  }

  // optional double ocposvega = 37 [default = 0];
  if (has_ocposvega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->ocposvega(), target);
  }

  // optional double delta = 38 [default = 0];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->delta(), target);
  }

  // optional double vega = 39 [default = 0];
  if (has_vega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->vega(), target);
  }

  // optional double idx = 40 [default = -1];
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.QuoteInfo)
  return target;
}

int QuoteInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.QuoteInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string instrumentid = 1 [default = ""];
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional int32 qid = 2 [default = 0];
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qid());
    }

    // optional int32 bidorderid = 3 [default = 0];
    if (has_bidorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidorderid());
    }

    // optional int32 askorderid = 4 [default = 0];
    if (has_askorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askorderid());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 bidocflag = 6 [default = 0];
    if (has_bidocflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidocflag());
    }

    // optional int32 askocflag = 7 [default = 0];
    if (has_askocflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askocflag());
    }

    // optional int32 oqrtypemask = 8 [default = 0];
    if (has_oqrtypemask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oqrtypemask());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string exchangeid = 9 [default = ""];
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string quotesysid = 10 [default = ""];
    if (has_quotesysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotesysid());
    }

    // optional string bidordersysid = 11 [default = ""];
    if (has_bidordersysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidordersysid());
    }

    // optional string askordersysid = 12 [default = ""];
    if (has_askordersysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->askordersysid());
    }

    // optional string forquotesysid = 13 [default = ""];
    if (has_forquotesysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forquotesysid());
    }

    // optional string forquotetime = 14 [default = ""];
    if (has_forquotetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forquotetime());
    }

    // optional string quotelocalid = 15 [default = ""];
    if (has_quotelocalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotelocalid());
    }

    // optional double bidpx = 16 [default = 0];
    if (has_bidpx()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double askpx = 17 [default = 0];
    if (has_askpx()) {
      total_size += 2 + 8;
    }

    // optional int32 bidsz = 18 [default = 0];
    if (has_bidsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsz());
    }

    // optional int32 asksz = 19 [default = 0];
    if (has_asksz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksz());
    }

    // optional int32 bidfilledsz = 20 [default = 0];
    if (has_bidfilledsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidfilledsz());
    }

    // optional int32 askfilledsz = 21 [default = 0];
    if (has_askfilledsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askfilledsz());
    }

    // optional int64 tssent = 22 [default = 0];
    if (has_tssent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tssent());
    }

    // optional int64 tssentrejected = 23 [default = 0];
    if (has_tssentrejected()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tssentrejected());
    }

    // optional int64 tscnf = 24 [default = 0];
    if (has_tscnf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tscnf());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int64 tscxlsent = 25 [default = 0];
    if (has_tscxlsent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tscxlsent());
    }

    // optional int64 tscxlrejected = 26 [default = 0];
    if (has_tscxlrejected()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tscxlrejected());
    }

    // optional int64 tsfinished = 27 [default = 0];
    if (has_tsfinished()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tsfinished());
    }

    // optional int64 tsbidcxled = 28 [default = 0];
    if (has_tsbidcxled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tsbidcxled());
    }

    // optional int64 tsaskcxled = 29 [default = 0];
    if (has_tsaskcxled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tsaskcxled());
    }

    // optional int64 tsbidallfilled = 30 [default = 0];
    if (has_tsbidallfilled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tsbidallfilled());
    }

    // optional int64 tsaskallfilled = 31 [default = 0];
    if (has_tsaskallfilled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tsaskallfilled());
    }

    // optional int32 reasonflag = 32 [default = 0];
    if (has_reasonflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reasonflag());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional double mktbidpx = 33 [default = 0];
    if (has_mktbidpx()) {
      total_size += 2 + 8;
    }

    // optional double mktaskpx = 34 [default = 0];
    if (has_mktaskpx()) {
      total_size += 2 + 8;
    }

    // optional double netpos = 35 [default = 0];
    if (has_netpos()) {
      total_size += 2 + 8;
    }

    // optional double ocposdeltanorm = 36 [default = 0];
    if (has_ocposdeltanorm()) {
      total_size += 2 + 8;
    }

    // optional double ocposvega = 37 [default = 0];
    if (has_ocposvega()) {
      total_size += 2 + 8;
    }

    // optional double delta = 38 [default = 0];
    if (has_delta()) {
      total_size += 2 + 8;
    }

    // optional double vega = 39 [default = 0];
    if (has_vega()) {
      total_size += 2 + 8;
    }

    // optional double idx = 40 [default = -1];
    if (has_idx()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.QuoteInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QuoteInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QuoteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.QuoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.QuoteInfo)
    MergeFrom(*source);
  }
}

void QuoteInfo::MergeFrom(const QuoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.QuoteInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_qid()) {
      set_qid(from.qid());
    }
    if (from.has_bidorderid()) {
      set_bidorderid(from.bidorderid());
    }
    if (from.has_askorderid()) {
      set_askorderid(from.askorderid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_bidocflag()) {
      set_bidocflag(from.bidocflag());
    }
    if (from.has_askocflag()) {
      set_askocflag(from.askocflag());
    }
    if (from.has_oqrtypemask()) {
      set_oqrtypemask(from.oqrtypemask());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exchangeid()) {
      set_has_exchangeid();
      exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
    }
    if (from.has_quotesysid()) {
      set_has_quotesysid();
      quotesysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quotesysid_);
    }
    if (from.has_bidordersysid()) {
      set_has_bidordersysid();
      bidordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bidordersysid_);
    }
    if (from.has_askordersysid()) {
      set_has_askordersysid();
      askordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.askordersysid_);
    }
    if (from.has_forquotesysid()) {
      set_has_forquotesysid();
      forquotesysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forquotesysid_);
    }
    if (from.has_forquotetime()) {
      set_has_forquotetime();
      forquotetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forquotetime_);
    }
    if (from.has_quotelocalid()) {
      set_has_quotelocalid();
      quotelocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quotelocalid_);
    }
    if (from.has_bidpx()) {
      set_bidpx(from.bidpx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_askpx()) {
      set_askpx(from.askpx());
    }
    if (from.has_bidsz()) {
      set_bidsz(from.bidsz());
    }
    if (from.has_asksz()) {
      set_asksz(from.asksz());
    }
    if (from.has_bidfilledsz()) {
      set_bidfilledsz(from.bidfilledsz());
    }
    if (from.has_askfilledsz()) {
      set_askfilledsz(from.askfilledsz());
    }
    if (from.has_tssent()) {
      set_tssent(from.tssent());
    }
    if (from.has_tssentrejected()) {
      set_tssentrejected(from.tssentrejected());
    }
    if (from.has_tscnf()) {
      set_tscnf(from.tscnf());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tscxlsent()) {
      set_tscxlsent(from.tscxlsent());
    }
    if (from.has_tscxlrejected()) {
      set_tscxlrejected(from.tscxlrejected());
    }
    if (from.has_tsfinished()) {
      set_tsfinished(from.tsfinished());
    }
    if (from.has_tsbidcxled()) {
      set_tsbidcxled(from.tsbidcxled());
    }
    if (from.has_tsaskcxled()) {
      set_tsaskcxled(from.tsaskcxled());
    }
    if (from.has_tsbidallfilled()) {
      set_tsbidallfilled(from.tsbidallfilled());
    }
    if (from.has_tsaskallfilled()) {
      set_tsaskallfilled(from.tsaskallfilled());
    }
    if (from.has_reasonflag()) {
      set_reasonflag(from.reasonflag());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_mktbidpx()) {
      set_mktbidpx(from.mktbidpx());
    }
    if (from.has_mktaskpx()) {
      set_mktaskpx(from.mktaskpx());
    }
    if (from.has_netpos()) {
      set_netpos(from.netpos());
    }
    if (from.has_ocposdeltanorm()) {
      set_ocposdeltanorm(from.ocposdeltanorm());
    }
    if (from.has_ocposvega()) {
      set_ocposvega(from.ocposvega());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_vega()) {
      set_vega(from.vega());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QuoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.QuoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteInfo::CopyFrom(const QuoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.QuoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteInfo::IsInitialized() const {

  return true;
}

void QuoteInfo::Swap(QuoteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuoteInfo::InternalSwap(QuoteInfo* other) {
  instrumentid_.Swap(&other->instrumentid_);
  std::swap(qid_, other->qid_);
  std::swap(bidorderid_, other->bidorderid_);
  std::swap(askorderid_, other->askorderid_);
  std::swap(status_, other->status_);
  std::swap(bidocflag_, other->bidocflag_);
  std::swap(askocflag_, other->askocflag_);
  std::swap(oqrtypemask_, other->oqrtypemask_);
  exchangeid_.Swap(&other->exchangeid_);
  quotesysid_.Swap(&other->quotesysid_);
  bidordersysid_.Swap(&other->bidordersysid_);
  askordersysid_.Swap(&other->askordersysid_);
  forquotesysid_.Swap(&other->forquotesysid_);
  forquotetime_.Swap(&other->forquotetime_);
  quotelocalid_.Swap(&other->quotelocalid_);
  std::swap(bidpx_, other->bidpx_);
  std::swap(askpx_, other->askpx_);
  std::swap(bidsz_, other->bidsz_);
  std::swap(asksz_, other->asksz_);
  std::swap(bidfilledsz_, other->bidfilledsz_);
  std::swap(askfilledsz_, other->askfilledsz_);
  std::swap(tssent_, other->tssent_);
  std::swap(tssentrejected_, other->tssentrejected_);
  std::swap(tscnf_, other->tscnf_);
  std::swap(tscxlsent_, other->tscxlsent_);
  std::swap(tscxlrejected_, other->tscxlrejected_);
  std::swap(tsfinished_, other->tsfinished_);
  std::swap(tsbidcxled_, other->tsbidcxled_);
  std::swap(tsaskcxled_, other->tsaskcxled_);
  std::swap(tsbidallfilled_, other->tsbidallfilled_);
  std::swap(tsaskallfilled_, other->tsaskallfilled_);
  std::swap(reasonflag_, other->reasonflag_);
  std::swap(mktbidpx_, other->mktbidpx_);
  std::swap(mktaskpx_, other->mktaskpx_);
  std::swap(netpos_, other->netpos_);
  std::swap(ocposdeltanorm_, other->ocposdeltanorm_);
  std::swap(ocposvega_, other->ocposvega_);
  std::swap(delta_, other->delta_);
  std::swap(vega_, other->vega_);
  std::swap(idx_, other->idx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteInfo_descriptor_;
  metadata.reflection = QuoteInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuoteInfo

// optional string instrumentid = 1 [default = ""];
bool QuoteInfo::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuoteInfo::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000001u;
}
void QuoteInfo::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuoteInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& QuoteInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.instrumentid)
}
 void QuoteInfo::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.instrumentid)
}
 void QuoteInfo::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.instrumentid)
}
 ::std::string* QuoteInfo::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.instrumentid)
}

// optional int32 qid = 2 [default = 0];
bool QuoteInfo::has_qid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuoteInfo::set_has_qid() {
  _has_bits_[0] |= 0x00000002u;
}
void QuoteInfo::clear_has_qid() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuoteInfo::clear_qid() {
  qid_ = 0;
  clear_has_qid();
}
 ::google::protobuf::int32 QuoteInfo::qid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.qid)
  return qid_;
}
 void QuoteInfo::set_qid(::google::protobuf::int32 value) {
  set_has_qid();
  qid_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.qid)
}

// optional int32 bidorderid = 3 [default = 0];
bool QuoteInfo::has_bidorderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QuoteInfo::set_has_bidorderid() {
  _has_bits_[0] |= 0x00000004u;
}
void QuoteInfo::clear_has_bidorderid() {
  _has_bits_[0] &= ~0x00000004u;
}
void QuoteInfo::clear_bidorderid() {
  bidorderid_ = 0;
  clear_has_bidorderid();
}
 ::google::protobuf::int32 QuoteInfo::bidorderid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.bidorderid)
  return bidorderid_;
}
 void QuoteInfo::set_bidorderid(::google::protobuf::int32 value) {
  set_has_bidorderid();
  bidorderid_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.bidorderid)
}

// optional int32 askorderid = 4 [default = 0];
bool QuoteInfo::has_askorderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QuoteInfo::set_has_askorderid() {
  _has_bits_[0] |= 0x00000008u;
}
void QuoteInfo::clear_has_askorderid() {
  _has_bits_[0] &= ~0x00000008u;
}
void QuoteInfo::clear_askorderid() {
  askorderid_ = 0;
  clear_has_askorderid();
}
 ::google::protobuf::int32 QuoteInfo::askorderid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.askorderid)
  return askorderid_;
}
 void QuoteInfo::set_askorderid(::google::protobuf::int32 value) {
  set_has_askorderid();
  askorderid_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.askorderid)
}

// optional int32 status = 5 [default = 0];
bool QuoteInfo::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QuoteInfo::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void QuoteInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void QuoteInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 QuoteInfo::status() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.status)
  return status_;
}
 void QuoteInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.status)
}

// optional int32 bidocflag = 6 [default = 0];
bool QuoteInfo::has_bidocflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QuoteInfo::set_has_bidocflag() {
  _has_bits_[0] |= 0x00000020u;
}
void QuoteInfo::clear_has_bidocflag() {
  _has_bits_[0] &= ~0x00000020u;
}
void QuoteInfo::clear_bidocflag() {
  bidocflag_ = 0;
  clear_has_bidocflag();
}
 ::google::protobuf::int32 QuoteInfo::bidocflag() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.bidocflag)
  return bidocflag_;
}
 void QuoteInfo::set_bidocflag(::google::protobuf::int32 value) {
  set_has_bidocflag();
  bidocflag_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.bidocflag)
}

// optional int32 askocflag = 7 [default = 0];
bool QuoteInfo::has_askocflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QuoteInfo::set_has_askocflag() {
  _has_bits_[0] |= 0x00000040u;
}
void QuoteInfo::clear_has_askocflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void QuoteInfo::clear_askocflag() {
  askocflag_ = 0;
  clear_has_askocflag();
}
 ::google::protobuf::int32 QuoteInfo::askocflag() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.askocflag)
  return askocflag_;
}
 void QuoteInfo::set_askocflag(::google::protobuf::int32 value) {
  set_has_askocflag();
  askocflag_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.askocflag)
}

// optional int32 oqrtypemask = 8 [default = 0];
bool QuoteInfo::has_oqrtypemask() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QuoteInfo::set_has_oqrtypemask() {
  _has_bits_[0] |= 0x00000080u;
}
void QuoteInfo::clear_has_oqrtypemask() {
  _has_bits_[0] &= ~0x00000080u;
}
void QuoteInfo::clear_oqrtypemask() {
  oqrtypemask_ = 0;
  clear_has_oqrtypemask();
}
 ::google::protobuf::int32 QuoteInfo::oqrtypemask() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.oqrtypemask)
  return oqrtypemask_;
}
 void QuoteInfo::set_oqrtypemask(::google::protobuf::int32 value) {
  set_has_oqrtypemask();
  oqrtypemask_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.oqrtypemask)
}

// optional string exchangeid = 9 [default = ""];
bool QuoteInfo::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QuoteInfo::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000100u;
}
void QuoteInfo::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000100u;
}
void QuoteInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeid();
}
 const ::std::string& QuoteInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.exchangeid)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.exchangeid)
}
 void QuoteInfo::set_exchangeid(const char* value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.exchangeid)
}
 void QuoteInfo::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.exchangeid)
}
 ::std::string* QuoteInfo::mutable_exchangeid() {
  set_has_exchangeid();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_exchangeid() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.exchangeid)
  clear_has_exchangeid();
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    set_has_exchangeid();
  } else {
    clear_has_exchangeid();
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.exchangeid)
}

// optional string quotesysid = 10 [default = ""];
bool QuoteInfo::has_quotesysid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QuoteInfo::set_has_quotesysid() {
  _has_bits_[0] |= 0x00000200u;
}
void QuoteInfo::clear_has_quotesysid() {
  _has_bits_[0] &= ~0x00000200u;
}
void QuoteInfo::clear_quotesysid() {
  quotesysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quotesysid();
}
 const ::std::string& QuoteInfo::quotesysid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.quotesysid)
  return quotesysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_quotesysid(const ::std::string& value) {
  set_has_quotesysid();
  quotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.quotesysid)
}
 void QuoteInfo::set_quotesysid(const char* value) {
  set_has_quotesysid();
  quotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.quotesysid)
}
 void QuoteInfo::set_quotesysid(const char* value, size_t size) {
  set_has_quotesysid();
  quotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.quotesysid)
}
 ::std::string* QuoteInfo::mutable_quotesysid() {
  set_has_quotesysid();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.quotesysid)
  return quotesysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_quotesysid() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.quotesysid)
  clear_has_quotesysid();
  return quotesysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_quotesysid(::std::string* quotesysid) {
  if (quotesysid != NULL) {
    set_has_quotesysid();
  } else {
    clear_has_quotesysid();
  }
  quotesysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quotesysid);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.quotesysid)
}

// optional string bidordersysid = 11 [default = ""];
bool QuoteInfo::has_bidordersysid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void QuoteInfo::set_has_bidordersysid() {
  _has_bits_[0] |= 0x00000400u;
}
void QuoteInfo::clear_has_bidordersysid() {
  _has_bits_[0] &= ~0x00000400u;
}
void QuoteInfo::clear_bidordersysid() {
  bidordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bidordersysid();
}
 const ::std::string& QuoteInfo::bidordersysid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.bidordersysid)
  return bidordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_bidordersysid(const ::std::string& value) {
  set_has_bidordersysid();
  bidordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.bidordersysid)
}
 void QuoteInfo::set_bidordersysid(const char* value) {
  set_has_bidordersysid();
  bidordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.bidordersysid)
}
 void QuoteInfo::set_bidordersysid(const char* value, size_t size) {
  set_has_bidordersysid();
  bidordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.bidordersysid)
}
 ::std::string* QuoteInfo::mutable_bidordersysid() {
  set_has_bidordersysid();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.bidordersysid)
  return bidordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_bidordersysid() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.bidordersysid)
  clear_has_bidordersysid();
  return bidordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_bidordersysid(::std::string* bidordersysid) {
  if (bidordersysid != NULL) {
    set_has_bidordersysid();
  } else {
    clear_has_bidordersysid();
  }
  bidordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bidordersysid);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.bidordersysid)
}

// optional string askordersysid = 12 [default = ""];
bool QuoteInfo::has_askordersysid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void QuoteInfo::set_has_askordersysid() {
  _has_bits_[0] |= 0x00000800u;
}
void QuoteInfo::clear_has_askordersysid() {
  _has_bits_[0] &= ~0x00000800u;
}
void QuoteInfo::clear_askordersysid() {
  askordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_askordersysid();
}
 const ::std::string& QuoteInfo::askordersysid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.askordersysid)
  return askordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_askordersysid(const ::std::string& value) {
  set_has_askordersysid();
  askordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.askordersysid)
}
 void QuoteInfo::set_askordersysid(const char* value) {
  set_has_askordersysid();
  askordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.askordersysid)
}
 void QuoteInfo::set_askordersysid(const char* value, size_t size) {
  set_has_askordersysid();
  askordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.askordersysid)
}
 ::std::string* QuoteInfo::mutable_askordersysid() {
  set_has_askordersysid();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.askordersysid)
  return askordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_askordersysid() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.askordersysid)
  clear_has_askordersysid();
  return askordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_askordersysid(::std::string* askordersysid) {
  if (askordersysid != NULL) {
    set_has_askordersysid();
  } else {
    clear_has_askordersysid();
  }
  askordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), askordersysid);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.askordersysid)
}

// optional string forquotesysid = 13 [default = ""];
bool QuoteInfo::has_forquotesysid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void QuoteInfo::set_has_forquotesysid() {
  _has_bits_[0] |= 0x00001000u;
}
void QuoteInfo::clear_has_forquotesysid() {
  _has_bits_[0] &= ~0x00001000u;
}
void QuoteInfo::clear_forquotesysid() {
  forquotesysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_forquotesysid();
}
 const ::std::string& QuoteInfo::forquotesysid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.forquotesysid)
  return forquotesysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_forquotesysid(const ::std::string& value) {
  set_has_forquotesysid();
  forquotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.forquotesysid)
}
 void QuoteInfo::set_forquotesysid(const char* value) {
  set_has_forquotesysid();
  forquotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.forquotesysid)
}
 void QuoteInfo::set_forquotesysid(const char* value, size_t size) {
  set_has_forquotesysid();
  forquotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.forquotesysid)
}
 ::std::string* QuoteInfo::mutable_forquotesysid() {
  set_has_forquotesysid();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.forquotesysid)
  return forquotesysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_forquotesysid() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.forquotesysid)
  clear_has_forquotesysid();
  return forquotesysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_forquotesysid(::std::string* forquotesysid) {
  if (forquotesysid != NULL) {
    set_has_forquotesysid();
  } else {
    clear_has_forquotesysid();
  }
  forquotesysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forquotesysid);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.forquotesysid)
}

// optional string forquotetime = 14 [default = ""];
bool QuoteInfo::has_forquotetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void QuoteInfo::set_has_forquotetime() {
  _has_bits_[0] |= 0x00002000u;
}
void QuoteInfo::clear_has_forquotetime() {
  _has_bits_[0] &= ~0x00002000u;
}
void QuoteInfo::clear_forquotetime() {
  forquotetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_forquotetime();
}
 const ::std::string& QuoteInfo::forquotetime() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.forquotetime)
  return forquotetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_forquotetime(const ::std::string& value) {
  set_has_forquotetime();
  forquotetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.forquotetime)
}
 void QuoteInfo::set_forquotetime(const char* value) {
  set_has_forquotetime();
  forquotetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.forquotetime)
}
 void QuoteInfo::set_forquotetime(const char* value, size_t size) {
  set_has_forquotetime();
  forquotetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.forquotetime)
}
 ::std::string* QuoteInfo::mutable_forquotetime() {
  set_has_forquotetime();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.forquotetime)
  return forquotetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_forquotetime() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.forquotetime)
  clear_has_forquotetime();
  return forquotetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_forquotetime(::std::string* forquotetime) {
  if (forquotetime != NULL) {
    set_has_forquotetime();
  } else {
    clear_has_forquotetime();
  }
  forquotetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forquotetime);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.forquotetime)
}

// optional string quotelocalid = 15 [default = ""];
bool QuoteInfo::has_quotelocalid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void QuoteInfo::set_has_quotelocalid() {
  _has_bits_[0] |= 0x00004000u;
}
void QuoteInfo::clear_has_quotelocalid() {
  _has_bits_[0] &= ~0x00004000u;
}
void QuoteInfo::clear_quotelocalid() {
  quotelocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quotelocalid();
}
 const ::std::string& QuoteInfo::quotelocalid() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.quotelocalid)
  return quotelocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_quotelocalid(const ::std::string& value) {
  set_has_quotelocalid();
  quotelocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.quotelocalid)
}
 void QuoteInfo::set_quotelocalid(const char* value) {
  set_has_quotelocalid();
  quotelocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.QuoteInfo.quotelocalid)
}
 void QuoteInfo::set_quotelocalid(const char* value, size_t size) {
  set_has_quotelocalid();
  quotelocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.QuoteInfo.quotelocalid)
}
 ::std::string* QuoteInfo::mutable_quotelocalid() {
  set_has_quotelocalid();
  // @@protoc_insertion_point(field_mutable:XT.QuoteInfo.quotelocalid)
  return quotelocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuoteInfo::release_quotelocalid() {
  // @@protoc_insertion_point(field_release:XT.QuoteInfo.quotelocalid)
  clear_has_quotelocalid();
  return quotelocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuoteInfo::set_allocated_quotelocalid(::std::string* quotelocalid) {
  if (quotelocalid != NULL) {
    set_has_quotelocalid();
  } else {
    clear_has_quotelocalid();
  }
  quotelocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quotelocalid);
  // @@protoc_insertion_point(field_set_allocated:XT.QuoteInfo.quotelocalid)
}

// optional double bidpx = 16 [default = 0];
bool QuoteInfo::has_bidpx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void QuoteInfo::set_has_bidpx() {
  _has_bits_[0] |= 0x00008000u;
}
void QuoteInfo::clear_has_bidpx() {
  _has_bits_[0] &= ~0x00008000u;
}
void QuoteInfo::clear_bidpx() {
  bidpx_ = 0;
  clear_has_bidpx();
}
 double QuoteInfo::bidpx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.bidpx)
  return bidpx_;
}
 void QuoteInfo::set_bidpx(double value) {
  set_has_bidpx();
  bidpx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.bidpx)
}

// optional double askpx = 17 [default = 0];
bool QuoteInfo::has_askpx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void QuoteInfo::set_has_askpx() {
  _has_bits_[0] |= 0x00010000u;
}
void QuoteInfo::clear_has_askpx() {
  _has_bits_[0] &= ~0x00010000u;
}
void QuoteInfo::clear_askpx() {
  askpx_ = 0;
  clear_has_askpx();
}
 double QuoteInfo::askpx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.askpx)
  return askpx_;
}
 void QuoteInfo::set_askpx(double value) {
  set_has_askpx();
  askpx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.askpx)
}

// optional int32 bidsz = 18 [default = 0];
bool QuoteInfo::has_bidsz() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void QuoteInfo::set_has_bidsz() {
  _has_bits_[0] |= 0x00020000u;
}
void QuoteInfo::clear_has_bidsz() {
  _has_bits_[0] &= ~0x00020000u;
}
void QuoteInfo::clear_bidsz() {
  bidsz_ = 0;
  clear_has_bidsz();
}
 ::google::protobuf::int32 QuoteInfo::bidsz() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.bidsz)
  return bidsz_;
}
 void QuoteInfo::set_bidsz(::google::protobuf::int32 value) {
  set_has_bidsz();
  bidsz_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.bidsz)
}

// optional int32 asksz = 19 [default = 0];
bool QuoteInfo::has_asksz() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void QuoteInfo::set_has_asksz() {
  _has_bits_[0] |= 0x00040000u;
}
void QuoteInfo::clear_has_asksz() {
  _has_bits_[0] &= ~0x00040000u;
}
void QuoteInfo::clear_asksz() {
  asksz_ = 0;
  clear_has_asksz();
}
 ::google::protobuf::int32 QuoteInfo::asksz() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.asksz)
  return asksz_;
}
 void QuoteInfo::set_asksz(::google::protobuf::int32 value) {
  set_has_asksz();
  asksz_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.asksz)
}

// optional int32 bidfilledsz = 20 [default = 0];
bool QuoteInfo::has_bidfilledsz() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void QuoteInfo::set_has_bidfilledsz() {
  _has_bits_[0] |= 0x00080000u;
}
void QuoteInfo::clear_has_bidfilledsz() {
  _has_bits_[0] &= ~0x00080000u;
}
void QuoteInfo::clear_bidfilledsz() {
  bidfilledsz_ = 0;
  clear_has_bidfilledsz();
}
 ::google::protobuf::int32 QuoteInfo::bidfilledsz() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.bidfilledsz)
  return bidfilledsz_;
}
 void QuoteInfo::set_bidfilledsz(::google::protobuf::int32 value) {
  set_has_bidfilledsz();
  bidfilledsz_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.bidfilledsz)
}

// optional int32 askfilledsz = 21 [default = 0];
bool QuoteInfo::has_askfilledsz() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void QuoteInfo::set_has_askfilledsz() {
  _has_bits_[0] |= 0x00100000u;
}
void QuoteInfo::clear_has_askfilledsz() {
  _has_bits_[0] &= ~0x00100000u;
}
void QuoteInfo::clear_askfilledsz() {
  askfilledsz_ = 0;
  clear_has_askfilledsz();
}
 ::google::protobuf::int32 QuoteInfo::askfilledsz() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.askfilledsz)
  return askfilledsz_;
}
 void QuoteInfo::set_askfilledsz(::google::protobuf::int32 value) {
  set_has_askfilledsz();
  askfilledsz_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.askfilledsz)
}

// optional int64 tssent = 22 [default = 0];
bool QuoteInfo::has_tssent() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void QuoteInfo::set_has_tssent() {
  _has_bits_[0] |= 0x00200000u;
}
void QuoteInfo::clear_has_tssent() {
  _has_bits_[0] &= ~0x00200000u;
}
void QuoteInfo::clear_tssent() {
  tssent_ = GOOGLE_LONGLONG(0);
  clear_has_tssent();
}
 ::google::protobuf::int64 QuoteInfo::tssent() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tssent)
  return tssent_;
}
 void QuoteInfo::set_tssent(::google::protobuf::int64 value) {
  set_has_tssent();
  tssent_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tssent)
}

// optional int64 tssentrejected = 23 [default = 0];
bool QuoteInfo::has_tssentrejected() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void QuoteInfo::set_has_tssentrejected() {
  _has_bits_[0] |= 0x00400000u;
}
void QuoteInfo::clear_has_tssentrejected() {
  _has_bits_[0] &= ~0x00400000u;
}
void QuoteInfo::clear_tssentrejected() {
  tssentrejected_ = GOOGLE_LONGLONG(0);
  clear_has_tssentrejected();
}
 ::google::protobuf::int64 QuoteInfo::tssentrejected() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tssentrejected)
  return tssentrejected_;
}
 void QuoteInfo::set_tssentrejected(::google::protobuf::int64 value) {
  set_has_tssentrejected();
  tssentrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tssentrejected)
}

// optional int64 tscnf = 24 [default = 0];
bool QuoteInfo::has_tscnf() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void QuoteInfo::set_has_tscnf() {
  _has_bits_[0] |= 0x00800000u;
}
void QuoteInfo::clear_has_tscnf() {
  _has_bits_[0] &= ~0x00800000u;
}
void QuoteInfo::clear_tscnf() {
  tscnf_ = GOOGLE_LONGLONG(0);
  clear_has_tscnf();
}
 ::google::protobuf::int64 QuoteInfo::tscnf() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tscnf)
  return tscnf_;
}
 void QuoteInfo::set_tscnf(::google::protobuf::int64 value) {
  set_has_tscnf();
  tscnf_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tscnf)
}

// optional int64 tscxlsent = 25 [default = 0];
bool QuoteInfo::has_tscxlsent() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void QuoteInfo::set_has_tscxlsent() {
  _has_bits_[0] |= 0x01000000u;
}
void QuoteInfo::clear_has_tscxlsent() {
  _has_bits_[0] &= ~0x01000000u;
}
void QuoteInfo::clear_tscxlsent() {
  tscxlsent_ = GOOGLE_LONGLONG(0);
  clear_has_tscxlsent();
}
 ::google::protobuf::int64 QuoteInfo::tscxlsent() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tscxlsent)
  return tscxlsent_;
}
 void QuoteInfo::set_tscxlsent(::google::protobuf::int64 value) {
  set_has_tscxlsent();
  tscxlsent_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tscxlsent)
}

// optional int64 tscxlrejected = 26 [default = 0];
bool QuoteInfo::has_tscxlrejected() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void QuoteInfo::set_has_tscxlrejected() {
  _has_bits_[0] |= 0x02000000u;
}
void QuoteInfo::clear_has_tscxlrejected() {
  _has_bits_[0] &= ~0x02000000u;
}
void QuoteInfo::clear_tscxlrejected() {
  tscxlrejected_ = GOOGLE_LONGLONG(0);
  clear_has_tscxlrejected();
}
 ::google::protobuf::int64 QuoteInfo::tscxlrejected() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tscxlrejected)
  return tscxlrejected_;
}
 void QuoteInfo::set_tscxlrejected(::google::protobuf::int64 value) {
  set_has_tscxlrejected();
  tscxlrejected_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tscxlrejected)
}

// optional int64 tsfinished = 27 [default = 0];
bool QuoteInfo::has_tsfinished() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void QuoteInfo::set_has_tsfinished() {
  _has_bits_[0] |= 0x04000000u;
}
void QuoteInfo::clear_has_tsfinished() {
  _has_bits_[0] &= ~0x04000000u;
}
void QuoteInfo::clear_tsfinished() {
  tsfinished_ = GOOGLE_LONGLONG(0);
  clear_has_tsfinished();
}
 ::google::protobuf::int64 QuoteInfo::tsfinished() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tsfinished)
  return tsfinished_;
}
 void QuoteInfo::set_tsfinished(::google::protobuf::int64 value) {
  set_has_tsfinished();
  tsfinished_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tsfinished)
}

// optional int64 tsbidcxled = 28 [default = 0];
bool QuoteInfo::has_tsbidcxled() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void QuoteInfo::set_has_tsbidcxled() {
  _has_bits_[0] |= 0x08000000u;
}
void QuoteInfo::clear_has_tsbidcxled() {
  _has_bits_[0] &= ~0x08000000u;
}
void QuoteInfo::clear_tsbidcxled() {
  tsbidcxled_ = GOOGLE_LONGLONG(0);
  clear_has_tsbidcxled();
}
 ::google::protobuf::int64 QuoteInfo::tsbidcxled() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tsbidcxled)
  return tsbidcxled_;
}
 void QuoteInfo::set_tsbidcxled(::google::protobuf::int64 value) {
  set_has_tsbidcxled();
  tsbidcxled_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tsbidcxled)
}

// optional int64 tsaskcxled = 29 [default = 0];
bool QuoteInfo::has_tsaskcxled() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void QuoteInfo::set_has_tsaskcxled() {
  _has_bits_[0] |= 0x10000000u;
}
void QuoteInfo::clear_has_tsaskcxled() {
  _has_bits_[0] &= ~0x10000000u;
}
void QuoteInfo::clear_tsaskcxled() {
  tsaskcxled_ = GOOGLE_LONGLONG(0);
  clear_has_tsaskcxled();
}
 ::google::protobuf::int64 QuoteInfo::tsaskcxled() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tsaskcxled)
  return tsaskcxled_;
}
 void QuoteInfo::set_tsaskcxled(::google::protobuf::int64 value) {
  set_has_tsaskcxled();
  tsaskcxled_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tsaskcxled)
}

// optional int64 tsbidallfilled = 30 [default = 0];
bool QuoteInfo::has_tsbidallfilled() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void QuoteInfo::set_has_tsbidallfilled() {
  _has_bits_[0] |= 0x20000000u;
}
void QuoteInfo::clear_has_tsbidallfilled() {
  _has_bits_[0] &= ~0x20000000u;
}
void QuoteInfo::clear_tsbidallfilled() {
  tsbidallfilled_ = GOOGLE_LONGLONG(0);
  clear_has_tsbidallfilled();
}
 ::google::protobuf::int64 QuoteInfo::tsbidallfilled() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tsbidallfilled)
  return tsbidallfilled_;
}
 void QuoteInfo::set_tsbidallfilled(::google::protobuf::int64 value) {
  set_has_tsbidallfilled();
  tsbidallfilled_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tsbidallfilled)
}

// optional int64 tsaskallfilled = 31 [default = 0];
bool QuoteInfo::has_tsaskallfilled() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void QuoteInfo::set_has_tsaskallfilled() {
  _has_bits_[0] |= 0x40000000u;
}
void QuoteInfo::clear_has_tsaskallfilled() {
  _has_bits_[0] &= ~0x40000000u;
}
void QuoteInfo::clear_tsaskallfilled() {
  tsaskallfilled_ = GOOGLE_LONGLONG(0);
  clear_has_tsaskallfilled();
}
 ::google::protobuf::int64 QuoteInfo::tsaskallfilled() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.tsaskallfilled)
  return tsaskallfilled_;
}
 void QuoteInfo::set_tsaskallfilled(::google::protobuf::int64 value) {
  set_has_tsaskallfilled();
  tsaskallfilled_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.tsaskallfilled)
}

// optional int32 reasonflag = 32 [default = 0];
bool QuoteInfo::has_reasonflag() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void QuoteInfo::set_has_reasonflag() {
  _has_bits_[0] |= 0x80000000u;
}
void QuoteInfo::clear_has_reasonflag() {
  _has_bits_[0] &= ~0x80000000u;
}
void QuoteInfo::clear_reasonflag() {
  reasonflag_ = 0;
  clear_has_reasonflag();
}
 ::google::protobuf::int32 QuoteInfo::reasonflag() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.reasonflag)
  return reasonflag_;
}
 void QuoteInfo::set_reasonflag(::google::protobuf::int32 value) {
  set_has_reasonflag();
  reasonflag_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.reasonflag)
}

// optional double mktbidpx = 33 [default = 0];
bool QuoteInfo::has_mktbidpx() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void QuoteInfo::set_has_mktbidpx() {
  _has_bits_[1] |= 0x00000001u;
}
void QuoteInfo::clear_has_mktbidpx() {
  _has_bits_[1] &= ~0x00000001u;
}
void QuoteInfo::clear_mktbidpx() {
  mktbidpx_ = 0;
  clear_has_mktbidpx();
}
 double QuoteInfo::mktbidpx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.mktbidpx)
  return mktbidpx_;
}
 void QuoteInfo::set_mktbidpx(double value) {
  set_has_mktbidpx();
  mktbidpx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.mktbidpx)
}

// optional double mktaskpx = 34 [default = 0];
bool QuoteInfo::has_mktaskpx() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void QuoteInfo::set_has_mktaskpx() {
  _has_bits_[1] |= 0x00000002u;
}
void QuoteInfo::clear_has_mktaskpx() {
  _has_bits_[1] &= ~0x00000002u;
}
void QuoteInfo::clear_mktaskpx() {
  mktaskpx_ = 0;
  clear_has_mktaskpx();
}
 double QuoteInfo::mktaskpx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.mktaskpx)
  return mktaskpx_;
}
 void QuoteInfo::set_mktaskpx(double value) {
  set_has_mktaskpx();
  mktaskpx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.mktaskpx)
}

// optional double netpos = 35 [default = 0];
bool QuoteInfo::has_netpos() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void QuoteInfo::set_has_netpos() {
  _has_bits_[1] |= 0x00000004u;
}
void QuoteInfo::clear_has_netpos() {
  _has_bits_[1] &= ~0x00000004u;
}
void QuoteInfo::clear_netpos() {
  netpos_ = 0;
  clear_has_netpos();
}
 double QuoteInfo::netpos() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.netpos)
  return netpos_;
}
 void QuoteInfo::set_netpos(double value) {
  set_has_netpos();
  netpos_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.netpos)
}

// optional double ocposdeltanorm = 36 [default = 0];
bool QuoteInfo::has_ocposdeltanorm() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void QuoteInfo::set_has_ocposdeltanorm() {
  _has_bits_[1] |= 0x00000008u;
}
void QuoteInfo::clear_has_ocposdeltanorm() {
  _has_bits_[1] &= ~0x00000008u;
}
void QuoteInfo::clear_ocposdeltanorm() {
  ocposdeltanorm_ = 0;
  clear_has_ocposdeltanorm();
}
 double QuoteInfo::ocposdeltanorm() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.ocposdeltanorm)
  return ocposdeltanorm_;
}
 void QuoteInfo::set_ocposdeltanorm(double value) {
  set_has_ocposdeltanorm();
  ocposdeltanorm_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.ocposdeltanorm)
}

// optional double ocposvega = 37 [default = 0];
bool QuoteInfo::has_ocposvega() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void QuoteInfo::set_has_ocposvega() {
  _has_bits_[1] |= 0x00000010u;
}
void QuoteInfo::clear_has_ocposvega() {
  _has_bits_[1] &= ~0x00000010u;
}
void QuoteInfo::clear_ocposvega() {
  ocposvega_ = 0;
  clear_has_ocposvega();
}
 double QuoteInfo::ocposvega() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.ocposvega)
  return ocposvega_;
}
 void QuoteInfo::set_ocposvega(double value) {
  set_has_ocposvega();
  ocposvega_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.ocposvega)
}

// optional double delta = 38 [default = 0];
bool QuoteInfo::has_delta() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void QuoteInfo::set_has_delta() {
  _has_bits_[1] |= 0x00000020u;
}
void QuoteInfo::clear_has_delta() {
  _has_bits_[1] &= ~0x00000020u;
}
void QuoteInfo::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
 double QuoteInfo::delta() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.delta)
  return delta_;
}
 void QuoteInfo::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.delta)
}

// optional double vega = 39 [default = 0];
bool QuoteInfo::has_vega() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void QuoteInfo::set_has_vega() {
  _has_bits_[1] |= 0x00000040u;
}
void QuoteInfo::clear_has_vega() {
  _has_bits_[1] &= ~0x00000040u;
}
void QuoteInfo::clear_vega() {
  vega_ = 0;
  clear_has_vega();
}
 double QuoteInfo::vega() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.vega)
  return vega_;
}
 void QuoteInfo::set_vega(double value) {
  set_has_vega();
  vega_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.vega)
}

// optional double idx = 40 [default = -1];
bool QuoteInfo::has_idx() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void QuoteInfo::set_has_idx() {
  _has_bits_[1] |= 0x00000080u;
}
void QuoteInfo::clear_has_idx() {
  _has_bits_[1] &= ~0x00000080u;
}
void QuoteInfo::clear_idx() {
  idx_ = -1;
  clear_has_idx();
}
 double QuoteInfo::idx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteInfo.idx)
  return idx_;
}
 void QuoteInfo::set_idx(double value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteInfo.idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForQuoteInfo::kInstrumentidFieldNumber;
const int ForQuoteInfo::kForquotesysidFieldNumber;
const int ForQuoteInfo::kForquotetimeFieldNumber;
const int ForQuoteInfo::kRcvtsFieldNumber;
const int ForQuoteInfo::kRsptsFieldNumber;
const int ForQuoteInfo::kCurrqidFieldNumber;
const int ForQuoteInfo::kRspstatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForQuoteInfo::ForQuoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.ForQuoteInfo)
}

void ForQuoteInfo::InitAsDefaultInstance() {
}

ForQuoteInfo::ForQuoteInfo(const ForQuoteInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.ForQuoteInfo)
}

void ForQuoteInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotesysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rcvts_ = GOOGLE_LONGLONG(0);
  rspts_ = GOOGLE_LONGLONG(0);
  currqid_ = 0;
  rspstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForQuoteInfo::~ForQuoteInfo() {
  // @@protoc_insertion_point(destructor:XT.ForQuoteInfo)
  SharedDtor();
}

void ForQuoteInfo::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotesysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forquotetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ForQuoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForQuoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForQuoteInfo_descriptor_;
}

const ForQuoteInfo& ForQuoteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

ForQuoteInfo* ForQuoteInfo::default_instance_ = NULL;

ForQuoteInfo* ForQuoteInfo::New(::google::protobuf::Arena* arena) const {
  ForQuoteInfo* n = new ForQuoteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForQuoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.ForQuoteInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ForQuoteInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ForQuoteInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(rcvts_, rspstatus_);
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_forquotesysid()) {
      forquotesysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_forquotetime()) {
      forquotetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ForQuoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.ForQuoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrumentid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ForQuoteInfo.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_forquotesysid;
        break;
      }

      // optional string forquotesysid = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_forquotesysid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forquotesysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forquotesysid().data(), this->forquotesysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ForQuoteInfo.forquotesysid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_forquotetime;
        break;
      }

      // optional string forquotetime = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_forquotetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forquotetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forquotetime().data(), this->forquotetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ForQuoteInfo.forquotetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rcvts;
        break;
      }

      // optional int64 rcvts = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_rcvts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rcvts_)));
          set_has_rcvts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rspts;
        break;
      }

      // optional int64 rspts = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_rspts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rspts_)));
          set_has_rspts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currqid;
        break;
      }

      // optional int32 currqid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_currqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currqid_)));
          set_has_currqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rspstatus;
        break;
      }

      // optional int32 rspstatus = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_rspstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rspstatus_)));
          set_has_rspstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.ForQuoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.ForQuoteInfo)
  return false;
#undef DO_
}

void ForQuoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.ForQuoteInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ForQuoteInfo.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentid(), output);
  }

  // optional string forquotesysid = 2 [default = ""];
  if (has_forquotesysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotesysid().data(), this->forquotesysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ForQuoteInfo.forquotesysid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->forquotesysid(), output);
  }

  // optional string forquotetime = 3 [default = ""];
  if (has_forquotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotetime().data(), this->forquotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ForQuoteInfo.forquotetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->forquotetime(), output);
  }

  // optional int64 rcvts = 4 [default = 0];
  if (has_rcvts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rcvts(), output);
  }

  // optional int64 rspts = 5 [default = 0];
  if (has_rspts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->rspts(), output);
  }

  // optional int32 currqid = 6 [default = 0];
  if (has_currqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currqid(), output);
  }

  // optional int32 rspstatus = 7 [default = 0];
  if (has_rspstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rspstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.ForQuoteInfo)
}

::google::protobuf::uint8* ForQuoteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.ForQuoteInfo)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ForQuoteInfo.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // optional string forquotesysid = 2 [default = ""];
  if (has_forquotesysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotesysid().data(), this->forquotesysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ForQuoteInfo.forquotesysid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->forquotesysid(), target);
  }

  // optional string forquotetime = 3 [default = ""];
  if (has_forquotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forquotetime().data(), this->forquotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ForQuoteInfo.forquotetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->forquotetime(), target);
  }

  // optional int64 rcvts = 4 [default = 0];
  if (has_rcvts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rcvts(), target);
  }

  // optional int64 rspts = 5 [default = 0];
  if (has_rspts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->rspts(), target);
  }

  // optional int32 currqid = 6 [default = 0];
  if (has_currqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currqid(), target);
  }

  // optional int32 rspstatus = 7 [default = 0];
  if (has_rspstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rspstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.ForQuoteInfo)
  return target;
}

int ForQuoteInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.ForQuoteInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string instrumentid = 1 [default = ""];
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional string forquotesysid = 2 [default = ""];
    if (has_forquotesysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forquotesysid());
    }

    // optional string forquotetime = 3 [default = ""];
    if (has_forquotetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forquotetime());
    }

    // optional int64 rcvts = 4 [default = 0];
    if (has_rcvts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rcvts());
    }

    // optional int64 rspts = 5 [default = 0];
    if (has_rspts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rspts());
    }

    // optional int32 currqid = 6 [default = 0];
    if (has_currqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currqid());
    }

    // optional int32 rspstatus = 7 [default = 0];
    if (has_rspstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rspstatus());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForQuoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.ForQuoteInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ForQuoteInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ForQuoteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.ForQuoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.ForQuoteInfo)
    MergeFrom(*source);
  }
}

void ForQuoteInfo::MergeFrom(const ForQuoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.ForQuoteInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_forquotesysid()) {
      set_has_forquotesysid();
      forquotesysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forquotesysid_);
    }
    if (from.has_forquotetime()) {
      set_has_forquotetime();
      forquotetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forquotetime_);
    }
    if (from.has_rcvts()) {
      set_rcvts(from.rcvts());
    }
    if (from.has_rspts()) {
      set_rspts(from.rspts());
    }
    if (from.has_currqid()) {
      set_currqid(from.currqid());
    }
    if (from.has_rspstatus()) {
      set_rspstatus(from.rspstatus());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ForQuoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.ForQuoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForQuoteInfo::CopyFrom(const ForQuoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.ForQuoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForQuoteInfo::IsInitialized() const {

  return true;
}

void ForQuoteInfo::Swap(ForQuoteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForQuoteInfo::InternalSwap(ForQuoteInfo* other) {
  instrumentid_.Swap(&other->instrumentid_);
  forquotesysid_.Swap(&other->forquotesysid_);
  forquotetime_.Swap(&other->forquotetime_);
  std::swap(rcvts_, other->rcvts_);
  std::swap(rspts_, other->rspts_);
  std::swap(currqid_, other->currqid_);
  std::swap(rspstatus_, other->rspstatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForQuoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForQuoteInfo_descriptor_;
  metadata.reflection = ForQuoteInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForQuoteInfo

// optional string instrumentid = 1 [default = ""];
bool ForQuoteInfo::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ForQuoteInfo::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000001u;
}
void ForQuoteInfo::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ForQuoteInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& ForQuoteInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteInfo.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForQuoteInfo::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ForQuoteInfo.instrumentid)
}
 void ForQuoteInfo::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ForQuoteInfo.instrumentid)
}
 void ForQuoteInfo::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ForQuoteInfo.instrumentid)
}
 ::std::string* ForQuoteInfo::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.ForQuoteInfo.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForQuoteInfo::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.ForQuoteInfo.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForQuoteInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.ForQuoteInfo.instrumentid)
}

// optional string forquotesysid = 2 [default = ""];
bool ForQuoteInfo::has_forquotesysid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ForQuoteInfo::set_has_forquotesysid() {
  _has_bits_[0] |= 0x00000002u;
}
void ForQuoteInfo::clear_has_forquotesysid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ForQuoteInfo::clear_forquotesysid() {
  forquotesysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_forquotesysid();
}
 const ::std::string& ForQuoteInfo::forquotesysid() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteInfo.forquotesysid)
  return forquotesysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForQuoteInfo::set_forquotesysid(const ::std::string& value) {
  set_has_forquotesysid();
  forquotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ForQuoteInfo.forquotesysid)
}
 void ForQuoteInfo::set_forquotesysid(const char* value) {
  set_has_forquotesysid();
  forquotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ForQuoteInfo.forquotesysid)
}
 void ForQuoteInfo::set_forquotesysid(const char* value, size_t size) {
  set_has_forquotesysid();
  forquotesysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ForQuoteInfo.forquotesysid)
}
 ::std::string* ForQuoteInfo::mutable_forquotesysid() {
  set_has_forquotesysid();
  // @@protoc_insertion_point(field_mutable:XT.ForQuoteInfo.forquotesysid)
  return forquotesysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForQuoteInfo::release_forquotesysid() {
  // @@protoc_insertion_point(field_release:XT.ForQuoteInfo.forquotesysid)
  clear_has_forquotesysid();
  return forquotesysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForQuoteInfo::set_allocated_forquotesysid(::std::string* forquotesysid) {
  if (forquotesysid != NULL) {
    set_has_forquotesysid();
  } else {
    clear_has_forquotesysid();
  }
  forquotesysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forquotesysid);
  // @@protoc_insertion_point(field_set_allocated:XT.ForQuoteInfo.forquotesysid)
}

// optional string forquotetime = 3 [default = ""];
bool ForQuoteInfo::has_forquotetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ForQuoteInfo::set_has_forquotetime() {
  _has_bits_[0] |= 0x00000004u;
}
void ForQuoteInfo::clear_has_forquotetime() {
  _has_bits_[0] &= ~0x00000004u;
}
void ForQuoteInfo::clear_forquotetime() {
  forquotetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_forquotetime();
}
 const ::std::string& ForQuoteInfo::forquotetime() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteInfo.forquotetime)
  return forquotetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForQuoteInfo::set_forquotetime(const ::std::string& value) {
  set_has_forquotetime();
  forquotetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ForQuoteInfo.forquotetime)
}
 void ForQuoteInfo::set_forquotetime(const char* value) {
  set_has_forquotetime();
  forquotetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ForQuoteInfo.forquotetime)
}
 void ForQuoteInfo::set_forquotetime(const char* value, size_t size) {
  set_has_forquotetime();
  forquotetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ForQuoteInfo.forquotetime)
}
 ::std::string* ForQuoteInfo::mutable_forquotetime() {
  set_has_forquotetime();
  // @@protoc_insertion_point(field_mutable:XT.ForQuoteInfo.forquotetime)
  return forquotetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForQuoteInfo::release_forquotetime() {
  // @@protoc_insertion_point(field_release:XT.ForQuoteInfo.forquotetime)
  clear_has_forquotetime();
  return forquotetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForQuoteInfo::set_allocated_forquotetime(::std::string* forquotetime) {
  if (forquotetime != NULL) {
    set_has_forquotetime();
  } else {
    clear_has_forquotetime();
  }
  forquotetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forquotetime);
  // @@protoc_insertion_point(field_set_allocated:XT.ForQuoteInfo.forquotetime)
}

// optional int64 rcvts = 4 [default = 0];
bool ForQuoteInfo::has_rcvts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ForQuoteInfo::set_has_rcvts() {
  _has_bits_[0] |= 0x00000008u;
}
void ForQuoteInfo::clear_has_rcvts() {
  _has_bits_[0] &= ~0x00000008u;
}
void ForQuoteInfo::clear_rcvts() {
  rcvts_ = GOOGLE_LONGLONG(0);
  clear_has_rcvts();
}
 ::google::protobuf::int64 ForQuoteInfo::rcvts() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteInfo.rcvts)
  return rcvts_;
}
 void ForQuoteInfo::set_rcvts(::google::protobuf::int64 value) {
  set_has_rcvts();
  rcvts_ = value;
  // @@protoc_insertion_point(field_set:XT.ForQuoteInfo.rcvts)
}

// optional int64 rspts = 5 [default = 0];
bool ForQuoteInfo::has_rspts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ForQuoteInfo::set_has_rspts() {
  _has_bits_[0] |= 0x00000010u;
}
void ForQuoteInfo::clear_has_rspts() {
  _has_bits_[0] &= ~0x00000010u;
}
void ForQuoteInfo::clear_rspts() {
  rspts_ = GOOGLE_LONGLONG(0);
  clear_has_rspts();
}
 ::google::protobuf::int64 ForQuoteInfo::rspts() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteInfo.rspts)
  return rspts_;
}
 void ForQuoteInfo::set_rspts(::google::protobuf::int64 value) {
  set_has_rspts();
  rspts_ = value;
  // @@protoc_insertion_point(field_set:XT.ForQuoteInfo.rspts)
}

// optional int32 currqid = 6 [default = 0];
bool ForQuoteInfo::has_currqid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ForQuoteInfo::set_has_currqid() {
  _has_bits_[0] |= 0x00000020u;
}
void ForQuoteInfo::clear_has_currqid() {
  _has_bits_[0] &= ~0x00000020u;
}
void ForQuoteInfo::clear_currqid() {
  currqid_ = 0;
  clear_has_currqid();
}
 ::google::protobuf::int32 ForQuoteInfo::currqid() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteInfo.currqid)
  return currqid_;
}
 void ForQuoteInfo::set_currqid(::google::protobuf::int32 value) {
  set_has_currqid();
  currqid_ = value;
  // @@protoc_insertion_point(field_set:XT.ForQuoteInfo.currqid)
}

// optional int32 rspstatus = 7 [default = 0];
bool ForQuoteInfo::has_rspstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ForQuoteInfo::set_has_rspstatus() {
  _has_bits_[0] |= 0x00000040u;
}
void ForQuoteInfo::clear_has_rspstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
void ForQuoteInfo::clear_rspstatus() {
  rspstatus_ = 0;
  clear_has_rspstatus();
}
 ::google::protobuf::int32 ForQuoteInfo::rspstatus() const {
  // @@protoc_insertion_point(field_get:XT.ForQuoteInfo.rspstatus)
  return rspstatus_;
}
 void ForQuoteInfo::set_rspstatus(::google::protobuf::int32 value) {
  set_has_rspstatus();
  rspstatus_ = value;
  // @@protoc_insertion_point(field_set:XT.ForQuoteInfo.rspstatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VolumeAmount::kVolumeFieldNumber;
const int VolumeAmount::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VolumeAmount::VolumeAmount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.VolumeAmount)
}

void VolumeAmount::InitAsDefaultInstance() {
}

VolumeAmount::VolumeAmount(const VolumeAmount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.VolumeAmount)
}

void VolumeAmount::SharedCtor() {
  _cached_size_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeAmount::~VolumeAmount() {
  // @@protoc_insertion_point(destructor:XT.VolumeAmount)
  SharedDtor();
}

void VolumeAmount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolumeAmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeAmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeAmount_descriptor_;
}

const VolumeAmount& VolumeAmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

VolumeAmount* VolumeAmount::default_instance_ = NULL;

VolumeAmount* VolumeAmount::New(::google::protobuf::Arena* arena) const {
  VolumeAmount* n = new VolumeAmount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VolumeAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.VolumeAmount)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VolumeAmount, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VolumeAmount*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(volume_, amount_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VolumeAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.VolumeAmount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 volume = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_amount;
        break;
      }

      // optional double amount = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.VolumeAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.VolumeAmount)
  return false;
#undef DO_
}

void VolumeAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.VolumeAmount)
  // optional int64 volume = 1 [default = 0];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->volume(), output);
  }

  // optional double amount = 2 [default = 0];
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.VolumeAmount)
}

::google::protobuf::uint8* VolumeAmount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.VolumeAmount)
  // optional int64 volume = 1 [default = 0];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->volume(), target);
  }

  // optional double amount = 2 [default = 0];
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.VolumeAmount)
  return target;
}

int VolumeAmount::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.VolumeAmount)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 volume = 1 [default = 0];
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional double amount = 2 [default = 0];
    if (has_amount()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeAmount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.VolumeAmount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VolumeAmount* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VolumeAmount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.VolumeAmount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.VolumeAmount)
    MergeFrom(*source);
  }
}

void VolumeAmount::MergeFrom(const VolumeAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.VolumeAmount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VolumeAmount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.VolumeAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeAmount::CopyFrom(const VolumeAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.VolumeAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeAmount::IsInitialized() const {

  return true;
}

void VolumeAmount::Swap(VolumeAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VolumeAmount::InternalSwap(VolumeAmount* other) {
  std::swap(volume_, other->volume_);
  std::swap(amount_, other->amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VolumeAmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolumeAmount_descriptor_;
  metadata.reflection = VolumeAmount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VolumeAmount

// optional int64 volume = 1 [default = 0];
bool VolumeAmount::has_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VolumeAmount::set_has_volume() {
  _has_bits_[0] |= 0x00000001u;
}
void VolumeAmount::clear_has_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
void VolumeAmount::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 VolumeAmount::volume() const {
  // @@protoc_insertion_point(field_get:XT.VolumeAmount.volume)
  return volume_;
}
 void VolumeAmount::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.VolumeAmount.volume)
}

// optional double amount = 2 [default = 0];
bool VolumeAmount::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VolumeAmount::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
void VolumeAmount::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
void VolumeAmount::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 double VolumeAmount::amount() const {
  // @@protoc_insertion_point(field_get:XT.VolumeAmount.amount)
  return amount_;
}
 void VolumeAmount::set_amount(double value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:XT.VolumeAmount.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PxVolume::kPxFieldNumber;
const int PxVolume::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PxVolume::PxVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PxVolume)
}

void PxVolume::InitAsDefaultInstance() {
}

PxVolume::PxVolume(const PxVolume& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PxVolume)
}

void PxVolume::SharedCtor() {
  _cached_size_ = 0;
  px_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PxVolume::~PxVolume() {
  // @@protoc_insertion_point(destructor:XT.PxVolume)
  SharedDtor();
}

void PxVolume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PxVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PxVolume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PxVolume_descriptor_;
}

const PxVolume& PxVolume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PxVolume* PxVolume::default_instance_ = NULL;

PxVolume* PxVolume::New(::google::protobuf::Arena* arena) const {
  PxVolume* n = new PxVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PxVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PxVolume)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PxVolume, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PxVolume*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(px_, volume_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PxVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PxVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double px = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_volume;
        break;
      }

      // optional int64 volume = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PxVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PxVolume)
  return false;
#undef DO_
}

void PxVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PxVolume)
  // optional double px = 1 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->px(), output);
  }

  // optional int64 volume = 2 [default = 0];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PxVolume)
}

::google::protobuf::uint8* PxVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PxVolume)
  // optional double px = 1 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->px(), target);
  }

  // optional int64 volume = 2 [default = 0];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PxVolume)
  return target;
}

int PxVolume::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PxVolume)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double px = 1 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }

    // optional int64 volume = 2 [default = 0];
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PxVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PxVolume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PxVolume* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PxVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PxVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PxVolume)
    MergeFrom(*source);
  }
}

void PxVolume::MergeFrom(const PxVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PxVolume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PxVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PxVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PxVolume::CopyFrom(const PxVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PxVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PxVolume::IsInitialized() const {

  return true;
}

void PxVolume::Swap(PxVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PxVolume::InternalSwap(PxVolume* other) {
  std::swap(px_, other->px_);
  std::swap(volume_, other->volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PxVolume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PxVolume_descriptor_;
  metadata.reflection = PxVolume_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PxVolume

// optional double px = 1 [default = 0];
bool PxVolume::has_px() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PxVolume::set_has_px() {
  _has_bits_[0] |= 0x00000001u;
}
void PxVolume::clear_has_px() {
  _has_bits_[0] &= ~0x00000001u;
}
void PxVolume::clear_px() {
  px_ = 0;
  clear_has_px();
}
 double PxVolume::px() const {
  // @@protoc_insertion_point(field_get:XT.PxVolume.px)
  return px_;
}
 void PxVolume::set_px(double value) {
  set_has_px();
  px_ = value;
  // @@protoc_insertion_point(field_set:XT.PxVolume.px)
}

// optional int64 volume = 2 [default = 0];
bool PxVolume::has_volume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PxVolume::set_has_volume() {
  _has_bits_[0] |= 0x00000002u;
}
void PxVolume::clear_has_volume() {
  _has_bits_[0] &= ~0x00000002u;
}
void PxVolume::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 PxVolume::volume() const {
  // @@protoc_insertion_point(field_get:XT.PxVolume.volume)
  return volume_;
}
 void PxVolume::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.PxVolume.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntPxHalfExposure::kIntpxFieldNumber;
const int IntPxHalfExposure::kWorkingnumordersFieldNumber;
const int IntPxHalfExposure::kWorkingszFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntPxHalfExposure::IntPxHalfExposure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.IntPxHalfExposure)
}

void IntPxHalfExposure::InitAsDefaultInstance() {
}

IntPxHalfExposure::IntPxHalfExposure(const IntPxHalfExposure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.IntPxHalfExposure)
}

void IntPxHalfExposure::SharedCtor() {
  _cached_size_ = 0;
  intpx_ = GOOGLE_LONGLONG(0);
  workingnumorders_ = 0;
  workingsz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntPxHalfExposure::~IntPxHalfExposure() {
  // @@protoc_insertion_point(destructor:XT.IntPxHalfExposure)
  SharedDtor();
}

void IntPxHalfExposure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntPxHalfExposure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntPxHalfExposure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntPxHalfExposure_descriptor_;
}

const IntPxHalfExposure& IntPxHalfExposure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

IntPxHalfExposure* IntPxHalfExposure::default_instance_ = NULL;

IntPxHalfExposure* IntPxHalfExposure::New(::google::protobuf::Arena* arena) const {
  IntPxHalfExposure* n = new IntPxHalfExposure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntPxHalfExposure::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.IntPxHalfExposure)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IntPxHalfExposure, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IntPxHalfExposure*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(intpx_, workingsz_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IntPxHalfExposure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.IntPxHalfExposure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 intpx = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intpx_)));
          set_has_intpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workingnumorders;
        break;
      }

      // optional int32 workingnumorders = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_workingnumorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingnumorders_)));
          set_has_workingnumorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_workingsz;
        break;
      }

      // optional int32 workingsz = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_workingsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingsz_)));
          set_has_workingsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.IntPxHalfExposure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.IntPxHalfExposure)
  return false;
#undef DO_
}

void IntPxHalfExposure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.IntPxHalfExposure)
  // optional int64 intpx = 1 [default = 0];
  if (has_intpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->intpx(), output);
  }

  // optional int32 workingnumorders = 2 [default = 0];
  if (has_workingnumorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->workingnumorders(), output);
  }

  // optional int32 workingsz = 3 [default = 0];
  if (has_workingsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->workingsz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.IntPxHalfExposure)
}

::google::protobuf::uint8* IntPxHalfExposure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.IntPxHalfExposure)
  // optional int64 intpx = 1 [default = 0];
  if (has_intpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->intpx(), target);
  }

  // optional int32 workingnumorders = 2 [default = 0];
  if (has_workingnumorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->workingnumorders(), target);
  }

  // optional int32 workingsz = 3 [default = 0];
  if (has_workingsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->workingsz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.IntPxHalfExposure)
  return target;
}

int IntPxHalfExposure::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.IntPxHalfExposure)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 intpx = 1 [default = 0];
    if (has_intpx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intpx());
    }

    // optional int32 workingnumorders = 2 [default = 0];
    if (has_workingnumorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingnumorders());
    }

    // optional int32 workingsz = 3 [default = 0];
    if (has_workingsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingsz());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntPxHalfExposure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.IntPxHalfExposure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntPxHalfExposure* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntPxHalfExposure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.IntPxHalfExposure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.IntPxHalfExposure)
    MergeFrom(*source);
  }
}

void IntPxHalfExposure::MergeFrom(const IntPxHalfExposure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.IntPxHalfExposure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intpx()) {
      set_intpx(from.intpx());
    }
    if (from.has_workingnumorders()) {
      set_workingnumorders(from.workingnumorders());
    }
    if (from.has_workingsz()) {
      set_workingsz(from.workingsz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IntPxHalfExposure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.IntPxHalfExposure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntPxHalfExposure::CopyFrom(const IntPxHalfExposure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.IntPxHalfExposure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntPxHalfExposure::IsInitialized() const {

  return true;
}

void IntPxHalfExposure::Swap(IntPxHalfExposure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntPxHalfExposure::InternalSwap(IntPxHalfExposure* other) {
  std::swap(intpx_, other->intpx_);
  std::swap(workingnumorders_, other->workingnumorders_);
  std::swap(workingsz_, other->workingsz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntPxHalfExposure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntPxHalfExposure_descriptor_;
  metadata.reflection = IntPxHalfExposure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntPxHalfExposure

// optional int64 intpx = 1 [default = 0];
bool IntPxHalfExposure::has_intpx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntPxHalfExposure::set_has_intpx() {
  _has_bits_[0] |= 0x00000001u;
}
void IntPxHalfExposure::clear_has_intpx() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntPxHalfExposure::clear_intpx() {
  intpx_ = GOOGLE_LONGLONG(0);
  clear_has_intpx();
}
 ::google::protobuf::int64 IntPxHalfExposure::intpx() const {
  // @@protoc_insertion_point(field_get:XT.IntPxHalfExposure.intpx)
  return intpx_;
}
 void IntPxHalfExposure::set_intpx(::google::protobuf::int64 value) {
  set_has_intpx();
  intpx_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxHalfExposure.intpx)
}

// optional int32 workingnumorders = 2 [default = 0];
bool IntPxHalfExposure::has_workingnumorders() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntPxHalfExposure::set_has_workingnumorders() {
  _has_bits_[0] |= 0x00000002u;
}
void IntPxHalfExposure::clear_has_workingnumorders() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntPxHalfExposure::clear_workingnumorders() {
  workingnumorders_ = 0;
  clear_has_workingnumorders();
}
 ::google::protobuf::int32 IntPxHalfExposure::workingnumorders() const {
  // @@protoc_insertion_point(field_get:XT.IntPxHalfExposure.workingnumorders)
  return workingnumorders_;
}
 void IntPxHalfExposure::set_workingnumorders(::google::protobuf::int32 value) {
  set_has_workingnumorders();
  workingnumorders_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxHalfExposure.workingnumorders)
}

// optional int32 workingsz = 3 [default = 0];
bool IntPxHalfExposure::has_workingsz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IntPxHalfExposure::set_has_workingsz() {
  _has_bits_[0] |= 0x00000004u;
}
void IntPxHalfExposure::clear_has_workingsz() {
  _has_bits_[0] &= ~0x00000004u;
}
void IntPxHalfExposure::clear_workingsz() {
  workingsz_ = 0;
  clear_has_workingsz();
}
 ::google::protobuf::int32 IntPxHalfExposure::workingsz() const {
  // @@protoc_insertion_point(field_get:XT.IntPxHalfExposure.workingsz)
  return workingsz_;
}
 void IntPxHalfExposure::set_workingsz(::google::protobuf::int32 value) {
  set_has_workingsz();
  workingsz_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxHalfExposure.workingsz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntPxInfo::kIntpxFieldNumber;
const int IntPxInfo::kMktbstypeFieldNumber;
const int IntPxInfo::kMktszFieldNumber;
const int IntPxInfo::kMktnumordersFieldNumber;
const int IntPxInfo::kMktbuyvolumeFieldNumber;
const int IntPxInfo::kMktbuyamountFieldNumber;
const int IntPxInfo::kMktsellvolumeFieldNumber;
const int IntPxInfo::kMktsellamountFieldNumber;
const int IntPxInfo::kBuyvolumeFieldNumber;
const int IntPxInfo::kBuyamountFieldNumber;
const int IntPxInfo::kSellvolumeFieldNumber;
const int IntPxInfo::kSellamountFieldNumber;
const int IntPxInfo::kBuynumordersFieldNumber;
const int IntPxInfo::kBuyszFieldNumber;
const int IntPxInfo::kSellnumordersFieldNumber;
const int IntPxInfo::kSellszFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntPxInfo::IntPxInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.IntPxInfo)
}

void IntPxInfo::InitAsDefaultInstance() {
}

IntPxInfo::IntPxInfo(const IntPxInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.IntPxInfo)
}

void IntPxInfo::SharedCtor() {
  _cached_size_ = 0;
  intpx_ = GOOGLE_LONGLONG(0);
  mktbstype_ = 0;
  mktsz_ = 0;
  mktnumorders_ = 0;
  mktbuyvolume_ = GOOGLE_LONGLONG(0);
  mktbuyamount_ = 0;
  mktsellvolume_ = GOOGLE_LONGLONG(0);
  mktsellamount_ = 0;
  buyvolume_ = GOOGLE_LONGLONG(0);
  buyamount_ = 0;
  sellvolume_ = GOOGLE_LONGLONG(0);
  sellamount_ = 0;
  buynumorders_ = 0;
  buysz_ = 0;
  sellnumorders_ = 0;
  sellsz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntPxInfo::~IntPxInfo() {
  // @@protoc_insertion_point(destructor:XT.IntPxInfo)
  SharedDtor();
}

void IntPxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntPxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntPxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntPxInfo_descriptor_;
}

const IntPxInfo& IntPxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

IntPxInfo* IntPxInfo::default_instance_ = NULL;

IntPxInfo* IntPxInfo::New(::google::protobuf::Arena* arena) const {
  IntPxInfo* n = new IntPxInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntPxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.IntPxInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IntPxInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IntPxInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(intpx_, mktnumorders_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(buynumorders_, sellsz_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IntPxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.IntPxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 intpx = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intpx_)));
          set_has_intpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mktbstype;
        break;
      }

      // optional int32 mktbstype = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_mktbstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mktbstype_)));
          set_has_mktbstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mktsz;
        break;
      }

      // optional int32 mktsz = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mktsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mktsz_)));
          set_has_mktsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mktnumorders;
        break;
      }

      // optional int32 mktnumorders = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mktnumorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mktnumorders_)));
          set_has_mktnumorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mktbuyvolume;
        break;
      }

      // optional int64 mktbuyvolume = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_mktbuyvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mktbuyvolume_)));
          set_has_mktbuyvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_mktbuyamount;
        break;
      }

      // optional double mktbuyamount = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_mktbuyamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mktbuyamount_)));
          set_has_mktbuyamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mktsellvolume;
        break;
      }

      // optional int64 mktsellvolume = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_mktsellvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mktsellvolume_)));
          set_has_mktsellvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_mktsellamount;
        break;
      }

      // optional double mktsellamount = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_mktsellamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mktsellamount_)));
          set_has_mktsellamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_buyvolume;
        break;
      }

      // optional int64 buyvolume = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_buyvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyvolume_)));
          set_has_buyvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_buyamount;
        break;
      }

      // optional double buyamount = 22 [default = 0];
      case 22: {
        if (tag == 177) {
         parse_buyamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyamount_)));
          set_has_buyamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_sellvolume;
        break;
      }

      // optional int64 sellvolume = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_sellvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sellvolume_)));
          set_has_sellvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_sellamount;
        break;
      }

      // optional double sellamount = 24 [default = 0];
      case 24: {
        if (tag == 193) {
         parse_sellamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellamount_)));
          set_has_sellamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_buynumorders;
        break;
      }

      // optional int32 buynumorders = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_buynumorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynumorders_)));
          set_has_buynumorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_buysz;
        break;
      }

      // optional int32 buysz = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_buysz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buysz_)));
          set_has_buysz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_sellnumorders;
        break;
      }

      // optional int32 sellnumorders = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_sellnumorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellnumorders_)));
          set_has_sellnumorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_sellsz;
        break;
      }

      // optional int32 sellsz = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_sellsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellsz_)));
          set_has_sellsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.IntPxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.IntPxInfo)
  return false;
#undef DO_
}

void IntPxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.IntPxInfo)
  // optional int64 intpx = 1 [default = 0];
  if (has_intpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->intpx(), output);
  }

  // optional int32 mktbstype = 2 [default = 0];
  if (has_mktbstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mktbstype(), output);
  }

  // optional int32 mktsz = 3 [default = 0];
  if (has_mktsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mktsz(), output);
  }

  // optional int32 mktnumorders = 4 [default = 0];
  if (has_mktnumorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mktnumorders(), output);
  }

  // optional int64 mktbuyvolume = 5 [default = 0];
  if (has_mktbuyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mktbuyvolume(), output);
  }

  // optional double mktbuyamount = 6 [default = 0];
  if (has_mktbuyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mktbuyamount(), output);
  }

  // optional int64 mktsellvolume = 7 [default = 0];
  if (has_mktsellvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->mktsellvolume(), output);
  }

  // optional double mktsellamount = 8 [default = 0];
  if (has_mktsellamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->mktsellamount(), output);
  }

  // optional int64 buyvolume = 21 [default = 0];
  if (has_buyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->buyvolume(), output);
  }

  // optional double buyamount = 22 [default = 0];
  if (has_buyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->buyamount(), output);
  }

  // optional int64 sellvolume = 23 [default = 0];
  if (has_sellvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->sellvolume(), output);
  }

  // optional double sellamount = 24 [default = 0];
  if (has_sellamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->sellamount(), output);
  }

  // optional int32 buynumorders = 25 [default = 0];
  if (has_buynumorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->buynumorders(), output);
  }

  // optional int32 buysz = 26 [default = 0];
  if (has_buysz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->buysz(), output);
  }

  // optional int32 sellnumorders = 27 [default = 0];
  if (has_sellnumorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->sellnumorders(), output);
  }

  // optional int32 sellsz = 28 [default = 0];
  if (has_sellsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->sellsz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.IntPxInfo)
}

::google::protobuf::uint8* IntPxInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.IntPxInfo)
  // optional int64 intpx = 1 [default = 0];
  if (has_intpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->intpx(), target);
  }

  // optional int32 mktbstype = 2 [default = 0];
  if (has_mktbstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mktbstype(), target);
  }

  // optional int32 mktsz = 3 [default = 0];
  if (has_mktsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mktsz(), target);
  }

  // optional int32 mktnumorders = 4 [default = 0];
  if (has_mktnumorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mktnumorders(), target);
  }

  // optional int64 mktbuyvolume = 5 [default = 0];
  if (has_mktbuyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mktbuyvolume(), target);
  }

  // optional double mktbuyamount = 6 [default = 0];
  if (has_mktbuyamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mktbuyamount(), target);
  }

  // optional int64 mktsellvolume = 7 [default = 0];
  if (has_mktsellvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->mktsellvolume(), target);
  }

  // optional double mktsellamount = 8 [default = 0];
  if (has_mktsellamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->mktsellamount(), target);
  }

  // optional int64 buyvolume = 21 [default = 0];
  if (has_buyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->buyvolume(), target);
  }

  // optional double buyamount = 22 [default = 0];
  if (has_buyamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->buyamount(), target);
  }

  // optional int64 sellvolume = 23 [default = 0];
  if (has_sellvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->sellvolume(), target);
  }

  // optional double sellamount = 24 [default = 0];
  if (has_sellamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->sellamount(), target);
  }

  // optional int32 buynumorders = 25 [default = 0];
  if (has_buynumorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->buynumorders(), target);
  }

  // optional int32 buysz = 26 [default = 0];
  if (has_buysz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->buysz(), target);
  }

  // optional int32 sellnumorders = 27 [default = 0];
  if (has_sellnumorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->sellnumorders(), target);
  }

  // optional int32 sellsz = 28 [default = 0];
  if (has_sellsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->sellsz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.IntPxInfo)
  return target;
}

int IntPxInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.IntPxInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 intpx = 1 [default = 0];
    if (has_intpx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intpx());
    }

    // optional int32 mktbstype = 2 [default = 0];
    if (has_mktbstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mktbstype());
    }

    // optional int32 mktsz = 3 [default = 0];
    if (has_mktsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mktsz());
    }

    // optional int32 mktnumorders = 4 [default = 0];
    if (has_mktnumorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mktnumorders());
    }

    // optional int64 mktbuyvolume = 5 [default = 0];
    if (has_mktbuyvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mktbuyvolume());
    }

    // optional double mktbuyamount = 6 [default = 0];
    if (has_mktbuyamount()) {
      total_size += 1 + 8;
    }

    // optional int64 mktsellvolume = 7 [default = 0];
    if (has_mktsellvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mktsellvolume());
    }

    // optional double mktsellamount = 8 [default = 0];
    if (has_mktsellamount()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 buyvolume = 21 [default = 0];
    if (has_buyvolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buyvolume());
    }

    // optional double buyamount = 22 [default = 0];
    if (has_buyamount()) {
      total_size += 2 + 8;
    }

    // optional int64 sellvolume = 23 [default = 0];
    if (has_sellvolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sellvolume());
    }

    // optional double sellamount = 24 [default = 0];
    if (has_sellamount()) {
      total_size += 2 + 8;
    }

    // optional int32 buynumorders = 25 [default = 0];
    if (has_buynumorders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynumorders());
    }

    // optional int32 buysz = 26 [default = 0];
    if (has_buysz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buysz());
    }

    // optional int32 sellnumorders = 27 [default = 0];
    if (has_sellnumorders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellnumorders());
    }

    // optional int32 sellsz = 28 [default = 0];
    if (has_sellsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellsz());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntPxInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.IntPxInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntPxInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntPxInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.IntPxInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.IntPxInfo)
    MergeFrom(*source);
  }
}

void IntPxInfo::MergeFrom(const IntPxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.IntPxInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intpx()) {
      set_intpx(from.intpx());
    }
    if (from.has_mktbstype()) {
      set_mktbstype(from.mktbstype());
    }
    if (from.has_mktsz()) {
      set_mktsz(from.mktsz());
    }
    if (from.has_mktnumorders()) {
      set_mktnumorders(from.mktnumorders());
    }
    if (from.has_mktbuyvolume()) {
      set_mktbuyvolume(from.mktbuyvolume());
    }
    if (from.has_mktbuyamount()) {
      set_mktbuyamount(from.mktbuyamount());
    }
    if (from.has_mktsellvolume()) {
      set_mktsellvolume(from.mktsellvolume());
    }
    if (from.has_mktsellamount()) {
      set_mktsellamount(from.mktsellamount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyvolume()) {
      set_buyvolume(from.buyvolume());
    }
    if (from.has_buyamount()) {
      set_buyamount(from.buyamount());
    }
    if (from.has_sellvolume()) {
      set_sellvolume(from.sellvolume());
    }
    if (from.has_sellamount()) {
      set_sellamount(from.sellamount());
    }
    if (from.has_buynumorders()) {
      set_buynumorders(from.buynumorders());
    }
    if (from.has_buysz()) {
      set_buysz(from.buysz());
    }
    if (from.has_sellnumorders()) {
      set_sellnumorders(from.sellnumorders());
    }
    if (from.has_sellsz()) {
      set_sellsz(from.sellsz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IntPxInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.IntPxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntPxInfo::CopyFrom(const IntPxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.IntPxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntPxInfo::IsInitialized() const {

  return true;
}

void IntPxInfo::Swap(IntPxInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntPxInfo::InternalSwap(IntPxInfo* other) {
  std::swap(intpx_, other->intpx_);
  std::swap(mktbstype_, other->mktbstype_);
  std::swap(mktsz_, other->mktsz_);
  std::swap(mktnumorders_, other->mktnumorders_);
  std::swap(mktbuyvolume_, other->mktbuyvolume_);
  std::swap(mktbuyamount_, other->mktbuyamount_);
  std::swap(mktsellvolume_, other->mktsellvolume_);
  std::swap(mktsellamount_, other->mktsellamount_);
  std::swap(buyvolume_, other->buyvolume_);
  std::swap(buyamount_, other->buyamount_);
  std::swap(sellvolume_, other->sellvolume_);
  std::swap(sellamount_, other->sellamount_);
  std::swap(buynumorders_, other->buynumorders_);
  std::swap(buysz_, other->buysz_);
  std::swap(sellnumorders_, other->sellnumorders_);
  std::swap(sellsz_, other->sellsz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntPxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntPxInfo_descriptor_;
  metadata.reflection = IntPxInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntPxInfo

// optional int64 intpx = 1 [default = 0];
bool IntPxInfo::has_intpx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntPxInfo::set_has_intpx() {
  _has_bits_[0] |= 0x00000001u;
}
void IntPxInfo::clear_has_intpx() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntPxInfo::clear_intpx() {
  intpx_ = GOOGLE_LONGLONG(0);
  clear_has_intpx();
}
 ::google::protobuf::int64 IntPxInfo::intpx() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.intpx)
  return intpx_;
}
 void IntPxInfo::set_intpx(::google::protobuf::int64 value) {
  set_has_intpx();
  intpx_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.intpx)
}

// optional int32 mktbstype = 2 [default = 0];
bool IntPxInfo::has_mktbstype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntPxInfo::set_has_mktbstype() {
  _has_bits_[0] |= 0x00000002u;
}
void IntPxInfo::clear_has_mktbstype() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntPxInfo::clear_mktbstype() {
  mktbstype_ = 0;
  clear_has_mktbstype();
}
 ::google::protobuf::int32 IntPxInfo::mktbstype() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.mktbstype)
  return mktbstype_;
}
 void IntPxInfo::set_mktbstype(::google::protobuf::int32 value) {
  set_has_mktbstype();
  mktbstype_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.mktbstype)
}

// optional int32 mktsz = 3 [default = 0];
bool IntPxInfo::has_mktsz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IntPxInfo::set_has_mktsz() {
  _has_bits_[0] |= 0x00000004u;
}
void IntPxInfo::clear_has_mktsz() {
  _has_bits_[0] &= ~0x00000004u;
}
void IntPxInfo::clear_mktsz() {
  mktsz_ = 0;
  clear_has_mktsz();
}
 ::google::protobuf::int32 IntPxInfo::mktsz() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.mktsz)
  return mktsz_;
}
 void IntPxInfo::set_mktsz(::google::protobuf::int32 value) {
  set_has_mktsz();
  mktsz_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.mktsz)
}

// optional int32 mktnumorders = 4 [default = 0];
bool IntPxInfo::has_mktnumorders() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IntPxInfo::set_has_mktnumorders() {
  _has_bits_[0] |= 0x00000008u;
}
void IntPxInfo::clear_has_mktnumorders() {
  _has_bits_[0] &= ~0x00000008u;
}
void IntPxInfo::clear_mktnumorders() {
  mktnumorders_ = 0;
  clear_has_mktnumorders();
}
 ::google::protobuf::int32 IntPxInfo::mktnumorders() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.mktnumorders)
  return mktnumorders_;
}
 void IntPxInfo::set_mktnumorders(::google::protobuf::int32 value) {
  set_has_mktnumorders();
  mktnumorders_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.mktnumorders)
}

// optional int64 mktbuyvolume = 5 [default = 0];
bool IntPxInfo::has_mktbuyvolume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IntPxInfo::set_has_mktbuyvolume() {
  _has_bits_[0] |= 0x00000010u;
}
void IntPxInfo::clear_has_mktbuyvolume() {
  _has_bits_[0] &= ~0x00000010u;
}
void IntPxInfo::clear_mktbuyvolume() {
  mktbuyvolume_ = GOOGLE_LONGLONG(0);
  clear_has_mktbuyvolume();
}
 ::google::protobuf::int64 IntPxInfo::mktbuyvolume() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.mktbuyvolume)
  return mktbuyvolume_;
}
 void IntPxInfo::set_mktbuyvolume(::google::protobuf::int64 value) {
  set_has_mktbuyvolume();
  mktbuyvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.mktbuyvolume)
}

// optional double mktbuyamount = 6 [default = 0];
bool IntPxInfo::has_mktbuyamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IntPxInfo::set_has_mktbuyamount() {
  _has_bits_[0] |= 0x00000020u;
}
void IntPxInfo::clear_has_mktbuyamount() {
  _has_bits_[0] &= ~0x00000020u;
}
void IntPxInfo::clear_mktbuyamount() {
  mktbuyamount_ = 0;
  clear_has_mktbuyamount();
}
 double IntPxInfo::mktbuyamount() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.mktbuyamount)
  return mktbuyamount_;
}
 void IntPxInfo::set_mktbuyamount(double value) {
  set_has_mktbuyamount();
  mktbuyamount_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.mktbuyamount)
}

// optional int64 mktsellvolume = 7 [default = 0];
bool IntPxInfo::has_mktsellvolume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IntPxInfo::set_has_mktsellvolume() {
  _has_bits_[0] |= 0x00000040u;
}
void IntPxInfo::clear_has_mktsellvolume() {
  _has_bits_[0] &= ~0x00000040u;
}
void IntPxInfo::clear_mktsellvolume() {
  mktsellvolume_ = GOOGLE_LONGLONG(0);
  clear_has_mktsellvolume();
}
 ::google::protobuf::int64 IntPxInfo::mktsellvolume() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.mktsellvolume)
  return mktsellvolume_;
}
 void IntPxInfo::set_mktsellvolume(::google::protobuf::int64 value) {
  set_has_mktsellvolume();
  mktsellvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.mktsellvolume)
}

// optional double mktsellamount = 8 [default = 0];
bool IntPxInfo::has_mktsellamount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IntPxInfo::set_has_mktsellamount() {
  _has_bits_[0] |= 0x00000080u;
}
void IntPxInfo::clear_has_mktsellamount() {
  _has_bits_[0] &= ~0x00000080u;
}
void IntPxInfo::clear_mktsellamount() {
  mktsellamount_ = 0;
  clear_has_mktsellamount();
}
 double IntPxInfo::mktsellamount() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.mktsellamount)
  return mktsellamount_;
}
 void IntPxInfo::set_mktsellamount(double value) {
  set_has_mktsellamount();
  mktsellamount_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.mktsellamount)
}

// optional int64 buyvolume = 21 [default = 0];
bool IntPxInfo::has_buyvolume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IntPxInfo::set_has_buyvolume() {
  _has_bits_[0] |= 0x00000100u;
}
void IntPxInfo::clear_has_buyvolume() {
  _has_bits_[0] &= ~0x00000100u;
}
void IntPxInfo::clear_buyvolume() {
  buyvolume_ = GOOGLE_LONGLONG(0);
  clear_has_buyvolume();
}
 ::google::protobuf::int64 IntPxInfo::buyvolume() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.buyvolume)
  return buyvolume_;
}
 void IntPxInfo::set_buyvolume(::google::protobuf::int64 value) {
  set_has_buyvolume();
  buyvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.buyvolume)
}

// optional double buyamount = 22 [default = 0];
bool IntPxInfo::has_buyamount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void IntPxInfo::set_has_buyamount() {
  _has_bits_[0] |= 0x00000200u;
}
void IntPxInfo::clear_has_buyamount() {
  _has_bits_[0] &= ~0x00000200u;
}
void IntPxInfo::clear_buyamount() {
  buyamount_ = 0;
  clear_has_buyamount();
}
 double IntPxInfo::buyamount() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.buyamount)
  return buyamount_;
}
 void IntPxInfo::set_buyamount(double value) {
  set_has_buyamount();
  buyamount_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.buyamount)
}

// optional int64 sellvolume = 23 [default = 0];
bool IntPxInfo::has_sellvolume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void IntPxInfo::set_has_sellvolume() {
  _has_bits_[0] |= 0x00000400u;
}
void IntPxInfo::clear_has_sellvolume() {
  _has_bits_[0] &= ~0x00000400u;
}
void IntPxInfo::clear_sellvolume() {
  sellvolume_ = GOOGLE_LONGLONG(0);
  clear_has_sellvolume();
}
 ::google::protobuf::int64 IntPxInfo::sellvolume() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.sellvolume)
  return sellvolume_;
}
 void IntPxInfo::set_sellvolume(::google::protobuf::int64 value) {
  set_has_sellvolume();
  sellvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.sellvolume)
}

// optional double sellamount = 24 [default = 0];
bool IntPxInfo::has_sellamount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void IntPxInfo::set_has_sellamount() {
  _has_bits_[0] |= 0x00000800u;
}
void IntPxInfo::clear_has_sellamount() {
  _has_bits_[0] &= ~0x00000800u;
}
void IntPxInfo::clear_sellamount() {
  sellamount_ = 0;
  clear_has_sellamount();
}
 double IntPxInfo::sellamount() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.sellamount)
  return sellamount_;
}
 void IntPxInfo::set_sellamount(double value) {
  set_has_sellamount();
  sellamount_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.sellamount)
}

// optional int32 buynumorders = 25 [default = 0];
bool IntPxInfo::has_buynumorders() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void IntPxInfo::set_has_buynumorders() {
  _has_bits_[0] |= 0x00001000u;
}
void IntPxInfo::clear_has_buynumorders() {
  _has_bits_[0] &= ~0x00001000u;
}
void IntPxInfo::clear_buynumorders() {
  buynumorders_ = 0;
  clear_has_buynumorders();
}
 ::google::protobuf::int32 IntPxInfo::buynumorders() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.buynumorders)
  return buynumorders_;
}
 void IntPxInfo::set_buynumorders(::google::protobuf::int32 value) {
  set_has_buynumorders();
  buynumorders_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.buynumorders)
}

// optional int32 buysz = 26 [default = 0];
bool IntPxInfo::has_buysz() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void IntPxInfo::set_has_buysz() {
  _has_bits_[0] |= 0x00002000u;
}
void IntPxInfo::clear_has_buysz() {
  _has_bits_[0] &= ~0x00002000u;
}
void IntPxInfo::clear_buysz() {
  buysz_ = 0;
  clear_has_buysz();
}
 ::google::protobuf::int32 IntPxInfo::buysz() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.buysz)
  return buysz_;
}
 void IntPxInfo::set_buysz(::google::protobuf::int32 value) {
  set_has_buysz();
  buysz_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.buysz)
}

// optional int32 sellnumorders = 27 [default = 0];
bool IntPxInfo::has_sellnumorders() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void IntPxInfo::set_has_sellnumorders() {
  _has_bits_[0] |= 0x00004000u;
}
void IntPxInfo::clear_has_sellnumorders() {
  _has_bits_[0] &= ~0x00004000u;
}
void IntPxInfo::clear_sellnumorders() {
  sellnumorders_ = 0;
  clear_has_sellnumorders();
}
 ::google::protobuf::int32 IntPxInfo::sellnumorders() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.sellnumorders)
  return sellnumorders_;
}
 void IntPxInfo::set_sellnumorders(::google::protobuf::int32 value) {
  set_has_sellnumorders();
  sellnumorders_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.sellnumorders)
}

// optional int32 sellsz = 28 [default = 0];
bool IntPxInfo::has_sellsz() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void IntPxInfo::set_has_sellsz() {
  _has_bits_[0] |= 0x00008000u;
}
void IntPxInfo::clear_has_sellsz() {
  _has_bits_[0] &= ~0x00008000u;
}
void IntPxInfo::clear_sellsz() {
  sellsz_ = 0;
  clear_has_sellsz();
}
 ::google::protobuf::int32 IntPxInfo::sellsz() const {
  // @@protoc_insertion_point(field_get:XT.IntPxInfo.sellsz)
  return sellsz_;
}
 void IntPxInfo::set_sellsz(::google::protobuf::int32 value) {
  set_has_sellsz();
  sellsz_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxInfo.sellsz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntPxOrderInfo::kIntpxFieldNumber;
const int IntPxOrderInfo::kWorkingnumordersFieldNumber;
const int IntPxOrderInfo::kWorkingszFieldNumber;
const int IntPxOrderInfo::kOrderid2OpenszmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntPxOrderInfo::IntPxOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.IntPxOrderInfo)
}

void IntPxOrderInfo::InitAsDefaultInstance() {
}

IntPxOrderInfo::IntPxOrderInfo(const IntPxOrderInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.IntPxOrderInfo)
}

void IntPxOrderInfo::SharedCtor() {
  _cached_size_ = 0;
  intpx_ = GOOGLE_LONGLONG(0);
  workingnumorders_ = 0;
  workingsz_ = 0;
  orderid2openszmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  orderid2openszmap_.SetEntryDescriptor(
      &::XT::IntPxOrderInfo_Orderid2openszmapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntPxOrderInfo::~IntPxOrderInfo() {
  // @@protoc_insertion_point(destructor:XT.IntPxOrderInfo)
  SharedDtor();
}

void IntPxOrderInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntPxOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntPxOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntPxOrderInfo_descriptor_;
}

const IntPxOrderInfo& IntPxOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

IntPxOrderInfo* IntPxOrderInfo::default_instance_ = NULL;

IntPxOrderInfo* IntPxOrderInfo::New(::google::protobuf::Arena* arena) const {
  IntPxOrderInfo* n = new IntPxOrderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntPxOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.IntPxOrderInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IntPxOrderInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IntPxOrderInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(intpx_, workingsz_);

#undef ZR_HELPER_
#undef ZR_

  orderid2openszmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IntPxOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.IntPxOrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 intpx = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intpx_)));
          set_has_intpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workingnumorders;
        break;
      }

      // optional int32 workingnumorders = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_workingnumorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingnumorders_)));
          set_has_workingnumorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_workingsz;
        break;
      }

      // optional int32 workingsz = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_workingsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingsz_)));
          set_has_workingsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orderid2openszmap;
        break;
      }

      // map<int32, int32> orderid2openszmap = 4;
      case 4: {
        if (tag == 34) {
         parse_orderid2openszmap:
          DO_(input->IncrementRecursionDepth());
         parse_loop_orderid2openszmap:
          IntPxOrderInfo_Orderid2openszmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&orderid2openszmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_orderid2openszmap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.IntPxOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.IntPxOrderInfo)
  return false;
#undef DO_
}

void IntPxOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.IntPxOrderInfo)
  // optional int64 intpx = 1 [default = 0];
  if (has_intpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->intpx(), output);
  }

  // optional int32 workingnumorders = 2 [default = 0];
  if (has_workingnumorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->workingnumorders(), output);
  }

  // optional int32 workingsz = 3 [default = 0];
  if (has_workingsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->workingsz(), output);
  }

  // map<int32, int32> orderid2openszmap = 4;
  if (!this->orderid2openszmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->orderid2openszmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->orderid2openszmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->orderid2openszmap().begin();
          it != this->orderid2openszmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IntPxOrderInfo_Orderid2openszmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(orderid2openszmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<IntPxOrderInfo_Orderid2openszmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->orderid2openszmap().begin();
          it != this->orderid2openszmap().end(); ++it) {
        entry.reset(orderid2openszmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.IntPxOrderInfo)
}

::google::protobuf::uint8* IntPxOrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.IntPxOrderInfo)
  // optional int64 intpx = 1 [default = 0];
  if (has_intpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->intpx(), target);
  }

  // optional int32 workingnumorders = 2 [default = 0];
  if (has_workingnumorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->workingnumorders(), target);
  }

  // optional int32 workingsz = 3 [default = 0];
  if (has_workingsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->workingsz(), target);
  }

  // map<int32, int32> orderid2openszmap = 4;
  if (!this->orderid2openszmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->orderid2openszmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->orderid2openszmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->orderid2openszmap().begin();
          it != this->orderid2openszmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IntPxOrderInfo_Orderid2openszmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(orderid2openszmap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<IntPxOrderInfo_Orderid2openszmapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->orderid2openszmap().begin();
          it != this->orderid2openszmap().end(); ++it) {
        entry.reset(orderid2openszmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.IntPxOrderInfo)
  return target;
}

int IntPxOrderInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.IntPxOrderInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 intpx = 1 [default = 0];
    if (has_intpx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intpx());
    }

    // optional int32 workingnumorders = 2 [default = 0];
    if (has_workingnumorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingnumorders());
    }

    // optional int32 workingsz = 3 [default = 0];
    if (has_workingsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingsz());
    }

  }
  // map<int32, int32> orderid2openszmap = 4;
  total_size += 1 * this->orderid2openszmap_size();
  {
    ::google::protobuf::scoped_ptr<IntPxOrderInfo_Orderid2openszmapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->orderid2openszmap().begin();
        it != this->orderid2openszmap().end(); ++it) {
      entry.reset(orderid2openszmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntPxOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.IntPxOrderInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntPxOrderInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntPxOrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.IntPxOrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.IntPxOrderInfo)
    MergeFrom(*source);
  }
}

void IntPxOrderInfo::MergeFrom(const IntPxOrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.IntPxOrderInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  orderid2openszmap_.MergeFrom(from.orderid2openszmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intpx()) {
      set_intpx(from.intpx());
    }
    if (from.has_workingnumorders()) {
      set_workingnumorders(from.workingnumorders());
    }
    if (from.has_workingsz()) {
      set_workingsz(from.workingsz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IntPxOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.IntPxOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntPxOrderInfo::CopyFrom(const IntPxOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.IntPxOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntPxOrderInfo::IsInitialized() const {

  return true;
}

void IntPxOrderInfo::Swap(IntPxOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntPxOrderInfo::InternalSwap(IntPxOrderInfo* other) {
  std::swap(intpx_, other->intpx_);
  std::swap(workingnumorders_, other->workingnumorders_);
  std::swap(workingsz_, other->workingsz_);
  orderid2openszmap_.Swap(&other->orderid2openszmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntPxOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntPxOrderInfo_descriptor_;
  metadata.reflection = IntPxOrderInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntPxOrderInfo

// optional int64 intpx = 1 [default = 0];
bool IntPxOrderInfo::has_intpx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntPxOrderInfo::set_has_intpx() {
  _has_bits_[0] |= 0x00000001u;
}
void IntPxOrderInfo::clear_has_intpx() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntPxOrderInfo::clear_intpx() {
  intpx_ = GOOGLE_LONGLONG(0);
  clear_has_intpx();
}
 ::google::protobuf::int64 IntPxOrderInfo::intpx() const {
  // @@protoc_insertion_point(field_get:XT.IntPxOrderInfo.intpx)
  return intpx_;
}
 void IntPxOrderInfo::set_intpx(::google::protobuf::int64 value) {
  set_has_intpx();
  intpx_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxOrderInfo.intpx)
}

// optional int32 workingnumorders = 2 [default = 0];
bool IntPxOrderInfo::has_workingnumorders() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntPxOrderInfo::set_has_workingnumorders() {
  _has_bits_[0] |= 0x00000002u;
}
void IntPxOrderInfo::clear_has_workingnumorders() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntPxOrderInfo::clear_workingnumorders() {
  workingnumorders_ = 0;
  clear_has_workingnumorders();
}
 ::google::protobuf::int32 IntPxOrderInfo::workingnumorders() const {
  // @@protoc_insertion_point(field_get:XT.IntPxOrderInfo.workingnumorders)
  return workingnumorders_;
}
 void IntPxOrderInfo::set_workingnumorders(::google::protobuf::int32 value) {
  set_has_workingnumorders();
  workingnumorders_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxOrderInfo.workingnumorders)
}

// optional int32 workingsz = 3 [default = 0];
bool IntPxOrderInfo::has_workingsz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IntPxOrderInfo::set_has_workingsz() {
  _has_bits_[0] |= 0x00000004u;
}
void IntPxOrderInfo::clear_has_workingsz() {
  _has_bits_[0] &= ~0x00000004u;
}
void IntPxOrderInfo::clear_workingsz() {
  workingsz_ = 0;
  clear_has_workingsz();
}
 ::google::protobuf::int32 IntPxOrderInfo::workingsz() const {
  // @@protoc_insertion_point(field_get:XT.IntPxOrderInfo.workingsz)
  return workingsz_;
}
 void IntPxOrderInfo::set_workingsz(::google::protobuf::int32 value) {
  set_has_workingsz();
  workingsz_ = value;
  // @@protoc_insertion_point(field_set:XT.IntPxOrderInfo.workingsz)
}

// map<int32, int32> orderid2openszmap = 4;
int IntPxOrderInfo::orderid2openszmap_size() const {
  return orderid2openszmap_.size();
}
void IntPxOrderInfo::clear_orderid2openszmap() {
  orderid2openszmap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
IntPxOrderInfo::orderid2openszmap() const {
  // @@protoc_insertion_point(field_map:XT.IntPxOrderInfo.orderid2openszmap)
  return orderid2openszmap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
IntPxOrderInfo::mutable_orderid2openszmap() {
  // @@protoc_insertion_point(field_mutable_map:XT.IntPxOrderInfo.orderid2openszmap)
  return orderid2openszmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HalfExposure::kWorkingnumordersFieldNumber;
const int HalfExposure::kWorkingszFieldNumber;
const int HalfExposure::kVolumeFieldNumber;
const int HalfExposure::kAmountFieldNumber;
const int HalfExposure::kVolumesessionFieldNumber;
const int HalfExposure::kAmountsessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HalfExposure::HalfExposure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.HalfExposure)
}

void HalfExposure::InitAsDefaultInstance() {
}

HalfExposure::HalfExposure(const HalfExposure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.HalfExposure)
}

void HalfExposure::SharedCtor() {
  _cached_size_ = 0;
  workingnumorders_ = 0;
  workingsz_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  amount_ = 0;
  volumesession_ = GOOGLE_LONGLONG(0);
  amountsession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HalfExposure::~HalfExposure() {
  // @@protoc_insertion_point(destructor:XT.HalfExposure)
  SharedDtor();
}

void HalfExposure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HalfExposure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HalfExposure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalfExposure_descriptor_;
}

const HalfExposure& HalfExposure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

HalfExposure* HalfExposure::default_instance_ = NULL;

HalfExposure* HalfExposure::New(::google::protobuf::Arena* arena) const {
  HalfExposure* n = new HalfExposure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HalfExposure::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.HalfExposure)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HalfExposure, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HalfExposure*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(workingnumorders_, amountsession_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HalfExposure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.HalfExposure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 workingnumorders = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingnumorders_)));
          set_has_workingnumorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workingsz;
        break;
      }

      // optional int32 workingsz = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_workingsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingsz_)));
          set_has_workingsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_volume;
        break;
      }

      // optional int64 volume = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_amount;
        break;
      }

      // optional double amount = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_volumesession;
        break;
      }

      // optional int64 volumesession = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_volumesession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volumesession_)));
          set_has_volumesession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_amountsession;
        break;
      }

      // optional double amountsession = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_amountsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amountsession_)));
          set_has_amountsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.HalfExposure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.HalfExposure)
  return false;
#undef DO_
}

void HalfExposure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.HalfExposure)
  // optional int32 workingnumorders = 1 [default = 0];
  if (has_workingnumorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->workingnumorders(), output);
  }

  // optional int32 workingsz = 2 [default = 0];
  if (has_workingsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->workingsz(), output);
  }

  // optional int64 volume = 3 [default = 0];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->volume(), output);
  }

  // optional double amount = 4 [default = 0];
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amount(), output);
  }

  // optional int64 volumesession = 5 [default = 0];
  if (has_volumesession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->volumesession(), output);
  }

  // optional double amountsession = 6 [default = 0];
  if (has_amountsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->amountsession(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.HalfExposure)
}

::google::protobuf::uint8* HalfExposure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.HalfExposure)
  // optional int32 workingnumorders = 1 [default = 0];
  if (has_workingnumorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->workingnumorders(), target);
  }

  // optional int32 workingsz = 2 [default = 0];
  if (has_workingsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->workingsz(), target);
  }

  // optional int64 volume = 3 [default = 0];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->volume(), target);
  }

  // optional double amount = 4 [default = 0];
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amount(), target);
  }

  // optional int64 volumesession = 5 [default = 0];
  if (has_volumesession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->volumesession(), target);
  }

  // optional double amountsession = 6 [default = 0];
  if (has_amountsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->amountsession(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.HalfExposure)
  return target;
}

int HalfExposure::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.HalfExposure)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 workingnumorders = 1 [default = 0];
    if (has_workingnumorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingnumorders());
    }

    // optional int32 workingsz = 2 [default = 0];
    if (has_workingsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingsz());
    }

    // optional int64 volume = 3 [default = 0];
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional double amount = 4 [default = 0];
    if (has_amount()) {
      total_size += 1 + 8;
    }

    // optional int64 volumesession = 5 [default = 0];
    if (has_volumesession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volumesession());
    }

    // optional double amountsession = 6 [default = 0];
    if (has_amountsession()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HalfExposure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.HalfExposure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HalfExposure* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HalfExposure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.HalfExposure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.HalfExposure)
    MergeFrom(*source);
  }
}

void HalfExposure::MergeFrom(const HalfExposure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.HalfExposure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workingnumorders()) {
      set_workingnumorders(from.workingnumorders());
    }
    if (from.has_workingsz()) {
      set_workingsz(from.workingsz());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_volumesession()) {
      set_volumesession(from.volumesession());
    }
    if (from.has_amountsession()) {
      set_amountsession(from.amountsession());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HalfExposure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.HalfExposure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HalfExposure::CopyFrom(const HalfExposure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.HalfExposure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HalfExposure::IsInitialized() const {

  return true;
}

void HalfExposure::Swap(HalfExposure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HalfExposure::InternalSwap(HalfExposure* other) {
  std::swap(workingnumorders_, other->workingnumorders_);
  std::swap(workingsz_, other->workingsz_);
  std::swap(volume_, other->volume_);
  std::swap(amount_, other->amount_);
  std::swap(volumesession_, other->volumesession_);
  std::swap(amountsession_, other->amountsession_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HalfExposure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HalfExposure_descriptor_;
  metadata.reflection = HalfExposure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HalfExposure

// optional int32 workingnumorders = 1 [default = 0];
bool HalfExposure::has_workingnumorders() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HalfExposure::set_has_workingnumorders() {
  _has_bits_[0] |= 0x00000001u;
}
void HalfExposure::clear_has_workingnumorders() {
  _has_bits_[0] &= ~0x00000001u;
}
void HalfExposure::clear_workingnumorders() {
  workingnumorders_ = 0;
  clear_has_workingnumorders();
}
 ::google::protobuf::int32 HalfExposure::workingnumorders() const {
  // @@protoc_insertion_point(field_get:XT.HalfExposure.workingnumorders)
  return workingnumorders_;
}
 void HalfExposure::set_workingnumorders(::google::protobuf::int32 value) {
  set_has_workingnumorders();
  workingnumorders_ = value;
  // @@protoc_insertion_point(field_set:XT.HalfExposure.workingnumorders)
}

// optional int32 workingsz = 2 [default = 0];
bool HalfExposure::has_workingsz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HalfExposure::set_has_workingsz() {
  _has_bits_[0] |= 0x00000002u;
}
void HalfExposure::clear_has_workingsz() {
  _has_bits_[0] &= ~0x00000002u;
}
void HalfExposure::clear_workingsz() {
  workingsz_ = 0;
  clear_has_workingsz();
}
 ::google::protobuf::int32 HalfExposure::workingsz() const {
  // @@protoc_insertion_point(field_get:XT.HalfExposure.workingsz)
  return workingsz_;
}
 void HalfExposure::set_workingsz(::google::protobuf::int32 value) {
  set_has_workingsz();
  workingsz_ = value;
  // @@protoc_insertion_point(field_set:XT.HalfExposure.workingsz)
}

// optional int64 volume = 3 [default = 0];
bool HalfExposure::has_volume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HalfExposure::set_has_volume() {
  _has_bits_[0] |= 0x00000004u;
}
void HalfExposure::clear_has_volume() {
  _has_bits_[0] &= ~0x00000004u;
}
void HalfExposure::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 HalfExposure::volume() const {
  // @@protoc_insertion_point(field_get:XT.HalfExposure.volume)
  return volume_;
}
 void HalfExposure::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.HalfExposure.volume)
}

// optional double amount = 4 [default = 0];
bool HalfExposure::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HalfExposure::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
void HalfExposure::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
void HalfExposure::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 double HalfExposure::amount() const {
  // @@protoc_insertion_point(field_get:XT.HalfExposure.amount)
  return amount_;
}
 void HalfExposure::set_amount(double value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:XT.HalfExposure.amount)
}

// optional int64 volumesession = 5 [default = 0];
bool HalfExposure::has_volumesession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HalfExposure::set_has_volumesession() {
  _has_bits_[0] |= 0x00000010u;
}
void HalfExposure::clear_has_volumesession() {
  _has_bits_[0] &= ~0x00000010u;
}
void HalfExposure::clear_volumesession() {
  volumesession_ = GOOGLE_LONGLONG(0);
  clear_has_volumesession();
}
 ::google::protobuf::int64 HalfExposure::volumesession() const {
  // @@protoc_insertion_point(field_get:XT.HalfExposure.volumesession)
  return volumesession_;
}
 void HalfExposure::set_volumesession(::google::protobuf::int64 value) {
  set_has_volumesession();
  volumesession_ = value;
  // @@protoc_insertion_point(field_set:XT.HalfExposure.volumesession)
}

// optional double amountsession = 6 [default = 0];
bool HalfExposure::has_amountsession() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HalfExposure::set_has_amountsession() {
  _has_bits_[0] |= 0x00000020u;
}
void HalfExposure::clear_has_amountsession() {
  _has_bits_[0] &= ~0x00000020u;
}
void HalfExposure::clear_amountsession() {
  amountsession_ = 0;
  clear_has_amountsession();
}
 double HalfExposure::amountsession() const {
  // @@protoc_insertion_point(field_get:XT.HalfExposure.amountsession)
  return amountsession_;
}
 void HalfExposure::set_amountsession(double value) {
  set_has_amountsession();
  amountsession_ = value;
  // @@protoc_insertion_point(field_set:XT.HalfExposure.amountsession)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MktQuoteData::kInstrumentidFieldNumber;
const int MktQuoteData::kExchangetsFieldNumber;
const int MktQuoteData::kRecvtsFieldNumber;
const int MktQuoteData::kLastpxFieldNumber;
const int MktQuoteData::kLasttsFieldNumber;
const int MktQuoteData::kTotvolumeFieldNumber;
const int MktQuoteData::kTotamountFieldNumber;
const int MktQuoteData::kTotoiFieldNumber;
const int MktQuoteData::kBidpx0FieldNumber;
const int MktQuoteData::kAskpx0FieldNumber;
const int MktQuoteData::kBidsz0FieldNumber;
const int MktQuoteData::kAsksz0FieldNumber;
const int MktQuoteData::kBidpx1FieldNumber;
const int MktQuoteData::kAskpx1FieldNumber;
const int MktQuoteData::kBidsz1FieldNumber;
const int MktQuoteData::kAsksz1FieldNumber;
const int MktQuoteData::kBidpx2FieldNumber;
const int MktQuoteData::kAskpx2FieldNumber;
const int MktQuoteData::kBidsz2FieldNumber;
const int MktQuoteData::kAsksz2FieldNumber;
const int MktQuoteData::kBidpx3FieldNumber;
const int MktQuoteData::kAskpx3FieldNumber;
const int MktQuoteData::kBidsz3FieldNumber;
const int MktQuoteData::kAsksz3FieldNumber;
const int MktQuoteData::kBidpx4FieldNumber;
const int MktQuoteData::kAskpx4FieldNumber;
const int MktQuoteData::kBidsz4FieldNumber;
const int MktQuoteData::kAsksz4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MktQuoteData::MktQuoteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.MktQuoteData)
}

void MktQuoteData::InitAsDefaultInstance() {
}

MktQuoteData::MktQuoteData(const MktQuoteData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.MktQuoteData)
}

void MktQuoteData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangets_ = GOOGLE_LONGLONG(0);
  recvts_ = GOOGLE_LONGLONG(0);
  lastpx_ = 0;
  lastts_ = GOOGLE_LONGLONG(0);
  totvolume_ = GOOGLE_LONGLONG(0);
  totamount_ = 0;
  totoi_ = GOOGLE_LONGLONG(0);
  bidpx0_ = 0;
  askpx0_ = 0;
  bidsz0_ = 0;
  asksz0_ = 0;
  bidpx1_ = 0;
  askpx1_ = 0;
  bidsz1_ = 0;
  asksz1_ = 0;
  bidpx2_ = 0;
  askpx2_ = 0;
  bidsz2_ = 0;
  asksz2_ = 0;
  bidpx3_ = 0;
  askpx3_ = 0;
  bidsz3_ = 0;
  asksz3_ = 0;
  bidpx4_ = 0;
  askpx4_ = 0;
  bidsz4_ = 0;
  asksz4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MktQuoteData::~MktQuoteData() {
  // @@protoc_insertion_point(destructor:XT.MktQuoteData)
  SharedDtor();
}

void MktQuoteData::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MktQuoteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MktQuoteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MktQuoteData_descriptor_;
}

const MktQuoteData& MktQuoteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

MktQuoteData* MktQuoteData::default_instance_ = NULL;

MktQuoteData* MktQuoteData::New(::google::protobuf::Arena* arena) const {
  MktQuoteData* n = new MktQuoteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MktQuoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.MktQuoteData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MktQuoteData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MktQuoteData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(exchangets_, totoi_);
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(bidpx0_, asksz1_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(bidpx2_, asksz3_);
  }
  ZR_(bidpx4_, asksz4_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MktQuoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.MktQuoteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrumentid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.MktQuoteData.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exchangets;
        break;
      }

      // optional int64 exchangets = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_exchangets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchangets_)));
          set_has_exchangets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recvts;
        break;
      }

      // optional int64 recvts = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_recvts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recvts_)));
          set_has_recvts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lastpx;
        break;
      }

      // optional double lastpx = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_lastpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastpx_)));
          set_has_lastpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastts;
        break;
      }

      // optional int64 lastts = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lastts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastts_)));
          set_has_lastts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_totvolume;
        break;
      }

      // optional int64 totvolume = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_totvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totvolume_)));
          set_has_totvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_totamount;
        break;
      }

      // optional double totamount = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_totamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totamount_)));
          set_has_totamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totoi;
        break;
      }

      // optional int64 totoi = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_totoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totoi_)));
          set_has_totoi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_bidpx0;
        break;
      }

      // optional double bidpx0 = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_bidpx0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidpx0_)));
          set_has_bidpx0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_askpx0;
        break;
      }

      // optional double askpx0 = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_askpx0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askpx0_)));
          set_has_askpx0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bidsz0;
        break;
      }

      // optional int32 bidsz0 = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_bidsz0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsz0_)));
          set_has_bidsz0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_asksz0;
        break;
      }

      // optional int32 asksz0 = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_asksz0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksz0_)));
          set_has_asksz0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_bidpx1;
        break;
      }

      // optional double bidpx1 = 13 [default = 0];
      case 13: {
        if (tag == 105) {
         parse_bidpx1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidpx1_)));
          set_has_bidpx1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_askpx1;
        break;
      }

      // optional double askpx1 = 14 [default = 0];
      case 14: {
        if (tag == 113) {
         parse_askpx1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askpx1_)));
          set_has_askpx1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_bidsz1;
        break;
      }

      // optional int32 bidsz1 = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_bidsz1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsz1_)));
          set_has_bidsz1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_asksz1;
        break;
      }

      // optional int32 asksz1 = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_asksz1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksz1_)));
          set_has_asksz1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_bidpx2;
        break;
      }

      // optional double bidpx2 = 17 [default = 0];
      case 17: {
        if (tag == 137) {
         parse_bidpx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidpx2_)));
          set_has_bidpx2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_askpx2;
        break;
      }

      // optional double askpx2 = 18 [default = 0];
      case 18: {
        if (tag == 145) {
         parse_askpx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askpx2_)));
          set_has_askpx2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_bidsz2;
        break;
      }

      // optional int32 bidsz2 = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_bidsz2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsz2_)));
          set_has_bidsz2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_asksz2;
        break;
      }

      // optional int32 asksz2 = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_asksz2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksz2_)));
          set_has_asksz2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_bidpx3;
        break;
      }

      // optional double bidpx3 = 21 [default = 0];
      case 21: {
        if (tag == 169) {
         parse_bidpx3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidpx3_)));
          set_has_bidpx3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_askpx3;
        break;
      }

      // optional double askpx3 = 22 [default = 0];
      case 22: {
        if (tag == 177) {
         parse_askpx3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askpx3_)));
          set_has_askpx3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_bidsz3;
        break;
      }

      // optional int32 bidsz3 = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_bidsz3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsz3_)));
          set_has_bidsz3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_asksz3;
        break;
      }

      // optional int32 asksz3 = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_asksz3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksz3_)));
          set_has_asksz3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_bidpx4;
        break;
      }

      // optional double bidpx4 = 25 [default = 0];
      case 25: {
        if (tag == 201) {
         parse_bidpx4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidpx4_)));
          set_has_bidpx4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_askpx4;
        break;
      }

      // optional double askpx4 = 26 [default = 0];
      case 26: {
        if (tag == 209) {
         parse_askpx4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askpx4_)));
          set_has_askpx4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_bidsz4;
        break;
      }

      // optional int32 bidsz4 = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_bidsz4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsz4_)));
          set_has_bidsz4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_asksz4;
        break;
      }

      // optional int32 asksz4 = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_asksz4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksz4_)));
          set_has_asksz4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.MktQuoteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.MktQuoteData)
  return false;
#undef DO_
}

void MktQuoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.MktQuoteData)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.MktQuoteData.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentid(), output);
  }

  // optional int64 exchangets = 2 [default = 0];
  if (has_exchangets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exchangets(), output);
  }

  // optional int64 recvts = 3 [default = 0];
  if (has_recvts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->recvts(), output);
  }

  // optional double lastpx = 4 [default = 0];
  if (has_lastpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lastpx(), output);
  }

  // optional int64 lastts = 5 [default = 0];
  if (has_lastts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lastts(), output);
  }

  // optional int64 totvolume = 6 [default = 0];
  if (has_totvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->totvolume(), output);
  }

  // optional double totamount = 7 [default = 0];
  if (has_totamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->totamount(), output);
  }

  // optional int64 totoi = 8 [default = 0];
  if (has_totoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->totoi(), output);
  }

  // optional double bidpx0 = 9 [default = 0];
  if (has_bidpx0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidpx0(), output);
  }

  // optional double askpx0 = 10 [default = 0];
  if (has_askpx0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askpx0(), output);
  }

  // optional int32 bidsz0 = 11 [default = 0];
  if (has_bidsz0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bidsz0(), output);
  }

  // optional int32 asksz0 = 12 [default = 0];
  if (has_asksz0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->asksz0(), output);
  }

  // optional double bidpx1 = 13 [default = 0];
  if (has_bidpx1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->bidpx1(), output);
  }

  // optional double askpx1 = 14 [default = 0];
  if (has_askpx1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->askpx1(), output);
  }

  // optional int32 bidsz1 = 15 [default = 0];
  if (has_bidsz1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bidsz1(), output);
  }

  // optional int32 asksz1 = 16 [default = 0];
  if (has_asksz1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->asksz1(), output);
  }

  // optional double bidpx2 = 17 [default = 0];
  if (has_bidpx2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->bidpx2(), output);
  }

  // optional double askpx2 = 18 [default = 0];
  if (has_askpx2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->askpx2(), output);
  }

  // optional int32 bidsz2 = 19 [default = 0];
  if (has_bidsz2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->bidsz2(), output);
  }

  // optional int32 asksz2 = 20 [default = 0];
  if (has_asksz2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->asksz2(), output);
  }

  // optional double bidpx3 = 21 [default = 0];
  if (has_bidpx3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->bidpx3(), output);
  }

  // optional double askpx3 = 22 [default = 0];
  if (has_askpx3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->askpx3(), output);
  }

  // optional int32 bidsz3 = 23 [default = 0];
  if (has_bidsz3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->bidsz3(), output);
  }

  // optional int32 asksz3 = 24 [default = 0];
  if (has_asksz3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->asksz3(), output);
  }

  // optional double bidpx4 = 25 [default = 0];
  if (has_bidpx4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->bidpx4(), output);
  }

  // optional double askpx4 = 26 [default = 0];
  if (has_askpx4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->askpx4(), output);
  }

  // optional int32 bidsz4 = 27 [default = 0];
  if (has_bidsz4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->bidsz4(), output);
  }

  // optional int32 asksz4 = 28 [default = 0];
  if (has_asksz4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->asksz4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.MktQuoteData)
}

::google::protobuf::uint8* MktQuoteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.MktQuoteData)
  // optional string instrumentid = 1 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.MktQuoteData.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // optional int64 exchangets = 2 [default = 0];
  if (has_exchangets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exchangets(), target);
  }

  // optional int64 recvts = 3 [default = 0];
  if (has_recvts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->recvts(), target);
  }

  // optional double lastpx = 4 [default = 0];
  if (has_lastpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lastpx(), target);
  }

  // optional int64 lastts = 5 [default = 0];
  if (has_lastts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lastts(), target);
  }

  // optional int64 totvolume = 6 [default = 0];
  if (has_totvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->totvolume(), target);
  }

  // optional double totamount = 7 [default = 0];
  if (has_totamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->totamount(), target);
  }

  // optional int64 totoi = 8 [default = 0];
  if (has_totoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->totoi(), target);
  }

  // optional double bidpx0 = 9 [default = 0];
  if (has_bidpx0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidpx0(), target);
  }

  // optional double askpx0 = 10 [default = 0];
  if (has_askpx0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askpx0(), target);
  }

  // optional int32 bidsz0 = 11 [default = 0];
  if (has_bidsz0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bidsz0(), target);
  }

  // optional int32 asksz0 = 12 [default = 0];
  if (has_asksz0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->asksz0(), target);
  }

  // optional double bidpx1 = 13 [default = 0];
  if (has_bidpx1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->bidpx1(), target);
  }

  // optional double askpx1 = 14 [default = 0];
  if (has_askpx1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->askpx1(), target);
  }

  // optional int32 bidsz1 = 15 [default = 0];
  if (has_bidsz1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bidsz1(), target);
  }

  // optional int32 asksz1 = 16 [default = 0];
  if (has_asksz1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->asksz1(), target);
  }

  // optional double bidpx2 = 17 [default = 0];
  if (has_bidpx2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->bidpx2(), target);
  }

  // optional double askpx2 = 18 [default = 0];
  if (has_askpx2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->askpx2(), target);
  }

  // optional int32 bidsz2 = 19 [default = 0];
  if (has_bidsz2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->bidsz2(), target);
  }

  // optional int32 asksz2 = 20 [default = 0];
  if (has_asksz2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->asksz2(), target);
  }

  // optional double bidpx3 = 21 [default = 0];
  if (has_bidpx3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->bidpx3(), target);
  }

  // optional double askpx3 = 22 [default = 0];
  if (has_askpx3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->askpx3(), target);
  }

  // optional int32 bidsz3 = 23 [default = 0];
  if (has_bidsz3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->bidsz3(), target);
  }

  // optional int32 asksz3 = 24 [default = 0];
  if (has_asksz3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->asksz3(), target);
  }

  // optional double bidpx4 = 25 [default = 0];
  if (has_bidpx4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->bidpx4(), target);
  }

  // optional double askpx4 = 26 [default = 0];
  if (has_askpx4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->askpx4(), target);
  }

  // optional int32 bidsz4 = 27 [default = 0];
  if (has_bidsz4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->bidsz4(), target);
  }

  // optional int32 asksz4 = 28 [default = 0];
  if (has_asksz4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->asksz4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.MktQuoteData)
  return target;
}

int MktQuoteData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.MktQuoteData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string instrumentid = 1 [default = ""];
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional int64 exchangets = 2 [default = 0];
    if (has_exchangets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exchangets());
    }

    // optional int64 recvts = 3 [default = 0];
    if (has_recvts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recvts());
    }

    // optional double lastpx = 4 [default = 0];
    if (has_lastpx()) {
      total_size += 1 + 8;
    }

    // optional int64 lastts = 5 [default = 0];
    if (has_lastts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastts());
    }

    // optional int64 totvolume = 6 [default = 0];
    if (has_totvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totvolume());
    }

    // optional double totamount = 7 [default = 0];
    if (has_totamount()) {
      total_size += 1 + 8;
    }

    // optional int64 totoi = 8 [default = 0];
    if (has_totoi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totoi());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double bidpx0 = 9 [default = 0];
    if (has_bidpx0()) {
      total_size += 1 + 8;
    }

    // optional double askpx0 = 10 [default = 0];
    if (has_askpx0()) {
      total_size += 1 + 8;
    }

    // optional int32 bidsz0 = 11 [default = 0];
    if (has_bidsz0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsz0());
    }

    // optional int32 asksz0 = 12 [default = 0];
    if (has_asksz0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksz0());
    }

    // optional double bidpx1 = 13 [default = 0];
    if (has_bidpx1()) {
      total_size += 1 + 8;
    }

    // optional double askpx1 = 14 [default = 0];
    if (has_askpx1()) {
      total_size += 1 + 8;
    }

    // optional int32 bidsz1 = 15 [default = 0];
    if (has_bidsz1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsz1());
    }

    // optional int32 asksz1 = 16 [default = 0];
    if (has_asksz1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksz1());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double bidpx2 = 17 [default = 0];
    if (has_bidpx2()) {
      total_size += 2 + 8;
    }

    // optional double askpx2 = 18 [default = 0];
    if (has_askpx2()) {
      total_size += 2 + 8;
    }

    // optional int32 bidsz2 = 19 [default = 0];
    if (has_bidsz2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsz2());
    }

    // optional int32 asksz2 = 20 [default = 0];
    if (has_asksz2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksz2());
    }

    // optional double bidpx3 = 21 [default = 0];
    if (has_bidpx3()) {
      total_size += 2 + 8;
    }

    // optional double askpx3 = 22 [default = 0];
    if (has_askpx3()) {
      total_size += 2 + 8;
    }

    // optional int32 bidsz3 = 23 [default = 0];
    if (has_bidsz3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsz3());
    }

    // optional int32 asksz3 = 24 [default = 0];
    if (has_asksz3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksz3());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional double bidpx4 = 25 [default = 0];
    if (has_bidpx4()) {
      total_size += 2 + 8;
    }

    // optional double askpx4 = 26 [default = 0];
    if (has_askpx4()) {
      total_size += 2 + 8;
    }

    // optional int32 bidsz4 = 27 [default = 0];
    if (has_bidsz4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsz4());
    }

    // optional int32 asksz4 = 28 [default = 0];
    if (has_asksz4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksz4());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MktQuoteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.MktQuoteData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MktQuoteData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MktQuoteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.MktQuoteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.MktQuoteData)
    MergeFrom(*source);
  }
}

void MktQuoteData::MergeFrom(const MktQuoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.MktQuoteData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_exchangets()) {
      set_exchangets(from.exchangets());
    }
    if (from.has_recvts()) {
      set_recvts(from.recvts());
    }
    if (from.has_lastpx()) {
      set_lastpx(from.lastpx());
    }
    if (from.has_lastts()) {
      set_lastts(from.lastts());
    }
    if (from.has_totvolume()) {
      set_totvolume(from.totvolume());
    }
    if (from.has_totamount()) {
      set_totamount(from.totamount());
    }
    if (from.has_totoi()) {
      set_totoi(from.totoi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidpx0()) {
      set_bidpx0(from.bidpx0());
    }
    if (from.has_askpx0()) {
      set_askpx0(from.askpx0());
    }
    if (from.has_bidsz0()) {
      set_bidsz0(from.bidsz0());
    }
    if (from.has_asksz0()) {
      set_asksz0(from.asksz0());
    }
    if (from.has_bidpx1()) {
      set_bidpx1(from.bidpx1());
    }
    if (from.has_askpx1()) {
      set_askpx1(from.askpx1());
    }
    if (from.has_bidsz1()) {
      set_bidsz1(from.bidsz1());
    }
    if (from.has_asksz1()) {
      set_asksz1(from.asksz1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bidpx2()) {
      set_bidpx2(from.bidpx2());
    }
    if (from.has_askpx2()) {
      set_askpx2(from.askpx2());
    }
    if (from.has_bidsz2()) {
      set_bidsz2(from.bidsz2());
    }
    if (from.has_asksz2()) {
      set_asksz2(from.asksz2());
    }
    if (from.has_bidpx3()) {
      set_bidpx3(from.bidpx3());
    }
    if (from.has_askpx3()) {
      set_askpx3(from.askpx3());
    }
    if (from.has_bidsz3()) {
      set_bidsz3(from.bidsz3());
    }
    if (from.has_asksz3()) {
      set_asksz3(from.asksz3());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bidpx4()) {
      set_bidpx4(from.bidpx4());
    }
    if (from.has_askpx4()) {
      set_askpx4(from.askpx4());
    }
    if (from.has_bidsz4()) {
      set_bidsz4(from.bidsz4());
    }
    if (from.has_asksz4()) {
      set_asksz4(from.asksz4());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MktQuoteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.MktQuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MktQuoteData::CopyFrom(const MktQuoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.MktQuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MktQuoteData::IsInitialized() const {

  return true;
}

void MktQuoteData::Swap(MktQuoteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MktQuoteData::InternalSwap(MktQuoteData* other) {
  instrumentid_.Swap(&other->instrumentid_);
  std::swap(exchangets_, other->exchangets_);
  std::swap(recvts_, other->recvts_);
  std::swap(lastpx_, other->lastpx_);
  std::swap(lastts_, other->lastts_);
  std::swap(totvolume_, other->totvolume_);
  std::swap(totamount_, other->totamount_);
  std::swap(totoi_, other->totoi_);
  std::swap(bidpx0_, other->bidpx0_);
  std::swap(askpx0_, other->askpx0_);
  std::swap(bidsz0_, other->bidsz0_);
  std::swap(asksz0_, other->asksz0_);
  std::swap(bidpx1_, other->bidpx1_);
  std::swap(askpx1_, other->askpx1_);
  std::swap(bidsz1_, other->bidsz1_);
  std::swap(asksz1_, other->asksz1_);
  std::swap(bidpx2_, other->bidpx2_);
  std::swap(askpx2_, other->askpx2_);
  std::swap(bidsz2_, other->bidsz2_);
  std::swap(asksz2_, other->asksz2_);
  std::swap(bidpx3_, other->bidpx3_);
  std::swap(askpx3_, other->askpx3_);
  std::swap(bidsz3_, other->bidsz3_);
  std::swap(asksz3_, other->asksz3_);
  std::swap(bidpx4_, other->bidpx4_);
  std::swap(askpx4_, other->askpx4_);
  std::swap(bidsz4_, other->bidsz4_);
  std::swap(asksz4_, other->asksz4_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MktQuoteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MktQuoteData_descriptor_;
  metadata.reflection = MktQuoteData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MktQuoteData

// optional string instrumentid = 1 [default = ""];
bool MktQuoteData::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MktQuoteData::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000001u;
}
void MktQuoteData::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MktQuoteData::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& MktQuoteData::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MktQuoteData::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.instrumentid)
}
 void MktQuoteData::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.MktQuoteData.instrumentid)
}
 void MktQuoteData::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.MktQuoteData.instrumentid)
}
 ::std::string* MktQuoteData::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.MktQuoteData.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MktQuoteData::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.MktQuoteData.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MktQuoteData::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.MktQuoteData.instrumentid)
}

// optional int64 exchangets = 2 [default = 0];
bool MktQuoteData::has_exchangets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MktQuoteData::set_has_exchangets() {
  _has_bits_[0] |= 0x00000002u;
}
void MktQuoteData::clear_has_exchangets() {
  _has_bits_[0] &= ~0x00000002u;
}
void MktQuoteData::clear_exchangets() {
  exchangets_ = GOOGLE_LONGLONG(0);
  clear_has_exchangets();
}
 ::google::protobuf::int64 MktQuoteData::exchangets() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.exchangets)
  return exchangets_;
}
 void MktQuoteData::set_exchangets(::google::protobuf::int64 value) {
  set_has_exchangets();
  exchangets_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.exchangets)
}

// optional int64 recvts = 3 [default = 0];
bool MktQuoteData::has_recvts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MktQuoteData::set_has_recvts() {
  _has_bits_[0] |= 0x00000004u;
}
void MktQuoteData::clear_has_recvts() {
  _has_bits_[0] &= ~0x00000004u;
}
void MktQuoteData::clear_recvts() {
  recvts_ = GOOGLE_LONGLONG(0);
  clear_has_recvts();
}
 ::google::protobuf::int64 MktQuoteData::recvts() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.recvts)
  return recvts_;
}
 void MktQuoteData::set_recvts(::google::protobuf::int64 value) {
  set_has_recvts();
  recvts_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.recvts)
}

// optional double lastpx = 4 [default = 0];
bool MktQuoteData::has_lastpx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MktQuoteData::set_has_lastpx() {
  _has_bits_[0] |= 0x00000008u;
}
void MktQuoteData::clear_has_lastpx() {
  _has_bits_[0] &= ~0x00000008u;
}
void MktQuoteData::clear_lastpx() {
  lastpx_ = 0;
  clear_has_lastpx();
}
 double MktQuoteData::lastpx() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.lastpx)
  return lastpx_;
}
 void MktQuoteData::set_lastpx(double value) {
  set_has_lastpx();
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.lastpx)
}

// optional int64 lastts = 5 [default = 0];
bool MktQuoteData::has_lastts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MktQuoteData::set_has_lastts() {
  _has_bits_[0] |= 0x00000010u;
}
void MktQuoteData::clear_has_lastts() {
  _has_bits_[0] &= ~0x00000010u;
}
void MktQuoteData::clear_lastts() {
  lastts_ = GOOGLE_LONGLONG(0);
  clear_has_lastts();
}
 ::google::protobuf::int64 MktQuoteData::lastts() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.lastts)
  return lastts_;
}
 void MktQuoteData::set_lastts(::google::protobuf::int64 value) {
  set_has_lastts();
  lastts_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.lastts)
}

// optional int64 totvolume = 6 [default = 0];
bool MktQuoteData::has_totvolume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MktQuoteData::set_has_totvolume() {
  _has_bits_[0] |= 0x00000020u;
}
void MktQuoteData::clear_has_totvolume() {
  _has_bits_[0] &= ~0x00000020u;
}
void MktQuoteData::clear_totvolume() {
  totvolume_ = GOOGLE_LONGLONG(0);
  clear_has_totvolume();
}
 ::google::protobuf::int64 MktQuoteData::totvolume() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.totvolume)
  return totvolume_;
}
 void MktQuoteData::set_totvolume(::google::protobuf::int64 value) {
  set_has_totvolume();
  totvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.totvolume)
}

// optional double totamount = 7 [default = 0];
bool MktQuoteData::has_totamount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MktQuoteData::set_has_totamount() {
  _has_bits_[0] |= 0x00000040u;
}
void MktQuoteData::clear_has_totamount() {
  _has_bits_[0] &= ~0x00000040u;
}
void MktQuoteData::clear_totamount() {
  totamount_ = 0;
  clear_has_totamount();
}
 double MktQuoteData::totamount() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.totamount)
  return totamount_;
}
 void MktQuoteData::set_totamount(double value) {
  set_has_totamount();
  totamount_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.totamount)
}

// optional int64 totoi = 8 [default = 0];
bool MktQuoteData::has_totoi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MktQuoteData::set_has_totoi() {
  _has_bits_[0] |= 0x00000080u;
}
void MktQuoteData::clear_has_totoi() {
  _has_bits_[0] &= ~0x00000080u;
}
void MktQuoteData::clear_totoi() {
  totoi_ = GOOGLE_LONGLONG(0);
  clear_has_totoi();
}
 ::google::protobuf::int64 MktQuoteData::totoi() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.totoi)
  return totoi_;
}
 void MktQuoteData::set_totoi(::google::protobuf::int64 value) {
  set_has_totoi();
  totoi_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.totoi)
}

// optional double bidpx0 = 9 [default = 0];
bool MktQuoteData::has_bidpx0() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MktQuoteData::set_has_bidpx0() {
  _has_bits_[0] |= 0x00000100u;
}
void MktQuoteData::clear_has_bidpx0() {
  _has_bits_[0] &= ~0x00000100u;
}
void MktQuoteData::clear_bidpx0() {
  bidpx0_ = 0;
  clear_has_bidpx0();
}
 double MktQuoteData::bidpx0() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidpx0)
  return bidpx0_;
}
 void MktQuoteData::set_bidpx0(double value) {
  set_has_bidpx0();
  bidpx0_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidpx0)
}

// optional double askpx0 = 10 [default = 0];
bool MktQuoteData::has_askpx0() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MktQuoteData::set_has_askpx0() {
  _has_bits_[0] |= 0x00000200u;
}
void MktQuoteData::clear_has_askpx0() {
  _has_bits_[0] &= ~0x00000200u;
}
void MktQuoteData::clear_askpx0() {
  askpx0_ = 0;
  clear_has_askpx0();
}
 double MktQuoteData::askpx0() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.askpx0)
  return askpx0_;
}
 void MktQuoteData::set_askpx0(double value) {
  set_has_askpx0();
  askpx0_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.askpx0)
}

// optional int32 bidsz0 = 11 [default = 0];
bool MktQuoteData::has_bidsz0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MktQuoteData::set_has_bidsz0() {
  _has_bits_[0] |= 0x00000400u;
}
void MktQuoteData::clear_has_bidsz0() {
  _has_bits_[0] &= ~0x00000400u;
}
void MktQuoteData::clear_bidsz0() {
  bidsz0_ = 0;
  clear_has_bidsz0();
}
 ::google::protobuf::int32 MktQuoteData::bidsz0() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidsz0)
  return bidsz0_;
}
 void MktQuoteData::set_bidsz0(::google::protobuf::int32 value) {
  set_has_bidsz0();
  bidsz0_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidsz0)
}

// optional int32 asksz0 = 12 [default = 0];
bool MktQuoteData::has_asksz0() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MktQuoteData::set_has_asksz0() {
  _has_bits_[0] |= 0x00000800u;
}
void MktQuoteData::clear_has_asksz0() {
  _has_bits_[0] &= ~0x00000800u;
}
void MktQuoteData::clear_asksz0() {
  asksz0_ = 0;
  clear_has_asksz0();
}
 ::google::protobuf::int32 MktQuoteData::asksz0() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.asksz0)
  return asksz0_;
}
 void MktQuoteData::set_asksz0(::google::protobuf::int32 value) {
  set_has_asksz0();
  asksz0_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.asksz0)
}

// optional double bidpx1 = 13 [default = 0];
bool MktQuoteData::has_bidpx1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MktQuoteData::set_has_bidpx1() {
  _has_bits_[0] |= 0x00001000u;
}
void MktQuoteData::clear_has_bidpx1() {
  _has_bits_[0] &= ~0x00001000u;
}
void MktQuoteData::clear_bidpx1() {
  bidpx1_ = 0;
  clear_has_bidpx1();
}
 double MktQuoteData::bidpx1() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidpx1)
  return bidpx1_;
}
 void MktQuoteData::set_bidpx1(double value) {
  set_has_bidpx1();
  bidpx1_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidpx1)
}

// optional double askpx1 = 14 [default = 0];
bool MktQuoteData::has_askpx1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MktQuoteData::set_has_askpx1() {
  _has_bits_[0] |= 0x00002000u;
}
void MktQuoteData::clear_has_askpx1() {
  _has_bits_[0] &= ~0x00002000u;
}
void MktQuoteData::clear_askpx1() {
  askpx1_ = 0;
  clear_has_askpx1();
}
 double MktQuoteData::askpx1() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.askpx1)
  return askpx1_;
}
 void MktQuoteData::set_askpx1(double value) {
  set_has_askpx1();
  askpx1_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.askpx1)
}

// optional int32 bidsz1 = 15 [default = 0];
bool MktQuoteData::has_bidsz1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MktQuoteData::set_has_bidsz1() {
  _has_bits_[0] |= 0x00004000u;
}
void MktQuoteData::clear_has_bidsz1() {
  _has_bits_[0] &= ~0x00004000u;
}
void MktQuoteData::clear_bidsz1() {
  bidsz1_ = 0;
  clear_has_bidsz1();
}
 ::google::protobuf::int32 MktQuoteData::bidsz1() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidsz1)
  return bidsz1_;
}
 void MktQuoteData::set_bidsz1(::google::protobuf::int32 value) {
  set_has_bidsz1();
  bidsz1_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidsz1)
}

// optional int32 asksz1 = 16 [default = 0];
bool MktQuoteData::has_asksz1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MktQuoteData::set_has_asksz1() {
  _has_bits_[0] |= 0x00008000u;
}
void MktQuoteData::clear_has_asksz1() {
  _has_bits_[0] &= ~0x00008000u;
}
void MktQuoteData::clear_asksz1() {
  asksz1_ = 0;
  clear_has_asksz1();
}
 ::google::protobuf::int32 MktQuoteData::asksz1() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.asksz1)
  return asksz1_;
}
 void MktQuoteData::set_asksz1(::google::protobuf::int32 value) {
  set_has_asksz1();
  asksz1_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.asksz1)
}

// optional double bidpx2 = 17 [default = 0];
bool MktQuoteData::has_bidpx2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MktQuoteData::set_has_bidpx2() {
  _has_bits_[0] |= 0x00010000u;
}
void MktQuoteData::clear_has_bidpx2() {
  _has_bits_[0] &= ~0x00010000u;
}
void MktQuoteData::clear_bidpx2() {
  bidpx2_ = 0;
  clear_has_bidpx2();
}
 double MktQuoteData::bidpx2() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidpx2)
  return bidpx2_;
}
 void MktQuoteData::set_bidpx2(double value) {
  set_has_bidpx2();
  bidpx2_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidpx2)
}

// optional double askpx2 = 18 [default = 0];
bool MktQuoteData::has_askpx2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MktQuoteData::set_has_askpx2() {
  _has_bits_[0] |= 0x00020000u;
}
void MktQuoteData::clear_has_askpx2() {
  _has_bits_[0] &= ~0x00020000u;
}
void MktQuoteData::clear_askpx2() {
  askpx2_ = 0;
  clear_has_askpx2();
}
 double MktQuoteData::askpx2() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.askpx2)
  return askpx2_;
}
 void MktQuoteData::set_askpx2(double value) {
  set_has_askpx2();
  askpx2_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.askpx2)
}

// optional int32 bidsz2 = 19 [default = 0];
bool MktQuoteData::has_bidsz2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MktQuoteData::set_has_bidsz2() {
  _has_bits_[0] |= 0x00040000u;
}
void MktQuoteData::clear_has_bidsz2() {
  _has_bits_[0] &= ~0x00040000u;
}
void MktQuoteData::clear_bidsz2() {
  bidsz2_ = 0;
  clear_has_bidsz2();
}
 ::google::protobuf::int32 MktQuoteData::bidsz2() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidsz2)
  return bidsz2_;
}
 void MktQuoteData::set_bidsz2(::google::protobuf::int32 value) {
  set_has_bidsz2();
  bidsz2_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidsz2)
}

// optional int32 asksz2 = 20 [default = 0];
bool MktQuoteData::has_asksz2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MktQuoteData::set_has_asksz2() {
  _has_bits_[0] |= 0x00080000u;
}
void MktQuoteData::clear_has_asksz2() {
  _has_bits_[0] &= ~0x00080000u;
}
void MktQuoteData::clear_asksz2() {
  asksz2_ = 0;
  clear_has_asksz2();
}
 ::google::protobuf::int32 MktQuoteData::asksz2() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.asksz2)
  return asksz2_;
}
 void MktQuoteData::set_asksz2(::google::protobuf::int32 value) {
  set_has_asksz2();
  asksz2_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.asksz2)
}

// optional double bidpx3 = 21 [default = 0];
bool MktQuoteData::has_bidpx3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void MktQuoteData::set_has_bidpx3() {
  _has_bits_[0] |= 0x00100000u;
}
void MktQuoteData::clear_has_bidpx3() {
  _has_bits_[0] &= ~0x00100000u;
}
void MktQuoteData::clear_bidpx3() {
  bidpx3_ = 0;
  clear_has_bidpx3();
}
 double MktQuoteData::bidpx3() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidpx3)
  return bidpx3_;
}
 void MktQuoteData::set_bidpx3(double value) {
  set_has_bidpx3();
  bidpx3_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidpx3)
}

// optional double askpx3 = 22 [default = 0];
bool MktQuoteData::has_askpx3() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void MktQuoteData::set_has_askpx3() {
  _has_bits_[0] |= 0x00200000u;
}
void MktQuoteData::clear_has_askpx3() {
  _has_bits_[0] &= ~0x00200000u;
}
void MktQuoteData::clear_askpx3() {
  askpx3_ = 0;
  clear_has_askpx3();
}
 double MktQuoteData::askpx3() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.askpx3)
  return askpx3_;
}
 void MktQuoteData::set_askpx3(double value) {
  set_has_askpx3();
  askpx3_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.askpx3)
}

// optional int32 bidsz3 = 23 [default = 0];
bool MktQuoteData::has_bidsz3() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void MktQuoteData::set_has_bidsz3() {
  _has_bits_[0] |= 0x00400000u;
}
void MktQuoteData::clear_has_bidsz3() {
  _has_bits_[0] &= ~0x00400000u;
}
void MktQuoteData::clear_bidsz3() {
  bidsz3_ = 0;
  clear_has_bidsz3();
}
 ::google::protobuf::int32 MktQuoteData::bidsz3() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidsz3)
  return bidsz3_;
}
 void MktQuoteData::set_bidsz3(::google::protobuf::int32 value) {
  set_has_bidsz3();
  bidsz3_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidsz3)
}

// optional int32 asksz3 = 24 [default = 0];
bool MktQuoteData::has_asksz3() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void MktQuoteData::set_has_asksz3() {
  _has_bits_[0] |= 0x00800000u;
}
void MktQuoteData::clear_has_asksz3() {
  _has_bits_[0] &= ~0x00800000u;
}
void MktQuoteData::clear_asksz3() {
  asksz3_ = 0;
  clear_has_asksz3();
}
 ::google::protobuf::int32 MktQuoteData::asksz3() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.asksz3)
  return asksz3_;
}
 void MktQuoteData::set_asksz3(::google::protobuf::int32 value) {
  set_has_asksz3();
  asksz3_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.asksz3)
}

// optional double bidpx4 = 25 [default = 0];
bool MktQuoteData::has_bidpx4() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void MktQuoteData::set_has_bidpx4() {
  _has_bits_[0] |= 0x01000000u;
}
void MktQuoteData::clear_has_bidpx4() {
  _has_bits_[0] &= ~0x01000000u;
}
void MktQuoteData::clear_bidpx4() {
  bidpx4_ = 0;
  clear_has_bidpx4();
}
 double MktQuoteData::bidpx4() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidpx4)
  return bidpx4_;
}
 void MktQuoteData::set_bidpx4(double value) {
  set_has_bidpx4();
  bidpx4_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidpx4)
}

// optional double askpx4 = 26 [default = 0];
bool MktQuoteData::has_askpx4() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void MktQuoteData::set_has_askpx4() {
  _has_bits_[0] |= 0x02000000u;
}
void MktQuoteData::clear_has_askpx4() {
  _has_bits_[0] &= ~0x02000000u;
}
void MktQuoteData::clear_askpx4() {
  askpx4_ = 0;
  clear_has_askpx4();
}
 double MktQuoteData::askpx4() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.askpx4)
  return askpx4_;
}
 void MktQuoteData::set_askpx4(double value) {
  set_has_askpx4();
  askpx4_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.askpx4)
}

// optional int32 bidsz4 = 27 [default = 0];
bool MktQuoteData::has_bidsz4() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void MktQuoteData::set_has_bidsz4() {
  _has_bits_[0] |= 0x04000000u;
}
void MktQuoteData::clear_has_bidsz4() {
  _has_bits_[0] &= ~0x04000000u;
}
void MktQuoteData::clear_bidsz4() {
  bidsz4_ = 0;
  clear_has_bidsz4();
}
 ::google::protobuf::int32 MktQuoteData::bidsz4() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.bidsz4)
  return bidsz4_;
}
 void MktQuoteData::set_bidsz4(::google::protobuf::int32 value) {
  set_has_bidsz4();
  bidsz4_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.bidsz4)
}

// optional int32 asksz4 = 28 [default = 0];
bool MktQuoteData::has_asksz4() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void MktQuoteData::set_has_asksz4() {
  _has_bits_[0] |= 0x08000000u;
}
void MktQuoteData::clear_has_asksz4() {
  _has_bits_[0] &= ~0x08000000u;
}
void MktQuoteData::clear_asksz4() {
  asksz4_ = 0;
  clear_has_asksz4();
}
 ::google::protobuf::int32 MktQuoteData::asksz4() const {
  // @@protoc_insertion_point(field_get:XT.MktQuoteData.asksz4)
  return asksz4_;
}
 void MktQuoteData::set_asksz4(::google::protobuf::int32 value) {
  set_has_asksz4();
  asksz4_ = value;
  // @@protoc_insertion_point(field_set:XT.MktQuoteData.asksz4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GreeksData::kDeltaFieldNumber;
const int GreeksData::kGammaFieldNumber;
const int GreeksData::kVegaFieldNumber;
const int GreeksData::kThetaFieldNumber;
const int GreeksData::kRhoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GreeksData::GreeksData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.GreeksData)
}

void GreeksData::InitAsDefaultInstance() {
}

GreeksData::GreeksData(const GreeksData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.GreeksData)
}

void GreeksData::SharedCtor() {
  _cached_size_ = 0;
  delta_ = 0;
  gamma_ = 0;
  vega_ = 0;
  theta_ = 0;
  rho_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GreeksData::~GreeksData() {
  // @@protoc_insertion_point(destructor:XT.GreeksData)
  SharedDtor();
}

void GreeksData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GreeksData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GreeksData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GreeksData_descriptor_;
}

const GreeksData& GreeksData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

GreeksData* GreeksData::default_instance_ = NULL;

GreeksData* GreeksData::New(::google::protobuf::Arena* arena) const {
  GreeksData* n = new GreeksData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GreeksData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.GreeksData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GreeksData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GreeksData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(delta_, rho_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GreeksData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.GreeksData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double delta = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gamma;
        break;
      }

      // optional double gamma = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vega;
        break;
      }

      // optional double vega = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_vega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vega_)));
          set_has_vega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }

      // optional double theta = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_rho;
        break;
      }

      // optional double rho = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_rho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rho_)));
          set_has_rho();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.GreeksData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.GreeksData)
  return false;
#undef DO_
}

void GreeksData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.GreeksData)
  // optional double delta = 1 [default = 0];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->delta(), output);
  }

  // optional double gamma = 2 [default = 0];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gamma(), output);
  }

  // optional double vega = 3 [default = 0];
  if (has_vega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vega(), output);
  }

  // optional double theta = 4 [default = 0];
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double rho = 5 [default = 0];
  if (has_rho()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rho(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.GreeksData)
}

::google::protobuf::uint8* GreeksData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.GreeksData)
  // optional double delta = 1 [default = 0];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->delta(), target);
  }

  // optional double gamma = 2 [default = 0];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gamma(), target);
  }

  // optional double vega = 3 [default = 0];
  if (has_vega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vega(), target);
  }

  // optional double theta = 4 [default = 0];
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double rho = 5 [default = 0];
  if (has_rho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rho(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.GreeksData)
  return target;
}

int GreeksData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.GreeksData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double delta = 1 [default = 0];
    if (has_delta()) {
      total_size += 1 + 8;
    }

    // optional double gamma = 2 [default = 0];
    if (has_gamma()) {
      total_size += 1 + 8;
    }

    // optional double vega = 3 [default = 0];
    if (has_vega()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4 [default = 0];
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double rho = 5 [default = 0];
    if (has_rho()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GreeksData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.GreeksData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GreeksData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GreeksData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.GreeksData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.GreeksData)
    MergeFrom(*source);
  }
}

void GreeksData::MergeFrom(const GreeksData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.GreeksData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_vega()) {
      set_vega(from.vega());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_rho()) {
      set_rho(from.rho());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GreeksData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.GreeksData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GreeksData::CopyFrom(const GreeksData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.GreeksData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreeksData::IsInitialized() const {

  return true;
}

void GreeksData::Swap(GreeksData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GreeksData::InternalSwap(GreeksData* other) {
  std::swap(delta_, other->delta_);
  std::swap(gamma_, other->gamma_);
  std::swap(vega_, other->vega_);
  std::swap(theta_, other->theta_);
  std::swap(rho_, other->rho_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GreeksData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GreeksData_descriptor_;
  metadata.reflection = GreeksData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GreeksData

// optional double delta = 1 [default = 0];
bool GreeksData::has_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GreeksData::set_has_delta() {
  _has_bits_[0] |= 0x00000001u;
}
void GreeksData::clear_has_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
void GreeksData::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
 double GreeksData::delta() const {
  // @@protoc_insertion_point(field_get:XT.GreeksData.delta)
  return delta_;
}
 void GreeksData::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:XT.GreeksData.delta)
}

// optional double gamma = 2 [default = 0];
bool GreeksData::has_gamma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GreeksData::set_has_gamma() {
  _has_bits_[0] |= 0x00000002u;
}
void GreeksData::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000002u;
}
void GreeksData::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 double GreeksData::gamma() const {
  // @@protoc_insertion_point(field_get:XT.GreeksData.gamma)
  return gamma_;
}
 void GreeksData::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:XT.GreeksData.gamma)
}

// optional double vega = 3 [default = 0];
bool GreeksData::has_vega() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GreeksData::set_has_vega() {
  _has_bits_[0] |= 0x00000004u;
}
void GreeksData::clear_has_vega() {
  _has_bits_[0] &= ~0x00000004u;
}
void GreeksData::clear_vega() {
  vega_ = 0;
  clear_has_vega();
}
 double GreeksData::vega() const {
  // @@protoc_insertion_point(field_get:XT.GreeksData.vega)
  return vega_;
}
 void GreeksData::set_vega(double value) {
  set_has_vega();
  vega_ = value;
  // @@protoc_insertion_point(field_set:XT.GreeksData.vega)
}

// optional double theta = 4 [default = 0];
bool GreeksData::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GreeksData::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
void GreeksData::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
void GreeksData::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
 double GreeksData::theta() const {
  // @@protoc_insertion_point(field_get:XT.GreeksData.theta)
  return theta_;
}
 void GreeksData::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:XT.GreeksData.theta)
}

// optional double rho = 5 [default = 0];
bool GreeksData::has_rho() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GreeksData::set_has_rho() {
  _has_bits_[0] |= 0x00000010u;
}
void GreeksData::clear_has_rho() {
  _has_bits_[0] &= ~0x00000010u;
}
void GreeksData::clear_rho() {
  rho_ = 0;
  clear_has_rho();
}
 double GreeksData::rho() const {
  // @@protoc_insertion_point(field_get:XT.GreeksData.rho)
  return rho_;
}
 void GreeksData::set_rho(double value) {
  set_has_rho();
  rho_ = value;
  // @@protoc_insertion_point(field_set:XT.GreeksData.rho)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PosData::kNetposFieldNumber;
const int PosData::kNetposprevFieldNumber;
const int PosData::kNetposnewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PosData::PosData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PosData)
}

void PosData::InitAsDefaultInstance() {
}

PosData::PosData(const PosData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PosData)
}

void PosData::SharedCtor() {
  _cached_size_ = 0;
  netpos_ = 0;
  netposprev_ = 0;
  netposnew_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosData::~PosData() {
  // @@protoc_insertion_point(destructor:XT.PosData)
  SharedDtor();
}

void PosData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosData_descriptor_;
}

const PosData& PosData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PosData* PosData::default_instance_ = NULL;

PosData* PosData::New(::google::protobuf::Arena* arena) const {
  PosData* n = new PosData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PosData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PosData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PosData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PosData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(netpos_, netposnew_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PosData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PosData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 netpos = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netpos_)));
          set_has_netpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_netposprev;
        break;
      }

      // optional int32 netposprev = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_netposprev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netposprev_)));
          set_has_netposprev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netposnew;
        break;
      }

      // optional int32 netposnew = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_netposnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netposnew_)));
          set_has_netposnew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PosData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PosData)
  return false;
#undef DO_
}

void PosData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PosData)
  // optional int32 netpos = 1 [default = 0];
  if (has_netpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->netpos(), output);
  }

  // optional int32 netposprev = 2 [default = 0];
  if (has_netposprev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->netposprev(), output);
  }

  // optional int32 netposnew = 3 [default = 0];
  if (has_netposnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->netposnew(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PosData)
}

::google::protobuf::uint8* PosData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PosData)
  // optional int32 netpos = 1 [default = 0];
  if (has_netpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->netpos(), target);
  }

  // optional int32 netposprev = 2 [default = 0];
  if (has_netposprev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->netposprev(), target);
  }

  // optional int32 netposnew = 3 [default = 0];
  if (has_netposnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->netposnew(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PosData)
  return target;
}

int PosData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PosData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 netpos = 1 [default = 0];
    if (has_netpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netpos());
    }

    // optional int32 netposprev = 2 [default = 0];
    if (has_netposprev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netposprev());
    }

    // optional int32 netposnew = 3 [default = 0];
    if (has_netposnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netposnew());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PosData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PosData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PosData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PosData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PosData)
    MergeFrom(*source);
  }
}

void PosData::MergeFrom(const PosData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PosData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netpos()) {
      set_netpos(from.netpos());
    }
    if (from.has_netposprev()) {
      set_netposprev(from.netposprev());
    }
    if (from.has_netposnew()) {
      set_netposnew(from.netposnew());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PosData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PosData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosData::CopyFrom(const PosData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PosData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosData::IsInitialized() const {

  return true;
}

void PosData::Swap(PosData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PosData::InternalSwap(PosData* other) {
  std::swap(netpos_, other->netpos_);
  std::swap(netposprev_, other->netposprev_);
  std::swap(netposnew_, other->netposnew_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PosData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosData_descriptor_;
  metadata.reflection = PosData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PosData

// optional int32 netpos = 1 [default = 0];
bool PosData::has_netpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PosData::set_has_netpos() {
  _has_bits_[0] |= 0x00000001u;
}
void PosData::clear_has_netpos() {
  _has_bits_[0] &= ~0x00000001u;
}
void PosData::clear_netpos() {
  netpos_ = 0;
  clear_has_netpos();
}
 ::google::protobuf::int32 PosData::netpos() const {
  // @@protoc_insertion_point(field_get:XT.PosData.netpos)
  return netpos_;
}
 void PosData::set_netpos(::google::protobuf::int32 value) {
  set_has_netpos();
  netpos_ = value;
  // @@protoc_insertion_point(field_set:XT.PosData.netpos)
}

// optional int32 netposprev = 2 [default = 0];
bool PosData::has_netposprev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PosData::set_has_netposprev() {
  _has_bits_[0] |= 0x00000002u;
}
void PosData::clear_has_netposprev() {
  _has_bits_[0] &= ~0x00000002u;
}
void PosData::clear_netposprev() {
  netposprev_ = 0;
  clear_has_netposprev();
}
 ::google::protobuf::int32 PosData::netposprev() const {
  // @@protoc_insertion_point(field_get:XT.PosData.netposprev)
  return netposprev_;
}
 void PosData::set_netposprev(::google::protobuf::int32 value) {
  set_has_netposprev();
  netposprev_ = value;
  // @@protoc_insertion_point(field_set:XT.PosData.netposprev)
}

// optional int32 netposnew = 3 [default = 0];
bool PosData::has_netposnew() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PosData::set_has_netposnew() {
  _has_bits_[0] |= 0x00000004u;
}
void PosData::clear_has_netposnew() {
  _has_bits_[0] &= ~0x00000004u;
}
void PosData::clear_netposnew() {
  netposnew_ = 0;
  clear_has_netposnew();
}
 ::google::protobuf::int32 PosData::netposnew() const {
  // @@protoc_insertion_point(field_get:XT.PosData.netposnew)
  return netposnew_;
}
 void PosData::set_netposnew(::google::protobuf::int32 value) {
  set_has_netposnew();
  netposnew_ = value;
  // @@protoc_insertion_point(field_set:XT.PosData.netposnew)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPnLData::kRpxpnlFieldNumber;
const int RPnLData::kRpnlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPnLData::RPnLData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.RPnLData)
}

void RPnLData::InitAsDefaultInstance() {
}

RPnLData::RPnLData(const RPnLData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.RPnLData)
}

void RPnLData::SharedCtor() {
  _cached_size_ = 0;
  rpxpnl_ = 0;
  rpnl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPnLData::~RPnLData() {
  // @@protoc_insertion_point(destructor:XT.RPnLData)
  SharedDtor();
}

void RPnLData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RPnLData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPnLData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPnLData_descriptor_;
}

const RPnLData& RPnLData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

RPnLData* RPnLData::default_instance_ = NULL;

RPnLData* RPnLData::New(::google::protobuf::Arena* arena) const {
  RPnLData* n = new RPnLData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPnLData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.RPnLData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RPnLData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RPnLData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rpxpnl_, rpnl_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RPnLData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.RPnLData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double rpxpnl = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpxpnl_)));
          set_has_rpxpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rpnl;
        break;
      }

      // optional double rpnl = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_rpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpnl_)));
          set_has_rpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.RPnLData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.RPnLData)
  return false;
#undef DO_
}

void RPnLData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.RPnLData)
  // optional double rpxpnl = 1 [default = 0];
  if (has_rpxpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rpxpnl(), output);
  }

  // optional double rpnl = 2 [default = 0];
  if (has_rpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rpnl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.RPnLData)
}

::google::protobuf::uint8* RPnLData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.RPnLData)
  // optional double rpxpnl = 1 [default = 0];
  if (has_rpxpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rpxpnl(), target);
  }

  // optional double rpnl = 2 [default = 0];
  if (has_rpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rpnl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.RPnLData)
  return target;
}

int RPnLData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.RPnLData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double rpxpnl = 1 [default = 0];
    if (has_rpxpnl()) {
      total_size += 1 + 8;
    }

    // optional double rpnl = 2 [default = 0];
    if (has_rpnl()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPnLData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.RPnLData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RPnLData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RPnLData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.RPnLData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.RPnLData)
    MergeFrom(*source);
  }
}

void RPnLData::MergeFrom(const RPnLData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.RPnLData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpxpnl()) {
      set_rpxpnl(from.rpxpnl());
    }
    if (from.has_rpnl()) {
      set_rpnl(from.rpnl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RPnLData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.RPnLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPnLData::CopyFrom(const RPnLData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.RPnLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPnLData::IsInitialized() const {

  return true;
}

void RPnLData::Swap(RPnLData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPnLData::InternalSwap(RPnLData* other) {
  std::swap(rpxpnl_, other->rpxpnl_);
  std::swap(rpnl_, other->rpnl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPnLData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPnLData_descriptor_;
  metadata.reflection = RPnLData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPnLData

// optional double rpxpnl = 1 [default = 0];
bool RPnLData::has_rpxpnl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RPnLData::set_has_rpxpnl() {
  _has_bits_[0] |= 0x00000001u;
}
void RPnLData::clear_has_rpxpnl() {
  _has_bits_[0] &= ~0x00000001u;
}
void RPnLData::clear_rpxpnl() {
  rpxpnl_ = 0;
  clear_has_rpxpnl();
}
 double RPnLData::rpxpnl() const {
  // @@protoc_insertion_point(field_get:XT.RPnLData.rpxpnl)
  return rpxpnl_;
}
 void RPnLData::set_rpxpnl(double value) {
  set_has_rpxpnl();
  rpxpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.RPnLData.rpxpnl)
}

// optional double rpnl = 2 [default = 0];
bool RPnLData::has_rpnl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RPnLData::set_has_rpnl() {
  _has_bits_[0] |= 0x00000002u;
}
void RPnLData::clear_has_rpnl() {
  _has_bits_[0] &= ~0x00000002u;
}
void RPnLData::clear_rpnl() {
  rpnl_ = 0;
  clear_has_rpnl();
}
 double RPnLData::rpnl() const {
  // @@protoc_insertion_point(field_get:XT.RPnLData.rpnl)
  return rpnl_;
}
 void RPnLData::set_rpnl(double value) {
  set_has_rpnl();
  rpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.RPnLData.rpnl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UPnLData::kUpxpnlFieldNumber;
const int UPnLData::kUpnlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UPnLData::UPnLData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.UPnLData)
}

void UPnLData::InitAsDefaultInstance() {
}

UPnLData::UPnLData(const UPnLData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.UPnLData)
}

void UPnLData::SharedCtor() {
  _cached_size_ = 0;
  upxpnl_ = 0;
  upnl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UPnLData::~UPnLData() {
  // @@protoc_insertion_point(destructor:XT.UPnLData)
  SharedDtor();
}

void UPnLData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UPnLData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UPnLData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UPnLData_descriptor_;
}

const UPnLData& UPnLData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

UPnLData* UPnLData::default_instance_ = NULL;

UPnLData* UPnLData::New(::google::protobuf::Arena* arena) const {
  UPnLData* n = new UPnLData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UPnLData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.UPnLData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UPnLData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UPnLData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(upxpnl_, upnl_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UPnLData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.UPnLData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double upxpnl = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upxpnl_)));
          set_has_upxpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_upnl;
        break;
      }

      // optional double upnl = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_upnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upnl_)));
          set_has_upnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.UPnLData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.UPnLData)
  return false;
#undef DO_
}

void UPnLData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.UPnLData)
  // optional double upxpnl = 1 [default = 0];
  if (has_upxpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->upxpnl(), output);
  }

  // optional double upnl = 2 [default = 0];
  if (has_upnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->upnl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.UPnLData)
}

::google::protobuf::uint8* UPnLData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.UPnLData)
  // optional double upxpnl = 1 [default = 0];
  if (has_upxpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->upxpnl(), target);
  }

  // optional double upnl = 2 [default = 0];
  if (has_upnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->upnl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.UPnLData)
  return target;
}

int UPnLData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.UPnLData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double upxpnl = 1 [default = 0];
    if (has_upxpnl()) {
      total_size += 1 + 8;
    }

    // optional double upnl = 2 [default = 0];
    if (has_upnl()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UPnLData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.UPnLData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UPnLData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UPnLData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.UPnLData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.UPnLData)
    MergeFrom(*source);
  }
}

void UPnLData::MergeFrom(const UPnLData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.UPnLData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upxpnl()) {
      set_upxpnl(from.upxpnl());
    }
    if (from.has_upnl()) {
      set_upnl(from.upnl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UPnLData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.UPnLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UPnLData::CopyFrom(const UPnLData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.UPnLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UPnLData::IsInitialized() const {

  return true;
}

void UPnLData::Swap(UPnLData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UPnLData::InternalSwap(UPnLData* other) {
  std::swap(upxpnl_, other->upxpnl_);
  std::swap(upnl_, other->upnl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UPnLData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UPnLData_descriptor_;
  metadata.reflection = UPnLData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UPnLData

// optional double upxpnl = 1 [default = 0];
bool UPnLData::has_upxpnl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UPnLData::set_has_upxpnl() {
  _has_bits_[0] |= 0x00000001u;
}
void UPnLData::clear_has_upxpnl() {
  _has_bits_[0] &= ~0x00000001u;
}
void UPnLData::clear_upxpnl() {
  upxpnl_ = 0;
  clear_has_upxpnl();
}
 double UPnLData::upxpnl() const {
  // @@protoc_insertion_point(field_get:XT.UPnLData.upxpnl)
  return upxpnl_;
}
 void UPnLData::set_upxpnl(double value) {
  set_has_upxpnl();
  upxpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.UPnLData.upxpnl)
}

// optional double upnl = 2 [default = 0];
bool UPnLData::has_upnl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UPnLData::set_has_upnl() {
  _has_bits_[0] |= 0x00000002u;
}
void UPnLData::clear_has_upnl() {
  _has_bits_[0] &= ~0x00000002u;
}
void UPnLData::clear_upnl() {
  upnl_ = 0;
  clear_has_upnl();
}
 double UPnLData::upnl() const {
  // @@protoc_insertion_point(field_get:XT.UPnLData.upnl)
  return upnl_;
}
 void UPnLData::set_upnl(double value) {
  set_has_upnl();
  upnl_ = value;
  // @@protoc_insertion_point(field_set:XT.UPnLData.upnl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PosGreeksData::kPosdeltaFieldNumber;
const int PosGreeksData::kPosdeltanormFieldNumber;
const int PosGreeksData::kPosgammaFieldNumber;
const int PosGreeksData::kPosgammanormFieldNumber;
const int PosGreeksData::kPosvegaFieldNumber;
const int PosGreeksData::kPosveganormFieldNumber;
const int PosGreeksData::kPosthetaFieldNumber;
const int PosGreeksData::kPosrhoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PosGreeksData::PosGreeksData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PosGreeksData)
}

void PosGreeksData::InitAsDefaultInstance() {
}

PosGreeksData::PosGreeksData(const PosGreeksData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PosGreeksData)
}

void PosGreeksData::SharedCtor() {
  _cached_size_ = 0;
  posdelta_ = 0;
  posdeltanorm_ = 0;
  posgamma_ = 0;
  posgammanorm_ = 0;
  posvega_ = 0;
  posveganorm_ = 0;
  postheta_ = 0;
  posrho_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosGreeksData::~PosGreeksData() {
  // @@protoc_insertion_point(destructor:XT.PosGreeksData)
  SharedDtor();
}

void PosGreeksData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosGreeksData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosGreeksData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosGreeksData_descriptor_;
}

const PosGreeksData& PosGreeksData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PosGreeksData* PosGreeksData::default_instance_ = NULL;

PosGreeksData* PosGreeksData::New(::google::protobuf::Arena* arena) const {
  PosGreeksData* n = new PosGreeksData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PosGreeksData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PosGreeksData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PosGreeksData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PosGreeksData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(posdelta_, posrho_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PosGreeksData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PosGreeksData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double posdelta = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posdelta_)));
          set_has_posdelta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_posdeltanorm;
        break;
      }

      // optional double posdeltanorm = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_posdeltanorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posdeltanorm_)));
          set_has_posdeltanorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_posgamma;
        break;
      }

      // optional double posgamma = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_posgamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posgamma_)));
          set_has_posgamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_posgammanorm;
        break;
      }

      // optional double posgammanorm = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_posgammanorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posgammanorm_)));
          set_has_posgammanorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_posvega;
        break;
      }

      // optional double posvega = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_posvega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posvega_)));
          set_has_posvega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_posveganorm;
        break;
      }

      // optional double posveganorm = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_posveganorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posveganorm_)));
          set_has_posveganorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_postheta;
        break;
      }

      // optional double postheta = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_postheta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postheta_)));
          set_has_postheta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_posrho;
        break;
      }

      // optional double posrho = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_posrho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posrho_)));
          set_has_posrho();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PosGreeksData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PosGreeksData)
  return false;
#undef DO_
}

void PosGreeksData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PosGreeksData)
  // optional double posdelta = 1 [default = 0];
  if (has_posdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->posdelta(), output);
  }

  // optional double posdeltanorm = 2 [default = 0];
  if (has_posdeltanorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->posdeltanorm(), output);
  }

  // optional double posgamma = 3 [default = 0];
  if (has_posgamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->posgamma(), output);
  }

  // optional double posgammanorm = 4 [default = 0];
  if (has_posgammanorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->posgammanorm(), output);
  }

  // optional double posvega = 5 [default = 0];
  if (has_posvega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->posvega(), output);
  }

  // optional double posveganorm = 6 [default = 0];
  if (has_posveganorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->posveganorm(), output);
  }

  // optional double postheta = 7 [default = 0];
  if (has_postheta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->postheta(), output);
  }

  // optional double posrho = 8 [default = 0];
  if (has_posrho()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->posrho(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PosGreeksData)
}

::google::protobuf::uint8* PosGreeksData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PosGreeksData)
  // optional double posdelta = 1 [default = 0];
  if (has_posdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->posdelta(), target);
  }

  // optional double posdeltanorm = 2 [default = 0];
  if (has_posdeltanorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->posdeltanorm(), target);
  }

  // optional double posgamma = 3 [default = 0];
  if (has_posgamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->posgamma(), target);
  }

  // optional double posgammanorm = 4 [default = 0];
  if (has_posgammanorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->posgammanorm(), target);
  }

  // optional double posvega = 5 [default = 0];
  if (has_posvega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->posvega(), target);
  }

  // optional double posveganorm = 6 [default = 0];
  if (has_posveganorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->posveganorm(), target);
  }

  // optional double postheta = 7 [default = 0];
  if (has_postheta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->postheta(), target);
  }

  // optional double posrho = 8 [default = 0];
  if (has_posrho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->posrho(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PosGreeksData)
  return target;
}

int PosGreeksData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PosGreeksData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double posdelta = 1 [default = 0];
    if (has_posdelta()) {
      total_size += 1 + 8;
    }

    // optional double posdeltanorm = 2 [default = 0];
    if (has_posdeltanorm()) {
      total_size += 1 + 8;
    }

    // optional double posgamma = 3 [default = 0];
    if (has_posgamma()) {
      total_size += 1 + 8;
    }

    // optional double posgammanorm = 4 [default = 0];
    if (has_posgammanorm()) {
      total_size += 1 + 8;
    }

    // optional double posvega = 5 [default = 0];
    if (has_posvega()) {
      total_size += 1 + 8;
    }

    // optional double posveganorm = 6 [default = 0];
    if (has_posveganorm()) {
      total_size += 1 + 8;
    }

    // optional double postheta = 7 [default = 0];
    if (has_postheta()) {
      total_size += 1 + 8;
    }

    // optional double posrho = 8 [default = 0];
    if (has_posrho()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosGreeksData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PosGreeksData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PosGreeksData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PosGreeksData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PosGreeksData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PosGreeksData)
    MergeFrom(*source);
  }
}

void PosGreeksData::MergeFrom(const PosGreeksData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PosGreeksData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posdelta()) {
      set_posdelta(from.posdelta());
    }
    if (from.has_posdeltanorm()) {
      set_posdeltanorm(from.posdeltanorm());
    }
    if (from.has_posgamma()) {
      set_posgamma(from.posgamma());
    }
    if (from.has_posgammanorm()) {
      set_posgammanorm(from.posgammanorm());
    }
    if (from.has_posvega()) {
      set_posvega(from.posvega());
    }
    if (from.has_posveganorm()) {
      set_posveganorm(from.posveganorm());
    }
    if (from.has_postheta()) {
      set_postheta(from.postheta());
    }
    if (from.has_posrho()) {
      set_posrho(from.posrho());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PosGreeksData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PosGreeksData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosGreeksData::CopyFrom(const PosGreeksData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PosGreeksData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosGreeksData::IsInitialized() const {

  return true;
}

void PosGreeksData::Swap(PosGreeksData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PosGreeksData::InternalSwap(PosGreeksData* other) {
  std::swap(posdelta_, other->posdelta_);
  std::swap(posdeltanorm_, other->posdeltanorm_);
  std::swap(posgamma_, other->posgamma_);
  std::swap(posgammanorm_, other->posgammanorm_);
  std::swap(posvega_, other->posvega_);
  std::swap(posveganorm_, other->posveganorm_);
  std::swap(postheta_, other->postheta_);
  std::swap(posrho_, other->posrho_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PosGreeksData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosGreeksData_descriptor_;
  metadata.reflection = PosGreeksData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PosGreeksData

// optional double posdelta = 1 [default = 0];
bool PosGreeksData::has_posdelta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PosGreeksData::set_has_posdelta() {
  _has_bits_[0] |= 0x00000001u;
}
void PosGreeksData::clear_has_posdelta() {
  _has_bits_[0] &= ~0x00000001u;
}
void PosGreeksData::clear_posdelta() {
  posdelta_ = 0;
  clear_has_posdelta();
}
 double PosGreeksData::posdelta() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.posdelta)
  return posdelta_;
}
 void PosGreeksData::set_posdelta(double value) {
  set_has_posdelta();
  posdelta_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.posdelta)
}

// optional double posdeltanorm = 2 [default = 0];
bool PosGreeksData::has_posdeltanorm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PosGreeksData::set_has_posdeltanorm() {
  _has_bits_[0] |= 0x00000002u;
}
void PosGreeksData::clear_has_posdeltanorm() {
  _has_bits_[0] &= ~0x00000002u;
}
void PosGreeksData::clear_posdeltanorm() {
  posdeltanorm_ = 0;
  clear_has_posdeltanorm();
}
 double PosGreeksData::posdeltanorm() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.posdeltanorm)
  return posdeltanorm_;
}
 void PosGreeksData::set_posdeltanorm(double value) {
  set_has_posdeltanorm();
  posdeltanorm_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.posdeltanorm)
}

// optional double posgamma = 3 [default = 0];
bool PosGreeksData::has_posgamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PosGreeksData::set_has_posgamma() {
  _has_bits_[0] |= 0x00000004u;
}
void PosGreeksData::clear_has_posgamma() {
  _has_bits_[0] &= ~0x00000004u;
}
void PosGreeksData::clear_posgamma() {
  posgamma_ = 0;
  clear_has_posgamma();
}
 double PosGreeksData::posgamma() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.posgamma)
  return posgamma_;
}
 void PosGreeksData::set_posgamma(double value) {
  set_has_posgamma();
  posgamma_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.posgamma)
}

// optional double posgammanorm = 4 [default = 0];
bool PosGreeksData::has_posgammanorm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PosGreeksData::set_has_posgammanorm() {
  _has_bits_[0] |= 0x00000008u;
}
void PosGreeksData::clear_has_posgammanorm() {
  _has_bits_[0] &= ~0x00000008u;
}
void PosGreeksData::clear_posgammanorm() {
  posgammanorm_ = 0;
  clear_has_posgammanorm();
}
 double PosGreeksData::posgammanorm() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.posgammanorm)
  return posgammanorm_;
}
 void PosGreeksData::set_posgammanorm(double value) {
  set_has_posgammanorm();
  posgammanorm_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.posgammanorm)
}

// optional double posvega = 5 [default = 0];
bool PosGreeksData::has_posvega() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PosGreeksData::set_has_posvega() {
  _has_bits_[0] |= 0x00000010u;
}
void PosGreeksData::clear_has_posvega() {
  _has_bits_[0] &= ~0x00000010u;
}
void PosGreeksData::clear_posvega() {
  posvega_ = 0;
  clear_has_posvega();
}
 double PosGreeksData::posvega() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.posvega)
  return posvega_;
}
 void PosGreeksData::set_posvega(double value) {
  set_has_posvega();
  posvega_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.posvega)
}

// optional double posveganorm = 6 [default = 0];
bool PosGreeksData::has_posveganorm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PosGreeksData::set_has_posveganorm() {
  _has_bits_[0] |= 0x00000020u;
}
void PosGreeksData::clear_has_posveganorm() {
  _has_bits_[0] &= ~0x00000020u;
}
void PosGreeksData::clear_posveganorm() {
  posveganorm_ = 0;
  clear_has_posveganorm();
}
 double PosGreeksData::posveganorm() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.posveganorm)
  return posveganorm_;
}
 void PosGreeksData::set_posveganorm(double value) {
  set_has_posveganorm();
  posveganorm_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.posveganorm)
}

// optional double postheta = 7 [default = 0];
bool PosGreeksData::has_postheta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PosGreeksData::set_has_postheta() {
  _has_bits_[0] |= 0x00000040u;
}
void PosGreeksData::clear_has_postheta() {
  _has_bits_[0] &= ~0x00000040u;
}
void PosGreeksData::clear_postheta() {
  postheta_ = 0;
  clear_has_postheta();
}
 double PosGreeksData::postheta() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.postheta)
  return postheta_;
}
 void PosGreeksData::set_postheta(double value) {
  set_has_postheta();
  postheta_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.postheta)
}

// optional double posrho = 8 [default = 0];
bool PosGreeksData::has_posrho() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PosGreeksData::set_has_posrho() {
  _has_bits_[0] |= 0x00000080u;
}
void PosGreeksData::clear_has_posrho() {
  _has_bits_[0] &= ~0x00000080u;
}
void PosGreeksData::clear_posrho() {
  posrho_ = 0;
  clear_has_posrho();
}
 double PosGreeksData::posrho() const {
  // @@protoc_insertion_point(field_get:XT.PosGreeksData.posrho)
  return posrho_;
}
 void PosGreeksData::set_posrho(double value) {
  set_has_posrho();
  posrho_ = value;
  // @@protoc_insertion_point(field_set:XT.PosGreeksData.posrho)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuoteData::kTheopxFieldNumber;
const int QuoteData::kQuotepxFieldNumber;
const int QuoteData::kQuotebidpxFieldNumber;
const int QuoteData::kQuoteaskpxFieldNumber;
const int QuoteData::kQuotebidszFieldNumber;
const int QuoteData::kQuoteaskszFieldNumber;
const int QuoteData::kRiskpxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuoteData::QuoteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.QuoteData)
}

void QuoteData::InitAsDefaultInstance() {
}

QuoteData::QuoteData(const QuoteData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.QuoteData)
}

void QuoteData::SharedCtor() {
  _cached_size_ = 0;
  theopx_ = 0;
  quotepx_ = 0;
  quotebidpx_ = 0;
  quoteaskpx_ = 0;
  quotebidsz_ = 0;
  quoteasksz_ = 0;
  riskpx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuoteData::~QuoteData() {
  // @@protoc_insertion_point(destructor:XT.QuoteData)
  SharedDtor();
}

void QuoteData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuoteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteData_descriptor_;
}

const QuoteData& QuoteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

QuoteData* QuoteData::default_instance_ = NULL;

QuoteData* QuoteData::New(::google::protobuf::Arena* arena) const {
  QuoteData* n = new QuoteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.QuoteData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuoteData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuoteData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(theopx_, riskpx_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QuoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.QuoteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double theopx = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theopx_)));
          set_has_theopx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_quotepx;
        break;
      }

      // optional double quotepx = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_quotepx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quotepx_)));
          set_has_quotepx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_quotebidpx;
        break;
      }

      // optional double quotebidpx = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_quotebidpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quotebidpx_)));
          set_has_quotebidpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_quoteaskpx;
        break;
      }

      // optional double quoteaskpx = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_quoteaskpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quoteaskpx_)));
          set_has_quoteaskpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_quotebidsz;
        break;
      }

      // optional int32 quotebidsz = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_quotebidsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotebidsz_)));
          set_has_quotebidsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_quoteasksz;
        break;
      }

      // optional int32 quoteasksz = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_quoteasksz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteasksz_)));
          set_has_quoteasksz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_riskpx;
        break;
      }

      // optional double riskpx = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_riskpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &riskpx_)));
          set_has_riskpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.QuoteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.QuoteData)
  return false;
#undef DO_
}

void QuoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.QuoteData)
  // optional double theopx = 1 [default = 0];
  if (has_theopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->theopx(), output);
  }

  // optional double quotepx = 2 [default = 0];
  if (has_quotepx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quotepx(), output);
  }

  // optional double quotebidpx = 3 [default = 0];
  if (has_quotebidpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->quotebidpx(), output);
  }

  // optional double quoteaskpx = 4 [default = 0];
  if (has_quoteaskpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quoteaskpx(), output);
  }

  // optional int32 quotebidsz = 5 [default = 0];
  if (has_quotebidsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quotebidsz(), output);
  }

  // optional int32 quoteasksz = 6 [default = 0];
  if (has_quoteasksz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quoteasksz(), output);
  }

  // optional double riskpx = 7 [default = 0];
  if (has_riskpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->riskpx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.QuoteData)
}

::google::protobuf::uint8* QuoteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.QuoteData)
  // optional double theopx = 1 [default = 0];
  if (has_theopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->theopx(), target);
  }

  // optional double quotepx = 2 [default = 0];
  if (has_quotepx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quotepx(), target);
  }

  // optional double quotebidpx = 3 [default = 0];
  if (has_quotebidpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->quotebidpx(), target);
  }

  // optional double quoteaskpx = 4 [default = 0];
  if (has_quoteaskpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quoteaskpx(), target);
  }

  // optional int32 quotebidsz = 5 [default = 0];
  if (has_quotebidsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quotebidsz(), target);
  }

  // optional int32 quoteasksz = 6 [default = 0];
  if (has_quoteasksz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quoteasksz(), target);
  }

  // optional double riskpx = 7 [default = 0];
  if (has_riskpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->riskpx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.QuoteData)
  return target;
}

int QuoteData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.QuoteData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional double theopx = 1 [default = 0];
    if (has_theopx()) {
      total_size += 1 + 8;
    }

    // optional double quotepx = 2 [default = 0];
    if (has_quotepx()) {
      total_size += 1 + 8;
    }

    // optional double quotebidpx = 3 [default = 0];
    if (has_quotebidpx()) {
      total_size += 1 + 8;
    }

    // optional double quoteaskpx = 4 [default = 0];
    if (has_quoteaskpx()) {
      total_size += 1 + 8;
    }

    // optional int32 quotebidsz = 5 [default = 0];
    if (has_quotebidsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotebidsz());
    }

    // optional int32 quoteasksz = 6 [default = 0];
    if (has_quoteasksz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteasksz());
    }

    // optional double riskpx = 7 [default = 0];
    if (has_riskpx()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.QuoteData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QuoteData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QuoteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.QuoteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.QuoteData)
    MergeFrom(*source);
  }
}

void QuoteData::MergeFrom(const QuoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.QuoteData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_theopx()) {
      set_theopx(from.theopx());
    }
    if (from.has_quotepx()) {
      set_quotepx(from.quotepx());
    }
    if (from.has_quotebidpx()) {
      set_quotebidpx(from.quotebidpx());
    }
    if (from.has_quoteaskpx()) {
      set_quoteaskpx(from.quoteaskpx());
    }
    if (from.has_quotebidsz()) {
      set_quotebidsz(from.quotebidsz());
    }
    if (from.has_quoteasksz()) {
      set_quoteasksz(from.quoteasksz());
    }
    if (from.has_riskpx()) {
      set_riskpx(from.riskpx());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QuoteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.QuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteData::CopyFrom(const QuoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.QuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteData::IsInitialized() const {

  return true;
}

void QuoteData::Swap(QuoteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuoteData::InternalSwap(QuoteData* other) {
  std::swap(theopx_, other->theopx_);
  std::swap(quotepx_, other->quotepx_);
  std::swap(quotebidpx_, other->quotebidpx_);
  std::swap(quoteaskpx_, other->quoteaskpx_);
  std::swap(quotebidsz_, other->quotebidsz_);
  std::swap(quoteasksz_, other->quoteasksz_);
  std::swap(riskpx_, other->riskpx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuoteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteData_descriptor_;
  metadata.reflection = QuoteData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuoteData

// optional double theopx = 1 [default = 0];
bool QuoteData::has_theopx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuoteData::set_has_theopx() {
  _has_bits_[0] |= 0x00000001u;
}
void QuoteData::clear_has_theopx() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuoteData::clear_theopx() {
  theopx_ = 0;
  clear_has_theopx();
}
 double QuoteData::theopx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteData.theopx)
  return theopx_;
}
 void QuoteData::set_theopx(double value) {
  set_has_theopx();
  theopx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteData.theopx)
}

// optional double quotepx = 2 [default = 0];
bool QuoteData::has_quotepx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuoteData::set_has_quotepx() {
  _has_bits_[0] |= 0x00000002u;
}
void QuoteData::clear_has_quotepx() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuoteData::clear_quotepx() {
  quotepx_ = 0;
  clear_has_quotepx();
}
 double QuoteData::quotepx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteData.quotepx)
  return quotepx_;
}
 void QuoteData::set_quotepx(double value) {
  set_has_quotepx();
  quotepx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteData.quotepx)
}

// optional double quotebidpx = 3 [default = 0];
bool QuoteData::has_quotebidpx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QuoteData::set_has_quotebidpx() {
  _has_bits_[0] |= 0x00000004u;
}
void QuoteData::clear_has_quotebidpx() {
  _has_bits_[0] &= ~0x00000004u;
}
void QuoteData::clear_quotebidpx() {
  quotebidpx_ = 0;
  clear_has_quotebidpx();
}
 double QuoteData::quotebidpx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteData.quotebidpx)
  return quotebidpx_;
}
 void QuoteData::set_quotebidpx(double value) {
  set_has_quotebidpx();
  quotebidpx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteData.quotebidpx)
}

// optional double quoteaskpx = 4 [default = 0];
bool QuoteData::has_quoteaskpx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QuoteData::set_has_quoteaskpx() {
  _has_bits_[0] |= 0x00000008u;
}
void QuoteData::clear_has_quoteaskpx() {
  _has_bits_[0] &= ~0x00000008u;
}
void QuoteData::clear_quoteaskpx() {
  quoteaskpx_ = 0;
  clear_has_quoteaskpx();
}
 double QuoteData::quoteaskpx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteData.quoteaskpx)
  return quoteaskpx_;
}
 void QuoteData::set_quoteaskpx(double value) {
  set_has_quoteaskpx();
  quoteaskpx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteData.quoteaskpx)
}

// optional int32 quotebidsz = 5 [default = 0];
bool QuoteData::has_quotebidsz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QuoteData::set_has_quotebidsz() {
  _has_bits_[0] |= 0x00000010u;
}
void QuoteData::clear_has_quotebidsz() {
  _has_bits_[0] &= ~0x00000010u;
}
void QuoteData::clear_quotebidsz() {
  quotebidsz_ = 0;
  clear_has_quotebidsz();
}
 ::google::protobuf::int32 QuoteData::quotebidsz() const {
  // @@protoc_insertion_point(field_get:XT.QuoteData.quotebidsz)
  return quotebidsz_;
}
 void QuoteData::set_quotebidsz(::google::protobuf::int32 value) {
  set_has_quotebidsz();
  quotebidsz_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteData.quotebidsz)
}

// optional int32 quoteasksz = 6 [default = 0];
bool QuoteData::has_quoteasksz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QuoteData::set_has_quoteasksz() {
  _has_bits_[0] |= 0x00000020u;
}
void QuoteData::clear_has_quoteasksz() {
  _has_bits_[0] &= ~0x00000020u;
}
void QuoteData::clear_quoteasksz() {
  quoteasksz_ = 0;
  clear_has_quoteasksz();
}
 ::google::protobuf::int32 QuoteData::quoteasksz() const {
  // @@protoc_insertion_point(field_get:XT.QuoteData.quoteasksz)
  return quoteasksz_;
}
 void QuoteData::set_quoteasksz(::google::protobuf::int32 value) {
  set_has_quoteasksz();
  quoteasksz_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteData.quoteasksz)
}

// optional double riskpx = 7 [default = 0];
bool QuoteData::has_riskpx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QuoteData::set_has_riskpx() {
  _has_bits_[0] |= 0x00000040u;
}
void QuoteData::clear_has_riskpx() {
  _has_bits_[0] &= ~0x00000040u;
}
void QuoteData::clear_riskpx() {
  riskpx_ = 0;
  clear_has_riskpx();
}
 double QuoteData::riskpx() const {
  // @@protoc_insertion_point(field_get:XT.QuoteData.riskpx)
  return riskpx_;
}
 void QuoteData::set_riskpx(double value) {
  set_has_riskpx();
  riskpx_ = value;
  // @@protoc_insertion_point(field_set:XT.QuoteData.riskpx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VolatilityData::kImpvolbidFieldNumber;
const int VolatilityData::kImpvolaskFieldNumber;
const int VolatilityData::kImpvolmidFieldNumber;
const int VolatilityData::kQuotevolFieldNumber;
const int VolatilityData::kRiskvolFieldNumber;
const int VolatilityData::kFittedvolFieldNumber;
const int VolatilityData::kPrevsettlevolFieldNumber;
const int VolatilityData::kPrevclosevolFieldNumber;
const int VolatilityData::kSettlevolFieldNumber;
const int VolatilityData::kAvgvolFieldNumber;
const int VolatilityData::kHistvolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VolatilityData::VolatilityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.VolatilityData)
}

void VolatilityData::InitAsDefaultInstance() {
}

VolatilityData::VolatilityData(const VolatilityData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.VolatilityData)
}

void VolatilityData::SharedCtor() {
  _cached_size_ = 0;
  impvolbid_ = 0;
  impvolask_ = 0;
  impvolmid_ = 0;
  quotevol_ = 0;
  riskvol_ = 0;
  fittedvol_ = 0;
  prevsettlevol_ = 0;
  prevclosevol_ = 0;
  settlevol_ = 0;
  avgvol_ = 0;
  histvol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolatilityData::~VolatilityData() {
  // @@protoc_insertion_point(destructor:XT.VolatilityData)
  SharedDtor();
}

void VolatilityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolatilityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolatilityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolatilityData_descriptor_;
}

const VolatilityData& VolatilityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

VolatilityData* VolatilityData::default_instance_ = NULL;

VolatilityData* VolatilityData::New(::google::protobuf::Arena* arena) const {
  VolatilityData* n = new VolatilityData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VolatilityData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.VolatilityData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VolatilityData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VolatilityData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(impvolbid_, prevclosevol_);
  }
  ZR_(settlevol_, histvol_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VolatilityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.VolatilityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double impvolbid = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &impvolbid_)));
          set_has_impvolbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_impvolask;
        break;
      }

      // optional double impvolask = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_impvolask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &impvolask_)));
          set_has_impvolask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_impvolmid;
        break;
      }

      // optional double impvolmid = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_impvolmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &impvolmid_)));
          set_has_impvolmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_quotevol;
        break;
      }

      // optional double quotevol = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_quotevol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quotevol_)));
          set_has_quotevol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_riskvol;
        break;
      }

      // optional double riskvol = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_riskvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &riskvol_)));
          set_has_riskvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_fittedvol;
        break;
      }

      // optional double fittedvol = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_fittedvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fittedvol_)));
          set_has_fittedvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_prevsettlevol;
        break;
      }

      // optional double prevsettlevol = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_prevsettlevol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevsettlevol_)));
          set_has_prevsettlevol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_prevclosevol;
        break;
      }

      // optional double prevclosevol = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_prevclosevol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevclosevol_)));
          set_has_prevclosevol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_settlevol;
        break;
      }

      // optional double settlevol = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_settlevol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlevol_)));
          set_has_settlevol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_avgvol;
        break;
      }

      // optional double avgvol = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_avgvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgvol_)));
          set_has_avgvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_histvol;
        break;
      }

      // optional double histvol = 11 [default = 0];
      case 11: {
        if (tag == 89) {
         parse_histvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &histvol_)));
          set_has_histvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.VolatilityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.VolatilityData)
  return false;
#undef DO_
}

void VolatilityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.VolatilityData)
  // optional double impvolbid = 1 [default = 0];
  if (has_impvolbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->impvolbid(), output);
  }

  // optional double impvolask = 2 [default = 0];
  if (has_impvolask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->impvolask(), output);
  }

  // optional double impvolmid = 3 [default = 0];
  if (has_impvolmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->impvolmid(), output);
  }

  // optional double quotevol = 4 [default = 0];
  if (has_quotevol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quotevol(), output);
  }

  // optional double riskvol = 5 [default = 0];
  if (has_riskvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->riskvol(), output);
  }

  // optional double fittedvol = 6 [default = 0];
  if (has_fittedvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fittedvol(), output);
  }

  // optional double prevsettlevol = 7 [default = 0];
  if (has_prevsettlevol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prevsettlevol(), output);
  }

  // optional double prevclosevol = 8 [default = 0];
  if (has_prevclosevol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->prevclosevol(), output);
  }

  // optional double settlevol = 9 [default = 0];
  if (has_settlevol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->settlevol(), output);
  }

  // optional double avgvol = 10 [default = 0];
  if (has_avgvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->avgvol(), output);
  }

  // optional double histvol = 11 [default = 0];
  if (has_histvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->histvol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.VolatilityData)
}

::google::protobuf::uint8* VolatilityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.VolatilityData)
  // optional double impvolbid = 1 [default = 0];
  if (has_impvolbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->impvolbid(), target);
  }

  // optional double impvolask = 2 [default = 0];
  if (has_impvolask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->impvolask(), target);
  }

  // optional double impvolmid = 3 [default = 0];
  if (has_impvolmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->impvolmid(), target);
  }

  // optional double quotevol = 4 [default = 0];
  if (has_quotevol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quotevol(), target);
  }

  // optional double riskvol = 5 [default = 0];
  if (has_riskvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->riskvol(), target);
  }

  // optional double fittedvol = 6 [default = 0];
  if (has_fittedvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fittedvol(), target);
  }

  // optional double prevsettlevol = 7 [default = 0];
  if (has_prevsettlevol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prevsettlevol(), target);
  }

  // optional double prevclosevol = 8 [default = 0];
  if (has_prevclosevol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->prevclosevol(), target);
  }

  // optional double settlevol = 9 [default = 0];
  if (has_settlevol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->settlevol(), target);
  }

  // optional double avgvol = 10 [default = 0];
  if (has_avgvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->avgvol(), target);
  }

  // optional double histvol = 11 [default = 0];
  if (has_histvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->histvol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.VolatilityData)
  return target;
}

int VolatilityData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.VolatilityData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double impvolbid = 1 [default = 0];
    if (has_impvolbid()) {
      total_size += 1 + 8;
    }

    // optional double impvolask = 2 [default = 0];
    if (has_impvolask()) {
      total_size += 1 + 8;
    }

    // optional double impvolmid = 3 [default = 0];
    if (has_impvolmid()) {
      total_size += 1 + 8;
    }

    // optional double quotevol = 4 [default = 0];
    if (has_quotevol()) {
      total_size += 1 + 8;
    }

    // optional double riskvol = 5 [default = 0];
    if (has_riskvol()) {
      total_size += 1 + 8;
    }

    // optional double fittedvol = 6 [default = 0];
    if (has_fittedvol()) {
      total_size += 1 + 8;
    }

    // optional double prevsettlevol = 7 [default = 0];
    if (has_prevsettlevol()) {
      total_size += 1 + 8;
    }

    // optional double prevclosevol = 8 [default = 0];
    if (has_prevclosevol()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double settlevol = 9 [default = 0];
    if (has_settlevol()) {
      total_size += 1 + 8;
    }

    // optional double avgvol = 10 [default = 0];
    if (has_avgvol()) {
      total_size += 1 + 8;
    }

    // optional double histvol = 11 [default = 0];
    if (has_histvol()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolatilityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.VolatilityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VolatilityData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VolatilityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.VolatilityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.VolatilityData)
    MergeFrom(*source);
  }
}

void VolatilityData::MergeFrom(const VolatilityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.VolatilityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impvolbid()) {
      set_impvolbid(from.impvolbid());
    }
    if (from.has_impvolask()) {
      set_impvolask(from.impvolask());
    }
    if (from.has_impvolmid()) {
      set_impvolmid(from.impvolmid());
    }
    if (from.has_quotevol()) {
      set_quotevol(from.quotevol());
    }
    if (from.has_riskvol()) {
      set_riskvol(from.riskvol());
    }
    if (from.has_fittedvol()) {
      set_fittedvol(from.fittedvol());
    }
    if (from.has_prevsettlevol()) {
      set_prevsettlevol(from.prevsettlevol());
    }
    if (from.has_prevclosevol()) {
      set_prevclosevol(from.prevclosevol());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_settlevol()) {
      set_settlevol(from.settlevol());
    }
    if (from.has_avgvol()) {
      set_avgvol(from.avgvol());
    }
    if (from.has_histvol()) {
      set_histvol(from.histvol());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VolatilityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.VolatilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolatilityData::CopyFrom(const VolatilityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.VolatilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatilityData::IsInitialized() const {

  return true;
}

void VolatilityData::Swap(VolatilityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VolatilityData::InternalSwap(VolatilityData* other) {
  std::swap(impvolbid_, other->impvolbid_);
  std::swap(impvolask_, other->impvolask_);
  std::swap(impvolmid_, other->impvolmid_);
  std::swap(quotevol_, other->quotevol_);
  std::swap(riskvol_, other->riskvol_);
  std::swap(fittedvol_, other->fittedvol_);
  std::swap(prevsettlevol_, other->prevsettlevol_);
  std::swap(prevclosevol_, other->prevclosevol_);
  std::swap(settlevol_, other->settlevol_);
  std::swap(avgvol_, other->avgvol_);
  std::swap(histvol_, other->histvol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VolatilityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolatilityData_descriptor_;
  metadata.reflection = VolatilityData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VolatilityData

// optional double impvolbid = 1 [default = 0];
bool VolatilityData::has_impvolbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VolatilityData::set_has_impvolbid() {
  _has_bits_[0] |= 0x00000001u;
}
void VolatilityData::clear_has_impvolbid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VolatilityData::clear_impvolbid() {
  impvolbid_ = 0;
  clear_has_impvolbid();
}
 double VolatilityData::impvolbid() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.impvolbid)
  return impvolbid_;
}
 void VolatilityData::set_impvolbid(double value) {
  set_has_impvolbid();
  impvolbid_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.impvolbid)
}

// optional double impvolask = 2 [default = 0];
bool VolatilityData::has_impvolask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VolatilityData::set_has_impvolask() {
  _has_bits_[0] |= 0x00000002u;
}
void VolatilityData::clear_has_impvolask() {
  _has_bits_[0] &= ~0x00000002u;
}
void VolatilityData::clear_impvolask() {
  impvolask_ = 0;
  clear_has_impvolask();
}
 double VolatilityData::impvolask() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.impvolask)
  return impvolask_;
}
 void VolatilityData::set_impvolask(double value) {
  set_has_impvolask();
  impvolask_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.impvolask)
}

// optional double impvolmid = 3 [default = 0];
bool VolatilityData::has_impvolmid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VolatilityData::set_has_impvolmid() {
  _has_bits_[0] |= 0x00000004u;
}
void VolatilityData::clear_has_impvolmid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VolatilityData::clear_impvolmid() {
  impvolmid_ = 0;
  clear_has_impvolmid();
}
 double VolatilityData::impvolmid() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.impvolmid)
  return impvolmid_;
}
 void VolatilityData::set_impvolmid(double value) {
  set_has_impvolmid();
  impvolmid_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.impvolmid)
}

// optional double quotevol = 4 [default = 0];
bool VolatilityData::has_quotevol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VolatilityData::set_has_quotevol() {
  _has_bits_[0] |= 0x00000008u;
}
void VolatilityData::clear_has_quotevol() {
  _has_bits_[0] &= ~0x00000008u;
}
void VolatilityData::clear_quotevol() {
  quotevol_ = 0;
  clear_has_quotevol();
}
 double VolatilityData::quotevol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.quotevol)
  return quotevol_;
}
 void VolatilityData::set_quotevol(double value) {
  set_has_quotevol();
  quotevol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.quotevol)
}

// optional double riskvol = 5 [default = 0];
bool VolatilityData::has_riskvol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VolatilityData::set_has_riskvol() {
  _has_bits_[0] |= 0x00000010u;
}
void VolatilityData::clear_has_riskvol() {
  _has_bits_[0] &= ~0x00000010u;
}
void VolatilityData::clear_riskvol() {
  riskvol_ = 0;
  clear_has_riskvol();
}
 double VolatilityData::riskvol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.riskvol)
  return riskvol_;
}
 void VolatilityData::set_riskvol(double value) {
  set_has_riskvol();
  riskvol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.riskvol)
}

// optional double fittedvol = 6 [default = 0];
bool VolatilityData::has_fittedvol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VolatilityData::set_has_fittedvol() {
  _has_bits_[0] |= 0x00000020u;
}
void VolatilityData::clear_has_fittedvol() {
  _has_bits_[0] &= ~0x00000020u;
}
void VolatilityData::clear_fittedvol() {
  fittedvol_ = 0;
  clear_has_fittedvol();
}
 double VolatilityData::fittedvol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.fittedvol)
  return fittedvol_;
}
 void VolatilityData::set_fittedvol(double value) {
  set_has_fittedvol();
  fittedvol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.fittedvol)
}

// optional double prevsettlevol = 7 [default = 0];
bool VolatilityData::has_prevsettlevol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VolatilityData::set_has_prevsettlevol() {
  _has_bits_[0] |= 0x00000040u;
}
void VolatilityData::clear_has_prevsettlevol() {
  _has_bits_[0] &= ~0x00000040u;
}
void VolatilityData::clear_prevsettlevol() {
  prevsettlevol_ = 0;
  clear_has_prevsettlevol();
}
 double VolatilityData::prevsettlevol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.prevsettlevol)
  return prevsettlevol_;
}
 void VolatilityData::set_prevsettlevol(double value) {
  set_has_prevsettlevol();
  prevsettlevol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.prevsettlevol)
}

// optional double prevclosevol = 8 [default = 0];
bool VolatilityData::has_prevclosevol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VolatilityData::set_has_prevclosevol() {
  _has_bits_[0] |= 0x00000080u;
}
void VolatilityData::clear_has_prevclosevol() {
  _has_bits_[0] &= ~0x00000080u;
}
void VolatilityData::clear_prevclosevol() {
  prevclosevol_ = 0;
  clear_has_prevclosevol();
}
 double VolatilityData::prevclosevol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.prevclosevol)
  return prevclosevol_;
}
 void VolatilityData::set_prevclosevol(double value) {
  set_has_prevclosevol();
  prevclosevol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.prevclosevol)
}

// optional double settlevol = 9 [default = 0];
bool VolatilityData::has_settlevol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VolatilityData::set_has_settlevol() {
  _has_bits_[0] |= 0x00000100u;
}
void VolatilityData::clear_has_settlevol() {
  _has_bits_[0] &= ~0x00000100u;
}
void VolatilityData::clear_settlevol() {
  settlevol_ = 0;
  clear_has_settlevol();
}
 double VolatilityData::settlevol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.settlevol)
  return settlevol_;
}
 void VolatilityData::set_settlevol(double value) {
  set_has_settlevol();
  settlevol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.settlevol)
}

// optional double avgvol = 10 [default = 0];
bool VolatilityData::has_avgvol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VolatilityData::set_has_avgvol() {
  _has_bits_[0] |= 0x00000200u;
}
void VolatilityData::clear_has_avgvol() {
  _has_bits_[0] &= ~0x00000200u;
}
void VolatilityData::clear_avgvol() {
  avgvol_ = 0;
  clear_has_avgvol();
}
 double VolatilityData::avgvol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.avgvol)
  return avgvol_;
}
 void VolatilityData::set_avgvol(double value) {
  set_has_avgvol();
  avgvol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.avgvol)
}

// optional double histvol = 11 [default = 0];
bool VolatilityData::has_histvol() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VolatilityData::set_has_histvol() {
  _has_bits_[0] |= 0x00000400u;
}
void VolatilityData::clear_has_histvol() {
  _has_bits_[0] &= ~0x00000400u;
}
void VolatilityData::clear_histvol() {
  histvol_ = 0;
  clear_has_histvol();
}
 double VolatilityData::histvol() const {
  // @@protoc_insertion_point(field_get:XT.VolatilityData.histvol)
  return histvol_;
}
 void VolatilityData::set_histvol(double value) {
  set_has_histvol();
  histvol_ = value;
  // @@protoc_insertion_point(field_set:XT.VolatilityData.histvol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaqStatData::kNumbookupdatesFieldNumber;
const int TaqStatData::kBestszchgedFieldNumber;
const int TaqStatData::kBestpxchgedFieldNumber;
const int TaqStatData::kMidpxchgedFieldNumber;
const int TaqStatData::kSnapvolumeFieldNumber;
const int TaqStatData::kSnapamountFieldNumber;
const int TaqStatData::kSnapoichgFieldNumber;
const int TaqStatData::kSnapavgpxFieldNumber;
const int TaqStatData::kSnapbuyvolumeFieldNumber;
const int TaqStatData::kSnapsellvolumeFieldNumber;
const int TaqStatData::kSnapbsadiffFieldNumber;
const int TaqStatData::kSnapflipupsFieldNumber;
const int TaqStatData::kSnapflipdnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaqStatData::TaqStatData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.TaqStatData)
}

void TaqStatData::InitAsDefaultInstance() {
}

TaqStatData::TaqStatData(const TaqStatData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.TaqStatData)
}

void TaqStatData::SharedCtor() {
  _cached_size_ = 0;
  numbookupdates_ = 0;
  bestszchged_ = 0;
  bestpxchged_ = 0;
  midpxchged_ = 0;
  snapvolume_ = GOOGLE_LONGLONG(0);
  snapamount_ = 0;
  snapoichg_ = GOOGLE_LONGLONG(0);
  snapavgpx_ = 0;
  snapbuyvolume_ = GOOGLE_LONGLONG(0);
  snapsellvolume_ = GOOGLE_LONGLONG(0);
  snapbsadiff_ = 0;
  snapflipups_ = 0;
  snapflipdns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaqStatData::~TaqStatData() {
  // @@protoc_insertion_point(destructor:XT.TaqStatData)
  SharedDtor();
}

void TaqStatData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaqStatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaqStatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaqStatData_descriptor_;
}

const TaqStatData& TaqStatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

TaqStatData* TaqStatData::default_instance_ = NULL;

TaqStatData* TaqStatData::New(::google::protobuf::Arena* arena) const {
  TaqStatData* n = new TaqStatData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaqStatData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.TaqStatData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaqStatData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaqStatData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(numbookupdates_, snapavgpx_);
    bestpxchged_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(snapbuyvolume_, snapflipdns_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaqStatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.TaqStatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 numbookupdates = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbookupdates_)));
          set_has_numbookupdates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bestszchged;
        break;
      }

      // optional int32 bestszchged = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_bestszchged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bestszchged_)));
          set_has_bestszchged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bestpxchged;
        break;
      }

      // optional int32 bestpxchged = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_bestpxchged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bestpxchged_)));
          set_has_bestpxchged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_midpxchged;
        break;
      }

      // optional double midpxchged = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_midpxchged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &midpxchged_)));
          set_has_midpxchged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_snapvolume;
        break;
      }

      // optional int64 snapvolume = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_snapvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &snapvolume_)));
          set_has_snapvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_snapamount;
        break;
      }

      // optional double snapamount = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_snapamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snapamount_)));
          set_has_snapamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_snapoichg;
        break;
      }

      // optional int64 snapoichg = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_snapoichg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &snapoichg_)));
          set_has_snapoichg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_snapavgpx;
        break;
      }

      // optional double snapavgpx = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_snapavgpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snapavgpx_)));
          set_has_snapavgpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_snapbuyvolume;
        break;
      }

      // optional int64 snapbuyvolume = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_snapbuyvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &snapbuyvolume_)));
          set_has_snapbuyvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_snapsellvolume;
        break;
      }

      // optional int64 snapsellvolume = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_snapsellvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &snapsellvolume_)));
          set_has_snapsellvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_snapbsadiff;
        break;
      }

      // optional double snapbsadiff = 11 [default = 0];
      case 11: {
        if (tag == 89) {
         parse_snapbsadiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snapbsadiff_)));
          set_has_snapbsadiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_snapflipups;
        break;
      }

      // optional double snapflipups = 12 [default = 0];
      case 12: {
        if (tag == 97) {
         parse_snapflipups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snapflipups_)));
          set_has_snapflipups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_snapflipdns;
        break;
      }

      // optional double snapflipdns = 13 [default = 0];
      case 13: {
        if (tag == 105) {
         parse_snapflipdns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snapflipdns_)));
          set_has_snapflipdns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.TaqStatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.TaqStatData)
  return false;
#undef DO_
}

void TaqStatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.TaqStatData)
  // optional int32 numbookupdates = 1 [default = 0];
  if (has_numbookupdates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numbookupdates(), output);
  }

  // optional int32 bestszchged = 2 [default = 0];
  if (has_bestszchged()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bestszchged(), output);
  }

  // optional int32 bestpxchged = 3 [default = 0];
  if (has_bestpxchged()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bestpxchged(), output);
  }

  // optional double midpxchged = 4 [default = 0];
  if (has_midpxchged()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->midpxchged(), output);
  }

  // optional int64 snapvolume = 5 [default = 0];
  if (has_snapvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->snapvolume(), output);
  }

  // optional double snapamount = 6 [default = 0];
  if (has_snapamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->snapamount(), output);
  }

  // optional int64 snapoichg = 7 [default = 0];
  if (has_snapoichg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->snapoichg(), output);
  }

  // optional double snapavgpx = 8 [default = 0];
  if (has_snapavgpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->snapavgpx(), output);
  }

  // optional int64 snapbuyvolume = 9 [default = 0];
  if (has_snapbuyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->snapbuyvolume(), output);
  }

  // optional int64 snapsellvolume = 10 [default = 0];
  if (has_snapsellvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->snapsellvolume(), output);
  }

  // optional double snapbsadiff = 11 [default = 0];
  if (has_snapbsadiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->snapbsadiff(), output);
  }

  // optional double snapflipups = 12 [default = 0];
  if (has_snapflipups()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->snapflipups(), output);
  }

  // optional double snapflipdns = 13 [default = 0];
  if (has_snapflipdns()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->snapflipdns(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.TaqStatData)
}

::google::protobuf::uint8* TaqStatData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.TaqStatData)
  // optional int32 numbookupdates = 1 [default = 0];
  if (has_numbookupdates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numbookupdates(), target);
  }

  // optional int32 bestszchged = 2 [default = 0];
  if (has_bestszchged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bestszchged(), target);
  }

  // optional int32 bestpxchged = 3 [default = 0];
  if (has_bestpxchged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bestpxchged(), target);
  }

  // optional double midpxchged = 4 [default = 0];
  if (has_midpxchged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->midpxchged(), target);
  }

  // optional int64 snapvolume = 5 [default = 0];
  if (has_snapvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->snapvolume(), target);
  }

  // optional double snapamount = 6 [default = 0];
  if (has_snapamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->snapamount(), target);
  }

  // optional int64 snapoichg = 7 [default = 0];
  if (has_snapoichg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->snapoichg(), target);
  }

  // optional double snapavgpx = 8 [default = 0];
  if (has_snapavgpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->snapavgpx(), target);
  }

  // optional int64 snapbuyvolume = 9 [default = 0];
  if (has_snapbuyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->snapbuyvolume(), target);
  }

  // optional int64 snapsellvolume = 10 [default = 0];
  if (has_snapsellvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->snapsellvolume(), target);
  }

  // optional double snapbsadiff = 11 [default = 0];
  if (has_snapbsadiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->snapbsadiff(), target);
  }

  // optional double snapflipups = 12 [default = 0];
  if (has_snapflipups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->snapflipups(), target);
  }

  // optional double snapflipdns = 13 [default = 0];
  if (has_snapflipdns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->snapflipdns(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.TaqStatData)
  return target;
}

int TaqStatData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.TaqStatData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 numbookupdates = 1 [default = 0];
    if (has_numbookupdates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numbookupdates());
    }

    // optional int32 bestszchged = 2 [default = 0];
    if (has_bestszchged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bestszchged());
    }

    // optional int32 bestpxchged = 3 [default = 0];
    if (has_bestpxchged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bestpxchged());
    }

    // optional double midpxchged = 4 [default = 0];
    if (has_midpxchged()) {
      total_size += 1 + 8;
    }

    // optional int64 snapvolume = 5 [default = 0];
    if (has_snapvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->snapvolume());
    }

    // optional double snapamount = 6 [default = 0];
    if (has_snapamount()) {
      total_size += 1 + 8;
    }

    // optional int64 snapoichg = 7 [default = 0];
    if (has_snapoichg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->snapoichg());
    }

    // optional double snapavgpx = 8 [default = 0];
    if (has_snapavgpx()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int64 snapbuyvolume = 9 [default = 0];
    if (has_snapbuyvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->snapbuyvolume());
    }

    // optional int64 snapsellvolume = 10 [default = 0];
    if (has_snapsellvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->snapsellvolume());
    }

    // optional double snapbsadiff = 11 [default = 0];
    if (has_snapbsadiff()) {
      total_size += 1 + 8;
    }

    // optional double snapflipups = 12 [default = 0];
    if (has_snapflipups()) {
      total_size += 1 + 8;
    }

    // optional double snapflipdns = 13 [default = 0];
    if (has_snapflipdns()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaqStatData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.TaqStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaqStatData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaqStatData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.TaqStatData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.TaqStatData)
    MergeFrom(*source);
  }
}

void TaqStatData::MergeFrom(const TaqStatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.TaqStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numbookupdates()) {
      set_numbookupdates(from.numbookupdates());
    }
    if (from.has_bestszchged()) {
      set_bestszchged(from.bestszchged());
    }
    if (from.has_bestpxchged()) {
      set_bestpxchged(from.bestpxchged());
    }
    if (from.has_midpxchged()) {
      set_midpxchged(from.midpxchged());
    }
    if (from.has_snapvolume()) {
      set_snapvolume(from.snapvolume());
    }
    if (from.has_snapamount()) {
      set_snapamount(from.snapamount());
    }
    if (from.has_snapoichg()) {
      set_snapoichg(from.snapoichg());
    }
    if (from.has_snapavgpx()) {
      set_snapavgpx(from.snapavgpx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snapbuyvolume()) {
      set_snapbuyvolume(from.snapbuyvolume());
    }
    if (from.has_snapsellvolume()) {
      set_snapsellvolume(from.snapsellvolume());
    }
    if (from.has_snapbsadiff()) {
      set_snapbsadiff(from.snapbsadiff());
    }
    if (from.has_snapflipups()) {
      set_snapflipups(from.snapflipups());
    }
    if (from.has_snapflipdns()) {
      set_snapflipdns(from.snapflipdns());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TaqStatData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.TaqStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaqStatData::CopyFrom(const TaqStatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.TaqStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaqStatData::IsInitialized() const {

  return true;
}

void TaqStatData::Swap(TaqStatData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaqStatData::InternalSwap(TaqStatData* other) {
  std::swap(numbookupdates_, other->numbookupdates_);
  std::swap(bestszchged_, other->bestszchged_);
  std::swap(bestpxchged_, other->bestpxchged_);
  std::swap(midpxchged_, other->midpxchged_);
  std::swap(snapvolume_, other->snapvolume_);
  std::swap(snapamount_, other->snapamount_);
  std::swap(snapoichg_, other->snapoichg_);
  std::swap(snapavgpx_, other->snapavgpx_);
  std::swap(snapbuyvolume_, other->snapbuyvolume_);
  std::swap(snapsellvolume_, other->snapsellvolume_);
  std::swap(snapbsadiff_, other->snapbsadiff_);
  std::swap(snapflipups_, other->snapflipups_);
  std::swap(snapflipdns_, other->snapflipdns_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaqStatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaqStatData_descriptor_;
  metadata.reflection = TaqStatData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaqStatData

// optional int32 numbookupdates = 1 [default = 0];
bool TaqStatData::has_numbookupdates() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaqStatData::set_has_numbookupdates() {
  _has_bits_[0] |= 0x00000001u;
}
void TaqStatData::clear_has_numbookupdates() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaqStatData::clear_numbookupdates() {
  numbookupdates_ = 0;
  clear_has_numbookupdates();
}
 ::google::protobuf::int32 TaqStatData::numbookupdates() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.numbookupdates)
  return numbookupdates_;
}
 void TaqStatData::set_numbookupdates(::google::protobuf::int32 value) {
  set_has_numbookupdates();
  numbookupdates_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.numbookupdates)
}

// optional int32 bestszchged = 2 [default = 0];
bool TaqStatData::has_bestszchged() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaqStatData::set_has_bestszchged() {
  _has_bits_[0] |= 0x00000002u;
}
void TaqStatData::clear_has_bestszchged() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaqStatData::clear_bestszchged() {
  bestszchged_ = 0;
  clear_has_bestszchged();
}
 ::google::protobuf::int32 TaqStatData::bestszchged() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.bestszchged)
  return bestszchged_;
}
 void TaqStatData::set_bestszchged(::google::protobuf::int32 value) {
  set_has_bestszchged();
  bestszchged_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.bestszchged)
}

// optional int32 bestpxchged = 3 [default = 0];
bool TaqStatData::has_bestpxchged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaqStatData::set_has_bestpxchged() {
  _has_bits_[0] |= 0x00000004u;
}
void TaqStatData::clear_has_bestpxchged() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaqStatData::clear_bestpxchged() {
  bestpxchged_ = 0;
  clear_has_bestpxchged();
}
 ::google::protobuf::int32 TaqStatData::bestpxchged() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.bestpxchged)
  return bestpxchged_;
}
 void TaqStatData::set_bestpxchged(::google::protobuf::int32 value) {
  set_has_bestpxchged();
  bestpxchged_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.bestpxchged)
}

// optional double midpxchged = 4 [default = 0];
bool TaqStatData::has_midpxchged() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TaqStatData::set_has_midpxchged() {
  _has_bits_[0] |= 0x00000008u;
}
void TaqStatData::clear_has_midpxchged() {
  _has_bits_[0] &= ~0x00000008u;
}
void TaqStatData::clear_midpxchged() {
  midpxchged_ = 0;
  clear_has_midpxchged();
}
 double TaqStatData::midpxchged() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.midpxchged)
  return midpxchged_;
}
 void TaqStatData::set_midpxchged(double value) {
  set_has_midpxchged();
  midpxchged_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.midpxchged)
}

// optional int64 snapvolume = 5 [default = 0];
bool TaqStatData::has_snapvolume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TaqStatData::set_has_snapvolume() {
  _has_bits_[0] |= 0x00000010u;
}
void TaqStatData::clear_has_snapvolume() {
  _has_bits_[0] &= ~0x00000010u;
}
void TaqStatData::clear_snapvolume() {
  snapvolume_ = GOOGLE_LONGLONG(0);
  clear_has_snapvolume();
}
 ::google::protobuf::int64 TaqStatData::snapvolume() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapvolume)
  return snapvolume_;
}
 void TaqStatData::set_snapvolume(::google::protobuf::int64 value) {
  set_has_snapvolume();
  snapvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapvolume)
}

// optional double snapamount = 6 [default = 0];
bool TaqStatData::has_snapamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TaqStatData::set_has_snapamount() {
  _has_bits_[0] |= 0x00000020u;
}
void TaqStatData::clear_has_snapamount() {
  _has_bits_[0] &= ~0x00000020u;
}
void TaqStatData::clear_snapamount() {
  snapamount_ = 0;
  clear_has_snapamount();
}
 double TaqStatData::snapamount() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapamount)
  return snapamount_;
}
 void TaqStatData::set_snapamount(double value) {
  set_has_snapamount();
  snapamount_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapamount)
}

// optional int64 snapoichg = 7 [default = 0];
bool TaqStatData::has_snapoichg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TaqStatData::set_has_snapoichg() {
  _has_bits_[0] |= 0x00000040u;
}
void TaqStatData::clear_has_snapoichg() {
  _has_bits_[0] &= ~0x00000040u;
}
void TaqStatData::clear_snapoichg() {
  snapoichg_ = GOOGLE_LONGLONG(0);
  clear_has_snapoichg();
}
 ::google::protobuf::int64 TaqStatData::snapoichg() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapoichg)
  return snapoichg_;
}
 void TaqStatData::set_snapoichg(::google::protobuf::int64 value) {
  set_has_snapoichg();
  snapoichg_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapoichg)
}

// optional double snapavgpx = 8 [default = 0];
bool TaqStatData::has_snapavgpx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TaqStatData::set_has_snapavgpx() {
  _has_bits_[0] |= 0x00000080u;
}
void TaqStatData::clear_has_snapavgpx() {
  _has_bits_[0] &= ~0x00000080u;
}
void TaqStatData::clear_snapavgpx() {
  snapavgpx_ = 0;
  clear_has_snapavgpx();
}
 double TaqStatData::snapavgpx() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapavgpx)
  return snapavgpx_;
}
 void TaqStatData::set_snapavgpx(double value) {
  set_has_snapavgpx();
  snapavgpx_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapavgpx)
}

// optional int64 snapbuyvolume = 9 [default = 0];
bool TaqStatData::has_snapbuyvolume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TaqStatData::set_has_snapbuyvolume() {
  _has_bits_[0] |= 0x00000100u;
}
void TaqStatData::clear_has_snapbuyvolume() {
  _has_bits_[0] &= ~0x00000100u;
}
void TaqStatData::clear_snapbuyvolume() {
  snapbuyvolume_ = GOOGLE_LONGLONG(0);
  clear_has_snapbuyvolume();
}
 ::google::protobuf::int64 TaqStatData::snapbuyvolume() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapbuyvolume)
  return snapbuyvolume_;
}
 void TaqStatData::set_snapbuyvolume(::google::protobuf::int64 value) {
  set_has_snapbuyvolume();
  snapbuyvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapbuyvolume)
}

// optional int64 snapsellvolume = 10 [default = 0];
bool TaqStatData::has_snapsellvolume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TaqStatData::set_has_snapsellvolume() {
  _has_bits_[0] |= 0x00000200u;
}
void TaqStatData::clear_has_snapsellvolume() {
  _has_bits_[0] &= ~0x00000200u;
}
void TaqStatData::clear_snapsellvolume() {
  snapsellvolume_ = GOOGLE_LONGLONG(0);
  clear_has_snapsellvolume();
}
 ::google::protobuf::int64 TaqStatData::snapsellvolume() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapsellvolume)
  return snapsellvolume_;
}
 void TaqStatData::set_snapsellvolume(::google::protobuf::int64 value) {
  set_has_snapsellvolume();
  snapsellvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapsellvolume)
}

// optional double snapbsadiff = 11 [default = 0];
bool TaqStatData::has_snapbsadiff() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TaqStatData::set_has_snapbsadiff() {
  _has_bits_[0] |= 0x00000400u;
}
void TaqStatData::clear_has_snapbsadiff() {
  _has_bits_[0] &= ~0x00000400u;
}
void TaqStatData::clear_snapbsadiff() {
  snapbsadiff_ = 0;
  clear_has_snapbsadiff();
}
 double TaqStatData::snapbsadiff() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapbsadiff)
  return snapbsadiff_;
}
 void TaqStatData::set_snapbsadiff(double value) {
  set_has_snapbsadiff();
  snapbsadiff_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapbsadiff)
}

// optional double snapflipups = 12 [default = 0];
bool TaqStatData::has_snapflipups() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TaqStatData::set_has_snapflipups() {
  _has_bits_[0] |= 0x00000800u;
}
void TaqStatData::clear_has_snapflipups() {
  _has_bits_[0] &= ~0x00000800u;
}
void TaqStatData::clear_snapflipups() {
  snapflipups_ = 0;
  clear_has_snapflipups();
}
 double TaqStatData::snapflipups() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapflipups)
  return snapflipups_;
}
 void TaqStatData::set_snapflipups(double value) {
  set_has_snapflipups();
  snapflipups_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapflipups)
}

// optional double snapflipdns = 13 [default = 0];
bool TaqStatData::has_snapflipdns() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TaqStatData::set_has_snapflipdns() {
  _has_bits_[0] |= 0x00001000u;
}
void TaqStatData::clear_has_snapflipdns() {
  _has_bits_[0] &= ~0x00001000u;
}
void TaqStatData::clear_snapflipdns() {
  snapflipdns_ = 0;
  clear_has_snapflipdns();
}
 double TaqStatData::snapflipdns() const {
  // @@protoc_insertion_point(field_get:XT.TaqStatData.snapflipdns)
  return snapflipdns_;
}
 void TaqStatData::set_snapflipdns(double value) {
  set_has_snapflipdns();
  snapflipdns_ = value;
  // @@protoc_insertion_point(field_set:XT.TaqStatData.snapflipdns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XpStatData::kNetposFieldNumber;
const int XpStatData::kNetposprevFieldNumber;
const int XpStatData::kNetposnewFieldNumber;
const int XpStatData::kRpxpnlFieldNumber;
const int XpStatData::kRpnlFieldNumber;
const int XpStatData::kUpxpnlFieldNumber;
const int XpStatData::kUpnlFieldNumber;
const int XpStatData::kRpxpnlsessionFieldNumber;
const int XpStatData::kRpnlsessionFieldNumber;
const int XpStatData::kUpxpnlsessionFieldNumber;
const int XpStatData::kUpnlsessionFieldNumber;
const int XpStatData::kUtheopxpnlFieldNumber;
const int XpStatData::kUtheopnlFieldNumber;
const int XpStatData::kUriskpxpnlFieldNumber;
const int XpStatData::kUriskpnlFieldNumber;
const int XpStatData::kUtheopxpnlsessionFieldNumber;
const int XpStatData::kUtheopnlsessionFieldNumber;
const int XpStatData::kUriskpxpnlsessionFieldNumber;
const int XpStatData::kUriskpnlsessionFieldNumber;
const int XpStatData::kBuyordersFieldNumber;
const int XpStatData::kBuyszFieldNumber;
const int XpStatData::kSellordersFieldNumber;
const int XpStatData::kSellszFieldNumber;
const int XpStatData::kBuyordersopenytdFieldNumber;
const int XpStatData::kBuyszopenytdFieldNumber;
const int XpStatData::kSellordersopenytdFieldNumber;
const int XpStatData::kSellszopenytdFieldNumber;
const int XpStatData::kBuyorderscloseytdFieldNumber;
const int XpStatData::kBuyszcloseytdFieldNumber;
const int XpStatData::kSellorderscloseytdFieldNumber;
const int XpStatData::kSellszcloseytdFieldNumber;
const int XpStatData::kBuyordersopentdyFieldNumber;
const int XpStatData::kBuyszopentdyFieldNumber;
const int XpStatData::kSellordersopentdyFieldNumber;
const int XpStatData::kSellszopentdyFieldNumber;
const int XpStatData::kBuyordersclosetdyFieldNumber;
const int XpStatData::kBuyszclosetdyFieldNumber;
const int XpStatData::kSellordersclosetdyFieldNumber;
const int XpStatData::kSellszclosetdyFieldNumber;
const int XpStatData::kOrderssentFieldNumber;
const int XpStatData::kOrderscxledFieldNumber;
const int XpStatData::kQuotessentFieldNumber;
const int XpStatData::kQuotescxledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XpStatData::XpStatData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.XpStatData)
}

void XpStatData::InitAsDefaultInstance() {
}

XpStatData::XpStatData(const XpStatData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.XpStatData)
}

void XpStatData::SharedCtor() {
  _cached_size_ = 0;
  netpos_ = 0;
  netposprev_ = 0;
  netposnew_ = 0;
  rpxpnl_ = 0;
  rpnl_ = 0;
  upxpnl_ = 0;
  upnl_ = 0;
  rpxpnlsession_ = 0;
  rpnlsession_ = 0;
  upxpnlsession_ = 0;
  upnlsession_ = 0;
  utheopxpnl_ = 0;
  utheopnl_ = 0;
  uriskpxpnl_ = 0;
  uriskpnl_ = 0;
  utheopxpnlsession_ = 0;
  utheopnlsession_ = 0;
  uriskpxpnlsession_ = 0;
  uriskpnlsession_ = 0;
  buyorders_ = 0;
  buysz_ = 0;
  sellorders_ = 0;
  sellsz_ = 0;
  buyordersopenytd_ = 0;
  buyszopenytd_ = 0;
  sellordersopenytd_ = 0;
  sellszopenytd_ = 0;
  buyorderscloseytd_ = 0;
  buyszcloseytd_ = 0;
  sellorderscloseytd_ = 0;
  sellszcloseytd_ = 0;
  buyordersopentdy_ = 0;
  buyszopentdy_ = 0;
  sellordersopentdy_ = 0;
  sellszopentdy_ = 0;
  buyordersclosetdy_ = 0;
  buyszclosetdy_ = 0;
  sellordersclosetdy_ = 0;
  sellszclosetdy_ = 0;
  orderssent_ = 0;
  orderscxled_ = 0;
  quotessent_ = 0;
  quotescxled_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XpStatData::~XpStatData() {
  // @@protoc_insertion_point(destructor:XT.XpStatData)
  SharedDtor();
}

void XpStatData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XpStatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XpStatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XpStatData_descriptor_;
}

const XpStatData& XpStatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

XpStatData* XpStatData::default_instance_ = NULL;

XpStatData* XpStatData::New(::google::protobuf::Arena* arena) const {
  XpStatData* n = new XpStatData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XpStatData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.XpStatData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(XpStatData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<XpStatData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(netpos_, rpxpnlsession_);
    netposnew_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(rpnlsession_, upnlsession_);
    ZR_(utheopxpnl_, utheopxpnlsession_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(utheopnlsession_, buyordersopenytd_);
    buyorders_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(buyszopenytd_, buyordersopentdy_);
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(buyszopentdy_, orderssent_);
  }
  ZR_(orderscxled_, quotescxled_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool XpStatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.XpStatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 netpos = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netpos_)));
          set_has_netpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_netposprev;
        break;
      }

      // optional int32 netposprev = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_netposprev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netposprev_)));
          set_has_netposprev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netposnew;
        break;
      }

      // optional int32 netposnew = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_netposnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netposnew_)));
          set_has_netposnew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rpxpnl;
        break;
      }

      // optional double rpxpnl = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_rpxpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpxpnl_)));
          set_has_rpxpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_rpnl;
        break;
      }

      // optional double rpnl = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_rpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpnl_)));
          set_has_rpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_upxpnl;
        break;
      }

      // optional double upxpnl = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_upxpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upxpnl_)));
          set_has_upxpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_upnl;
        break;
      }

      // optional double upnl = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_upnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upnl_)));
          set_has_upnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_rpxpnlsession;
        break;
      }

      // optional double rpxpnlsession = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_rpxpnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpxpnlsession_)));
          set_has_rpxpnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_rpnlsession;
        break;
      }

      // optional double rpnlsession = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_rpnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpnlsession_)));
          set_has_rpnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_upxpnlsession;
        break;
      }

      // optional double upxpnlsession = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_upxpnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upxpnlsession_)));
          set_has_upxpnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_upnlsession;
        break;
      }

      // optional double upnlsession = 11 [default = 0];
      case 11: {
        if (tag == 89) {
         parse_upnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upnlsession_)));
          set_has_upnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_utheopxpnl;
        break;
      }

      // optional double utheopxpnl = 12 [default = 0];
      case 12: {
        if (tag == 97) {
         parse_utheopxpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utheopxpnl_)));
          set_has_utheopxpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_utheopnl;
        break;
      }

      // optional double utheopnl = 13 [default = 0];
      case 13: {
        if (tag == 105) {
         parse_utheopnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utheopnl_)));
          set_has_utheopnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_uriskpxpnl;
        break;
      }

      // optional double uriskpxpnl = 14 [default = 0];
      case 14: {
        if (tag == 113) {
         parse_uriskpxpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uriskpxpnl_)));
          set_has_uriskpxpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_uriskpnl;
        break;
      }

      // optional double uriskpnl = 15 [default = 0];
      case 15: {
        if (tag == 121) {
         parse_uriskpnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uriskpnl_)));
          set_has_uriskpnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_utheopxpnlsession;
        break;
      }

      // optional double utheopxpnlsession = 16 [default = 0];
      case 16: {
        if (tag == 129) {
         parse_utheopxpnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utheopxpnlsession_)));
          set_has_utheopxpnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_utheopnlsession;
        break;
      }

      // optional double utheopnlsession = 17 [default = 0];
      case 17: {
        if (tag == 137) {
         parse_utheopnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utheopnlsession_)));
          set_has_utheopnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_uriskpxpnlsession;
        break;
      }

      // optional double uriskpxpnlsession = 18 [default = 0];
      case 18: {
        if (tag == 145) {
         parse_uriskpxpnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uriskpxpnlsession_)));
          set_has_uriskpxpnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_uriskpnlsession;
        break;
      }

      // optional double uriskpnlsession = 19 [default = 0];
      case 19: {
        if (tag == 153) {
         parse_uriskpnlsession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uriskpnlsession_)));
          set_has_uriskpnlsession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_buyorders;
        break;
      }

      // optional int32 buyorders = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_buyorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyorders_)));
          set_has_buyorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_buysz;
        break;
      }

      // optional int32 buysz = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_buysz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buysz_)));
          set_has_buysz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_sellorders;
        break;
      }

      // optional int32 sellorders = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_sellorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellorders_)));
          set_has_sellorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_sellsz;
        break;
      }

      // optional int32 sellsz = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_sellsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellsz_)));
          set_has_sellsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_buyordersopenytd;
        break;
      }

      // optional int32 buyordersopenytd = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_buyordersopenytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyordersopenytd_)));
          set_has_buyordersopenytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_buyszopenytd;
        break;
      }

      // optional int32 buyszopenytd = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_buyszopenytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyszopenytd_)));
          set_has_buyszopenytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_sellordersopenytd;
        break;
      }

      // optional int32 sellordersopenytd = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_sellordersopenytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellordersopenytd_)));
          set_has_sellordersopenytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_sellszopenytd;
        break;
      }

      // optional int32 sellszopenytd = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_sellszopenytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellszopenytd_)));
          set_has_sellszopenytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_buyorderscloseytd;
        break;
      }

      // optional int32 buyorderscloseytd = 29 [default = 0];
      case 29: {
        if (tag == 232) {
         parse_buyorderscloseytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyorderscloseytd_)));
          set_has_buyorderscloseytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_buyszcloseytd;
        break;
      }

      // optional int32 buyszcloseytd = 30 [default = 0];
      case 30: {
        if (tag == 240) {
         parse_buyszcloseytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyszcloseytd_)));
          set_has_buyszcloseytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_sellorderscloseytd;
        break;
      }

      // optional int32 sellorderscloseytd = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_sellorderscloseytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellorderscloseytd_)));
          set_has_sellorderscloseytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_sellszcloseytd;
        break;
      }

      // optional int32 sellszcloseytd = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_sellszcloseytd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellszcloseytd_)));
          set_has_sellszcloseytd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_buyordersopentdy;
        break;
      }

      // optional int32 buyordersopentdy = 33 [default = 0];
      case 33: {
        if (tag == 264) {
         parse_buyordersopentdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyordersopentdy_)));
          set_has_buyordersopentdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_buyszopentdy;
        break;
      }

      // optional int32 buyszopentdy = 34 [default = 0];
      case 34: {
        if (tag == 272) {
         parse_buyszopentdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyszopentdy_)));
          set_has_buyszopentdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_sellordersopentdy;
        break;
      }

      // optional int32 sellordersopentdy = 35 [default = 0];
      case 35: {
        if (tag == 280) {
         parse_sellordersopentdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellordersopentdy_)));
          set_has_sellordersopentdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_sellszopentdy;
        break;
      }

      // optional int32 sellszopentdy = 36 [default = 0];
      case 36: {
        if (tag == 288) {
         parse_sellszopentdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellszopentdy_)));
          set_has_sellszopentdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_buyordersclosetdy;
        break;
      }

      // optional int32 buyordersclosetdy = 37 [default = 0];
      case 37: {
        if (tag == 296) {
         parse_buyordersclosetdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyordersclosetdy_)));
          set_has_buyordersclosetdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_buyszclosetdy;
        break;
      }

      // optional int32 buyszclosetdy = 38 [default = 0];
      case 38: {
        if (tag == 304) {
         parse_buyszclosetdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyszclosetdy_)));
          set_has_buyszclosetdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_sellordersclosetdy;
        break;
      }

      // optional int32 sellordersclosetdy = 39 [default = 0];
      case 39: {
        if (tag == 312) {
         parse_sellordersclosetdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellordersclosetdy_)));
          set_has_sellordersclosetdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_sellszclosetdy;
        break;
      }

      // optional int32 sellszclosetdy = 40 [default = 0];
      case 40: {
        if (tag == 320) {
         parse_sellszclosetdy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellszclosetdy_)));
          set_has_sellszclosetdy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_orderssent;
        break;
      }

      // optional int32 orderssent = 41 [default = 0];
      case 41: {
        if (tag == 328) {
         parse_orderssent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderssent_)));
          set_has_orderssent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_orderscxled;
        break;
      }

      // optional int32 orderscxled = 42 [default = 0];
      case 42: {
        if (tag == 336) {
         parse_orderscxled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderscxled_)));
          set_has_orderscxled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_quotessent;
        break;
      }

      // optional int32 quotessent = 43 [default = 0];
      case 43: {
        if (tag == 344) {
         parse_quotessent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotessent_)));
          set_has_quotessent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_quotescxled;
        break;
      }

      // optional int32 quotescxled = 44 [default = 0];
      case 44: {
        if (tag == 352) {
         parse_quotescxled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotescxled_)));
          set_has_quotescxled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.XpStatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.XpStatData)
  return false;
#undef DO_
}

void XpStatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.XpStatData)
  // optional int32 netpos = 1 [default = 0];
  if (has_netpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->netpos(), output);
  }

  // optional int32 netposprev = 2 [default = 0];
  if (has_netposprev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->netposprev(), output);
  }

  // optional int32 netposnew = 3 [default = 0];
  if (has_netposnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->netposnew(), output);
  }

  // optional double rpxpnl = 4 [default = 0];
  if (has_rpxpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rpxpnl(), output);
  }

  // optional double rpnl = 5 [default = 0];
  if (has_rpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rpnl(), output);
  }

  // optional double upxpnl = 6 [default = 0];
  if (has_upxpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->upxpnl(), output);
  }

  // optional double upnl = 7 [default = 0];
  if (has_upnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->upnl(), output);
  }

  // optional double rpxpnlsession = 8 [default = 0];
  if (has_rpxpnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rpxpnlsession(), output);
  }

  // optional double rpnlsession = 9 [default = 0];
  if (has_rpnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->rpnlsession(), output);
  }

  // optional double upxpnlsession = 10 [default = 0];
  if (has_upxpnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->upxpnlsession(), output);
  }

  // optional double upnlsession = 11 [default = 0];
  if (has_upnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->upnlsession(), output);
  }

  // optional double utheopxpnl = 12 [default = 0];
  if (has_utheopxpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->utheopxpnl(), output);
  }

  // optional double utheopnl = 13 [default = 0];
  if (has_utheopnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->utheopnl(), output);
  }

  // optional double uriskpxpnl = 14 [default = 0];
  if (has_uriskpxpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->uriskpxpnl(), output);
  }

  // optional double uriskpnl = 15 [default = 0];
  if (has_uriskpnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->uriskpnl(), output);
  }

  // optional double utheopxpnlsession = 16 [default = 0];
  if (has_utheopxpnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->utheopxpnlsession(), output);
  }

  // optional double utheopnlsession = 17 [default = 0];
  if (has_utheopnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->utheopnlsession(), output);
  }

  // optional double uriskpxpnlsession = 18 [default = 0];
  if (has_uriskpxpnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->uriskpxpnlsession(), output);
  }

  // optional double uriskpnlsession = 19 [default = 0];
  if (has_uriskpnlsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->uriskpnlsession(), output);
  }

  // optional int32 buyorders = 21 [default = 0];
  if (has_buyorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->buyorders(), output);
  }

  // optional int32 buysz = 22 [default = 0];
  if (has_buysz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->buysz(), output);
  }

  // optional int32 sellorders = 23 [default = 0];
  if (has_sellorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sellorders(), output);
  }

  // optional int32 sellsz = 24 [default = 0];
  if (has_sellsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->sellsz(), output);
  }

  // optional int32 buyordersopenytd = 25 [default = 0];
  if (has_buyordersopenytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->buyordersopenytd(), output);
  }

  // optional int32 buyszopenytd = 26 [default = 0];
  if (has_buyszopenytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->buyszopenytd(), output);
  }

  // optional int32 sellordersopenytd = 27 [default = 0];
  if (has_sellordersopenytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->sellordersopenytd(), output);
  }

  // optional int32 sellszopenytd = 28 [default = 0];
  if (has_sellszopenytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->sellszopenytd(), output);
  }

  // optional int32 buyorderscloseytd = 29 [default = 0];
  if (has_buyorderscloseytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->buyorderscloseytd(), output);
  }

  // optional int32 buyszcloseytd = 30 [default = 0];
  if (has_buyszcloseytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->buyszcloseytd(), output);
  }

  // optional int32 sellorderscloseytd = 31 [default = 0];
  if (has_sellorderscloseytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->sellorderscloseytd(), output);
  }

  // optional int32 sellszcloseytd = 32 [default = 0];
  if (has_sellszcloseytd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->sellszcloseytd(), output);
  }

  // optional int32 buyordersopentdy = 33 [default = 0];
  if (has_buyordersopentdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->buyordersopentdy(), output);
  }

  // optional int32 buyszopentdy = 34 [default = 0];
  if (has_buyszopentdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->buyszopentdy(), output);
  }

  // optional int32 sellordersopentdy = 35 [default = 0];
  if (has_sellordersopentdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->sellordersopentdy(), output);
  }

  // optional int32 sellszopentdy = 36 [default = 0];
  if (has_sellszopentdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->sellszopentdy(), output);
  }

  // optional int32 buyordersclosetdy = 37 [default = 0];
  if (has_buyordersclosetdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->buyordersclosetdy(), output);
  }

  // optional int32 buyszclosetdy = 38 [default = 0];
  if (has_buyszclosetdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->buyszclosetdy(), output);
  }

  // optional int32 sellordersclosetdy = 39 [default = 0];
  if (has_sellordersclosetdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->sellordersclosetdy(), output);
  }

  // optional int32 sellszclosetdy = 40 [default = 0];
  if (has_sellszclosetdy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->sellszclosetdy(), output);
  }

  // optional int32 orderssent = 41 [default = 0];
  if (has_orderssent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->orderssent(), output);
  }

  // optional int32 orderscxled = 42 [default = 0];
  if (has_orderscxled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->orderscxled(), output);
  }

  // optional int32 quotessent = 43 [default = 0];
  if (has_quotessent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->quotessent(), output);
  }

  // optional int32 quotescxled = 44 [default = 0];
  if (has_quotescxled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->quotescxled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.XpStatData)
}

::google::protobuf::uint8* XpStatData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.XpStatData)
  // optional int32 netpos = 1 [default = 0];
  if (has_netpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->netpos(), target);
  }

  // optional int32 netposprev = 2 [default = 0];
  if (has_netposprev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->netposprev(), target);
  }

  // optional int32 netposnew = 3 [default = 0];
  if (has_netposnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->netposnew(), target);
  }

  // optional double rpxpnl = 4 [default = 0];
  if (has_rpxpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rpxpnl(), target);
  }

  // optional double rpnl = 5 [default = 0];
  if (has_rpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rpnl(), target);
  }

  // optional double upxpnl = 6 [default = 0];
  if (has_upxpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->upxpnl(), target);
  }

  // optional double upnl = 7 [default = 0];
  if (has_upnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->upnl(), target);
  }

  // optional double rpxpnlsession = 8 [default = 0];
  if (has_rpxpnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rpxpnlsession(), target);
  }

  // optional double rpnlsession = 9 [default = 0];
  if (has_rpnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->rpnlsession(), target);
  }

  // optional double upxpnlsession = 10 [default = 0];
  if (has_upxpnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->upxpnlsession(), target);
  }

  // optional double upnlsession = 11 [default = 0];
  if (has_upnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->upnlsession(), target);
  }

  // optional double utheopxpnl = 12 [default = 0];
  if (has_utheopxpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->utheopxpnl(), target);
  }

  // optional double utheopnl = 13 [default = 0];
  if (has_utheopnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->utheopnl(), target);
  }

  // optional double uriskpxpnl = 14 [default = 0];
  if (has_uriskpxpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->uriskpxpnl(), target);
  }

  // optional double uriskpnl = 15 [default = 0];
  if (has_uriskpnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->uriskpnl(), target);
  }

  // optional double utheopxpnlsession = 16 [default = 0];
  if (has_utheopxpnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->utheopxpnlsession(), target);
  }

  // optional double utheopnlsession = 17 [default = 0];
  if (has_utheopnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->utheopnlsession(), target);
  }

  // optional double uriskpxpnlsession = 18 [default = 0];
  if (has_uriskpxpnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->uriskpxpnlsession(), target);
  }

  // optional double uriskpnlsession = 19 [default = 0];
  if (has_uriskpnlsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->uriskpnlsession(), target);
  }

  // optional int32 buyorders = 21 [default = 0];
  if (has_buyorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->buyorders(), target);
  }

  // optional int32 buysz = 22 [default = 0];
  if (has_buysz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->buysz(), target);
  }

  // optional int32 sellorders = 23 [default = 0];
  if (has_sellorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->sellorders(), target);
  }

  // optional int32 sellsz = 24 [default = 0];
  if (has_sellsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->sellsz(), target);
  }

  // optional int32 buyordersopenytd = 25 [default = 0];
  if (has_buyordersopenytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->buyordersopenytd(), target);
  }

  // optional int32 buyszopenytd = 26 [default = 0];
  if (has_buyszopenytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->buyszopenytd(), target);
  }

  // optional int32 sellordersopenytd = 27 [default = 0];
  if (has_sellordersopenytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->sellordersopenytd(), target);
  }

  // optional int32 sellszopenytd = 28 [default = 0];
  if (has_sellszopenytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->sellszopenytd(), target);
  }

  // optional int32 buyorderscloseytd = 29 [default = 0];
  if (has_buyorderscloseytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->buyorderscloseytd(), target);
  }

  // optional int32 buyszcloseytd = 30 [default = 0];
  if (has_buyszcloseytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->buyszcloseytd(), target);
  }

  // optional int32 sellorderscloseytd = 31 [default = 0];
  if (has_sellorderscloseytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->sellorderscloseytd(), target);
  }

  // optional int32 sellszcloseytd = 32 [default = 0];
  if (has_sellszcloseytd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->sellszcloseytd(), target);
  }

  // optional int32 buyordersopentdy = 33 [default = 0];
  if (has_buyordersopentdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->buyordersopentdy(), target);
  }

  // optional int32 buyszopentdy = 34 [default = 0];
  if (has_buyszopentdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->buyszopentdy(), target);
  }

  // optional int32 sellordersopentdy = 35 [default = 0];
  if (has_sellordersopentdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->sellordersopentdy(), target);
  }

  // optional int32 sellszopentdy = 36 [default = 0];
  if (has_sellszopentdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->sellszopentdy(), target);
  }

  // optional int32 buyordersclosetdy = 37 [default = 0];
  if (has_buyordersclosetdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->buyordersclosetdy(), target);
  }

  // optional int32 buyszclosetdy = 38 [default = 0];
  if (has_buyszclosetdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->buyszclosetdy(), target);
  }

  // optional int32 sellordersclosetdy = 39 [default = 0];
  if (has_sellordersclosetdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->sellordersclosetdy(), target);
  }

  // optional int32 sellszclosetdy = 40 [default = 0];
  if (has_sellszclosetdy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->sellszclosetdy(), target);
  }

  // optional int32 orderssent = 41 [default = 0];
  if (has_orderssent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->orderssent(), target);
  }

  // optional int32 orderscxled = 42 [default = 0];
  if (has_orderscxled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->orderscxled(), target);
  }

  // optional int32 quotessent = 43 [default = 0];
  if (has_quotessent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->quotessent(), target);
  }

  // optional int32 quotescxled = 44 [default = 0];
  if (has_quotescxled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->quotescxled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.XpStatData)
  return target;
}

int XpStatData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.XpStatData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 netpos = 1 [default = 0];
    if (has_netpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netpos());
    }

    // optional int32 netposprev = 2 [default = 0];
    if (has_netposprev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netposprev());
    }

    // optional int32 netposnew = 3 [default = 0];
    if (has_netposnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netposnew());
    }

    // optional double rpxpnl = 4 [default = 0];
    if (has_rpxpnl()) {
      total_size += 1 + 8;
    }

    // optional double rpnl = 5 [default = 0];
    if (has_rpnl()) {
      total_size += 1 + 8;
    }

    // optional double upxpnl = 6 [default = 0];
    if (has_upxpnl()) {
      total_size += 1 + 8;
    }

    // optional double upnl = 7 [default = 0];
    if (has_upnl()) {
      total_size += 1 + 8;
    }

    // optional double rpxpnlsession = 8 [default = 0];
    if (has_rpxpnlsession()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double rpnlsession = 9 [default = 0];
    if (has_rpnlsession()) {
      total_size += 1 + 8;
    }

    // optional double upxpnlsession = 10 [default = 0];
    if (has_upxpnlsession()) {
      total_size += 1 + 8;
    }

    // optional double upnlsession = 11 [default = 0];
    if (has_upnlsession()) {
      total_size += 1 + 8;
    }

    // optional double utheopxpnl = 12 [default = 0];
    if (has_utheopxpnl()) {
      total_size += 1 + 8;
    }

    // optional double utheopnl = 13 [default = 0];
    if (has_utheopnl()) {
      total_size += 1 + 8;
    }

    // optional double uriskpxpnl = 14 [default = 0];
    if (has_uriskpxpnl()) {
      total_size += 1 + 8;
    }

    // optional double uriskpnl = 15 [default = 0];
    if (has_uriskpnl()) {
      total_size += 1 + 8;
    }

    // optional double utheopxpnlsession = 16 [default = 0];
    if (has_utheopxpnlsession()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double utheopnlsession = 17 [default = 0];
    if (has_utheopnlsession()) {
      total_size += 2 + 8;
    }

    // optional double uriskpxpnlsession = 18 [default = 0];
    if (has_uriskpxpnlsession()) {
      total_size += 2 + 8;
    }

    // optional double uriskpnlsession = 19 [default = 0];
    if (has_uriskpnlsession()) {
      total_size += 2 + 8;
    }

    // optional int32 buyorders = 21 [default = 0];
    if (has_buyorders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyorders());
    }

    // optional int32 buysz = 22 [default = 0];
    if (has_buysz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buysz());
    }

    // optional int32 sellorders = 23 [default = 0];
    if (has_sellorders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellorders());
    }

    // optional int32 sellsz = 24 [default = 0];
    if (has_sellsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellsz());
    }

    // optional int32 buyordersopenytd = 25 [default = 0];
    if (has_buyordersopenytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyordersopenytd());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 buyszopenytd = 26 [default = 0];
    if (has_buyszopenytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyszopenytd());
    }

    // optional int32 sellordersopenytd = 27 [default = 0];
    if (has_sellordersopenytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellordersopenytd());
    }

    // optional int32 sellszopenytd = 28 [default = 0];
    if (has_sellszopenytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellszopenytd());
    }

    // optional int32 buyorderscloseytd = 29 [default = 0];
    if (has_buyorderscloseytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyorderscloseytd());
    }

    // optional int32 buyszcloseytd = 30 [default = 0];
    if (has_buyszcloseytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyszcloseytd());
    }

    // optional int32 sellorderscloseytd = 31 [default = 0];
    if (has_sellorderscloseytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellorderscloseytd());
    }

    // optional int32 sellszcloseytd = 32 [default = 0];
    if (has_sellszcloseytd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellszcloseytd());
    }

    // optional int32 buyordersopentdy = 33 [default = 0];
    if (has_buyordersopentdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyordersopentdy());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 buyszopentdy = 34 [default = 0];
    if (has_buyszopentdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyszopentdy());
    }

    // optional int32 sellordersopentdy = 35 [default = 0];
    if (has_sellordersopentdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellordersopentdy());
    }

    // optional int32 sellszopentdy = 36 [default = 0];
    if (has_sellszopentdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellszopentdy());
    }

    // optional int32 buyordersclosetdy = 37 [default = 0];
    if (has_buyordersclosetdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyordersclosetdy());
    }

    // optional int32 buyszclosetdy = 38 [default = 0];
    if (has_buyszclosetdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyszclosetdy());
    }

    // optional int32 sellordersclosetdy = 39 [default = 0];
    if (has_sellordersclosetdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellordersclosetdy());
    }

    // optional int32 sellszclosetdy = 40 [default = 0];
    if (has_sellszclosetdy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellszclosetdy());
    }

    // optional int32 orderssent = 41 [default = 0];
    if (has_orderssent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderssent());
    }

  }
  if (_has_bits_[40 / 32] & 1792u) {
    // optional int32 orderscxled = 42 [default = 0];
    if (has_orderscxled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderscxled());
    }

    // optional int32 quotessent = 43 [default = 0];
    if (has_quotessent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotessent());
    }

    // optional int32 quotescxled = 44 [default = 0];
    if (has_quotescxled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotescxled());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XpStatData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.XpStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const XpStatData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const XpStatData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.XpStatData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.XpStatData)
    MergeFrom(*source);
  }
}

void XpStatData::MergeFrom(const XpStatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.XpStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netpos()) {
      set_netpos(from.netpos());
    }
    if (from.has_netposprev()) {
      set_netposprev(from.netposprev());
    }
    if (from.has_netposnew()) {
      set_netposnew(from.netposnew());
    }
    if (from.has_rpxpnl()) {
      set_rpxpnl(from.rpxpnl());
    }
    if (from.has_rpnl()) {
      set_rpnl(from.rpnl());
    }
    if (from.has_upxpnl()) {
      set_upxpnl(from.upxpnl());
    }
    if (from.has_upnl()) {
      set_upnl(from.upnl());
    }
    if (from.has_rpxpnlsession()) {
      set_rpxpnlsession(from.rpxpnlsession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rpnlsession()) {
      set_rpnlsession(from.rpnlsession());
    }
    if (from.has_upxpnlsession()) {
      set_upxpnlsession(from.upxpnlsession());
    }
    if (from.has_upnlsession()) {
      set_upnlsession(from.upnlsession());
    }
    if (from.has_utheopxpnl()) {
      set_utheopxpnl(from.utheopxpnl());
    }
    if (from.has_utheopnl()) {
      set_utheopnl(from.utheopnl());
    }
    if (from.has_uriskpxpnl()) {
      set_uriskpxpnl(from.uriskpxpnl());
    }
    if (from.has_uriskpnl()) {
      set_uriskpnl(from.uriskpnl());
    }
    if (from.has_utheopxpnlsession()) {
      set_utheopxpnlsession(from.utheopxpnlsession());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_utheopnlsession()) {
      set_utheopnlsession(from.utheopnlsession());
    }
    if (from.has_uriskpxpnlsession()) {
      set_uriskpxpnlsession(from.uriskpxpnlsession());
    }
    if (from.has_uriskpnlsession()) {
      set_uriskpnlsession(from.uriskpnlsession());
    }
    if (from.has_buyorders()) {
      set_buyorders(from.buyorders());
    }
    if (from.has_buysz()) {
      set_buysz(from.buysz());
    }
    if (from.has_sellorders()) {
      set_sellorders(from.sellorders());
    }
    if (from.has_sellsz()) {
      set_sellsz(from.sellsz());
    }
    if (from.has_buyordersopenytd()) {
      set_buyordersopenytd(from.buyordersopenytd());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_buyszopenytd()) {
      set_buyszopenytd(from.buyszopenytd());
    }
    if (from.has_sellordersopenytd()) {
      set_sellordersopenytd(from.sellordersopenytd());
    }
    if (from.has_sellszopenytd()) {
      set_sellszopenytd(from.sellszopenytd());
    }
    if (from.has_buyorderscloseytd()) {
      set_buyorderscloseytd(from.buyorderscloseytd());
    }
    if (from.has_buyszcloseytd()) {
      set_buyszcloseytd(from.buyszcloseytd());
    }
    if (from.has_sellorderscloseytd()) {
      set_sellorderscloseytd(from.sellorderscloseytd());
    }
    if (from.has_sellszcloseytd()) {
      set_sellszcloseytd(from.sellszcloseytd());
    }
    if (from.has_buyordersopentdy()) {
      set_buyordersopentdy(from.buyordersopentdy());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_buyszopentdy()) {
      set_buyszopentdy(from.buyszopentdy());
    }
    if (from.has_sellordersopentdy()) {
      set_sellordersopentdy(from.sellordersopentdy());
    }
    if (from.has_sellszopentdy()) {
      set_sellszopentdy(from.sellszopentdy());
    }
    if (from.has_buyordersclosetdy()) {
      set_buyordersclosetdy(from.buyordersclosetdy());
    }
    if (from.has_buyszclosetdy()) {
      set_buyszclosetdy(from.buyszclosetdy());
    }
    if (from.has_sellordersclosetdy()) {
      set_sellordersclosetdy(from.sellordersclosetdy());
    }
    if (from.has_sellszclosetdy()) {
      set_sellszclosetdy(from.sellszclosetdy());
    }
    if (from.has_orderssent()) {
      set_orderssent(from.orderssent());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_orderscxled()) {
      set_orderscxled(from.orderscxled());
    }
    if (from.has_quotessent()) {
      set_quotessent(from.quotessent());
    }
    if (from.has_quotescxled()) {
      set_quotescxled(from.quotescxled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void XpStatData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.XpStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XpStatData::CopyFrom(const XpStatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.XpStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XpStatData::IsInitialized() const {

  return true;
}

void XpStatData::Swap(XpStatData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XpStatData::InternalSwap(XpStatData* other) {
  std::swap(netpos_, other->netpos_);
  std::swap(netposprev_, other->netposprev_);
  std::swap(netposnew_, other->netposnew_);
  std::swap(rpxpnl_, other->rpxpnl_);
  std::swap(rpnl_, other->rpnl_);
  std::swap(upxpnl_, other->upxpnl_);
  std::swap(upnl_, other->upnl_);
  std::swap(rpxpnlsession_, other->rpxpnlsession_);
  std::swap(rpnlsession_, other->rpnlsession_);
  std::swap(upxpnlsession_, other->upxpnlsession_);
  std::swap(upnlsession_, other->upnlsession_);
  std::swap(utheopxpnl_, other->utheopxpnl_);
  std::swap(utheopnl_, other->utheopnl_);
  std::swap(uriskpxpnl_, other->uriskpxpnl_);
  std::swap(uriskpnl_, other->uriskpnl_);
  std::swap(utheopxpnlsession_, other->utheopxpnlsession_);
  std::swap(utheopnlsession_, other->utheopnlsession_);
  std::swap(uriskpxpnlsession_, other->uriskpxpnlsession_);
  std::swap(uriskpnlsession_, other->uriskpnlsession_);
  std::swap(buyorders_, other->buyorders_);
  std::swap(buysz_, other->buysz_);
  std::swap(sellorders_, other->sellorders_);
  std::swap(sellsz_, other->sellsz_);
  std::swap(buyordersopenytd_, other->buyordersopenytd_);
  std::swap(buyszopenytd_, other->buyszopenytd_);
  std::swap(sellordersopenytd_, other->sellordersopenytd_);
  std::swap(sellszopenytd_, other->sellszopenytd_);
  std::swap(buyorderscloseytd_, other->buyorderscloseytd_);
  std::swap(buyszcloseytd_, other->buyszcloseytd_);
  std::swap(sellorderscloseytd_, other->sellorderscloseytd_);
  std::swap(sellszcloseytd_, other->sellszcloseytd_);
  std::swap(buyordersopentdy_, other->buyordersopentdy_);
  std::swap(buyszopentdy_, other->buyszopentdy_);
  std::swap(sellordersopentdy_, other->sellordersopentdy_);
  std::swap(sellszopentdy_, other->sellszopentdy_);
  std::swap(buyordersclosetdy_, other->buyordersclosetdy_);
  std::swap(buyszclosetdy_, other->buyszclosetdy_);
  std::swap(sellordersclosetdy_, other->sellordersclosetdy_);
  std::swap(sellszclosetdy_, other->sellszclosetdy_);
  std::swap(orderssent_, other->orderssent_);
  std::swap(orderscxled_, other->orderscxled_);
  std::swap(quotessent_, other->quotessent_);
  std::swap(quotescxled_, other->quotescxled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XpStatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XpStatData_descriptor_;
  metadata.reflection = XpStatData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XpStatData

// optional int32 netpos = 1 [default = 0];
bool XpStatData::has_netpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void XpStatData::set_has_netpos() {
  _has_bits_[0] |= 0x00000001u;
}
void XpStatData::clear_has_netpos() {
  _has_bits_[0] &= ~0x00000001u;
}
void XpStatData::clear_netpos() {
  netpos_ = 0;
  clear_has_netpos();
}
 ::google::protobuf::int32 XpStatData::netpos() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.netpos)
  return netpos_;
}
 void XpStatData::set_netpos(::google::protobuf::int32 value) {
  set_has_netpos();
  netpos_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.netpos)
}

// optional int32 netposprev = 2 [default = 0];
bool XpStatData::has_netposprev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void XpStatData::set_has_netposprev() {
  _has_bits_[0] |= 0x00000002u;
}
void XpStatData::clear_has_netposprev() {
  _has_bits_[0] &= ~0x00000002u;
}
void XpStatData::clear_netposprev() {
  netposprev_ = 0;
  clear_has_netposprev();
}
 ::google::protobuf::int32 XpStatData::netposprev() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.netposprev)
  return netposprev_;
}
 void XpStatData::set_netposprev(::google::protobuf::int32 value) {
  set_has_netposprev();
  netposprev_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.netposprev)
}

// optional int32 netposnew = 3 [default = 0];
bool XpStatData::has_netposnew() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void XpStatData::set_has_netposnew() {
  _has_bits_[0] |= 0x00000004u;
}
void XpStatData::clear_has_netposnew() {
  _has_bits_[0] &= ~0x00000004u;
}
void XpStatData::clear_netposnew() {
  netposnew_ = 0;
  clear_has_netposnew();
}
 ::google::protobuf::int32 XpStatData::netposnew() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.netposnew)
  return netposnew_;
}
 void XpStatData::set_netposnew(::google::protobuf::int32 value) {
  set_has_netposnew();
  netposnew_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.netposnew)
}

// optional double rpxpnl = 4 [default = 0];
bool XpStatData::has_rpxpnl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void XpStatData::set_has_rpxpnl() {
  _has_bits_[0] |= 0x00000008u;
}
void XpStatData::clear_has_rpxpnl() {
  _has_bits_[0] &= ~0x00000008u;
}
void XpStatData::clear_rpxpnl() {
  rpxpnl_ = 0;
  clear_has_rpxpnl();
}
 double XpStatData::rpxpnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.rpxpnl)
  return rpxpnl_;
}
 void XpStatData::set_rpxpnl(double value) {
  set_has_rpxpnl();
  rpxpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.rpxpnl)
}

// optional double rpnl = 5 [default = 0];
bool XpStatData::has_rpnl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void XpStatData::set_has_rpnl() {
  _has_bits_[0] |= 0x00000010u;
}
void XpStatData::clear_has_rpnl() {
  _has_bits_[0] &= ~0x00000010u;
}
void XpStatData::clear_rpnl() {
  rpnl_ = 0;
  clear_has_rpnl();
}
 double XpStatData::rpnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.rpnl)
  return rpnl_;
}
 void XpStatData::set_rpnl(double value) {
  set_has_rpnl();
  rpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.rpnl)
}

// optional double upxpnl = 6 [default = 0];
bool XpStatData::has_upxpnl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void XpStatData::set_has_upxpnl() {
  _has_bits_[0] |= 0x00000020u;
}
void XpStatData::clear_has_upxpnl() {
  _has_bits_[0] &= ~0x00000020u;
}
void XpStatData::clear_upxpnl() {
  upxpnl_ = 0;
  clear_has_upxpnl();
}
 double XpStatData::upxpnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.upxpnl)
  return upxpnl_;
}
 void XpStatData::set_upxpnl(double value) {
  set_has_upxpnl();
  upxpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.upxpnl)
}

// optional double upnl = 7 [default = 0];
bool XpStatData::has_upnl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void XpStatData::set_has_upnl() {
  _has_bits_[0] |= 0x00000040u;
}
void XpStatData::clear_has_upnl() {
  _has_bits_[0] &= ~0x00000040u;
}
void XpStatData::clear_upnl() {
  upnl_ = 0;
  clear_has_upnl();
}
 double XpStatData::upnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.upnl)
  return upnl_;
}
 void XpStatData::set_upnl(double value) {
  set_has_upnl();
  upnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.upnl)
}

// optional double rpxpnlsession = 8 [default = 0];
bool XpStatData::has_rpxpnlsession() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void XpStatData::set_has_rpxpnlsession() {
  _has_bits_[0] |= 0x00000080u;
}
void XpStatData::clear_has_rpxpnlsession() {
  _has_bits_[0] &= ~0x00000080u;
}
void XpStatData::clear_rpxpnlsession() {
  rpxpnlsession_ = 0;
  clear_has_rpxpnlsession();
}
 double XpStatData::rpxpnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.rpxpnlsession)
  return rpxpnlsession_;
}
 void XpStatData::set_rpxpnlsession(double value) {
  set_has_rpxpnlsession();
  rpxpnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.rpxpnlsession)
}

// optional double rpnlsession = 9 [default = 0];
bool XpStatData::has_rpnlsession() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void XpStatData::set_has_rpnlsession() {
  _has_bits_[0] |= 0x00000100u;
}
void XpStatData::clear_has_rpnlsession() {
  _has_bits_[0] &= ~0x00000100u;
}
void XpStatData::clear_rpnlsession() {
  rpnlsession_ = 0;
  clear_has_rpnlsession();
}
 double XpStatData::rpnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.rpnlsession)
  return rpnlsession_;
}
 void XpStatData::set_rpnlsession(double value) {
  set_has_rpnlsession();
  rpnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.rpnlsession)
}

// optional double upxpnlsession = 10 [default = 0];
bool XpStatData::has_upxpnlsession() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void XpStatData::set_has_upxpnlsession() {
  _has_bits_[0] |= 0x00000200u;
}
void XpStatData::clear_has_upxpnlsession() {
  _has_bits_[0] &= ~0x00000200u;
}
void XpStatData::clear_upxpnlsession() {
  upxpnlsession_ = 0;
  clear_has_upxpnlsession();
}
 double XpStatData::upxpnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.upxpnlsession)
  return upxpnlsession_;
}
 void XpStatData::set_upxpnlsession(double value) {
  set_has_upxpnlsession();
  upxpnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.upxpnlsession)
}

// optional double upnlsession = 11 [default = 0];
bool XpStatData::has_upnlsession() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void XpStatData::set_has_upnlsession() {
  _has_bits_[0] |= 0x00000400u;
}
void XpStatData::clear_has_upnlsession() {
  _has_bits_[0] &= ~0x00000400u;
}
void XpStatData::clear_upnlsession() {
  upnlsession_ = 0;
  clear_has_upnlsession();
}
 double XpStatData::upnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.upnlsession)
  return upnlsession_;
}
 void XpStatData::set_upnlsession(double value) {
  set_has_upnlsession();
  upnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.upnlsession)
}

// optional double utheopxpnl = 12 [default = 0];
bool XpStatData::has_utheopxpnl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void XpStatData::set_has_utheopxpnl() {
  _has_bits_[0] |= 0x00000800u;
}
void XpStatData::clear_has_utheopxpnl() {
  _has_bits_[0] &= ~0x00000800u;
}
void XpStatData::clear_utheopxpnl() {
  utheopxpnl_ = 0;
  clear_has_utheopxpnl();
}
 double XpStatData::utheopxpnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.utheopxpnl)
  return utheopxpnl_;
}
 void XpStatData::set_utheopxpnl(double value) {
  set_has_utheopxpnl();
  utheopxpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.utheopxpnl)
}

// optional double utheopnl = 13 [default = 0];
bool XpStatData::has_utheopnl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void XpStatData::set_has_utheopnl() {
  _has_bits_[0] |= 0x00001000u;
}
void XpStatData::clear_has_utheopnl() {
  _has_bits_[0] &= ~0x00001000u;
}
void XpStatData::clear_utheopnl() {
  utheopnl_ = 0;
  clear_has_utheopnl();
}
 double XpStatData::utheopnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.utheopnl)
  return utheopnl_;
}
 void XpStatData::set_utheopnl(double value) {
  set_has_utheopnl();
  utheopnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.utheopnl)
}

// optional double uriskpxpnl = 14 [default = 0];
bool XpStatData::has_uriskpxpnl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void XpStatData::set_has_uriskpxpnl() {
  _has_bits_[0] |= 0x00002000u;
}
void XpStatData::clear_has_uriskpxpnl() {
  _has_bits_[0] &= ~0x00002000u;
}
void XpStatData::clear_uriskpxpnl() {
  uriskpxpnl_ = 0;
  clear_has_uriskpxpnl();
}
 double XpStatData::uriskpxpnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.uriskpxpnl)
  return uriskpxpnl_;
}
 void XpStatData::set_uriskpxpnl(double value) {
  set_has_uriskpxpnl();
  uriskpxpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.uriskpxpnl)
}

// optional double uriskpnl = 15 [default = 0];
bool XpStatData::has_uriskpnl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void XpStatData::set_has_uriskpnl() {
  _has_bits_[0] |= 0x00004000u;
}
void XpStatData::clear_has_uriskpnl() {
  _has_bits_[0] &= ~0x00004000u;
}
void XpStatData::clear_uriskpnl() {
  uriskpnl_ = 0;
  clear_has_uriskpnl();
}
 double XpStatData::uriskpnl() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.uriskpnl)
  return uriskpnl_;
}
 void XpStatData::set_uriskpnl(double value) {
  set_has_uriskpnl();
  uriskpnl_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.uriskpnl)
}

// optional double utheopxpnlsession = 16 [default = 0];
bool XpStatData::has_utheopxpnlsession() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void XpStatData::set_has_utheopxpnlsession() {
  _has_bits_[0] |= 0x00008000u;
}
void XpStatData::clear_has_utheopxpnlsession() {
  _has_bits_[0] &= ~0x00008000u;
}
void XpStatData::clear_utheopxpnlsession() {
  utheopxpnlsession_ = 0;
  clear_has_utheopxpnlsession();
}
 double XpStatData::utheopxpnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.utheopxpnlsession)
  return utheopxpnlsession_;
}
 void XpStatData::set_utheopxpnlsession(double value) {
  set_has_utheopxpnlsession();
  utheopxpnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.utheopxpnlsession)
}

// optional double utheopnlsession = 17 [default = 0];
bool XpStatData::has_utheopnlsession() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void XpStatData::set_has_utheopnlsession() {
  _has_bits_[0] |= 0x00010000u;
}
void XpStatData::clear_has_utheopnlsession() {
  _has_bits_[0] &= ~0x00010000u;
}
void XpStatData::clear_utheopnlsession() {
  utheopnlsession_ = 0;
  clear_has_utheopnlsession();
}
 double XpStatData::utheopnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.utheopnlsession)
  return utheopnlsession_;
}
 void XpStatData::set_utheopnlsession(double value) {
  set_has_utheopnlsession();
  utheopnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.utheopnlsession)
}

// optional double uriskpxpnlsession = 18 [default = 0];
bool XpStatData::has_uriskpxpnlsession() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void XpStatData::set_has_uriskpxpnlsession() {
  _has_bits_[0] |= 0x00020000u;
}
void XpStatData::clear_has_uriskpxpnlsession() {
  _has_bits_[0] &= ~0x00020000u;
}
void XpStatData::clear_uriskpxpnlsession() {
  uriskpxpnlsession_ = 0;
  clear_has_uriskpxpnlsession();
}
 double XpStatData::uriskpxpnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.uriskpxpnlsession)
  return uriskpxpnlsession_;
}
 void XpStatData::set_uriskpxpnlsession(double value) {
  set_has_uriskpxpnlsession();
  uriskpxpnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.uriskpxpnlsession)
}

// optional double uriskpnlsession = 19 [default = 0];
bool XpStatData::has_uriskpnlsession() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void XpStatData::set_has_uriskpnlsession() {
  _has_bits_[0] |= 0x00040000u;
}
void XpStatData::clear_has_uriskpnlsession() {
  _has_bits_[0] &= ~0x00040000u;
}
void XpStatData::clear_uriskpnlsession() {
  uriskpnlsession_ = 0;
  clear_has_uriskpnlsession();
}
 double XpStatData::uriskpnlsession() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.uriskpnlsession)
  return uriskpnlsession_;
}
 void XpStatData::set_uriskpnlsession(double value) {
  set_has_uriskpnlsession();
  uriskpnlsession_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.uriskpnlsession)
}

// optional int32 buyorders = 21 [default = 0];
bool XpStatData::has_buyorders() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void XpStatData::set_has_buyorders() {
  _has_bits_[0] |= 0x00080000u;
}
void XpStatData::clear_has_buyorders() {
  _has_bits_[0] &= ~0x00080000u;
}
void XpStatData::clear_buyorders() {
  buyorders_ = 0;
  clear_has_buyorders();
}
 ::google::protobuf::int32 XpStatData::buyorders() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyorders)
  return buyorders_;
}
 void XpStatData::set_buyorders(::google::protobuf::int32 value) {
  set_has_buyorders();
  buyorders_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyorders)
}

// optional int32 buysz = 22 [default = 0];
bool XpStatData::has_buysz() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void XpStatData::set_has_buysz() {
  _has_bits_[0] |= 0x00100000u;
}
void XpStatData::clear_has_buysz() {
  _has_bits_[0] &= ~0x00100000u;
}
void XpStatData::clear_buysz() {
  buysz_ = 0;
  clear_has_buysz();
}
 ::google::protobuf::int32 XpStatData::buysz() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buysz)
  return buysz_;
}
 void XpStatData::set_buysz(::google::protobuf::int32 value) {
  set_has_buysz();
  buysz_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buysz)
}

// optional int32 sellorders = 23 [default = 0];
bool XpStatData::has_sellorders() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void XpStatData::set_has_sellorders() {
  _has_bits_[0] |= 0x00200000u;
}
void XpStatData::clear_has_sellorders() {
  _has_bits_[0] &= ~0x00200000u;
}
void XpStatData::clear_sellorders() {
  sellorders_ = 0;
  clear_has_sellorders();
}
 ::google::protobuf::int32 XpStatData::sellorders() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellorders)
  return sellorders_;
}
 void XpStatData::set_sellorders(::google::protobuf::int32 value) {
  set_has_sellorders();
  sellorders_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellorders)
}

// optional int32 sellsz = 24 [default = 0];
bool XpStatData::has_sellsz() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void XpStatData::set_has_sellsz() {
  _has_bits_[0] |= 0x00400000u;
}
void XpStatData::clear_has_sellsz() {
  _has_bits_[0] &= ~0x00400000u;
}
void XpStatData::clear_sellsz() {
  sellsz_ = 0;
  clear_has_sellsz();
}
 ::google::protobuf::int32 XpStatData::sellsz() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellsz)
  return sellsz_;
}
 void XpStatData::set_sellsz(::google::protobuf::int32 value) {
  set_has_sellsz();
  sellsz_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellsz)
}

// optional int32 buyordersopenytd = 25 [default = 0];
bool XpStatData::has_buyordersopenytd() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void XpStatData::set_has_buyordersopenytd() {
  _has_bits_[0] |= 0x00800000u;
}
void XpStatData::clear_has_buyordersopenytd() {
  _has_bits_[0] &= ~0x00800000u;
}
void XpStatData::clear_buyordersopenytd() {
  buyordersopenytd_ = 0;
  clear_has_buyordersopenytd();
}
 ::google::protobuf::int32 XpStatData::buyordersopenytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyordersopenytd)
  return buyordersopenytd_;
}
 void XpStatData::set_buyordersopenytd(::google::protobuf::int32 value) {
  set_has_buyordersopenytd();
  buyordersopenytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyordersopenytd)
}

// optional int32 buyszopenytd = 26 [default = 0];
bool XpStatData::has_buyszopenytd() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void XpStatData::set_has_buyszopenytd() {
  _has_bits_[0] |= 0x01000000u;
}
void XpStatData::clear_has_buyszopenytd() {
  _has_bits_[0] &= ~0x01000000u;
}
void XpStatData::clear_buyszopenytd() {
  buyszopenytd_ = 0;
  clear_has_buyszopenytd();
}
 ::google::protobuf::int32 XpStatData::buyszopenytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyszopenytd)
  return buyszopenytd_;
}
 void XpStatData::set_buyszopenytd(::google::protobuf::int32 value) {
  set_has_buyszopenytd();
  buyszopenytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyszopenytd)
}

// optional int32 sellordersopenytd = 27 [default = 0];
bool XpStatData::has_sellordersopenytd() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void XpStatData::set_has_sellordersopenytd() {
  _has_bits_[0] |= 0x02000000u;
}
void XpStatData::clear_has_sellordersopenytd() {
  _has_bits_[0] &= ~0x02000000u;
}
void XpStatData::clear_sellordersopenytd() {
  sellordersopenytd_ = 0;
  clear_has_sellordersopenytd();
}
 ::google::protobuf::int32 XpStatData::sellordersopenytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellordersopenytd)
  return sellordersopenytd_;
}
 void XpStatData::set_sellordersopenytd(::google::protobuf::int32 value) {
  set_has_sellordersopenytd();
  sellordersopenytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellordersopenytd)
}

// optional int32 sellszopenytd = 28 [default = 0];
bool XpStatData::has_sellszopenytd() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void XpStatData::set_has_sellszopenytd() {
  _has_bits_[0] |= 0x04000000u;
}
void XpStatData::clear_has_sellszopenytd() {
  _has_bits_[0] &= ~0x04000000u;
}
void XpStatData::clear_sellszopenytd() {
  sellszopenytd_ = 0;
  clear_has_sellszopenytd();
}
 ::google::protobuf::int32 XpStatData::sellszopenytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellszopenytd)
  return sellszopenytd_;
}
 void XpStatData::set_sellszopenytd(::google::protobuf::int32 value) {
  set_has_sellszopenytd();
  sellszopenytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellszopenytd)
}

// optional int32 buyorderscloseytd = 29 [default = 0];
bool XpStatData::has_buyorderscloseytd() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void XpStatData::set_has_buyorderscloseytd() {
  _has_bits_[0] |= 0x08000000u;
}
void XpStatData::clear_has_buyorderscloseytd() {
  _has_bits_[0] &= ~0x08000000u;
}
void XpStatData::clear_buyorderscloseytd() {
  buyorderscloseytd_ = 0;
  clear_has_buyorderscloseytd();
}
 ::google::protobuf::int32 XpStatData::buyorderscloseytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyorderscloseytd)
  return buyorderscloseytd_;
}
 void XpStatData::set_buyorderscloseytd(::google::protobuf::int32 value) {
  set_has_buyorderscloseytd();
  buyorderscloseytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyorderscloseytd)
}

// optional int32 buyszcloseytd = 30 [default = 0];
bool XpStatData::has_buyszcloseytd() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void XpStatData::set_has_buyszcloseytd() {
  _has_bits_[0] |= 0x10000000u;
}
void XpStatData::clear_has_buyszcloseytd() {
  _has_bits_[0] &= ~0x10000000u;
}
void XpStatData::clear_buyszcloseytd() {
  buyszcloseytd_ = 0;
  clear_has_buyszcloseytd();
}
 ::google::protobuf::int32 XpStatData::buyszcloseytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyszcloseytd)
  return buyszcloseytd_;
}
 void XpStatData::set_buyszcloseytd(::google::protobuf::int32 value) {
  set_has_buyszcloseytd();
  buyszcloseytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyszcloseytd)
}

// optional int32 sellorderscloseytd = 31 [default = 0];
bool XpStatData::has_sellorderscloseytd() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void XpStatData::set_has_sellorderscloseytd() {
  _has_bits_[0] |= 0x20000000u;
}
void XpStatData::clear_has_sellorderscloseytd() {
  _has_bits_[0] &= ~0x20000000u;
}
void XpStatData::clear_sellorderscloseytd() {
  sellorderscloseytd_ = 0;
  clear_has_sellorderscloseytd();
}
 ::google::protobuf::int32 XpStatData::sellorderscloseytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellorderscloseytd)
  return sellorderscloseytd_;
}
 void XpStatData::set_sellorderscloseytd(::google::protobuf::int32 value) {
  set_has_sellorderscloseytd();
  sellorderscloseytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellorderscloseytd)
}

// optional int32 sellszcloseytd = 32 [default = 0];
bool XpStatData::has_sellszcloseytd() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void XpStatData::set_has_sellszcloseytd() {
  _has_bits_[0] |= 0x40000000u;
}
void XpStatData::clear_has_sellszcloseytd() {
  _has_bits_[0] &= ~0x40000000u;
}
void XpStatData::clear_sellszcloseytd() {
  sellszcloseytd_ = 0;
  clear_has_sellszcloseytd();
}
 ::google::protobuf::int32 XpStatData::sellszcloseytd() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellszcloseytd)
  return sellszcloseytd_;
}
 void XpStatData::set_sellszcloseytd(::google::protobuf::int32 value) {
  set_has_sellszcloseytd();
  sellszcloseytd_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellszcloseytd)
}

// optional int32 buyordersopentdy = 33 [default = 0];
bool XpStatData::has_buyordersopentdy() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void XpStatData::set_has_buyordersopentdy() {
  _has_bits_[0] |= 0x80000000u;
}
void XpStatData::clear_has_buyordersopentdy() {
  _has_bits_[0] &= ~0x80000000u;
}
void XpStatData::clear_buyordersopentdy() {
  buyordersopentdy_ = 0;
  clear_has_buyordersopentdy();
}
 ::google::protobuf::int32 XpStatData::buyordersopentdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyordersopentdy)
  return buyordersopentdy_;
}
 void XpStatData::set_buyordersopentdy(::google::protobuf::int32 value) {
  set_has_buyordersopentdy();
  buyordersopentdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyordersopentdy)
}

// optional int32 buyszopentdy = 34 [default = 0];
bool XpStatData::has_buyszopentdy() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void XpStatData::set_has_buyszopentdy() {
  _has_bits_[1] |= 0x00000001u;
}
void XpStatData::clear_has_buyszopentdy() {
  _has_bits_[1] &= ~0x00000001u;
}
void XpStatData::clear_buyszopentdy() {
  buyszopentdy_ = 0;
  clear_has_buyszopentdy();
}
 ::google::protobuf::int32 XpStatData::buyszopentdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyszopentdy)
  return buyszopentdy_;
}
 void XpStatData::set_buyszopentdy(::google::protobuf::int32 value) {
  set_has_buyszopentdy();
  buyszopentdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyszopentdy)
}

// optional int32 sellordersopentdy = 35 [default = 0];
bool XpStatData::has_sellordersopentdy() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void XpStatData::set_has_sellordersopentdy() {
  _has_bits_[1] |= 0x00000002u;
}
void XpStatData::clear_has_sellordersopentdy() {
  _has_bits_[1] &= ~0x00000002u;
}
void XpStatData::clear_sellordersopentdy() {
  sellordersopentdy_ = 0;
  clear_has_sellordersopentdy();
}
 ::google::protobuf::int32 XpStatData::sellordersopentdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellordersopentdy)
  return sellordersopentdy_;
}
 void XpStatData::set_sellordersopentdy(::google::protobuf::int32 value) {
  set_has_sellordersopentdy();
  sellordersopentdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellordersopentdy)
}

// optional int32 sellszopentdy = 36 [default = 0];
bool XpStatData::has_sellszopentdy() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void XpStatData::set_has_sellszopentdy() {
  _has_bits_[1] |= 0x00000004u;
}
void XpStatData::clear_has_sellszopentdy() {
  _has_bits_[1] &= ~0x00000004u;
}
void XpStatData::clear_sellszopentdy() {
  sellszopentdy_ = 0;
  clear_has_sellszopentdy();
}
 ::google::protobuf::int32 XpStatData::sellszopentdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellszopentdy)
  return sellszopentdy_;
}
 void XpStatData::set_sellszopentdy(::google::protobuf::int32 value) {
  set_has_sellszopentdy();
  sellszopentdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellszopentdy)
}

// optional int32 buyordersclosetdy = 37 [default = 0];
bool XpStatData::has_buyordersclosetdy() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void XpStatData::set_has_buyordersclosetdy() {
  _has_bits_[1] |= 0x00000008u;
}
void XpStatData::clear_has_buyordersclosetdy() {
  _has_bits_[1] &= ~0x00000008u;
}
void XpStatData::clear_buyordersclosetdy() {
  buyordersclosetdy_ = 0;
  clear_has_buyordersclosetdy();
}
 ::google::protobuf::int32 XpStatData::buyordersclosetdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyordersclosetdy)
  return buyordersclosetdy_;
}
 void XpStatData::set_buyordersclosetdy(::google::protobuf::int32 value) {
  set_has_buyordersclosetdy();
  buyordersclosetdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyordersclosetdy)
}

// optional int32 buyszclosetdy = 38 [default = 0];
bool XpStatData::has_buyszclosetdy() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void XpStatData::set_has_buyszclosetdy() {
  _has_bits_[1] |= 0x00000010u;
}
void XpStatData::clear_has_buyszclosetdy() {
  _has_bits_[1] &= ~0x00000010u;
}
void XpStatData::clear_buyszclosetdy() {
  buyszclosetdy_ = 0;
  clear_has_buyszclosetdy();
}
 ::google::protobuf::int32 XpStatData::buyszclosetdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.buyszclosetdy)
  return buyszclosetdy_;
}
 void XpStatData::set_buyszclosetdy(::google::protobuf::int32 value) {
  set_has_buyszclosetdy();
  buyszclosetdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.buyszclosetdy)
}

// optional int32 sellordersclosetdy = 39 [default = 0];
bool XpStatData::has_sellordersclosetdy() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void XpStatData::set_has_sellordersclosetdy() {
  _has_bits_[1] |= 0x00000020u;
}
void XpStatData::clear_has_sellordersclosetdy() {
  _has_bits_[1] &= ~0x00000020u;
}
void XpStatData::clear_sellordersclosetdy() {
  sellordersclosetdy_ = 0;
  clear_has_sellordersclosetdy();
}
 ::google::protobuf::int32 XpStatData::sellordersclosetdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellordersclosetdy)
  return sellordersclosetdy_;
}
 void XpStatData::set_sellordersclosetdy(::google::protobuf::int32 value) {
  set_has_sellordersclosetdy();
  sellordersclosetdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellordersclosetdy)
}

// optional int32 sellszclosetdy = 40 [default = 0];
bool XpStatData::has_sellszclosetdy() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void XpStatData::set_has_sellszclosetdy() {
  _has_bits_[1] |= 0x00000040u;
}
void XpStatData::clear_has_sellszclosetdy() {
  _has_bits_[1] &= ~0x00000040u;
}
void XpStatData::clear_sellszclosetdy() {
  sellszclosetdy_ = 0;
  clear_has_sellszclosetdy();
}
 ::google::protobuf::int32 XpStatData::sellszclosetdy() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.sellszclosetdy)
  return sellszclosetdy_;
}
 void XpStatData::set_sellszclosetdy(::google::protobuf::int32 value) {
  set_has_sellszclosetdy();
  sellszclosetdy_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.sellszclosetdy)
}

// optional int32 orderssent = 41 [default = 0];
bool XpStatData::has_orderssent() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void XpStatData::set_has_orderssent() {
  _has_bits_[1] |= 0x00000080u;
}
void XpStatData::clear_has_orderssent() {
  _has_bits_[1] &= ~0x00000080u;
}
void XpStatData::clear_orderssent() {
  orderssent_ = 0;
  clear_has_orderssent();
}
 ::google::protobuf::int32 XpStatData::orderssent() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.orderssent)
  return orderssent_;
}
 void XpStatData::set_orderssent(::google::protobuf::int32 value) {
  set_has_orderssent();
  orderssent_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.orderssent)
}

// optional int32 orderscxled = 42 [default = 0];
bool XpStatData::has_orderscxled() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void XpStatData::set_has_orderscxled() {
  _has_bits_[1] |= 0x00000100u;
}
void XpStatData::clear_has_orderscxled() {
  _has_bits_[1] &= ~0x00000100u;
}
void XpStatData::clear_orderscxled() {
  orderscxled_ = 0;
  clear_has_orderscxled();
}
 ::google::protobuf::int32 XpStatData::orderscxled() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.orderscxled)
  return orderscxled_;
}
 void XpStatData::set_orderscxled(::google::protobuf::int32 value) {
  set_has_orderscxled();
  orderscxled_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.orderscxled)
}

// optional int32 quotessent = 43 [default = 0];
bool XpStatData::has_quotessent() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void XpStatData::set_has_quotessent() {
  _has_bits_[1] |= 0x00000200u;
}
void XpStatData::clear_has_quotessent() {
  _has_bits_[1] &= ~0x00000200u;
}
void XpStatData::clear_quotessent() {
  quotessent_ = 0;
  clear_has_quotessent();
}
 ::google::protobuf::int32 XpStatData::quotessent() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.quotessent)
  return quotessent_;
}
 void XpStatData::set_quotessent(::google::protobuf::int32 value) {
  set_has_quotessent();
  quotessent_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.quotessent)
}

// optional int32 quotescxled = 44 [default = 0];
bool XpStatData::has_quotescxled() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void XpStatData::set_has_quotescxled() {
  _has_bits_[1] |= 0x00000400u;
}
void XpStatData::clear_has_quotescxled() {
  _has_bits_[1] &= ~0x00000400u;
}
void XpStatData::clear_quotescxled() {
  quotescxled_ = 0;
  clear_has_quotescxled();
}
 ::google::protobuf::int32 XpStatData::quotescxled() const {
  // @@protoc_insertion_point(field_get:XT.XpStatData.quotescxled)
  return quotescxled_;
}
 void XpStatData::set_quotescxled(::google::protobuf::int32 value) {
  set_has_quotescxled();
  quotescxled_ = value;
  // @@protoc_insertion_point(field_set:XT.XpStatData.quotescxled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdersSzPair::kOrdersFieldNumber;
const int OrdersSzPair::kSzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdersSzPair::OrdersSzPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OrdersSzPair)
}

void OrdersSzPair::InitAsDefaultInstance() {
}

OrdersSzPair::OrdersSzPair(const OrdersSzPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OrdersSzPair)
}

void OrdersSzPair::SharedCtor() {
  _cached_size_ = 0;
  orders_ = 0;
  sz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdersSzPair::~OrdersSzPair() {
  // @@protoc_insertion_point(destructor:XT.OrdersSzPair)
  SharedDtor();
}

void OrdersSzPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrdersSzPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrdersSzPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdersSzPair_descriptor_;
}

const OrdersSzPair& OrdersSzPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OrdersSzPair* OrdersSzPair::default_instance_ = NULL;

OrdersSzPair* OrdersSzPair::New(::google::protobuf::Arena* arena) const {
  OrdersSzPair* n = new OrdersSzPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrdersSzPair::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OrdersSzPair)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OrdersSzPair, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OrdersSzPair*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(orders_, sz_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrdersSzPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OrdersSzPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 orders = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orders_)));
          set_has_orders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sz;
        break;
      }

      // optional int32 sz = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_sz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sz_)));
          set_has_sz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OrdersSzPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OrdersSzPair)
  return false;
#undef DO_
}

void OrdersSzPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OrdersSzPair)
  // optional int32 orders = 1 [default = 0];
  if (has_orders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orders(), output);
  }

  // optional int32 sz = 2 [default = 0];
  if (has_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OrdersSzPair)
}

::google::protobuf::uint8* OrdersSzPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OrdersSzPair)
  // optional int32 orders = 1 [default = 0];
  if (has_orders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orders(), target);
  }

  // optional int32 sz = 2 [default = 0];
  if (has_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OrdersSzPair)
  return target;
}

int OrdersSzPair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OrdersSzPair)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 orders = 1 [default = 0];
    if (has_orders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orders());
    }

    // optional int32 sz = 2 [default = 0];
    if (has_sz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sz());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdersSzPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OrdersSzPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OrdersSzPair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrdersSzPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OrdersSzPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OrdersSzPair)
    MergeFrom(*source);
  }
}

void OrdersSzPair::MergeFrom(const OrdersSzPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OrdersSzPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orders()) {
      set_orders(from.orders());
    }
    if (from.has_sz()) {
      set_sz(from.sz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrdersSzPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OrdersSzPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersSzPair::CopyFrom(const OrdersSzPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OrdersSzPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersSzPair::IsInitialized() const {

  return true;
}

void OrdersSzPair::Swap(OrdersSzPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdersSzPair::InternalSwap(OrdersSzPair* other) {
  std::swap(orders_, other->orders_);
  std::swap(sz_, other->sz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrdersSzPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrdersSzPair_descriptor_;
  metadata.reflection = OrdersSzPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrdersSzPair

// optional int32 orders = 1 [default = 0];
bool OrdersSzPair::has_orders() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrdersSzPair::set_has_orders() {
  _has_bits_[0] |= 0x00000001u;
}
void OrdersSzPair::clear_has_orders() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrdersSzPair::clear_orders() {
  orders_ = 0;
  clear_has_orders();
}
 ::google::protobuf::int32 OrdersSzPair::orders() const {
  // @@protoc_insertion_point(field_get:XT.OrdersSzPair.orders)
  return orders_;
}
 void OrdersSzPair::set_orders(::google::protobuf::int32 value) {
  set_has_orders();
  orders_ = value;
  // @@protoc_insertion_point(field_set:XT.OrdersSzPair.orders)
}

// optional int32 sz = 2 [default = 0];
bool OrdersSzPair::has_sz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrdersSzPair::set_has_sz() {
  _has_bits_[0] |= 0x00000002u;
}
void OrdersSzPair::clear_has_sz() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrdersSzPair::clear_sz() {
  sz_ = 0;
  clear_has_sz();
}
 ::google::protobuf::int32 OrdersSzPair::sz() const {
  // @@protoc_insertion_point(field_get:XT.OrdersSzPair.sz)
  return sz_;
}
 void OrdersSzPair::set_sz(::google::protobuf::int32 value) {
  set_has_sz();
  sz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrdersSzPair.sz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderStatData::kOrderssentFieldNumber;
const int OrderStatData::kOrderscxledFieldNumber;
const int OrderStatData::kQuotessentFieldNumber;
const int OrderStatData::kQuotescxledFieldNumber;
const int OrderStatData::kWorkingbuyordersFieldNumber;
const int OrderStatData::kWorkingsellordersFieldNumber;
const int OrderStatData::kWorkingbuyszFieldNumber;
const int OrderStatData::kWorkingsellszFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderStatData::OrderStatData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OrderStatData)
}

void OrderStatData::InitAsDefaultInstance() {
}

OrderStatData::OrderStatData(const OrderStatData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OrderStatData)
}

void OrderStatData::SharedCtor() {
  _cached_size_ = 0;
  orderssent_ = 0;
  orderscxled_ = 0;
  quotessent_ = 0;
  quotescxled_ = 0;
  workingbuyorders_ = 0;
  workingsellorders_ = 0;
  workingbuysz_ = 0;
  workingsellsz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderStatData::~OrderStatData() {
  // @@protoc_insertion_point(destructor:XT.OrderStatData)
  SharedDtor();
}

void OrderStatData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderStatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderStatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderStatData_descriptor_;
}

const OrderStatData& OrderStatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OrderStatData* OrderStatData::default_instance_ = NULL;

OrderStatData* OrderStatData::New(::google::protobuf::Arena* arena) const {
  OrderStatData* n = new OrderStatData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderStatData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OrderStatData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OrderStatData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OrderStatData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(orderssent_, workingsellsz_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrderStatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OrderStatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 orderssent = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderssent_)));
          set_has_orderssent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orderscxled;
        break;
      }

      // optional int32 orderscxled = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_orderscxled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderscxled_)));
          set_has_orderscxled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quotessent;
        break;
      }

      // optional int32 quotessent = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_quotessent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotessent_)));
          set_has_quotessent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quotescxled;
        break;
      }

      // optional int32 quotescxled = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_quotescxled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotescxled_)));
          set_has_quotescxled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_workingbuyorders;
        break;
      }

      // optional int32 workingbuyorders = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_workingbuyorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingbuyorders_)));
          set_has_workingbuyorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_workingsellorders;
        break;
      }

      // optional int32 workingsellorders = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_workingsellorders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingsellorders_)));
          set_has_workingsellorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_workingbuysz;
        break;
      }

      // optional int32 workingbuysz = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_workingbuysz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingbuysz_)));
          set_has_workingbuysz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_workingsellsz;
        break;
      }

      // optional int32 workingsellsz = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_workingsellsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingsellsz_)));
          set_has_workingsellsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OrderStatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OrderStatData)
  return false;
#undef DO_
}

void OrderStatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OrderStatData)
  // optional int32 orderssent = 1 [default = 0];
  if (has_orderssent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderssent(), output);
  }

  // optional int32 orderscxled = 2 [default = 0];
  if (has_orderscxled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orderscxled(), output);
  }

  // optional int32 quotessent = 3 [default = 0];
  if (has_quotessent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quotessent(), output);
  }

  // optional int32 quotescxled = 4 [default = 0];
  if (has_quotescxled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quotescxled(), output);
  }

  // optional int32 workingbuyorders = 5 [default = 0];
  if (has_workingbuyorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->workingbuyorders(), output);
  }

  // optional int32 workingsellorders = 6 [default = 0];
  if (has_workingsellorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->workingsellorders(), output);
  }

  // optional int32 workingbuysz = 7 [default = 0];
  if (has_workingbuysz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->workingbuysz(), output);
  }

  // optional int32 workingsellsz = 8 [default = 0];
  if (has_workingsellsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->workingsellsz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OrderStatData)
}

::google::protobuf::uint8* OrderStatData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OrderStatData)
  // optional int32 orderssent = 1 [default = 0];
  if (has_orderssent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderssent(), target);
  }

  // optional int32 orderscxled = 2 [default = 0];
  if (has_orderscxled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orderscxled(), target);
  }

  // optional int32 quotessent = 3 [default = 0];
  if (has_quotessent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quotessent(), target);
  }

  // optional int32 quotescxled = 4 [default = 0];
  if (has_quotescxled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quotescxled(), target);
  }

  // optional int32 workingbuyorders = 5 [default = 0];
  if (has_workingbuyorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->workingbuyorders(), target);
  }

  // optional int32 workingsellorders = 6 [default = 0];
  if (has_workingsellorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->workingsellorders(), target);
  }

  // optional int32 workingbuysz = 7 [default = 0];
  if (has_workingbuysz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->workingbuysz(), target);
  }

  // optional int32 workingsellsz = 8 [default = 0];
  if (has_workingsellsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->workingsellsz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OrderStatData)
  return target;
}

int OrderStatData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OrderStatData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 orderssent = 1 [default = 0];
    if (has_orderssent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderssent());
    }

    // optional int32 orderscxled = 2 [default = 0];
    if (has_orderscxled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderscxled());
    }

    // optional int32 quotessent = 3 [default = 0];
    if (has_quotessent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotessent());
    }

    // optional int32 quotescxled = 4 [default = 0];
    if (has_quotescxled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotescxled());
    }

    // optional int32 workingbuyorders = 5 [default = 0];
    if (has_workingbuyorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingbuyorders());
    }

    // optional int32 workingsellorders = 6 [default = 0];
    if (has_workingsellorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingsellorders());
    }

    // optional int32 workingbuysz = 7 [default = 0];
    if (has_workingbuysz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingbuysz());
    }

    // optional int32 workingsellsz = 8 [default = 0];
    if (has_workingsellsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingsellsz());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderStatData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OrderStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OrderStatData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderStatData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OrderStatData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OrderStatData)
    MergeFrom(*source);
  }
}

void OrderStatData::MergeFrom(const OrderStatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OrderStatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderssent()) {
      set_orderssent(from.orderssent());
    }
    if (from.has_orderscxled()) {
      set_orderscxled(from.orderscxled());
    }
    if (from.has_quotessent()) {
      set_quotessent(from.quotessent());
    }
    if (from.has_quotescxled()) {
      set_quotescxled(from.quotescxled());
    }
    if (from.has_workingbuyorders()) {
      set_workingbuyorders(from.workingbuyorders());
    }
    if (from.has_workingsellorders()) {
      set_workingsellorders(from.workingsellorders());
    }
    if (from.has_workingbuysz()) {
      set_workingbuysz(from.workingbuysz());
    }
    if (from.has_workingsellsz()) {
      set_workingsellsz(from.workingsellsz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrderStatData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OrderStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderStatData::CopyFrom(const OrderStatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OrderStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderStatData::IsInitialized() const {

  return true;
}

void OrderStatData::Swap(OrderStatData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderStatData::InternalSwap(OrderStatData* other) {
  std::swap(orderssent_, other->orderssent_);
  std::swap(orderscxled_, other->orderscxled_);
  std::swap(quotessent_, other->quotessent_);
  std::swap(quotescxled_, other->quotescxled_);
  std::swap(workingbuyorders_, other->workingbuyorders_);
  std::swap(workingsellorders_, other->workingsellorders_);
  std::swap(workingbuysz_, other->workingbuysz_);
  std::swap(workingsellsz_, other->workingsellsz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderStatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderStatData_descriptor_;
  metadata.reflection = OrderStatData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderStatData

// optional int32 orderssent = 1 [default = 0];
bool OrderStatData::has_orderssent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderStatData::set_has_orderssent() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderStatData::clear_has_orderssent() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderStatData::clear_orderssent() {
  orderssent_ = 0;
  clear_has_orderssent();
}
 ::google::protobuf::int32 OrderStatData::orderssent() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.orderssent)
  return orderssent_;
}
 void OrderStatData::set_orderssent(::google::protobuf::int32 value) {
  set_has_orderssent();
  orderssent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.orderssent)
}

// optional int32 orderscxled = 2 [default = 0];
bool OrderStatData::has_orderscxled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderStatData::set_has_orderscxled() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderStatData::clear_has_orderscxled() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderStatData::clear_orderscxled() {
  orderscxled_ = 0;
  clear_has_orderscxled();
}
 ::google::protobuf::int32 OrderStatData::orderscxled() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.orderscxled)
  return orderscxled_;
}
 void OrderStatData::set_orderscxled(::google::protobuf::int32 value) {
  set_has_orderscxled();
  orderscxled_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.orderscxled)
}

// optional int32 quotessent = 3 [default = 0];
bool OrderStatData::has_quotessent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderStatData::set_has_quotessent() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderStatData::clear_has_quotessent() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderStatData::clear_quotessent() {
  quotessent_ = 0;
  clear_has_quotessent();
}
 ::google::protobuf::int32 OrderStatData::quotessent() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.quotessent)
  return quotessent_;
}
 void OrderStatData::set_quotessent(::google::protobuf::int32 value) {
  set_has_quotessent();
  quotessent_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.quotessent)
}

// optional int32 quotescxled = 4 [default = 0];
bool OrderStatData::has_quotescxled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrderStatData::set_has_quotescxled() {
  _has_bits_[0] |= 0x00000008u;
}
void OrderStatData::clear_has_quotescxled() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrderStatData::clear_quotescxled() {
  quotescxled_ = 0;
  clear_has_quotescxled();
}
 ::google::protobuf::int32 OrderStatData::quotescxled() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.quotescxled)
  return quotescxled_;
}
 void OrderStatData::set_quotescxled(::google::protobuf::int32 value) {
  set_has_quotescxled();
  quotescxled_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.quotescxled)
}

// optional int32 workingbuyorders = 5 [default = 0];
bool OrderStatData::has_workingbuyorders() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrderStatData::set_has_workingbuyorders() {
  _has_bits_[0] |= 0x00000010u;
}
void OrderStatData::clear_has_workingbuyorders() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrderStatData::clear_workingbuyorders() {
  workingbuyorders_ = 0;
  clear_has_workingbuyorders();
}
 ::google::protobuf::int32 OrderStatData::workingbuyorders() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.workingbuyorders)
  return workingbuyorders_;
}
 void OrderStatData::set_workingbuyorders(::google::protobuf::int32 value) {
  set_has_workingbuyorders();
  workingbuyorders_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.workingbuyorders)
}

// optional int32 workingsellorders = 6 [default = 0];
bool OrderStatData::has_workingsellorders() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrderStatData::set_has_workingsellorders() {
  _has_bits_[0] |= 0x00000020u;
}
void OrderStatData::clear_has_workingsellorders() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrderStatData::clear_workingsellorders() {
  workingsellorders_ = 0;
  clear_has_workingsellorders();
}
 ::google::protobuf::int32 OrderStatData::workingsellorders() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.workingsellorders)
  return workingsellorders_;
}
 void OrderStatData::set_workingsellorders(::google::protobuf::int32 value) {
  set_has_workingsellorders();
  workingsellorders_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.workingsellorders)
}

// optional int32 workingbuysz = 7 [default = 0];
bool OrderStatData::has_workingbuysz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrderStatData::set_has_workingbuysz() {
  _has_bits_[0] |= 0x00000040u;
}
void OrderStatData::clear_has_workingbuysz() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrderStatData::clear_workingbuysz() {
  workingbuysz_ = 0;
  clear_has_workingbuysz();
}
 ::google::protobuf::int32 OrderStatData::workingbuysz() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.workingbuysz)
  return workingbuysz_;
}
 void OrderStatData::set_workingbuysz(::google::protobuf::int32 value) {
  set_has_workingbuysz();
  workingbuysz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.workingbuysz)
}

// optional int32 workingsellsz = 8 [default = 0];
bool OrderStatData::has_workingsellsz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OrderStatData::set_has_workingsellsz() {
  _has_bits_[0] |= 0x00000080u;
}
void OrderStatData::clear_has_workingsellsz() {
  _has_bits_[0] &= ~0x00000080u;
}
void OrderStatData::clear_workingsellsz() {
  workingsellsz_ = 0;
  clear_has_workingsellsz();
}
 ::google::protobuf::int32 OrderStatData::workingsellsz() const {
  // @@protoc_insertion_point(field_get:XT.OrderStatData.workingsellsz)
  return workingsellsz_;
}
 void OrderStatData::set_workingsellsz(::google::protobuf::int32 value) {
  set_has_workingsellsz();
  workingsellsz_ = value;
  // @@protoc_insertion_point(field_set:XT.OrderStatData.workingsellsz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DayData::kPrevtradingdayFieldNumber;
const int DayData::kHasprevsettleFieldNumber;
const int DayData::kPrevsettlepxFieldNumber;
const int DayData::kHasprevcloseFieldNumber;
const int DayData::kPrevclosepxFieldNumber;
const int DayData::kPrevtotvolumeFieldNumber;
const int DayData::kPrevtotamountFieldNumber;
const int DayData::kPrevtotoiFieldNumber;
const int DayData::kTradingdayFieldNumber;
const int DayData::kHaslimitpxFieldNumber;
const int DayData::kLowerlimitpxFieldNumber;
const int DayData::kUpperlimitpxFieldNumber;
const int DayData::kOpenpriceFieldNumber;
const int DayData::kHighpxFieldNumber;
const int DayData::kLowpxFieldNumber;
const int DayData::kClosepriceFieldNumber;
const int DayData::kTotvolumeFieldNumber;
const int DayData::kTotamountFieldNumber;
const int DayData::kTotoiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DayData::DayData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.DayData)
}

void DayData::InitAsDefaultInstance() {
}

DayData::DayData(const DayData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.DayData)
}

void DayData::SharedCtor() {
  _cached_size_ = 0;
  prevtradingday_ = 0;
  hasprevsettle_ = 0;
  prevsettlepx_ = 0;
  hasprevclose_ = 0;
  prevclosepx_ = 0;
  prevtotvolume_ = 0;
  prevtotamount_ = 0;
  prevtotoi_ = 0;
  tradingday_ = 0;
  haslimitpx_ = 0;
  lowerlimitpx_ = 0;
  upperlimitpx_ = 0;
  openprice_ = 0;
  highpx_ = 0;
  lowpx_ = 0;
  closeprice_ = 0;
  totvolume_ = 0;
  totamount_ = 0;
  totoi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayData::~DayData() {
  // @@protoc_insertion_point(destructor:XT.DayData)
  SharedDtor();
}

void DayData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayData_descriptor_;
}

const DayData& DayData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

DayData* DayData::default_instance_ = NULL;

DayData* DayData::New(::google::protobuf::Arena* arena) const {
  DayData* n = new DayData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DayData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.DayData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DayData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DayData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(prevtradingday_, hasprevclose_);
    ZR_(prevtotamount_, prevtotoi_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(lowerlimitpx_, closeprice_);
    tradingday_ = 0;
    haslimitpx_ = 0;
  }
  ZR_(totvolume_, totoi_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.DayData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prevtradingday = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevtradingday_)));
          set_has_prevtradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hasprevsettle;
        break;
      }

      // optional int32 hasprevsettle = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_hasprevsettle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasprevsettle_)));
          set_has_hasprevsettle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_prevsettlepx;
        break;
      }

      // optional double prevsettlepx = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_prevsettlepx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevsettlepx_)));
          set_has_prevsettlepx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hasprevclose;
        break;
      }

      // optional int32 hasprevclose = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_hasprevclose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasprevclose_)));
          set_has_hasprevclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_prevclosepx;
        break;
      }

      // optional double prevclosepx = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_prevclosepx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevclosepx_)));
          set_has_prevclosepx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_prevtotvolume;
        break;
      }

      // optional double prevtotvolume = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_prevtotvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevtotvolume_)));
          set_has_prevtotvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_prevtotamount;
        break;
      }

      // optional double prevtotamount = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_prevtotamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevtotamount_)));
          set_has_prevtotamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_prevtotoi;
        break;
      }

      // optional double prevtotoi = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_prevtotoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevtotoi_)));
          set_has_prevtotoi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_tradingday;
        break;
      }

      // optional int32 tradingday = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_tradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_haslimitpx;
        break;
      }

      // optional int32 haslimitpx = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_haslimitpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haslimitpx_)));
          set_has_haslimitpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_lowerlimitpx;
        break;
      }

      // optional double lowerlimitpx = 12 [default = 0];
      case 12: {
        if (tag == 97) {
         parse_lowerlimitpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerlimitpx_)));
          set_has_lowerlimitpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_upperlimitpx;
        break;
      }

      // optional double upperlimitpx = 13 [default = 0];
      case 13: {
        if (tag == 105) {
         parse_upperlimitpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperlimitpx_)));
          set_has_upperlimitpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_openprice;
        break;
      }

      // optional double openprice = 14 [default = 0];
      case 14: {
        if (tag == 113) {
         parse_openprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_highpx;
        break;
      }

      // optional double highpx = 15 [default = 0];
      case 15: {
        if (tag == 121) {
         parse_highpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highpx_)));
          set_has_highpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_lowpx;
        break;
      }

      // optional double lowpx = 16 [default = 0];
      case 16: {
        if (tag == 129) {
         parse_lowpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowpx_)));
          set_has_lowpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_closeprice;
        break;
      }

      // optional double closeprice = 17 [default = 0];
      case 17: {
        if (tag == 137) {
         parse_closeprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_totvolume;
        break;
      }

      // optional double totvolume = 18 [default = 0];
      case 18: {
        if (tag == 145) {
         parse_totvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totvolume_)));
          set_has_totvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_totamount;
        break;
      }

      // optional double totamount = 19 [default = 0];
      case 19: {
        if (tag == 153) {
         parse_totamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totamount_)));
          set_has_totamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_totoi;
        break;
      }

      // optional double totoi = 20 [default = 0];
      case 20: {
        if (tag == 161) {
         parse_totoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totoi_)));
          set_has_totoi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.DayData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.DayData)
  return false;
#undef DO_
}

void DayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.DayData)
  // optional int32 prevtradingday = 1 [default = 0];
  if (has_prevtradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prevtradingday(), output);
  }

  // optional int32 hasprevsettle = 2 [default = 0];
  if (has_hasprevsettle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hasprevsettle(), output);
  }

  // optional double prevsettlepx = 3 [default = 0];
  if (has_prevsettlepx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->prevsettlepx(), output);
  }

  // optional int32 hasprevclose = 4 [default = 0];
  if (has_hasprevclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hasprevclose(), output);
  }

  // optional double prevclosepx = 5 [default = 0];
  if (has_prevclosepx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->prevclosepx(), output);
  }

  // optional double prevtotvolume = 6 [default = 0];
  if (has_prevtotvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->prevtotvolume(), output);
  }

  // optional double prevtotamount = 7 [default = 0];
  if (has_prevtotamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prevtotamount(), output);
  }

  // optional double prevtotoi = 8 [default = 0];
  if (has_prevtotoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->prevtotoi(), output);
  }

  // optional int32 tradingday = 10 [default = 0];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tradingday(), output);
  }

  // optional int32 haslimitpx = 11 [default = 0];
  if (has_haslimitpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->haslimitpx(), output);
  }

  // optional double lowerlimitpx = 12 [default = 0];
  if (has_lowerlimitpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->lowerlimitpx(), output);
  }

  // optional double upperlimitpx = 13 [default = 0];
  if (has_upperlimitpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->upperlimitpx(), output);
  }

  // optional double openprice = 14 [default = 0];
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->openprice(), output);
  }

  // optional double highpx = 15 [default = 0];
  if (has_highpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->highpx(), output);
  }

  // optional double lowpx = 16 [default = 0];
  if (has_lowpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->lowpx(), output);
  }

  // optional double closeprice = 17 [default = 0];
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->closeprice(), output);
  }

  // optional double totvolume = 18 [default = 0];
  if (has_totvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->totvolume(), output);
  }

  // optional double totamount = 19 [default = 0];
  if (has_totamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->totamount(), output);
  }

  // optional double totoi = 20 [default = 0];
  if (has_totoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->totoi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.DayData)
}

::google::protobuf::uint8* DayData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.DayData)
  // optional int32 prevtradingday = 1 [default = 0];
  if (has_prevtradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prevtradingday(), target);
  }

  // optional int32 hasprevsettle = 2 [default = 0];
  if (has_hasprevsettle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hasprevsettle(), target);
  }

  // optional double prevsettlepx = 3 [default = 0];
  if (has_prevsettlepx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->prevsettlepx(), target);
  }

  // optional int32 hasprevclose = 4 [default = 0];
  if (has_hasprevclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hasprevclose(), target);
  }

  // optional double prevclosepx = 5 [default = 0];
  if (has_prevclosepx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->prevclosepx(), target);
  }

  // optional double prevtotvolume = 6 [default = 0];
  if (has_prevtotvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->prevtotvolume(), target);
  }

  // optional double prevtotamount = 7 [default = 0];
  if (has_prevtotamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prevtotamount(), target);
  }

  // optional double prevtotoi = 8 [default = 0];
  if (has_prevtotoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->prevtotoi(), target);
  }

  // optional int32 tradingday = 10 [default = 0];
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tradingday(), target);
  }

  // optional int32 haslimitpx = 11 [default = 0];
  if (has_haslimitpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->haslimitpx(), target);
  }

  // optional double lowerlimitpx = 12 [default = 0];
  if (has_lowerlimitpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->lowerlimitpx(), target);
  }

  // optional double upperlimitpx = 13 [default = 0];
  if (has_upperlimitpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->upperlimitpx(), target);
  }

  // optional double openprice = 14 [default = 0];
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->openprice(), target);
  }

  // optional double highpx = 15 [default = 0];
  if (has_highpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->highpx(), target);
  }

  // optional double lowpx = 16 [default = 0];
  if (has_lowpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->lowpx(), target);
  }

  // optional double closeprice = 17 [default = 0];
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->closeprice(), target);
  }

  // optional double totvolume = 18 [default = 0];
  if (has_totvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->totvolume(), target);
  }

  // optional double totamount = 19 [default = 0];
  if (has_totamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->totamount(), target);
  }

  // optional double totoi = 20 [default = 0];
  if (has_totoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->totoi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.DayData)
  return target;
}

int DayData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.DayData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 prevtradingday = 1 [default = 0];
    if (has_prevtradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevtradingday());
    }

    // optional int32 hasprevsettle = 2 [default = 0];
    if (has_hasprevsettle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasprevsettle());
    }

    // optional double prevsettlepx = 3 [default = 0];
    if (has_prevsettlepx()) {
      total_size += 1 + 8;
    }

    // optional int32 hasprevclose = 4 [default = 0];
    if (has_hasprevclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasprevclose());
    }

    // optional double prevclosepx = 5 [default = 0];
    if (has_prevclosepx()) {
      total_size += 1 + 8;
    }

    // optional double prevtotvolume = 6 [default = 0];
    if (has_prevtotvolume()) {
      total_size += 1 + 8;
    }

    // optional double prevtotamount = 7 [default = 0];
    if (has_prevtotamount()) {
      total_size += 1 + 8;
    }

    // optional double prevtotoi = 8 [default = 0];
    if (has_prevtotoi()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 tradingday = 10 [default = 0];
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // optional int32 haslimitpx = 11 [default = 0];
    if (has_haslimitpx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haslimitpx());
    }

    // optional double lowerlimitpx = 12 [default = 0];
    if (has_lowerlimitpx()) {
      total_size += 1 + 8;
    }

    // optional double upperlimitpx = 13 [default = 0];
    if (has_upperlimitpx()) {
      total_size += 1 + 8;
    }

    // optional double openprice = 14 [default = 0];
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // optional double highpx = 15 [default = 0];
    if (has_highpx()) {
      total_size += 1 + 8;
    }

    // optional double lowpx = 16 [default = 0];
    if (has_lowpx()) {
      total_size += 2 + 8;
    }

    // optional double closeprice = 17 [default = 0];
    if (has_closeprice()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional double totvolume = 18 [default = 0];
    if (has_totvolume()) {
      total_size += 2 + 8;
    }

    // optional double totamount = 19 [default = 0];
    if (has_totamount()) {
      total_size += 2 + 8;
    }

    // optional double totoi = 20 [default = 0];
    if (has_totoi()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.DayData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DayData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DayData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.DayData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.DayData)
    MergeFrom(*source);
  }
}

void DayData::MergeFrom(const DayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.DayData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevtradingday()) {
      set_prevtradingday(from.prevtradingday());
    }
    if (from.has_hasprevsettle()) {
      set_hasprevsettle(from.hasprevsettle());
    }
    if (from.has_prevsettlepx()) {
      set_prevsettlepx(from.prevsettlepx());
    }
    if (from.has_hasprevclose()) {
      set_hasprevclose(from.hasprevclose());
    }
    if (from.has_prevclosepx()) {
      set_prevclosepx(from.prevclosepx());
    }
    if (from.has_prevtotvolume()) {
      set_prevtotvolume(from.prevtotvolume());
    }
    if (from.has_prevtotamount()) {
      set_prevtotamount(from.prevtotamount());
    }
    if (from.has_prevtotoi()) {
      set_prevtotoi(from.prevtotoi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_haslimitpx()) {
      set_haslimitpx(from.haslimitpx());
    }
    if (from.has_lowerlimitpx()) {
      set_lowerlimitpx(from.lowerlimitpx());
    }
    if (from.has_upperlimitpx()) {
      set_upperlimitpx(from.upperlimitpx());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highpx()) {
      set_highpx(from.highpx());
    }
    if (from.has_lowpx()) {
      set_lowpx(from.lowpx());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totvolume()) {
      set_totvolume(from.totvolume());
    }
    if (from.has_totamount()) {
      set_totamount(from.totamount());
    }
    if (from.has_totoi()) {
      set_totoi(from.totoi());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DayData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.DayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayData::CopyFrom(const DayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.DayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayData::IsInitialized() const {

  return true;
}

void DayData::Swap(DayData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DayData::InternalSwap(DayData* other) {
  std::swap(prevtradingday_, other->prevtradingday_);
  std::swap(hasprevsettle_, other->hasprevsettle_);
  std::swap(prevsettlepx_, other->prevsettlepx_);
  std::swap(hasprevclose_, other->hasprevclose_);
  std::swap(prevclosepx_, other->prevclosepx_);
  std::swap(prevtotvolume_, other->prevtotvolume_);
  std::swap(prevtotamount_, other->prevtotamount_);
  std::swap(prevtotoi_, other->prevtotoi_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(haslimitpx_, other->haslimitpx_);
  std::swap(lowerlimitpx_, other->lowerlimitpx_);
  std::swap(upperlimitpx_, other->upperlimitpx_);
  std::swap(openprice_, other->openprice_);
  std::swap(highpx_, other->highpx_);
  std::swap(lowpx_, other->lowpx_);
  std::swap(closeprice_, other->closeprice_);
  std::swap(totvolume_, other->totvolume_);
  std::swap(totamount_, other->totamount_);
  std::swap(totoi_, other->totoi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DayData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayData_descriptor_;
  metadata.reflection = DayData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DayData

// optional int32 prevtradingday = 1 [default = 0];
bool DayData::has_prevtradingday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DayData::set_has_prevtradingday() {
  _has_bits_[0] |= 0x00000001u;
}
void DayData::clear_has_prevtradingday() {
  _has_bits_[0] &= ~0x00000001u;
}
void DayData::clear_prevtradingday() {
  prevtradingday_ = 0;
  clear_has_prevtradingday();
}
 ::google::protobuf::int32 DayData::prevtradingday() const {
  // @@protoc_insertion_point(field_get:XT.DayData.prevtradingday)
  return prevtradingday_;
}
 void DayData::set_prevtradingday(::google::protobuf::int32 value) {
  set_has_prevtradingday();
  prevtradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.prevtradingday)
}

// optional int32 hasprevsettle = 2 [default = 0];
bool DayData::has_hasprevsettle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DayData::set_has_hasprevsettle() {
  _has_bits_[0] |= 0x00000002u;
}
void DayData::clear_has_hasprevsettle() {
  _has_bits_[0] &= ~0x00000002u;
}
void DayData::clear_hasprevsettle() {
  hasprevsettle_ = 0;
  clear_has_hasprevsettle();
}
 ::google::protobuf::int32 DayData::hasprevsettle() const {
  // @@protoc_insertion_point(field_get:XT.DayData.hasprevsettle)
  return hasprevsettle_;
}
 void DayData::set_hasprevsettle(::google::protobuf::int32 value) {
  set_has_hasprevsettle();
  hasprevsettle_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.hasprevsettle)
}

// optional double prevsettlepx = 3 [default = 0];
bool DayData::has_prevsettlepx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DayData::set_has_prevsettlepx() {
  _has_bits_[0] |= 0x00000004u;
}
void DayData::clear_has_prevsettlepx() {
  _has_bits_[0] &= ~0x00000004u;
}
void DayData::clear_prevsettlepx() {
  prevsettlepx_ = 0;
  clear_has_prevsettlepx();
}
 double DayData::prevsettlepx() const {
  // @@protoc_insertion_point(field_get:XT.DayData.prevsettlepx)
  return prevsettlepx_;
}
 void DayData::set_prevsettlepx(double value) {
  set_has_prevsettlepx();
  prevsettlepx_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.prevsettlepx)
}

// optional int32 hasprevclose = 4 [default = 0];
bool DayData::has_hasprevclose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DayData::set_has_hasprevclose() {
  _has_bits_[0] |= 0x00000008u;
}
void DayData::clear_has_hasprevclose() {
  _has_bits_[0] &= ~0x00000008u;
}
void DayData::clear_hasprevclose() {
  hasprevclose_ = 0;
  clear_has_hasprevclose();
}
 ::google::protobuf::int32 DayData::hasprevclose() const {
  // @@protoc_insertion_point(field_get:XT.DayData.hasprevclose)
  return hasprevclose_;
}
 void DayData::set_hasprevclose(::google::protobuf::int32 value) {
  set_has_hasprevclose();
  hasprevclose_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.hasprevclose)
}

// optional double prevclosepx = 5 [default = 0];
bool DayData::has_prevclosepx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DayData::set_has_prevclosepx() {
  _has_bits_[0] |= 0x00000010u;
}
void DayData::clear_has_prevclosepx() {
  _has_bits_[0] &= ~0x00000010u;
}
void DayData::clear_prevclosepx() {
  prevclosepx_ = 0;
  clear_has_prevclosepx();
}
 double DayData::prevclosepx() const {
  // @@protoc_insertion_point(field_get:XT.DayData.prevclosepx)
  return prevclosepx_;
}
 void DayData::set_prevclosepx(double value) {
  set_has_prevclosepx();
  prevclosepx_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.prevclosepx)
}

// optional double prevtotvolume = 6 [default = 0];
bool DayData::has_prevtotvolume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DayData::set_has_prevtotvolume() {
  _has_bits_[0] |= 0x00000020u;
}
void DayData::clear_has_prevtotvolume() {
  _has_bits_[0] &= ~0x00000020u;
}
void DayData::clear_prevtotvolume() {
  prevtotvolume_ = 0;
  clear_has_prevtotvolume();
}
 double DayData::prevtotvolume() const {
  // @@protoc_insertion_point(field_get:XT.DayData.prevtotvolume)
  return prevtotvolume_;
}
 void DayData::set_prevtotvolume(double value) {
  set_has_prevtotvolume();
  prevtotvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.prevtotvolume)
}

// optional double prevtotamount = 7 [default = 0];
bool DayData::has_prevtotamount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DayData::set_has_prevtotamount() {
  _has_bits_[0] |= 0x00000040u;
}
void DayData::clear_has_prevtotamount() {
  _has_bits_[0] &= ~0x00000040u;
}
void DayData::clear_prevtotamount() {
  prevtotamount_ = 0;
  clear_has_prevtotamount();
}
 double DayData::prevtotamount() const {
  // @@protoc_insertion_point(field_get:XT.DayData.prevtotamount)
  return prevtotamount_;
}
 void DayData::set_prevtotamount(double value) {
  set_has_prevtotamount();
  prevtotamount_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.prevtotamount)
}

// optional double prevtotoi = 8 [default = 0];
bool DayData::has_prevtotoi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DayData::set_has_prevtotoi() {
  _has_bits_[0] |= 0x00000080u;
}
void DayData::clear_has_prevtotoi() {
  _has_bits_[0] &= ~0x00000080u;
}
void DayData::clear_prevtotoi() {
  prevtotoi_ = 0;
  clear_has_prevtotoi();
}
 double DayData::prevtotoi() const {
  // @@protoc_insertion_point(field_get:XT.DayData.prevtotoi)
  return prevtotoi_;
}
 void DayData::set_prevtotoi(double value) {
  set_has_prevtotoi();
  prevtotoi_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.prevtotoi)
}

// optional int32 tradingday = 10 [default = 0];
bool DayData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DayData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000100u;
}
void DayData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000100u;
}
void DayData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
 ::google::protobuf::int32 DayData::tradingday() const {
  // @@protoc_insertion_point(field_get:XT.DayData.tradingday)
  return tradingday_;
}
 void DayData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.tradingday)
}

// optional int32 haslimitpx = 11 [default = 0];
bool DayData::has_haslimitpx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DayData::set_has_haslimitpx() {
  _has_bits_[0] |= 0x00000200u;
}
void DayData::clear_has_haslimitpx() {
  _has_bits_[0] &= ~0x00000200u;
}
void DayData::clear_haslimitpx() {
  haslimitpx_ = 0;
  clear_has_haslimitpx();
}
 ::google::protobuf::int32 DayData::haslimitpx() const {
  // @@protoc_insertion_point(field_get:XT.DayData.haslimitpx)
  return haslimitpx_;
}
 void DayData::set_haslimitpx(::google::protobuf::int32 value) {
  set_has_haslimitpx();
  haslimitpx_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.haslimitpx)
}

// optional double lowerlimitpx = 12 [default = 0];
bool DayData::has_lowerlimitpx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DayData::set_has_lowerlimitpx() {
  _has_bits_[0] |= 0x00000400u;
}
void DayData::clear_has_lowerlimitpx() {
  _has_bits_[0] &= ~0x00000400u;
}
void DayData::clear_lowerlimitpx() {
  lowerlimitpx_ = 0;
  clear_has_lowerlimitpx();
}
 double DayData::lowerlimitpx() const {
  // @@protoc_insertion_point(field_get:XT.DayData.lowerlimitpx)
  return lowerlimitpx_;
}
 void DayData::set_lowerlimitpx(double value) {
  set_has_lowerlimitpx();
  lowerlimitpx_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.lowerlimitpx)
}

// optional double upperlimitpx = 13 [default = 0];
bool DayData::has_upperlimitpx() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DayData::set_has_upperlimitpx() {
  _has_bits_[0] |= 0x00000800u;
}
void DayData::clear_has_upperlimitpx() {
  _has_bits_[0] &= ~0x00000800u;
}
void DayData::clear_upperlimitpx() {
  upperlimitpx_ = 0;
  clear_has_upperlimitpx();
}
 double DayData::upperlimitpx() const {
  // @@protoc_insertion_point(field_get:XT.DayData.upperlimitpx)
  return upperlimitpx_;
}
 void DayData::set_upperlimitpx(double value) {
  set_has_upperlimitpx();
  upperlimitpx_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.upperlimitpx)
}

// optional double openprice = 14 [default = 0];
bool DayData::has_openprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DayData::set_has_openprice() {
  _has_bits_[0] |= 0x00001000u;
}
void DayData::clear_has_openprice() {
  _has_bits_[0] &= ~0x00001000u;
}
void DayData::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
 double DayData::openprice() const {
  // @@protoc_insertion_point(field_get:XT.DayData.openprice)
  return openprice_;
}
 void DayData::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.openprice)
}

// optional double highpx = 15 [default = 0];
bool DayData::has_highpx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DayData::set_has_highpx() {
  _has_bits_[0] |= 0x00002000u;
}
void DayData::clear_has_highpx() {
  _has_bits_[0] &= ~0x00002000u;
}
void DayData::clear_highpx() {
  highpx_ = 0;
  clear_has_highpx();
}
 double DayData::highpx() const {
  // @@protoc_insertion_point(field_get:XT.DayData.highpx)
  return highpx_;
}
 void DayData::set_highpx(double value) {
  set_has_highpx();
  highpx_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.highpx)
}

// optional double lowpx = 16 [default = 0];
bool DayData::has_lowpx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DayData::set_has_lowpx() {
  _has_bits_[0] |= 0x00004000u;
}
void DayData::clear_has_lowpx() {
  _has_bits_[0] &= ~0x00004000u;
}
void DayData::clear_lowpx() {
  lowpx_ = 0;
  clear_has_lowpx();
}
 double DayData::lowpx() const {
  // @@protoc_insertion_point(field_get:XT.DayData.lowpx)
  return lowpx_;
}
 void DayData::set_lowpx(double value) {
  set_has_lowpx();
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.lowpx)
}

// optional double closeprice = 17 [default = 0];
bool DayData::has_closeprice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DayData::set_has_closeprice() {
  _has_bits_[0] |= 0x00008000u;
}
void DayData::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00008000u;
}
void DayData::clear_closeprice() {
  closeprice_ = 0;
  clear_has_closeprice();
}
 double DayData::closeprice() const {
  // @@protoc_insertion_point(field_get:XT.DayData.closeprice)
  return closeprice_;
}
 void DayData::set_closeprice(double value) {
  set_has_closeprice();
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.closeprice)
}

// optional double totvolume = 18 [default = 0];
bool DayData::has_totvolume() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DayData::set_has_totvolume() {
  _has_bits_[0] |= 0x00010000u;
}
void DayData::clear_has_totvolume() {
  _has_bits_[0] &= ~0x00010000u;
}
void DayData::clear_totvolume() {
  totvolume_ = 0;
  clear_has_totvolume();
}
 double DayData::totvolume() const {
  // @@protoc_insertion_point(field_get:XT.DayData.totvolume)
  return totvolume_;
}
 void DayData::set_totvolume(double value) {
  set_has_totvolume();
  totvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.totvolume)
}

// optional double totamount = 19 [default = 0];
bool DayData::has_totamount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DayData::set_has_totamount() {
  _has_bits_[0] |= 0x00020000u;
}
void DayData::clear_has_totamount() {
  _has_bits_[0] &= ~0x00020000u;
}
void DayData::clear_totamount() {
  totamount_ = 0;
  clear_has_totamount();
}
 double DayData::totamount() const {
  // @@protoc_insertion_point(field_get:XT.DayData.totamount)
  return totamount_;
}
 void DayData::set_totamount(double value) {
  set_has_totamount();
  totamount_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.totamount)
}

// optional double totoi = 20 [default = 0];
bool DayData::has_totoi() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DayData::set_has_totoi() {
  _has_bits_[0] |= 0x00040000u;
}
void DayData::clear_has_totoi() {
  _has_bits_[0] &= ~0x00040000u;
}
void DayData::clear_totoi() {
  totoi_ = 0;
  clear_has_totoi();
}
 double DayData::totoi() const {
  // @@protoc_insertion_point(field_get:XT.DayData.totoi)
  return totoi_;
}
 void DayData::set_totoi(double value) {
  set_has_totoi();
  totoi_ = value;
  // @@protoc_insertion_point(field_set:XT.DayData.totoi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BarInfo::kBegindtFieldNumber;
const int BarInfo::kEnddtFieldNumber;
const int BarInfo::kOpenpriceFieldNumber;
const int BarInfo::kHighpxFieldNumber;
const int BarInfo::kLowpxFieldNumber;
const int BarInfo::kClosepriceFieldNumber;
const int BarInfo::kVolumeFieldNumber;
const int BarInfo::kOichgFieldNumber;
const int BarInfo::kBsvoldiffFieldNumber;
const int BarInfo::kAmountFieldNumber;
const int BarInfo::kBsadiffFieldNumber;
const int BarInfo::kFlipupsFieldNumber;
const int BarInfo::kFlipdnsFieldNumber;
const int BarInfo::kFlagFieldNumber;
const int BarInfo::kTagdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BarInfo::BarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.BarInfo)
}

void BarInfo::InitAsDefaultInstance() {
}

BarInfo::BarInfo(const BarInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.BarInfo)
}

void BarInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  begindt_ = GOOGLE_LONGLONG(0);
  enddt_ = GOOGLE_LONGLONG(0);
  openprice_ = 0;
  highpx_ = 0;
  lowpx_ = 0;
  closeprice_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  oichg_ = GOOGLE_LONGLONG(0);
  bsvoldiff_ = GOOGLE_LONGLONG(0);
  amount_ = 0;
  bsadiff_ = 0;
  flipups_ = 0;
  flipdns_ = 0;
  flag_ = 0;
  tagdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BarInfo::~BarInfo() {
  // @@protoc_insertion_point(destructor:XT.BarInfo)
  SharedDtor();
}

void BarInfo::SharedDtor() {
  tagdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BarInfo_descriptor_;
}

const BarInfo& BarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

BarInfo* BarInfo::default_instance_ = NULL;

BarInfo* BarInfo::New(::google::protobuf::Arena* arena) const {
  BarInfo* n = new BarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.BarInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BarInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BarInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(begindt_, oichg_);
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(bsvoldiff_, flipdns_);
    flag_ = 0;
    if (has_tagdata()) {
      tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.BarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 begindt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begindt_)));
          set_has_begindt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enddt;
        break;
      }

      // optional int64 enddt = 2;
      case 2: {
        if (tag == 16) {
         parse_enddt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enddt_)));
          set_has_enddt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_openprice;
        break;
      }

      // optional double openprice = 3;
      case 3: {
        if (tag == 25) {
         parse_openprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_highpx;
        break;
      }

      // optional double highpx = 4;
      case 4: {
        if (tag == 33) {
         parse_highpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highpx_)));
          set_has_highpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lowpx;
        break;
      }

      // optional double lowpx = 5;
      case 5: {
        if (tag == 41) {
         parse_lowpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowpx_)));
          set_has_lowpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_closeprice;
        break;
      }

      // optional double closeprice = 6;
      case 6: {
        if (tag == 49) {
         parse_closeprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_volume;
        break;
      }

      // optional int64 volume = 7;
      case 7: {
        if (tag == 56) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_oichg;
        break;
      }

      // optional int64 oichg = 8;
      case 8: {
        if (tag == 64) {
         parse_oichg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oichg_)));
          set_has_oichg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bsvoldiff;
        break;
      }

      // optional int64 bsvoldiff = 9;
      case 9: {
        if (tag == 72) {
         parse_bsvoldiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsvoldiff_)));
          set_has_bsvoldiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_amount;
        break;
      }

      // optional double amount = 10;
      case 10: {
        if (tag == 81) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_bsadiff;
        break;
      }

      // optional double bsadiff = 11;
      case 11: {
        if (tag == 89) {
         parse_bsadiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bsadiff_)));
          set_has_bsadiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_flipups;
        break;
      }

      // optional double flipups = 12;
      case 12: {
        if (tag == 97) {
         parse_flipups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flipups_)));
          set_has_flipups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_flipdns;
        break;
      }

      // optional double flipdns = 13;
      case 13: {
        if (tag == 105) {
         parse_flipdns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flipdns_)));
          set_has_flipdns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_flag;
        break;
      }

      // optional int32 flag = 14;
      case 14: {
        if (tag == 112) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_tagdata;
        break;
      }

      // optional string tagdata = 15;
      case 15: {
        if (tag == 122) {
         parse_tagdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagdata().data(), this->tagdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.BarInfo.tagdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.BarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.BarInfo)
  return false;
#undef DO_
}

void BarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.BarInfo)
  // optional int64 begindt = 1;
  if (has_begindt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begindt(), output);
  }

  // optional int64 enddt = 2;
  if (has_enddt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->enddt(), output);
  }

  // optional double openprice = 3;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openprice(), output);
  }

  // optional double highpx = 4;
  if (has_highpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->highpx(), output);
  }

  // optional double lowpx = 5;
  if (has_lowpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lowpx(), output);
  }

  // optional double closeprice = 6;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->closeprice(), output);
  }

  // optional int64 volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->volume(), output);
  }

  // optional int64 oichg = 8;
  if (has_oichg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->oichg(), output);
  }

  // optional int64 bsvoldiff = 9;
  if (has_bsvoldiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->bsvoldiff(), output);
  }

  // optional double amount = 10;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->amount(), output);
  }

  // optional double bsadiff = 11;
  if (has_bsadiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->bsadiff(), output);
  }

  // optional double flipups = 12;
  if (has_flipups()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->flipups(), output);
  }

  // optional double flipdns = 13;
  if (has_flipdns()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->flipdns(), output);
  }

  // optional int32 flag = 14;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->flag(), output);
  }

  // optional string tagdata = 15;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.BarInfo.tagdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->tagdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.BarInfo)
}

::google::protobuf::uint8* BarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.BarInfo)
  // optional int64 begindt = 1;
  if (has_begindt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begindt(), target);
  }

  // optional int64 enddt = 2;
  if (has_enddt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->enddt(), target);
  }

  // optional double openprice = 3;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->openprice(), target);
  }

  // optional double highpx = 4;
  if (has_highpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->highpx(), target);
  }

  // optional double lowpx = 5;
  if (has_lowpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lowpx(), target);
  }

  // optional double closeprice = 6;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->closeprice(), target);
  }

  // optional int64 volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->volume(), target);
  }

  // optional int64 oichg = 8;
  if (has_oichg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->oichg(), target);
  }

  // optional int64 bsvoldiff = 9;
  if (has_bsvoldiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->bsvoldiff(), target);
  }

  // optional double amount = 10;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->amount(), target);
  }

  // optional double bsadiff = 11;
  if (has_bsadiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->bsadiff(), target);
  }

  // optional double flipups = 12;
  if (has_flipups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->flipups(), target);
  }

  // optional double flipdns = 13;
  if (has_flipdns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->flipdns(), target);
  }

  // optional int32 flag = 14;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->flag(), target);
  }

  // optional string tagdata = 15;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.BarInfo.tagdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tagdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.BarInfo)
  return target;
}

int BarInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.BarInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 begindt = 1;
    if (has_begindt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begindt());
    }

    // optional int64 enddt = 2;
    if (has_enddt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enddt());
    }

    // optional double openprice = 3;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // optional double highpx = 4;
    if (has_highpx()) {
      total_size += 1 + 8;
    }

    // optional double lowpx = 5;
    if (has_lowpx()) {
      total_size += 1 + 8;
    }

    // optional double closeprice = 6;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

    // optional int64 volume = 7;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional int64 oichg = 8;
    if (has_oichg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oichg());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int64 bsvoldiff = 9;
    if (has_bsvoldiff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bsvoldiff());
    }

    // optional double amount = 10;
    if (has_amount()) {
      total_size += 1 + 8;
    }

    // optional double bsadiff = 11;
    if (has_bsadiff()) {
      total_size += 1 + 8;
    }

    // optional double flipups = 12;
    if (has_flipups()) {
      total_size += 1 + 8;
    }

    // optional double flipdns = 13;
    if (has_flipdns()) {
      total_size += 1 + 8;
    }

    // optional int32 flag = 14;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional string tagdata = 15;
    if (has_tagdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagdata());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.BarInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BarInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.BarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.BarInfo)
    MergeFrom(*source);
  }
}

void BarInfo::MergeFrom(const BarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.BarInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begindt()) {
      set_begindt(from.begindt());
    }
    if (from.has_enddt()) {
      set_enddt(from.enddt());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highpx()) {
      set_highpx(from.highpx());
    }
    if (from.has_lowpx()) {
      set_lowpx(from.lowpx());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_oichg()) {
      set_oichg(from.oichg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bsvoldiff()) {
      set_bsvoldiff(from.bsvoldiff());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bsadiff()) {
      set_bsadiff(from.bsadiff());
    }
    if (from.has_flipups()) {
      set_flipups(from.flipups());
    }
    if (from.has_flipdns()) {
      set_flipdns(from.flipdns());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_tagdata()) {
      set_has_tagdata();
      tagdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.BarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarInfo::CopyFrom(const BarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.BarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarInfo::IsInitialized() const {

  return true;
}

void BarInfo::Swap(BarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BarInfo::InternalSwap(BarInfo* other) {
  std::swap(begindt_, other->begindt_);
  std::swap(enddt_, other->enddt_);
  std::swap(openprice_, other->openprice_);
  std::swap(highpx_, other->highpx_);
  std::swap(lowpx_, other->lowpx_);
  std::swap(closeprice_, other->closeprice_);
  std::swap(volume_, other->volume_);
  std::swap(oichg_, other->oichg_);
  std::swap(bsvoldiff_, other->bsvoldiff_);
  std::swap(amount_, other->amount_);
  std::swap(bsadiff_, other->bsadiff_);
  std::swap(flipups_, other->flipups_);
  std::swap(flipdns_, other->flipdns_);
  std::swap(flag_, other->flag_);
  tagdata_.Swap(&other->tagdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BarInfo_descriptor_;
  metadata.reflection = BarInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BarInfo

// optional int64 begindt = 1;
bool BarInfo::has_begindt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BarInfo::set_has_begindt() {
  _has_bits_[0] |= 0x00000001u;
}
void BarInfo::clear_has_begindt() {
  _has_bits_[0] &= ~0x00000001u;
}
void BarInfo::clear_begindt() {
  begindt_ = GOOGLE_LONGLONG(0);
  clear_has_begindt();
}
 ::google::protobuf::int64 BarInfo::begindt() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.begindt)
  return begindt_;
}
 void BarInfo::set_begindt(::google::protobuf::int64 value) {
  set_has_begindt();
  begindt_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.begindt)
}

// optional int64 enddt = 2;
bool BarInfo::has_enddt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BarInfo::set_has_enddt() {
  _has_bits_[0] |= 0x00000002u;
}
void BarInfo::clear_has_enddt() {
  _has_bits_[0] &= ~0x00000002u;
}
void BarInfo::clear_enddt() {
  enddt_ = GOOGLE_LONGLONG(0);
  clear_has_enddt();
}
 ::google::protobuf::int64 BarInfo::enddt() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.enddt)
  return enddt_;
}
 void BarInfo::set_enddt(::google::protobuf::int64 value) {
  set_has_enddt();
  enddt_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.enddt)
}

// optional double openprice = 3;
bool BarInfo::has_openprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BarInfo::set_has_openprice() {
  _has_bits_[0] |= 0x00000004u;
}
void BarInfo::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000004u;
}
void BarInfo::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
 double BarInfo::openprice() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.openprice)
  return openprice_;
}
 void BarInfo::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.openprice)
}

// optional double highpx = 4;
bool BarInfo::has_highpx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BarInfo::set_has_highpx() {
  _has_bits_[0] |= 0x00000008u;
}
void BarInfo::clear_has_highpx() {
  _has_bits_[0] &= ~0x00000008u;
}
void BarInfo::clear_highpx() {
  highpx_ = 0;
  clear_has_highpx();
}
 double BarInfo::highpx() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.highpx)
  return highpx_;
}
 void BarInfo::set_highpx(double value) {
  set_has_highpx();
  highpx_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.highpx)
}

// optional double lowpx = 5;
bool BarInfo::has_lowpx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BarInfo::set_has_lowpx() {
  _has_bits_[0] |= 0x00000010u;
}
void BarInfo::clear_has_lowpx() {
  _has_bits_[0] &= ~0x00000010u;
}
void BarInfo::clear_lowpx() {
  lowpx_ = 0;
  clear_has_lowpx();
}
 double BarInfo::lowpx() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.lowpx)
  return lowpx_;
}
 void BarInfo::set_lowpx(double value) {
  set_has_lowpx();
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.lowpx)
}

// optional double closeprice = 6;
bool BarInfo::has_closeprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BarInfo::set_has_closeprice() {
  _has_bits_[0] |= 0x00000020u;
}
void BarInfo::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00000020u;
}
void BarInfo::clear_closeprice() {
  closeprice_ = 0;
  clear_has_closeprice();
}
 double BarInfo::closeprice() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.closeprice)
  return closeprice_;
}
 void BarInfo::set_closeprice(double value) {
  set_has_closeprice();
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.closeprice)
}

// optional int64 volume = 7;
bool BarInfo::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BarInfo::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
void BarInfo::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
void BarInfo::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 BarInfo::volume() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.volume)
  return volume_;
}
 void BarInfo::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.volume)
}

// optional int64 oichg = 8;
bool BarInfo::has_oichg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BarInfo::set_has_oichg() {
  _has_bits_[0] |= 0x00000080u;
}
void BarInfo::clear_has_oichg() {
  _has_bits_[0] &= ~0x00000080u;
}
void BarInfo::clear_oichg() {
  oichg_ = GOOGLE_LONGLONG(0);
  clear_has_oichg();
}
 ::google::protobuf::int64 BarInfo::oichg() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.oichg)
  return oichg_;
}
 void BarInfo::set_oichg(::google::protobuf::int64 value) {
  set_has_oichg();
  oichg_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.oichg)
}

// optional int64 bsvoldiff = 9;
bool BarInfo::has_bsvoldiff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BarInfo::set_has_bsvoldiff() {
  _has_bits_[0] |= 0x00000100u;
}
void BarInfo::clear_has_bsvoldiff() {
  _has_bits_[0] &= ~0x00000100u;
}
void BarInfo::clear_bsvoldiff() {
  bsvoldiff_ = GOOGLE_LONGLONG(0);
  clear_has_bsvoldiff();
}
 ::google::protobuf::int64 BarInfo::bsvoldiff() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.bsvoldiff)
  return bsvoldiff_;
}
 void BarInfo::set_bsvoldiff(::google::protobuf::int64 value) {
  set_has_bsvoldiff();
  bsvoldiff_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.bsvoldiff)
}

// optional double amount = 10;
bool BarInfo::has_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BarInfo::set_has_amount() {
  _has_bits_[0] |= 0x00000200u;
}
void BarInfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
void BarInfo::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 double BarInfo::amount() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.amount)
  return amount_;
}
 void BarInfo::set_amount(double value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.amount)
}

// optional double bsadiff = 11;
bool BarInfo::has_bsadiff() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BarInfo::set_has_bsadiff() {
  _has_bits_[0] |= 0x00000400u;
}
void BarInfo::clear_has_bsadiff() {
  _has_bits_[0] &= ~0x00000400u;
}
void BarInfo::clear_bsadiff() {
  bsadiff_ = 0;
  clear_has_bsadiff();
}
 double BarInfo::bsadiff() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.bsadiff)
  return bsadiff_;
}
 void BarInfo::set_bsadiff(double value) {
  set_has_bsadiff();
  bsadiff_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.bsadiff)
}

// optional double flipups = 12;
bool BarInfo::has_flipups() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BarInfo::set_has_flipups() {
  _has_bits_[0] |= 0x00000800u;
}
void BarInfo::clear_has_flipups() {
  _has_bits_[0] &= ~0x00000800u;
}
void BarInfo::clear_flipups() {
  flipups_ = 0;
  clear_has_flipups();
}
 double BarInfo::flipups() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.flipups)
  return flipups_;
}
 void BarInfo::set_flipups(double value) {
  set_has_flipups();
  flipups_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.flipups)
}

// optional double flipdns = 13;
bool BarInfo::has_flipdns() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BarInfo::set_has_flipdns() {
  _has_bits_[0] |= 0x00001000u;
}
void BarInfo::clear_has_flipdns() {
  _has_bits_[0] &= ~0x00001000u;
}
void BarInfo::clear_flipdns() {
  flipdns_ = 0;
  clear_has_flipdns();
}
 double BarInfo::flipdns() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.flipdns)
  return flipdns_;
}
 void BarInfo::set_flipdns(double value) {
  set_has_flipdns();
  flipdns_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.flipdns)
}

// optional int32 flag = 14;
bool BarInfo::has_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BarInfo::set_has_flag() {
  _has_bits_[0] |= 0x00002000u;
}
void BarInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
void BarInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
 ::google::protobuf::int32 BarInfo::flag() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.flag)
  return flag_;
}
 void BarInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:XT.BarInfo.flag)
}

// optional string tagdata = 15;
bool BarInfo::has_tagdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BarInfo::set_has_tagdata() {
  _has_bits_[0] |= 0x00004000u;
}
void BarInfo::clear_has_tagdata() {
  _has_bits_[0] &= ~0x00004000u;
}
void BarInfo::clear_tagdata() {
  tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagdata();
}
 const ::std::string& BarInfo::tagdata() const {
  // @@protoc_insertion_point(field_get:XT.BarInfo.tagdata)
  return tagdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BarInfo::set_tagdata(const ::std::string& value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.BarInfo.tagdata)
}
 void BarInfo::set_tagdata(const char* value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.BarInfo.tagdata)
}
 void BarInfo::set_tagdata(const char* value, size_t size) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.BarInfo.tagdata)
}
 ::std::string* BarInfo::mutable_tagdata() {
  set_has_tagdata();
  // @@protoc_insertion_point(field_mutable:XT.BarInfo.tagdata)
  return tagdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BarInfo::release_tagdata() {
  // @@protoc_insertion_point(field_release:XT.BarInfo.tagdata)
  clear_has_tagdata();
  return tagdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BarInfo::set_allocated_tagdata(::std::string* tagdata) {
  if (tagdata != NULL) {
    set_has_tagdata();
  } else {
    clear_has_tagdata();
  }
  tagdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagdata);
  // @@protoc_insertion_point(field_set_allocated:XT.BarInfo.tagdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BarInfoMap::kBarInfoMapFieldNumber;
const int BarInfoMap::kTagdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BarInfoMap::BarInfoMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.BarInfoMap)
}

void BarInfoMap::InitAsDefaultInstance() {
}

BarInfoMap::BarInfoMap(const BarInfoMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.BarInfoMap)
}

void BarInfoMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  barinfomap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  barinfomap_.SetEntryDescriptor(
      &::XT::BarInfoMap_BarInfoMapEntry_descriptor_);
  tagdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BarInfoMap::~BarInfoMap() {
  // @@protoc_insertion_point(destructor:XT.BarInfoMap)
  SharedDtor();
}

void BarInfoMap::SharedDtor() {
  tagdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BarInfoMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BarInfoMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BarInfoMap_descriptor_;
}

const BarInfoMap& BarInfoMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

BarInfoMap* BarInfoMap::default_instance_ = NULL;

BarInfoMap* BarInfoMap::New(::google::protobuf::Arena* arena) const {
  BarInfoMap* n = new BarInfoMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BarInfoMap::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.BarInfoMap)
  if (has_tagdata()) {
    tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  barinfomap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BarInfoMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.BarInfoMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .XT.BarInfo> barInfoMap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_barInfoMap:
          BarInfoMap_BarInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::XT::BarInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo > > parser(&barinfomap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_barInfoMap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_tagdata;
        break;
      }

      // optional string tagdata = 2;
      case 2: {
        if (tag == 18) {
         parse_tagdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagdata().data(), this->tagdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.BarInfoMap.tagdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.BarInfoMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.BarInfoMap)
  return false;
#undef DO_
}

void BarInfoMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.BarInfoMap)
  // map<int64, .XT.BarInfo> barInfoMap = 1;
  if (!this->barinfomap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->barinfomap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->barinfomap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::const_iterator
          it = this->barinfomap().begin();
          it != this->barinfomap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BarInfoMap_BarInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(barinfomap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<BarInfoMap_BarInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::const_iterator
          it = this->barinfomap().begin();
          it != this->barinfomap().end(); ++it) {
        entry.reset(barinfomap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // optional string tagdata = 2;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.BarInfoMap.tagdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tagdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.BarInfoMap)
}

::google::protobuf::uint8* BarInfoMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.BarInfoMap)
  // map<int64, .XT.BarInfo> barInfoMap = 1;
  if (!this->barinfomap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->barinfomap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->barinfomap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::const_iterator
          it = this->barinfomap().begin();
          it != this->barinfomap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BarInfoMap_BarInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(barinfomap_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<BarInfoMap_BarInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::const_iterator
          it = this->barinfomap().begin();
          it != this->barinfomap().end(); ++it) {
        entry.reset(barinfomap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // optional string tagdata = 2;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.BarInfoMap.tagdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tagdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.BarInfoMap)
  return target;
}

int BarInfoMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.BarInfoMap)
  int total_size = 0;

  // optional string tagdata = 2;
  if (has_tagdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tagdata());
  }

  // map<int64, .XT.BarInfo> barInfoMap = 1;
  total_size += 1 * this->barinfomap_size();
  {
    ::google::protobuf::scoped_ptr<BarInfoMap_BarInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >::const_iterator
        it = this->barinfomap().begin();
        it != this->barinfomap().end(); ++it) {
      entry.reset(barinfomap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BarInfoMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.BarInfoMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BarInfoMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BarInfoMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.BarInfoMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.BarInfoMap)
    MergeFrom(*source);
  }
}

void BarInfoMap::MergeFrom(const BarInfoMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.BarInfoMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  barinfomap_.MergeFrom(from.barinfomap_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tagdata()) {
      set_has_tagdata();
      tagdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BarInfoMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.BarInfoMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarInfoMap::CopyFrom(const BarInfoMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.BarInfoMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarInfoMap::IsInitialized() const {

  return true;
}

void BarInfoMap::Swap(BarInfoMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BarInfoMap::InternalSwap(BarInfoMap* other) {
  barinfomap_.Swap(&other->barinfomap_);
  tagdata_.Swap(&other->tagdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BarInfoMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BarInfoMap_descriptor_;
  metadata.reflection = BarInfoMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BarInfoMap

// map<int64, .XT.BarInfo> barInfoMap = 1;
int BarInfoMap::barinfomap_size() const {
  return barinfomap_.size();
}
void BarInfoMap::clear_barinfomap() {
  barinfomap_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >&
BarInfoMap::barinfomap() const {
  // @@protoc_insertion_point(field_map:XT.BarInfoMap.barInfoMap)
  return barinfomap_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::XT::BarInfo >*
BarInfoMap::mutable_barinfomap() {
  // @@protoc_insertion_point(field_mutable_map:XT.BarInfoMap.barInfoMap)
  return barinfomap_.MutableMap();
}

// optional string tagdata = 2;
bool BarInfoMap::has_tagdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BarInfoMap::set_has_tagdata() {
  _has_bits_[0] |= 0x00000002u;
}
void BarInfoMap::clear_has_tagdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void BarInfoMap::clear_tagdata() {
  tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagdata();
}
 const ::std::string& BarInfoMap::tagdata() const {
  // @@protoc_insertion_point(field_get:XT.BarInfoMap.tagdata)
  return tagdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BarInfoMap::set_tagdata(const ::std::string& value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.BarInfoMap.tagdata)
}
 void BarInfoMap::set_tagdata(const char* value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.BarInfoMap.tagdata)
}
 void BarInfoMap::set_tagdata(const char* value, size_t size) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.BarInfoMap.tagdata)
}
 ::std::string* BarInfoMap::mutable_tagdata() {
  set_has_tagdata();
  // @@protoc_insertion_point(field_mutable:XT.BarInfoMap.tagdata)
  return tagdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BarInfoMap::release_tagdata() {
  // @@protoc_insertion_point(field_release:XT.BarInfoMap.tagdata)
  clear_has_tagdata();
  return tagdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BarInfoMap::set_allocated_tagdata(::std::string* tagdata) {
  if (tagdata != NULL) {
    set_has_tagdata();
  } else {
    clear_has_tagdata();
  }
  tagdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagdata);
  // @@protoc_insertion_point(field_set_allocated:XT.BarInfoMap.tagdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductInfo::kExchangeidFieldNumber;
const int ProductInfo::kSecuritytypeFieldNumber;
const int ProductInfo::kProductidFieldNumber;
const int ProductInfo::kUnderlyingsymbolFieldNumber;
const int ProductInfo::kPricetickFieldNumber;
const int ProductInfo::kContractmultiplierFieldNumber;
const int ProductInfo::kTagdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductInfo::ProductInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.ProductInfo)
}

void ProductInfo::InitAsDefaultInstance() {
}

ProductInfo::ProductInfo(const ProductInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.ProductInfo)
}

void ProductInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetick_ = 0;
  contractmultiplier_ = 0;
  tagdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductInfo::~ProductInfo() {
  // @@protoc_insertion_point(destructor:XT.ProductInfo)
  SharedDtor();
}

void ProductInfo::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyingsymbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductInfo_descriptor_;
}

const ProductInfo& ProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

ProductInfo* ProductInfo::default_instance_ = NULL;

ProductInfo* ProductInfo::New(::google::protobuf::Arena* arena) const {
  ProductInfo* n = new ProductInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.ProductInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProductInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProductInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(pricetick_, contractmultiplier_);
    if (has_exchangeid()) {
      exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_securitytype()) {
      securitytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_productid()) {
      productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_underlyingsymbol()) {
      underlyingsymbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tagdata()) {
      tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.ProductInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exchangeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ProductInfo.exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_securitytype;
        break;
      }

      // optional string securitytype = 2;
      case 2: {
        if (tag == 18) {
         parse_securitytype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitytype().data(), this->securitytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ProductInfo.securitytype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_productid;
        break;
      }

      // optional string productid = 3;
      case 3: {
        if (tag == 26) {
         parse_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ProductInfo.productid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_underlyingsymbol;
        break;
      }

      // optional string underlyingsymbol = 4;
      case 4: {
        if (tag == 34) {
         parse_underlyingsymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlyingsymbol().data(), this->underlyingsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ProductInfo.underlyingsymbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_pricetick;
        break;
      }

      // optional double pricetick = 5;
      case 5: {
        if (tag == 41) {
         parse_pricetick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_contractmultiplier;
        break;
      }

      // optional double contractmultiplier = 6;
      case 6: {
        if (tag == 49) {
         parse_contractmultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contractmultiplier_)));
          set_has_contractmultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tagdata;
        break;
      }

      // optional string tagdata = 7;
      case 7: {
        if (tag == 58) {
         parse_tagdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagdata().data(), this->tagdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.ProductInfo.tagdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.ProductInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.ProductInfo)
  return false;
#undef DO_
}

void ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.ProductInfo)
  // optional string exchangeid = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchangeid(), output);
  }

  // optional string securitytype = 2;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitytype().data(), this->securitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.securitytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->securitytype(), output);
  }

  // optional string productid = 3;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.productid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->productid(), output);
  }

  // optional string underlyingsymbol = 4;
  if (has_underlyingsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), this->underlyingsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.underlyingsymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->underlyingsymbol(), output);
  }

  // optional double pricetick = 5;
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pricetick(), output);
  }

  // optional double contractmultiplier = 6;
  if (has_contractmultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->contractmultiplier(), output);
  }

  // optional string tagdata = 7;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.tagdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tagdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.ProductInfo)
}

::google::protobuf::uint8* ProductInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.ProductInfo)
  // optional string exchangeid = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchangeid(), target);
  }

  // optional string securitytype = 2;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitytype().data(), this->securitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.securitytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->securitytype(), target);
  }

  // optional string productid = 3;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.productid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->productid(), target);
  }

  // optional string underlyingsymbol = 4;
  if (has_underlyingsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), this->underlyingsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.underlyingsymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->underlyingsymbol(), target);
  }

  // optional double pricetick = 5;
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pricetick(), target);
  }

  // optional double contractmultiplier = 6;
  if (has_contractmultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->contractmultiplier(), target);
  }

  // optional string tagdata = 7;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.ProductInfo.tagdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tagdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.ProductInfo)
  return target;
}

int ProductInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.ProductInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string exchangeid = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string securitytype = 2;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitytype());
    }

    // optional string productid = 3;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string underlyingsymbol = 4;
    if (has_underlyingsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlyingsymbol());
    }

    // optional double pricetick = 5;
    if (has_pricetick()) {
      total_size += 1 + 8;
    }

    // optional double contractmultiplier = 6;
    if (has_contractmultiplier()) {
      total_size += 1 + 8;
    }

    // optional string tagdata = 7;
    if (has_tagdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagdata());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.ProductInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProductInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.ProductInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.ProductInfo)
    MergeFrom(*source);
  }
}

void ProductInfo::MergeFrom(const ProductInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.ProductInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_has_exchangeid();
      exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
    }
    if (from.has_securitytype()) {
      set_has_securitytype();
      securitytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitytype_);
    }
    if (from.has_productid()) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (from.has_underlyingsymbol()) {
      set_has_underlyingsymbol();
      underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
    if (from.has_contractmultiplier()) {
      set_contractmultiplier(from.contractmultiplier());
    }
    if (from.has_tagdata()) {
      set_has_tagdata();
      tagdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.ProductInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInfo::CopyFrom(const ProductInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.ProductInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInfo::IsInitialized() const {

  return true;
}

void ProductInfo::Swap(ProductInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductInfo::InternalSwap(ProductInfo* other) {
  exchangeid_.Swap(&other->exchangeid_);
  securitytype_.Swap(&other->securitytype_);
  productid_.Swap(&other->productid_);
  underlyingsymbol_.Swap(&other->underlyingsymbol_);
  std::swap(pricetick_, other->pricetick_);
  std::swap(contractmultiplier_, other->contractmultiplier_);
  tagdata_.Swap(&other->tagdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductInfo_descriptor_;
  metadata.reflection = ProductInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductInfo

// optional string exchangeid = 1;
bool ProductInfo::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProductInfo::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
void ProductInfo::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProductInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeid();
}
 const ::std::string& ProductInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:XT.ProductInfo.exchangeid)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ProductInfo.exchangeid)
}
 void ProductInfo::set_exchangeid(const char* value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ProductInfo.exchangeid)
}
 void ProductInfo::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ProductInfo.exchangeid)
}
 ::std::string* ProductInfo::mutable_exchangeid() {
  set_has_exchangeid();
  // @@protoc_insertion_point(field_mutable:XT.ProductInfo.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductInfo::release_exchangeid() {
  // @@protoc_insertion_point(field_release:XT.ProductInfo.exchangeid)
  clear_has_exchangeid();
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    set_has_exchangeid();
  } else {
    clear_has_exchangeid();
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:XT.ProductInfo.exchangeid)
}

// optional string securitytype = 2;
bool ProductInfo::has_securitytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProductInfo::set_has_securitytype() {
  _has_bits_[0] |= 0x00000002u;
}
void ProductInfo::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProductInfo::clear_securitytype() {
  securitytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitytype();
}
 const ::std::string& ProductInfo::securitytype() const {
  // @@protoc_insertion_point(field_get:XT.ProductInfo.securitytype)
  return securitytype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_securitytype(const ::std::string& value) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ProductInfo.securitytype)
}
 void ProductInfo::set_securitytype(const char* value) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ProductInfo.securitytype)
}
 void ProductInfo::set_securitytype(const char* value, size_t size) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ProductInfo.securitytype)
}
 ::std::string* ProductInfo::mutable_securitytype() {
  set_has_securitytype();
  // @@protoc_insertion_point(field_mutable:XT.ProductInfo.securitytype)
  return securitytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductInfo::release_securitytype() {
  // @@protoc_insertion_point(field_release:XT.ProductInfo.securitytype)
  clear_has_securitytype();
  return securitytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_allocated_securitytype(::std::string* securitytype) {
  if (securitytype != NULL) {
    set_has_securitytype();
  } else {
    clear_has_securitytype();
  }
  securitytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitytype);
  // @@protoc_insertion_point(field_set_allocated:XT.ProductInfo.securitytype)
}

// optional string productid = 3;
bool ProductInfo::has_productid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProductInfo::set_has_productid() {
  _has_bits_[0] |= 0x00000004u;
}
void ProductInfo::clear_has_productid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProductInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
 const ::std::string& ProductInfo::productid() const {
  // @@protoc_insertion_point(field_get:XT.ProductInfo.productid)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ProductInfo.productid)
}
 void ProductInfo::set_productid(const char* value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ProductInfo.productid)
}
 void ProductInfo::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ProductInfo.productid)
}
 ::std::string* ProductInfo::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:XT.ProductInfo.productid)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductInfo::release_productid() {
  // @@protoc_insertion_point(field_release:XT.ProductInfo.productid)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:XT.ProductInfo.productid)
}

// optional string underlyingsymbol = 4;
bool ProductInfo::has_underlyingsymbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProductInfo::set_has_underlyingsymbol() {
  _has_bits_[0] |= 0x00000008u;
}
void ProductInfo::clear_has_underlyingsymbol() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProductInfo::clear_underlyingsymbol() {
  underlyingsymbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlyingsymbol();
}
 const ::std::string& ProductInfo::underlyingsymbol() const {
  // @@protoc_insertion_point(field_get:XT.ProductInfo.underlyingsymbol)
  return underlyingsymbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_underlyingsymbol(const ::std::string& value) {
  set_has_underlyingsymbol();
  underlyingsymbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ProductInfo.underlyingsymbol)
}
 void ProductInfo::set_underlyingsymbol(const char* value) {
  set_has_underlyingsymbol();
  underlyingsymbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ProductInfo.underlyingsymbol)
}
 void ProductInfo::set_underlyingsymbol(const char* value, size_t size) {
  set_has_underlyingsymbol();
  underlyingsymbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ProductInfo.underlyingsymbol)
}
 ::std::string* ProductInfo::mutable_underlyingsymbol() {
  set_has_underlyingsymbol();
  // @@protoc_insertion_point(field_mutable:XT.ProductInfo.underlyingsymbol)
  return underlyingsymbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductInfo::release_underlyingsymbol() {
  // @@protoc_insertion_point(field_release:XT.ProductInfo.underlyingsymbol)
  clear_has_underlyingsymbol();
  return underlyingsymbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_allocated_underlyingsymbol(::std::string* underlyingsymbol) {
  if (underlyingsymbol != NULL) {
    set_has_underlyingsymbol();
  } else {
    clear_has_underlyingsymbol();
  }
  underlyingsymbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyingsymbol);
  // @@protoc_insertion_point(field_set_allocated:XT.ProductInfo.underlyingsymbol)
}

// optional double pricetick = 5;
bool ProductInfo::has_pricetick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProductInfo::set_has_pricetick() {
  _has_bits_[0] |= 0x00000010u;
}
void ProductInfo::clear_has_pricetick() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProductInfo::clear_pricetick() {
  pricetick_ = 0;
  clear_has_pricetick();
}
 double ProductInfo::pricetick() const {
  // @@protoc_insertion_point(field_get:XT.ProductInfo.pricetick)
  return pricetick_;
}
 void ProductInfo::set_pricetick(double value) {
  set_has_pricetick();
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:XT.ProductInfo.pricetick)
}

// optional double contractmultiplier = 6;
bool ProductInfo::has_contractmultiplier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProductInfo::set_has_contractmultiplier() {
  _has_bits_[0] |= 0x00000020u;
}
void ProductInfo::clear_has_contractmultiplier() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProductInfo::clear_contractmultiplier() {
  contractmultiplier_ = 0;
  clear_has_contractmultiplier();
}
 double ProductInfo::contractmultiplier() const {
  // @@protoc_insertion_point(field_get:XT.ProductInfo.contractmultiplier)
  return contractmultiplier_;
}
 void ProductInfo::set_contractmultiplier(double value) {
  set_has_contractmultiplier();
  contractmultiplier_ = value;
  // @@protoc_insertion_point(field_set:XT.ProductInfo.contractmultiplier)
}

// optional string tagdata = 7;
bool ProductInfo::has_tagdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProductInfo::set_has_tagdata() {
  _has_bits_[0] |= 0x00000040u;
}
void ProductInfo::clear_has_tagdata() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProductInfo::clear_tagdata() {
  tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagdata();
}
 const ::std::string& ProductInfo::tagdata() const {
  // @@protoc_insertion_point(field_get:XT.ProductInfo.tagdata)
  return tagdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_tagdata(const ::std::string& value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.ProductInfo.tagdata)
}
 void ProductInfo::set_tagdata(const char* value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.ProductInfo.tagdata)
}
 void ProductInfo::set_tagdata(const char* value, size_t size) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.ProductInfo.tagdata)
}
 ::std::string* ProductInfo::mutable_tagdata() {
  set_has_tagdata();
  // @@protoc_insertion_point(field_mutable:XT.ProductInfo.tagdata)
  return tagdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductInfo::release_tagdata() {
  // @@protoc_insertion_point(field_release:XT.ProductInfo.tagdata)
  clear_has_tagdata();
  return tagdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductInfo::set_allocated_tagdata(::std::string* tagdata) {
  if (tagdata != NULL) {
    set_has_tagdata();
  } else {
    clear_has_tagdata();
  }
  tagdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagdata);
  // @@protoc_insertion_point(field_set_allocated:XT.ProductInfo.tagdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentInfo::kExchangeidFieldNumber;
const int InstrumentInfo::kInstrumentidFieldNumber;
const int InstrumentInfo::kSecuritytypeFieldNumber;
const int InstrumentInfo::kProductidFieldNumber;
const int InstrumentInfo::kExpireintdateFieldNumber;
const int InstrumentInfo::kCallputtypeFieldNumber;
const int InstrumentInfo::kStrikepriceFieldNumber;
const int InstrumentInfo::kPricetickFieldNumber;
const int InstrumentInfo::kContractmultiplierFieldNumber;
const int InstrumentInfo::kTagdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentInfo::InstrumentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.InstrumentInfo)
}

void InstrumentInfo::InitAsDefaultInstance() {
}

InstrumentInfo::InstrumentInfo(const InstrumentInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.InstrumentInfo)
}

void InstrumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expireintdate_ = 0;
  callputtype_ = 0;
  strikeprice_ = 0;
  pricetick_ = 0;
  contractmultiplier_ = 0;
  tagdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentInfo::~InstrumentInfo() {
  // @@protoc_insertion_point(destructor:XT.InstrumentInfo)
  SharedDtor();
}

void InstrumentInfo::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InstrumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentInfo_descriptor_;
}

const InstrumentInfo& InstrumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

InstrumentInfo* InstrumentInfo::default_instance_ = NULL;

InstrumentInfo* InstrumentInfo::New(::google::protobuf::Arena* arena) const {
  InstrumentInfo* n = new InstrumentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstrumentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.InstrumentInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InstrumentInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InstrumentInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(expireintdate_, pricetick_);
    if (has_exchangeid()) {
      exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_securitytype()) {
      securitytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_productid()) {
      productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    contractmultiplier_ = 0;
    if (has_tagdata()) {
      tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InstrumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.InstrumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exchangeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrumentInfo.exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instrumentid;
        break;
      }

      // optional string instrumentid = 2;
      case 2: {
        if (tag == 18) {
         parse_instrumentid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrumentInfo.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_securitytype;
        break;
      }

      // optional string securitytype = 3;
      case 3: {
        if (tag == 26) {
         parse_securitytype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitytype().data(), this->securitytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrumentInfo.securitytype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_productid;
        break;
      }

      // optional string productid = 4;
      case 4: {
        if (tag == 34) {
         parse_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrumentInfo.productid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expireintdate;
        break;
      }

      // optional int32 expireintdate = 5;
      case 5: {
        if (tag == 40) {
         parse_expireintdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expireintdate_)));
          set_has_expireintdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_callputtype;
        break;
      }

      // optional int32 callputtype = 6;
      case 6: {
        if (tag == 48) {
         parse_callputtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callputtype_)));
          set_has_callputtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_strikeprice;
        break;
      }

      // optional double strikeprice = 7;
      case 7: {
        if (tag == 57) {
         parse_strikeprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikeprice_)));
          set_has_strikeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_pricetick;
        break;
      }

      // optional double pricetick = 8;
      case 8: {
        if (tag == 65) {
         parse_pricetick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_contractmultiplier;
        break;
      }

      // optional double contractmultiplier = 9;
      case 9: {
        if (tag == 73) {
         parse_contractmultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contractmultiplier_)));
          set_has_contractmultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tagdata;
        break;
      }

      // optional string tagdata = 10;
      case 10: {
        if (tag == 82) {
         parse_tagdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagdata().data(), this->tagdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.InstrumentInfo.tagdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.InstrumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.InstrumentInfo)
  return false;
#undef DO_
}

void InstrumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.InstrumentInfo)
  // optional string exchangeid = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchangeid(), output);
  }

  // optional string instrumentid = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // optional string securitytype = 3;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitytype().data(), this->securitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.securitytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->securitytype(), output);
  }

  // optional string productid = 4;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.productid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->productid(), output);
  }

  // optional int32 expireintdate = 5;
  if (has_expireintdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expireintdate(), output);
  }

  // optional int32 callputtype = 6;
  if (has_callputtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->callputtype(), output);
  }

  // optional double strikeprice = 7;
  if (has_strikeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->strikeprice(), output);
  }

  // optional double pricetick = 8;
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pricetick(), output);
  }

  // optional double contractmultiplier = 9;
  if (has_contractmultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->contractmultiplier(), output);
  }

  // optional string tagdata = 10;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.tagdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tagdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.InstrumentInfo)
}

::google::protobuf::uint8* InstrumentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.InstrumentInfo)
  // optional string exchangeid = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchangeid(), target);
  }

  // optional string instrumentid = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional string securitytype = 3;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitytype().data(), this->securitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.securitytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->securitytype(), target);
  }

  // optional string productid = 4;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.productid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->productid(), target);
  }

  // optional int32 expireintdate = 5;
  if (has_expireintdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expireintdate(), target);
  }

  // optional int32 callputtype = 6;
  if (has_callputtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->callputtype(), target);
  }

  // optional double strikeprice = 7;
  if (has_strikeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->strikeprice(), target);
  }

  // optional double pricetick = 8;
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pricetick(), target);
  }

  // optional double contractmultiplier = 9;
  if (has_contractmultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->contractmultiplier(), target);
  }

  // optional string tagdata = 10;
  if (has_tagdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagdata().data(), this->tagdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.InstrumentInfo.tagdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tagdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.InstrumentInfo)
  return target;
}

int InstrumentInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.InstrumentInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string exchangeid = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string instrumentid = 2;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional string securitytype = 3;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitytype());
    }

    // optional string productid = 4;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional int32 expireintdate = 5;
    if (has_expireintdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expireintdate());
    }

    // optional int32 callputtype = 6;
    if (has_callputtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callputtype());
    }

    // optional double strikeprice = 7;
    if (has_strikeprice()) {
      total_size += 1 + 8;
    }

    // optional double pricetick = 8;
    if (has_pricetick()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double contractmultiplier = 9;
    if (has_contractmultiplier()) {
      total_size += 1 + 8;
    }

    // optional string tagdata = 10;
    if (has_tagdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagdata());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.InstrumentInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstrumentInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstrumentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.InstrumentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.InstrumentInfo)
    MergeFrom(*source);
  }
}

void InstrumentInfo::MergeFrom(const InstrumentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.InstrumentInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_has_exchangeid();
      exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
    }
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_securitytype()) {
      set_has_securitytype();
      securitytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitytype_);
    }
    if (from.has_productid()) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (from.has_expireintdate()) {
      set_expireintdate(from.expireintdate());
    }
    if (from.has_callputtype()) {
      set_callputtype(from.callputtype());
    }
    if (from.has_strikeprice()) {
      set_strikeprice(from.strikeprice());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contractmultiplier()) {
      set_contractmultiplier(from.contractmultiplier());
    }
    if (from.has_tagdata()) {
      set_has_tagdata();
      tagdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InstrumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.InstrumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentInfo::CopyFrom(const InstrumentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.InstrumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentInfo::IsInitialized() const {

  return true;
}

void InstrumentInfo::Swap(InstrumentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentInfo::InternalSwap(InstrumentInfo* other) {
  exchangeid_.Swap(&other->exchangeid_);
  instrumentid_.Swap(&other->instrumentid_);
  securitytype_.Swap(&other->securitytype_);
  productid_.Swap(&other->productid_);
  std::swap(expireintdate_, other->expireintdate_);
  std::swap(callputtype_, other->callputtype_);
  std::swap(strikeprice_, other->strikeprice_);
  std::swap(pricetick_, other->pricetick_);
  std::swap(contractmultiplier_, other->contractmultiplier_);
  tagdata_.Swap(&other->tagdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstrumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentInfo_descriptor_;
  metadata.reflection = InstrumentInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstrumentInfo

// optional string exchangeid = 1;
bool InstrumentInfo::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InstrumentInfo::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
void InstrumentInfo::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void InstrumentInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeid();
}
 const ::std::string& InstrumentInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.exchangeid)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.exchangeid)
}
 void InstrumentInfo::set_exchangeid(const char* value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrumentInfo.exchangeid)
}
 void InstrumentInfo::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrumentInfo.exchangeid)
}
 ::std::string* InstrumentInfo::mutable_exchangeid() {
  set_has_exchangeid();
  // @@protoc_insertion_point(field_mutable:XT.InstrumentInfo.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrumentInfo::release_exchangeid() {
  // @@protoc_insertion_point(field_release:XT.InstrumentInfo.exchangeid)
  clear_has_exchangeid();
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    set_has_exchangeid();
  } else {
    clear_has_exchangeid();
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrumentInfo.exchangeid)
}

// optional string instrumentid = 2;
bool InstrumentInfo::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InstrumentInfo::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000002u;
}
void InstrumentInfo::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
void InstrumentInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& InstrumentInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.instrumentid)
}
 void InstrumentInfo::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrumentInfo.instrumentid)
}
 void InstrumentInfo::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrumentInfo.instrumentid)
}
 ::std::string* InstrumentInfo::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.InstrumentInfo.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrumentInfo::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.InstrumentInfo.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrumentInfo.instrumentid)
}

// optional string securitytype = 3;
bool InstrumentInfo::has_securitytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InstrumentInfo::set_has_securitytype() {
  _has_bits_[0] |= 0x00000004u;
}
void InstrumentInfo::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void InstrumentInfo::clear_securitytype() {
  securitytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitytype();
}
 const ::std::string& InstrumentInfo::securitytype() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.securitytype)
  return securitytype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_securitytype(const ::std::string& value) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.securitytype)
}
 void InstrumentInfo::set_securitytype(const char* value) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrumentInfo.securitytype)
}
 void InstrumentInfo::set_securitytype(const char* value, size_t size) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrumentInfo.securitytype)
}
 ::std::string* InstrumentInfo::mutable_securitytype() {
  set_has_securitytype();
  // @@protoc_insertion_point(field_mutable:XT.InstrumentInfo.securitytype)
  return securitytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrumentInfo::release_securitytype() {
  // @@protoc_insertion_point(field_release:XT.InstrumentInfo.securitytype)
  clear_has_securitytype();
  return securitytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_allocated_securitytype(::std::string* securitytype) {
  if (securitytype != NULL) {
    set_has_securitytype();
  } else {
    clear_has_securitytype();
  }
  securitytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitytype);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrumentInfo.securitytype)
}

// optional string productid = 4;
bool InstrumentInfo::has_productid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InstrumentInfo::set_has_productid() {
  _has_bits_[0] |= 0x00000008u;
}
void InstrumentInfo::clear_has_productid() {
  _has_bits_[0] &= ~0x00000008u;
}
void InstrumentInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
 const ::std::string& InstrumentInfo::productid() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.productid)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.productid)
}
 void InstrumentInfo::set_productid(const char* value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrumentInfo.productid)
}
 void InstrumentInfo::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrumentInfo.productid)
}
 ::std::string* InstrumentInfo::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:XT.InstrumentInfo.productid)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrumentInfo::release_productid() {
  // @@protoc_insertion_point(field_release:XT.InstrumentInfo.productid)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrumentInfo.productid)
}

// optional int32 expireintdate = 5;
bool InstrumentInfo::has_expireintdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InstrumentInfo::set_has_expireintdate() {
  _has_bits_[0] |= 0x00000010u;
}
void InstrumentInfo::clear_has_expireintdate() {
  _has_bits_[0] &= ~0x00000010u;
}
void InstrumentInfo::clear_expireintdate() {
  expireintdate_ = 0;
  clear_has_expireintdate();
}
 ::google::protobuf::int32 InstrumentInfo::expireintdate() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.expireintdate)
  return expireintdate_;
}
 void InstrumentInfo::set_expireintdate(::google::protobuf::int32 value) {
  set_has_expireintdate();
  expireintdate_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.expireintdate)
}

// optional int32 callputtype = 6;
bool InstrumentInfo::has_callputtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InstrumentInfo::set_has_callputtype() {
  _has_bits_[0] |= 0x00000020u;
}
void InstrumentInfo::clear_has_callputtype() {
  _has_bits_[0] &= ~0x00000020u;
}
void InstrumentInfo::clear_callputtype() {
  callputtype_ = 0;
  clear_has_callputtype();
}
 ::google::protobuf::int32 InstrumentInfo::callputtype() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.callputtype)
  return callputtype_;
}
 void InstrumentInfo::set_callputtype(::google::protobuf::int32 value) {
  set_has_callputtype();
  callputtype_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.callputtype)
}

// optional double strikeprice = 7;
bool InstrumentInfo::has_strikeprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InstrumentInfo::set_has_strikeprice() {
  _has_bits_[0] |= 0x00000040u;
}
void InstrumentInfo::clear_has_strikeprice() {
  _has_bits_[0] &= ~0x00000040u;
}
void InstrumentInfo::clear_strikeprice() {
  strikeprice_ = 0;
  clear_has_strikeprice();
}
 double InstrumentInfo::strikeprice() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.strikeprice)
  return strikeprice_;
}
 void InstrumentInfo::set_strikeprice(double value) {
  set_has_strikeprice();
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.strikeprice)
}

// optional double pricetick = 8;
bool InstrumentInfo::has_pricetick() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InstrumentInfo::set_has_pricetick() {
  _has_bits_[0] |= 0x00000080u;
}
void InstrumentInfo::clear_has_pricetick() {
  _has_bits_[0] &= ~0x00000080u;
}
void InstrumentInfo::clear_pricetick() {
  pricetick_ = 0;
  clear_has_pricetick();
}
 double InstrumentInfo::pricetick() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.pricetick)
  return pricetick_;
}
 void InstrumentInfo::set_pricetick(double value) {
  set_has_pricetick();
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.pricetick)
}

// optional double contractmultiplier = 9;
bool InstrumentInfo::has_contractmultiplier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InstrumentInfo::set_has_contractmultiplier() {
  _has_bits_[0] |= 0x00000100u;
}
void InstrumentInfo::clear_has_contractmultiplier() {
  _has_bits_[0] &= ~0x00000100u;
}
void InstrumentInfo::clear_contractmultiplier() {
  contractmultiplier_ = 0;
  clear_has_contractmultiplier();
}
 double InstrumentInfo::contractmultiplier() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.contractmultiplier)
  return contractmultiplier_;
}
 void InstrumentInfo::set_contractmultiplier(double value) {
  set_has_contractmultiplier();
  contractmultiplier_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.contractmultiplier)
}

// optional string tagdata = 10;
bool InstrumentInfo::has_tagdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void InstrumentInfo::set_has_tagdata() {
  _has_bits_[0] |= 0x00000200u;
}
void InstrumentInfo::clear_has_tagdata() {
  _has_bits_[0] &= ~0x00000200u;
}
void InstrumentInfo::clear_tagdata() {
  tagdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagdata();
}
 const ::std::string& InstrumentInfo::tagdata() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentInfo.tagdata)
  return tagdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_tagdata(const ::std::string& value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.InstrumentInfo.tagdata)
}
 void InstrumentInfo::set_tagdata(const char* value) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.InstrumentInfo.tagdata)
}
 void InstrumentInfo::set_tagdata(const char* value, size_t size) {
  set_has_tagdata();
  tagdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.InstrumentInfo.tagdata)
}
 ::std::string* InstrumentInfo::mutable_tagdata() {
  set_has_tagdata();
  // @@protoc_insertion_point(field_mutable:XT.InstrumentInfo.tagdata)
  return tagdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstrumentInfo::release_tagdata() {
  // @@protoc_insertion_point(field_release:XT.InstrumentInfo.tagdata)
  clear_has_tagdata();
  return tagdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstrumentInfo::set_allocated_tagdata(::std::string* tagdata) {
  if (tagdata != NULL) {
    set_has_tagdata();
  } else {
    clear_has_tagdata();
  }
  tagdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagdata);
  // @@protoc_insertion_point(field_set_allocated:XT.InstrumentInfo.tagdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentEventInfo::kTagFieldNumber;
const int InstrumentEventInfo::kIidFieldNumber;
const int InstrumentEventInfo::kOrderidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentEventInfo::InstrumentEventInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.InstrumentEventInfo)
}

void InstrumentEventInfo::InitAsDefaultInstance() {
}

InstrumentEventInfo::InstrumentEventInfo(const InstrumentEventInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.InstrumentEventInfo)
}

void InstrumentEventInfo::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0;
  iid_ = 0;
  orderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentEventInfo::~InstrumentEventInfo() {
  // @@protoc_insertion_point(destructor:XT.InstrumentEventInfo)
  SharedDtor();
}

void InstrumentEventInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrumentEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentEventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentEventInfo_descriptor_;
}

const InstrumentEventInfo& InstrumentEventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

InstrumentEventInfo* InstrumentEventInfo::default_instance_ = NULL;

InstrumentEventInfo* InstrumentEventInfo::New(::google::protobuf::Arena* arena) const {
  InstrumentEventInfo* n = new InstrumentEventInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstrumentEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.InstrumentEventInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InstrumentEventInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InstrumentEventInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tag_, orderid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InstrumentEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.InstrumentEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iid;
        break;
      }

      // optional int32 iid = 2;
      case 2: {
        if (tag == 16) {
         parse_iid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderid;
        break;
      }

      // optional int32 orderid = 3;
      case 3: {
        if (tag == 24) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.InstrumentEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.InstrumentEventInfo)
  return false;
#undef DO_
}

void InstrumentEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.InstrumentEventInfo)
  // optional int32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // optional int32 iid = 2;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iid(), output);
  }

  // optional int32 orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.InstrumentEventInfo)
}

::google::protobuf::uint8* InstrumentEventInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.InstrumentEventInfo)
  // optional int32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // optional int32 iid = 2;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iid(), target);
  }

  // optional int32 orderid = 3;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.InstrumentEventInfo)
  return target;
}

int InstrumentEventInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.InstrumentEventInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional int32 iid = 2;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

    // optional int32 orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.InstrumentEventInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstrumentEventInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstrumentEventInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.InstrumentEventInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.InstrumentEventInfo)
    MergeFrom(*source);
  }
}

void InstrumentEventInfo::MergeFrom(const InstrumentEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.InstrumentEventInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InstrumentEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.InstrumentEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentEventInfo::CopyFrom(const InstrumentEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.InstrumentEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentEventInfo::IsInitialized() const {

  return true;
}

void InstrumentEventInfo::Swap(InstrumentEventInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentEventInfo::InternalSwap(InstrumentEventInfo* other) {
  std::swap(tag_, other->tag_);
  std::swap(iid_, other->iid_);
  std::swap(orderid_, other->orderid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstrumentEventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentEventInfo_descriptor_;
  metadata.reflection = InstrumentEventInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstrumentEventInfo

// optional int32 tag = 1;
bool InstrumentEventInfo::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InstrumentEventInfo::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void InstrumentEventInfo::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void InstrumentEventInfo::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::google::protobuf::int32 InstrumentEventInfo::tag() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentEventInfo.tag)
  return tag_;
}
 void InstrumentEventInfo::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentEventInfo.tag)
}

// optional int32 iid = 2;
bool InstrumentEventInfo::has_iid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InstrumentEventInfo::set_has_iid() {
  _has_bits_[0] |= 0x00000002u;
}
void InstrumentEventInfo::clear_has_iid() {
  _has_bits_[0] &= ~0x00000002u;
}
void InstrumentEventInfo::clear_iid() {
  iid_ = 0;
  clear_has_iid();
}
 ::google::protobuf::int32 InstrumentEventInfo::iid() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentEventInfo.iid)
  return iid_;
}
 void InstrumentEventInfo::set_iid(::google::protobuf::int32 value) {
  set_has_iid();
  iid_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentEventInfo.iid)
}

// optional int32 orderid = 3;
bool InstrumentEventInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InstrumentEventInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
void InstrumentEventInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
void InstrumentEventInfo::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
 ::google::protobuf::int32 InstrumentEventInfo::orderid() const {
  // @@protoc_insertion_point(field_get:XT.InstrumentEventInfo.orderid)
  return orderid_;
}
 void InstrumentEventInfo::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:XT.InstrumentEventInfo.orderid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TAParams::kSmaPeriodFieldNumber;
const int TAParams::kSmaMidPeriodFieldNumber;
const int TAParams::kSmaFastPeriodFieldNumber;
const int TAParams::kSmaSlowPeriodFieldNumber;
const int TAParams::kEmaPeriodFieldNumber;
const int TAParams::kEmaMidPeriodFieldNumber;
const int TAParams::kEmaFastPeriodFieldNumber;
const int TAParams::kEmaSlowPeriodFieldNumber;
const int TAParams::kAtrPeriodFieldNumber;
const int TAParams::kRsiPeriodFieldNumber;
const int TAParams::kRsiOverboughtFieldNumber;
const int TAParams::kRsiOversoldFieldNumber;
const int TAParams::kMfiPeriodFieldNumber;
const int TAParams::kCciPeriodFieldNumber;
const int TAParams::kCciOverboughtFieldNumber;
const int TAParams::kCciOversoldFieldNumber;
const int TAParams::kCciMaPeriodFieldNumber;
const int TAParams::kAdxPeriodFieldNumber;
const int TAParams::kMacdMATypeFieldNumber;
const int TAParams::kMacdFastPeriodFieldNumber;
const int TAParams::kMacdSlowPeriodFieldNumber;
const int TAParams::kMacdSignalPeriodFieldNumber;
const int TAParams::kMacdHistMaPeriodFieldNumber;
const int TAParams::kBbPeriodFieldNumber;
const int TAParams::kVolbbPeriodFieldNumber;
const int TAParams::kBsvdBBPeriodFieldNumber;
const int TAParams::kOichgBBPeriodFieldNumber;
const int TAParams::kBbMaPeriodFieldNumber;
const int TAParams::kVolbbMaPeriodFieldNumber;
const int TAParams::kBsvdBBMaPeriodFieldNumber;
const int TAParams::kOichgBBMaPeriodFieldNumber;
const int TAParams::kSarFastAccInitFieldNumber;
const int TAParams::kSarFastAccStepFieldNumber;
const int TAParams::kSarFastAccMaxFieldNumber;
const int TAParams::kSarMidAccInitFieldNumber;
const int TAParams::kSarMidAccStepFieldNumber;
const int TAParams::kSarMidAccMaxFieldNumber;
const int TAParams::kSarSlowAccInitFieldNumber;
const int TAParams::kSarSlowAccStepFieldNumber;
const int TAParams::kSarSlowAccMaxFieldNumber;
const int TAParams::kBbsarDistFieldNumber;
const int TAParams::kAtrsarDistFieldNumber;
const int TAParams::kBbmidSlopePeriodFieldNumber;
const int TAParams::kKbPeriodFieldNumber;
const int TAParams::kSlowKPeriodFieldNumber;
const int TAParams::kSlowDPeriodFieldNumber;
const int TAParams::kFastKPeriodFieldNumber;
const int TAParams::kFastDPeriodFieldNumber;
const int TAParams::kDmiatrPeriodFieldNumber;
const int TAParams::kDmiadxPeriodFieldNumber;
const int TAParams::kMatypeFieldNumber;
const int TAParams::kMaPeriod1FieldNumber;
const int TAParams::kMaPeriod2FieldNumber;
const int TAParams::kMaPeriod3FieldNumber;
const int TAParams::kMaPeriod4FieldNumber;
const int TAParams::kMaPeriod5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TAParams::TAParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.TAParams)
}

void TAParams::InitAsDefaultInstance() {
}

TAParams::TAParams(const TAParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.TAParams)
}

void TAParams::SharedCtor() {
  _cached_size_ = 0;
  smaperiod_ = 12;
  smamidperiod_ = 12;
  smafastperiod_ = 12;
  smaslowperiod_ = 26;
  emaperiod_ = 12;
  emamidperiod_ = 12;
  emafastperiod_ = 12;
  emaslowperiod_ = 26;
  atrperiod_ = 14;
  rsiperiod_ = 14;
  rsioverbought_ = 70;
  rsioversold_ = 30;
  mfiperiod_ = 14;
  cciperiod_ = 20;
  ccioverbought_ = 1.5;
  ccioversold_ = 1.5;
  ccimaperiod_ = 5;
  adxperiod_ = 14;
  macdmatype_ = 0;
  macdfastperiod_ = 12;
  macdslowperiod_ = 26;
  macdsignalperiod_ = 9;
  macdhistmaperiod_ = 5;
  bbperiod_ = 20;
  volbbperiod_ = 20;
  bsvdbbperiod_ = 20;
  oichgbbperiod_ = 20;
  bbmaperiod_ = 20;
  volbbmaperiod_ = 20;
  bsvdbbmaperiod_ = 20;
  oichgbbmaperiod_ = 20;
  sarfastaccinit_ = 0.03;
  sarfastaccstep_ = 0.03;
  sarfastaccmax_ = 0.3;
  sarmidaccinit_ = 0.02;
  sarmidaccstep_ = 0.02;
  sarmidaccmax_ = 0.2;
  sarslowaccinit_ = 0.01;
  sarslowaccstep_ = 0.01;
  sarslowaccmax_ = 0.01;
  bbsardist_ = 1.5;
  atrsardist_ = 1.5;
  bbmidslopeperiod_ = 10;
  kbperiod_ = 20;
  slowkperiod_ = 14;
  slowdperiod_ = 3;
  fastkperiod_ = 14;
  fastdperiod_ = 3;
  dmiatrperiod_ = 14;
  dmiadxperiod_ = 6;
  matype_ = 0;
  maperiod1_ = 5;
  maperiod2_ = 10;
  maperiod3_ = 20;
  maperiod4_ = 40;
  maperiod5_ = 60;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAParams::~TAParams() {
  // @@protoc_insertion_point(destructor:XT.TAParams)
  SharedDtor();
}

void TAParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAParams_descriptor_;
}

const TAParams& TAParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

TAParams* TAParams::default_instance_ = NULL;

TAParams* TAParams::New(::google::protobuf::Arena* arena) const {
  TAParams* n = new TAParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TAParams::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.TAParams)
  if (_has_bits_[0 / 32] & 255u) {
    smaperiod_ = 12;
    smamidperiod_ = 12;
    smafastperiod_ = 12;
    smaslowperiod_ = 26;
    emaperiod_ = 12;
    emamidperiod_ = 12;
    emafastperiod_ = 12;
    emaslowperiod_ = 26;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    atrperiod_ = 14;
    rsiperiod_ = 14;
    rsioverbought_ = 70;
    rsioversold_ = 30;
    mfiperiod_ = 14;
    cciperiod_ = 20;
    ccioverbought_ = 1.5;
    ccioversold_ = 1.5;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ccimaperiod_ = 5;
    adxperiod_ = 14;
    macdmatype_ = 0;
    macdfastperiod_ = 12;
    macdslowperiod_ = 26;
    macdsignalperiod_ = 9;
    macdhistmaperiod_ = 5;
    bbperiod_ = 20;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    volbbperiod_ = 20;
    bsvdbbperiod_ = 20;
    oichgbbperiod_ = 20;
    bbmaperiod_ = 20;
    volbbmaperiod_ = 20;
    bsvdbbmaperiod_ = 20;
    oichgbbmaperiod_ = 20;
    sarfastaccinit_ = 0.03;
  }
  if (_has_bits_[32 / 32] & 255u) {
    sarfastaccstep_ = 0.03;
    sarfastaccmax_ = 0.3;
    sarmidaccinit_ = 0.02;
    sarmidaccstep_ = 0.02;
    sarmidaccmax_ = 0.2;
    sarslowaccinit_ = 0.01;
    sarslowaccstep_ = 0.01;
    sarslowaccmax_ = 0.01;
  }
  if (_has_bits_[40 / 32] & 65280u) {
    bbsardist_ = 1.5;
    atrsardist_ = 1.5;
    bbmidslopeperiod_ = 10;
    kbperiod_ = 20;
    slowkperiod_ = 14;
    slowdperiod_ = 3;
    fastkperiod_ = 14;
    fastdperiod_ = 3;
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    dmiatrperiod_ = 14;
    dmiadxperiod_ = 6;
    matype_ = 0;
    maperiod1_ = 5;
    maperiod2_ = 10;
    maperiod3_ = 20;
    maperiod4_ = 40;
    maperiod5_ = 60;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TAParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.TAParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 smaPeriod = 1 [default = 12];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smaperiod_)));
          set_has_smaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_smaMidPeriod;
        break;
      }

      // optional int32 smaMidPeriod = 2 [default = 12];
      case 2: {
        if (tag == 16) {
         parse_smaMidPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smamidperiod_)));
          set_has_smamidperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_smaFastPeriod;
        break;
      }

      // optional int32 smaFastPeriod = 3 [default = 12];
      case 3: {
        if (tag == 24) {
         parse_smaFastPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smafastperiod_)));
          set_has_smafastperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_smaSlowPeriod;
        break;
      }

      // optional int32 smaSlowPeriod = 4 [default = 26];
      case 4: {
        if (tag == 32) {
         parse_smaSlowPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smaslowperiod_)));
          set_has_smaslowperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_emaPeriod;
        break;
      }

      // optional int32 emaPeriod = 5 [default = 12];
      case 5: {
        if (tag == 40) {
         parse_emaPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emaperiod_)));
          set_has_emaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_emaMidPeriod;
        break;
      }

      // optional int32 emaMidPeriod = 6 [default = 12];
      case 6: {
        if (tag == 48) {
         parse_emaMidPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emamidperiod_)));
          set_has_emamidperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_emaFastPeriod;
        break;
      }

      // optional int32 emaFastPeriod = 7 [default = 12];
      case 7: {
        if (tag == 56) {
         parse_emaFastPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emafastperiod_)));
          set_has_emafastperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_emaSlowPeriod;
        break;
      }

      // optional int32 emaSlowPeriod = 8 [default = 26];
      case 8: {
        if (tag == 64) {
         parse_emaSlowPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emaslowperiod_)));
          set_has_emaslowperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_atrPeriod;
        break;
      }

      // optional int32 atrPeriod = 9 [default = 14];
      case 9: {
        if (tag == 72) {
         parse_atrPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atrperiod_)));
          set_has_atrperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rsiPeriod;
        break;
      }

      // optional int32 rsiPeriod = 10 [default = 14];
      case 10: {
        if (tag == 80) {
         parse_rsiPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsiperiod_)));
          set_has_rsiperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_rsiOverbought;
        break;
      }

      // optional double rsiOverbought = 11 [default = 70];
      case 11: {
        if (tag == 89) {
         parse_rsiOverbought:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rsioverbought_)));
          set_has_rsioverbought();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_rsiOversold;
        break;
      }

      // optional double rsiOversold = 12 [default = 30];
      case 12: {
        if (tag == 97) {
         parse_rsiOversold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rsioversold_)));
          set_has_rsioversold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mfiPeriod;
        break;
      }

      // optional int32 mfiPeriod = 13 [default = 14];
      case 13: {
        if (tag == 104) {
         parse_mfiPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mfiperiod_)));
          set_has_mfiperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_cciPeriod;
        break;
      }

      // optional int32 cciPeriod = 14 [default = 20];
      case 14: {
        if (tag == 112) {
         parse_cciPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cciperiod_)));
          set_has_cciperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_cciOverbought;
        break;
      }

      // optional double cciOverbought = 15 [default = 1.5];
      case 15: {
        if (tag == 121) {
         parse_cciOverbought:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ccioverbought_)));
          set_has_ccioverbought();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_cciOversold;
        break;
      }

      // optional double cciOversold = 16 [default = 1.5];
      case 16: {
        if (tag == 129) {
         parse_cciOversold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ccioversold_)));
          set_has_ccioversold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_cciMaPeriod;
        break;
      }

      // optional int32 cciMaPeriod = 17 [default = 5];
      case 17: {
        if (tag == 136) {
         parse_cciMaPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccimaperiod_)));
          set_has_ccimaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_adxPeriod;
        break;
      }

      // optional int32 adxPeriod = 18 [default = 14];
      case 18: {
        if (tag == 144) {
         parse_adxPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adxperiod_)));
          set_has_adxperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_macdMAType;
        break;
      }

      // optional int32 macdMAType = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_macdMAType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &macdmatype_)));
          set_has_macdmatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_macdFastPeriod;
        break;
      }

      // optional int32 macdFastPeriod = 20 [default = 12];
      case 20: {
        if (tag == 160) {
         parse_macdFastPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &macdfastperiod_)));
          set_has_macdfastperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_macdSlowPeriod;
        break;
      }

      // optional int32 macdSlowPeriod = 21 [default = 26];
      case 21: {
        if (tag == 168) {
         parse_macdSlowPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &macdslowperiod_)));
          set_has_macdslowperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_macdSignalPeriod;
        break;
      }

      // optional int32 macdSignalPeriod = 22 [default = 9];
      case 22: {
        if (tag == 176) {
         parse_macdSignalPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &macdsignalperiod_)));
          set_has_macdsignalperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_macdHistMaPeriod;
        break;
      }

      // optional int32 macdHistMaPeriod = 23 [default = 5];
      case 23: {
        if (tag == 184) {
         parse_macdHistMaPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &macdhistmaperiod_)));
          set_has_macdhistmaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_bbPeriod;
        break;
      }

      // optional int32 bbPeriod = 24 [default = 20];
      case 24: {
        if (tag == 192) {
         parse_bbPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbperiod_)));
          set_has_bbperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_volbbPeriod;
        break;
      }

      // optional int32 volbbPeriod = 25 [default = 20];
      case 25: {
        if (tag == 200) {
         parse_volbbPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volbbperiod_)));
          set_has_volbbperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_bsvdBBPeriod;
        break;
      }

      // optional int32 bsvdBBPeriod = 26 [default = 20];
      case 26: {
        if (tag == 208) {
         parse_bsvdBBPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsvdbbperiod_)));
          set_has_bsvdbbperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_oichgBBPeriod;
        break;
      }

      // optional int32 oichgBBPeriod = 27 [default = 20];
      case 27: {
        if (tag == 216) {
         parse_oichgBBPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oichgbbperiod_)));
          set_has_oichgbbperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_bbMaPeriod;
        break;
      }

      // optional int32 bbMaPeriod = 28 [default = 20];
      case 28: {
        if (tag == 224) {
         parse_bbMaPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbmaperiod_)));
          set_has_bbmaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_volbbMaPeriod;
        break;
      }

      // optional int32 volbbMaPeriod = 29 [default = 20];
      case 29: {
        if (tag == 232) {
         parse_volbbMaPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volbbmaperiod_)));
          set_has_volbbmaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_bsvdBBMaPeriod;
        break;
      }

      // optional int32 bsvdBBMaPeriod = 30 [default = 20];
      case 30: {
        if (tag == 240) {
         parse_bsvdBBMaPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsvdbbmaperiod_)));
          set_has_bsvdbbmaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_oichgBBMaPeriod;
        break;
      }

      // optional int32 oichgBBMaPeriod = 31 [default = 20];
      case 31: {
        if (tag == 248) {
         parse_oichgBBMaPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oichgbbmaperiod_)));
          set_has_oichgbbmaperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_sarFastAccInit;
        break;
      }

      // optional double sarFastAccInit = 32 [default = 0.03];
      case 32: {
        if (tag == 257) {
         parse_sarFastAccInit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarfastaccinit_)));
          set_has_sarfastaccinit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_sarFastAccStep;
        break;
      }

      // optional double sarFastAccStep = 33 [default = 0.03];
      case 33: {
        if (tag == 265) {
         parse_sarFastAccStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarfastaccstep_)));
          set_has_sarfastaccstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_sarFastAccMax;
        break;
      }

      // optional double sarFastAccMax = 34 [default = 0.3];
      case 34: {
        if (tag == 273) {
         parse_sarFastAccMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarfastaccmax_)));
          set_has_sarfastaccmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_sarMidAccInit;
        break;
      }

      // optional double sarMidAccInit = 35 [default = 0.02];
      case 35: {
        if (tag == 281) {
         parse_sarMidAccInit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarmidaccinit_)));
          set_has_sarmidaccinit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_sarMidAccStep;
        break;
      }

      // optional double sarMidAccStep = 36 [default = 0.02];
      case 36: {
        if (tag == 289) {
         parse_sarMidAccStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarmidaccstep_)));
          set_has_sarmidaccstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_sarMidAccMax;
        break;
      }

      // optional double sarMidAccMax = 37 [default = 0.2];
      case 37: {
        if (tag == 297) {
         parse_sarMidAccMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarmidaccmax_)));
          set_has_sarmidaccmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_sarSlowAccInit;
        break;
      }

      // optional double sarSlowAccInit = 38 [default = 0.01];
      case 38: {
        if (tag == 305) {
         parse_sarSlowAccInit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarslowaccinit_)));
          set_has_sarslowaccinit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(313)) goto parse_sarSlowAccStep;
        break;
      }

      // optional double sarSlowAccStep = 39 [default = 0.01];
      case 39: {
        if (tag == 313) {
         parse_sarSlowAccStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarslowaccstep_)));
          set_has_sarslowaccstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_sarSlowAccMax;
        break;
      }

      // optional double sarSlowAccMax = 40 [default = 0.01];
      case 40: {
        if (tag == 321) {
         parse_sarSlowAccMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sarslowaccmax_)));
          set_has_sarslowaccmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_bbsarDist;
        break;
      }

      // optional double bbsarDist = 41 [default = 1.5];
      case 41: {
        if (tag == 329) {
         parse_bbsarDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bbsardist_)));
          set_has_bbsardist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_atrsarDist;
        break;
      }

      // optional double atrsarDist = 42 [default = 1.5];
      case 42: {
        if (tag == 337) {
         parse_atrsarDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atrsardist_)));
          set_has_atrsardist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_bbmidSlopePeriod;
        break;
      }

      // optional int32 bbmidSlopePeriod = 43 [default = 10];
      case 43: {
        if (tag == 344) {
         parse_bbmidSlopePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbmidslopeperiod_)));
          set_has_bbmidslopeperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_kbPeriod;
        break;
      }

      // optional int32 kbPeriod = 44 [default = 20];
      case 44: {
        if (tag == 352) {
         parse_kbPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kbperiod_)));
          set_has_kbperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_slowKPeriod;
        break;
      }

      // optional int32 slowKPeriod = 45 [default = 14];
      case 45: {
        if (tag == 360) {
         parse_slowKPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slowkperiod_)));
          set_has_slowkperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_slowDPeriod;
        break;
      }

      // optional int32 slowDPeriod = 46 [default = 3];
      case 46: {
        if (tag == 368) {
         parse_slowDPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slowdperiod_)));
          set_has_slowdperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_fastKPeriod;
        break;
      }

      // optional int32 fastKPeriod = 47 [default = 14];
      case 47: {
        if (tag == 376) {
         parse_fastKPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastkperiod_)));
          set_has_fastkperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_fastDPeriod;
        break;
      }

      // optional int32 fastDPeriod = 48 [default = 3];
      case 48: {
        if (tag == 384) {
         parse_fastDPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastdperiod_)));
          set_has_fastdperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_dmiatrPeriod;
        break;
      }

      // optional int32 dmiatrPeriod = 49 [default = 14];
      case 49: {
        if (tag == 392) {
         parse_dmiatrPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmiatrperiod_)));
          set_has_dmiatrperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_dmiadxPeriod;
        break;
      }

      // optional int32 dmiadxPeriod = 50 [default = 6];
      case 50: {
        if (tag == 400) {
         parse_dmiadxPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmiadxperiod_)));
          set_has_dmiadxperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_matype;
        break;
      }

      // optional int32 matype = 51 [default = 0];
      case 51: {
        if (tag == 408) {
         parse_matype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matype_)));
          set_has_matype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_maPeriod1;
        break;
      }

      // optional int32 maPeriod1 = 52 [default = 5];
      case 52: {
        if (tag == 416) {
         parse_maPeriod1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maperiod1_)));
          set_has_maperiod1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_maPeriod2;
        break;
      }

      // optional int32 maPeriod2 = 53 [default = 10];
      case 53: {
        if (tag == 424) {
         parse_maPeriod2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maperiod2_)));
          set_has_maperiod2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_maPeriod3;
        break;
      }

      // optional int32 maPeriod3 = 54 [default = 20];
      case 54: {
        if (tag == 432) {
         parse_maPeriod3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maperiod3_)));
          set_has_maperiod3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_maPeriod4;
        break;
      }

      // optional int32 maPeriod4 = 55 [default = 40];
      case 55: {
        if (tag == 440) {
         parse_maPeriod4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maperiod4_)));
          set_has_maperiod4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_maPeriod5;
        break;
      }

      // optional int32 maPeriod5 = 56 [default = 60];
      case 56: {
        if (tag == 448) {
         parse_maPeriod5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maperiod5_)));
          set_has_maperiod5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.TAParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.TAParams)
  return false;
#undef DO_
}

void TAParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.TAParams)
  // optional int32 smaPeriod = 1 [default = 12];
  if (has_smaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->smaperiod(), output);
  }

  // optional int32 smaMidPeriod = 2 [default = 12];
  if (has_smamidperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->smamidperiod(), output);
  }

  // optional int32 smaFastPeriod = 3 [default = 12];
  if (has_smafastperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->smafastperiod(), output);
  }

  // optional int32 smaSlowPeriod = 4 [default = 26];
  if (has_smaslowperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->smaslowperiod(), output);
  }

  // optional int32 emaPeriod = 5 [default = 12];
  if (has_emaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->emaperiod(), output);
  }

  // optional int32 emaMidPeriod = 6 [default = 12];
  if (has_emamidperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->emamidperiod(), output);
  }

  // optional int32 emaFastPeriod = 7 [default = 12];
  if (has_emafastperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->emafastperiod(), output);
  }

  // optional int32 emaSlowPeriod = 8 [default = 26];
  if (has_emaslowperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->emaslowperiod(), output);
  }

  // optional int32 atrPeriod = 9 [default = 14];
  if (has_atrperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->atrperiod(), output);
  }

  // optional int32 rsiPeriod = 10 [default = 14];
  if (has_rsiperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rsiperiod(), output);
  }

  // optional double rsiOverbought = 11 [default = 70];
  if (has_rsioverbought()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->rsioverbought(), output);
  }

  // optional double rsiOversold = 12 [default = 30];
  if (has_rsioversold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->rsioversold(), output);
  }

  // optional int32 mfiPeriod = 13 [default = 14];
  if (has_mfiperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mfiperiod(), output);
  }

  // optional int32 cciPeriod = 14 [default = 20];
  if (has_cciperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cciperiod(), output);
  }

  // optional double cciOverbought = 15 [default = 1.5];
  if (has_ccioverbought()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ccioverbought(), output);
  }

  // optional double cciOversold = 16 [default = 1.5];
  if (has_ccioversold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ccioversold(), output);
  }

  // optional int32 cciMaPeriod = 17 [default = 5];
  if (has_ccimaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ccimaperiod(), output);
  }

  // optional int32 adxPeriod = 18 [default = 14];
  if (has_adxperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->adxperiod(), output);
  }

  // optional int32 macdMAType = 19 [default = 0];
  if (has_macdmatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->macdmatype(), output);
  }

  // optional int32 macdFastPeriod = 20 [default = 12];
  if (has_macdfastperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->macdfastperiod(), output);
  }

  // optional int32 macdSlowPeriod = 21 [default = 26];
  if (has_macdslowperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->macdslowperiod(), output);
  }

  // optional int32 macdSignalPeriod = 22 [default = 9];
  if (has_macdsignalperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->macdsignalperiod(), output);
  }

  // optional int32 macdHistMaPeriod = 23 [default = 5];
  if (has_macdhistmaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->macdhistmaperiod(), output);
  }

  // optional int32 bbPeriod = 24 [default = 20];
  if (has_bbperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->bbperiod(), output);
  }

  // optional int32 volbbPeriod = 25 [default = 20];
  if (has_volbbperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->volbbperiod(), output);
  }

  // optional int32 bsvdBBPeriod = 26 [default = 20];
  if (has_bsvdbbperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->bsvdbbperiod(), output);
  }

  // optional int32 oichgBBPeriod = 27 [default = 20];
  if (has_oichgbbperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->oichgbbperiod(), output);
  }

  // optional int32 bbMaPeriod = 28 [default = 20];
  if (has_bbmaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->bbmaperiod(), output);
  }

  // optional int32 volbbMaPeriod = 29 [default = 20];
  if (has_volbbmaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->volbbmaperiod(), output);
  }

  // optional int32 bsvdBBMaPeriod = 30 [default = 20];
  if (has_bsvdbbmaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->bsvdbbmaperiod(), output);
  }

  // optional int32 oichgBBMaPeriod = 31 [default = 20];
  if (has_oichgbbmaperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->oichgbbmaperiod(), output);
  }

  // optional double sarFastAccInit = 32 [default = 0.03];
  if (has_sarfastaccinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->sarfastaccinit(), output);
  }

  // optional double sarFastAccStep = 33 [default = 0.03];
  if (has_sarfastaccstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->sarfastaccstep(), output);
  }

  // optional double sarFastAccMax = 34 [default = 0.3];
  if (has_sarfastaccmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->sarfastaccmax(), output);
  }

  // optional double sarMidAccInit = 35 [default = 0.02];
  if (has_sarmidaccinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->sarmidaccinit(), output);
  }

  // optional double sarMidAccStep = 36 [default = 0.02];
  if (has_sarmidaccstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->sarmidaccstep(), output);
  }

  // optional double sarMidAccMax = 37 [default = 0.2];
  if (has_sarmidaccmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->sarmidaccmax(), output);
  }

  // optional double sarSlowAccInit = 38 [default = 0.01];
  if (has_sarslowaccinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->sarslowaccinit(), output);
  }

  // optional double sarSlowAccStep = 39 [default = 0.01];
  if (has_sarslowaccstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->sarslowaccstep(), output);
  }

  // optional double sarSlowAccMax = 40 [default = 0.01];
  if (has_sarslowaccmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->sarslowaccmax(), output);
  }

  // optional double bbsarDist = 41 [default = 1.5];
  if (has_bbsardist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->bbsardist(), output);
  }

  // optional double atrsarDist = 42 [default = 1.5];
  if (has_atrsardist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->atrsardist(), output);
  }

  // optional int32 bbmidSlopePeriod = 43 [default = 10];
  if (has_bbmidslopeperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->bbmidslopeperiod(), output);
  }

  // optional int32 kbPeriod = 44 [default = 20];
  if (has_kbperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->kbperiod(), output);
  }

  // optional int32 slowKPeriod = 45 [default = 14];
  if (has_slowkperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->slowkperiod(), output);
  }

  // optional int32 slowDPeriod = 46 [default = 3];
  if (has_slowdperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->slowdperiod(), output);
  }

  // optional int32 fastKPeriod = 47 [default = 14];
  if (has_fastkperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->fastkperiod(), output);
  }

  // optional int32 fastDPeriod = 48 [default = 3];
  if (has_fastdperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->fastdperiod(), output);
  }

  // optional int32 dmiatrPeriod = 49 [default = 14];
  if (has_dmiatrperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->dmiatrperiod(), output);
  }

  // optional int32 dmiadxPeriod = 50 [default = 6];
  if (has_dmiadxperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->dmiadxperiod(), output);
  }

  // optional int32 matype = 51 [default = 0];
  if (has_matype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->matype(), output);
  }

  // optional int32 maPeriod1 = 52 [default = 5];
  if (has_maperiod1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->maperiod1(), output);
  }

  // optional int32 maPeriod2 = 53 [default = 10];
  if (has_maperiod2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->maperiod2(), output);
  }

  // optional int32 maPeriod3 = 54 [default = 20];
  if (has_maperiod3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->maperiod3(), output);
  }

  // optional int32 maPeriod4 = 55 [default = 40];
  if (has_maperiod4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->maperiod4(), output);
  }

  // optional int32 maPeriod5 = 56 [default = 60];
  if (has_maperiod5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->maperiod5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.TAParams)
}

::google::protobuf::uint8* TAParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.TAParams)
  // optional int32 smaPeriod = 1 [default = 12];
  if (has_smaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->smaperiod(), target);
  }

  // optional int32 smaMidPeriod = 2 [default = 12];
  if (has_smamidperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->smamidperiod(), target);
  }

  // optional int32 smaFastPeriod = 3 [default = 12];
  if (has_smafastperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->smafastperiod(), target);
  }

  // optional int32 smaSlowPeriod = 4 [default = 26];
  if (has_smaslowperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->smaslowperiod(), target);
  }

  // optional int32 emaPeriod = 5 [default = 12];
  if (has_emaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->emaperiod(), target);
  }

  // optional int32 emaMidPeriod = 6 [default = 12];
  if (has_emamidperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->emamidperiod(), target);
  }

  // optional int32 emaFastPeriod = 7 [default = 12];
  if (has_emafastperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->emafastperiod(), target);
  }

  // optional int32 emaSlowPeriod = 8 [default = 26];
  if (has_emaslowperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->emaslowperiod(), target);
  }

  // optional int32 atrPeriod = 9 [default = 14];
  if (has_atrperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->atrperiod(), target);
  }

  // optional int32 rsiPeriod = 10 [default = 14];
  if (has_rsiperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rsiperiod(), target);
  }

  // optional double rsiOverbought = 11 [default = 70];
  if (has_rsioverbought()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->rsioverbought(), target);
  }

  // optional double rsiOversold = 12 [default = 30];
  if (has_rsioversold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->rsioversold(), target);
  }

  // optional int32 mfiPeriod = 13 [default = 14];
  if (has_mfiperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mfiperiod(), target);
  }

  // optional int32 cciPeriod = 14 [default = 20];
  if (has_cciperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cciperiod(), target);
  }

  // optional double cciOverbought = 15 [default = 1.5];
  if (has_ccioverbought()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->ccioverbought(), target);
  }

  // optional double cciOversold = 16 [default = 1.5];
  if (has_ccioversold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->ccioversold(), target);
  }

  // optional int32 cciMaPeriod = 17 [default = 5];
  if (has_ccimaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ccimaperiod(), target);
  }

  // optional int32 adxPeriod = 18 [default = 14];
  if (has_adxperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->adxperiod(), target);
  }

  // optional int32 macdMAType = 19 [default = 0];
  if (has_macdmatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->macdmatype(), target);
  }

  // optional int32 macdFastPeriod = 20 [default = 12];
  if (has_macdfastperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->macdfastperiod(), target);
  }

  // optional int32 macdSlowPeriod = 21 [default = 26];
  if (has_macdslowperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->macdslowperiod(), target);
  }

  // optional int32 macdSignalPeriod = 22 [default = 9];
  if (has_macdsignalperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->macdsignalperiod(), target);
  }

  // optional int32 macdHistMaPeriod = 23 [default = 5];
  if (has_macdhistmaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->macdhistmaperiod(), target);
  }

  // optional int32 bbPeriod = 24 [default = 20];
  if (has_bbperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->bbperiod(), target);
  }

  // optional int32 volbbPeriod = 25 [default = 20];
  if (has_volbbperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->volbbperiod(), target);
  }

  // optional int32 bsvdBBPeriod = 26 [default = 20];
  if (has_bsvdbbperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->bsvdbbperiod(), target);
  }

  // optional int32 oichgBBPeriod = 27 [default = 20];
  if (has_oichgbbperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->oichgbbperiod(), target);
  }

  // optional int32 bbMaPeriod = 28 [default = 20];
  if (has_bbmaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->bbmaperiod(), target);
  }

  // optional int32 volbbMaPeriod = 29 [default = 20];
  if (has_volbbmaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->volbbmaperiod(), target);
  }

  // optional int32 bsvdBBMaPeriod = 30 [default = 20];
  if (has_bsvdbbmaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->bsvdbbmaperiod(), target);
  }

  // optional int32 oichgBBMaPeriod = 31 [default = 20];
  if (has_oichgbbmaperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->oichgbbmaperiod(), target);
  }

  // optional double sarFastAccInit = 32 [default = 0.03];
  if (has_sarfastaccinit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->sarfastaccinit(), target);
  }

  // optional double sarFastAccStep = 33 [default = 0.03];
  if (has_sarfastaccstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->sarfastaccstep(), target);
  }

  // optional double sarFastAccMax = 34 [default = 0.3];
  if (has_sarfastaccmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->sarfastaccmax(), target);
  }

  // optional double sarMidAccInit = 35 [default = 0.02];
  if (has_sarmidaccinit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->sarmidaccinit(), target);
  }

  // optional double sarMidAccStep = 36 [default = 0.02];
  if (has_sarmidaccstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->sarmidaccstep(), target);
  }

  // optional double sarMidAccMax = 37 [default = 0.2];
  if (has_sarmidaccmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->sarmidaccmax(), target);
  }

  // optional double sarSlowAccInit = 38 [default = 0.01];
  if (has_sarslowaccinit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->sarslowaccinit(), target);
  }

  // optional double sarSlowAccStep = 39 [default = 0.01];
  if (has_sarslowaccstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->sarslowaccstep(), target);
  }

  // optional double sarSlowAccMax = 40 [default = 0.01];
  if (has_sarslowaccmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->sarslowaccmax(), target);
  }

  // optional double bbsarDist = 41 [default = 1.5];
  if (has_bbsardist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->bbsardist(), target);
  }

  // optional double atrsarDist = 42 [default = 1.5];
  if (has_atrsardist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->atrsardist(), target);
  }

  // optional int32 bbmidSlopePeriod = 43 [default = 10];
  if (has_bbmidslopeperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->bbmidslopeperiod(), target);
  }

  // optional int32 kbPeriod = 44 [default = 20];
  if (has_kbperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->kbperiod(), target);
  }

  // optional int32 slowKPeriod = 45 [default = 14];
  if (has_slowkperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->slowkperiod(), target);
  }

  // optional int32 slowDPeriod = 46 [default = 3];
  if (has_slowdperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->slowdperiod(), target);
  }

  // optional int32 fastKPeriod = 47 [default = 14];
  if (has_fastkperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->fastkperiod(), target);
  }

  // optional int32 fastDPeriod = 48 [default = 3];
  if (has_fastdperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->fastdperiod(), target);
  }

  // optional int32 dmiatrPeriod = 49 [default = 14];
  if (has_dmiatrperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->dmiatrperiod(), target);
  }

  // optional int32 dmiadxPeriod = 50 [default = 6];
  if (has_dmiadxperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->dmiadxperiod(), target);
  }

  // optional int32 matype = 51 [default = 0];
  if (has_matype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->matype(), target);
  }

  // optional int32 maPeriod1 = 52 [default = 5];
  if (has_maperiod1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->maperiod1(), target);
  }

  // optional int32 maPeriod2 = 53 [default = 10];
  if (has_maperiod2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->maperiod2(), target);
  }

  // optional int32 maPeriod3 = 54 [default = 20];
  if (has_maperiod3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->maperiod3(), target);
  }

  // optional int32 maPeriod4 = 55 [default = 40];
  if (has_maperiod4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->maperiod4(), target);
  }

  // optional int32 maPeriod5 = 56 [default = 60];
  if (has_maperiod5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->maperiod5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.TAParams)
  return target;
}

int TAParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.TAParams)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 smaPeriod = 1 [default = 12];
    if (has_smaperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smaperiod());
    }

    // optional int32 smaMidPeriod = 2 [default = 12];
    if (has_smamidperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smamidperiod());
    }

    // optional int32 smaFastPeriod = 3 [default = 12];
    if (has_smafastperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smafastperiod());
    }

    // optional int32 smaSlowPeriod = 4 [default = 26];
    if (has_smaslowperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smaslowperiod());
    }

    // optional int32 emaPeriod = 5 [default = 12];
    if (has_emaperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emaperiod());
    }

    // optional int32 emaMidPeriod = 6 [default = 12];
    if (has_emamidperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emamidperiod());
    }

    // optional int32 emaFastPeriod = 7 [default = 12];
    if (has_emafastperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emafastperiod());
    }

    // optional int32 emaSlowPeriod = 8 [default = 26];
    if (has_emaslowperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emaslowperiod());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 atrPeriod = 9 [default = 14];
    if (has_atrperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atrperiod());
    }

    // optional int32 rsiPeriod = 10 [default = 14];
    if (has_rsiperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsiperiod());
    }

    // optional double rsiOverbought = 11 [default = 70];
    if (has_rsioverbought()) {
      total_size += 1 + 8;
    }

    // optional double rsiOversold = 12 [default = 30];
    if (has_rsioversold()) {
      total_size += 1 + 8;
    }

    // optional int32 mfiPeriod = 13 [default = 14];
    if (has_mfiperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mfiperiod());
    }

    // optional int32 cciPeriod = 14 [default = 20];
    if (has_cciperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cciperiod());
    }

    // optional double cciOverbought = 15 [default = 1.5];
    if (has_ccioverbought()) {
      total_size += 1 + 8;
    }

    // optional double cciOversold = 16 [default = 1.5];
    if (has_ccioversold()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 cciMaPeriod = 17 [default = 5];
    if (has_ccimaperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccimaperiod());
    }

    // optional int32 adxPeriod = 18 [default = 14];
    if (has_adxperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adxperiod());
    }

    // optional int32 macdMAType = 19 [default = 0];
    if (has_macdmatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->macdmatype());
    }

    // optional int32 macdFastPeriod = 20 [default = 12];
    if (has_macdfastperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->macdfastperiod());
    }

    // optional int32 macdSlowPeriod = 21 [default = 26];
    if (has_macdslowperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->macdslowperiod());
    }

    // optional int32 macdSignalPeriod = 22 [default = 9];
    if (has_macdsignalperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->macdsignalperiod());
    }

    // optional int32 macdHistMaPeriod = 23 [default = 5];
    if (has_macdhistmaperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->macdhistmaperiod());
    }

    // optional int32 bbPeriod = 24 [default = 20];
    if (has_bbperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbperiod());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 volbbPeriod = 25 [default = 20];
    if (has_volbbperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volbbperiod());
    }

    // optional int32 bsvdBBPeriod = 26 [default = 20];
    if (has_bsvdbbperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsvdbbperiod());
    }

    // optional int32 oichgBBPeriod = 27 [default = 20];
    if (has_oichgbbperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oichgbbperiod());
    }

    // optional int32 bbMaPeriod = 28 [default = 20];
    if (has_bbmaperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbmaperiod());
    }

    // optional int32 volbbMaPeriod = 29 [default = 20];
    if (has_volbbmaperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volbbmaperiod());
    }

    // optional int32 bsvdBBMaPeriod = 30 [default = 20];
    if (has_bsvdbbmaperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsvdbbmaperiod());
    }

    // optional int32 oichgBBMaPeriod = 31 [default = 20];
    if (has_oichgbbmaperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oichgbbmaperiod());
    }

    // optional double sarFastAccInit = 32 [default = 0.03];
    if (has_sarfastaccinit()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional double sarFastAccStep = 33 [default = 0.03];
    if (has_sarfastaccstep()) {
      total_size += 2 + 8;
    }

    // optional double sarFastAccMax = 34 [default = 0.3];
    if (has_sarfastaccmax()) {
      total_size += 2 + 8;
    }

    // optional double sarMidAccInit = 35 [default = 0.02];
    if (has_sarmidaccinit()) {
      total_size += 2 + 8;
    }

    // optional double sarMidAccStep = 36 [default = 0.02];
    if (has_sarmidaccstep()) {
      total_size += 2 + 8;
    }

    // optional double sarMidAccMax = 37 [default = 0.2];
    if (has_sarmidaccmax()) {
      total_size += 2 + 8;
    }

    // optional double sarSlowAccInit = 38 [default = 0.01];
    if (has_sarslowaccinit()) {
      total_size += 2 + 8;
    }

    // optional double sarSlowAccStep = 39 [default = 0.01];
    if (has_sarslowaccstep()) {
      total_size += 2 + 8;
    }

    // optional double sarSlowAccMax = 40 [default = 0.01];
    if (has_sarslowaccmax()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional double bbsarDist = 41 [default = 1.5];
    if (has_bbsardist()) {
      total_size += 2 + 8;
    }

    // optional double atrsarDist = 42 [default = 1.5];
    if (has_atrsardist()) {
      total_size += 2 + 8;
    }

    // optional int32 bbmidSlopePeriod = 43 [default = 10];
    if (has_bbmidslopeperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbmidslopeperiod());
    }

    // optional int32 kbPeriod = 44 [default = 20];
    if (has_kbperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kbperiod());
    }

    // optional int32 slowKPeriod = 45 [default = 14];
    if (has_slowkperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slowkperiod());
    }

    // optional int32 slowDPeriod = 46 [default = 3];
    if (has_slowdperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slowdperiod());
    }

    // optional int32 fastKPeriod = 47 [default = 14];
    if (has_fastkperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastkperiod());
    }

    // optional int32 fastDPeriod = 48 [default = 3];
    if (has_fastdperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastdperiod());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional int32 dmiatrPeriod = 49 [default = 14];
    if (has_dmiatrperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmiatrperiod());
    }

    // optional int32 dmiadxPeriod = 50 [default = 6];
    if (has_dmiadxperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmiadxperiod());
    }

    // optional int32 matype = 51 [default = 0];
    if (has_matype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matype());
    }

    // optional int32 maPeriod1 = 52 [default = 5];
    if (has_maperiod1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maperiod1());
    }

    // optional int32 maPeriod2 = 53 [default = 10];
    if (has_maperiod2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maperiod2());
    }

    // optional int32 maPeriod3 = 54 [default = 20];
    if (has_maperiod3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maperiod3());
    }

    // optional int32 maPeriod4 = 55 [default = 40];
    if (has_maperiod4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maperiod4());
    }

    // optional int32 maPeriod5 = 56 [default = 60];
    if (has_maperiod5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maperiod5());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.TAParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TAParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TAParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.TAParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.TAParams)
    MergeFrom(*source);
  }
}

void TAParams::MergeFrom(const TAParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.TAParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_smaperiod()) {
      set_smaperiod(from.smaperiod());
    }
    if (from.has_smamidperiod()) {
      set_smamidperiod(from.smamidperiod());
    }
    if (from.has_smafastperiod()) {
      set_smafastperiod(from.smafastperiod());
    }
    if (from.has_smaslowperiod()) {
      set_smaslowperiod(from.smaslowperiod());
    }
    if (from.has_emaperiod()) {
      set_emaperiod(from.emaperiod());
    }
    if (from.has_emamidperiod()) {
      set_emamidperiod(from.emamidperiod());
    }
    if (from.has_emafastperiod()) {
      set_emafastperiod(from.emafastperiod());
    }
    if (from.has_emaslowperiod()) {
      set_emaslowperiod(from.emaslowperiod());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_atrperiod()) {
      set_atrperiod(from.atrperiod());
    }
    if (from.has_rsiperiod()) {
      set_rsiperiod(from.rsiperiod());
    }
    if (from.has_rsioverbought()) {
      set_rsioverbought(from.rsioverbought());
    }
    if (from.has_rsioversold()) {
      set_rsioversold(from.rsioversold());
    }
    if (from.has_mfiperiod()) {
      set_mfiperiod(from.mfiperiod());
    }
    if (from.has_cciperiod()) {
      set_cciperiod(from.cciperiod());
    }
    if (from.has_ccioverbought()) {
      set_ccioverbought(from.ccioverbought());
    }
    if (from.has_ccioversold()) {
      set_ccioversold(from.ccioversold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ccimaperiod()) {
      set_ccimaperiod(from.ccimaperiod());
    }
    if (from.has_adxperiod()) {
      set_adxperiod(from.adxperiod());
    }
    if (from.has_macdmatype()) {
      set_macdmatype(from.macdmatype());
    }
    if (from.has_macdfastperiod()) {
      set_macdfastperiod(from.macdfastperiod());
    }
    if (from.has_macdslowperiod()) {
      set_macdslowperiod(from.macdslowperiod());
    }
    if (from.has_macdsignalperiod()) {
      set_macdsignalperiod(from.macdsignalperiod());
    }
    if (from.has_macdhistmaperiod()) {
      set_macdhistmaperiod(from.macdhistmaperiod());
    }
    if (from.has_bbperiod()) {
      set_bbperiod(from.bbperiod());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_volbbperiod()) {
      set_volbbperiod(from.volbbperiod());
    }
    if (from.has_bsvdbbperiod()) {
      set_bsvdbbperiod(from.bsvdbbperiod());
    }
    if (from.has_oichgbbperiod()) {
      set_oichgbbperiod(from.oichgbbperiod());
    }
    if (from.has_bbmaperiod()) {
      set_bbmaperiod(from.bbmaperiod());
    }
    if (from.has_volbbmaperiod()) {
      set_volbbmaperiod(from.volbbmaperiod());
    }
    if (from.has_bsvdbbmaperiod()) {
      set_bsvdbbmaperiod(from.bsvdbbmaperiod());
    }
    if (from.has_oichgbbmaperiod()) {
      set_oichgbbmaperiod(from.oichgbbmaperiod());
    }
    if (from.has_sarfastaccinit()) {
      set_sarfastaccinit(from.sarfastaccinit());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sarfastaccstep()) {
      set_sarfastaccstep(from.sarfastaccstep());
    }
    if (from.has_sarfastaccmax()) {
      set_sarfastaccmax(from.sarfastaccmax());
    }
    if (from.has_sarmidaccinit()) {
      set_sarmidaccinit(from.sarmidaccinit());
    }
    if (from.has_sarmidaccstep()) {
      set_sarmidaccstep(from.sarmidaccstep());
    }
    if (from.has_sarmidaccmax()) {
      set_sarmidaccmax(from.sarmidaccmax());
    }
    if (from.has_sarslowaccinit()) {
      set_sarslowaccinit(from.sarslowaccinit());
    }
    if (from.has_sarslowaccstep()) {
      set_sarslowaccstep(from.sarslowaccstep());
    }
    if (from.has_sarslowaccmax()) {
      set_sarslowaccmax(from.sarslowaccmax());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_bbsardist()) {
      set_bbsardist(from.bbsardist());
    }
    if (from.has_atrsardist()) {
      set_atrsardist(from.atrsardist());
    }
    if (from.has_bbmidslopeperiod()) {
      set_bbmidslopeperiod(from.bbmidslopeperiod());
    }
    if (from.has_kbperiod()) {
      set_kbperiod(from.kbperiod());
    }
    if (from.has_slowkperiod()) {
      set_slowkperiod(from.slowkperiod());
    }
    if (from.has_slowdperiod()) {
      set_slowdperiod(from.slowdperiod());
    }
    if (from.has_fastkperiod()) {
      set_fastkperiod(from.fastkperiod());
    }
    if (from.has_fastdperiod()) {
      set_fastdperiod(from.fastdperiod());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_dmiatrperiod()) {
      set_dmiatrperiod(from.dmiatrperiod());
    }
    if (from.has_dmiadxperiod()) {
      set_dmiadxperiod(from.dmiadxperiod());
    }
    if (from.has_matype()) {
      set_matype(from.matype());
    }
    if (from.has_maperiod1()) {
      set_maperiod1(from.maperiod1());
    }
    if (from.has_maperiod2()) {
      set_maperiod2(from.maperiod2());
    }
    if (from.has_maperiod3()) {
      set_maperiod3(from.maperiod3());
    }
    if (from.has_maperiod4()) {
      set_maperiod4(from.maperiod4());
    }
    if (from.has_maperiod5()) {
      set_maperiod5(from.maperiod5());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TAParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.TAParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAParams::CopyFrom(const TAParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.TAParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAParams::IsInitialized() const {

  return true;
}

void TAParams::Swap(TAParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TAParams::InternalSwap(TAParams* other) {
  std::swap(smaperiod_, other->smaperiod_);
  std::swap(smamidperiod_, other->smamidperiod_);
  std::swap(smafastperiod_, other->smafastperiod_);
  std::swap(smaslowperiod_, other->smaslowperiod_);
  std::swap(emaperiod_, other->emaperiod_);
  std::swap(emamidperiod_, other->emamidperiod_);
  std::swap(emafastperiod_, other->emafastperiod_);
  std::swap(emaslowperiod_, other->emaslowperiod_);
  std::swap(atrperiod_, other->atrperiod_);
  std::swap(rsiperiod_, other->rsiperiod_);
  std::swap(rsioverbought_, other->rsioverbought_);
  std::swap(rsioversold_, other->rsioversold_);
  std::swap(mfiperiod_, other->mfiperiod_);
  std::swap(cciperiod_, other->cciperiod_);
  std::swap(ccioverbought_, other->ccioverbought_);
  std::swap(ccioversold_, other->ccioversold_);
  std::swap(ccimaperiod_, other->ccimaperiod_);
  std::swap(adxperiod_, other->adxperiod_);
  std::swap(macdmatype_, other->macdmatype_);
  std::swap(macdfastperiod_, other->macdfastperiod_);
  std::swap(macdslowperiod_, other->macdslowperiod_);
  std::swap(macdsignalperiod_, other->macdsignalperiod_);
  std::swap(macdhistmaperiod_, other->macdhistmaperiod_);
  std::swap(bbperiod_, other->bbperiod_);
  std::swap(volbbperiod_, other->volbbperiod_);
  std::swap(bsvdbbperiod_, other->bsvdbbperiod_);
  std::swap(oichgbbperiod_, other->oichgbbperiod_);
  std::swap(bbmaperiod_, other->bbmaperiod_);
  std::swap(volbbmaperiod_, other->volbbmaperiod_);
  std::swap(bsvdbbmaperiod_, other->bsvdbbmaperiod_);
  std::swap(oichgbbmaperiod_, other->oichgbbmaperiod_);
  std::swap(sarfastaccinit_, other->sarfastaccinit_);
  std::swap(sarfastaccstep_, other->sarfastaccstep_);
  std::swap(sarfastaccmax_, other->sarfastaccmax_);
  std::swap(sarmidaccinit_, other->sarmidaccinit_);
  std::swap(sarmidaccstep_, other->sarmidaccstep_);
  std::swap(sarmidaccmax_, other->sarmidaccmax_);
  std::swap(sarslowaccinit_, other->sarslowaccinit_);
  std::swap(sarslowaccstep_, other->sarslowaccstep_);
  std::swap(sarslowaccmax_, other->sarslowaccmax_);
  std::swap(bbsardist_, other->bbsardist_);
  std::swap(atrsardist_, other->atrsardist_);
  std::swap(bbmidslopeperiod_, other->bbmidslopeperiod_);
  std::swap(kbperiod_, other->kbperiod_);
  std::swap(slowkperiod_, other->slowkperiod_);
  std::swap(slowdperiod_, other->slowdperiod_);
  std::swap(fastkperiod_, other->fastkperiod_);
  std::swap(fastdperiod_, other->fastdperiod_);
  std::swap(dmiatrperiod_, other->dmiatrperiod_);
  std::swap(dmiadxperiod_, other->dmiadxperiod_);
  std::swap(matype_, other->matype_);
  std::swap(maperiod1_, other->maperiod1_);
  std::swap(maperiod2_, other->maperiod2_);
  std::swap(maperiod3_, other->maperiod3_);
  std::swap(maperiod4_, other->maperiod4_);
  std::swap(maperiod5_, other->maperiod5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TAParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAParams_descriptor_;
  metadata.reflection = TAParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TAParams

// optional int32 smaPeriod = 1 [default = 12];
bool TAParams::has_smaperiod() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TAParams::set_has_smaperiod() {
  _has_bits_[0] |= 0x00000001u;
}
void TAParams::clear_has_smaperiod() {
  _has_bits_[0] &= ~0x00000001u;
}
void TAParams::clear_smaperiod() {
  smaperiod_ = 12;
  clear_has_smaperiod();
}
 ::google::protobuf::int32 TAParams::smaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.smaPeriod)
  return smaperiod_;
}
 void TAParams::set_smaperiod(::google::protobuf::int32 value) {
  set_has_smaperiod();
  smaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.smaPeriod)
}

// optional int32 smaMidPeriod = 2 [default = 12];
bool TAParams::has_smamidperiod() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TAParams::set_has_smamidperiod() {
  _has_bits_[0] |= 0x00000002u;
}
void TAParams::clear_has_smamidperiod() {
  _has_bits_[0] &= ~0x00000002u;
}
void TAParams::clear_smamidperiod() {
  smamidperiod_ = 12;
  clear_has_smamidperiod();
}
 ::google::protobuf::int32 TAParams::smamidperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.smaMidPeriod)
  return smamidperiod_;
}
 void TAParams::set_smamidperiod(::google::protobuf::int32 value) {
  set_has_smamidperiod();
  smamidperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.smaMidPeriod)
}

// optional int32 smaFastPeriod = 3 [default = 12];
bool TAParams::has_smafastperiod() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TAParams::set_has_smafastperiod() {
  _has_bits_[0] |= 0x00000004u;
}
void TAParams::clear_has_smafastperiod() {
  _has_bits_[0] &= ~0x00000004u;
}
void TAParams::clear_smafastperiod() {
  smafastperiod_ = 12;
  clear_has_smafastperiod();
}
 ::google::protobuf::int32 TAParams::smafastperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.smaFastPeriod)
  return smafastperiod_;
}
 void TAParams::set_smafastperiod(::google::protobuf::int32 value) {
  set_has_smafastperiod();
  smafastperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.smaFastPeriod)
}

// optional int32 smaSlowPeriod = 4 [default = 26];
bool TAParams::has_smaslowperiod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TAParams::set_has_smaslowperiod() {
  _has_bits_[0] |= 0x00000008u;
}
void TAParams::clear_has_smaslowperiod() {
  _has_bits_[0] &= ~0x00000008u;
}
void TAParams::clear_smaslowperiod() {
  smaslowperiod_ = 26;
  clear_has_smaslowperiod();
}
 ::google::protobuf::int32 TAParams::smaslowperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.smaSlowPeriod)
  return smaslowperiod_;
}
 void TAParams::set_smaslowperiod(::google::protobuf::int32 value) {
  set_has_smaslowperiod();
  smaslowperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.smaSlowPeriod)
}

// optional int32 emaPeriod = 5 [default = 12];
bool TAParams::has_emaperiod() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TAParams::set_has_emaperiod() {
  _has_bits_[0] |= 0x00000010u;
}
void TAParams::clear_has_emaperiod() {
  _has_bits_[0] &= ~0x00000010u;
}
void TAParams::clear_emaperiod() {
  emaperiod_ = 12;
  clear_has_emaperiod();
}
 ::google::protobuf::int32 TAParams::emaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.emaPeriod)
  return emaperiod_;
}
 void TAParams::set_emaperiod(::google::protobuf::int32 value) {
  set_has_emaperiod();
  emaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.emaPeriod)
}

// optional int32 emaMidPeriod = 6 [default = 12];
bool TAParams::has_emamidperiod() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TAParams::set_has_emamidperiod() {
  _has_bits_[0] |= 0x00000020u;
}
void TAParams::clear_has_emamidperiod() {
  _has_bits_[0] &= ~0x00000020u;
}
void TAParams::clear_emamidperiod() {
  emamidperiod_ = 12;
  clear_has_emamidperiod();
}
 ::google::protobuf::int32 TAParams::emamidperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.emaMidPeriod)
  return emamidperiod_;
}
 void TAParams::set_emamidperiod(::google::protobuf::int32 value) {
  set_has_emamidperiod();
  emamidperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.emaMidPeriod)
}

// optional int32 emaFastPeriod = 7 [default = 12];
bool TAParams::has_emafastperiod() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TAParams::set_has_emafastperiod() {
  _has_bits_[0] |= 0x00000040u;
}
void TAParams::clear_has_emafastperiod() {
  _has_bits_[0] &= ~0x00000040u;
}
void TAParams::clear_emafastperiod() {
  emafastperiod_ = 12;
  clear_has_emafastperiod();
}
 ::google::protobuf::int32 TAParams::emafastperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.emaFastPeriod)
  return emafastperiod_;
}
 void TAParams::set_emafastperiod(::google::protobuf::int32 value) {
  set_has_emafastperiod();
  emafastperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.emaFastPeriod)
}

// optional int32 emaSlowPeriod = 8 [default = 26];
bool TAParams::has_emaslowperiod() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TAParams::set_has_emaslowperiod() {
  _has_bits_[0] |= 0x00000080u;
}
void TAParams::clear_has_emaslowperiod() {
  _has_bits_[0] &= ~0x00000080u;
}
void TAParams::clear_emaslowperiod() {
  emaslowperiod_ = 26;
  clear_has_emaslowperiod();
}
 ::google::protobuf::int32 TAParams::emaslowperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.emaSlowPeriod)
  return emaslowperiod_;
}
 void TAParams::set_emaslowperiod(::google::protobuf::int32 value) {
  set_has_emaslowperiod();
  emaslowperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.emaSlowPeriod)
}

// optional int32 atrPeriod = 9 [default = 14];
bool TAParams::has_atrperiod() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TAParams::set_has_atrperiod() {
  _has_bits_[0] |= 0x00000100u;
}
void TAParams::clear_has_atrperiod() {
  _has_bits_[0] &= ~0x00000100u;
}
void TAParams::clear_atrperiod() {
  atrperiod_ = 14;
  clear_has_atrperiod();
}
 ::google::protobuf::int32 TAParams::atrperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.atrPeriod)
  return atrperiod_;
}
 void TAParams::set_atrperiod(::google::protobuf::int32 value) {
  set_has_atrperiod();
  atrperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.atrPeriod)
}

// optional int32 rsiPeriod = 10 [default = 14];
bool TAParams::has_rsiperiod() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TAParams::set_has_rsiperiod() {
  _has_bits_[0] |= 0x00000200u;
}
void TAParams::clear_has_rsiperiod() {
  _has_bits_[0] &= ~0x00000200u;
}
void TAParams::clear_rsiperiod() {
  rsiperiod_ = 14;
  clear_has_rsiperiod();
}
 ::google::protobuf::int32 TAParams::rsiperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.rsiPeriod)
  return rsiperiod_;
}
 void TAParams::set_rsiperiod(::google::protobuf::int32 value) {
  set_has_rsiperiod();
  rsiperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.rsiPeriod)
}

// optional double rsiOverbought = 11 [default = 70];
bool TAParams::has_rsioverbought() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TAParams::set_has_rsioverbought() {
  _has_bits_[0] |= 0x00000400u;
}
void TAParams::clear_has_rsioverbought() {
  _has_bits_[0] &= ~0x00000400u;
}
void TAParams::clear_rsioverbought() {
  rsioverbought_ = 70;
  clear_has_rsioverbought();
}
 double TAParams::rsioverbought() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.rsiOverbought)
  return rsioverbought_;
}
 void TAParams::set_rsioverbought(double value) {
  set_has_rsioverbought();
  rsioverbought_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.rsiOverbought)
}

// optional double rsiOversold = 12 [default = 30];
bool TAParams::has_rsioversold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TAParams::set_has_rsioversold() {
  _has_bits_[0] |= 0x00000800u;
}
void TAParams::clear_has_rsioversold() {
  _has_bits_[0] &= ~0x00000800u;
}
void TAParams::clear_rsioversold() {
  rsioversold_ = 30;
  clear_has_rsioversold();
}
 double TAParams::rsioversold() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.rsiOversold)
  return rsioversold_;
}
 void TAParams::set_rsioversold(double value) {
  set_has_rsioversold();
  rsioversold_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.rsiOversold)
}

// optional int32 mfiPeriod = 13 [default = 14];
bool TAParams::has_mfiperiod() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TAParams::set_has_mfiperiod() {
  _has_bits_[0] |= 0x00001000u;
}
void TAParams::clear_has_mfiperiod() {
  _has_bits_[0] &= ~0x00001000u;
}
void TAParams::clear_mfiperiod() {
  mfiperiod_ = 14;
  clear_has_mfiperiod();
}
 ::google::protobuf::int32 TAParams::mfiperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.mfiPeriod)
  return mfiperiod_;
}
 void TAParams::set_mfiperiod(::google::protobuf::int32 value) {
  set_has_mfiperiod();
  mfiperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.mfiPeriod)
}

// optional int32 cciPeriod = 14 [default = 20];
bool TAParams::has_cciperiod() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TAParams::set_has_cciperiod() {
  _has_bits_[0] |= 0x00002000u;
}
void TAParams::clear_has_cciperiod() {
  _has_bits_[0] &= ~0x00002000u;
}
void TAParams::clear_cciperiod() {
  cciperiod_ = 20;
  clear_has_cciperiod();
}
 ::google::protobuf::int32 TAParams::cciperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.cciPeriod)
  return cciperiod_;
}
 void TAParams::set_cciperiod(::google::protobuf::int32 value) {
  set_has_cciperiod();
  cciperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.cciPeriod)
}

// optional double cciOverbought = 15 [default = 1.5];
bool TAParams::has_ccioverbought() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TAParams::set_has_ccioverbought() {
  _has_bits_[0] |= 0x00004000u;
}
void TAParams::clear_has_ccioverbought() {
  _has_bits_[0] &= ~0x00004000u;
}
void TAParams::clear_ccioverbought() {
  ccioverbought_ = 1.5;
  clear_has_ccioverbought();
}
 double TAParams::ccioverbought() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.cciOverbought)
  return ccioverbought_;
}
 void TAParams::set_ccioverbought(double value) {
  set_has_ccioverbought();
  ccioverbought_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.cciOverbought)
}

// optional double cciOversold = 16 [default = 1.5];
bool TAParams::has_ccioversold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TAParams::set_has_ccioversold() {
  _has_bits_[0] |= 0x00008000u;
}
void TAParams::clear_has_ccioversold() {
  _has_bits_[0] &= ~0x00008000u;
}
void TAParams::clear_ccioversold() {
  ccioversold_ = 1.5;
  clear_has_ccioversold();
}
 double TAParams::ccioversold() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.cciOversold)
  return ccioversold_;
}
 void TAParams::set_ccioversold(double value) {
  set_has_ccioversold();
  ccioversold_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.cciOversold)
}

// optional int32 cciMaPeriod = 17 [default = 5];
bool TAParams::has_ccimaperiod() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TAParams::set_has_ccimaperiod() {
  _has_bits_[0] |= 0x00010000u;
}
void TAParams::clear_has_ccimaperiod() {
  _has_bits_[0] &= ~0x00010000u;
}
void TAParams::clear_ccimaperiod() {
  ccimaperiod_ = 5;
  clear_has_ccimaperiod();
}
 ::google::protobuf::int32 TAParams::ccimaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.cciMaPeriod)
  return ccimaperiod_;
}
 void TAParams::set_ccimaperiod(::google::protobuf::int32 value) {
  set_has_ccimaperiod();
  ccimaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.cciMaPeriod)
}

// optional int32 adxPeriod = 18 [default = 14];
bool TAParams::has_adxperiod() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TAParams::set_has_adxperiod() {
  _has_bits_[0] |= 0x00020000u;
}
void TAParams::clear_has_adxperiod() {
  _has_bits_[0] &= ~0x00020000u;
}
void TAParams::clear_adxperiod() {
  adxperiod_ = 14;
  clear_has_adxperiod();
}
 ::google::protobuf::int32 TAParams::adxperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.adxPeriod)
  return adxperiod_;
}
 void TAParams::set_adxperiod(::google::protobuf::int32 value) {
  set_has_adxperiod();
  adxperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.adxPeriod)
}

// optional int32 macdMAType = 19 [default = 0];
bool TAParams::has_macdmatype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TAParams::set_has_macdmatype() {
  _has_bits_[0] |= 0x00040000u;
}
void TAParams::clear_has_macdmatype() {
  _has_bits_[0] &= ~0x00040000u;
}
void TAParams::clear_macdmatype() {
  macdmatype_ = 0;
  clear_has_macdmatype();
}
 ::google::protobuf::int32 TAParams::macdmatype() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.macdMAType)
  return macdmatype_;
}
 void TAParams::set_macdmatype(::google::protobuf::int32 value) {
  set_has_macdmatype();
  macdmatype_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.macdMAType)
}

// optional int32 macdFastPeriod = 20 [default = 12];
bool TAParams::has_macdfastperiod() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TAParams::set_has_macdfastperiod() {
  _has_bits_[0] |= 0x00080000u;
}
void TAParams::clear_has_macdfastperiod() {
  _has_bits_[0] &= ~0x00080000u;
}
void TAParams::clear_macdfastperiod() {
  macdfastperiod_ = 12;
  clear_has_macdfastperiod();
}
 ::google::protobuf::int32 TAParams::macdfastperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.macdFastPeriod)
  return macdfastperiod_;
}
 void TAParams::set_macdfastperiod(::google::protobuf::int32 value) {
  set_has_macdfastperiod();
  macdfastperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.macdFastPeriod)
}

// optional int32 macdSlowPeriod = 21 [default = 26];
bool TAParams::has_macdslowperiod() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TAParams::set_has_macdslowperiod() {
  _has_bits_[0] |= 0x00100000u;
}
void TAParams::clear_has_macdslowperiod() {
  _has_bits_[0] &= ~0x00100000u;
}
void TAParams::clear_macdslowperiod() {
  macdslowperiod_ = 26;
  clear_has_macdslowperiod();
}
 ::google::protobuf::int32 TAParams::macdslowperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.macdSlowPeriod)
  return macdslowperiod_;
}
 void TAParams::set_macdslowperiod(::google::protobuf::int32 value) {
  set_has_macdslowperiod();
  macdslowperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.macdSlowPeriod)
}

// optional int32 macdSignalPeriod = 22 [default = 9];
bool TAParams::has_macdsignalperiod() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TAParams::set_has_macdsignalperiod() {
  _has_bits_[0] |= 0x00200000u;
}
void TAParams::clear_has_macdsignalperiod() {
  _has_bits_[0] &= ~0x00200000u;
}
void TAParams::clear_macdsignalperiod() {
  macdsignalperiod_ = 9;
  clear_has_macdsignalperiod();
}
 ::google::protobuf::int32 TAParams::macdsignalperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.macdSignalPeriod)
  return macdsignalperiod_;
}
 void TAParams::set_macdsignalperiod(::google::protobuf::int32 value) {
  set_has_macdsignalperiod();
  macdsignalperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.macdSignalPeriod)
}

// optional int32 macdHistMaPeriod = 23 [default = 5];
bool TAParams::has_macdhistmaperiod() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TAParams::set_has_macdhistmaperiod() {
  _has_bits_[0] |= 0x00400000u;
}
void TAParams::clear_has_macdhistmaperiod() {
  _has_bits_[0] &= ~0x00400000u;
}
void TAParams::clear_macdhistmaperiod() {
  macdhistmaperiod_ = 5;
  clear_has_macdhistmaperiod();
}
 ::google::protobuf::int32 TAParams::macdhistmaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.macdHistMaPeriod)
  return macdhistmaperiod_;
}
 void TAParams::set_macdhistmaperiod(::google::protobuf::int32 value) {
  set_has_macdhistmaperiod();
  macdhistmaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.macdHistMaPeriod)
}

// optional int32 bbPeriod = 24 [default = 20];
bool TAParams::has_bbperiod() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TAParams::set_has_bbperiod() {
  _has_bits_[0] |= 0x00800000u;
}
void TAParams::clear_has_bbperiod() {
  _has_bits_[0] &= ~0x00800000u;
}
void TAParams::clear_bbperiod() {
  bbperiod_ = 20;
  clear_has_bbperiod();
}
 ::google::protobuf::int32 TAParams::bbperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.bbPeriod)
  return bbperiod_;
}
 void TAParams::set_bbperiod(::google::protobuf::int32 value) {
  set_has_bbperiod();
  bbperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.bbPeriod)
}

// optional int32 volbbPeriod = 25 [default = 20];
bool TAParams::has_volbbperiod() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void TAParams::set_has_volbbperiod() {
  _has_bits_[0] |= 0x01000000u;
}
void TAParams::clear_has_volbbperiod() {
  _has_bits_[0] &= ~0x01000000u;
}
void TAParams::clear_volbbperiod() {
  volbbperiod_ = 20;
  clear_has_volbbperiod();
}
 ::google::protobuf::int32 TAParams::volbbperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.volbbPeriod)
  return volbbperiod_;
}
 void TAParams::set_volbbperiod(::google::protobuf::int32 value) {
  set_has_volbbperiod();
  volbbperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.volbbPeriod)
}

// optional int32 bsvdBBPeriod = 26 [default = 20];
bool TAParams::has_bsvdbbperiod() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void TAParams::set_has_bsvdbbperiod() {
  _has_bits_[0] |= 0x02000000u;
}
void TAParams::clear_has_bsvdbbperiod() {
  _has_bits_[0] &= ~0x02000000u;
}
void TAParams::clear_bsvdbbperiod() {
  bsvdbbperiod_ = 20;
  clear_has_bsvdbbperiod();
}
 ::google::protobuf::int32 TAParams::bsvdbbperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.bsvdBBPeriod)
  return bsvdbbperiod_;
}
 void TAParams::set_bsvdbbperiod(::google::protobuf::int32 value) {
  set_has_bsvdbbperiod();
  bsvdbbperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.bsvdBBPeriod)
}

// optional int32 oichgBBPeriod = 27 [default = 20];
bool TAParams::has_oichgbbperiod() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void TAParams::set_has_oichgbbperiod() {
  _has_bits_[0] |= 0x04000000u;
}
void TAParams::clear_has_oichgbbperiod() {
  _has_bits_[0] &= ~0x04000000u;
}
void TAParams::clear_oichgbbperiod() {
  oichgbbperiod_ = 20;
  clear_has_oichgbbperiod();
}
 ::google::protobuf::int32 TAParams::oichgbbperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.oichgBBPeriod)
  return oichgbbperiod_;
}
 void TAParams::set_oichgbbperiod(::google::protobuf::int32 value) {
  set_has_oichgbbperiod();
  oichgbbperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.oichgBBPeriod)
}

// optional int32 bbMaPeriod = 28 [default = 20];
bool TAParams::has_bbmaperiod() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void TAParams::set_has_bbmaperiod() {
  _has_bits_[0] |= 0x08000000u;
}
void TAParams::clear_has_bbmaperiod() {
  _has_bits_[0] &= ~0x08000000u;
}
void TAParams::clear_bbmaperiod() {
  bbmaperiod_ = 20;
  clear_has_bbmaperiod();
}
 ::google::protobuf::int32 TAParams::bbmaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.bbMaPeriod)
  return bbmaperiod_;
}
 void TAParams::set_bbmaperiod(::google::protobuf::int32 value) {
  set_has_bbmaperiod();
  bbmaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.bbMaPeriod)
}

// optional int32 volbbMaPeriod = 29 [default = 20];
bool TAParams::has_volbbmaperiod() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void TAParams::set_has_volbbmaperiod() {
  _has_bits_[0] |= 0x10000000u;
}
void TAParams::clear_has_volbbmaperiod() {
  _has_bits_[0] &= ~0x10000000u;
}
void TAParams::clear_volbbmaperiod() {
  volbbmaperiod_ = 20;
  clear_has_volbbmaperiod();
}
 ::google::protobuf::int32 TAParams::volbbmaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.volbbMaPeriod)
  return volbbmaperiod_;
}
 void TAParams::set_volbbmaperiod(::google::protobuf::int32 value) {
  set_has_volbbmaperiod();
  volbbmaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.volbbMaPeriod)
}

// optional int32 bsvdBBMaPeriod = 30 [default = 20];
bool TAParams::has_bsvdbbmaperiod() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void TAParams::set_has_bsvdbbmaperiod() {
  _has_bits_[0] |= 0x20000000u;
}
void TAParams::clear_has_bsvdbbmaperiod() {
  _has_bits_[0] &= ~0x20000000u;
}
void TAParams::clear_bsvdbbmaperiod() {
  bsvdbbmaperiod_ = 20;
  clear_has_bsvdbbmaperiod();
}
 ::google::protobuf::int32 TAParams::bsvdbbmaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.bsvdBBMaPeriod)
  return bsvdbbmaperiod_;
}
 void TAParams::set_bsvdbbmaperiod(::google::protobuf::int32 value) {
  set_has_bsvdbbmaperiod();
  bsvdbbmaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.bsvdBBMaPeriod)
}

// optional int32 oichgBBMaPeriod = 31 [default = 20];
bool TAParams::has_oichgbbmaperiod() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void TAParams::set_has_oichgbbmaperiod() {
  _has_bits_[0] |= 0x40000000u;
}
void TAParams::clear_has_oichgbbmaperiod() {
  _has_bits_[0] &= ~0x40000000u;
}
void TAParams::clear_oichgbbmaperiod() {
  oichgbbmaperiod_ = 20;
  clear_has_oichgbbmaperiod();
}
 ::google::protobuf::int32 TAParams::oichgbbmaperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.oichgBBMaPeriod)
  return oichgbbmaperiod_;
}
 void TAParams::set_oichgbbmaperiod(::google::protobuf::int32 value) {
  set_has_oichgbbmaperiod();
  oichgbbmaperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.oichgBBMaPeriod)
}

// optional double sarFastAccInit = 32 [default = 0.03];
bool TAParams::has_sarfastaccinit() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void TAParams::set_has_sarfastaccinit() {
  _has_bits_[0] |= 0x80000000u;
}
void TAParams::clear_has_sarfastaccinit() {
  _has_bits_[0] &= ~0x80000000u;
}
void TAParams::clear_sarfastaccinit() {
  sarfastaccinit_ = 0.03;
  clear_has_sarfastaccinit();
}
 double TAParams::sarfastaccinit() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarFastAccInit)
  return sarfastaccinit_;
}
 void TAParams::set_sarfastaccinit(double value) {
  set_has_sarfastaccinit();
  sarfastaccinit_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarFastAccInit)
}

// optional double sarFastAccStep = 33 [default = 0.03];
bool TAParams::has_sarfastaccstep() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void TAParams::set_has_sarfastaccstep() {
  _has_bits_[1] |= 0x00000001u;
}
void TAParams::clear_has_sarfastaccstep() {
  _has_bits_[1] &= ~0x00000001u;
}
void TAParams::clear_sarfastaccstep() {
  sarfastaccstep_ = 0.03;
  clear_has_sarfastaccstep();
}
 double TAParams::sarfastaccstep() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarFastAccStep)
  return sarfastaccstep_;
}
 void TAParams::set_sarfastaccstep(double value) {
  set_has_sarfastaccstep();
  sarfastaccstep_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarFastAccStep)
}

// optional double sarFastAccMax = 34 [default = 0.3];
bool TAParams::has_sarfastaccmax() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void TAParams::set_has_sarfastaccmax() {
  _has_bits_[1] |= 0x00000002u;
}
void TAParams::clear_has_sarfastaccmax() {
  _has_bits_[1] &= ~0x00000002u;
}
void TAParams::clear_sarfastaccmax() {
  sarfastaccmax_ = 0.3;
  clear_has_sarfastaccmax();
}
 double TAParams::sarfastaccmax() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarFastAccMax)
  return sarfastaccmax_;
}
 void TAParams::set_sarfastaccmax(double value) {
  set_has_sarfastaccmax();
  sarfastaccmax_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarFastAccMax)
}

// optional double sarMidAccInit = 35 [default = 0.02];
bool TAParams::has_sarmidaccinit() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void TAParams::set_has_sarmidaccinit() {
  _has_bits_[1] |= 0x00000004u;
}
void TAParams::clear_has_sarmidaccinit() {
  _has_bits_[1] &= ~0x00000004u;
}
void TAParams::clear_sarmidaccinit() {
  sarmidaccinit_ = 0.02;
  clear_has_sarmidaccinit();
}
 double TAParams::sarmidaccinit() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarMidAccInit)
  return sarmidaccinit_;
}
 void TAParams::set_sarmidaccinit(double value) {
  set_has_sarmidaccinit();
  sarmidaccinit_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarMidAccInit)
}

// optional double sarMidAccStep = 36 [default = 0.02];
bool TAParams::has_sarmidaccstep() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void TAParams::set_has_sarmidaccstep() {
  _has_bits_[1] |= 0x00000008u;
}
void TAParams::clear_has_sarmidaccstep() {
  _has_bits_[1] &= ~0x00000008u;
}
void TAParams::clear_sarmidaccstep() {
  sarmidaccstep_ = 0.02;
  clear_has_sarmidaccstep();
}
 double TAParams::sarmidaccstep() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarMidAccStep)
  return sarmidaccstep_;
}
 void TAParams::set_sarmidaccstep(double value) {
  set_has_sarmidaccstep();
  sarmidaccstep_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarMidAccStep)
}

// optional double sarMidAccMax = 37 [default = 0.2];
bool TAParams::has_sarmidaccmax() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void TAParams::set_has_sarmidaccmax() {
  _has_bits_[1] |= 0x00000010u;
}
void TAParams::clear_has_sarmidaccmax() {
  _has_bits_[1] &= ~0x00000010u;
}
void TAParams::clear_sarmidaccmax() {
  sarmidaccmax_ = 0.2;
  clear_has_sarmidaccmax();
}
 double TAParams::sarmidaccmax() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarMidAccMax)
  return sarmidaccmax_;
}
 void TAParams::set_sarmidaccmax(double value) {
  set_has_sarmidaccmax();
  sarmidaccmax_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarMidAccMax)
}

// optional double sarSlowAccInit = 38 [default = 0.01];
bool TAParams::has_sarslowaccinit() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void TAParams::set_has_sarslowaccinit() {
  _has_bits_[1] |= 0x00000020u;
}
void TAParams::clear_has_sarslowaccinit() {
  _has_bits_[1] &= ~0x00000020u;
}
void TAParams::clear_sarslowaccinit() {
  sarslowaccinit_ = 0.01;
  clear_has_sarslowaccinit();
}
 double TAParams::sarslowaccinit() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarSlowAccInit)
  return sarslowaccinit_;
}
 void TAParams::set_sarslowaccinit(double value) {
  set_has_sarslowaccinit();
  sarslowaccinit_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarSlowAccInit)
}

// optional double sarSlowAccStep = 39 [default = 0.01];
bool TAParams::has_sarslowaccstep() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void TAParams::set_has_sarslowaccstep() {
  _has_bits_[1] |= 0x00000040u;
}
void TAParams::clear_has_sarslowaccstep() {
  _has_bits_[1] &= ~0x00000040u;
}
void TAParams::clear_sarslowaccstep() {
  sarslowaccstep_ = 0.01;
  clear_has_sarslowaccstep();
}
 double TAParams::sarslowaccstep() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarSlowAccStep)
  return sarslowaccstep_;
}
 void TAParams::set_sarslowaccstep(double value) {
  set_has_sarslowaccstep();
  sarslowaccstep_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarSlowAccStep)
}

// optional double sarSlowAccMax = 40 [default = 0.01];
bool TAParams::has_sarslowaccmax() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void TAParams::set_has_sarslowaccmax() {
  _has_bits_[1] |= 0x00000080u;
}
void TAParams::clear_has_sarslowaccmax() {
  _has_bits_[1] &= ~0x00000080u;
}
void TAParams::clear_sarslowaccmax() {
  sarslowaccmax_ = 0.01;
  clear_has_sarslowaccmax();
}
 double TAParams::sarslowaccmax() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.sarSlowAccMax)
  return sarslowaccmax_;
}
 void TAParams::set_sarslowaccmax(double value) {
  set_has_sarslowaccmax();
  sarslowaccmax_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.sarSlowAccMax)
}

// optional double bbsarDist = 41 [default = 1.5];
bool TAParams::has_bbsardist() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void TAParams::set_has_bbsardist() {
  _has_bits_[1] |= 0x00000100u;
}
void TAParams::clear_has_bbsardist() {
  _has_bits_[1] &= ~0x00000100u;
}
void TAParams::clear_bbsardist() {
  bbsardist_ = 1.5;
  clear_has_bbsardist();
}
 double TAParams::bbsardist() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.bbsarDist)
  return bbsardist_;
}
 void TAParams::set_bbsardist(double value) {
  set_has_bbsardist();
  bbsardist_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.bbsarDist)
}

// optional double atrsarDist = 42 [default = 1.5];
bool TAParams::has_atrsardist() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void TAParams::set_has_atrsardist() {
  _has_bits_[1] |= 0x00000200u;
}
void TAParams::clear_has_atrsardist() {
  _has_bits_[1] &= ~0x00000200u;
}
void TAParams::clear_atrsardist() {
  atrsardist_ = 1.5;
  clear_has_atrsardist();
}
 double TAParams::atrsardist() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.atrsarDist)
  return atrsardist_;
}
 void TAParams::set_atrsardist(double value) {
  set_has_atrsardist();
  atrsardist_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.atrsarDist)
}

// optional int32 bbmidSlopePeriod = 43 [default = 10];
bool TAParams::has_bbmidslopeperiod() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void TAParams::set_has_bbmidslopeperiod() {
  _has_bits_[1] |= 0x00000400u;
}
void TAParams::clear_has_bbmidslopeperiod() {
  _has_bits_[1] &= ~0x00000400u;
}
void TAParams::clear_bbmidslopeperiod() {
  bbmidslopeperiod_ = 10;
  clear_has_bbmidslopeperiod();
}
 ::google::protobuf::int32 TAParams::bbmidslopeperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.bbmidSlopePeriod)
  return bbmidslopeperiod_;
}
 void TAParams::set_bbmidslopeperiod(::google::protobuf::int32 value) {
  set_has_bbmidslopeperiod();
  bbmidslopeperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.bbmidSlopePeriod)
}

// optional int32 kbPeriod = 44 [default = 20];
bool TAParams::has_kbperiod() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void TAParams::set_has_kbperiod() {
  _has_bits_[1] |= 0x00000800u;
}
void TAParams::clear_has_kbperiod() {
  _has_bits_[1] &= ~0x00000800u;
}
void TAParams::clear_kbperiod() {
  kbperiod_ = 20;
  clear_has_kbperiod();
}
 ::google::protobuf::int32 TAParams::kbperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.kbPeriod)
  return kbperiod_;
}
 void TAParams::set_kbperiod(::google::protobuf::int32 value) {
  set_has_kbperiod();
  kbperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.kbPeriod)
}

// optional int32 slowKPeriod = 45 [default = 14];
bool TAParams::has_slowkperiod() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void TAParams::set_has_slowkperiod() {
  _has_bits_[1] |= 0x00001000u;
}
void TAParams::clear_has_slowkperiod() {
  _has_bits_[1] &= ~0x00001000u;
}
void TAParams::clear_slowkperiod() {
  slowkperiod_ = 14;
  clear_has_slowkperiod();
}
 ::google::protobuf::int32 TAParams::slowkperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.slowKPeriod)
  return slowkperiod_;
}
 void TAParams::set_slowkperiod(::google::protobuf::int32 value) {
  set_has_slowkperiod();
  slowkperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.slowKPeriod)
}

// optional int32 slowDPeriod = 46 [default = 3];
bool TAParams::has_slowdperiod() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void TAParams::set_has_slowdperiod() {
  _has_bits_[1] |= 0x00002000u;
}
void TAParams::clear_has_slowdperiod() {
  _has_bits_[1] &= ~0x00002000u;
}
void TAParams::clear_slowdperiod() {
  slowdperiod_ = 3;
  clear_has_slowdperiod();
}
 ::google::protobuf::int32 TAParams::slowdperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.slowDPeriod)
  return slowdperiod_;
}
 void TAParams::set_slowdperiod(::google::protobuf::int32 value) {
  set_has_slowdperiod();
  slowdperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.slowDPeriod)
}

// optional int32 fastKPeriod = 47 [default = 14];
bool TAParams::has_fastkperiod() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void TAParams::set_has_fastkperiod() {
  _has_bits_[1] |= 0x00004000u;
}
void TAParams::clear_has_fastkperiod() {
  _has_bits_[1] &= ~0x00004000u;
}
void TAParams::clear_fastkperiod() {
  fastkperiod_ = 14;
  clear_has_fastkperiod();
}
 ::google::protobuf::int32 TAParams::fastkperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.fastKPeriod)
  return fastkperiod_;
}
 void TAParams::set_fastkperiod(::google::protobuf::int32 value) {
  set_has_fastkperiod();
  fastkperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.fastKPeriod)
}

// optional int32 fastDPeriod = 48 [default = 3];
bool TAParams::has_fastdperiod() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void TAParams::set_has_fastdperiod() {
  _has_bits_[1] |= 0x00008000u;
}
void TAParams::clear_has_fastdperiod() {
  _has_bits_[1] &= ~0x00008000u;
}
void TAParams::clear_fastdperiod() {
  fastdperiod_ = 3;
  clear_has_fastdperiod();
}
 ::google::protobuf::int32 TAParams::fastdperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.fastDPeriod)
  return fastdperiod_;
}
 void TAParams::set_fastdperiod(::google::protobuf::int32 value) {
  set_has_fastdperiod();
  fastdperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.fastDPeriod)
}

// optional int32 dmiatrPeriod = 49 [default = 14];
bool TAParams::has_dmiatrperiod() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void TAParams::set_has_dmiatrperiod() {
  _has_bits_[1] |= 0x00010000u;
}
void TAParams::clear_has_dmiatrperiod() {
  _has_bits_[1] &= ~0x00010000u;
}
void TAParams::clear_dmiatrperiod() {
  dmiatrperiod_ = 14;
  clear_has_dmiatrperiod();
}
 ::google::protobuf::int32 TAParams::dmiatrperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.dmiatrPeriod)
  return dmiatrperiod_;
}
 void TAParams::set_dmiatrperiod(::google::protobuf::int32 value) {
  set_has_dmiatrperiod();
  dmiatrperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.dmiatrPeriod)
}

// optional int32 dmiadxPeriod = 50 [default = 6];
bool TAParams::has_dmiadxperiod() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void TAParams::set_has_dmiadxperiod() {
  _has_bits_[1] |= 0x00020000u;
}
void TAParams::clear_has_dmiadxperiod() {
  _has_bits_[1] &= ~0x00020000u;
}
void TAParams::clear_dmiadxperiod() {
  dmiadxperiod_ = 6;
  clear_has_dmiadxperiod();
}
 ::google::protobuf::int32 TAParams::dmiadxperiod() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.dmiadxPeriod)
  return dmiadxperiod_;
}
 void TAParams::set_dmiadxperiod(::google::protobuf::int32 value) {
  set_has_dmiadxperiod();
  dmiadxperiod_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.dmiadxPeriod)
}

// optional int32 matype = 51 [default = 0];
bool TAParams::has_matype() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void TAParams::set_has_matype() {
  _has_bits_[1] |= 0x00040000u;
}
void TAParams::clear_has_matype() {
  _has_bits_[1] &= ~0x00040000u;
}
void TAParams::clear_matype() {
  matype_ = 0;
  clear_has_matype();
}
 ::google::protobuf::int32 TAParams::matype() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.matype)
  return matype_;
}
 void TAParams::set_matype(::google::protobuf::int32 value) {
  set_has_matype();
  matype_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.matype)
}

// optional int32 maPeriod1 = 52 [default = 5];
bool TAParams::has_maperiod1() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void TAParams::set_has_maperiod1() {
  _has_bits_[1] |= 0x00080000u;
}
void TAParams::clear_has_maperiod1() {
  _has_bits_[1] &= ~0x00080000u;
}
void TAParams::clear_maperiod1() {
  maperiod1_ = 5;
  clear_has_maperiod1();
}
 ::google::protobuf::int32 TAParams::maperiod1() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.maPeriod1)
  return maperiod1_;
}
 void TAParams::set_maperiod1(::google::protobuf::int32 value) {
  set_has_maperiod1();
  maperiod1_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.maPeriod1)
}

// optional int32 maPeriod2 = 53 [default = 10];
bool TAParams::has_maperiod2() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void TAParams::set_has_maperiod2() {
  _has_bits_[1] |= 0x00100000u;
}
void TAParams::clear_has_maperiod2() {
  _has_bits_[1] &= ~0x00100000u;
}
void TAParams::clear_maperiod2() {
  maperiod2_ = 10;
  clear_has_maperiod2();
}
 ::google::protobuf::int32 TAParams::maperiod2() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.maPeriod2)
  return maperiod2_;
}
 void TAParams::set_maperiod2(::google::protobuf::int32 value) {
  set_has_maperiod2();
  maperiod2_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.maPeriod2)
}

// optional int32 maPeriod3 = 54 [default = 20];
bool TAParams::has_maperiod3() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void TAParams::set_has_maperiod3() {
  _has_bits_[1] |= 0x00200000u;
}
void TAParams::clear_has_maperiod3() {
  _has_bits_[1] &= ~0x00200000u;
}
void TAParams::clear_maperiod3() {
  maperiod3_ = 20;
  clear_has_maperiod3();
}
 ::google::protobuf::int32 TAParams::maperiod3() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.maPeriod3)
  return maperiod3_;
}
 void TAParams::set_maperiod3(::google::protobuf::int32 value) {
  set_has_maperiod3();
  maperiod3_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.maPeriod3)
}

// optional int32 maPeriod4 = 55 [default = 40];
bool TAParams::has_maperiod4() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void TAParams::set_has_maperiod4() {
  _has_bits_[1] |= 0x00400000u;
}
void TAParams::clear_has_maperiod4() {
  _has_bits_[1] &= ~0x00400000u;
}
void TAParams::clear_maperiod4() {
  maperiod4_ = 40;
  clear_has_maperiod4();
}
 ::google::protobuf::int32 TAParams::maperiod4() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.maPeriod4)
  return maperiod4_;
}
 void TAParams::set_maperiod4(::google::protobuf::int32 value) {
  set_has_maperiod4();
  maperiod4_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.maPeriod4)
}

// optional int32 maPeriod5 = 56 [default = 60];
bool TAParams::has_maperiod5() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void TAParams::set_has_maperiod5() {
  _has_bits_[1] |= 0x00800000u;
}
void TAParams::clear_has_maperiod5() {
  _has_bits_[1] &= ~0x00800000u;
}
void TAParams::clear_maperiod5() {
  maperiod5_ = 60;
  clear_has_maperiod5();
}
 ::google::protobuf::int32 TAParams::maperiod5() const {
  // @@protoc_insertion_point(field_get:XT.TAParams.maPeriod5)
  return maperiod5_;
}
 void TAParams::set_maperiod5(::google::protobuf::int32 value) {
  set_has_maperiod5();
  maperiod5_ = value;
  // @@protoc_insertion_point(field_set:XT.TAParams.maPeriod5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OHLCVData::kOpenFieldNumber;
const int OHLCVData::kHighFieldNumber;
const int OHLCVData::kLowFieldNumber;
const int OHLCVData::kCloseFieldNumber;
const int OHLCVData::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OHLCVData::OHLCVData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.OHLCVData)
}

void OHLCVData::InitAsDefaultInstance() {
}

OHLCVData::OHLCVData(const OHLCVData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.OHLCVData)
}

void OHLCVData::SharedCtor() {
  _cached_size_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OHLCVData::~OHLCVData() {
  // @@protoc_insertion_point(destructor:XT.OHLCVData)
  SharedDtor();
}

void OHLCVData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OHLCVData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OHLCVData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OHLCVData_descriptor_;
}

const OHLCVData& OHLCVData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

OHLCVData* OHLCVData::default_instance_ = NULL;

OHLCVData* OHLCVData::New(::google::protobuf::Arena* arena) const {
  OHLCVData* n = new OHLCVData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OHLCVData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.OHLCVData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OHLCVData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OHLCVData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(open_, volume_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OHLCVData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.OHLCVData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double open = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_high;
        break;
      }

      // optional double high = 2;
      case 2: {
        if (tag == 17) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_low;
        break;
      }

      // optional double low = 3;
      case 3: {
        if (tag == 25) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_close;
        break;
      }

      // optional double close = 4;
      case 4: {
        if (tag == 33) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_volume;
        break;
      }

      // optional int32 volume = 5;
      case 5: {
        if (tag == 40) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.OHLCVData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.OHLCVData)
  return false;
#undef DO_
}

void OHLCVData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.OHLCVData)
  // optional double open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->open(), output);
  }

  // optional double high = 2;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->high(), output);
  }

  // optional double low = 3;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->low(), output);
  }

  // optional double close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->close(), output);
  }

  // optional int32 volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.OHLCVData)
}

::google::protobuf::uint8* OHLCVData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.OHLCVData)
  // optional double open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->open(), target);
  }

  // optional double high = 2;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->high(), target);
  }

  // optional double low = 3;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->low(), target);
  }

  // optional double close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->close(), target);
  }

  // optional int32 volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.OHLCVData)
  return target;
}

int OHLCVData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.OHLCVData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double open = 1;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // optional double high = 2;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // optional double low = 3;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // optional double close = 4;
    if (has_close()) {
      total_size += 1 + 8;
    }

    // optional int32 volume = 5;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OHLCVData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.OHLCVData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OHLCVData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OHLCVData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.OHLCVData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.OHLCVData)
    MergeFrom(*source);
  }
}

void OHLCVData::MergeFrom(const OHLCVData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.OHLCVData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OHLCVData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.OHLCVData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OHLCVData::CopyFrom(const OHLCVData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.OHLCVData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OHLCVData::IsInitialized() const {

  return true;
}

void OHLCVData::Swap(OHLCVData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OHLCVData::InternalSwap(OHLCVData* other) {
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(close_, other->close_);
  std::swap(volume_, other->volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OHLCVData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OHLCVData_descriptor_;
  metadata.reflection = OHLCVData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OHLCVData

// optional double open = 1;
bool OHLCVData::has_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OHLCVData::set_has_open() {
  _has_bits_[0] |= 0x00000001u;
}
void OHLCVData::clear_has_open() {
  _has_bits_[0] &= ~0x00000001u;
}
void OHLCVData::clear_open() {
  open_ = 0;
  clear_has_open();
}
 double OHLCVData::open() const {
  // @@protoc_insertion_point(field_get:XT.OHLCVData.open)
  return open_;
}
 void OHLCVData::set_open(double value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:XT.OHLCVData.open)
}

// optional double high = 2;
bool OHLCVData::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OHLCVData::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
void OHLCVData::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
void OHLCVData::clear_high() {
  high_ = 0;
  clear_has_high();
}
 double OHLCVData::high() const {
  // @@protoc_insertion_point(field_get:XT.OHLCVData.high)
  return high_;
}
 void OHLCVData::set_high(double value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:XT.OHLCVData.high)
}

// optional double low = 3;
bool OHLCVData::has_low() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OHLCVData::set_has_low() {
  _has_bits_[0] |= 0x00000004u;
}
void OHLCVData::clear_has_low() {
  _has_bits_[0] &= ~0x00000004u;
}
void OHLCVData::clear_low() {
  low_ = 0;
  clear_has_low();
}
 double OHLCVData::low() const {
  // @@protoc_insertion_point(field_get:XT.OHLCVData.low)
  return low_;
}
 void OHLCVData::set_low(double value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:XT.OHLCVData.low)
}

// optional double close = 4;
bool OHLCVData::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OHLCVData::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
void OHLCVData::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
void OHLCVData::clear_close() {
  close_ = 0;
  clear_has_close();
}
 double OHLCVData::close() const {
  // @@protoc_insertion_point(field_get:XT.OHLCVData.close)
  return close_;
}
 void OHLCVData::set_close(double value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:XT.OHLCVData.close)
}

// optional int32 volume = 5;
bool OHLCVData::has_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OHLCVData::set_has_volume() {
  _has_bits_[0] |= 0x00000010u;
}
void OHLCVData::clear_has_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
void OHLCVData::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 ::google::protobuf::int32 OHLCVData::volume() const {
  // @@protoc_insertion_point(field_get:XT.OHLCVData.volume)
  return volume_;
}
 void OHLCVData::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.OHLCVData.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateOHLCV::kDateFieldNumber;
const int DateOHLCV::kOpenFieldNumber;
const int DateOHLCV::kHighFieldNumber;
const int DateOHLCV::kLowFieldNumber;
const int DateOHLCV::kCloseFieldNumber;
const int DateOHLCV::kAmountFieldNumber;
const int DateOHLCV::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateOHLCV::DateOHLCV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.DateOHLCV)
}

void DateOHLCV::InitAsDefaultInstance() {
}

DateOHLCV::DateOHLCV(const DateOHLCV& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.DateOHLCV)
}

void DateOHLCV::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  amount_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateOHLCV::~DateOHLCV() {
  // @@protoc_insertion_point(destructor:XT.DateOHLCV)
  SharedDtor();
}

void DateOHLCV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DateOHLCV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateOHLCV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateOHLCV_descriptor_;
}

const DateOHLCV& DateOHLCV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

DateOHLCV* DateOHLCV::default_instance_ = NULL;

DateOHLCV* DateOHLCV::New(::google::protobuf::Arena* arena) const {
  DateOHLCV* n = new DateOHLCV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DateOHLCV::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.DateOHLCV)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DateOHLCV, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DateOHLCV*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(date_, volume_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DateOHLCV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.DateOHLCV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 date = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_open;
        break;
      }

      // optional float open = 2;
      case 2: {
        if (tag == 21) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_high;
        break;
      }

      // optional float high = 3;
      case 3: {
        if (tag == 29) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_low;
        break;
      }

      // optional float low = 4;
      case 4: {
        if (tag == 37) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_close;
        break;
      }

      // optional float close = 5;
      case 5: {
        if (tag == 45) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_amount;
        break;
      }

      // optional float amount = 6;
      case 6: {
        if (tag == 53) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_volume;
        break;
      }

      // optional int64 volume = 7;
      case 7: {
        if (tag == 56) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.DateOHLCV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.DateOHLCV)
  return false;
#undef DO_
}

void DateOHLCV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.DateOHLCV)
  // optional int32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }

  // optional float open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->open(), output);
  }

  // optional float high = 3;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->high(), output);
  }

  // optional float low = 4;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->low(), output);
  }

  // optional float close = 5;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->close(), output);
  }

  // optional float amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->amount(), output);
  }

  // optional int64 volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.DateOHLCV)
}

::google::protobuf::uint8* DateOHLCV::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.DateOHLCV)
  // optional int32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }

  // optional float open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->open(), target);
  }

  // optional float high = 3;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->high(), target);
  }

  // optional float low = 4;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->low(), target);
  }

  // optional float close = 5;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->close(), target);
  }

  // optional float amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->amount(), target);
  }

  // optional int64 volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.DateOHLCV)
  return target;
}

int DateOHLCV::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.DateOHLCV)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional float open = 2;
    if (has_open()) {
      total_size += 1 + 4;
    }

    // optional float high = 3;
    if (has_high()) {
      total_size += 1 + 4;
    }

    // optional float low = 4;
    if (has_low()) {
      total_size += 1 + 4;
    }

    // optional float close = 5;
    if (has_close()) {
      total_size += 1 + 4;
    }

    // optional float amount = 6;
    if (has_amount()) {
      total_size += 1 + 4;
    }

    // optional int64 volume = 7;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateOHLCV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.DateOHLCV)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DateOHLCV* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DateOHLCV>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.DateOHLCV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.DateOHLCV)
    MergeFrom(*source);
  }
}

void DateOHLCV::MergeFrom(const DateOHLCV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.DateOHLCV)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DateOHLCV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.DateOHLCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateOHLCV::CopyFrom(const DateOHLCV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.DateOHLCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateOHLCV::IsInitialized() const {

  return true;
}

void DateOHLCV::Swap(DateOHLCV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateOHLCV::InternalSwap(DateOHLCV* other) {
  std::swap(date_, other->date_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(close_, other->close_);
  std::swap(amount_, other->amount_);
  std::swap(volume_, other->volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DateOHLCV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateOHLCV_descriptor_;
  metadata.reflection = DateOHLCV_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DateOHLCV

// optional int32 date = 1;
bool DateOHLCV::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DateOHLCV::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void DateOHLCV::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void DateOHLCV::clear_date() {
  date_ = 0;
  clear_has_date();
}
 ::google::protobuf::int32 DateOHLCV::date() const {
  // @@protoc_insertion_point(field_get:XT.DateOHLCV.date)
  return date_;
}
 void DateOHLCV::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:XT.DateOHLCV.date)
}

// optional float open = 2;
bool DateOHLCV::has_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DateOHLCV::set_has_open() {
  _has_bits_[0] |= 0x00000002u;
}
void DateOHLCV::clear_has_open() {
  _has_bits_[0] &= ~0x00000002u;
}
void DateOHLCV::clear_open() {
  open_ = 0;
  clear_has_open();
}
 float DateOHLCV::open() const {
  // @@protoc_insertion_point(field_get:XT.DateOHLCV.open)
  return open_;
}
 void DateOHLCV::set_open(float value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:XT.DateOHLCV.open)
}

// optional float high = 3;
bool DateOHLCV::has_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DateOHLCV::set_has_high() {
  _has_bits_[0] |= 0x00000004u;
}
void DateOHLCV::clear_has_high() {
  _has_bits_[0] &= ~0x00000004u;
}
void DateOHLCV::clear_high() {
  high_ = 0;
  clear_has_high();
}
 float DateOHLCV::high() const {
  // @@protoc_insertion_point(field_get:XT.DateOHLCV.high)
  return high_;
}
 void DateOHLCV::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:XT.DateOHLCV.high)
}

// optional float low = 4;
bool DateOHLCV::has_low() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DateOHLCV::set_has_low() {
  _has_bits_[0] |= 0x00000008u;
}
void DateOHLCV::clear_has_low() {
  _has_bits_[0] &= ~0x00000008u;
}
void DateOHLCV::clear_low() {
  low_ = 0;
  clear_has_low();
}
 float DateOHLCV::low() const {
  // @@protoc_insertion_point(field_get:XT.DateOHLCV.low)
  return low_;
}
 void DateOHLCV::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:XT.DateOHLCV.low)
}

// optional float close = 5;
bool DateOHLCV::has_close() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DateOHLCV::set_has_close() {
  _has_bits_[0] |= 0x00000010u;
}
void DateOHLCV::clear_has_close() {
  _has_bits_[0] &= ~0x00000010u;
}
void DateOHLCV::clear_close() {
  close_ = 0;
  clear_has_close();
}
 float DateOHLCV::close() const {
  // @@protoc_insertion_point(field_get:XT.DateOHLCV.close)
  return close_;
}
 void DateOHLCV::set_close(float value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:XT.DateOHLCV.close)
}

// optional float amount = 6;
bool DateOHLCV::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DateOHLCV::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
void DateOHLCV::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
void DateOHLCV::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 float DateOHLCV::amount() const {
  // @@protoc_insertion_point(field_get:XT.DateOHLCV.amount)
  return amount_;
}
 void DateOHLCV::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:XT.DateOHLCV.amount)
}

// optional int64 volume = 7;
bool DateOHLCV::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DateOHLCV::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
void DateOHLCV::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
void DateOHLCV::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 DateOHLCV::volume() const {
  // @@protoc_insertion_point(field_get:XT.DateOHLCV.volume)
  return volume_;
}
 void DateOHLCV::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.DateOHLCV.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeOHLCV::kDateFieldNumber;
const int DateTimeOHLCV::kTimeFieldNumber;
const int DateTimeOHLCV::kOpenFieldNumber;
const int DateTimeOHLCV::kHighFieldNumber;
const int DateTimeOHLCV::kLowFieldNumber;
const int DateTimeOHLCV::kCloseFieldNumber;
const int DateTimeOHLCV::kAmountFieldNumber;
const int DateTimeOHLCV::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeOHLCV::DateTimeOHLCV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.DateTimeOHLCV)
}

void DateTimeOHLCV::InitAsDefaultInstance() {
}

DateTimeOHLCV::DateTimeOHLCV(const DateTimeOHLCV& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.DateTimeOHLCV)
}

void DateTimeOHLCV::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  time_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  amount_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTimeOHLCV::~DateTimeOHLCV() {
  // @@protoc_insertion_point(destructor:XT.DateTimeOHLCV)
  SharedDtor();
}

void DateTimeOHLCV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DateTimeOHLCV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateTimeOHLCV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateTimeOHLCV_descriptor_;
}

const DateTimeOHLCV& DateTimeOHLCV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

DateTimeOHLCV* DateTimeOHLCV::default_instance_ = NULL;

DateTimeOHLCV* DateTimeOHLCV::New(::google::protobuf::Arena* arena) const {
  DateTimeOHLCV* n = new DateTimeOHLCV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DateTimeOHLCV::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.DateTimeOHLCV)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DateTimeOHLCV, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DateTimeOHLCV*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(date_, amount_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DateTimeOHLCV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.DateTimeOHLCV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 date = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_open;
        break;
      }

      // optional float open = 3;
      case 3: {
        if (tag == 29) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_high;
        break;
      }

      // optional float high = 4;
      case 4: {
        if (tag == 37) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_low;
        break;
      }

      // optional float low = 5;
      case 5: {
        if (tag == 45) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_close;
        break;
      }

      // optional float close = 6;
      case 6: {
        if (tag == 53) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_amount;
        break;
      }

      // optional float amount = 7;
      case 7: {
        if (tag == 61) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }

      // optional int64 volume = 8;
      case 8: {
        if (tag == 64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.DateTimeOHLCV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.DateTimeOHLCV)
  return false;
#undef DO_
}

void DateTimeOHLCV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.DateTimeOHLCV)
  // optional int32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional float open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->open(), output);
  }

  // optional float high = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->high(), output);
  }

  // optional float low = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->low(), output);
  }

  // optional float close = 6;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->close(), output);
  }

  // optional float amount = 7;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->amount(), output);
  }

  // optional int64 volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.DateTimeOHLCV)
}

::google::protobuf::uint8* DateTimeOHLCV::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.DateTimeOHLCV)
  // optional int32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional float open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->open(), target);
  }

  // optional float high = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->high(), target);
  }

  // optional float low = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->low(), target);
  }

  // optional float close = 6;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->close(), target);
  }

  // optional float amount = 7;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->amount(), target);
  }

  // optional int64 volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.DateTimeOHLCV)
  return target;
}

int DateTimeOHLCV::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.DateTimeOHLCV)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional float open = 3;
    if (has_open()) {
      total_size += 1 + 4;
    }

    // optional float high = 4;
    if (has_high()) {
      total_size += 1 + 4;
    }

    // optional float low = 5;
    if (has_low()) {
      total_size += 1 + 4;
    }

    // optional float close = 6;
    if (has_close()) {
      total_size += 1 + 4;
    }

    // optional float amount = 7;
    if (has_amount()) {
      total_size += 1 + 4;
    }

    // optional int64 volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTimeOHLCV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.DateTimeOHLCV)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DateTimeOHLCV* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DateTimeOHLCV>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.DateTimeOHLCV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.DateTimeOHLCV)
    MergeFrom(*source);
  }
}

void DateTimeOHLCV::MergeFrom(const DateTimeOHLCV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.DateTimeOHLCV)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DateTimeOHLCV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.DateTimeOHLCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeOHLCV::CopyFrom(const DateTimeOHLCV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.DateTimeOHLCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeOHLCV::IsInitialized() const {

  return true;
}

void DateTimeOHLCV::Swap(DateTimeOHLCV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeOHLCV::InternalSwap(DateTimeOHLCV* other) {
  std::swap(date_, other->date_);
  std::swap(time_, other->time_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(close_, other->close_);
  std::swap(amount_, other->amount_);
  std::swap(volume_, other->volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DateTimeOHLCV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateTimeOHLCV_descriptor_;
  metadata.reflection = DateTimeOHLCV_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DateTimeOHLCV

// optional int32 date = 1;
bool DateTimeOHLCV::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DateTimeOHLCV::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void DateTimeOHLCV::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void DateTimeOHLCV::clear_date() {
  date_ = 0;
  clear_has_date();
}
 ::google::protobuf::int32 DateTimeOHLCV::date() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.date)
  return date_;
}
 void DateTimeOHLCV::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.date)
}

// optional int32 time = 2;
bool DateTimeOHLCV::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DateTimeOHLCV::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void DateTimeOHLCV::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void DateTimeOHLCV::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 DateTimeOHLCV::time() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.time)
  return time_;
}
 void DateTimeOHLCV::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.time)
}

// optional float open = 3;
bool DateTimeOHLCV::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DateTimeOHLCV::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
void DateTimeOHLCV::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
void DateTimeOHLCV::clear_open() {
  open_ = 0;
  clear_has_open();
}
 float DateTimeOHLCV::open() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.open)
  return open_;
}
 void DateTimeOHLCV::set_open(float value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.open)
}

// optional float high = 4;
bool DateTimeOHLCV::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DateTimeOHLCV::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
void DateTimeOHLCV::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
void DateTimeOHLCV::clear_high() {
  high_ = 0;
  clear_has_high();
}
 float DateTimeOHLCV::high() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.high)
  return high_;
}
 void DateTimeOHLCV::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.high)
}

// optional float low = 5;
bool DateTimeOHLCV::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DateTimeOHLCV::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
void DateTimeOHLCV::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
void DateTimeOHLCV::clear_low() {
  low_ = 0;
  clear_has_low();
}
 float DateTimeOHLCV::low() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.low)
  return low_;
}
 void DateTimeOHLCV::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.low)
}

// optional float close = 6;
bool DateTimeOHLCV::has_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DateTimeOHLCV::set_has_close() {
  _has_bits_[0] |= 0x00000020u;
}
void DateTimeOHLCV::clear_has_close() {
  _has_bits_[0] &= ~0x00000020u;
}
void DateTimeOHLCV::clear_close() {
  close_ = 0;
  clear_has_close();
}
 float DateTimeOHLCV::close() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.close)
  return close_;
}
 void DateTimeOHLCV::set_close(float value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.close)
}

// optional float amount = 7;
bool DateTimeOHLCV::has_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DateTimeOHLCV::set_has_amount() {
  _has_bits_[0] |= 0x00000040u;
}
void DateTimeOHLCV::clear_has_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
void DateTimeOHLCV::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 float DateTimeOHLCV::amount() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.amount)
  return amount_;
}
 void DateTimeOHLCV::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.amount)
}

// optional int64 volume = 8;
bool DateTimeOHLCV::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DateTimeOHLCV::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
void DateTimeOHLCV::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
void DateTimeOHLCV::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 DateTimeOHLCV::volume() const {
  // @@protoc_insertion_point(field_get:XT.DateTimeOHLCV.volume)
  return volume_;
}
 void DateTimeOHLCV::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.DateTimeOHLCV.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TDXDayData::kDateFieldNumber;
const int TDXDayData::kOpenFieldNumber;
const int TDXDayData::kHighFieldNumber;
const int TDXDayData::kLowFieldNumber;
const int TDXDayData::kCloseFieldNumber;
const int TDXDayData::kAmountFieldNumber;
const int TDXDayData::kVolumeFieldNumber;
const int TDXDayData::kReserveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TDXDayData::TDXDayData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.TDXDayData)
}

void TDXDayData::InitAsDefaultInstance() {
}

TDXDayData::TDXDayData(const TDXDayData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.TDXDayData)
}

void TDXDayData::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  amount_ = 0;
  volume_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDXDayData::~TDXDayData() {
  // @@protoc_insertion_point(destructor:XT.TDXDayData)
  SharedDtor();
}

void TDXDayData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDXDayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDXDayData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDXDayData_descriptor_;
}

const TDXDayData& TDXDayData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

TDXDayData* TDXDayData::default_instance_ = NULL;

TDXDayData* TDXDayData::New(::google::protobuf::Arena* arena) const {
  TDXDayData* n = new TDXDayData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TDXDayData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.TDXDayData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TDXDayData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TDXDayData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(date_, reserve_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TDXDayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.TDXDayData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 date = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }

      // optional int32 open = 2;
      case 2: {
        if (tag == 16) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_high;
        break;
      }

      // optional int32 high = 3;
      case 3: {
        if (tag == 24) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_low;
        break;
      }

      // optional int32 low = 4;
      case 4: {
        if (tag == 32) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_close;
        break;
      }

      // optional int32 close = 5;
      case 5: {
        if (tag == 40) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_amount;
        break;
      }

      // optional float amount = 6;
      case 6: {
        if (tag == 53) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_volume;
        break;
      }

      // optional int32 volume = 7;
      case 7: {
        if (tag == 56) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reserve;
        break;
      }

      // optional int32 reserve = 8;
      case 8: {
        if (tag == 64) {
         parse_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.TDXDayData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.TDXDayData)
  return false;
#undef DO_
}

void TDXDayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.TDXDayData)
  // optional int32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }

  // optional int32 open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open(), output);
  }

  // optional int32 high = 3;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->high(), output);
  }

  // optional int32 low = 4;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->low(), output);
  }

  // optional int32 close = 5;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->close(), output);
  }

  // optional float amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->amount(), output);
  }

  // optional int32 volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->volume(), output);
  }

  // optional int32 reserve = 8;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reserve(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.TDXDayData)
}

::google::protobuf::uint8* TDXDayData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.TDXDayData)
  // optional int32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }

  // optional int32 open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open(), target);
  }

  // optional int32 high = 3;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->high(), target);
  }

  // optional int32 low = 4;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->low(), target);
  }

  // optional int32 close = 5;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->close(), target);
  }

  // optional float amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->amount(), target);
  }

  // optional int32 volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->volume(), target);
  }

  // optional int32 reserve = 8;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reserve(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.TDXDayData)
  return target;
}

int TDXDayData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.TDXDayData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional int32 open = 2;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

    // optional int32 high = 3;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }

    // optional int32 low = 4;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }

    // optional int32 close = 5;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close());
    }

    // optional float amount = 6;
    if (has_amount()) {
      total_size += 1 + 4;
    }

    // optional int32 volume = 7;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional int32 reserve = 8;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDXDayData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.TDXDayData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TDXDayData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TDXDayData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.TDXDayData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.TDXDayData)
    MergeFrom(*source);
  }
}

void TDXDayData::MergeFrom(const TDXDayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.TDXDayData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TDXDayData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.TDXDayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDXDayData::CopyFrom(const TDXDayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.TDXDayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDXDayData::IsInitialized() const {

  return true;
}

void TDXDayData::Swap(TDXDayData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TDXDayData::InternalSwap(TDXDayData* other) {
  std::swap(date_, other->date_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(close_, other->close_);
  std::swap(amount_, other->amount_);
  std::swap(volume_, other->volume_);
  std::swap(reserve_, other->reserve_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TDXDayData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDXDayData_descriptor_;
  metadata.reflection = TDXDayData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TDXDayData

// optional int32 date = 1;
bool TDXDayData::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TDXDayData::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void TDXDayData::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void TDXDayData::clear_date() {
  date_ = 0;
  clear_has_date();
}
 ::google::protobuf::int32 TDXDayData::date() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.date)
  return date_;
}
 void TDXDayData::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.date)
}

// optional int32 open = 2;
bool TDXDayData::has_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TDXDayData::set_has_open() {
  _has_bits_[0] |= 0x00000002u;
}
void TDXDayData::clear_has_open() {
  _has_bits_[0] &= ~0x00000002u;
}
void TDXDayData::clear_open() {
  open_ = 0;
  clear_has_open();
}
 ::google::protobuf::int32 TDXDayData::open() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.open)
  return open_;
}
 void TDXDayData::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.open)
}

// optional int32 high = 3;
bool TDXDayData::has_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TDXDayData::set_has_high() {
  _has_bits_[0] |= 0x00000004u;
}
void TDXDayData::clear_has_high() {
  _has_bits_[0] &= ~0x00000004u;
}
void TDXDayData::clear_high() {
  high_ = 0;
  clear_has_high();
}
 ::google::protobuf::int32 TDXDayData::high() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.high)
  return high_;
}
 void TDXDayData::set_high(::google::protobuf::int32 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.high)
}

// optional int32 low = 4;
bool TDXDayData::has_low() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TDXDayData::set_has_low() {
  _has_bits_[0] |= 0x00000008u;
}
void TDXDayData::clear_has_low() {
  _has_bits_[0] &= ~0x00000008u;
}
void TDXDayData::clear_low() {
  low_ = 0;
  clear_has_low();
}
 ::google::protobuf::int32 TDXDayData::low() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.low)
  return low_;
}
 void TDXDayData::set_low(::google::protobuf::int32 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.low)
}

// optional int32 close = 5;
bool TDXDayData::has_close() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TDXDayData::set_has_close() {
  _has_bits_[0] |= 0x00000010u;
}
void TDXDayData::clear_has_close() {
  _has_bits_[0] &= ~0x00000010u;
}
void TDXDayData::clear_close() {
  close_ = 0;
  clear_has_close();
}
 ::google::protobuf::int32 TDXDayData::close() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.close)
  return close_;
}
 void TDXDayData::set_close(::google::protobuf::int32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.close)
}

// optional float amount = 6;
bool TDXDayData::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TDXDayData::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
void TDXDayData::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
void TDXDayData::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 float TDXDayData::amount() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.amount)
  return amount_;
}
 void TDXDayData::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.amount)
}

// optional int32 volume = 7;
bool TDXDayData::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TDXDayData::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
void TDXDayData::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
void TDXDayData::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 ::google::protobuf::int32 TDXDayData::volume() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.volume)
  return volume_;
}
 void TDXDayData::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.volume)
}

// optional int32 reserve = 8;
bool TDXDayData::has_reserve() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TDXDayData::set_has_reserve() {
  _has_bits_[0] |= 0x00000080u;
}
void TDXDayData::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000080u;
}
void TDXDayData::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
 ::google::protobuf::int32 TDXDayData::reserve() const {
  // @@protoc_insertion_point(field_get:XT.TDXDayData.reserve)
  return reserve_;
}
 void TDXDayData::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXDayData.reserve)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TDXMinData::kDateFieldNumber;
const int TDXMinData::kMinutesFieldNumber;
const int TDXMinData::kOpenFieldNumber;
const int TDXMinData::kHighFieldNumber;
const int TDXMinData::kLowFieldNumber;
const int TDXMinData::kCloseFieldNumber;
const int TDXMinData::kAmountFieldNumber;
const int TDXMinData::kVolumeFieldNumber;
const int TDXMinData::kReserveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TDXMinData::TDXMinData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.TDXMinData)
}

void TDXMinData::InitAsDefaultInstance() {
}

TDXMinData::TDXMinData(const TDXMinData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.TDXMinData)
}

void TDXMinData::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  minutes_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  amount_ = 0;
  volume_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDXMinData::~TDXMinData() {
  // @@protoc_insertion_point(destructor:XT.TDXMinData)
  SharedDtor();
}

void TDXMinData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDXMinData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDXMinData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDXMinData_descriptor_;
}

const TDXMinData& TDXMinData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

TDXMinData* TDXMinData::default_instance_ = NULL;

TDXMinData* TDXMinData::New(::google::protobuf::Arena* arena) const {
  TDXMinData* n = new TDXMinData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TDXMinData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.TDXMinData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TDXMinData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TDXMinData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(date_, volume_);
  }
  reserve_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TDXMinData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.TDXMinData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 date = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minutes;
        break;
      }

      // optional int32 minutes = 2;
      case 2: {
        if (tag == 16) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
          set_has_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_open;
        break;
      }

      // optional float open = 3;
      case 3: {
        if (tag == 29) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_high;
        break;
      }

      // optional float high = 4;
      case 4: {
        if (tag == 37) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_low;
        break;
      }

      // optional float low = 5;
      case 5: {
        if (tag == 45) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_close;
        break;
      }

      // optional float close = 6;
      case 6: {
        if (tag == 53) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_amount;
        break;
      }

      // optional float amount = 7;
      case 7: {
        if (tag == 61) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }

      // optional int32 volume = 8;
      case 8: {
        if (tag == 64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reserve;
        break;
      }

      // optional int32 reserve = 9;
      case 9: {
        if (tag == 72) {
         parse_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.TDXMinData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.TDXMinData)
  return false;
#undef DO_
}

void TDXMinData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.TDXMinData)
  // optional int32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }

  // optional int32 minutes = 2;
  if (has_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minutes(), output);
  }

  // optional float open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->open(), output);
  }

  // optional float high = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->high(), output);
  }

  // optional float low = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->low(), output);
  }

  // optional float close = 6;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->close(), output);
  }

  // optional float amount = 7;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->amount(), output);
  }

  // optional int32 volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // optional int32 reserve = 9;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reserve(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.TDXMinData)
}

::google::protobuf::uint8* TDXMinData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.TDXMinData)
  // optional int32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }

  // optional int32 minutes = 2;
  if (has_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minutes(), target);
  }

  // optional float open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->open(), target);
  }

  // optional float high = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->high(), target);
  }

  // optional float low = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->low(), target);
  }

  // optional float close = 6;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->close(), target);
  }

  // optional float amount = 7;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->amount(), target);
  }

  // optional int32 volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // optional int32 reserve = 9;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reserve(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.TDXMinData)
  return target;
}

int TDXMinData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.TDXMinData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional int32 minutes = 2;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional float open = 3;
    if (has_open()) {
      total_size += 1 + 4;
    }

    // optional float high = 4;
    if (has_high()) {
      total_size += 1 + 4;
    }

    // optional float low = 5;
    if (has_low()) {
      total_size += 1 + 4;
    }

    // optional float close = 6;
    if (has_close()) {
      total_size += 1 + 4;
    }

    // optional float amount = 7;
    if (has_amount()) {
      total_size += 1 + 4;
    }

    // optional int32 volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

  }
  // optional int32 reserve = 9;
  if (has_reserve()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserve());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDXMinData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.TDXMinData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TDXMinData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TDXMinData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.TDXMinData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.TDXMinData)
    MergeFrom(*source);
  }
}

void TDXMinData::MergeFrom(const TDXMinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.TDXMinData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_minutes()) {
      set_minutes(from.minutes());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TDXMinData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.TDXMinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDXMinData::CopyFrom(const TDXMinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.TDXMinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDXMinData::IsInitialized() const {

  return true;
}

void TDXMinData::Swap(TDXMinData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TDXMinData::InternalSwap(TDXMinData* other) {
  std::swap(date_, other->date_);
  std::swap(minutes_, other->minutes_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(close_, other->close_);
  std::swap(amount_, other->amount_);
  std::swap(volume_, other->volume_);
  std::swap(reserve_, other->reserve_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TDXMinData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDXMinData_descriptor_;
  metadata.reflection = TDXMinData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TDXMinData

// optional int32 date = 1;
bool TDXMinData::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TDXMinData::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void TDXMinData::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void TDXMinData::clear_date() {
  date_ = 0;
  clear_has_date();
}
 ::google::protobuf::int32 TDXMinData::date() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.date)
  return date_;
}
 void TDXMinData::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.date)
}

// optional int32 minutes = 2;
bool TDXMinData::has_minutes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TDXMinData::set_has_minutes() {
  _has_bits_[0] |= 0x00000002u;
}
void TDXMinData::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000002u;
}
void TDXMinData::clear_minutes() {
  minutes_ = 0;
  clear_has_minutes();
}
 ::google::protobuf::int32 TDXMinData::minutes() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.minutes)
  return minutes_;
}
 void TDXMinData::set_minutes(::google::protobuf::int32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.minutes)
}

// optional float open = 3;
bool TDXMinData::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TDXMinData::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
void TDXMinData::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
void TDXMinData::clear_open() {
  open_ = 0;
  clear_has_open();
}
 float TDXMinData::open() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.open)
  return open_;
}
 void TDXMinData::set_open(float value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.open)
}

// optional float high = 4;
bool TDXMinData::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TDXMinData::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
void TDXMinData::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
void TDXMinData::clear_high() {
  high_ = 0;
  clear_has_high();
}
 float TDXMinData::high() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.high)
  return high_;
}
 void TDXMinData::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.high)
}

// optional float low = 5;
bool TDXMinData::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TDXMinData::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
void TDXMinData::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
void TDXMinData::clear_low() {
  low_ = 0;
  clear_has_low();
}
 float TDXMinData::low() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.low)
  return low_;
}
 void TDXMinData::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.low)
}

// optional float close = 6;
bool TDXMinData::has_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TDXMinData::set_has_close() {
  _has_bits_[0] |= 0x00000020u;
}
void TDXMinData::clear_has_close() {
  _has_bits_[0] &= ~0x00000020u;
}
void TDXMinData::clear_close() {
  close_ = 0;
  clear_has_close();
}
 float TDXMinData::close() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.close)
  return close_;
}
 void TDXMinData::set_close(float value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.close)
}

// optional float amount = 7;
bool TDXMinData::has_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TDXMinData::set_has_amount() {
  _has_bits_[0] |= 0x00000040u;
}
void TDXMinData::clear_has_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
void TDXMinData::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 float TDXMinData::amount() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.amount)
  return amount_;
}
 void TDXMinData::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.amount)
}

// optional int32 volume = 8;
bool TDXMinData::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TDXMinData::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
void TDXMinData::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
void TDXMinData::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 ::google::protobuf::int32 TDXMinData::volume() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.volume)
  return volume_;
}
 void TDXMinData::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.volume)
}

// optional int32 reserve = 9;
bool TDXMinData::has_reserve() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TDXMinData::set_has_reserve() {
  _has_bits_[0] |= 0x00000100u;
}
void TDXMinData::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000100u;
}
void TDXMinData::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
 ::google::protobuf::int32 TDXMinData::reserve() const {
  // @@protoc_insertion_point(field_get:XT.TDXMinData.reserve)
  return reserve_;
}
 void TDXMinData::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
  // @@protoc_insertion_point(field_set:XT.TDXMinData.reserve)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KCBPTagQuoteInfo10::kCMarketFieldNumber;
const int KCBPTagQuoteInfo10::kSzStkcodeFieldNumber;
const int KCBPTagQuoteInfo10::kSzStknameFieldNumber;
const int KCBPTagQuoteInfo10::kDbClosePriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbOpenPriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbLastPriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbHighPriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbLowPriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbMatchQtyFieldNumber;
const int KCBPTagQuoteInfo10::kDbMatchAmtFieldNumber;
const int KCBPTagQuoteInfo10::kDbMaxRiseValueFieldNumber;
const int KCBPTagQuoteInfo10::kDbMaxDownValueFieldNumber;
const int KCBPTagQuoteInfo10::kDbAvgPriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice1FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume1FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice2FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume2FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice3FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume3FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice4FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume4FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice5FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume5FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice6FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume6FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice7FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume7FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice8FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume8FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice9FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume9FieldNumber;
const int KCBPTagQuoteInfo10::kDbBuyPrice10FieldNumber;
const int KCBPTagQuoteInfo10::kNBuyVolume10FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice1FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume1FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice2FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume2FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice3FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume3FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice4FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume4FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice5FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume5FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice6FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume6FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice7FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume7FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice8FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume8FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice9FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume9FieldNumber;
const int KCBPTagQuoteInfo10::kDbSalePrice10FieldNumber;
const int KCBPTagQuoteInfo10::kNSaleVolume10FieldNumber;
const int KCBPTagQuoteInfo10::kCProductClassFieldNumber;
const int KCBPTagQuoteInfo10::kNPreOpenInterestFieldNumber;
const int KCBPTagQuoteInfo10::kNOpenInterestFieldNumber;
const int KCBPTagQuoteInfo10::kDbSettPriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbPreSettPriceFieldNumber;
const int KCBPTagQuoteInfo10::kDbFtClosePriceFieldNumber;
const int KCBPTagQuoteInfo10::kCStopFlagFieldNumber;
const int KCBPTagQuoteInfo10::kNBusidateFieldNumber;
const int KCBPTagQuoteInfo10::kNUpdateTimeFieldNumber;
const int KCBPTagQuoteInfo10::kNUpdateMillisecFieldNumber;
const int KCBPTagQuoteInfo10::kSzReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KCBPTagQuoteInfo10::KCBPTagQuoteInfo10()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.KCBPTagQuoteInfo10)
}

void KCBPTagQuoteInfo10::InitAsDefaultInstance() {
}

KCBPTagQuoteInfo10::KCBPTagQuoteInfo10(const KCBPTagQuoteInfo10& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.KCBPTagQuoteInfo10)
}

void KCBPTagQuoteInfo10::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmarket_ = 0;
  szstkcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szstkname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbcloseprice_ = 0;
  dbopenprice_ = 0;
  dblastprice_ = 0;
  dbhighprice_ = 0;
  dblowprice_ = 0;
  dbmatchqty_ = 0;
  dbmatchamt_ = 0;
  dbmaxrisevalue_ = 0;
  dbmaxdownvalue_ = 0;
  dbavgprice_ = 0;
  dbbuyprice1_ = 0;
  nbuyvolume1_ = 0;
  dbbuyprice2_ = 0;
  nbuyvolume2_ = 0;
  dbbuyprice3_ = 0;
  nbuyvolume3_ = 0;
  dbbuyprice4_ = 0;
  nbuyvolume4_ = 0;
  dbbuyprice5_ = 0;
  nbuyvolume5_ = 0;
  dbbuyprice6_ = 0;
  nbuyvolume6_ = 0;
  dbbuyprice7_ = 0;
  nbuyvolume7_ = 0;
  dbbuyprice8_ = 0;
  nbuyvolume8_ = 0;
  dbbuyprice9_ = 0;
  nbuyvolume9_ = 0;
  dbbuyprice10_ = 0;
  nbuyvolume10_ = 0;
  dbsaleprice1_ = 0;
  nsalevolume1_ = 0;
  dbsaleprice2_ = 0;
  nsalevolume2_ = 0;
  dbsaleprice3_ = 0;
  nsalevolume3_ = 0;
  dbsaleprice4_ = 0;
  nsalevolume4_ = 0;
  dbsaleprice5_ = 0;
  nsalevolume5_ = 0;
  dbsaleprice6_ = 0;
  nsalevolume6_ = 0;
  dbsaleprice7_ = 0;
  nsalevolume7_ = 0;
  dbsaleprice8_ = 0;
  nsalevolume8_ = 0;
  dbsaleprice9_ = 0;
  nsalevolume9_ = 0;
  dbsaleprice10_ = 0;
  nsalevolume10_ = 0;
  cproductclass_ = 0;
  npreopeninterest_ = 0;
  nopeninterest_ = 0;
  dbsettprice_ = 0;
  dbpresettprice_ = 0;
  dbftcloseprice_ = 0;
  cstopflag_ = 0;
  nbusidate_ = 0;
  nupdatetime_ = 0;
  nupdatemillisec_ = 0;
  szreserved_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KCBPTagQuoteInfo10::~KCBPTagQuoteInfo10() {
  // @@protoc_insertion_point(destructor:XT.KCBPTagQuoteInfo10)
  SharedDtor();
}

void KCBPTagQuoteInfo10::SharedDtor() {
  szstkcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szstkname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szreserved_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KCBPTagQuoteInfo10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KCBPTagQuoteInfo10::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KCBPTagQuoteInfo10_descriptor_;
}

const KCBPTagQuoteInfo10& KCBPTagQuoteInfo10::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

KCBPTagQuoteInfo10* KCBPTagQuoteInfo10::default_instance_ = NULL;

KCBPTagQuoteInfo10* KCBPTagQuoteInfo10::New(::google::protobuf::Arena* arena) const {
  KCBPTagQuoteInfo10* n = new KCBPTagQuoteInfo10;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KCBPTagQuoteInfo10::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.KCBPTagQuoteInfo10)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KCBPTagQuoteInfo10, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KCBPTagQuoteInfo10*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(dbcloseprice_, cmarket_);
    if (has_szstkcode()) {
      szstkcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_szstkname()) {
      szstkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(nbuyvolume1_, dbbuyprice2_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(dbbuyprice3_, dbbuyprice6_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(dbbuyprice7_, dbbuyprice10_);
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(dbsaleprice1_, dbsaleprice4_);
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ZR_(dbsaleprice5_, dbsaleprice8_);
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ZR_(dbsaleprice9_, nopeninterest_);
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ZR_(dbsettprice_, nupdatemillisec_);
    if (has_szreserved()) {
      szreserved_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KCBPTagQuoteInfo10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.KCBPTagQuoteInfo10)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cMarket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmarket_)));
          set_has_cmarket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szStkcode;
        break;
      }

      // optional string szStkcode = 2;
      case 2: {
        if (tag == 18) {
         parse_szStkcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szstkcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szstkcode().data(), this->szstkcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.KCBPTagQuoteInfo10.szStkcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szStkname;
        break;
      }

      // optional string szStkname = 3;
      case 3: {
        if (tag == 26) {
         parse_szStkname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szstkname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szstkname().data(), this->szstkname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.KCBPTagQuoteInfo10.szStkname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_dbClosePrice;
        break;
      }

      // optional double dbClosePrice = 4;
      case 4: {
        if (tag == 33) {
         parse_dbClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbcloseprice_)));
          set_has_dbcloseprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_dbOpenPrice;
        break;
      }

      // optional double dbOpenPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_dbOpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbopenprice_)));
          set_has_dbopenprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_dbLastPrice;
        break;
      }

      // optional double dbLastPrice = 6;
      case 6: {
        if (tag == 49) {
         parse_dbLastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dblastprice_)));
          set_has_dblastprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dbHighPrice;
        break;
      }

      // optional double dbHighPrice = 7;
      case 7: {
        if (tag == 57) {
         parse_dbHighPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbhighprice_)));
          set_has_dbhighprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_dbLowPrice;
        break;
      }

      // optional double dbLowPrice = 8;
      case 8: {
        if (tag == 65) {
         parse_dbLowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dblowprice_)));
          set_has_dblowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_dbMatchQty;
        break;
      }

      // optional double dbMatchQty = 9;
      case 9: {
        if (tag == 73) {
         parse_dbMatchQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbmatchqty_)));
          set_has_dbmatchqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_dbMatchAmt;
        break;
      }

      // optional double dbMatchAmt = 10;
      case 10: {
        if (tag == 81) {
         parse_dbMatchAmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbmatchamt_)));
          set_has_dbmatchamt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_dbMaxRiseValue;
        break;
      }

      // optional double dbMaxRiseValue = 11;
      case 11: {
        if (tag == 89) {
         parse_dbMaxRiseValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbmaxrisevalue_)));
          set_has_dbmaxrisevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_dbMaxDownValue;
        break;
      }

      // optional double dbMaxDownValue = 12;
      case 12: {
        if (tag == 97) {
         parse_dbMaxDownValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbmaxdownvalue_)));
          set_has_dbmaxdownvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_dbAvgPrice;
        break;
      }

      // optional double dbAvgPrice = 13;
      case 13: {
        if (tag == 105) {
         parse_dbAvgPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbavgprice_)));
          set_has_dbavgprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_dbBuyPrice1;
        break;
      }

      // optional double dbBuyPrice1 = 14;
      case 14: {
        if (tag == 113) {
         parse_dbBuyPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice1_)));
          set_has_dbbuyprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_nBuyVolume1;
        break;
      }

      // optional int32 nBuyVolume1 = 15;
      case 15: {
        if (tag == 120) {
         parse_nBuyVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume1_)));
          set_has_nbuyvolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_dbBuyPrice2;
        break;
      }

      // optional double dbBuyPrice2 = 16;
      case 16: {
        if (tag == 129) {
         parse_dbBuyPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice2_)));
          set_has_dbbuyprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_nBuyVolume2;
        break;
      }

      // optional int32 nBuyVolume2 = 17;
      case 17: {
        if (tag == 136) {
         parse_nBuyVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume2_)));
          set_has_nbuyvolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_dbBuyPrice3;
        break;
      }

      // optional double dbBuyPrice3 = 18;
      case 18: {
        if (tag == 145) {
         parse_dbBuyPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice3_)));
          set_has_dbbuyprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_nBuyVolume3;
        break;
      }

      // optional int32 nBuyVolume3 = 19;
      case 19: {
        if (tag == 152) {
         parse_nBuyVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume3_)));
          set_has_nbuyvolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_dbBuyPrice4;
        break;
      }

      // optional double dbBuyPrice4 = 20;
      case 20: {
        if (tag == 161) {
         parse_dbBuyPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice4_)));
          set_has_dbbuyprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_nBuyVolume4;
        break;
      }

      // optional int32 nBuyVolume4 = 21;
      case 21: {
        if (tag == 168) {
         parse_nBuyVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume4_)));
          set_has_nbuyvolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_dbBuyPrice5;
        break;
      }

      // optional double dbBuyPrice5 = 22;
      case 22: {
        if (tag == 177) {
         parse_dbBuyPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice5_)));
          set_has_dbbuyprice5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_nBuyVolume5;
        break;
      }

      // optional int32 nBuyVolume5 = 23;
      case 23: {
        if (tag == 184) {
         parse_nBuyVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume5_)));
          set_has_nbuyvolume5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_dbBuyPrice6;
        break;
      }

      // optional double dbBuyPrice6 = 24;
      case 24: {
        if (tag == 193) {
         parse_dbBuyPrice6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice6_)));
          set_has_dbbuyprice6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_nBuyVolume6;
        break;
      }

      // optional int32 nBuyVolume6 = 25;
      case 25: {
        if (tag == 200) {
         parse_nBuyVolume6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume6_)));
          set_has_nbuyvolume6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_dbBuyPrice7;
        break;
      }

      // optional double dbBuyPrice7 = 26;
      case 26: {
        if (tag == 209) {
         parse_dbBuyPrice7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice7_)));
          set_has_dbbuyprice7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_nBuyVolume7;
        break;
      }

      // optional int32 nBuyVolume7 = 27;
      case 27: {
        if (tag == 216) {
         parse_nBuyVolume7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume7_)));
          set_has_nbuyvolume7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_dbBuyPrice8;
        break;
      }

      // optional double dbBuyPrice8 = 28;
      case 28: {
        if (tag == 225) {
         parse_dbBuyPrice8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice8_)));
          set_has_dbbuyprice8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_nBuyVolume8;
        break;
      }

      // optional int32 nBuyVolume8 = 29;
      case 29: {
        if (tag == 232) {
         parse_nBuyVolume8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume8_)));
          set_has_nbuyvolume8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_dbBuyPrice9;
        break;
      }

      // optional double dbBuyPrice9 = 30;
      case 30: {
        if (tag == 241) {
         parse_dbBuyPrice9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice9_)));
          set_has_dbbuyprice9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_nBuyVolume9;
        break;
      }

      // optional int32 nBuyVolume9 = 31;
      case 31: {
        if (tag == 248) {
         parse_nBuyVolume9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume9_)));
          set_has_nbuyvolume9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_dbBuyPrice10;
        break;
      }

      // optional double dbBuyPrice10 = 32;
      case 32: {
        if (tag == 257) {
         parse_dbBuyPrice10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice10_)));
          set_has_dbbuyprice10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_nBuyVolume10;
        break;
      }

      // optional int32 nBuyVolume10 = 33;
      case 33: {
        if (tag == 264) {
         parse_nBuyVolume10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume10_)));
          set_has_nbuyvolume10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_dbSalePrice1;
        break;
      }

      // optional double dbSalePrice1 = 34;
      case 34: {
        if (tag == 273) {
         parse_dbSalePrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice1_)));
          set_has_dbsaleprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_nSaleVolume1;
        break;
      }

      // optional int32 nSaleVolume1 = 35;
      case 35: {
        if (tag == 280) {
         parse_nSaleVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume1_)));
          set_has_nsalevolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_dbSalePrice2;
        break;
      }

      // optional double dbSalePrice2 = 36;
      case 36: {
        if (tag == 289) {
         parse_dbSalePrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice2_)));
          set_has_dbsaleprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_nSaleVolume2;
        break;
      }

      // optional int32 nSaleVolume2 = 37;
      case 37: {
        if (tag == 296) {
         parse_nSaleVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume2_)));
          set_has_nsalevolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_dbSalePrice3;
        break;
      }

      // optional double dbSalePrice3 = 38;
      case 38: {
        if (tag == 305) {
         parse_dbSalePrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice3_)));
          set_has_dbsaleprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_nSaleVolume3;
        break;
      }

      // optional int32 nSaleVolume3 = 39;
      case 39: {
        if (tag == 312) {
         parse_nSaleVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume3_)));
          set_has_nsalevolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_dbSalePrice4;
        break;
      }

      // optional double dbSalePrice4 = 40;
      case 40: {
        if (tag == 321) {
         parse_dbSalePrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice4_)));
          set_has_dbsaleprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_nSaleVolume4;
        break;
      }

      // optional int32 nSaleVolume4 = 41;
      case 41: {
        if (tag == 328) {
         parse_nSaleVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume4_)));
          set_has_nsalevolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_dbSalePrice5;
        break;
      }

      // optional double dbSalePrice5 = 42;
      case 42: {
        if (tag == 337) {
         parse_dbSalePrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice5_)));
          set_has_dbsaleprice5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_nSaleVolume5;
        break;
      }

      // optional int32 nSaleVolume5 = 43;
      case 43: {
        if (tag == 344) {
         parse_nSaleVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume5_)));
          set_has_nsalevolume5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(353)) goto parse_dbSalePrice6;
        break;
      }

      // optional double dbSalePrice6 = 44;
      case 44: {
        if (tag == 353) {
         parse_dbSalePrice6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice6_)));
          set_has_dbsaleprice6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_nSaleVolume6;
        break;
      }

      // optional int32 nSaleVolume6 = 45;
      case 45: {
        if (tag == 360) {
         parse_nSaleVolume6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume6_)));
          set_has_nsalevolume6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(369)) goto parse_dbSalePrice7;
        break;
      }

      // optional double dbSalePrice7 = 46;
      case 46: {
        if (tag == 369) {
         parse_dbSalePrice7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice7_)));
          set_has_dbsaleprice7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_nSaleVolume7;
        break;
      }

      // optional int32 nSaleVolume7 = 47;
      case 47: {
        if (tag == 376) {
         parse_nSaleVolume7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume7_)));
          set_has_nsalevolume7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(385)) goto parse_dbSalePrice8;
        break;
      }

      // optional double dbSalePrice8 = 48;
      case 48: {
        if (tag == 385) {
         parse_dbSalePrice8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice8_)));
          set_has_dbsaleprice8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_nSaleVolume8;
        break;
      }

      // optional int32 nSaleVolume8 = 49;
      case 49: {
        if (tag == 392) {
         parse_nSaleVolume8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume8_)));
          set_has_nsalevolume8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_dbSalePrice9;
        break;
      }

      // optional double dbSalePrice9 = 50;
      case 50: {
        if (tag == 401) {
         parse_dbSalePrice9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice9_)));
          set_has_dbsaleprice9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_nSaleVolume9;
        break;
      }

      // optional int32 nSaleVolume9 = 51;
      case 51: {
        if (tag == 408) {
         parse_nSaleVolume9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume9_)));
          set_has_nsalevolume9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(417)) goto parse_dbSalePrice10;
        break;
      }

      // optional double dbSalePrice10 = 52;
      case 52: {
        if (tag == 417) {
         parse_dbSalePrice10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice10_)));
          set_has_dbsaleprice10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_nSaleVolume10;
        break;
      }

      // optional int32 nSaleVolume10 = 53;
      case 53: {
        if (tag == 424) {
         parse_nSaleVolume10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume10_)));
          set_has_nsalevolume10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_cProductClass;
        break;
      }

      // optional int32 cProductClass = 54;
      case 54: {
        if (tag == 432) {
         parse_cProductClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cproductclass_)));
          set_has_cproductclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_nPreOpenInterest;
        break;
      }

      // optional int32 nPreOpenInterest = 55;
      case 55: {
        if (tag == 440) {
         parse_nPreOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npreopeninterest_)));
          set_has_npreopeninterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_nOpenInterest;
        break;
      }

      // optional int32 nOpenInterest = 56;
      case 56: {
        if (tag == 448) {
         parse_nOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nopeninterest_)));
          set_has_nopeninterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(457)) goto parse_dbSettPrice;
        break;
      }

      // optional double dbSettPrice = 57;
      case 57: {
        if (tag == 457) {
         parse_dbSettPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsettprice_)));
          set_has_dbsettprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(465)) goto parse_dbPreSettPrice;
        break;
      }

      // optional double dbPreSettPrice = 58;
      case 58: {
        if (tag == 465) {
         parse_dbPreSettPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbpresettprice_)));
          set_has_dbpresettprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(473)) goto parse_dbFtClosePrice;
        break;
      }

      // optional double dbFtClosePrice = 59;
      case 59: {
        if (tag == 473) {
         parse_dbFtClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbftcloseprice_)));
          set_has_dbftcloseprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_cStopFlag;
        break;
      }

      // optional int32 cStopFlag = 60;
      case 60: {
        if (tag == 480) {
         parse_cStopFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cstopflag_)));
          set_has_cstopflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_nBusidate;
        break;
      }

      // optional int32 nBusidate = 61;
      case 61: {
        if (tag == 488) {
         parse_nBusidate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbusidate_)));
          set_has_nbusidate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_nUpdateTime;
        break;
      }

      // optional int32 nUpdateTime = 62;
      case 62: {
        if (tag == 496) {
         parse_nUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nupdatetime_)));
          set_has_nupdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_nUpdateMillisec;
        break;
      }

      // optional int32 nUpdateMillisec = 63;
      case 63: {
        if (tag == 504) {
         parse_nUpdateMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nupdatemillisec_)));
          set_has_nupdatemillisec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_szReserved;
        break;
      }

      // optional string szReserved = 64;
      case 64: {
        if (tag == 514) {
         parse_szReserved:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szreserved()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szreserved().data(), this->szreserved().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.KCBPTagQuoteInfo10.szReserved");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.KCBPTagQuoteInfo10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.KCBPTagQuoteInfo10)
  return false;
#undef DO_
}

void KCBPTagQuoteInfo10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.KCBPTagQuoteInfo10)
  // optional int32 cMarket = 1;
  if (has_cmarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmarket(), output);
  }

  // optional string szStkcode = 2;
  if (has_szstkcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkcode().data(), this->szstkcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo10.szStkcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szstkcode(), output);
  }

  // optional string szStkname = 3;
  if (has_szstkname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkname().data(), this->szstkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo10.szStkname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szstkname(), output);
  }

  // optional double dbClosePrice = 4;
  if (has_dbcloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dbcloseprice(), output);
  }

  // optional double dbOpenPrice = 5;
  if (has_dbopenprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dbopenprice(), output);
  }

  // optional double dbLastPrice = 6;
  if (has_dblastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dblastprice(), output);
  }

  // optional double dbHighPrice = 7;
  if (has_dbhighprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dbhighprice(), output);
  }

  // optional double dbLowPrice = 8;
  if (has_dblowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->dblowprice(), output);
  }

  // optional double dbMatchQty = 9;
  if (has_dbmatchqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->dbmatchqty(), output);
  }

  // optional double dbMatchAmt = 10;
  if (has_dbmatchamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->dbmatchamt(), output);
  }

  // optional double dbMaxRiseValue = 11;
  if (has_dbmaxrisevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dbmaxrisevalue(), output);
  }

  // optional double dbMaxDownValue = 12;
  if (has_dbmaxdownvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dbmaxdownvalue(), output);
  }

  // optional double dbAvgPrice = 13;
  if (has_dbavgprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->dbavgprice(), output);
  }

  // optional double dbBuyPrice1 = 14;
  if (has_dbbuyprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->dbbuyprice1(), output);
  }

  // optional int32 nBuyVolume1 = 15;
  if (has_nbuyvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nbuyvolume1(), output);
  }

  // optional double dbBuyPrice2 = 16;
  if (has_dbbuyprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->dbbuyprice2(), output);
  }

  // optional int32 nBuyVolume2 = 17;
  if (has_nbuyvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->nbuyvolume2(), output);
  }

  // optional double dbBuyPrice3 = 18;
  if (has_dbbuyprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->dbbuyprice3(), output);
  }

  // optional int32 nBuyVolume3 = 19;
  if (has_nbuyvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nbuyvolume3(), output);
  }

  // optional double dbBuyPrice4 = 20;
  if (has_dbbuyprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->dbbuyprice4(), output);
  }

  // optional int32 nBuyVolume4 = 21;
  if (has_nbuyvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->nbuyvolume4(), output);
  }

  // optional double dbBuyPrice5 = 22;
  if (has_dbbuyprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->dbbuyprice5(), output);
  }

  // optional int32 nBuyVolume5 = 23;
  if (has_nbuyvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nbuyvolume5(), output);
  }

  // optional double dbBuyPrice6 = 24;
  if (has_dbbuyprice6()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->dbbuyprice6(), output);
  }

  // optional int32 nBuyVolume6 = 25;
  if (has_nbuyvolume6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->nbuyvolume6(), output);
  }

  // optional double dbBuyPrice7 = 26;
  if (has_dbbuyprice7()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->dbbuyprice7(), output);
  }

  // optional int32 nBuyVolume7 = 27;
  if (has_nbuyvolume7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nbuyvolume7(), output);
  }

  // optional double dbBuyPrice8 = 28;
  if (has_dbbuyprice8()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->dbbuyprice8(), output);
  }

  // optional int32 nBuyVolume8 = 29;
  if (has_nbuyvolume8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->nbuyvolume8(), output);
  }

  // optional double dbBuyPrice9 = 30;
  if (has_dbbuyprice9()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->dbbuyprice9(), output);
  }

  // optional int32 nBuyVolume9 = 31;
  if (has_nbuyvolume9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->nbuyvolume9(), output);
  }

  // optional double dbBuyPrice10 = 32;
  if (has_dbbuyprice10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->dbbuyprice10(), output);
  }

  // optional int32 nBuyVolume10 = 33;
  if (has_nbuyvolume10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->nbuyvolume10(), output);
  }

  // optional double dbSalePrice1 = 34;
  if (has_dbsaleprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->dbsaleprice1(), output);
  }

  // optional int32 nSaleVolume1 = 35;
  if (has_nsalevolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->nsalevolume1(), output);
  }

  // optional double dbSalePrice2 = 36;
  if (has_dbsaleprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->dbsaleprice2(), output);
  }

  // optional int32 nSaleVolume2 = 37;
  if (has_nsalevolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->nsalevolume2(), output);
  }

  // optional double dbSalePrice3 = 38;
  if (has_dbsaleprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->dbsaleprice3(), output);
  }

  // optional int32 nSaleVolume3 = 39;
  if (has_nsalevolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->nsalevolume3(), output);
  }

  // optional double dbSalePrice4 = 40;
  if (has_dbsaleprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->dbsaleprice4(), output);
  }

  // optional int32 nSaleVolume4 = 41;
  if (has_nsalevolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->nsalevolume4(), output);
  }

  // optional double dbSalePrice5 = 42;
  if (has_dbsaleprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->dbsaleprice5(), output);
  }

  // optional int32 nSaleVolume5 = 43;
  if (has_nsalevolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->nsalevolume5(), output);
  }

  // optional double dbSalePrice6 = 44;
  if (has_dbsaleprice6()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->dbsaleprice6(), output);
  }

  // optional int32 nSaleVolume6 = 45;
  if (has_nsalevolume6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->nsalevolume6(), output);
  }

  // optional double dbSalePrice7 = 46;
  if (has_dbsaleprice7()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->dbsaleprice7(), output);
  }

  // optional int32 nSaleVolume7 = 47;
  if (has_nsalevolume7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->nsalevolume7(), output);
  }

  // optional double dbSalePrice8 = 48;
  if (has_dbsaleprice8()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->dbsaleprice8(), output);
  }

  // optional int32 nSaleVolume8 = 49;
  if (has_nsalevolume8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->nsalevolume8(), output);
  }

  // optional double dbSalePrice9 = 50;
  if (has_dbsaleprice9()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->dbsaleprice9(), output);
  }

  // optional int32 nSaleVolume9 = 51;
  if (has_nsalevolume9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->nsalevolume9(), output);
  }

  // optional double dbSalePrice10 = 52;
  if (has_dbsaleprice10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(52, this->dbsaleprice10(), output);
  }

  // optional int32 nSaleVolume10 = 53;
  if (has_nsalevolume10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->nsalevolume10(), output);
  }

  // optional int32 cProductClass = 54;
  if (has_cproductclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->cproductclass(), output);
  }

  // optional int32 nPreOpenInterest = 55;
  if (has_npreopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->npreopeninterest(), output);
  }

  // optional int32 nOpenInterest = 56;
  if (has_nopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->nopeninterest(), output);
  }

  // optional double dbSettPrice = 57;
  if (has_dbsettprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(57, this->dbsettprice(), output);
  }

  // optional double dbPreSettPrice = 58;
  if (has_dbpresettprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(58, this->dbpresettprice(), output);
  }

  // optional double dbFtClosePrice = 59;
  if (has_dbftcloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(59, this->dbftcloseprice(), output);
  }

  // optional int32 cStopFlag = 60;
  if (has_cstopflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->cstopflag(), output);
  }

  // optional int32 nBusidate = 61;
  if (has_nbusidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->nbusidate(), output);
  }

  // optional int32 nUpdateTime = 62;
  if (has_nupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->nupdatetime(), output);
  }

  // optional int32 nUpdateMillisec = 63;
  if (has_nupdatemillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->nupdatemillisec(), output);
  }

  // optional string szReserved = 64;
  if (has_szreserved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szreserved().data(), this->szreserved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo10.szReserved");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      64, this->szreserved(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.KCBPTagQuoteInfo10)
}

::google::protobuf::uint8* KCBPTagQuoteInfo10::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.KCBPTagQuoteInfo10)
  // optional int32 cMarket = 1;
  if (has_cmarket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmarket(), target);
  }

  // optional string szStkcode = 2;
  if (has_szstkcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkcode().data(), this->szstkcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo10.szStkcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szstkcode(), target);
  }

  // optional string szStkname = 3;
  if (has_szstkname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkname().data(), this->szstkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo10.szStkname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szstkname(), target);
  }

  // optional double dbClosePrice = 4;
  if (has_dbcloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dbcloseprice(), target);
  }

  // optional double dbOpenPrice = 5;
  if (has_dbopenprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dbopenprice(), target);
  }

  // optional double dbLastPrice = 6;
  if (has_dblastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dblastprice(), target);
  }

  // optional double dbHighPrice = 7;
  if (has_dbhighprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dbhighprice(), target);
  }

  // optional double dbLowPrice = 8;
  if (has_dblowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->dblowprice(), target);
  }

  // optional double dbMatchQty = 9;
  if (has_dbmatchqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->dbmatchqty(), target);
  }

  // optional double dbMatchAmt = 10;
  if (has_dbmatchamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->dbmatchamt(), target);
  }

  // optional double dbMaxRiseValue = 11;
  if (has_dbmaxrisevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dbmaxrisevalue(), target);
  }

  // optional double dbMaxDownValue = 12;
  if (has_dbmaxdownvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dbmaxdownvalue(), target);
  }

  // optional double dbAvgPrice = 13;
  if (has_dbavgprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->dbavgprice(), target);
  }

  // optional double dbBuyPrice1 = 14;
  if (has_dbbuyprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->dbbuyprice1(), target);
  }

  // optional int32 nBuyVolume1 = 15;
  if (has_nbuyvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->nbuyvolume1(), target);
  }

  // optional double dbBuyPrice2 = 16;
  if (has_dbbuyprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->dbbuyprice2(), target);
  }

  // optional int32 nBuyVolume2 = 17;
  if (has_nbuyvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->nbuyvolume2(), target);
  }

  // optional double dbBuyPrice3 = 18;
  if (has_dbbuyprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->dbbuyprice3(), target);
  }

  // optional int32 nBuyVolume3 = 19;
  if (has_nbuyvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->nbuyvolume3(), target);
  }

  // optional double dbBuyPrice4 = 20;
  if (has_dbbuyprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->dbbuyprice4(), target);
  }

  // optional int32 nBuyVolume4 = 21;
  if (has_nbuyvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->nbuyvolume4(), target);
  }

  // optional double dbBuyPrice5 = 22;
  if (has_dbbuyprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->dbbuyprice5(), target);
  }

  // optional int32 nBuyVolume5 = 23;
  if (has_nbuyvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nbuyvolume5(), target);
  }

  // optional double dbBuyPrice6 = 24;
  if (has_dbbuyprice6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->dbbuyprice6(), target);
  }

  // optional int32 nBuyVolume6 = 25;
  if (has_nbuyvolume6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->nbuyvolume6(), target);
  }

  // optional double dbBuyPrice7 = 26;
  if (has_dbbuyprice7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->dbbuyprice7(), target);
  }

  // optional int32 nBuyVolume7 = 27;
  if (has_nbuyvolume7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nbuyvolume7(), target);
  }

  // optional double dbBuyPrice8 = 28;
  if (has_dbbuyprice8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->dbbuyprice8(), target);
  }

  // optional int32 nBuyVolume8 = 29;
  if (has_nbuyvolume8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->nbuyvolume8(), target);
  }

  // optional double dbBuyPrice9 = 30;
  if (has_dbbuyprice9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->dbbuyprice9(), target);
  }

  // optional int32 nBuyVolume9 = 31;
  if (has_nbuyvolume9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->nbuyvolume9(), target);
  }

  // optional double dbBuyPrice10 = 32;
  if (has_dbbuyprice10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->dbbuyprice10(), target);
  }

  // optional int32 nBuyVolume10 = 33;
  if (has_nbuyvolume10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->nbuyvolume10(), target);
  }

  // optional double dbSalePrice1 = 34;
  if (has_dbsaleprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->dbsaleprice1(), target);
  }

  // optional int32 nSaleVolume1 = 35;
  if (has_nsalevolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->nsalevolume1(), target);
  }

  // optional double dbSalePrice2 = 36;
  if (has_dbsaleprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->dbsaleprice2(), target);
  }

  // optional int32 nSaleVolume2 = 37;
  if (has_nsalevolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->nsalevolume2(), target);
  }

  // optional double dbSalePrice3 = 38;
  if (has_dbsaleprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->dbsaleprice3(), target);
  }

  // optional int32 nSaleVolume3 = 39;
  if (has_nsalevolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->nsalevolume3(), target);
  }

  // optional double dbSalePrice4 = 40;
  if (has_dbsaleprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->dbsaleprice4(), target);
  }

  // optional int32 nSaleVolume4 = 41;
  if (has_nsalevolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->nsalevolume4(), target);
  }

  // optional double dbSalePrice5 = 42;
  if (has_dbsaleprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->dbsaleprice5(), target);
  }

  // optional int32 nSaleVolume5 = 43;
  if (has_nsalevolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->nsalevolume5(), target);
  }

  // optional double dbSalePrice6 = 44;
  if (has_dbsaleprice6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->dbsaleprice6(), target);
  }

  // optional int32 nSaleVolume6 = 45;
  if (has_nsalevolume6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->nsalevolume6(), target);
  }

  // optional double dbSalePrice7 = 46;
  if (has_dbsaleprice7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->dbsaleprice7(), target);
  }

  // optional int32 nSaleVolume7 = 47;
  if (has_nsalevolume7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->nsalevolume7(), target);
  }

  // optional double dbSalePrice8 = 48;
  if (has_dbsaleprice8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->dbsaleprice8(), target);
  }

  // optional int32 nSaleVolume8 = 49;
  if (has_nsalevolume8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->nsalevolume8(), target);
  }

  // optional double dbSalePrice9 = 50;
  if (has_dbsaleprice9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->dbsaleprice9(), target);
  }

  // optional int32 nSaleVolume9 = 51;
  if (has_nsalevolume9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->nsalevolume9(), target);
  }

  // optional double dbSalePrice10 = 52;
  if (has_dbsaleprice10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(52, this->dbsaleprice10(), target);
  }

  // optional int32 nSaleVolume10 = 53;
  if (has_nsalevolume10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->nsalevolume10(), target);
  }

  // optional int32 cProductClass = 54;
  if (has_cproductclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->cproductclass(), target);
  }

  // optional int32 nPreOpenInterest = 55;
  if (has_npreopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->npreopeninterest(), target);
  }

  // optional int32 nOpenInterest = 56;
  if (has_nopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->nopeninterest(), target);
  }

  // optional double dbSettPrice = 57;
  if (has_dbsettprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(57, this->dbsettprice(), target);
  }

  // optional double dbPreSettPrice = 58;
  if (has_dbpresettprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(58, this->dbpresettprice(), target);
  }

  // optional double dbFtClosePrice = 59;
  if (has_dbftcloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(59, this->dbftcloseprice(), target);
  }

  // optional int32 cStopFlag = 60;
  if (has_cstopflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->cstopflag(), target);
  }

  // optional int32 nBusidate = 61;
  if (has_nbusidate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->nbusidate(), target);
  }

  // optional int32 nUpdateTime = 62;
  if (has_nupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->nupdatetime(), target);
  }

  // optional int32 nUpdateMillisec = 63;
  if (has_nupdatemillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->nupdatemillisec(), target);
  }

  // optional string szReserved = 64;
  if (has_szreserved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szreserved().data(), this->szreserved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo10.szReserved");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        64, this->szreserved(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.KCBPTagQuoteInfo10)
  return target;
}

int KCBPTagQuoteInfo10::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.KCBPTagQuoteInfo10)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 cMarket = 1;
    if (has_cmarket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmarket());
    }

    // optional string szStkcode = 2;
    if (has_szstkcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szstkcode());
    }

    // optional string szStkname = 3;
    if (has_szstkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szstkname());
    }

    // optional double dbClosePrice = 4;
    if (has_dbcloseprice()) {
      total_size += 1 + 8;
    }

    // optional double dbOpenPrice = 5;
    if (has_dbopenprice()) {
      total_size += 1 + 8;
    }

    // optional double dbLastPrice = 6;
    if (has_dblastprice()) {
      total_size += 1 + 8;
    }

    // optional double dbHighPrice = 7;
    if (has_dbhighprice()) {
      total_size += 1 + 8;
    }

    // optional double dbLowPrice = 8;
    if (has_dblowprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double dbMatchQty = 9;
    if (has_dbmatchqty()) {
      total_size += 1 + 8;
    }

    // optional double dbMatchAmt = 10;
    if (has_dbmatchamt()) {
      total_size += 1 + 8;
    }

    // optional double dbMaxRiseValue = 11;
    if (has_dbmaxrisevalue()) {
      total_size += 1 + 8;
    }

    // optional double dbMaxDownValue = 12;
    if (has_dbmaxdownvalue()) {
      total_size += 1 + 8;
    }

    // optional double dbAvgPrice = 13;
    if (has_dbavgprice()) {
      total_size += 1 + 8;
    }

    // optional double dbBuyPrice1 = 14;
    if (has_dbbuyprice1()) {
      total_size += 1 + 8;
    }

    // optional int32 nBuyVolume1 = 15;
    if (has_nbuyvolume1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume1());
    }

    // optional double dbBuyPrice2 = 16;
    if (has_dbbuyprice2()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 nBuyVolume2 = 17;
    if (has_nbuyvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume2());
    }

    // optional double dbBuyPrice3 = 18;
    if (has_dbbuyprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume3 = 19;
    if (has_nbuyvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume3());
    }

    // optional double dbBuyPrice4 = 20;
    if (has_dbbuyprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume4 = 21;
    if (has_nbuyvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume4());
    }

    // optional double dbBuyPrice5 = 22;
    if (has_dbbuyprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume5 = 23;
    if (has_nbuyvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume5());
    }

    // optional double dbBuyPrice6 = 24;
    if (has_dbbuyprice6()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 nBuyVolume6 = 25;
    if (has_nbuyvolume6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume6());
    }

    // optional double dbBuyPrice7 = 26;
    if (has_dbbuyprice7()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume7 = 27;
    if (has_nbuyvolume7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume7());
    }

    // optional double dbBuyPrice8 = 28;
    if (has_dbbuyprice8()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume8 = 29;
    if (has_nbuyvolume8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume8());
    }

    // optional double dbBuyPrice9 = 30;
    if (has_dbbuyprice9()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume9 = 31;
    if (has_nbuyvolume9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume9());
    }

    // optional double dbBuyPrice10 = 32;
    if (has_dbbuyprice10()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 nBuyVolume10 = 33;
    if (has_nbuyvolume10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume10());
    }

    // optional double dbSalePrice1 = 34;
    if (has_dbsaleprice1()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume1 = 35;
    if (has_nsalevolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume1());
    }

    // optional double dbSalePrice2 = 36;
    if (has_dbsaleprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume2 = 37;
    if (has_nsalevolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume2());
    }

    // optional double dbSalePrice3 = 38;
    if (has_dbsaleprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume3 = 39;
    if (has_nsalevolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume3());
    }

    // optional double dbSalePrice4 = 40;
    if (has_dbsaleprice4()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional int32 nSaleVolume4 = 41;
    if (has_nsalevolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume4());
    }

    // optional double dbSalePrice5 = 42;
    if (has_dbsaleprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume5 = 43;
    if (has_nsalevolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume5());
    }

    // optional double dbSalePrice6 = 44;
    if (has_dbsaleprice6()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume6 = 45;
    if (has_nsalevolume6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume6());
    }

    // optional double dbSalePrice7 = 46;
    if (has_dbsaleprice7()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume7 = 47;
    if (has_nsalevolume7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume7());
    }

    // optional double dbSalePrice8 = 48;
    if (has_dbsaleprice8()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional int32 nSaleVolume8 = 49;
    if (has_nsalevolume8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume8());
    }

    // optional double dbSalePrice9 = 50;
    if (has_dbsaleprice9()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume9 = 51;
    if (has_nsalevolume9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume9());
    }

    // optional double dbSalePrice10 = 52;
    if (has_dbsaleprice10()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume10 = 53;
    if (has_nsalevolume10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume10());
    }

    // optional int32 cProductClass = 54;
    if (has_cproductclass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cproductclass());
    }

    // optional int32 nPreOpenInterest = 55;
    if (has_npreopeninterest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npreopeninterest());
    }

    // optional int32 nOpenInterest = 56;
    if (has_nopeninterest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nopeninterest());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional double dbSettPrice = 57;
    if (has_dbsettprice()) {
      total_size += 2 + 8;
    }

    // optional double dbPreSettPrice = 58;
    if (has_dbpresettprice()) {
      total_size += 2 + 8;
    }

    // optional double dbFtClosePrice = 59;
    if (has_dbftcloseprice()) {
      total_size += 2 + 8;
    }

    // optional int32 cStopFlag = 60;
    if (has_cstopflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cstopflag());
    }

    // optional int32 nBusidate = 61;
    if (has_nbusidate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbusidate());
    }

    // optional int32 nUpdateTime = 62;
    if (has_nupdatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nupdatetime());
    }

    // optional int32 nUpdateMillisec = 63;
    if (has_nupdatemillisec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nupdatemillisec());
    }

    // optional string szReserved = 64;
    if (has_szreserved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szreserved());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KCBPTagQuoteInfo10::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.KCBPTagQuoteInfo10)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KCBPTagQuoteInfo10* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KCBPTagQuoteInfo10>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.KCBPTagQuoteInfo10)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.KCBPTagQuoteInfo10)
    MergeFrom(*source);
  }
}

void KCBPTagQuoteInfo10::MergeFrom(const KCBPTagQuoteInfo10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.KCBPTagQuoteInfo10)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmarket()) {
      set_cmarket(from.cmarket());
    }
    if (from.has_szstkcode()) {
      set_has_szstkcode();
      szstkcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szstkcode_);
    }
    if (from.has_szstkname()) {
      set_has_szstkname();
      szstkname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szstkname_);
    }
    if (from.has_dbcloseprice()) {
      set_dbcloseprice(from.dbcloseprice());
    }
    if (from.has_dbopenprice()) {
      set_dbopenprice(from.dbopenprice());
    }
    if (from.has_dblastprice()) {
      set_dblastprice(from.dblastprice());
    }
    if (from.has_dbhighprice()) {
      set_dbhighprice(from.dbhighprice());
    }
    if (from.has_dblowprice()) {
      set_dblowprice(from.dblowprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dbmatchqty()) {
      set_dbmatchqty(from.dbmatchqty());
    }
    if (from.has_dbmatchamt()) {
      set_dbmatchamt(from.dbmatchamt());
    }
    if (from.has_dbmaxrisevalue()) {
      set_dbmaxrisevalue(from.dbmaxrisevalue());
    }
    if (from.has_dbmaxdownvalue()) {
      set_dbmaxdownvalue(from.dbmaxdownvalue());
    }
    if (from.has_dbavgprice()) {
      set_dbavgprice(from.dbavgprice());
    }
    if (from.has_dbbuyprice1()) {
      set_dbbuyprice1(from.dbbuyprice1());
    }
    if (from.has_nbuyvolume1()) {
      set_nbuyvolume1(from.nbuyvolume1());
    }
    if (from.has_dbbuyprice2()) {
      set_dbbuyprice2(from.dbbuyprice2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nbuyvolume2()) {
      set_nbuyvolume2(from.nbuyvolume2());
    }
    if (from.has_dbbuyprice3()) {
      set_dbbuyprice3(from.dbbuyprice3());
    }
    if (from.has_nbuyvolume3()) {
      set_nbuyvolume3(from.nbuyvolume3());
    }
    if (from.has_dbbuyprice4()) {
      set_dbbuyprice4(from.dbbuyprice4());
    }
    if (from.has_nbuyvolume4()) {
      set_nbuyvolume4(from.nbuyvolume4());
    }
    if (from.has_dbbuyprice5()) {
      set_dbbuyprice5(from.dbbuyprice5());
    }
    if (from.has_nbuyvolume5()) {
      set_nbuyvolume5(from.nbuyvolume5());
    }
    if (from.has_dbbuyprice6()) {
      set_dbbuyprice6(from.dbbuyprice6());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_nbuyvolume6()) {
      set_nbuyvolume6(from.nbuyvolume6());
    }
    if (from.has_dbbuyprice7()) {
      set_dbbuyprice7(from.dbbuyprice7());
    }
    if (from.has_nbuyvolume7()) {
      set_nbuyvolume7(from.nbuyvolume7());
    }
    if (from.has_dbbuyprice8()) {
      set_dbbuyprice8(from.dbbuyprice8());
    }
    if (from.has_nbuyvolume8()) {
      set_nbuyvolume8(from.nbuyvolume8());
    }
    if (from.has_dbbuyprice9()) {
      set_dbbuyprice9(from.dbbuyprice9());
    }
    if (from.has_nbuyvolume9()) {
      set_nbuyvolume9(from.nbuyvolume9());
    }
    if (from.has_dbbuyprice10()) {
      set_dbbuyprice10(from.dbbuyprice10());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_nbuyvolume10()) {
      set_nbuyvolume10(from.nbuyvolume10());
    }
    if (from.has_dbsaleprice1()) {
      set_dbsaleprice1(from.dbsaleprice1());
    }
    if (from.has_nsalevolume1()) {
      set_nsalevolume1(from.nsalevolume1());
    }
    if (from.has_dbsaleprice2()) {
      set_dbsaleprice2(from.dbsaleprice2());
    }
    if (from.has_nsalevolume2()) {
      set_nsalevolume2(from.nsalevolume2());
    }
    if (from.has_dbsaleprice3()) {
      set_dbsaleprice3(from.dbsaleprice3());
    }
    if (from.has_nsalevolume3()) {
      set_nsalevolume3(from.nsalevolume3());
    }
    if (from.has_dbsaleprice4()) {
      set_dbsaleprice4(from.dbsaleprice4());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_nsalevolume4()) {
      set_nsalevolume4(from.nsalevolume4());
    }
    if (from.has_dbsaleprice5()) {
      set_dbsaleprice5(from.dbsaleprice5());
    }
    if (from.has_nsalevolume5()) {
      set_nsalevolume5(from.nsalevolume5());
    }
    if (from.has_dbsaleprice6()) {
      set_dbsaleprice6(from.dbsaleprice6());
    }
    if (from.has_nsalevolume6()) {
      set_nsalevolume6(from.nsalevolume6());
    }
    if (from.has_dbsaleprice7()) {
      set_dbsaleprice7(from.dbsaleprice7());
    }
    if (from.has_nsalevolume7()) {
      set_nsalevolume7(from.nsalevolume7());
    }
    if (from.has_dbsaleprice8()) {
      set_dbsaleprice8(from.dbsaleprice8());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_nsalevolume8()) {
      set_nsalevolume8(from.nsalevolume8());
    }
    if (from.has_dbsaleprice9()) {
      set_dbsaleprice9(from.dbsaleprice9());
    }
    if (from.has_nsalevolume9()) {
      set_nsalevolume9(from.nsalevolume9());
    }
    if (from.has_dbsaleprice10()) {
      set_dbsaleprice10(from.dbsaleprice10());
    }
    if (from.has_nsalevolume10()) {
      set_nsalevolume10(from.nsalevolume10());
    }
    if (from.has_cproductclass()) {
      set_cproductclass(from.cproductclass());
    }
    if (from.has_npreopeninterest()) {
      set_npreopeninterest(from.npreopeninterest());
    }
    if (from.has_nopeninterest()) {
      set_nopeninterest(from.nopeninterest());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_dbsettprice()) {
      set_dbsettprice(from.dbsettprice());
    }
    if (from.has_dbpresettprice()) {
      set_dbpresettprice(from.dbpresettprice());
    }
    if (from.has_dbftcloseprice()) {
      set_dbftcloseprice(from.dbftcloseprice());
    }
    if (from.has_cstopflag()) {
      set_cstopflag(from.cstopflag());
    }
    if (from.has_nbusidate()) {
      set_nbusidate(from.nbusidate());
    }
    if (from.has_nupdatetime()) {
      set_nupdatetime(from.nupdatetime());
    }
    if (from.has_nupdatemillisec()) {
      set_nupdatemillisec(from.nupdatemillisec());
    }
    if (from.has_szreserved()) {
      set_has_szreserved();
      szreserved_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szreserved_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KCBPTagQuoteInfo10::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.KCBPTagQuoteInfo10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KCBPTagQuoteInfo10::CopyFrom(const KCBPTagQuoteInfo10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.KCBPTagQuoteInfo10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KCBPTagQuoteInfo10::IsInitialized() const {

  return true;
}

void KCBPTagQuoteInfo10::Swap(KCBPTagQuoteInfo10* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KCBPTagQuoteInfo10::InternalSwap(KCBPTagQuoteInfo10* other) {
  std::swap(cmarket_, other->cmarket_);
  szstkcode_.Swap(&other->szstkcode_);
  szstkname_.Swap(&other->szstkname_);
  std::swap(dbcloseprice_, other->dbcloseprice_);
  std::swap(dbopenprice_, other->dbopenprice_);
  std::swap(dblastprice_, other->dblastprice_);
  std::swap(dbhighprice_, other->dbhighprice_);
  std::swap(dblowprice_, other->dblowprice_);
  std::swap(dbmatchqty_, other->dbmatchqty_);
  std::swap(dbmatchamt_, other->dbmatchamt_);
  std::swap(dbmaxrisevalue_, other->dbmaxrisevalue_);
  std::swap(dbmaxdownvalue_, other->dbmaxdownvalue_);
  std::swap(dbavgprice_, other->dbavgprice_);
  std::swap(dbbuyprice1_, other->dbbuyprice1_);
  std::swap(nbuyvolume1_, other->nbuyvolume1_);
  std::swap(dbbuyprice2_, other->dbbuyprice2_);
  std::swap(nbuyvolume2_, other->nbuyvolume2_);
  std::swap(dbbuyprice3_, other->dbbuyprice3_);
  std::swap(nbuyvolume3_, other->nbuyvolume3_);
  std::swap(dbbuyprice4_, other->dbbuyprice4_);
  std::swap(nbuyvolume4_, other->nbuyvolume4_);
  std::swap(dbbuyprice5_, other->dbbuyprice5_);
  std::swap(nbuyvolume5_, other->nbuyvolume5_);
  std::swap(dbbuyprice6_, other->dbbuyprice6_);
  std::swap(nbuyvolume6_, other->nbuyvolume6_);
  std::swap(dbbuyprice7_, other->dbbuyprice7_);
  std::swap(nbuyvolume7_, other->nbuyvolume7_);
  std::swap(dbbuyprice8_, other->dbbuyprice8_);
  std::swap(nbuyvolume8_, other->nbuyvolume8_);
  std::swap(dbbuyprice9_, other->dbbuyprice9_);
  std::swap(nbuyvolume9_, other->nbuyvolume9_);
  std::swap(dbbuyprice10_, other->dbbuyprice10_);
  std::swap(nbuyvolume10_, other->nbuyvolume10_);
  std::swap(dbsaleprice1_, other->dbsaleprice1_);
  std::swap(nsalevolume1_, other->nsalevolume1_);
  std::swap(dbsaleprice2_, other->dbsaleprice2_);
  std::swap(nsalevolume2_, other->nsalevolume2_);
  std::swap(dbsaleprice3_, other->dbsaleprice3_);
  std::swap(nsalevolume3_, other->nsalevolume3_);
  std::swap(dbsaleprice4_, other->dbsaleprice4_);
  std::swap(nsalevolume4_, other->nsalevolume4_);
  std::swap(dbsaleprice5_, other->dbsaleprice5_);
  std::swap(nsalevolume5_, other->nsalevolume5_);
  std::swap(dbsaleprice6_, other->dbsaleprice6_);
  std::swap(nsalevolume6_, other->nsalevolume6_);
  std::swap(dbsaleprice7_, other->dbsaleprice7_);
  std::swap(nsalevolume7_, other->nsalevolume7_);
  std::swap(dbsaleprice8_, other->dbsaleprice8_);
  std::swap(nsalevolume8_, other->nsalevolume8_);
  std::swap(dbsaleprice9_, other->dbsaleprice9_);
  std::swap(nsalevolume9_, other->nsalevolume9_);
  std::swap(dbsaleprice10_, other->dbsaleprice10_);
  std::swap(nsalevolume10_, other->nsalevolume10_);
  std::swap(cproductclass_, other->cproductclass_);
  std::swap(npreopeninterest_, other->npreopeninterest_);
  std::swap(nopeninterest_, other->nopeninterest_);
  std::swap(dbsettprice_, other->dbsettprice_);
  std::swap(dbpresettprice_, other->dbpresettprice_);
  std::swap(dbftcloseprice_, other->dbftcloseprice_);
  std::swap(cstopflag_, other->cstopflag_);
  std::swap(nbusidate_, other->nbusidate_);
  std::swap(nupdatetime_, other->nupdatetime_);
  std::swap(nupdatemillisec_, other->nupdatemillisec_);
  szreserved_.Swap(&other->szreserved_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KCBPTagQuoteInfo10::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KCBPTagQuoteInfo10_descriptor_;
  metadata.reflection = KCBPTagQuoteInfo10_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KCBPTagQuoteInfo10

// optional int32 cMarket = 1;
bool KCBPTagQuoteInfo10::has_cmarket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KCBPTagQuoteInfo10::set_has_cmarket() {
  _has_bits_[0] |= 0x00000001u;
}
void KCBPTagQuoteInfo10::clear_has_cmarket() {
  _has_bits_[0] &= ~0x00000001u;
}
void KCBPTagQuoteInfo10::clear_cmarket() {
  cmarket_ = 0;
  clear_has_cmarket();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::cmarket() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.cMarket)
  return cmarket_;
}
 void KCBPTagQuoteInfo10::set_cmarket(::google::protobuf::int32 value) {
  set_has_cmarket();
  cmarket_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.cMarket)
}

// optional string szStkcode = 2;
bool KCBPTagQuoteInfo10::has_szstkcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KCBPTagQuoteInfo10::set_has_szstkcode() {
  _has_bits_[0] |= 0x00000002u;
}
void KCBPTagQuoteInfo10::clear_has_szstkcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void KCBPTagQuoteInfo10::clear_szstkcode() {
  szstkcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szstkcode();
}
 const ::std::string& KCBPTagQuoteInfo10::szstkcode() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.szStkcode)
  return szstkcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo10::set_szstkcode(const ::std::string& value) {
  set_has_szstkcode();
  szstkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.szStkcode)
}
 void KCBPTagQuoteInfo10::set_szstkcode(const char* value) {
  set_has_szstkcode();
  szstkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.KCBPTagQuoteInfo10.szStkcode)
}
 void KCBPTagQuoteInfo10::set_szstkcode(const char* value, size_t size) {
  set_has_szstkcode();
  szstkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.KCBPTagQuoteInfo10.szStkcode)
}
 ::std::string* KCBPTagQuoteInfo10::mutable_szstkcode() {
  set_has_szstkcode();
  // @@protoc_insertion_point(field_mutable:XT.KCBPTagQuoteInfo10.szStkcode)
  return szstkcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KCBPTagQuoteInfo10::release_szstkcode() {
  // @@protoc_insertion_point(field_release:XT.KCBPTagQuoteInfo10.szStkcode)
  clear_has_szstkcode();
  return szstkcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo10::set_allocated_szstkcode(::std::string* szstkcode) {
  if (szstkcode != NULL) {
    set_has_szstkcode();
  } else {
    clear_has_szstkcode();
  }
  szstkcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szstkcode);
  // @@protoc_insertion_point(field_set_allocated:XT.KCBPTagQuoteInfo10.szStkcode)
}

// optional string szStkname = 3;
bool KCBPTagQuoteInfo10::has_szstkname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KCBPTagQuoteInfo10::set_has_szstkname() {
  _has_bits_[0] |= 0x00000004u;
}
void KCBPTagQuoteInfo10::clear_has_szstkname() {
  _has_bits_[0] &= ~0x00000004u;
}
void KCBPTagQuoteInfo10::clear_szstkname() {
  szstkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szstkname();
}
 const ::std::string& KCBPTagQuoteInfo10::szstkname() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.szStkname)
  return szstkname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo10::set_szstkname(const ::std::string& value) {
  set_has_szstkname();
  szstkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.szStkname)
}
 void KCBPTagQuoteInfo10::set_szstkname(const char* value) {
  set_has_szstkname();
  szstkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.KCBPTagQuoteInfo10.szStkname)
}
 void KCBPTagQuoteInfo10::set_szstkname(const char* value, size_t size) {
  set_has_szstkname();
  szstkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.KCBPTagQuoteInfo10.szStkname)
}
 ::std::string* KCBPTagQuoteInfo10::mutable_szstkname() {
  set_has_szstkname();
  // @@protoc_insertion_point(field_mutable:XT.KCBPTagQuoteInfo10.szStkname)
  return szstkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KCBPTagQuoteInfo10::release_szstkname() {
  // @@protoc_insertion_point(field_release:XT.KCBPTagQuoteInfo10.szStkname)
  clear_has_szstkname();
  return szstkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo10::set_allocated_szstkname(::std::string* szstkname) {
  if (szstkname != NULL) {
    set_has_szstkname();
  } else {
    clear_has_szstkname();
  }
  szstkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szstkname);
  // @@protoc_insertion_point(field_set_allocated:XT.KCBPTagQuoteInfo10.szStkname)
}

// optional double dbClosePrice = 4;
bool KCBPTagQuoteInfo10::has_dbcloseprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbcloseprice() {
  _has_bits_[0] |= 0x00000008u;
}
void KCBPTagQuoteInfo10::clear_has_dbcloseprice() {
  _has_bits_[0] &= ~0x00000008u;
}
void KCBPTagQuoteInfo10::clear_dbcloseprice() {
  dbcloseprice_ = 0;
  clear_has_dbcloseprice();
}
 double KCBPTagQuoteInfo10::dbcloseprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbClosePrice)
  return dbcloseprice_;
}
 void KCBPTagQuoteInfo10::set_dbcloseprice(double value) {
  set_has_dbcloseprice();
  dbcloseprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbClosePrice)
}

// optional double dbOpenPrice = 5;
bool KCBPTagQuoteInfo10::has_dbopenprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbopenprice() {
  _has_bits_[0] |= 0x00000010u;
}
void KCBPTagQuoteInfo10::clear_has_dbopenprice() {
  _has_bits_[0] &= ~0x00000010u;
}
void KCBPTagQuoteInfo10::clear_dbopenprice() {
  dbopenprice_ = 0;
  clear_has_dbopenprice();
}
 double KCBPTagQuoteInfo10::dbopenprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbOpenPrice)
  return dbopenprice_;
}
 void KCBPTagQuoteInfo10::set_dbopenprice(double value) {
  set_has_dbopenprice();
  dbopenprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbOpenPrice)
}

// optional double dbLastPrice = 6;
bool KCBPTagQuoteInfo10::has_dblastprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dblastprice() {
  _has_bits_[0] |= 0x00000020u;
}
void KCBPTagQuoteInfo10::clear_has_dblastprice() {
  _has_bits_[0] &= ~0x00000020u;
}
void KCBPTagQuoteInfo10::clear_dblastprice() {
  dblastprice_ = 0;
  clear_has_dblastprice();
}
 double KCBPTagQuoteInfo10::dblastprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbLastPrice)
  return dblastprice_;
}
 void KCBPTagQuoteInfo10::set_dblastprice(double value) {
  set_has_dblastprice();
  dblastprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbLastPrice)
}

// optional double dbHighPrice = 7;
bool KCBPTagQuoteInfo10::has_dbhighprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbhighprice() {
  _has_bits_[0] |= 0x00000040u;
}
void KCBPTagQuoteInfo10::clear_has_dbhighprice() {
  _has_bits_[0] &= ~0x00000040u;
}
void KCBPTagQuoteInfo10::clear_dbhighprice() {
  dbhighprice_ = 0;
  clear_has_dbhighprice();
}
 double KCBPTagQuoteInfo10::dbhighprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbHighPrice)
  return dbhighprice_;
}
 void KCBPTagQuoteInfo10::set_dbhighprice(double value) {
  set_has_dbhighprice();
  dbhighprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbHighPrice)
}

// optional double dbLowPrice = 8;
bool KCBPTagQuoteInfo10::has_dblowprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dblowprice() {
  _has_bits_[0] |= 0x00000080u;
}
void KCBPTagQuoteInfo10::clear_has_dblowprice() {
  _has_bits_[0] &= ~0x00000080u;
}
void KCBPTagQuoteInfo10::clear_dblowprice() {
  dblowprice_ = 0;
  clear_has_dblowprice();
}
 double KCBPTagQuoteInfo10::dblowprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbLowPrice)
  return dblowprice_;
}
 void KCBPTagQuoteInfo10::set_dblowprice(double value) {
  set_has_dblowprice();
  dblowprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbLowPrice)
}

// optional double dbMatchQty = 9;
bool KCBPTagQuoteInfo10::has_dbmatchqty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbmatchqty() {
  _has_bits_[0] |= 0x00000100u;
}
void KCBPTagQuoteInfo10::clear_has_dbmatchqty() {
  _has_bits_[0] &= ~0x00000100u;
}
void KCBPTagQuoteInfo10::clear_dbmatchqty() {
  dbmatchqty_ = 0;
  clear_has_dbmatchqty();
}
 double KCBPTagQuoteInfo10::dbmatchqty() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbMatchQty)
  return dbmatchqty_;
}
 void KCBPTagQuoteInfo10::set_dbmatchqty(double value) {
  set_has_dbmatchqty();
  dbmatchqty_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbMatchQty)
}

// optional double dbMatchAmt = 10;
bool KCBPTagQuoteInfo10::has_dbmatchamt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbmatchamt() {
  _has_bits_[0] |= 0x00000200u;
}
void KCBPTagQuoteInfo10::clear_has_dbmatchamt() {
  _has_bits_[0] &= ~0x00000200u;
}
void KCBPTagQuoteInfo10::clear_dbmatchamt() {
  dbmatchamt_ = 0;
  clear_has_dbmatchamt();
}
 double KCBPTagQuoteInfo10::dbmatchamt() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbMatchAmt)
  return dbmatchamt_;
}
 void KCBPTagQuoteInfo10::set_dbmatchamt(double value) {
  set_has_dbmatchamt();
  dbmatchamt_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbMatchAmt)
}

// optional double dbMaxRiseValue = 11;
bool KCBPTagQuoteInfo10::has_dbmaxrisevalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbmaxrisevalue() {
  _has_bits_[0] |= 0x00000400u;
}
void KCBPTagQuoteInfo10::clear_has_dbmaxrisevalue() {
  _has_bits_[0] &= ~0x00000400u;
}
void KCBPTagQuoteInfo10::clear_dbmaxrisevalue() {
  dbmaxrisevalue_ = 0;
  clear_has_dbmaxrisevalue();
}
 double KCBPTagQuoteInfo10::dbmaxrisevalue() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbMaxRiseValue)
  return dbmaxrisevalue_;
}
 void KCBPTagQuoteInfo10::set_dbmaxrisevalue(double value) {
  set_has_dbmaxrisevalue();
  dbmaxrisevalue_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbMaxRiseValue)
}

// optional double dbMaxDownValue = 12;
bool KCBPTagQuoteInfo10::has_dbmaxdownvalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbmaxdownvalue() {
  _has_bits_[0] |= 0x00000800u;
}
void KCBPTagQuoteInfo10::clear_has_dbmaxdownvalue() {
  _has_bits_[0] &= ~0x00000800u;
}
void KCBPTagQuoteInfo10::clear_dbmaxdownvalue() {
  dbmaxdownvalue_ = 0;
  clear_has_dbmaxdownvalue();
}
 double KCBPTagQuoteInfo10::dbmaxdownvalue() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbMaxDownValue)
  return dbmaxdownvalue_;
}
 void KCBPTagQuoteInfo10::set_dbmaxdownvalue(double value) {
  set_has_dbmaxdownvalue();
  dbmaxdownvalue_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbMaxDownValue)
}

// optional double dbAvgPrice = 13;
bool KCBPTagQuoteInfo10::has_dbavgprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbavgprice() {
  _has_bits_[0] |= 0x00001000u;
}
void KCBPTagQuoteInfo10::clear_has_dbavgprice() {
  _has_bits_[0] &= ~0x00001000u;
}
void KCBPTagQuoteInfo10::clear_dbavgprice() {
  dbavgprice_ = 0;
  clear_has_dbavgprice();
}
 double KCBPTagQuoteInfo10::dbavgprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbAvgPrice)
  return dbavgprice_;
}
 void KCBPTagQuoteInfo10::set_dbavgprice(double value) {
  set_has_dbavgprice();
  dbavgprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbAvgPrice)
}

// optional double dbBuyPrice1 = 14;
bool KCBPTagQuoteInfo10::has_dbbuyprice1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice1() {
  _has_bits_[0] |= 0x00002000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice1() {
  _has_bits_[0] &= ~0x00002000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice1() {
  dbbuyprice1_ = 0;
  clear_has_dbbuyprice1();
}
 double KCBPTagQuoteInfo10::dbbuyprice1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice1)
  return dbbuyprice1_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice1(double value) {
  set_has_dbbuyprice1();
  dbbuyprice1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice1)
}

// optional int32 nBuyVolume1 = 15;
bool KCBPTagQuoteInfo10::has_nbuyvolume1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume1() {
  _has_bits_[0] |= 0x00004000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume1() {
  _has_bits_[0] &= ~0x00004000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume1() {
  nbuyvolume1_ = 0;
  clear_has_nbuyvolume1();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume1)
  return nbuyvolume1_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume1(::google::protobuf::int32 value) {
  set_has_nbuyvolume1();
  nbuyvolume1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume1)
}

// optional double dbBuyPrice2 = 16;
bool KCBPTagQuoteInfo10::has_dbbuyprice2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice2() {
  _has_bits_[0] |= 0x00008000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice2() {
  _has_bits_[0] &= ~0x00008000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice2() {
  dbbuyprice2_ = 0;
  clear_has_dbbuyprice2();
}
 double KCBPTagQuoteInfo10::dbbuyprice2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice2)
  return dbbuyprice2_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice2(double value) {
  set_has_dbbuyprice2();
  dbbuyprice2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice2)
}

// optional int32 nBuyVolume2 = 17;
bool KCBPTagQuoteInfo10::has_nbuyvolume2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume2() {
  _has_bits_[0] |= 0x00010000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume2() {
  _has_bits_[0] &= ~0x00010000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume2() {
  nbuyvolume2_ = 0;
  clear_has_nbuyvolume2();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume2)
  return nbuyvolume2_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume2(::google::protobuf::int32 value) {
  set_has_nbuyvolume2();
  nbuyvolume2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume2)
}

// optional double dbBuyPrice3 = 18;
bool KCBPTagQuoteInfo10::has_dbbuyprice3() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice3() {
  _has_bits_[0] |= 0x00020000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice3() {
  _has_bits_[0] &= ~0x00020000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice3() {
  dbbuyprice3_ = 0;
  clear_has_dbbuyprice3();
}
 double KCBPTagQuoteInfo10::dbbuyprice3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice3)
  return dbbuyprice3_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice3(double value) {
  set_has_dbbuyprice3();
  dbbuyprice3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice3)
}

// optional int32 nBuyVolume3 = 19;
bool KCBPTagQuoteInfo10::has_nbuyvolume3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume3() {
  _has_bits_[0] |= 0x00040000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume3() {
  _has_bits_[0] &= ~0x00040000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume3() {
  nbuyvolume3_ = 0;
  clear_has_nbuyvolume3();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume3)
  return nbuyvolume3_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume3(::google::protobuf::int32 value) {
  set_has_nbuyvolume3();
  nbuyvolume3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume3)
}

// optional double dbBuyPrice4 = 20;
bool KCBPTagQuoteInfo10::has_dbbuyprice4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice4() {
  _has_bits_[0] |= 0x00080000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice4() {
  _has_bits_[0] &= ~0x00080000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice4() {
  dbbuyprice4_ = 0;
  clear_has_dbbuyprice4();
}
 double KCBPTagQuoteInfo10::dbbuyprice4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice4)
  return dbbuyprice4_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice4(double value) {
  set_has_dbbuyprice4();
  dbbuyprice4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice4)
}

// optional int32 nBuyVolume4 = 21;
bool KCBPTagQuoteInfo10::has_nbuyvolume4() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume4() {
  _has_bits_[0] |= 0x00100000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume4() {
  _has_bits_[0] &= ~0x00100000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume4() {
  nbuyvolume4_ = 0;
  clear_has_nbuyvolume4();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume4)
  return nbuyvolume4_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume4(::google::protobuf::int32 value) {
  set_has_nbuyvolume4();
  nbuyvolume4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume4)
}

// optional double dbBuyPrice5 = 22;
bool KCBPTagQuoteInfo10::has_dbbuyprice5() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice5() {
  _has_bits_[0] |= 0x00200000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice5() {
  _has_bits_[0] &= ~0x00200000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice5() {
  dbbuyprice5_ = 0;
  clear_has_dbbuyprice5();
}
 double KCBPTagQuoteInfo10::dbbuyprice5() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice5)
  return dbbuyprice5_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice5(double value) {
  set_has_dbbuyprice5();
  dbbuyprice5_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice5)
}

// optional int32 nBuyVolume5 = 23;
bool KCBPTagQuoteInfo10::has_nbuyvolume5() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume5() {
  _has_bits_[0] |= 0x00400000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume5() {
  _has_bits_[0] &= ~0x00400000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume5() {
  nbuyvolume5_ = 0;
  clear_has_nbuyvolume5();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume5() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume5)
  return nbuyvolume5_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume5(::google::protobuf::int32 value) {
  set_has_nbuyvolume5();
  nbuyvolume5_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume5)
}

// optional double dbBuyPrice6 = 24;
bool KCBPTagQuoteInfo10::has_dbbuyprice6() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice6() {
  _has_bits_[0] |= 0x00800000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice6() {
  _has_bits_[0] &= ~0x00800000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice6() {
  dbbuyprice6_ = 0;
  clear_has_dbbuyprice6();
}
 double KCBPTagQuoteInfo10::dbbuyprice6() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice6)
  return dbbuyprice6_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice6(double value) {
  set_has_dbbuyprice6();
  dbbuyprice6_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice6)
}

// optional int32 nBuyVolume6 = 25;
bool KCBPTagQuoteInfo10::has_nbuyvolume6() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume6() {
  _has_bits_[0] |= 0x01000000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume6() {
  _has_bits_[0] &= ~0x01000000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume6() {
  nbuyvolume6_ = 0;
  clear_has_nbuyvolume6();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume6() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume6)
  return nbuyvolume6_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume6(::google::protobuf::int32 value) {
  set_has_nbuyvolume6();
  nbuyvolume6_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume6)
}

// optional double dbBuyPrice7 = 26;
bool KCBPTagQuoteInfo10::has_dbbuyprice7() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice7() {
  _has_bits_[0] |= 0x02000000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice7() {
  _has_bits_[0] &= ~0x02000000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice7() {
  dbbuyprice7_ = 0;
  clear_has_dbbuyprice7();
}
 double KCBPTagQuoteInfo10::dbbuyprice7() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice7)
  return dbbuyprice7_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice7(double value) {
  set_has_dbbuyprice7();
  dbbuyprice7_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice7)
}

// optional int32 nBuyVolume7 = 27;
bool KCBPTagQuoteInfo10::has_nbuyvolume7() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume7() {
  _has_bits_[0] |= 0x04000000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume7() {
  _has_bits_[0] &= ~0x04000000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume7() {
  nbuyvolume7_ = 0;
  clear_has_nbuyvolume7();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume7() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume7)
  return nbuyvolume7_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume7(::google::protobuf::int32 value) {
  set_has_nbuyvolume7();
  nbuyvolume7_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume7)
}

// optional double dbBuyPrice8 = 28;
bool KCBPTagQuoteInfo10::has_dbbuyprice8() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice8() {
  _has_bits_[0] |= 0x08000000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice8() {
  _has_bits_[0] &= ~0x08000000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice8() {
  dbbuyprice8_ = 0;
  clear_has_dbbuyprice8();
}
 double KCBPTagQuoteInfo10::dbbuyprice8() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice8)
  return dbbuyprice8_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice8(double value) {
  set_has_dbbuyprice8();
  dbbuyprice8_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice8)
}

// optional int32 nBuyVolume8 = 29;
bool KCBPTagQuoteInfo10::has_nbuyvolume8() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume8() {
  _has_bits_[0] |= 0x10000000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume8() {
  _has_bits_[0] &= ~0x10000000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume8() {
  nbuyvolume8_ = 0;
  clear_has_nbuyvolume8();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume8() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume8)
  return nbuyvolume8_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume8(::google::protobuf::int32 value) {
  set_has_nbuyvolume8();
  nbuyvolume8_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume8)
}

// optional double dbBuyPrice9 = 30;
bool KCBPTagQuoteInfo10::has_dbbuyprice9() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice9() {
  _has_bits_[0] |= 0x20000000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice9() {
  _has_bits_[0] &= ~0x20000000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice9() {
  dbbuyprice9_ = 0;
  clear_has_dbbuyprice9();
}
 double KCBPTagQuoteInfo10::dbbuyprice9() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice9)
  return dbbuyprice9_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice9(double value) {
  set_has_dbbuyprice9();
  dbbuyprice9_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice9)
}

// optional int32 nBuyVolume9 = 31;
bool KCBPTagQuoteInfo10::has_nbuyvolume9() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume9() {
  _has_bits_[0] |= 0x40000000u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume9() {
  _has_bits_[0] &= ~0x40000000u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume9() {
  nbuyvolume9_ = 0;
  clear_has_nbuyvolume9();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume9() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume9)
  return nbuyvolume9_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume9(::google::protobuf::int32 value) {
  set_has_nbuyvolume9();
  nbuyvolume9_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume9)
}

// optional double dbBuyPrice10 = 32;
bool KCBPTagQuoteInfo10::has_dbbuyprice10() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbbuyprice10() {
  _has_bits_[0] |= 0x80000000u;
}
void KCBPTagQuoteInfo10::clear_has_dbbuyprice10() {
  _has_bits_[0] &= ~0x80000000u;
}
void KCBPTagQuoteInfo10::clear_dbbuyprice10() {
  dbbuyprice10_ = 0;
  clear_has_dbbuyprice10();
}
 double KCBPTagQuoteInfo10::dbbuyprice10() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbBuyPrice10)
  return dbbuyprice10_;
}
 void KCBPTagQuoteInfo10::set_dbbuyprice10(double value) {
  set_has_dbbuyprice10();
  dbbuyprice10_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbBuyPrice10)
}

// optional int32 nBuyVolume10 = 33;
bool KCBPTagQuoteInfo10::has_nbuyvolume10() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbuyvolume10() {
  _has_bits_[1] |= 0x00000001u;
}
void KCBPTagQuoteInfo10::clear_has_nbuyvolume10() {
  _has_bits_[1] &= ~0x00000001u;
}
void KCBPTagQuoteInfo10::clear_nbuyvolume10() {
  nbuyvolume10_ = 0;
  clear_has_nbuyvolume10();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbuyvolume10() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBuyVolume10)
  return nbuyvolume10_;
}
 void KCBPTagQuoteInfo10::set_nbuyvolume10(::google::protobuf::int32 value) {
  set_has_nbuyvolume10();
  nbuyvolume10_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBuyVolume10)
}

// optional double dbSalePrice1 = 34;
bool KCBPTagQuoteInfo10::has_dbsaleprice1() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice1() {
  _has_bits_[1] |= 0x00000002u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice1() {
  _has_bits_[1] &= ~0x00000002u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice1() {
  dbsaleprice1_ = 0;
  clear_has_dbsaleprice1();
}
 double KCBPTagQuoteInfo10::dbsaleprice1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice1)
  return dbsaleprice1_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice1(double value) {
  set_has_dbsaleprice1();
  dbsaleprice1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice1)
}

// optional int32 nSaleVolume1 = 35;
bool KCBPTagQuoteInfo10::has_nsalevolume1() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume1() {
  _has_bits_[1] |= 0x00000004u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume1() {
  _has_bits_[1] &= ~0x00000004u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume1() {
  nsalevolume1_ = 0;
  clear_has_nsalevolume1();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume1)
  return nsalevolume1_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume1(::google::protobuf::int32 value) {
  set_has_nsalevolume1();
  nsalevolume1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume1)
}

// optional double dbSalePrice2 = 36;
bool KCBPTagQuoteInfo10::has_dbsaleprice2() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice2() {
  _has_bits_[1] |= 0x00000008u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice2() {
  _has_bits_[1] &= ~0x00000008u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice2() {
  dbsaleprice2_ = 0;
  clear_has_dbsaleprice2();
}
 double KCBPTagQuoteInfo10::dbsaleprice2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice2)
  return dbsaleprice2_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice2(double value) {
  set_has_dbsaleprice2();
  dbsaleprice2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice2)
}

// optional int32 nSaleVolume2 = 37;
bool KCBPTagQuoteInfo10::has_nsalevolume2() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume2() {
  _has_bits_[1] |= 0x00000010u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume2() {
  _has_bits_[1] &= ~0x00000010u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume2() {
  nsalevolume2_ = 0;
  clear_has_nsalevolume2();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume2)
  return nsalevolume2_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume2(::google::protobuf::int32 value) {
  set_has_nsalevolume2();
  nsalevolume2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume2)
}

// optional double dbSalePrice3 = 38;
bool KCBPTagQuoteInfo10::has_dbsaleprice3() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice3() {
  _has_bits_[1] |= 0x00000020u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice3() {
  _has_bits_[1] &= ~0x00000020u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice3() {
  dbsaleprice3_ = 0;
  clear_has_dbsaleprice3();
}
 double KCBPTagQuoteInfo10::dbsaleprice3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice3)
  return dbsaleprice3_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice3(double value) {
  set_has_dbsaleprice3();
  dbsaleprice3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice3)
}

// optional int32 nSaleVolume3 = 39;
bool KCBPTagQuoteInfo10::has_nsalevolume3() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume3() {
  _has_bits_[1] |= 0x00000040u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume3() {
  _has_bits_[1] &= ~0x00000040u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume3() {
  nsalevolume3_ = 0;
  clear_has_nsalevolume3();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume3)
  return nsalevolume3_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume3(::google::protobuf::int32 value) {
  set_has_nsalevolume3();
  nsalevolume3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume3)
}

// optional double dbSalePrice4 = 40;
bool KCBPTagQuoteInfo10::has_dbsaleprice4() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice4() {
  _has_bits_[1] |= 0x00000080u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice4() {
  _has_bits_[1] &= ~0x00000080u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice4() {
  dbsaleprice4_ = 0;
  clear_has_dbsaleprice4();
}
 double KCBPTagQuoteInfo10::dbsaleprice4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice4)
  return dbsaleprice4_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice4(double value) {
  set_has_dbsaleprice4();
  dbsaleprice4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice4)
}

// optional int32 nSaleVolume4 = 41;
bool KCBPTagQuoteInfo10::has_nsalevolume4() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume4() {
  _has_bits_[1] |= 0x00000100u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume4() {
  _has_bits_[1] &= ~0x00000100u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume4() {
  nsalevolume4_ = 0;
  clear_has_nsalevolume4();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume4)
  return nsalevolume4_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume4(::google::protobuf::int32 value) {
  set_has_nsalevolume4();
  nsalevolume4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume4)
}

// optional double dbSalePrice5 = 42;
bool KCBPTagQuoteInfo10::has_dbsaleprice5() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice5() {
  _has_bits_[1] |= 0x00000200u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice5() {
  _has_bits_[1] &= ~0x00000200u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice5() {
  dbsaleprice5_ = 0;
  clear_has_dbsaleprice5();
}
 double KCBPTagQuoteInfo10::dbsaleprice5() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice5)
  return dbsaleprice5_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice5(double value) {
  set_has_dbsaleprice5();
  dbsaleprice5_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice5)
}

// optional int32 nSaleVolume5 = 43;
bool KCBPTagQuoteInfo10::has_nsalevolume5() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume5() {
  _has_bits_[1] |= 0x00000400u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume5() {
  _has_bits_[1] &= ~0x00000400u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume5() {
  nsalevolume5_ = 0;
  clear_has_nsalevolume5();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume5() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume5)
  return nsalevolume5_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume5(::google::protobuf::int32 value) {
  set_has_nsalevolume5();
  nsalevolume5_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume5)
}

// optional double dbSalePrice6 = 44;
bool KCBPTagQuoteInfo10::has_dbsaleprice6() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice6() {
  _has_bits_[1] |= 0x00000800u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice6() {
  _has_bits_[1] &= ~0x00000800u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice6() {
  dbsaleprice6_ = 0;
  clear_has_dbsaleprice6();
}
 double KCBPTagQuoteInfo10::dbsaleprice6() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice6)
  return dbsaleprice6_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice6(double value) {
  set_has_dbsaleprice6();
  dbsaleprice6_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice6)
}

// optional int32 nSaleVolume6 = 45;
bool KCBPTagQuoteInfo10::has_nsalevolume6() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume6() {
  _has_bits_[1] |= 0x00001000u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume6() {
  _has_bits_[1] &= ~0x00001000u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume6() {
  nsalevolume6_ = 0;
  clear_has_nsalevolume6();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume6() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume6)
  return nsalevolume6_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume6(::google::protobuf::int32 value) {
  set_has_nsalevolume6();
  nsalevolume6_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume6)
}

// optional double dbSalePrice7 = 46;
bool KCBPTagQuoteInfo10::has_dbsaleprice7() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice7() {
  _has_bits_[1] |= 0x00002000u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice7() {
  _has_bits_[1] &= ~0x00002000u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice7() {
  dbsaleprice7_ = 0;
  clear_has_dbsaleprice7();
}
 double KCBPTagQuoteInfo10::dbsaleprice7() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice7)
  return dbsaleprice7_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice7(double value) {
  set_has_dbsaleprice7();
  dbsaleprice7_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice7)
}

// optional int32 nSaleVolume7 = 47;
bool KCBPTagQuoteInfo10::has_nsalevolume7() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume7() {
  _has_bits_[1] |= 0x00004000u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume7() {
  _has_bits_[1] &= ~0x00004000u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume7() {
  nsalevolume7_ = 0;
  clear_has_nsalevolume7();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume7() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume7)
  return nsalevolume7_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume7(::google::protobuf::int32 value) {
  set_has_nsalevolume7();
  nsalevolume7_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume7)
}

// optional double dbSalePrice8 = 48;
bool KCBPTagQuoteInfo10::has_dbsaleprice8() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice8() {
  _has_bits_[1] |= 0x00008000u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice8() {
  _has_bits_[1] &= ~0x00008000u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice8() {
  dbsaleprice8_ = 0;
  clear_has_dbsaleprice8();
}
 double KCBPTagQuoteInfo10::dbsaleprice8() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice8)
  return dbsaleprice8_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice8(double value) {
  set_has_dbsaleprice8();
  dbsaleprice8_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice8)
}

// optional int32 nSaleVolume8 = 49;
bool KCBPTagQuoteInfo10::has_nsalevolume8() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume8() {
  _has_bits_[1] |= 0x00010000u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume8() {
  _has_bits_[1] &= ~0x00010000u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume8() {
  nsalevolume8_ = 0;
  clear_has_nsalevolume8();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume8() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume8)
  return nsalevolume8_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume8(::google::protobuf::int32 value) {
  set_has_nsalevolume8();
  nsalevolume8_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume8)
}

// optional double dbSalePrice9 = 50;
bool KCBPTagQuoteInfo10::has_dbsaleprice9() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice9() {
  _has_bits_[1] |= 0x00020000u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice9() {
  _has_bits_[1] &= ~0x00020000u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice9() {
  dbsaleprice9_ = 0;
  clear_has_dbsaleprice9();
}
 double KCBPTagQuoteInfo10::dbsaleprice9() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice9)
  return dbsaleprice9_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice9(double value) {
  set_has_dbsaleprice9();
  dbsaleprice9_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice9)
}

// optional int32 nSaleVolume9 = 51;
bool KCBPTagQuoteInfo10::has_nsalevolume9() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume9() {
  _has_bits_[1] |= 0x00040000u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume9() {
  _has_bits_[1] &= ~0x00040000u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume9() {
  nsalevolume9_ = 0;
  clear_has_nsalevolume9();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume9() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume9)
  return nsalevolume9_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume9(::google::protobuf::int32 value) {
  set_has_nsalevolume9();
  nsalevolume9_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume9)
}

// optional double dbSalePrice10 = 52;
bool KCBPTagQuoteInfo10::has_dbsaleprice10() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsaleprice10() {
  _has_bits_[1] |= 0x00080000u;
}
void KCBPTagQuoteInfo10::clear_has_dbsaleprice10() {
  _has_bits_[1] &= ~0x00080000u;
}
void KCBPTagQuoteInfo10::clear_dbsaleprice10() {
  dbsaleprice10_ = 0;
  clear_has_dbsaleprice10();
}
 double KCBPTagQuoteInfo10::dbsaleprice10() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSalePrice10)
  return dbsaleprice10_;
}
 void KCBPTagQuoteInfo10::set_dbsaleprice10(double value) {
  set_has_dbsaleprice10();
  dbsaleprice10_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSalePrice10)
}

// optional int32 nSaleVolume10 = 53;
bool KCBPTagQuoteInfo10::has_nsalevolume10() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nsalevolume10() {
  _has_bits_[1] |= 0x00100000u;
}
void KCBPTagQuoteInfo10::clear_has_nsalevolume10() {
  _has_bits_[1] &= ~0x00100000u;
}
void KCBPTagQuoteInfo10::clear_nsalevolume10() {
  nsalevolume10_ = 0;
  clear_has_nsalevolume10();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nsalevolume10() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nSaleVolume10)
  return nsalevolume10_;
}
 void KCBPTagQuoteInfo10::set_nsalevolume10(::google::protobuf::int32 value) {
  set_has_nsalevolume10();
  nsalevolume10_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nSaleVolume10)
}

// optional int32 cProductClass = 54;
bool KCBPTagQuoteInfo10::has_cproductclass() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_cproductclass() {
  _has_bits_[1] |= 0x00200000u;
}
void KCBPTagQuoteInfo10::clear_has_cproductclass() {
  _has_bits_[1] &= ~0x00200000u;
}
void KCBPTagQuoteInfo10::clear_cproductclass() {
  cproductclass_ = 0;
  clear_has_cproductclass();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::cproductclass() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.cProductClass)
  return cproductclass_;
}
 void KCBPTagQuoteInfo10::set_cproductclass(::google::protobuf::int32 value) {
  set_has_cproductclass();
  cproductclass_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.cProductClass)
}

// optional int32 nPreOpenInterest = 55;
bool KCBPTagQuoteInfo10::has_npreopeninterest() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_npreopeninterest() {
  _has_bits_[1] |= 0x00400000u;
}
void KCBPTagQuoteInfo10::clear_has_npreopeninterest() {
  _has_bits_[1] &= ~0x00400000u;
}
void KCBPTagQuoteInfo10::clear_npreopeninterest() {
  npreopeninterest_ = 0;
  clear_has_npreopeninterest();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::npreopeninterest() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nPreOpenInterest)
  return npreopeninterest_;
}
 void KCBPTagQuoteInfo10::set_npreopeninterest(::google::protobuf::int32 value) {
  set_has_npreopeninterest();
  npreopeninterest_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nPreOpenInterest)
}

// optional int32 nOpenInterest = 56;
bool KCBPTagQuoteInfo10::has_nopeninterest() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nopeninterest() {
  _has_bits_[1] |= 0x00800000u;
}
void KCBPTagQuoteInfo10::clear_has_nopeninterest() {
  _has_bits_[1] &= ~0x00800000u;
}
void KCBPTagQuoteInfo10::clear_nopeninterest() {
  nopeninterest_ = 0;
  clear_has_nopeninterest();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nopeninterest() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nOpenInterest)
  return nopeninterest_;
}
 void KCBPTagQuoteInfo10::set_nopeninterest(::google::protobuf::int32 value) {
  set_has_nopeninterest();
  nopeninterest_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nOpenInterest)
}

// optional double dbSettPrice = 57;
bool KCBPTagQuoteInfo10::has_dbsettprice() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbsettprice() {
  _has_bits_[1] |= 0x01000000u;
}
void KCBPTagQuoteInfo10::clear_has_dbsettprice() {
  _has_bits_[1] &= ~0x01000000u;
}
void KCBPTagQuoteInfo10::clear_dbsettprice() {
  dbsettprice_ = 0;
  clear_has_dbsettprice();
}
 double KCBPTagQuoteInfo10::dbsettprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbSettPrice)
  return dbsettprice_;
}
 void KCBPTagQuoteInfo10::set_dbsettprice(double value) {
  set_has_dbsettprice();
  dbsettprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbSettPrice)
}

// optional double dbPreSettPrice = 58;
bool KCBPTagQuoteInfo10::has_dbpresettprice() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbpresettprice() {
  _has_bits_[1] |= 0x02000000u;
}
void KCBPTagQuoteInfo10::clear_has_dbpresettprice() {
  _has_bits_[1] &= ~0x02000000u;
}
void KCBPTagQuoteInfo10::clear_dbpresettprice() {
  dbpresettprice_ = 0;
  clear_has_dbpresettprice();
}
 double KCBPTagQuoteInfo10::dbpresettprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbPreSettPrice)
  return dbpresettprice_;
}
 void KCBPTagQuoteInfo10::set_dbpresettprice(double value) {
  set_has_dbpresettprice();
  dbpresettprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbPreSettPrice)
}

// optional double dbFtClosePrice = 59;
bool KCBPTagQuoteInfo10::has_dbftcloseprice() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_dbftcloseprice() {
  _has_bits_[1] |= 0x04000000u;
}
void KCBPTagQuoteInfo10::clear_has_dbftcloseprice() {
  _has_bits_[1] &= ~0x04000000u;
}
void KCBPTagQuoteInfo10::clear_dbftcloseprice() {
  dbftcloseprice_ = 0;
  clear_has_dbftcloseprice();
}
 double KCBPTagQuoteInfo10::dbftcloseprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.dbFtClosePrice)
  return dbftcloseprice_;
}
 void KCBPTagQuoteInfo10::set_dbftcloseprice(double value) {
  set_has_dbftcloseprice();
  dbftcloseprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.dbFtClosePrice)
}

// optional int32 cStopFlag = 60;
bool KCBPTagQuoteInfo10::has_cstopflag() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_cstopflag() {
  _has_bits_[1] |= 0x08000000u;
}
void KCBPTagQuoteInfo10::clear_has_cstopflag() {
  _has_bits_[1] &= ~0x08000000u;
}
void KCBPTagQuoteInfo10::clear_cstopflag() {
  cstopflag_ = 0;
  clear_has_cstopflag();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::cstopflag() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.cStopFlag)
  return cstopflag_;
}
 void KCBPTagQuoteInfo10::set_cstopflag(::google::protobuf::int32 value) {
  set_has_cstopflag();
  cstopflag_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.cStopFlag)
}

// optional int32 nBusidate = 61;
bool KCBPTagQuoteInfo10::has_nbusidate() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nbusidate() {
  _has_bits_[1] |= 0x10000000u;
}
void KCBPTagQuoteInfo10::clear_has_nbusidate() {
  _has_bits_[1] &= ~0x10000000u;
}
void KCBPTagQuoteInfo10::clear_nbusidate() {
  nbusidate_ = 0;
  clear_has_nbusidate();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nbusidate() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nBusidate)
  return nbusidate_;
}
 void KCBPTagQuoteInfo10::set_nbusidate(::google::protobuf::int32 value) {
  set_has_nbusidate();
  nbusidate_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nBusidate)
}

// optional int32 nUpdateTime = 62;
bool KCBPTagQuoteInfo10::has_nupdatetime() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nupdatetime() {
  _has_bits_[1] |= 0x20000000u;
}
void KCBPTagQuoteInfo10::clear_has_nupdatetime() {
  _has_bits_[1] &= ~0x20000000u;
}
void KCBPTagQuoteInfo10::clear_nupdatetime() {
  nupdatetime_ = 0;
  clear_has_nupdatetime();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nupdatetime() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nUpdateTime)
  return nupdatetime_;
}
 void KCBPTagQuoteInfo10::set_nupdatetime(::google::protobuf::int32 value) {
  set_has_nupdatetime();
  nupdatetime_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nUpdateTime)
}

// optional int32 nUpdateMillisec = 63;
bool KCBPTagQuoteInfo10::has_nupdatemillisec() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_nupdatemillisec() {
  _has_bits_[1] |= 0x40000000u;
}
void KCBPTagQuoteInfo10::clear_has_nupdatemillisec() {
  _has_bits_[1] &= ~0x40000000u;
}
void KCBPTagQuoteInfo10::clear_nupdatemillisec() {
  nupdatemillisec_ = 0;
  clear_has_nupdatemillisec();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo10::nupdatemillisec() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.nUpdateMillisec)
  return nupdatemillisec_;
}
 void KCBPTagQuoteInfo10::set_nupdatemillisec(::google::protobuf::int32 value) {
  set_has_nupdatemillisec();
  nupdatemillisec_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.nUpdateMillisec)
}

// optional string szReserved = 64;
bool KCBPTagQuoteInfo10::has_szreserved() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void KCBPTagQuoteInfo10::set_has_szreserved() {
  _has_bits_[1] |= 0x80000000u;
}
void KCBPTagQuoteInfo10::clear_has_szreserved() {
  _has_bits_[1] &= ~0x80000000u;
}
void KCBPTagQuoteInfo10::clear_szreserved() {
  szreserved_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szreserved();
}
 const ::std::string& KCBPTagQuoteInfo10::szreserved() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo10.szReserved)
  return szreserved_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo10::set_szreserved(const ::std::string& value) {
  set_has_szreserved();
  szreserved_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo10.szReserved)
}
 void KCBPTagQuoteInfo10::set_szreserved(const char* value) {
  set_has_szreserved();
  szreserved_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.KCBPTagQuoteInfo10.szReserved)
}
 void KCBPTagQuoteInfo10::set_szreserved(const char* value, size_t size) {
  set_has_szreserved();
  szreserved_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.KCBPTagQuoteInfo10.szReserved)
}
 ::std::string* KCBPTagQuoteInfo10::mutable_szreserved() {
  set_has_szreserved();
  // @@protoc_insertion_point(field_mutable:XT.KCBPTagQuoteInfo10.szReserved)
  return szreserved_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KCBPTagQuoteInfo10::release_szreserved() {
  // @@protoc_insertion_point(field_release:XT.KCBPTagQuoteInfo10.szReserved)
  clear_has_szreserved();
  return szreserved_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo10::set_allocated_szreserved(::std::string* szreserved) {
  if (szreserved != NULL) {
    set_has_szreserved();
  } else {
    clear_has_szreserved();
  }
  szreserved_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szreserved);
  // @@protoc_insertion_point(field_set_allocated:XT.KCBPTagQuoteInfo10.szReserved)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KCBPTagQuoteInfo5::kCMarketFieldNumber;
const int KCBPTagQuoteInfo5::kSzStkcodeFieldNumber;
const int KCBPTagQuoteInfo5::kSzStknameFieldNumber;
const int KCBPTagQuoteInfo5::kCProductClassFieldNumber;
const int KCBPTagQuoteInfo5::kNTradingDayFieldNumber;
const int KCBPTagQuoteInfo5::kNPreOpenInterestFieldNumber;
const int KCBPTagQuoteInfo5::kDbPreSettPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbOpenPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbUpperLimitPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbLowerLimitPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbSettPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbClosePriceFieldNumber;
const int KCBPTagQuoteInfo5::kCTpbzFieldNumber;
const int KCBPTagQuoteInfo5::kNUpdateMillisecFieldNumber;
const int KCBPTagQuoteInfo5::kNUpdateTimeFieldNumber;
const int KCBPTagQuoteInfo5::kNOpenInterestFieldNumber;
const int KCBPTagQuoteInfo5::kDbMatchQtyFieldNumber;
const int KCBPTagQuoteInfo5::kDbMatchAmtFieldNumber;
const int KCBPTagQuoteInfo5::kDbLastPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbAvgPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbHighPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbLowPriceFieldNumber;
const int KCBPTagQuoteInfo5::kDbSalePrice0FieldNumber;
const int KCBPTagQuoteInfo5::kNSaleVolume0FieldNumber;
const int KCBPTagQuoteInfo5::kDbBuyPrice0FieldNumber;
const int KCBPTagQuoteInfo5::kNBuyVolume0FieldNumber;
const int KCBPTagQuoteInfo5::kDbSalePrice1FieldNumber;
const int KCBPTagQuoteInfo5::kNSaleVolume1FieldNumber;
const int KCBPTagQuoteInfo5::kDbBuyPrice1FieldNumber;
const int KCBPTagQuoteInfo5::kNBuyVolume1FieldNumber;
const int KCBPTagQuoteInfo5::kDbSalePrice2FieldNumber;
const int KCBPTagQuoteInfo5::kNSaleVolume2FieldNumber;
const int KCBPTagQuoteInfo5::kDbBuyPrice2FieldNumber;
const int KCBPTagQuoteInfo5::kNBuyVolume2FieldNumber;
const int KCBPTagQuoteInfo5::kDbSalePrice3FieldNumber;
const int KCBPTagQuoteInfo5::kNSaleVolume3FieldNumber;
const int KCBPTagQuoteInfo5::kDbBuyPrice3FieldNumber;
const int KCBPTagQuoteInfo5::kNBuyVolume3FieldNumber;
const int KCBPTagQuoteInfo5::kDbSalePrice4FieldNumber;
const int KCBPTagQuoteInfo5::kNSaleVolume4FieldNumber;
const int KCBPTagQuoteInfo5::kDbBuyPrice4FieldNumber;
const int KCBPTagQuoteInfo5::kNBuyVolume4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KCBPTagQuoteInfo5::KCBPTagQuoteInfo5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.KCBPTagQuoteInfo5)
}

void KCBPTagQuoteInfo5::InitAsDefaultInstance() {
}

KCBPTagQuoteInfo5::KCBPTagQuoteInfo5(const KCBPTagQuoteInfo5& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.KCBPTagQuoteInfo5)
}

void KCBPTagQuoteInfo5::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmarket_ = 0;
  szstkcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szstkname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cproductclass_ = 0;
  ntradingday_ = 0;
  npreopeninterest_ = 0;
  dbpresettprice_ = 0;
  dbopenprice_ = 0;
  dbupperlimitprice_ = 0;
  dblowerlimitprice_ = 0;
  dbsettprice_ = 0;
  dbcloseprice_ = 0;
  ctpbz_ = 0;
  nupdatemillisec_ = 0;
  nupdatetime_ = 0;
  nopeninterest_ = 0;
  dbmatchqty_ = 0;
  dbmatchamt_ = 0;
  dblastprice_ = 0;
  dbavgprice_ = 0;
  dbhighprice_ = 0;
  dblowprice_ = 0;
  dbsaleprice0_ = 0;
  nsalevolume0_ = 0;
  dbbuyprice0_ = 0;
  nbuyvolume0_ = 0;
  dbsaleprice1_ = 0;
  nsalevolume1_ = 0;
  dbbuyprice1_ = 0;
  nbuyvolume1_ = 0;
  dbsaleprice2_ = 0;
  nsalevolume2_ = 0;
  dbbuyprice2_ = 0;
  nbuyvolume2_ = 0;
  dbsaleprice3_ = 0;
  nsalevolume3_ = 0;
  dbbuyprice3_ = 0;
  nbuyvolume3_ = 0;
  dbsaleprice4_ = 0;
  nsalevolume4_ = 0;
  dbbuyprice4_ = 0;
  nbuyvolume4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KCBPTagQuoteInfo5::~KCBPTagQuoteInfo5() {
  // @@protoc_insertion_point(destructor:XT.KCBPTagQuoteInfo5)
  SharedDtor();
}

void KCBPTagQuoteInfo5::SharedDtor() {
  szstkcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szstkname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KCBPTagQuoteInfo5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KCBPTagQuoteInfo5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KCBPTagQuoteInfo5_descriptor_;
}

const KCBPTagQuoteInfo5& KCBPTagQuoteInfo5::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

KCBPTagQuoteInfo5* KCBPTagQuoteInfo5::default_instance_ = NULL;

KCBPTagQuoteInfo5* KCBPTagQuoteInfo5::New(::google::protobuf::Arena* arena) const {
  KCBPTagQuoteInfo5* n = new KCBPTagQuoteInfo5;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KCBPTagQuoteInfo5::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.KCBPTagQuoteInfo5)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KCBPTagQuoteInfo5, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KCBPTagQuoteInfo5*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(cmarket_, cproductclass_);
    ZR_(ntradingday_, dbopenprice_);
    if (has_szstkcode()) {
      szstkcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_szstkname()) {
      szstkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(dbupperlimitprice_, nopeninterest_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(dbmatchqty_, dbsaleprice0_);
    nsalevolume0_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(nbuyvolume0_, dbsaleprice2_);
    dbbuyprice0_ = 0;
    nsalevolume2_ = 0;
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(nbuyvolume2_, dbsaleprice4_);
    dbbuyprice2_ = 0;
    nsalevolume4_ = 0;
  }
  if (_has_bits_[40 / 32] & 768u) {
    dbbuyprice4_ = 0;
    nbuyvolume4_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KCBPTagQuoteInfo5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.KCBPTagQuoteInfo5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cMarket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmarket_)));
          set_has_cmarket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szStkcode;
        break;
      }

      // optional string szStkcode = 2;
      case 2: {
        if (tag == 18) {
         parse_szStkcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szstkcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szstkcode().data(), this->szstkcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.KCBPTagQuoteInfo5.szStkcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szStkname;
        break;
      }

      // optional string szStkname = 3;
      case 3: {
        if (tag == 26) {
         parse_szStkname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szstkname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szstkname().data(), this->szstkname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.KCBPTagQuoteInfo5.szStkname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cProductClass;
        break;
      }

      // optional int32 cProductClass = 4;
      case 4: {
        if (tag == 32) {
         parse_cProductClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cproductclass_)));
          set_has_cproductclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nTradingDay;
        break;
      }

      // optional int32 nTradingDay = 5;
      case 5: {
        if (tag == 40) {
         parse_nTradingDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntradingday_)));
          set_has_ntradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nPreOpenInterest;
        break;
      }

      // optional int32 nPreOpenInterest = 6;
      case 6: {
        if (tag == 48) {
         parse_nPreOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npreopeninterest_)));
          set_has_npreopeninterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dbPreSettPrice;
        break;
      }

      // optional double dbPreSettPrice = 7;
      case 7: {
        if (tag == 57) {
         parse_dbPreSettPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbpresettprice_)));
          set_has_dbpresettprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_dbOpenPrice;
        break;
      }

      // optional double dbOpenPrice = 8;
      case 8: {
        if (tag == 65) {
         parse_dbOpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbopenprice_)));
          set_has_dbopenprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_dbUpperLimitPrice;
        break;
      }

      // optional double dbUpperLimitPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_dbUpperLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbupperlimitprice_)));
          set_has_dbupperlimitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_dbLowerLimitPrice;
        break;
      }

      // optional double dbLowerLimitPrice = 10;
      case 10: {
        if (tag == 81) {
         parse_dbLowerLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dblowerlimitprice_)));
          set_has_dblowerlimitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_dbSettPrice;
        break;
      }

      // optional double dbSettPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_dbSettPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsettprice_)));
          set_has_dbsettprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_dbClosePrice;
        break;
      }

      // optional double dbClosePrice = 12;
      case 12: {
        if (tag == 97) {
         parse_dbClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbcloseprice_)));
          set_has_dbcloseprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cTpbz;
        break;
      }

      // optional int32 cTpbz = 13;
      case 13: {
        if (tag == 104) {
         parse_cTpbz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctpbz_)));
          set_has_ctpbz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_nUpdateMillisec;
        break;
      }

      // optional int32 nUpdateMillisec = 14;
      case 14: {
        if (tag == 112) {
         parse_nUpdateMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nupdatemillisec_)));
          set_has_nupdatemillisec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_nUpdateTime;
        break;
      }

      // optional int32 nUpdateTime = 15;
      case 15: {
        if (tag == 120) {
         parse_nUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nupdatetime_)));
          set_has_nupdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_nOpenInterest;
        break;
      }

      // optional int32 nOpenInterest = 16;
      case 16: {
        if (tag == 128) {
         parse_nOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nopeninterest_)));
          set_has_nopeninterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_dbMatchQty;
        break;
      }

      // optional double dbMatchQty = 17;
      case 17: {
        if (tag == 137) {
         parse_dbMatchQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbmatchqty_)));
          set_has_dbmatchqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_dbMatchAmt;
        break;
      }

      // optional double dbMatchAmt = 18;
      case 18: {
        if (tag == 145) {
         parse_dbMatchAmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbmatchamt_)));
          set_has_dbmatchamt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_dbLastPrice;
        break;
      }

      // optional double dbLastPrice = 19;
      case 19: {
        if (tag == 153) {
         parse_dbLastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dblastprice_)));
          set_has_dblastprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_dbAvgPrice;
        break;
      }

      // optional double dbAvgPrice = 20;
      case 20: {
        if (tag == 161) {
         parse_dbAvgPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbavgprice_)));
          set_has_dbavgprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_dbHighPrice;
        break;
      }

      // optional double dbHighPrice = 21;
      case 21: {
        if (tag == 169) {
         parse_dbHighPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbhighprice_)));
          set_has_dbhighprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_dbLowPrice;
        break;
      }

      // optional double dbLowPrice = 22;
      case 22: {
        if (tag == 177) {
         parse_dbLowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dblowprice_)));
          set_has_dblowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_dbSalePrice0;
        break;
      }

      // optional double dbSalePrice0 = 23;
      case 23: {
        if (tag == 185) {
         parse_dbSalePrice0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice0_)));
          set_has_dbsaleprice0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_nSaleVolume0;
        break;
      }

      // optional int32 nSaleVolume0 = 24;
      case 24: {
        if (tag == 192) {
         parse_nSaleVolume0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume0_)));
          set_has_nsalevolume0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_dbBuyPrice0;
        break;
      }

      // optional double dbBuyPrice0 = 25;
      case 25: {
        if (tag == 201) {
         parse_dbBuyPrice0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice0_)));
          set_has_dbbuyprice0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_nBuyVolume0;
        break;
      }

      // optional int32 nBuyVolume0 = 26;
      case 26: {
        if (tag == 208) {
         parse_nBuyVolume0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume0_)));
          set_has_nbuyvolume0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_dbSalePrice1;
        break;
      }

      // optional double dbSalePrice1 = 27;
      case 27: {
        if (tag == 217) {
         parse_dbSalePrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice1_)));
          set_has_dbsaleprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_nSaleVolume1;
        break;
      }

      // optional int32 nSaleVolume1 = 28;
      case 28: {
        if (tag == 224) {
         parse_nSaleVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume1_)));
          set_has_nsalevolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_dbBuyPrice1;
        break;
      }

      // optional double dbBuyPrice1 = 29;
      case 29: {
        if (tag == 233) {
         parse_dbBuyPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice1_)));
          set_has_dbbuyprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_nBuyVolume1;
        break;
      }

      // optional int32 nBuyVolume1 = 30;
      case 30: {
        if (tag == 240) {
         parse_nBuyVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume1_)));
          set_has_nbuyvolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_dbSalePrice2;
        break;
      }

      // optional double dbSalePrice2 = 31;
      case 31: {
        if (tag == 249) {
         parse_dbSalePrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice2_)));
          set_has_dbsaleprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_nSaleVolume2;
        break;
      }

      // optional int32 nSaleVolume2 = 32;
      case 32: {
        if (tag == 256) {
         parse_nSaleVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume2_)));
          set_has_nsalevolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_dbBuyPrice2;
        break;
      }

      // optional double dbBuyPrice2 = 33;
      case 33: {
        if (tag == 265) {
         parse_dbBuyPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice2_)));
          set_has_dbbuyprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_nBuyVolume2;
        break;
      }

      // optional int32 nBuyVolume2 = 34;
      case 34: {
        if (tag == 272) {
         parse_nBuyVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume2_)));
          set_has_nbuyvolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_dbSalePrice3;
        break;
      }

      // optional double dbSalePrice3 = 35;
      case 35: {
        if (tag == 281) {
         parse_dbSalePrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice3_)));
          set_has_dbsaleprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_nSaleVolume3;
        break;
      }

      // optional int32 nSaleVolume3 = 36;
      case 36: {
        if (tag == 288) {
         parse_nSaleVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume3_)));
          set_has_nsalevolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_dbBuyPrice3;
        break;
      }

      // optional double dbBuyPrice3 = 37;
      case 37: {
        if (tag == 297) {
         parse_dbBuyPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice3_)));
          set_has_dbbuyprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_nBuyVolume3;
        break;
      }

      // optional int32 nBuyVolume3 = 38;
      case 38: {
        if (tag == 304) {
         parse_nBuyVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume3_)));
          set_has_nbuyvolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(313)) goto parse_dbSalePrice4;
        break;
      }

      // optional double dbSalePrice4 = 39;
      case 39: {
        if (tag == 313) {
         parse_dbSalePrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbsaleprice4_)));
          set_has_dbsaleprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_nSaleVolume4;
        break;
      }

      // optional int32 nSaleVolume4 = 40;
      case 40: {
        if (tag == 320) {
         parse_nSaleVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsalevolume4_)));
          set_has_nsalevolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_dbBuyPrice4;
        break;
      }

      // optional double dbBuyPrice4 = 41;
      case 41: {
        if (tag == 329) {
         parse_dbBuyPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbbuyprice4_)));
          set_has_dbbuyprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_nBuyVolume4;
        break;
      }

      // optional int32 nBuyVolume4 = 42;
      case 42: {
        if (tag == 336) {
         parse_nBuyVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbuyvolume4_)));
          set_has_nbuyvolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.KCBPTagQuoteInfo5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.KCBPTagQuoteInfo5)
  return false;
#undef DO_
}

void KCBPTagQuoteInfo5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.KCBPTagQuoteInfo5)
  // optional int32 cMarket = 1;
  if (has_cmarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmarket(), output);
  }

  // optional string szStkcode = 2;
  if (has_szstkcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkcode().data(), this->szstkcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo5.szStkcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szstkcode(), output);
  }

  // optional string szStkname = 3;
  if (has_szstkname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkname().data(), this->szstkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo5.szStkname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szstkname(), output);
  }

  // optional int32 cProductClass = 4;
  if (has_cproductclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cproductclass(), output);
  }

  // optional int32 nTradingDay = 5;
  if (has_ntradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ntradingday(), output);
  }

  // optional int32 nPreOpenInterest = 6;
  if (has_npreopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->npreopeninterest(), output);
  }

  // optional double dbPreSettPrice = 7;
  if (has_dbpresettprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dbpresettprice(), output);
  }

  // optional double dbOpenPrice = 8;
  if (has_dbopenprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->dbopenprice(), output);
  }

  // optional double dbUpperLimitPrice = 9;
  if (has_dbupperlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->dbupperlimitprice(), output);
  }

  // optional double dbLowerLimitPrice = 10;
  if (has_dblowerlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->dblowerlimitprice(), output);
  }

  // optional double dbSettPrice = 11;
  if (has_dbsettprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dbsettprice(), output);
  }

  // optional double dbClosePrice = 12;
  if (has_dbcloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dbcloseprice(), output);
  }

  // optional int32 cTpbz = 13;
  if (has_ctpbz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ctpbz(), output);
  }

  // optional int32 nUpdateMillisec = 14;
  if (has_nupdatemillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nupdatemillisec(), output);
  }

  // optional int32 nUpdateTime = 15;
  if (has_nupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nupdatetime(), output);
  }

  // optional int32 nOpenInterest = 16;
  if (has_nopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->nopeninterest(), output);
  }

  // optional double dbMatchQty = 17;
  if (has_dbmatchqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->dbmatchqty(), output);
  }

  // optional double dbMatchAmt = 18;
  if (has_dbmatchamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->dbmatchamt(), output);
  }

  // optional double dbLastPrice = 19;
  if (has_dblastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->dblastprice(), output);
  }

  // optional double dbAvgPrice = 20;
  if (has_dbavgprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->dbavgprice(), output);
  }

  // optional double dbHighPrice = 21;
  if (has_dbhighprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->dbhighprice(), output);
  }

  // optional double dbLowPrice = 22;
  if (has_dblowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->dblowprice(), output);
  }

  // optional double dbSalePrice0 = 23;
  if (has_dbsaleprice0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->dbsaleprice0(), output);
  }

  // optional int32 nSaleVolume0 = 24;
  if (has_nsalevolume0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nsalevolume0(), output);
  }

  // optional double dbBuyPrice0 = 25;
  if (has_dbbuyprice0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->dbbuyprice0(), output);
  }

  // optional int32 nBuyVolume0 = 26;
  if (has_nbuyvolume0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->nbuyvolume0(), output);
  }

  // optional double dbSalePrice1 = 27;
  if (has_dbsaleprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->dbsaleprice1(), output);
  }

  // optional int32 nSaleVolume1 = 28;
  if (has_nsalevolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nsalevolume1(), output);
  }

  // optional double dbBuyPrice1 = 29;
  if (has_dbbuyprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->dbbuyprice1(), output);
  }

  // optional int32 nBuyVolume1 = 30;
  if (has_nbuyvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->nbuyvolume1(), output);
  }

  // optional double dbSalePrice2 = 31;
  if (has_dbsaleprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->dbsaleprice2(), output);
  }

  // optional int32 nSaleVolume2 = 32;
  if (has_nsalevolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->nsalevolume2(), output);
  }

  // optional double dbBuyPrice2 = 33;
  if (has_dbbuyprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->dbbuyprice2(), output);
  }

  // optional int32 nBuyVolume2 = 34;
  if (has_nbuyvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->nbuyvolume2(), output);
  }

  // optional double dbSalePrice3 = 35;
  if (has_dbsaleprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->dbsaleprice3(), output);
  }

  // optional int32 nSaleVolume3 = 36;
  if (has_nsalevolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->nsalevolume3(), output);
  }

  // optional double dbBuyPrice3 = 37;
  if (has_dbbuyprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->dbbuyprice3(), output);
  }

  // optional int32 nBuyVolume3 = 38;
  if (has_nbuyvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->nbuyvolume3(), output);
  }

  // optional double dbSalePrice4 = 39;
  if (has_dbsaleprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->dbsaleprice4(), output);
  }

  // optional int32 nSaleVolume4 = 40;
  if (has_nsalevolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->nsalevolume4(), output);
  }

  // optional double dbBuyPrice4 = 41;
  if (has_dbbuyprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->dbbuyprice4(), output);
  }

  // optional int32 nBuyVolume4 = 42;
  if (has_nbuyvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->nbuyvolume4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.KCBPTagQuoteInfo5)
}

::google::protobuf::uint8* KCBPTagQuoteInfo5::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.KCBPTagQuoteInfo5)
  // optional int32 cMarket = 1;
  if (has_cmarket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmarket(), target);
  }

  // optional string szStkcode = 2;
  if (has_szstkcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkcode().data(), this->szstkcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo5.szStkcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szstkcode(), target);
  }

  // optional string szStkname = 3;
  if (has_szstkname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstkname().data(), this->szstkname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.KCBPTagQuoteInfo5.szStkname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szstkname(), target);
  }

  // optional int32 cProductClass = 4;
  if (has_cproductclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cproductclass(), target);
  }

  // optional int32 nTradingDay = 5;
  if (has_ntradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ntradingday(), target);
  }

  // optional int32 nPreOpenInterest = 6;
  if (has_npreopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->npreopeninterest(), target);
  }

  // optional double dbPreSettPrice = 7;
  if (has_dbpresettprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dbpresettprice(), target);
  }

  // optional double dbOpenPrice = 8;
  if (has_dbopenprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->dbopenprice(), target);
  }

  // optional double dbUpperLimitPrice = 9;
  if (has_dbupperlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->dbupperlimitprice(), target);
  }

  // optional double dbLowerLimitPrice = 10;
  if (has_dblowerlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->dblowerlimitprice(), target);
  }

  // optional double dbSettPrice = 11;
  if (has_dbsettprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dbsettprice(), target);
  }

  // optional double dbClosePrice = 12;
  if (has_dbcloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dbcloseprice(), target);
  }

  // optional int32 cTpbz = 13;
  if (has_ctpbz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ctpbz(), target);
  }

  // optional int32 nUpdateMillisec = 14;
  if (has_nupdatemillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nupdatemillisec(), target);
  }

  // optional int32 nUpdateTime = 15;
  if (has_nupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->nupdatetime(), target);
  }

  // optional int32 nOpenInterest = 16;
  if (has_nopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->nopeninterest(), target);
  }

  // optional double dbMatchQty = 17;
  if (has_dbmatchqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->dbmatchqty(), target);
  }

  // optional double dbMatchAmt = 18;
  if (has_dbmatchamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->dbmatchamt(), target);
  }

  // optional double dbLastPrice = 19;
  if (has_dblastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->dblastprice(), target);
  }

  // optional double dbAvgPrice = 20;
  if (has_dbavgprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->dbavgprice(), target);
  }

  // optional double dbHighPrice = 21;
  if (has_dbhighprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->dbhighprice(), target);
  }

  // optional double dbLowPrice = 22;
  if (has_dblowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->dblowprice(), target);
  }

  // optional double dbSalePrice0 = 23;
  if (has_dbsaleprice0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->dbsaleprice0(), target);
  }

  // optional int32 nSaleVolume0 = 24;
  if (has_nsalevolume0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nsalevolume0(), target);
  }

  // optional double dbBuyPrice0 = 25;
  if (has_dbbuyprice0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->dbbuyprice0(), target);
  }

  // optional int32 nBuyVolume0 = 26;
  if (has_nbuyvolume0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->nbuyvolume0(), target);
  }

  // optional double dbSalePrice1 = 27;
  if (has_dbsaleprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->dbsaleprice1(), target);
  }

  // optional int32 nSaleVolume1 = 28;
  if (has_nsalevolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nsalevolume1(), target);
  }

  // optional double dbBuyPrice1 = 29;
  if (has_dbbuyprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->dbbuyprice1(), target);
  }

  // optional int32 nBuyVolume1 = 30;
  if (has_nbuyvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->nbuyvolume1(), target);
  }

  // optional double dbSalePrice2 = 31;
  if (has_dbsaleprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->dbsaleprice2(), target);
  }

  // optional int32 nSaleVolume2 = 32;
  if (has_nsalevolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->nsalevolume2(), target);
  }

  // optional double dbBuyPrice2 = 33;
  if (has_dbbuyprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->dbbuyprice2(), target);
  }

  // optional int32 nBuyVolume2 = 34;
  if (has_nbuyvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->nbuyvolume2(), target);
  }

  // optional double dbSalePrice3 = 35;
  if (has_dbsaleprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->dbsaleprice3(), target);
  }

  // optional int32 nSaleVolume3 = 36;
  if (has_nsalevolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->nsalevolume3(), target);
  }

  // optional double dbBuyPrice3 = 37;
  if (has_dbbuyprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->dbbuyprice3(), target);
  }

  // optional int32 nBuyVolume3 = 38;
  if (has_nbuyvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->nbuyvolume3(), target);
  }

  // optional double dbSalePrice4 = 39;
  if (has_dbsaleprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->dbsaleprice4(), target);
  }

  // optional int32 nSaleVolume4 = 40;
  if (has_nsalevolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->nsalevolume4(), target);
  }

  // optional double dbBuyPrice4 = 41;
  if (has_dbbuyprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->dbbuyprice4(), target);
  }

  // optional int32 nBuyVolume4 = 42;
  if (has_nbuyvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->nbuyvolume4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.KCBPTagQuoteInfo5)
  return target;
}

int KCBPTagQuoteInfo5::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.KCBPTagQuoteInfo5)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 cMarket = 1;
    if (has_cmarket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmarket());
    }

    // optional string szStkcode = 2;
    if (has_szstkcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szstkcode());
    }

    // optional string szStkname = 3;
    if (has_szstkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szstkname());
    }

    // optional int32 cProductClass = 4;
    if (has_cproductclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cproductclass());
    }

    // optional int32 nTradingDay = 5;
    if (has_ntradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntradingday());
    }

    // optional int32 nPreOpenInterest = 6;
    if (has_npreopeninterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npreopeninterest());
    }

    // optional double dbPreSettPrice = 7;
    if (has_dbpresettprice()) {
      total_size += 1 + 8;
    }

    // optional double dbOpenPrice = 8;
    if (has_dbopenprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double dbUpperLimitPrice = 9;
    if (has_dbupperlimitprice()) {
      total_size += 1 + 8;
    }

    // optional double dbLowerLimitPrice = 10;
    if (has_dblowerlimitprice()) {
      total_size += 1 + 8;
    }

    // optional double dbSettPrice = 11;
    if (has_dbsettprice()) {
      total_size += 1 + 8;
    }

    // optional double dbClosePrice = 12;
    if (has_dbcloseprice()) {
      total_size += 1 + 8;
    }

    // optional int32 cTpbz = 13;
    if (has_ctpbz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctpbz());
    }

    // optional int32 nUpdateMillisec = 14;
    if (has_nupdatemillisec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nupdatemillisec());
    }

    // optional int32 nUpdateTime = 15;
    if (has_nupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nupdatetime());
    }

    // optional int32 nOpenInterest = 16;
    if (has_nopeninterest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nopeninterest());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double dbMatchQty = 17;
    if (has_dbmatchqty()) {
      total_size += 2 + 8;
    }

    // optional double dbMatchAmt = 18;
    if (has_dbmatchamt()) {
      total_size += 2 + 8;
    }

    // optional double dbLastPrice = 19;
    if (has_dblastprice()) {
      total_size += 2 + 8;
    }

    // optional double dbAvgPrice = 20;
    if (has_dbavgprice()) {
      total_size += 2 + 8;
    }

    // optional double dbHighPrice = 21;
    if (has_dbhighprice()) {
      total_size += 2 + 8;
    }

    // optional double dbLowPrice = 22;
    if (has_dblowprice()) {
      total_size += 2 + 8;
    }

    // optional double dbSalePrice0 = 23;
    if (has_dbsaleprice0()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume0 = 24;
    if (has_nsalevolume0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume0());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double dbBuyPrice0 = 25;
    if (has_dbbuyprice0()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume0 = 26;
    if (has_nbuyvolume0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume0());
    }

    // optional double dbSalePrice1 = 27;
    if (has_dbsaleprice1()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume1 = 28;
    if (has_nsalevolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume1());
    }

    // optional double dbBuyPrice1 = 29;
    if (has_dbbuyprice1()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume1 = 30;
    if (has_nbuyvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume1());
    }

    // optional double dbSalePrice2 = 31;
    if (has_dbsaleprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume2 = 32;
    if (has_nsalevolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume2());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional double dbBuyPrice2 = 33;
    if (has_dbbuyprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume2 = 34;
    if (has_nbuyvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume2());
    }

    // optional double dbSalePrice3 = 35;
    if (has_dbsaleprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume3 = 36;
    if (has_nsalevolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume3());
    }

    // optional double dbBuyPrice3 = 37;
    if (has_dbbuyprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume3 = 38;
    if (has_nbuyvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume3());
    }

    // optional double dbSalePrice4 = 39;
    if (has_dbsaleprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 nSaleVolume4 = 40;
    if (has_nsalevolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsalevolume4());
    }

  }
  if (_has_bits_[40 / 32] & 768u) {
    // optional double dbBuyPrice4 = 41;
    if (has_dbbuyprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 nBuyVolume4 = 42;
    if (has_nbuyvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbuyvolume4());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KCBPTagQuoteInfo5::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.KCBPTagQuoteInfo5)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KCBPTagQuoteInfo5* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KCBPTagQuoteInfo5>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.KCBPTagQuoteInfo5)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.KCBPTagQuoteInfo5)
    MergeFrom(*source);
  }
}

void KCBPTagQuoteInfo5::MergeFrom(const KCBPTagQuoteInfo5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.KCBPTagQuoteInfo5)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmarket()) {
      set_cmarket(from.cmarket());
    }
    if (from.has_szstkcode()) {
      set_has_szstkcode();
      szstkcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szstkcode_);
    }
    if (from.has_szstkname()) {
      set_has_szstkname();
      szstkname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szstkname_);
    }
    if (from.has_cproductclass()) {
      set_cproductclass(from.cproductclass());
    }
    if (from.has_ntradingday()) {
      set_ntradingday(from.ntradingday());
    }
    if (from.has_npreopeninterest()) {
      set_npreopeninterest(from.npreopeninterest());
    }
    if (from.has_dbpresettprice()) {
      set_dbpresettprice(from.dbpresettprice());
    }
    if (from.has_dbopenprice()) {
      set_dbopenprice(from.dbopenprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dbupperlimitprice()) {
      set_dbupperlimitprice(from.dbupperlimitprice());
    }
    if (from.has_dblowerlimitprice()) {
      set_dblowerlimitprice(from.dblowerlimitprice());
    }
    if (from.has_dbsettprice()) {
      set_dbsettprice(from.dbsettprice());
    }
    if (from.has_dbcloseprice()) {
      set_dbcloseprice(from.dbcloseprice());
    }
    if (from.has_ctpbz()) {
      set_ctpbz(from.ctpbz());
    }
    if (from.has_nupdatemillisec()) {
      set_nupdatemillisec(from.nupdatemillisec());
    }
    if (from.has_nupdatetime()) {
      set_nupdatetime(from.nupdatetime());
    }
    if (from.has_nopeninterest()) {
      set_nopeninterest(from.nopeninterest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dbmatchqty()) {
      set_dbmatchqty(from.dbmatchqty());
    }
    if (from.has_dbmatchamt()) {
      set_dbmatchamt(from.dbmatchamt());
    }
    if (from.has_dblastprice()) {
      set_dblastprice(from.dblastprice());
    }
    if (from.has_dbavgprice()) {
      set_dbavgprice(from.dbavgprice());
    }
    if (from.has_dbhighprice()) {
      set_dbhighprice(from.dbhighprice());
    }
    if (from.has_dblowprice()) {
      set_dblowprice(from.dblowprice());
    }
    if (from.has_dbsaleprice0()) {
      set_dbsaleprice0(from.dbsaleprice0());
    }
    if (from.has_nsalevolume0()) {
      set_nsalevolume0(from.nsalevolume0());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dbbuyprice0()) {
      set_dbbuyprice0(from.dbbuyprice0());
    }
    if (from.has_nbuyvolume0()) {
      set_nbuyvolume0(from.nbuyvolume0());
    }
    if (from.has_dbsaleprice1()) {
      set_dbsaleprice1(from.dbsaleprice1());
    }
    if (from.has_nsalevolume1()) {
      set_nsalevolume1(from.nsalevolume1());
    }
    if (from.has_dbbuyprice1()) {
      set_dbbuyprice1(from.dbbuyprice1());
    }
    if (from.has_nbuyvolume1()) {
      set_nbuyvolume1(from.nbuyvolume1());
    }
    if (from.has_dbsaleprice2()) {
      set_dbsaleprice2(from.dbsaleprice2());
    }
    if (from.has_nsalevolume2()) {
      set_nsalevolume2(from.nsalevolume2());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_dbbuyprice2()) {
      set_dbbuyprice2(from.dbbuyprice2());
    }
    if (from.has_nbuyvolume2()) {
      set_nbuyvolume2(from.nbuyvolume2());
    }
    if (from.has_dbsaleprice3()) {
      set_dbsaleprice3(from.dbsaleprice3());
    }
    if (from.has_nsalevolume3()) {
      set_nsalevolume3(from.nsalevolume3());
    }
    if (from.has_dbbuyprice3()) {
      set_dbbuyprice3(from.dbbuyprice3());
    }
    if (from.has_nbuyvolume3()) {
      set_nbuyvolume3(from.nbuyvolume3());
    }
    if (from.has_dbsaleprice4()) {
      set_dbsaleprice4(from.dbsaleprice4());
    }
    if (from.has_nsalevolume4()) {
      set_nsalevolume4(from.nsalevolume4());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_dbbuyprice4()) {
      set_dbbuyprice4(from.dbbuyprice4());
    }
    if (from.has_nbuyvolume4()) {
      set_nbuyvolume4(from.nbuyvolume4());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KCBPTagQuoteInfo5::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.KCBPTagQuoteInfo5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KCBPTagQuoteInfo5::CopyFrom(const KCBPTagQuoteInfo5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.KCBPTagQuoteInfo5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KCBPTagQuoteInfo5::IsInitialized() const {

  return true;
}

void KCBPTagQuoteInfo5::Swap(KCBPTagQuoteInfo5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KCBPTagQuoteInfo5::InternalSwap(KCBPTagQuoteInfo5* other) {
  std::swap(cmarket_, other->cmarket_);
  szstkcode_.Swap(&other->szstkcode_);
  szstkname_.Swap(&other->szstkname_);
  std::swap(cproductclass_, other->cproductclass_);
  std::swap(ntradingday_, other->ntradingday_);
  std::swap(npreopeninterest_, other->npreopeninterest_);
  std::swap(dbpresettprice_, other->dbpresettprice_);
  std::swap(dbopenprice_, other->dbopenprice_);
  std::swap(dbupperlimitprice_, other->dbupperlimitprice_);
  std::swap(dblowerlimitprice_, other->dblowerlimitprice_);
  std::swap(dbsettprice_, other->dbsettprice_);
  std::swap(dbcloseprice_, other->dbcloseprice_);
  std::swap(ctpbz_, other->ctpbz_);
  std::swap(nupdatemillisec_, other->nupdatemillisec_);
  std::swap(nupdatetime_, other->nupdatetime_);
  std::swap(nopeninterest_, other->nopeninterest_);
  std::swap(dbmatchqty_, other->dbmatchqty_);
  std::swap(dbmatchamt_, other->dbmatchamt_);
  std::swap(dblastprice_, other->dblastprice_);
  std::swap(dbavgprice_, other->dbavgprice_);
  std::swap(dbhighprice_, other->dbhighprice_);
  std::swap(dblowprice_, other->dblowprice_);
  std::swap(dbsaleprice0_, other->dbsaleprice0_);
  std::swap(nsalevolume0_, other->nsalevolume0_);
  std::swap(dbbuyprice0_, other->dbbuyprice0_);
  std::swap(nbuyvolume0_, other->nbuyvolume0_);
  std::swap(dbsaleprice1_, other->dbsaleprice1_);
  std::swap(nsalevolume1_, other->nsalevolume1_);
  std::swap(dbbuyprice1_, other->dbbuyprice1_);
  std::swap(nbuyvolume1_, other->nbuyvolume1_);
  std::swap(dbsaleprice2_, other->dbsaleprice2_);
  std::swap(nsalevolume2_, other->nsalevolume2_);
  std::swap(dbbuyprice2_, other->dbbuyprice2_);
  std::swap(nbuyvolume2_, other->nbuyvolume2_);
  std::swap(dbsaleprice3_, other->dbsaleprice3_);
  std::swap(nsalevolume3_, other->nsalevolume3_);
  std::swap(dbbuyprice3_, other->dbbuyprice3_);
  std::swap(nbuyvolume3_, other->nbuyvolume3_);
  std::swap(dbsaleprice4_, other->dbsaleprice4_);
  std::swap(nsalevolume4_, other->nsalevolume4_);
  std::swap(dbbuyprice4_, other->dbbuyprice4_);
  std::swap(nbuyvolume4_, other->nbuyvolume4_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KCBPTagQuoteInfo5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KCBPTagQuoteInfo5_descriptor_;
  metadata.reflection = KCBPTagQuoteInfo5_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KCBPTagQuoteInfo5

// optional int32 cMarket = 1;
bool KCBPTagQuoteInfo5::has_cmarket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KCBPTagQuoteInfo5::set_has_cmarket() {
  _has_bits_[0] |= 0x00000001u;
}
void KCBPTagQuoteInfo5::clear_has_cmarket() {
  _has_bits_[0] &= ~0x00000001u;
}
void KCBPTagQuoteInfo5::clear_cmarket() {
  cmarket_ = 0;
  clear_has_cmarket();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::cmarket() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.cMarket)
  return cmarket_;
}
 void KCBPTagQuoteInfo5::set_cmarket(::google::protobuf::int32 value) {
  set_has_cmarket();
  cmarket_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.cMarket)
}

// optional string szStkcode = 2;
bool KCBPTagQuoteInfo5::has_szstkcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KCBPTagQuoteInfo5::set_has_szstkcode() {
  _has_bits_[0] |= 0x00000002u;
}
void KCBPTagQuoteInfo5::clear_has_szstkcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void KCBPTagQuoteInfo5::clear_szstkcode() {
  szstkcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szstkcode();
}
 const ::std::string& KCBPTagQuoteInfo5::szstkcode() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.szStkcode)
  return szstkcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo5::set_szstkcode(const ::std::string& value) {
  set_has_szstkcode();
  szstkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.szStkcode)
}
 void KCBPTagQuoteInfo5::set_szstkcode(const char* value) {
  set_has_szstkcode();
  szstkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.KCBPTagQuoteInfo5.szStkcode)
}
 void KCBPTagQuoteInfo5::set_szstkcode(const char* value, size_t size) {
  set_has_szstkcode();
  szstkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.KCBPTagQuoteInfo5.szStkcode)
}
 ::std::string* KCBPTagQuoteInfo5::mutable_szstkcode() {
  set_has_szstkcode();
  // @@protoc_insertion_point(field_mutable:XT.KCBPTagQuoteInfo5.szStkcode)
  return szstkcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KCBPTagQuoteInfo5::release_szstkcode() {
  // @@protoc_insertion_point(field_release:XT.KCBPTagQuoteInfo5.szStkcode)
  clear_has_szstkcode();
  return szstkcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo5::set_allocated_szstkcode(::std::string* szstkcode) {
  if (szstkcode != NULL) {
    set_has_szstkcode();
  } else {
    clear_has_szstkcode();
  }
  szstkcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szstkcode);
  // @@protoc_insertion_point(field_set_allocated:XT.KCBPTagQuoteInfo5.szStkcode)
}

// optional string szStkname = 3;
bool KCBPTagQuoteInfo5::has_szstkname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KCBPTagQuoteInfo5::set_has_szstkname() {
  _has_bits_[0] |= 0x00000004u;
}
void KCBPTagQuoteInfo5::clear_has_szstkname() {
  _has_bits_[0] &= ~0x00000004u;
}
void KCBPTagQuoteInfo5::clear_szstkname() {
  szstkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szstkname();
}
 const ::std::string& KCBPTagQuoteInfo5::szstkname() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.szStkname)
  return szstkname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo5::set_szstkname(const ::std::string& value) {
  set_has_szstkname();
  szstkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.szStkname)
}
 void KCBPTagQuoteInfo5::set_szstkname(const char* value) {
  set_has_szstkname();
  szstkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.KCBPTagQuoteInfo5.szStkname)
}
 void KCBPTagQuoteInfo5::set_szstkname(const char* value, size_t size) {
  set_has_szstkname();
  szstkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.KCBPTagQuoteInfo5.szStkname)
}
 ::std::string* KCBPTagQuoteInfo5::mutable_szstkname() {
  set_has_szstkname();
  // @@protoc_insertion_point(field_mutable:XT.KCBPTagQuoteInfo5.szStkname)
  return szstkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KCBPTagQuoteInfo5::release_szstkname() {
  // @@protoc_insertion_point(field_release:XT.KCBPTagQuoteInfo5.szStkname)
  clear_has_szstkname();
  return szstkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KCBPTagQuoteInfo5::set_allocated_szstkname(::std::string* szstkname) {
  if (szstkname != NULL) {
    set_has_szstkname();
  } else {
    clear_has_szstkname();
  }
  szstkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szstkname);
  // @@protoc_insertion_point(field_set_allocated:XT.KCBPTagQuoteInfo5.szStkname)
}

// optional int32 cProductClass = 4;
bool KCBPTagQuoteInfo5::has_cproductclass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KCBPTagQuoteInfo5::set_has_cproductclass() {
  _has_bits_[0] |= 0x00000008u;
}
void KCBPTagQuoteInfo5::clear_has_cproductclass() {
  _has_bits_[0] &= ~0x00000008u;
}
void KCBPTagQuoteInfo5::clear_cproductclass() {
  cproductclass_ = 0;
  clear_has_cproductclass();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::cproductclass() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.cProductClass)
  return cproductclass_;
}
 void KCBPTagQuoteInfo5::set_cproductclass(::google::protobuf::int32 value) {
  set_has_cproductclass();
  cproductclass_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.cProductClass)
}

// optional int32 nTradingDay = 5;
bool KCBPTagQuoteInfo5::has_ntradingday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KCBPTagQuoteInfo5::set_has_ntradingday() {
  _has_bits_[0] |= 0x00000010u;
}
void KCBPTagQuoteInfo5::clear_has_ntradingday() {
  _has_bits_[0] &= ~0x00000010u;
}
void KCBPTagQuoteInfo5::clear_ntradingday() {
  ntradingday_ = 0;
  clear_has_ntradingday();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::ntradingday() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nTradingDay)
  return ntradingday_;
}
 void KCBPTagQuoteInfo5::set_ntradingday(::google::protobuf::int32 value) {
  set_has_ntradingday();
  ntradingday_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nTradingDay)
}

// optional int32 nPreOpenInterest = 6;
bool KCBPTagQuoteInfo5::has_npreopeninterest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KCBPTagQuoteInfo5::set_has_npreopeninterest() {
  _has_bits_[0] |= 0x00000020u;
}
void KCBPTagQuoteInfo5::clear_has_npreopeninterest() {
  _has_bits_[0] &= ~0x00000020u;
}
void KCBPTagQuoteInfo5::clear_npreopeninterest() {
  npreopeninterest_ = 0;
  clear_has_npreopeninterest();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::npreopeninterest() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nPreOpenInterest)
  return npreopeninterest_;
}
 void KCBPTagQuoteInfo5::set_npreopeninterest(::google::protobuf::int32 value) {
  set_has_npreopeninterest();
  npreopeninterest_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nPreOpenInterest)
}

// optional double dbPreSettPrice = 7;
bool KCBPTagQuoteInfo5::has_dbpresettprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbpresettprice() {
  _has_bits_[0] |= 0x00000040u;
}
void KCBPTagQuoteInfo5::clear_has_dbpresettprice() {
  _has_bits_[0] &= ~0x00000040u;
}
void KCBPTagQuoteInfo5::clear_dbpresettprice() {
  dbpresettprice_ = 0;
  clear_has_dbpresettprice();
}
 double KCBPTagQuoteInfo5::dbpresettprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbPreSettPrice)
  return dbpresettprice_;
}
 void KCBPTagQuoteInfo5::set_dbpresettprice(double value) {
  set_has_dbpresettprice();
  dbpresettprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbPreSettPrice)
}

// optional double dbOpenPrice = 8;
bool KCBPTagQuoteInfo5::has_dbopenprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbopenprice() {
  _has_bits_[0] |= 0x00000080u;
}
void KCBPTagQuoteInfo5::clear_has_dbopenprice() {
  _has_bits_[0] &= ~0x00000080u;
}
void KCBPTagQuoteInfo5::clear_dbopenprice() {
  dbopenprice_ = 0;
  clear_has_dbopenprice();
}
 double KCBPTagQuoteInfo5::dbopenprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbOpenPrice)
  return dbopenprice_;
}
 void KCBPTagQuoteInfo5::set_dbopenprice(double value) {
  set_has_dbopenprice();
  dbopenprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbOpenPrice)
}

// optional double dbUpperLimitPrice = 9;
bool KCBPTagQuoteInfo5::has_dbupperlimitprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbupperlimitprice() {
  _has_bits_[0] |= 0x00000100u;
}
void KCBPTagQuoteInfo5::clear_has_dbupperlimitprice() {
  _has_bits_[0] &= ~0x00000100u;
}
void KCBPTagQuoteInfo5::clear_dbupperlimitprice() {
  dbupperlimitprice_ = 0;
  clear_has_dbupperlimitprice();
}
 double KCBPTagQuoteInfo5::dbupperlimitprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbUpperLimitPrice)
  return dbupperlimitprice_;
}
 void KCBPTagQuoteInfo5::set_dbupperlimitprice(double value) {
  set_has_dbupperlimitprice();
  dbupperlimitprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbUpperLimitPrice)
}

// optional double dbLowerLimitPrice = 10;
bool KCBPTagQuoteInfo5::has_dblowerlimitprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dblowerlimitprice() {
  _has_bits_[0] |= 0x00000200u;
}
void KCBPTagQuoteInfo5::clear_has_dblowerlimitprice() {
  _has_bits_[0] &= ~0x00000200u;
}
void KCBPTagQuoteInfo5::clear_dblowerlimitprice() {
  dblowerlimitprice_ = 0;
  clear_has_dblowerlimitprice();
}
 double KCBPTagQuoteInfo5::dblowerlimitprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbLowerLimitPrice)
  return dblowerlimitprice_;
}
 void KCBPTagQuoteInfo5::set_dblowerlimitprice(double value) {
  set_has_dblowerlimitprice();
  dblowerlimitprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbLowerLimitPrice)
}

// optional double dbSettPrice = 11;
bool KCBPTagQuoteInfo5::has_dbsettprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbsettprice() {
  _has_bits_[0] |= 0x00000400u;
}
void KCBPTagQuoteInfo5::clear_has_dbsettprice() {
  _has_bits_[0] &= ~0x00000400u;
}
void KCBPTagQuoteInfo5::clear_dbsettprice() {
  dbsettprice_ = 0;
  clear_has_dbsettprice();
}
 double KCBPTagQuoteInfo5::dbsettprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbSettPrice)
  return dbsettprice_;
}
 void KCBPTagQuoteInfo5::set_dbsettprice(double value) {
  set_has_dbsettprice();
  dbsettprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbSettPrice)
}

// optional double dbClosePrice = 12;
bool KCBPTagQuoteInfo5::has_dbcloseprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbcloseprice() {
  _has_bits_[0] |= 0x00000800u;
}
void KCBPTagQuoteInfo5::clear_has_dbcloseprice() {
  _has_bits_[0] &= ~0x00000800u;
}
void KCBPTagQuoteInfo5::clear_dbcloseprice() {
  dbcloseprice_ = 0;
  clear_has_dbcloseprice();
}
 double KCBPTagQuoteInfo5::dbcloseprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbClosePrice)
  return dbcloseprice_;
}
 void KCBPTagQuoteInfo5::set_dbcloseprice(double value) {
  set_has_dbcloseprice();
  dbcloseprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbClosePrice)
}

// optional int32 cTpbz = 13;
bool KCBPTagQuoteInfo5::has_ctpbz() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_ctpbz() {
  _has_bits_[0] |= 0x00001000u;
}
void KCBPTagQuoteInfo5::clear_has_ctpbz() {
  _has_bits_[0] &= ~0x00001000u;
}
void KCBPTagQuoteInfo5::clear_ctpbz() {
  ctpbz_ = 0;
  clear_has_ctpbz();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::ctpbz() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.cTpbz)
  return ctpbz_;
}
 void KCBPTagQuoteInfo5::set_ctpbz(::google::protobuf::int32 value) {
  set_has_ctpbz();
  ctpbz_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.cTpbz)
}

// optional int32 nUpdateMillisec = 14;
bool KCBPTagQuoteInfo5::has_nupdatemillisec() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nupdatemillisec() {
  _has_bits_[0] |= 0x00002000u;
}
void KCBPTagQuoteInfo5::clear_has_nupdatemillisec() {
  _has_bits_[0] &= ~0x00002000u;
}
void KCBPTagQuoteInfo5::clear_nupdatemillisec() {
  nupdatemillisec_ = 0;
  clear_has_nupdatemillisec();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nupdatemillisec() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nUpdateMillisec)
  return nupdatemillisec_;
}
 void KCBPTagQuoteInfo5::set_nupdatemillisec(::google::protobuf::int32 value) {
  set_has_nupdatemillisec();
  nupdatemillisec_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nUpdateMillisec)
}

// optional int32 nUpdateTime = 15;
bool KCBPTagQuoteInfo5::has_nupdatetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nupdatetime() {
  _has_bits_[0] |= 0x00004000u;
}
void KCBPTagQuoteInfo5::clear_has_nupdatetime() {
  _has_bits_[0] &= ~0x00004000u;
}
void KCBPTagQuoteInfo5::clear_nupdatetime() {
  nupdatetime_ = 0;
  clear_has_nupdatetime();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nupdatetime() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nUpdateTime)
  return nupdatetime_;
}
 void KCBPTagQuoteInfo5::set_nupdatetime(::google::protobuf::int32 value) {
  set_has_nupdatetime();
  nupdatetime_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nUpdateTime)
}

// optional int32 nOpenInterest = 16;
bool KCBPTagQuoteInfo5::has_nopeninterest() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nopeninterest() {
  _has_bits_[0] |= 0x00008000u;
}
void KCBPTagQuoteInfo5::clear_has_nopeninterest() {
  _has_bits_[0] &= ~0x00008000u;
}
void KCBPTagQuoteInfo5::clear_nopeninterest() {
  nopeninterest_ = 0;
  clear_has_nopeninterest();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nopeninterest() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nOpenInterest)
  return nopeninterest_;
}
 void KCBPTagQuoteInfo5::set_nopeninterest(::google::protobuf::int32 value) {
  set_has_nopeninterest();
  nopeninterest_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nOpenInterest)
}

// optional double dbMatchQty = 17;
bool KCBPTagQuoteInfo5::has_dbmatchqty() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbmatchqty() {
  _has_bits_[0] |= 0x00010000u;
}
void KCBPTagQuoteInfo5::clear_has_dbmatchqty() {
  _has_bits_[0] &= ~0x00010000u;
}
void KCBPTagQuoteInfo5::clear_dbmatchqty() {
  dbmatchqty_ = 0;
  clear_has_dbmatchqty();
}
 double KCBPTagQuoteInfo5::dbmatchqty() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbMatchQty)
  return dbmatchqty_;
}
 void KCBPTagQuoteInfo5::set_dbmatchqty(double value) {
  set_has_dbmatchqty();
  dbmatchqty_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbMatchQty)
}

// optional double dbMatchAmt = 18;
bool KCBPTagQuoteInfo5::has_dbmatchamt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbmatchamt() {
  _has_bits_[0] |= 0x00020000u;
}
void KCBPTagQuoteInfo5::clear_has_dbmatchamt() {
  _has_bits_[0] &= ~0x00020000u;
}
void KCBPTagQuoteInfo5::clear_dbmatchamt() {
  dbmatchamt_ = 0;
  clear_has_dbmatchamt();
}
 double KCBPTagQuoteInfo5::dbmatchamt() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbMatchAmt)
  return dbmatchamt_;
}
 void KCBPTagQuoteInfo5::set_dbmatchamt(double value) {
  set_has_dbmatchamt();
  dbmatchamt_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbMatchAmt)
}

// optional double dbLastPrice = 19;
bool KCBPTagQuoteInfo5::has_dblastprice() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dblastprice() {
  _has_bits_[0] |= 0x00040000u;
}
void KCBPTagQuoteInfo5::clear_has_dblastprice() {
  _has_bits_[0] &= ~0x00040000u;
}
void KCBPTagQuoteInfo5::clear_dblastprice() {
  dblastprice_ = 0;
  clear_has_dblastprice();
}
 double KCBPTagQuoteInfo5::dblastprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbLastPrice)
  return dblastprice_;
}
 void KCBPTagQuoteInfo5::set_dblastprice(double value) {
  set_has_dblastprice();
  dblastprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbLastPrice)
}

// optional double dbAvgPrice = 20;
bool KCBPTagQuoteInfo5::has_dbavgprice() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbavgprice() {
  _has_bits_[0] |= 0x00080000u;
}
void KCBPTagQuoteInfo5::clear_has_dbavgprice() {
  _has_bits_[0] &= ~0x00080000u;
}
void KCBPTagQuoteInfo5::clear_dbavgprice() {
  dbavgprice_ = 0;
  clear_has_dbavgprice();
}
 double KCBPTagQuoteInfo5::dbavgprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbAvgPrice)
  return dbavgprice_;
}
 void KCBPTagQuoteInfo5::set_dbavgprice(double value) {
  set_has_dbavgprice();
  dbavgprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbAvgPrice)
}

// optional double dbHighPrice = 21;
bool KCBPTagQuoteInfo5::has_dbhighprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbhighprice() {
  _has_bits_[0] |= 0x00100000u;
}
void KCBPTagQuoteInfo5::clear_has_dbhighprice() {
  _has_bits_[0] &= ~0x00100000u;
}
void KCBPTagQuoteInfo5::clear_dbhighprice() {
  dbhighprice_ = 0;
  clear_has_dbhighprice();
}
 double KCBPTagQuoteInfo5::dbhighprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbHighPrice)
  return dbhighprice_;
}
 void KCBPTagQuoteInfo5::set_dbhighprice(double value) {
  set_has_dbhighprice();
  dbhighprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbHighPrice)
}

// optional double dbLowPrice = 22;
bool KCBPTagQuoteInfo5::has_dblowprice() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dblowprice() {
  _has_bits_[0] |= 0x00200000u;
}
void KCBPTagQuoteInfo5::clear_has_dblowprice() {
  _has_bits_[0] &= ~0x00200000u;
}
void KCBPTagQuoteInfo5::clear_dblowprice() {
  dblowprice_ = 0;
  clear_has_dblowprice();
}
 double KCBPTagQuoteInfo5::dblowprice() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbLowPrice)
  return dblowprice_;
}
 void KCBPTagQuoteInfo5::set_dblowprice(double value) {
  set_has_dblowprice();
  dblowprice_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbLowPrice)
}

// optional double dbSalePrice0 = 23;
bool KCBPTagQuoteInfo5::has_dbsaleprice0() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbsaleprice0() {
  _has_bits_[0] |= 0x00400000u;
}
void KCBPTagQuoteInfo5::clear_has_dbsaleprice0() {
  _has_bits_[0] &= ~0x00400000u;
}
void KCBPTagQuoteInfo5::clear_dbsaleprice0() {
  dbsaleprice0_ = 0;
  clear_has_dbsaleprice0();
}
 double KCBPTagQuoteInfo5::dbsaleprice0() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbSalePrice0)
  return dbsaleprice0_;
}
 void KCBPTagQuoteInfo5::set_dbsaleprice0(double value) {
  set_has_dbsaleprice0();
  dbsaleprice0_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbSalePrice0)
}

// optional int32 nSaleVolume0 = 24;
bool KCBPTagQuoteInfo5::has_nsalevolume0() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nsalevolume0() {
  _has_bits_[0] |= 0x00800000u;
}
void KCBPTagQuoteInfo5::clear_has_nsalevolume0() {
  _has_bits_[0] &= ~0x00800000u;
}
void KCBPTagQuoteInfo5::clear_nsalevolume0() {
  nsalevolume0_ = 0;
  clear_has_nsalevolume0();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nsalevolume0() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nSaleVolume0)
  return nsalevolume0_;
}
 void KCBPTagQuoteInfo5::set_nsalevolume0(::google::protobuf::int32 value) {
  set_has_nsalevolume0();
  nsalevolume0_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nSaleVolume0)
}

// optional double dbBuyPrice0 = 25;
bool KCBPTagQuoteInfo5::has_dbbuyprice0() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbbuyprice0() {
  _has_bits_[0] |= 0x01000000u;
}
void KCBPTagQuoteInfo5::clear_has_dbbuyprice0() {
  _has_bits_[0] &= ~0x01000000u;
}
void KCBPTagQuoteInfo5::clear_dbbuyprice0() {
  dbbuyprice0_ = 0;
  clear_has_dbbuyprice0();
}
 double KCBPTagQuoteInfo5::dbbuyprice0() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbBuyPrice0)
  return dbbuyprice0_;
}
 void KCBPTagQuoteInfo5::set_dbbuyprice0(double value) {
  set_has_dbbuyprice0();
  dbbuyprice0_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbBuyPrice0)
}

// optional int32 nBuyVolume0 = 26;
bool KCBPTagQuoteInfo5::has_nbuyvolume0() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nbuyvolume0() {
  _has_bits_[0] |= 0x02000000u;
}
void KCBPTagQuoteInfo5::clear_has_nbuyvolume0() {
  _has_bits_[0] &= ~0x02000000u;
}
void KCBPTagQuoteInfo5::clear_nbuyvolume0() {
  nbuyvolume0_ = 0;
  clear_has_nbuyvolume0();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nbuyvolume0() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nBuyVolume0)
  return nbuyvolume0_;
}
 void KCBPTagQuoteInfo5::set_nbuyvolume0(::google::protobuf::int32 value) {
  set_has_nbuyvolume0();
  nbuyvolume0_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nBuyVolume0)
}

// optional double dbSalePrice1 = 27;
bool KCBPTagQuoteInfo5::has_dbsaleprice1() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbsaleprice1() {
  _has_bits_[0] |= 0x04000000u;
}
void KCBPTagQuoteInfo5::clear_has_dbsaleprice1() {
  _has_bits_[0] &= ~0x04000000u;
}
void KCBPTagQuoteInfo5::clear_dbsaleprice1() {
  dbsaleprice1_ = 0;
  clear_has_dbsaleprice1();
}
 double KCBPTagQuoteInfo5::dbsaleprice1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbSalePrice1)
  return dbsaleprice1_;
}
 void KCBPTagQuoteInfo5::set_dbsaleprice1(double value) {
  set_has_dbsaleprice1();
  dbsaleprice1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbSalePrice1)
}

// optional int32 nSaleVolume1 = 28;
bool KCBPTagQuoteInfo5::has_nsalevolume1() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nsalevolume1() {
  _has_bits_[0] |= 0x08000000u;
}
void KCBPTagQuoteInfo5::clear_has_nsalevolume1() {
  _has_bits_[0] &= ~0x08000000u;
}
void KCBPTagQuoteInfo5::clear_nsalevolume1() {
  nsalevolume1_ = 0;
  clear_has_nsalevolume1();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nsalevolume1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nSaleVolume1)
  return nsalevolume1_;
}
 void KCBPTagQuoteInfo5::set_nsalevolume1(::google::protobuf::int32 value) {
  set_has_nsalevolume1();
  nsalevolume1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nSaleVolume1)
}

// optional double dbBuyPrice1 = 29;
bool KCBPTagQuoteInfo5::has_dbbuyprice1() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbbuyprice1() {
  _has_bits_[0] |= 0x10000000u;
}
void KCBPTagQuoteInfo5::clear_has_dbbuyprice1() {
  _has_bits_[0] &= ~0x10000000u;
}
void KCBPTagQuoteInfo5::clear_dbbuyprice1() {
  dbbuyprice1_ = 0;
  clear_has_dbbuyprice1();
}
 double KCBPTagQuoteInfo5::dbbuyprice1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbBuyPrice1)
  return dbbuyprice1_;
}
 void KCBPTagQuoteInfo5::set_dbbuyprice1(double value) {
  set_has_dbbuyprice1();
  dbbuyprice1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbBuyPrice1)
}

// optional int32 nBuyVolume1 = 30;
bool KCBPTagQuoteInfo5::has_nbuyvolume1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nbuyvolume1() {
  _has_bits_[0] |= 0x20000000u;
}
void KCBPTagQuoteInfo5::clear_has_nbuyvolume1() {
  _has_bits_[0] &= ~0x20000000u;
}
void KCBPTagQuoteInfo5::clear_nbuyvolume1() {
  nbuyvolume1_ = 0;
  clear_has_nbuyvolume1();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nbuyvolume1() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nBuyVolume1)
  return nbuyvolume1_;
}
 void KCBPTagQuoteInfo5::set_nbuyvolume1(::google::protobuf::int32 value) {
  set_has_nbuyvolume1();
  nbuyvolume1_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nBuyVolume1)
}

// optional double dbSalePrice2 = 31;
bool KCBPTagQuoteInfo5::has_dbsaleprice2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbsaleprice2() {
  _has_bits_[0] |= 0x40000000u;
}
void KCBPTagQuoteInfo5::clear_has_dbsaleprice2() {
  _has_bits_[0] &= ~0x40000000u;
}
void KCBPTagQuoteInfo5::clear_dbsaleprice2() {
  dbsaleprice2_ = 0;
  clear_has_dbsaleprice2();
}
 double KCBPTagQuoteInfo5::dbsaleprice2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbSalePrice2)
  return dbsaleprice2_;
}
 void KCBPTagQuoteInfo5::set_dbsaleprice2(double value) {
  set_has_dbsaleprice2();
  dbsaleprice2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbSalePrice2)
}

// optional int32 nSaleVolume2 = 32;
bool KCBPTagQuoteInfo5::has_nsalevolume2() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nsalevolume2() {
  _has_bits_[0] |= 0x80000000u;
}
void KCBPTagQuoteInfo5::clear_has_nsalevolume2() {
  _has_bits_[0] &= ~0x80000000u;
}
void KCBPTagQuoteInfo5::clear_nsalevolume2() {
  nsalevolume2_ = 0;
  clear_has_nsalevolume2();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nsalevolume2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nSaleVolume2)
  return nsalevolume2_;
}
 void KCBPTagQuoteInfo5::set_nsalevolume2(::google::protobuf::int32 value) {
  set_has_nsalevolume2();
  nsalevolume2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nSaleVolume2)
}

// optional double dbBuyPrice2 = 33;
bool KCBPTagQuoteInfo5::has_dbbuyprice2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbbuyprice2() {
  _has_bits_[1] |= 0x00000001u;
}
void KCBPTagQuoteInfo5::clear_has_dbbuyprice2() {
  _has_bits_[1] &= ~0x00000001u;
}
void KCBPTagQuoteInfo5::clear_dbbuyprice2() {
  dbbuyprice2_ = 0;
  clear_has_dbbuyprice2();
}
 double KCBPTagQuoteInfo5::dbbuyprice2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbBuyPrice2)
  return dbbuyprice2_;
}
 void KCBPTagQuoteInfo5::set_dbbuyprice2(double value) {
  set_has_dbbuyprice2();
  dbbuyprice2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbBuyPrice2)
}

// optional int32 nBuyVolume2 = 34;
bool KCBPTagQuoteInfo5::has_nbuyvolume2() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nbuyvolume2() {
  _has_bits_[1] |= 0x00000002u;
}
void KCBPTagQuoteInfo5::clear_has_nbuyvolume2() {
  _has_bits_[1] &= ~0x00000002u;
}
void KCBPTagQuoteInfo5::clear_nbuyvolume2() {
  nbuyvolume2_ = 0;
  clear_has_nbuyvolume2();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nbuyvolume2() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nBuyVolume2)
  return nbuyvolume2_;
}
 void KCBPTagQuoteInfo5::set_nbuyvolume2(::google::protobuf::int32 value) {
  set_has_nbuyvolume2();
  nbuyvolume2_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nBuyVolume2)
}

// optional double dbSalePrice3 = 35;
bool KCBPTagQuoteInfo5::has_dbsaleprice3() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbsaleprice3() {
  _has_bits_[1] |= 0x00000004u;
}
void KCBPTagQuoteInfo5::clear_has_dbsaleprice3() {
  _has_bits_[1] &= ~0x00000004u;
}
void KCBPTagQuoteInfo5::clear_dbsaleprice3() {
  dbsaleprice3_ = 0;
  clear_has_dbsaleprice3();
}
 double KCBPTagQuoteInfo5::dbsaleprice3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbSalePrice3)
  return dbsaleprice3_;
}
 void KCBPTagQuoteInfo5::set_dbsaleprice3(double value) {
  set_has_dbsaleprice3();
  dbsaleprice3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbSalePrice3)
}

// optional int32 nSaleVolume3 = 36;
bool KCBPTagQuoteInfo5::has_nsalevolume3() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nsalevolume3() {
  _has_bits_[1] |= 0x00000008u;
}
void KCBPTagQuoteInfo5::clear_has_nsalevolume3() {
  _has_bits_[1] &= ~0x00000008u;
}
void KCBPTagQuoteInfo5::clear_nsalevolume3() {
  nsalevolume3_ = 0;
  clear_has_nsalevolume3();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nsalevolume3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nSaleVolume3)
  return nsalevolume3_;
}
 void KCBPTagQuoteInfo5::set_nsalevolume3(::google::protobuf::int32 value) {
  set_has_nsalevolume3();
  nsalevolume3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nSaleVolume3)
}

// optional double dbBuyPrice3 = 37;
bool KCBPTagQuoteInfo5::has_dbbuyprice3() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbbuyprice3() {
  _has_bits_[1] |= 0x00000010u;
}
void KCBPTagQuoteInfo5::clear_has_dbbuyprice3() {
  _has_bits_[1] &= ~0x00000010u;
}
void KCBPTagQuoteInfo5::clear_dbbuyprice3() {
  dbbuyprice3_ = 0;
  clear_has_dbbuyprice3();
}
 double KCBPTagQuoteInfo5::dbbuyprice3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbBuyPrice3)
  return dbbuyprice3_;
}
 void KCBPTagQuoteInfo5::set_dbbuyprice3(double value) {
  set_has_dbbuyprice3();
  dbbuyprice3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbBuyPrice3)
}

// optional int32 nBuyVolume3 = 38;
bool KCBPTagQuoteInfo5::has_nbuyvolume3() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nbuyvolume3() {
  _has_bits_[1] |= 0x00000020u;
}
void KCBPTagQuoteInfo5::clear_has_nbuyvolume3() {
  _has_bits_[1] &= ~0x00000020u;
}
void KCBPTagQuoteInfo5::clear_nbuyvolume3() {
  nbuyvolume3_ = 0;
  clear_has_nbuyvolume3();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nbuyvolume3() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nBuyVolume3)
  return nbuyvolume3_;
}
 void KCBPTagQuoteInfo5::set_nbuyvolume3(::google::protobuf::int32 value) {
  set_has_nbuyvolume3();
  nbuyvolume3_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nBuyVolume3)
}

// optional double dbSalePrice4 = 39;
bool KCBPTagQuoteInfo5::has_dbsaleprice4() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbsaleprice4() {
  _has_bits_[1] |= 0x00000040u;
}
void KCBPTagQuoteInfo5::clear_has_dbsaleprice4() {
  _has_bits_[1] &= ~0x00000040u;
}
void KCBPTagQuoteInfo5::clear_dbsaleprice4() {
  dbsaleprice4_ = 0;
  clear_has_dbsaleprice4();
}
 double KCBPTagQuoteInfo5::dbsaleprice4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbSalePrice4)
  return dbsaleprice4_;
}
 void KCBPTagQuoteInfo5::set_dbsaleprice4(double value) {
  set_has_dbsaleprice4();
  dbsaleprice4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbSalePrice4)
}

// optional int32 nSaleVolume4 = 40;
bool KCBPTagQuoteInfo5::has_nsalevolume4() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nsalevolume4() {
  _has_bits_[1] |= 0x00000080u;
}
void KCBPTagQuoteInfo5::clear_has_nsalevolume4() {
  _has_bits_[1] &= ~0x00000080u;
}
void KCBPTagQuoteInfo5::clear_nsalevolume4() {
  nsalevolume4_ = 0;
  clear_has_nsalevolume4();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nsalevolume4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nSaleVolume4)
  return nsalevolume4_;
}
 void KCBPTagQuoteInfo5::set_nsalevolume4(::google::protobuf::int32 value) {
  set_has_nsalevolume4();
  nsalevolume4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nSaleVolume4)
}

// optional double dbBuyPrice4 = 41;
bool KCBPTagQuoteInfo5::has_dbbuyprice4() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void KCBPTagQuoteInfo5::set_has_dbbuyprice4() {
  _has_bits_[1] |= 0x00000100u;
}
void KCBPTagQuoteInfo5::clear_has_dbbuyprice4() {
  _has_bits_[1] &= ~0x00000100u;
}
void KCBPTagQuoteInfo5::clear_dbbuyprice4() {
  dbbuyprice4_ = 0;
  clear_has_dbbuyprice4();
}
 double KCBPTagQuoteInfo5::dbbuyprice4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.dbBuyPrice4)
  return dbbuyprice4_;
}
 void KCBPTagQuoteInfo5::set_dbbuyprice4(double value) {
  set_has_dbbuyprice4();
  dbbuyprice4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.dbBuyPrice4)
}

// optional int32 nBuyVolume4 = 42;
bool KCBPTagQuoteInfo5::has_nbuyvolume4() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void KCBPTagQuoteInfo5::set_has_nbuyvolume4() {
  _has_bits_[1] |= 0x00000200u;
}
void KCBPTagQuoteInfo5::clear_has_nbuyvolume4() {
  _has_bits_[1] &= ~0x00000200u;
}
void KCBPTagQuoteInfo5::clear_nbuyvolume4() {
  nbuyvolume4_ = 0;
  clear_has_nbuyvolume4();
}
 ::google::protobuf::int32 KCBPTagQuoteInfo5::nbuyvolume4() const {
  // @@protoc_insertion_point(field_get:XT.KCBPTagQuoteInfo5.nBuyVolume4)
  return nbuyvolume4_;
}
 void KCBPTagQuoteInfo5::set_nbuyvolume4(::google::protobuf::int32 value) {
  set_has_nbuyvolume4();
  nbuyvolume4_ = value;
  // @@protoc_insertion_point(field_set:XT.KCBPTagQuoteInfo5.nBuyVolume4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinaQuoteData::kExchangeIDFieldNumber;
const int SinaQuoteData::kInstrumentIDFieldNumber;
const int SinaQuoteData::kInstrumentNameFieldNumber;
const int SinaQuoteData::kDateStrFieldNumber;
const int SinaQuoteData::kTimeStrFieldNumber;
const int SinaQuoteData::kDTotVolumeFieldNumber;
const int SinaQuoteData::kTurnoverFieldNumber;
const int SinaQuoteData::kLastPxFieldNumber;
const int SinaQuoteData::kOpenPriceFieldNumber;
const int SinaQuoteData::kHighPxFieldNumber;
const int SinaQuoteData::kLowPxFieldNumber;
const int SinaQuoteData::kClosePriceFieldNumber;
const int SinaQuoteData::kBidPrice1FieldNumber;
const int SinaQuoteData::kBidVolume1FieldNumber;
const int SinaQuoteData::kAskPrice1FieldNumber;
const int SinaQuoteData::kAskVolume1FieldNumber;
const int SinaQuoteData::kBidPrice2FieldNumber;
const int SinaQuoteData::kBidVolume2FieldNumber;
const int SinaQuoteData::kAskPrice2FieldNumber;
const int SinaQuoteData::kAskVolume2FieldNumber;
const int SinaQuoteData::kBidPrice3FieldNumber;
const int SinaQuoteData::kBidVolume3FieldNumber;
const int SinaQuoteData::kAskPrice3FieldNumber;
const int SinaQuoteData::kAskVolume3FieldNumber;
const int SinaQuoteData::kBidPrice4FieldNumber;
const int SinaQuoteData::kBidVolume4FieldNumber;
const int SinaQuoteData::kAskPrice4FieldNumber;
const int SinaQuoteData::kAskVolume4FieldNumber;
const int SinaQuoteData::kBidPrice5FieldNumber;
const int SinaQuoteData::kBidVolume5FieldNumber;
const int SinaQuoteData::kAskPrice5FieldNumber;
const int SinaQuoteData::kAskVolume5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinaQuoteData::SinaQuoteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.SinaQuoteData)
}

void SinaQuoteData::InitAsDefaultInstance() {
}

SinaQuoteData::SinaQuoteData(const SinaQuoteData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.SinaQuoteData)
}

void SinaQuoteData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datestr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtotvolume_ = 0;
  turnover_ = 0;
  lastpx_ = 0;
  openprice_ = 0;
  highpx_ = 0;
  lowpx_ = 0;
  closeprice_ = 0;
  bidprice1_ = 0;
  bidvolume1_ = 0;
  askprice1_ = 0;
  askvolume1_ = 0;
  bidprice2_ = 0;
  bidvolume2_ = 0;
  askprice2_ = 0;
  askvolume2_ = 0;
  bidprice3_ = 0;
  bidvolume3_ = 0;
  askprice3_ = 0;
  askvolume3_ = 0;
  bidprice4_ = 0;
  bidvolume4_ = 0;
  askprice4_ = 0;
  askvolume4_ = 0;
  bidprice5_ = 0;
  bidvolume5_ = 0;
  askprice5_ = 0;
  askvolume5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SinaQuoteData::~SinaQuoteData() {
  // @@protoc_insertion_point(destructor:XT.SinaQuoteData)
  SharedDtor();
}

void SinaQuoteData::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datestr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SinaQuoteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SinaQuoteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SinaQuoteData_descriptor_;
}

const SinaQuoteData& SinaQuoteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

SinaQuoteData* SinaQuoteData::default_instance_ = NULL;

SinaQuoteData* SinaQuoteData::New(::google::protobuf::Arena* arena) const {
  SinaQuoteData* n = new SinaQuoteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SinaQuoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.SinaQuoteData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SinaQuoteData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SinaQuoteData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(dtotvolume_, lastpx_);
    if (has_exchangeid()) {
      exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_instrumentname()) {
      instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_datestr()) {
      datestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestr()) {
      timestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(openprice_, askvolume1_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(bidprice2_, askvolume3_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(bidprice4_, askvolume5_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SinaQuoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.SinaQuoteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exchangeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SinaQuoteData.exchangeID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instrumentID;
        break;
      }

      // optional string instrumentID = 2;
      case 2: {
        if (tag == 18) {
         parse_instrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SinaQuoteData.instrumentID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instrumentName;
        break;
      }

      // optional string instrumentName = 3;
      case 3: {
        if (tag == 26) {
         parse_instrumentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentname().data(), this->instrumentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SinaQuoteData.instrumentName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dateStr;
        break;
      }

      // optional string dateStr = 4;
      case 4: {
        if (tag == 34) {
         parse_dateStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SinaQuoteData.dateStr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_timeStr;
        break;
      }

      // optional string timeStr = 5;
      case 5: {
        if (tag == 42) {
         parse_timeStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestr().data(), this->timestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.SinaQuoteData.timeStr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_dTotVolume;
        break;
      }

      // optional double dTotVolume = 6;
      case 6: {
        if (tag == 49) {
         parse_dTotVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dtotvolume_)));
          set_has_dtotvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_turnover;
        break;
      }

      // optional double turnover = 7;
      case 7: {
        if (tag == 57) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lastPx;
        break;
      }

      // optional double lastPx = 8;
      case 8: {
        if (tag == 65) {
         parse_lastPx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastpx_)));
          set_has_lastpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_openPrice;
        break;
      }

      // optional double openPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_highPx;
        break;
      }

      // optional double highPx = 10;
      case 10: {
        if (tag == 81) {
         parse_highPx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highpx_)));
          set_has_highpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_lowPx;
        break;
      }

      // optional double lowPx = 11;
      case 11: {
        if (tag == 89) {
         parse_lowPx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowpx_)));
          set_has_lowpx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_closePrice;
        break;
      }

      // optional double closePrice = 12;
      case 12: {
        if (tag == 97) {
         parse_closePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_bidPrice1;
        break;
      }

      // optional double bidPrice1 = 13;
      case 13: {
        if (tag == 105) {
         parse_bidPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice1_)));
          set_has_bidprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bidVolume1;
        break;
      }

      // optional int32 bidVolume1 = 14;
      case 14: {
        if (tag == 112) {
         parse_bidVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume1_)));
          set_has_bidvolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_askPrice1;
        break;
      }

      // optional double askPrice1 = 15;
      case 15: {
        if (tag == 121) {
         parse_askPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_askVolume1;
        break;
      }

      // optional int32 askVolume1 = 16;
      case 16: {
        if (tag == 128) {
         parse_askVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume1_)));
          set_has_askvolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_bidPrice2;
        break;
      }

      // optional double bidPrice2 = 17;
      case 17: {
        if (tag == 137) {
         parse_bidPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice2_)));
          set_has_bidprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_bidVolume2;
        break;
      }

      // optional int32 bidVolume2 = 18;
      case 18: {
        if (tag == 144) {
         parse_bidVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume2_)));
          set_has_bidvolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_askPrice2;
        break;
      }

      // optional double askPrice2 = 19;
      case 19: {
        if (tag == 153) {
         parse_askPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice2_)));
          set_has_askprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_askVolume2;
        break;
      }

      // optional int32 askVolume2 = 20;
      case 20: {
        if (tag == 160) {
         parse_askVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume2_)));
          set_has_askvolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_bidPrice3;
        break;
      }

      // optional double bidPrice3 = 21;
      case 21: {
        if (tag == 169) {
         parse_bidPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice3_)));
          set_has_bidprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_bidVolume3;
        break;
      }

      // optional int32 bidVolume3 = 22;
      case 22: {
        if (tag == 176) {
         parse_bidVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume3_)));
          set_has_bidvolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_askPrice3;
        break;
      }

      // optional double askPrice3 = 23;
      case 23: {
        if (tag == 185) {
         parse_askPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice3_)));
          set_has_askprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_askVolume3;
        break;
      }

      // optional int32 askVolume3 = 24;
      case 24: {
        if (tag == 192) {
         parse_askVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume3_)));
          set_has_askvolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_bidPrice4;
        break;
      }

      // optional double bidPrice4 = 25;
      case 25: {
        if (tag == 201) {
         parse_bidPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice4_)));
          set_has_bidprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_bidVolume4;
        break;
      }

      // optional int32 bidVolume4 = 26;
      case 26: {
        if (tag == 208) {
         parse_bidVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume4_)));
          set_has_bidvolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_askPrice4;
        break;
      }

      // optional double askPrice4 = 27;
      case 27: {
        if (tag == 217) {
         parse_askPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice4_)));
          set_has_askprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_askVolume4;
        break;
      }

      // optional int32 askVolume4 = 28;
      case 28: {
        if (tag == 224) {
         parse_askVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume4_)));
          set_has_askvolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_bidPrice5;
        break;
      }

      // optional double bidPrice5 = 29;
      case 29: {
        if (tag == 233) {
         parse_bidPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice5_)));
          set_has_bidprice5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_bidVolume5;
        break;
      }

      // optional int32 bidVolume5 = 30;
      case 30: {
        if (tag == 240) {
         parse_bidVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume5_)));
          set_has_bidvolume5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_askPrice5;
        break;
      }

      // optional double askPrice5 = 31;
      case 31: {
        if (tag == 249) {
         parse_askPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice5_)));
          set_has_askprice5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_askVolume5;
        break;
      }

      // optional int32 askVolume5 = 32;
      case 32: {
        if (tag == 256) {
         parse_askVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume5_)));
          set_has_askvolume5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.SinaQuoteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.SinaQuoteData)
  return false;
#undef DO_
}

void SinaQuoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.SinaQuoteData)
  // optional string exchangeID = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.exchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchangeid(), output);
  }

  // optional string instrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.instrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // optional string instrumentName = 3;
  if (has_instrumentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentname().data(), this->instrumentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.instrumentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instrumentname(), output);
  }

  // optional string dateStr = 4;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.dateStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->datestr(), output);
  }

  // optional string timeStr = 5;
  if (has_timestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestr().data(), this->timestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.timeStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->timestr(), output);
  }

  // optional double dTotVolume = 6;
  if (has_dtotvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dtotvolume(), output);
  }

  // optional double turnover = 7;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->turnover(), output);
  }

  // optional double lastPx = 8;
  if (has_lastpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lastpx(), output);
  }

  // optional double openPrice = 9;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->openprice(), output);
  }

  // optional double highPx = 10;
  if (has_highpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->highpx(), output);
  }

  // optional double lowPx = 11;
  if (has_lowpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lowpx(), output);
  }

  // optional double closePrice = 12;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->closeprice(), output);
  }

  // optional double bidPrice1 = 13;
  if (has_bidprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->bidprice1(), output);
  }

  // optional int32 bidVolume1 = 14;
  if (has_bidvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bidvolume1(), output);
  }

  // optional double askPrice1 = 15;
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->askprice1(), output);
  }

  // optional int32 askVolume1 = 16;
  if (has_askvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->askvolume1(), output);
  }

  // optional double bidPrice2 = 17;
  if (has_bidprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->bidprice2(), output);
  }

  // optional int32 bidVolume2 = 18;
  if (has_bidvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bidvolume2(), output);
  }

  // optional double askPrice2 = 19;
  if (has_askprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->askprice2(), output);
  }

  // optional int32 askVolume2 = 20;
  if (has_askvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->askvolume2(), output);
  }

  // optional double bidPrice3 = 21;
  if (has_bidprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->bidprice3(), output);
  }

  // optional int32 bidVolume3 = 22;
  if (has_bidvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->bidvolume3(), output);
  }

  // optional double askPrice3 = 23;
  if (has_askprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->askprice3(), output);
  }

  // optional int32 askVolume3 = 24;
  if (has_askvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->askvolume3(), output);
  }

  // optional double bidPrice4 = 25;
  if (has_bidprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->bidprice4(), output);
  }

  // optional int32 bidVolume4 = 26;
  if (has_bidvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->bidvolume4(), output);
  }

  // optional double askPrice4 = 27;
  if (has_askprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->askprice4(), output);
  }

  // optional int32 askVolume4 = 28;
  if (has_askvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->askvolume4(), output);
  }

  // optional double bidPrice5 = 29;
  if (has_bidprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->bidprice5(), output);
  }

  // optional int32 bidVolume5 = 30;
  if (has_bidvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->bidvolume5(), output);
  }

  // optional double askPrice5 = 31;
  if (has_askprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->askprice5(), output);
  }

  // optional int32 askVolume5 = 32;
  if (has_askvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->askvolume5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.SinaQuoteData)
}

::google::protobuf::uint8* SinaQuoteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.SinaQuoteData)
  // optional string exchangeID = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.exchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchangeid(), target);
  }

  // optional string instrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.instrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional string instrumentName = 3;
  if (has_instrumentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentname().data(), this->instrumentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.instrumentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrumentname(), target);
  }

  // optional string dateStr = 4;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.dateStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datestr(), target);
  }

  // optional string timeStr = 5;
  if (has_timestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestr().data(), this->timestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.SinaQuoteData.timeStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestr(), target);
  }

  // optional double dTotVolume = 6;
  if (has_dtotvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dtotvolume(), target);
  }

  // optional double turnover = 7;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->turnover(), target);
  }

  // optional double lastPx = 8;
  if (has_lastpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lastpx(), target);
  }

  // optional double openPrice = 9;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->openprice(), target);
  }

  // optional double highPx = 10;
  if (has_highpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->highpx(), target);
  }

  // optional double lowPx = 11;
  if (has_lowpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lowpx(), target);
  }

  // optional double closePrice = 12;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->closeprice(), target);
  }

  // optional double bidPrice1 = 13;
  if (has_bidprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->bidprice1(), target);
  }

  // optional int32 bidVolume1 = 14;
  if (has_bidvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->bidvolume1(), target);
  }

  // optional double askPrice1 = 15;
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->askprice1(), target);
  }

  // optional int32 askVolume1 = 16;
  if (has_askvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->askvolume1(), target);
  }

  // optional double bidPrice2 = 17;
  if (has_bidprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->bidprice2(), target);
  }

  // optional int32 bidVolume2 = 18;
  if (has_bidvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bidvolume2(), target);
  }

  // optional double askPrice2 = 19;
  if (has_askprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->askprice2(), target);
  }

  // optional int32 askVolume2 = 20;
  if (has_askvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->askvolume2(), target);
  }

  // optional double bidPrice3 = 21;
  if (has_bidprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->bidprice3(), target);
  }

  // optional int32 bidVolume3 = 22;
  if (has_bidvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->bidvolume3(), target);
  }

  // optional double askPrice3 = 23;
  if (has_askprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->askprice3(), target);
  }

  // optional int32 askVolume3 = 24;
  if (has_askvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->askvolume3(), target);
  }

  // optional double bidPrice4 = 25;
  if (has_bidprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->bidprice4(), target);
  }

  // optional int32 bidVolume4 = 26;
  if (has_bidvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->bidvolume4(), target);
  }

  // optional double askPrice4 = 27;
  if (has_askprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->askprice4(), target);
  }

  // optional int32 askVolume4 = 28;
  if (has_askvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->askvolume4(), target);
  }

  // optional double bidPrice5 = 29;
  if (has_bidprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->bidprice5(), target);
  }

  // optional int32 bidVolume5 = 30;
  if (has_bidvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->bidvolume5(), target);
  }

  // optional double askPrice5 = 31;
  if (has_askprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->askprice5(), target);
  }

  // optional int32 askVolume5 = 32;
  if (has_askvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->askvolume5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.SinaQuoteData)
  return target;
}

int SinaQuoteData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.SinaQuoteData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string exchangeID = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string instrumentID = 2;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional string instrumentName = 3;
    if (has_instrumentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentname());
    }

    // optional string dateStr = 4;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional string timeStr = 5;
    if (has_timestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestr());
    }

    // optional double dTotVolume = 6;
    if (has_dtotvolume()) {
      total_size += 1 + 8;
    }

    // optional double turnover = 7;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // optional double lastPx = 8;
    if (has_lastpx()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double openPrice = 9;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // optional double highPx = 10;
    if (has_highpx()) {
      total_size += 1 + 8;
    }

    // optional double lowPx = 11;
    if (has_lowpx()) {
      total_size += 1 + 8;
    }

    // optional double closePrice = 12;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

    // optional double bidPrice1 = 13;
    if (has_bidprice1()) {
      total_size += 1 + 8;
    }

    // optional int32 bidVolume1 = 14;
    if (has_bidvolume1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume1());
    }

    // optional double askPrice1 = 15;
    if (has_askprice1()) {
      total_size += 1 + 8;
    }

    // optional int32 askVolume1 = 16;
    if (has_askvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume1());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double bidPrice2 = 17;
    if (has_bidprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 bidVolume2 = 18;
    if (has_bidvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume2());
    }

    // optional double askPrice2 = 19;
    if (has_askprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 askVolume2 = 20;
    if (has_askvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume2());
    }

    // optional double bidPrice3 = 21;
    if (has_bidprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 bidVolume3 = 22;
    if (has_bidvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume3());
    }

    // optional double askPrice3 = 23;
    if (has_askprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 askVolume3 = 24;
    if (has_askvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume3());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double bidPrice4 = 25;
    if (has_bidprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 bidVolume4 = 26;
    if (has_bidvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume4());
    }

    // optional double askPrice4 = 27;
    if (has_askprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 askVolume4 = 28;
    if (has_askvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume4());
    }

    // optional double bidPrice5 = 29;
    if (has_bidprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 bidVolume5 = 30;
    if (has_bidvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume5());
    }

    // optional double askPrice5 = 31;
    if (has_askprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 askVolume5 = 32;
    if (has_askvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume5());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinaQuoteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.SinaQuoteData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SinaQuoteData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SinaQuoteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.SinaQuoteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.SinaQuoteData)
    MergeFrom(*source);
  }
}

void SinaQuoteData::MergeFrom(const SinaQuoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.SinaQuoteData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_has_exchangeid();
      exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
    }
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_instrumentname()) {
      set_has_instrumentname();
      instrumentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentname_);
    }
    if (from.has_datestr()) {
      set_has_datestr();
      datestr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datestr_);
    }
    if (from.has_timestr()) {
      set_has_timestr();
      timestr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestr_);
    }
    if (from.has_dtotvolume()) {
      set_dtotvolume(from.dtotvolume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_lastpx()) {
      set_lastpx(from.lastpx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highpx()) {
      set_highpx(from.highpx());
    }
    if (from.has_lowpx()) {
      set_lowpx(from.lowpx());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
    if (from.has_bidprice1()) {
      set_bidprice1(from.bidprice1());
    }
    if (from.has_bidvolume1()) {
      set_bidvolume1(from.bidvolume1());
    }
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
    if (from.has_askvolume1()) {
      set_askvolume1(from.askvolume1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bidprice2()) {
      set_bidprice2(from.bidprice2());
    }
    if (from.has_bidvolume2()) {
      set_bidvolume2(from.bidvolume2());
    }
    if (from.has_askprice2()) {
      set_askprice2(from.askprice2());
    }
    if (from.has_askvolume2()) {
      set_askvolume2(from.askvolume2());
    }
    if (from.has_bidprice3()) {
      set_bidprice3(from.bidprice3());
    }
    if (from.has_bidvolume3()) {
      set_bidvolume3(from.bidvolume3());
    }
    if (from.has_askprice3()) {
      set_askprice3(from.askprice3());
    }
    if (from.has_askvolume3()) {
      set_askvolume3(from.askvolume3());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bidprice4()) {
      set_bidprice4(from.bidprice4());
    }
    if (from.has_bidvolume4()) {
      set_bidvolume4(from.bidvolume4());
    }
    if (from.has_askprice4()) {
      set_askprice4(from.askprice4());
    }
    if (from.has_askvolume4()) {
      set_askvolume4(from.askvolume4());
    }
    if (from.has_bidprice5()) {
      set_bidprice5(from.bidprice5());
    }
    if (from.has_bidvolume5()) {
      set_bidvolume5(from.bidvolume5());
    }
    if (from.has_askprice5()) {
      set_askprice5(from.askprice5());
    }
    if (from.has_askvolume5()) {
      set_askvolume5(from.askvolume5());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SinaQuoteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.SinaQuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinaQuoteData::CopyFrom(const SinaQuoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.SinaQuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinaQuoteData::IsInitialized() const {

  return true;
}

void SinaQuoteData::Swap(SinaQuoteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinaQuoteData::InternalSwap(SinaQuoteData* other) {
  exchangeid_.Swap(&other->exchangeid_);
  instrumentid_.Swap(&other->instrumentid_);
  instrumentname_.Swap(&other->instrumentname_);
  datestr_.Swap(&other->datestr_);
  timestr_.Swap(&other->timestr_);
  std::swap(dtotvolume_, other->dtotvolume_);
  std::swap(turnover_, other->turnover_);
  std::swap(lastpx_, other->lastpx_);
  std::swap(openprice_, other->openprice_);
  std::swap(highpx_, other->highpx_);
  std::swap(lowpx_, other->lowpx_);
  std::swap(closeprice_, other->closeprice_);
  std::swap(bidprice1_, other->bidprice1_);
  std::swap(bidvolume1_, other->bidvolume1_);
  std::swap(askprice1_, other->askprice1_);
  std::swap(askvolume1_, other->askvolume1_);
  std::swap(bidprice2_, other->bidprice2_);
  std::swap(bidvolume2_, other->bidvolume2_);
  std::swap(askprice2_, other->askprice2_);
  std::swap(askvolume2_, other->askvolume2_);
  std::swap(bidprice3_, other->bidprice3_);
  std::swap(bidvolume3_, other->bidvolume3_);
  std::swap(askprice3_, other->askprice3_);
  std::swap(askvolume3_, other->askvolume3_);
  std::swap(bidprice4_, other->bidprice4_);
  std::swap(bidvolume4_, other->bidvolume4_);
  std::swap(askprice4_, other->askprice4_);
  std::swap(askvolume4_, other->askvolume4_);
  std::swap(bidprice5_, other->bidprice5_);
  std::swap(bidvolume5_, other->bidvolume5_);
  std::swap(askprice5_, other->askprice5_);
  std::swap(askvolume5_, other->askvolume5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SinaQuoteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SinaQuoteData_descriptor_;
  metadata.reflection = SinaQuoteData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SinaQuoteData

// optional string exchangeID = 1;
bool SinaQuoteData::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SinaQuoteData::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
void SinaQuoteData::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SinaQuoteData::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeid();
}
 const ::std::string& SinaQuoteData::exchangeid() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.exchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.exchangeID)
}
 void SinaQuoteData::set_exchangeid(const char* value) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SinaQuoteData.exchangeID)
}
 void SinaQuoteData::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SinaQuoteData.exchangeID)
}
 ::std::string* SinaQuoteData::mutable_exchangeid() {
  set_has_exchangeid();
  // @@protoc_insertion_point(field_mutable:XT.SinaQuoteData.exchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinaQuoteData::release_exchangeid() {
  // @@protoc_insertion_point(field_release:XT.SinaQuoteData.exchangeID)
  clear_has_exchangeid();
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    set_has_exchangeid();
  } else {
    clear_has_exchangeid();
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:XT.SinaQuoteData.exchangeID)
}

// optional string instrumentID = 2;
bool SinaQuoteData::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SinaQuoteData::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000002u;
}
void SinaQuoteData::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SinaQuoteData::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& SinaQuoteData::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.instrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.instrumentID)
}
 void SinaQuoteData::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SinaQuoteData.instrumentID)
}
 void SinaQuoteData::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SinaQuoteData.instrumentID)
}
 ::std::string* SinaQuoteData::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.SinaQuoteData.instrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinaQuoteData::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.SinaQuoteData.instrumentID)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.SinaQuoteData.instrumentID)
}

// optional string instrumentName = 3;
bool SinaQuoteData::has_instrumentname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SinaQuoteData::set_has_instrumentname() {
  _has_bits_[0] |= 0x00000004u;
}
void SinaQuoteData::clear_has_instrumentname() {
  _has_bits_[0] &= ~0x00000004u;
}
void SinaQuoteData::clear_instrumentname() {
  instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentname();
}
 const ::std::string& SinaQuoteData::instrumentname() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.instrumentName)
  return instrumentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_instrumentname(const ::std::string& value) {
  set_has_instrumentname();
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.instrumentName)
}
 void SinaQuoteData::set_instrumentname(const char* value) {
  set_has_instrumentname();
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SinaQuoteData.instrumentName)
}
 void SinaQuoteData::set_instrumentname(const char* value, size_t size) {
  set_has_instrumentname();
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SinaQuoteData.instrumentName)
}
 ::std::string* SinaQuoteData::mutable_instrumentname() {
  set_has_instrumentname();
  // @@protoc_insertion_point(field_mutable:XT.SinaQuoteData.instrumentName)
  return instrumentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinaQuoteData::release_instrumentname() {
  // @@protoc_insertion_point(field_release:XT.SinaQuoteData.instrumentName)
  clear_has_instrumentname();
  return instrumentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_allocated_instrumentname(::std::string* instrumentname) {
  if (instrumentname != NULL) {
    set_has_instrumentname();
  } else {
    clear_has_instrumentname();
  }
  instrumentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentname);
  // @@protoc_insertion_point(field_set_allocated:XT.SinaQuoteData.instrumentName)
}

// optional string dateStr = 4;
bool SinaQuoteData::has_datestr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SinaQuoteData::set_has_datestr() {
  _has_bits_[0] |= 0x00000008u;
}
void SinaQuoteData::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000008u;
}
void SinaQuoteData::clear_datestr() {
  datestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datestr();
}
 const ::std::string& SinaQuoteData::datestr() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.dateStr)
  return datestr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_datestr(const ::std::string& value) {
  set_has_datestr();
  datestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.dateStr)
}
 void SinaQuoteData::set_datestr(const char* value) {
  set_has_datestr();
  datestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SinaQuoteData.dateStr)
}
 void SinaQuoteData::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  datestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SinaQuoteData.dateStr)
}
 ::std::string* SinaQuoteData::mutable_datestr() {
  set_has_datestr();
  // @@protoc_insertion_point(field_mutable:XT.SinaQuoteData.dateStr)
  return datestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinaQuoteData::release_datestr() {
  // @@protoc_insertion_point(field_release:XT.SinaQuoteData.dateStr)
  clear_has_datestr();
  return datestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_allocated_datestr(::std::string* datestr) {
  if (datestr != NULL) {
    set_has_datestr();
  } else {
    clear_has_datestr();
  }
  datestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datestr);
  // @@protoc_insertion_point(field_set_allocated:XT.SinaQuoteData.dateStr)
}

// optional string timeStr = 5;
bool SinaQuoteData::has_timestr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SinaQuoteData::set_has_timestr() {
  _has_bits_[0] |= 0x00000010u;
}
void SinaQuoteData::clear_has_timestr() {
  _has_bits_[0] &= ~0x00000010u;
}
void SinaQuoteData::clear_timestr() {
  timestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestr();
}
 const ::std::string& SinaQuoteData::timestr() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.timeStr)
  return timestr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_timestr(const ::std::string& value) {
  set_has_timestr();
  timestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.timeStr)
}
 void SinaQuoteData::set_timestr(const char* value) {
  set_has_timestr();
  timestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.SinaQuoteData.timeStr)
}
 void SinaQuoteData::set_timestr(const char* value, size_t size) {
  set_has_timestr();
  timestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.SinaQuoteData.timeStr)
}
 ::std::string* SinaQuoteData::mutable_timestr() {
  set_has_timestr();
  // @@protoc_insertion_point(field_mutable:XT.SinaQuoteData.timeStr)
  return timestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinaQuoteData::release_timestr() {
  // @@protoc_insertion_point(field_release:XT.SinaQuoteData.timeStr)
  clear_has_timestr();
  return timestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinaQuoteData::set_allocated_timestr(::std::string* timestr) {
  if (timestr != NULL) {
    set_has_timestr();
  } else {
    clear_has_timestr();
  }
  timestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestr);
  // @@protoc_insertion_point(field_set_allocated:XT.SinaQuoteData.timeStr)
}

// optional double dTotVolume = 6;
bool SinaQuoteData::has_dtotvolume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SinaQuoteData::set_has_dtotvolume() {
  _has_bits_[0] |= 0x00000020u;
}
void SinaQuoteData::clear_has_dtotvolume() {
  _has_bits_[0] &= ~0x00000020u;
}
void SinaQuoteData::clear_dtotvolume() {
  dtotvolume_ = 0;
  clear_has_dtotvolume();
}
 double SinaQuoteData::dtotvolume() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.dTotVolume)
  return dtotvolume_;
}
 void SinaQuoteData::set_dtotvolume(double value) {
  set_has_dtotvolume();
  dtotvolume_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.dTotVolume)
}

// optional double turnover = 7;
bool SinaQuoteData::has_turnover() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SinaQuoteData::set_has_turnover() {
  _has_bits_[0] |= 0x00000040u;
}
void SinaQuoteData::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000040u;
}
void SinaQuoteData::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
 double SinaQuoteData::turnover() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.turnover)
  return turnover_;
}
 void SinaQuoteData::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.turnover)
}

// optional double lastPx = 8;
bool SinaQuoteData::has_lastpx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SinaQuoteData::set_has_lastpx() {
  _has_bits_[0] |= 0x00000080u;
}
void SinaQuoteData::clear_has_lastpx() {
  _has_bits_[0] &= ~0x00000080u;
}
void SinaQuoteData::clear_lastpx() {
  lastpx_ = 0;
  clear_has_lastpx();
}
 double SinaQuoteData::lastpx() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.lastPx)
  return lastpx_;
}
 void SinaQuoteData::set_lastpx(double value) {
  set_has_lastpx();
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.lastPx)
}

// optional double openPrice = 9;
bool SinaQuoteData::has_openprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SinaQuoteData::set_has_openprice() {
  _has_bits_[0] |= 0x00000100u;
}
void SinaQuoteData::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000100u;
}
void SinaQuoteData::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
 double SinaQuoteData::openprice() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.openPrice)
  return openprice_;
}
 void SinaQuoteData::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.openPrice)
}

// optional double highPx = 10;
bool SinaQuoteData::has_highpx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SinaQuoteData::set_has_highpx() {
  _has_bits_[0] |= 0x00000200u;
}
void SinaQuoteData::clear_has_highpx() {
  _has_bits_[0] &= ~0x00000200u;
}
void SinaQuoteData::clear_highpx() {
  highpx_ = 0;
  clear_has_highpx();
}
 double SinaQuoteData::highpx() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.highPx)
  return highpx_;
}
 void SinaQuoteData::set_highpx(double value) {
  set_has_highpx();
  highpx_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.highPx)
}

// optional double lowPx = 11;
bool SinaQuoteData::has_lowpx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SinaQuoteData::set_has_lowpx() {
  _has_bits_[0] |= 0x00000400u;
}
void SinaQuoteData::clear_has_lowpx() {
  _has_bits_[0] &= ~0x00000400u;
}
void SinaQuoteData::clear_lowpx() {
  lowpx_ = 0;
  clear_has_lowpx();
}
 double SinaQuoteData::lowpx() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.lowPx)
  return lowpx_;
}
 void SinaQuoteData::set_lowpx(double value) {
  set_has_lowpx();
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.lowPx)
}

// optional double closePrice = 12;
bool SinaQuoteData::has_closeprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SinaQuoteData::set_has_closeprice() {
  _has_bits_[0] |= 0x00000800u;
}
void SinaQuoteData::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00000800u;
}
void SinaQuoteData::clear_closeprice() {
  closeprice_ = 0;
  clear_has_closeprice();
}
 double SinaQuoteData::closeprice() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.closePrice)
  return closeprice_;
}
 void SinaQuoteData::set_closeprice(double value) {
  set_has_closeprice();
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.closePrice)
}

// optional double bidPrice1 = 13;
bool SinaQuoteData::has_bidprice1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SinaQuoteData::set_has_bidprice1() {
  _has_bits_[0] |= 0x00001000u;
}
void SinaQuoteData::clear_has_bidprice1() {
  _has_bits_[0] &= ~0x00001000u;
}
void SinaQuoteData::clear_bidprice1() {
  bidprice1_ = 0;
  clear_has_bidprice1();
}
 double SinaQuoteData::bidprice1() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidPrice1)
  return bidprice1_;
}
 void SinaQuoteData::set_bidprice1(double value) {
  set_has_bidprice1();
  bidprice1_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidPrice1)
}

// optional int32 bidVolume1 = 14;
bool SinaQuoteData::has_bidvolume1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SinaQuoteData::set_has_bidvolume1() {
  _has_bits_[0] |= 0x00002000u;
}
void SinaQuoteData::clear_has_bidvolume1() {
  _has_bits_[0] &= ~0x00002000u;
}
void SinaQuoteData::clear_bidvolume1() {
  bidvolume1_ = 0;
  clear_has_bidvolume1();
}
 ::google::protobuf::int32 SinaQuoteData::bidvolume1() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidVolume1)
  return bidvolume1_;
}
 void SinaQuoteData::set_bidvolume1(::google::protobuf::int32 value) {
  set_has_bidvolume1();
  bidvolume1_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidVolume1)
}

// optional double askPrice1 = 15;
bool SinaQuoteData::has_askprice1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SinaQuoteData::set_has_askprice1() {
  _has_bits_[0] |= 0x00004000u;
}
void SinaQuoteData::clear_has_askprice1() {
  _has_bits_[0] &= ~0x00004000u;
}
void SinaQuoteData::clear_askprice1() {
  askprice1_ = 0;
  clear_has_askprice1();
}
 double SinaQuoteData::askprice1() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askPrice1)
  return askprice1_;
}
 void SinaQuoteData::set_askprice1(double value) {
  set_has_askprice1();
  askprice1_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askPrice1)
}

// optional int32 askVolume1 = 16;
bool SinaQuoteData::has_askvolume1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SinaQuoteData::set_has_askvolume1() {
  _has_bits_[0] |= 0x00008000u;
}
void SinaQuoteData::clear_has_askvolume1() {
  _has_bits_[0] &= ~0x00008000u;
}
void SinaQuoteData::clear_askvolume1() {
  askvolume1_ = 0;
  clear_has_askvolume1();
}
 ::google::protobuf::int32 SinaQuoteData::askvolume1() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askVolume1)
  return askvolume1_;
}
 void SinaQuoteData::set_askvolume1(::google::protobuf::int32 value) {
  set_has_askvolume1();
  askvolume1_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askVolume1)
}

// optional double bidPrice2 = 17;
bool SinaQuoteData::has_bidprice2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SinaQuoteData::set_has_bidprice2() {
  _has_bits_[0] |= 0x00010000u;
}
void SinaQuoteData::clear_has_bidprice2() {
  _has_bits_[0] &= ~0x00010000u;
}
void SinaQuoteData::clear_bidprice2() {
  bidprice2_ = 0;
  clear_has_bidprice2();
}
 double SinaQuoteData::bidprice2() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidPrice2)
  return bidprice2_;
}
 void SinaQuoteData::set_bidprice2(double value) {
  set_has_bidprice2();
  bidprice2_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidPrice2)
}

// optional int32 bidVolume2 = 18;
bool SinaQuoteData::has_bidvolume2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SinaQuoteData::set_has_bidvolume2() {
  _has_bits_[0] |= 0x00020000u;
}
void SinaQuoteData::clear_has_bidvolume2() {
  _has_bits_[0] &= ~0x00020000u;
}
void SinaQuoteData::clear_bidvolume2() {
  bidvolume2_ = 0;
  clear_has_bidvolume2();
}
 ::google::protobuf::int32 SinaQuoteData::bidvolume2() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidVolume2)
  return bidvolume2_;
}
 void SinaQuoteData::set_bidvolume2(::google::protobuf::int32 value) {
  set_has_bidvolume2();
  bidvolume2_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidVolume2)
}

// optional double askPrice2 = 19;
bool SinaQuoteData::has_askprice2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SinaQuoteData::set_has_askprice2() {
  _has_bits_[0] |= 0x00040000u;
}
void SinaQuoteData::clear_has_askprice2() {
  _has_bits_[0] &= ~0x00040000u;
}
void SinaQuoteData::clear_askprice2() {
  askprice2_ = 0;
  clear_has_askprice2();
}
 double SinaQuoteData::askprice2() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askPrice2)
  return askprice2_;
}
 void SinaQuoteData::set_askprice2(double value) {
  set_has_askprice2();
  askprice2_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askPrice2)
}

// optional int32 askVolume2 = 20;
bool SinaQuoteData::has_askvolume2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SinaQuoteData::set_has_askvolume2() {
  _has_bits_[0] |= 0x00080000u;
}
void SinaQuoteData::clear_has_askvolume2() {
  _has_bits_[0] &= ~0x00080000u;
}
void SinaQuoteData::clear_askvolume2() {
  askvolume2_ = 0;
  clear_has_askvolume2();
}
 ::google::protobuf::int32 SinaQuoteData::askvolume2() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askVolume2)
  return askvolume2_;
}
 void SinaQuoteData::set_askvolume2(::google::protobuf::int32 value) {
  set_has_askvolume2();
  askvolume2_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askVolume2)
}

// optional double bidPrice3 = 21;
bool SinaQuoteData::has_bidprice3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SinaQuoteData::set_has_bidprice3() {
  _has_bits_[0] |= 0x00100000u;
}
void SinaQuoteData::clear_has_bidprice3() {
  _has_bits_[0] &= ~0x00100000u;
}
void SinaQuoteData::clear_bidprice3() {
  bidprice3_ = 0;
  clear_has_bidprice3();
}
 double SinaQuoteData::bidprice3() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidPrice3)
  return bidprice3_;
}
 void SinaQuoteData::set_bidprice3(double value) {
  set_has_bidprice3();
  bidprice3_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidPrice3)
}

// optional int32 bidVolume3 = 22;
bool SinaQuoteData::has_bidvolume3() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SinaQuoteData::set_has_bidvolume3() {
  _has_bits_[0] |= 0x00200000u;
}
void SinaQuoteData::clear_has_bidvolume3() {
  _has_bits_[0] &= ~0x00200000u;
}
void SinaQuoteData::clear_bidvolume3() {
  bidvolume3_ = 0;
  clear_has_bidvolume3();
}
 ::google::protobuf::int32 SinaQuoteData::bidvolume3() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidVolume3)
  return bidvolume3_;
}
 void SinaQuoteData::set_bidvolume3(::google::protobuf::int32 value) {
  set_has_bidvolume3();
  bidvolume3_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidVolume3)
}

// optional double askPrice3 = 23;
bool SinaQuoteData::has_askprice3() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SinaQuoteData::set_has_askprice3() {
  _has_bits_[0] |= 0x00400000u;
}
void SinaQuoteData::clear_has_askprice3() {
  _has_bits_[0] &= ~0x00400000u;
}
void SinaQuoteData::clear_askprice3() {
  askprice3_ = 0;
  clear_has_askprice3();
}
 double SinaQuoteData::askprice3() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askPrice3)
  return askprice3_;
}
 void SinaQuoteData::set_askprice3(double value) {
  set_has_askprice3();
  askprice3_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askPrice3)
}

// optional int32 askVolume3 = 24;
bool SinaQuoteData::has_askvolume3() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SinaQuoteData::set_has_askvolume3() {
  _has_bits_[0] |= 0x00800000u;
}
void SinaQuoteData::clear_has_askvolume3() {
  _has_bits_[0] &= ~0x00800000u;
}
void SinaQuoteData::clear_askvolume3() {
  askvolume3_ = 0;
  clear_has_askvolume3();
}
 ::google::protobuf::int32 SinaQuoteData::askvolume3() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askVolume3)
  return askvolume3_;
}
 void SinaQuoteData::set_askvolume3(::google::protobuf::int32 value) {
  set_has_askvolume3();
  askvolume3_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askVolume3)
}

// optional double bidPrice4 = 25;
bool SinaQuoteData::has_bidprice4() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SinaQuoteData::set_has_bidprice4() {
  _has_bits_[0] |= 0x01000000u;
}
void SinaQuoteData::clear_has_bidprice4() {
  _has_bits_[0] &= ~0x01000000u;
}
void SinaQuoteData::clear_bidprice4() {
  bidprice4_ = 0;
  clear_has_bidprice4();
}
 double SinaQuoteData::bidprice4() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidPrice4)
  return bidprice4_;
}
 void SinaQuoteData::set_bidprice4(double value) {
  set_has_bidprice4();
  bidprice4_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidPrice4)
}

// optional int32 bidVolume4 = 26;
bool SinaQuoteData::has_bidvolume4() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SinaQuoteData::set_has_bidvolume4() {
  _has_bits_[0] |= 0x02000000u;
}
void SinaQuoteData::clear_has_bidvolume4() {
  _has_bits_[0] &= ~0x02000000u;
}
void SinaQuoteData::clear_bidvolume4() {
  bidvolume4_ = 0;
  clear_has_bidvolume4();
}
 ::google::protobuf::int32 SinaQuoteData::bidvolume4() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidVolume4)
  return bidvolume4_;
}
 void SinaQuoteData::set_bidvolume4(::google::protobuf::int32 value) {
  set_has_bidvolume4();
  bidvolume4_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidVolume4)
}

// optional double askPrice4 = 27;
bool SinaQuoteData::has_askprice4() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SinaQuoteData::set_has_askprice4() {
  _has_bits_[0] |= 0x04000000u;
}
void SinaQuoteData::clear_has_askprice4() {
  _has_bits_[0] &= ~0x04000000u;
}
void SinaQuoteData::clear_askprice4() {
  askprice4_ = 0;
  clear_has_askprice4();
}
 double SinaQuoteData::askprice4() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askPrice4)
  return askprice4_;
}
 void SinaQuoteData::set_askprice4(double value) {
  set_has_askprice4();
  askprice4_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askPrice4)
}

// optional int32 askVolume4 = 28;
bool SinaQuoteData::has_askvolume4() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SinaQuoteData::set_has_askvolume4() {
  _has_bits_[0] |= 0x08000000u;
}
void SinaQuoteData::clear_has_askvolume4() {
  _has_bits_[0] &= ~0x08000000u;
}
void SinaQuoteData::clear_askvolume4() {
  askvolume4_ = 0;
  clear_has_askvolume4();
}
 ::google::protobuf::int32 SinaQuoteData::askvolume4() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askVolume4)
  return askvolume4_;
}
 void SinaQuoteData::set_askvolume4(::google::protobuf::int32 value) {
  set_has_askvolume4();
  askvolume4_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askVolume4)
}

// optional double bidPrice5 = 29;
bool SinaQuoteData::has_bidprice5() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SinaQuoteData::set_has_bidprice5() {
  _has_bits_[0] |= 0x10000000u;
}
void SinaQuoteData::clear_has_bidprice5() {
  _has_bits_[0] &= ~0x10000000u;
}
void SinaQuoteData::clear_bidprice5() {
  bidprice5_ = 0;
  clear_has_bidprice5();
}
 double SinaQuoteData::bidprice5() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidPrice5)
  return bidprice5_;
}
 void SinaQuoteData::set_bidprice5(double value) {
  set_has_bidprice5();
  bidprice5_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidPrice5)
}

// optional int32 bidVolume5 = 30;
bool SinaQuoteData::has_bidvolume5() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SinaQuoteData::set_has_bidvolume5() {
  _has_bits_[0] |= 0x20000000u;
}
void SinaQuoteData::clear_has_bidvolume5() {
  _has_bits_[0] &= ~0x20000000u;
}
void SinaQuoteData::clear_bidvolume5() {
  bidvolume5_ = 0;
  clear_has_bidvolume5();
}
 ::google::protobuf::int32 SinaQuoteData::bidvolume5() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.bidVolume5)
  return bidvolume5_;
}
 void SinaQuoteData::set_bidvolume5(::google::protobuf::int32 value) {
  set_has_bidvolume5();
  bidvolume5_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.bidVolume5)
}

// optional double askPrice5 = 31;
bool SinaQuoteData::has_askprice5() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SinaQuoteData::set_has_askprice5() {
  _has_bits_[0] |= 0x40000000u;
}
void SinaQuoteData::clear_has_askprice5() {
  _has_bits_[0] &= ~0x40000000u;
}
void SinaQuoteData::clear_askprice5() {
  askprice5_ = 0;
  clear_has_askprice5();
}
 double SinaQuoteData::askprice5() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askPrice5)
  return askprice5_;
}
 void SinaQuoteData::set_askprice5(double value) {
  set_has_askprice5();
  askprice5_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askPrice5)
}

// optional int32 askVolume5 = 32;
bool SinaQuoteData::has_askvolume5() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void SinaQuoteData::set_has_askvolume5() {
  _has_bits_[0] |= 0x80000000u;
}
void SinaQuoteData::clear_has_askvolume5() {
  _has_bits_[0] &= ~0x80000000u;
}
void SinaQuoteData::clear_askvolume5() {
  askvolume5_ = 0;
  clear_has_askvolume5();
}
 ::google::protobuf::int32 SinaQuoteData::askvolume5() const {
  // @@protoc_insertion_point(field_get:XT.SinaQuoteData.askVolume5)
  return askvolume5_;
}
 void SinaQuoteData::set_askvolume5(::google::protobuf::int32 value) {
  set_has_askvolume5();
  askvolume5_ = value;
  // @@protoc_insertion_point(field_set:XT.SinaQuoteData.askVolume5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PyAT_OrderExecutionInfo::kPriceFieldNumber;
const int PyAT_OrderExecutionInfo::kQuantityFieldNumber;
const int PyAT_OrderExecutionInfo::kCommissionFieldNumber;
const int PyAT_OrderExecutionInfo::kFilldatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PyAT_OrderExecutionInfo::PyAT_OrderExecutionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PyAT_OrderExecutionInfo)
}

void PyAT_OrderExecutionInfo::InitAsDefaultInstance() {
}

PyAT_OrderExecutionInfo::PyAT_OrderExecutionInfo(const PyAT_OrderExecutionInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PyAT_OrderExecutionInfo)
}

void PyAT_OrderExecutionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  price_ = 0;
  quantity_ = 0;
  commission_ = 0;
  filldatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyAT_OrderExecutionInfo::~PyAT_OrderExecutionInfo() {
  // @@protoc_insertion_point(destructor:XT.PyAT_OrderExecutionInfo)
  SharedDtor();
}

void PyAT_OrderExecutionInfo::SharedDtor() {
  filldatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PyAT_OrderExecutionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyAT_OrderExecutionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyAT_OrderExecutionInfo_descriptor_;
}

const PyAT_OrderExecutionInfo& PyAT_OrderExecutionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PyAT_OrderExecutionInfo* PyAT_OrderExecutionInfo::default_instance_ = NULL;

PyAT_OrderExecutionInfo* PyAT_OrderExecutionInfo::New(::google::protobuf::Arena* arena) const {
  PyAT_OrderExecutionInfo* n = new PyAT_OrderExecutionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PyAT_OrderExecutionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PyAT_OrderExecutionInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PyAT_OrderExecutionInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PyAT_OrderExecutionInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(price_, commission_);
    quantity_ = 0;
    if (has_filldatetime()) {
      filldatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PyAT_OrderExecutionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PyAT_OrderExecutionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double price = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_commission;
        break;
      }

      // optional double commission = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_filldatetime;
        break;
      }

      // optional string filldatetime = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_filldatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filldatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filldatetime().data(), this->filldatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PyAT_OrderExecutionInfo.filldatetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PyAT_OrderExecutionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PyAT_OrderExecutionInfo)
  return false;
#undef DO_
}

void PyAT_OrderExecutionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PyAT_OrderExecutionInfo)
  // optional double price = 1 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // optional int32 quantity = 2 [default = 0];
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }

  // optional double commission = 3 [default = 0];
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->commission(), output);
  }

  // optional string filldatetime = 4 [default = ""];
  if (has_filldatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filldatetime().data(), this->filldatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderExecutionInfo.filldatetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filldatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PyAT_OrderExecutionInfo)
}

::google::protobuf::uint8* PyAT_OrderExecutionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PyAT_OrderExecutionInfo)
  // optional double price = 1 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // optional int32 quantity = 2 [default = 0];
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }

  // optional double commission = 3 [default = 0];
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->commission(), target);
  }

  // optional string filldatetime = 4 [default = ""];
  if (has_filldatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filldatetime().data(), this->filldatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderExecutionInfo.filldatetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filldatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PyAT_OrderExecutionInfo)
  return target;
}

int PyAT_OrderExecutionInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PyAT_OrderExecutionInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double price = 1 [default = 0];
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional int32 quantity = 2 [default = 0];
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // optional double commission = 3 [default = 0];
    if (has_commission()) {
      total_size += 1 + 8;
    }

    // optional string filldatetime = 4 [default = ""];
    if (has_filldatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filldatetime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyAT_OrderExecutionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PyAT_OrderExecutionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PyAT_OrderExecutionInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PyAT_OrderExecutionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PyAT_OrderExecutionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PyAT_OrderExecutionInfo)
    MergeFrom(*source);
  }
}

void PyAT_OrderExecutionInfo::MergeFrom(const PyAT_OrderExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PyAT_OrderExecutionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_filldatetime()) {
      set_has_filldatetime();
      filldatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filldatetime_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PyAT_OrderExecutionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PyAT_OrderExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyAT_OrderExecutionInfo::CopyFrom(const PyAT_OrderExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PyAT_OrderExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyAT_OrderExecutionInfo::IsInitialized() const {

  return true;
}

void PyAT_OrderExecutionInfo::Swap(PyAT_OrderExecutionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PyAT_OrderExecutionInfo::InternalSwap(PyAT_OrderExecutionInfo* other) {
  std::swap(price_, other->price_);
  std::swap(quantity_, other->quantity_);
  std::swap(commission_, other->commission_);
  filldatetime_.Swap(&other->filldatetime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PyAT_OrderExecutionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyAT_OrderExecutionInfo_descriptor_;
  metadata.reflection = PyAT_OrderExecutionInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PyAT_OrderExecutionInfo

// optional double price = 1 [default = 0];
bool PyAT_OrderExecutionInfo::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PyAT_OrderExecutionInfo::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
void PyAT_OrderExecutionInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
void PyAT_OrderExecutionInfo::clear_price() {
  price_ = 0;
  clear_has_price();
}
 double PyAT_OrderExecutionInfo::price() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderExecutionInfo.price)
  return price_;
}
 void PyAT_OrderExecutionInfo::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderExecutionInfo.price)
}

// optional int32 quantity = 2 [default = 0];
bool PyAT_OrderExecutionInfo::has_quantity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PyAT_OrderExecutionInfo::set_has_quantity() {
  _has_bits_[0] |= 0x00000002u;
}
void PyAT_OrderExecutionInfo::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000002u;
}
void PyAT_OrderExecutionInfo::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
 ::google::protobuf::int32 PyAT_OrderExecutionInfo::quantity() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderExecutionInfo.quantity)
  return quantity_;
}
 void PyAT_OrderExecutionInfo::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderExecutionInfo.quantity)
}

// optional double commission = 3 [default = 0];
bool PyAT_OrderExecutionInfo::has_commission() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PyAT_OrderExecutionInfo::set_has_commission() {
  _has_bits_[0] |= 0x00000004u;
}
void PyAT_OrderExecutionInfo::clear_has_commission() {
  _has_bits_[0] &= ~0x00000004u;
}
void PyAT_OrderExecutionInfo::clear_commission() {
  commission_ = 0;
  clear_has_commission();
}
 double PyAT_OrderExecutionInfo::commission() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderExecutionInfo.commission)
  return commission_;
}
 void PyAT_OrderExecutionInfo::set_commission(double value) {
  set_has_commission();
  commission_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderExecutionInfo.commission)
}

// optional string filldatetime = 4 [default = ""];
bool PyAT_OrderExecutionInfo::has_filldatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PyAT_OrderExecutionInfo::set_has_filldatetime() {
  _has_bits_[0] |= 0x00000008u;
}
void PyAT_OrderExecutionInfo::clear_has_filldatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
void PyAT_OrderExecutionInfo::clear_filldatetime() {
  filldatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filldatetime();
}
 const ::std::string& PyAT_OrderExecutionInfo::filldatetime() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderExecutionInfo.filldatetime)
  return filldatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderExecutionInfo::set_filldatetime(const ::std::string& value) {
  set_has_filldatetime();
  filldatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderExecutionInfo.filldatetime)
}
 void PyAT_OrderExecutionInfo::set_filldatetime(const char* value) {
  set_has_filldatetime();
  filldatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PyAT_OrderExecutionInfo.filldatetime)
}
 void PyAT_OrderExecutionInfo::set_filldatetime(const char* value, size_t size) {
  set_has_filldatetime();
  filldatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PyAT_OrderExecutionInfo.filldatetime)
}
 ::std::string* PyAT_OrderExecutionInfo::mutable_filldatetime() {
  set_has_filldatetime();
  // @@protoc_insertion_point(field_mutable:XT.PyAT_OrderExecutionInfo.filldatetime)
  return filldatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PyAT_OrderExecutionInfo::release_filldatetime() {
  // @@protoc_insertion_point(field_release:XT.PyAT_OrderExecutionInfo.filldatetime)
  clear_has_filldatetime();
  return filldatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderExecutionInfo::set_allocated_filldatetime(::std::string* filldatetime) {
  if (filldatetime != NULL) {
    set_has_filldatetime();
  } else {
    clear_has_filldatetime();
  }
  filldatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filldatetime);
  // @@protoc_insertion_point(field_set_allocated:XT.PyAT_OrderExecutionInfo.filldatetime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PyAT_OrderData::kIdFieldNumber;
const int PyAT_OrderData::kOrdertypeFieldNumber;
const int PyAT_OrderData::kOrderactionFieldNumber;
const int PyAT_OrderData::kInstrumentidFieldNumber;
const int PyAT_OrderData::kQuantityFieldNumber;
const int PyAT_OrderData::kFilledszFieldNumber;
const int PyAT_OrderData::kAvgfillpriceFieldNumber;
const int PyAT_OrderData::kGoodtillcanceledFieldNumber;
const int PyAT_OrderData::kCommissionsFieldNumber;
const int PyAT_OrderData::kAllornoneFieldNumber;
const int PyAT_OrderData::kOrderstateFieldNumber;
const int PyAT_OrderData::kSubmitdatetimeFieldNumber;
const int PyAT_OrderData::kExecutionpriceFieldNumber;
const int PyAT_OrderData::kExecutionquantityFieldNumber;
const int PyAT_OrderData::kExecutioncommissionFieldNumber;
const int PyAT_OrderData::kExecutiondatetimeFieldNumber;
const int PyAT_OrderData::kXtoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PyAT_OrderData::PyAT_OrderData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT.PyAT_OrderData)
}

void PyAT_OrderData::InitAsDefaultInstance() {
}

PyAT_OrderData::PyAT_OrderData(const PyAT_OrderData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT.PyAT_OrderData)
}

void PyAT_OrderData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  ordertype_ = 0;
  orderaction_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
  filledsz_ = 0;
  avgfillprice_ = 0;
  goodtillcanceled_ = true;
  commissions_ = 0;
  allornone_ = false;
  orderstate_ = 0;
  submitdatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executionprice_ = 0;
  executionquantity_ = 0;
  executioncommission_ = 0;
  executiondatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xtoid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PyAT_OrderData::~PyAT_OrderData() {
  // @@protoc_insertion_point(destructor:XT.PyAT_OrderData)
  SharedDtor();
}

void PyAT_OrderData::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submitdatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executiondatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PyAT_OrderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PyAT_OrderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PyAT_OrderData_descriptor_;
}

const PyAT_OrderData& PyAT_OrderData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XTData_2eproto();
  return *default_instance_;
}

PyAT_OrderData* PyAT_OrderData::default_instance_ = NULL;

PyAT_OrderData* PyAT_OrderData::New(::google::protobuf::Arena* arena) const {
  PyAT_OrderData* n = new PyAT_OrderData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PyAT_OrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:XT.PyAT_OrderData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PyAT_OrderData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PyAT_OrderData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, ordertype_);
    ZR_(orderaction_, filledsz_);
    if (has_instrumentid()) {
      instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    goodtillcanceled_ = true;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(allornone_, commissions_);
    ZR_(orderstate_, executioncommission_);
    if (has_submitdatetime()) {
      submitdatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_executiondatetime()) {
      executiondatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  xtoid_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PyAT_OrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XT.PyAT_OrderData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ordertype;
        break;
      }

      // optional int32 ordertype = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_ordertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertype_)));
          set_has_ordertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderaction;
        break;
      }

      // optional int32 orderaction = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_orderaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderaction_)));
          set_has_orderaction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_instrumentid;
        break;
      }

      // optional string instrumentid = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_instrumentid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PyAT_OrderData.instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_filledsz;
        break;
      }

      // optional int32 filledsz = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_filledsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filledsz_)));
          set_has_filledsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_avgfillprice;
        break;
      }

      // optional double avgfillprice = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_avgfillprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgfillprice_)));
          set_has_avgfillprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_goodtillcanceled;
        break;
      }

      // optional bool goodtillcanceled = 8 [default = true];
      case 8: {
        if (tag == 64) {
         parse_goodtillcanceled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &goodtillcanceled_)));
          set_has_goodtillcanceled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_commissions;
        break;
      }

      // optional double commissions = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_commissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commissions_)));
          set_has_commissions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_allornone;
        break;
      }

      // optional bool allornone = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_allornone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allornone_)));
          set_has_allornone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_orderstate;
        break;
      }

      // optional int32 orderstate = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_orderstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderstate_)));
          set_has_orderstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_submitdatetime;
        break;
      }

      // optional string submitdatetime = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_submitdatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submitdatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->submitdatetime().data(), this->submitdatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PyAT_OrderData.submitdatetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_executionprice;
        break;
      }

      // optional double executionprice = 20 [default = 0];
      case 20: {
        if (tag == 161) {
         parse_executionprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &executionprice_)));
          set_has_executionprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_executionquantity;
        break;
      }

      // optional int32 executionquantity = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_executionquantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &executionquantity_)));
          set_has_executionquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_executioncommission;
        break;
      }

      // optional double executioncommission = 22 [default = 0];
      case 22: {
        if (tag == 177) {
         parse_executioncommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &executioncommission_)));
          set_has_executioncommission();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_executiondatetime;
        break;
      }

      // optional string executiondatetime = 23 [default = ""];
      case 23: {
        if (tag == 186) {
         parse_executiondatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executiondatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->executiondatetime().data(), this->executiondatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "XT.PyAT_OrderData.executiondatetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_xtoid;
        break;
      }

      // optional int32 xtoid = 30 [default = 0];
      case 30: {
        if (tag == 240) {
         parse_xtoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xtoid_)));
          set_has_xtoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT.PyAT_OrderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT.PyAT_OrderData)
  return false;
#undef DO_
}

void PyAT_OrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT.PyAT_OrderData)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 ordertype = 2 [default = 0];
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordertype(), output);
  }

  // optional int32 orderaction = 3 [default = 0];
  if (has_orderaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderaction(), output);
  }

  // optional string instrumentid = 4 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderData.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrumentid(), output);
  }

  // optional int32 quantity = 5 [default = 0];
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quantity(), output);
  }

  // optional int32 filledsz = 6 [default = 0];
  if (has_filledsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->filledsz(), output);
  }

  // optional double avgfillprice = 7 [default = 0];
  if (has_avgfillprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->avgfillprice(), output);
  }

  // optional bool goodtillcanceled = 8 [default = true];
  if (has_goodtillcanceled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->goodtillcanceled(), output);
  }

  // optional double commissions = 9 [default = 0];
  if (has_commissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->commissions(), output);
  }

  // optional bool allornone = 10 [default = false];
  if (has_allornone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allornone(), output);
  }

  // optional int32 orderstate = 11 [default = 0];
  if (has_orderstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->orderstate(), output);
  }

  // optional string submitdatetime = 12 [default = ""];
  if (has_submitdatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->submitdatetime().data(), this->submitdatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderData.submitdatetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->submitdatetime(), output);
  }

  // optional double executionprice = 20 [default = 0];
  if (has_executionprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->executionprice(), output);
  }

  // optional int32 executionquantity = 21 [default = 0];
  if (has_executionquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->executionquantity(), output);
  }

  // optional double executioncommission = 22 [default = 0];
  if (has_executioncommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->executioncommission(), output);
  }

  // optional string executiondatetime = 23 [default = ""];
  if (has_executiondatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->executiondatetime().data(), this->executiondatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderData.executiondatetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->executiondatetime(), output);
  }

  // optional int32 xtoid = 30 [default = 0];
  if (has_xtoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->xtoid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XT.PyAT_OrderData)
}

::google::protobuf::uint8* PyAT_OrderData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XT.PyAT_OrderData)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 ordertype = 2 [default = 0];
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordertype(), target);
  }

  // optional int32 orderaction = 3 [default = 0];
  if (has_orderaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderaction(), target);
  }

  // optional string instrumentid = 4 [default = ""];
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderData.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrumentid(), target);
  }

  // optional int32 quantity = 5 [default = 0];
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quantity(), target);
  }

  // optional int32 filledsz = 6 [default = 0];
  if (has_filledsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->filledsz(), target);
  }

  // optional double avgfillprice = 7 [default = 0];
  if (has_avgfillprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->avgfillprice(), target);
  }

  // optional bool goodtillcanceled = 8 [default = true];
  if (has_goodtillcanceled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->goodtillcanceled(), target);
  }

  // optional double commissions = 9 [default = 0];
  if (has_commissions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->commissions(), target);
  }

  // optional bool allornone = 10 [default = false];
  if (has_allornone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allornone(), target);
  }

  // optional int32 orderstate = 11 [default = 0];
  if (has_orderstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->orderstate(), target);
  }

  // optional string submitdatetime = 12 [default = ""];
  if (has_submitdatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->submitdatetime().data(), this->submitdatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderData.submitdatetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->submitdatetime(), target);
  }

  // optional double executionprice = 20 [default = 0];
  if (has_executionprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->executionprice(), target);
  }

  // optional int32 executionquantity = 21 [default = 0];
  if (has_executionquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->executionquantity(), target);
  }

  // optional double executioncommission = 22 [default = 0];
  if (has_executioncommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->executioncommission(), target);
  }

  // optional string executiondatetime = 23 [default = ""];
  if (has_executiondatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->executiondatetime().data(), this->executiondatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "XT.PyAT_OrderData.executiondatetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->executiondatetime(), target);
  }

  // optional int32 xtoid = 30 [default = 0];
  if (has_xtoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->xtoid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XT.PyAT_OrderData)
  return target;
}

int PyAT_OrderData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XT.PyAT_OrderData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 ordertype = 2 [default = 0];
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordertype());
    }

    // optional int32 orderaction = 3 [default = 0];
    if (has_orderaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderaction());
    }

    // optional string instrumentid = 4 [default = ""];
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional int32 quantity = 5 [default = 0];
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // optional int32 filledsz = 6 [default = 0];
    if (has_filledsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filledsz());
    }

    // optional double avgfillprice = 7 [default = 0];
    if (has_avgfillprice()) {
      total_size += 1 + 8;
    }

    // optional bool goodtillcanceled = 8 [default = true];
    if (has_goodtillcanceled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double commissions = 9 [default = 0];
    if (has_commissions()) {
      total_size += 1 + 8;
    }

    // optional bool allornone = 10 [default = false];
    if (has_allornone()) {
      total_size += 1 + 1;
    }

    // optional int32 orderstate = 11 [default = 0];
    if (has_orderstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderstate());
    }

    // optional string submitdatetime = 12 [default = ""];
    if (has_submitdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->submitdatetime());
    }

    // optional double executionprice = 20 [default = 0];
    if (has_executionprice()) {
      total_size += 2 + 8;
    }

    // optional int32 executionquantity = 21 [default = 0];
    if (has_executionquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->executionquantity());
    }

    // optional double executioncommission = 22 [default = 0];
    if (has_executioncommission()) {
      total_size += 2 + 8;
    }

    // optional string executiondatetime = 23 [default = ""];
    if (has_executiondatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executiondatetime());
    }

  }
  // optional int32 xtoid = 30 [default = 0];
  if (has_xtoid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xtoid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PyAT_OrderData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XT.PyAT_OrderData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PyAT_OrderData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PyAT_OrderData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XT.PyAT_OrderData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XT.PyAT_OrderData)
    MergeFrom(*source);
  }
}

void PyAT_OrderData::MergeFrom(const PyAT_OrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XT.PyAT_OrderData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_orderaction()) {
      set_orderaction(from.orderaction());
    }
    if (from.has_instrumentid()) {
      set_has_instrumentid();
      instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_filledsz()) {
      set_filledsz(from.filledsz());
    }
    if (from.has_avgfillprice()) {
      set_avgfillprice(from.avgfillprice());
    }
    if (from.has_goodtillcanceled()) {
      set_goodtillcanceled(from.goodtillcanceled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_commissions()) {
      set_commissions(from.commissions());
    }
    if (from.has_allornone()) {
      set_allornone(from.allornone());
    }
    if (from.has_orderstate()) {
      set_orderstate(from.orderstate());
    }
    if (from.has_submitdatetime()) {
      set_has_submitdatetime();
      submitdatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submitdatetime_);
    }
    if (from.has_executionprice()) {
      set_executionprice(from.executionprice());
    }
    if (from.has_executionquantity()) {
      set_executionquantity(from.executionquantity());
    }
    if (from.has_executioncommission()) {
      set_executioncommission(from.executioncommission());
    }
    if (from.has_executiondatetime()) {
      set_has_executiondatetime();
      executiondatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.executiondatetime_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xtoid()) {
      set_xtoid(from.xtoid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PyAT_OrderData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XT.PyAT_OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PyAT_OrderData::CopyFrom(const PyAT_OrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XT.PyAT_OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PyAT_OrderData::IsInitialized() const {

  return true;
}

void PyAT_OrderData::Swap(PyAT_OrderData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PyAT_OrderData::InternalSwap(PyAT_OrderData* other) {
  std::swap(id_, other->id_);
  std::swap(ordertype_, other->ordertype_);
  std::swap(orderaction_, other->orderaction_);
  instrumentid_.Swap(&other->instrumentid_);
  std::swap(quantity_, other->quantity_);
  std::swap(filledsz_, other->filledsz_);
  std::swap(avgfillprice_, other->avgfillprice_);
  std::swap(goodtillcanceled_, other->goodtillcanceled_);
  std::swap(commissions_, other->commissions_);
  std::swap(allornone_, other->allornone_);
  std::swap(orderstate_, other->orderstate_);
  submitdatetime_.Swap(&other->submitdatetime_);
  std::swap(executionprice_, other->executionprice_);
  std::swap(executionquantity_, other->executionquantity_);
  std::swap(executioncommission_, other->executioncommission_);
  executiondatetime_.Swap(&other->executiondatetime_);
  std::swap(xtoid_, other->xtoid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PyAT_OrderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PyAT_OrderData_descriptor_;
  metadata.reflection = PyAT_OrderData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PyAT_OrderData

// optional int32 id = 1 [default = 0];
bool PyAT_OrderData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PyAT_OrderData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PyAT_OrderData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PyAT_OrderData::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 PyAT_OrderData::id() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.id)
  return id_;
}
 void PyAT_OrderData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.id)
}

// optional int32 ordertype = 2 [default = 0];
bool PyAT_OrderData::has_ordertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PyAT_OrderData::set_has_ordertype() {
  _has_bits_[0] |= 0x00000002u;
}
void PyAT_OrderData::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000002u;
}
void PyAT_OrderData::clear_ordertype() {
  ordertype_ = 0;
  clear_has_ordertype();
}
 ::google::protobuf::int32 PyAT_OrderData::ordertype() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.ordertype)
  return ordertype_;
}
 void PyAT_OrderData::set_ordertype(::google::protobuf::int32 value) {
  set_has_ordertype();
  ordertype_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.ordertype)
}

// optional int32 orderaction = 3 [default = 0];
bool PyAT_OrderData::has_orderaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PyAT_OrderData::set_has_orderaction() {
  _has_bits_[0] |= 0x00000004u;
}
void PyAT_OrderData::clear_has_orderaction() {
  _has_bits_[0] &= ~0x00000004u;
}
void PyAT_OrderData::clear_orderaction() {
  orderaction_ = 0;
  clear_has_orderaction();
}
 ::google::protobuf::int32 PyAT_OrderData::orderaction() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.orderaction)
  return orderaction_;
}
 void PyAT_OrderData::set_orderaction(::google::protobuf::int32 value) {
  set_has_orderaction();
  orderaction_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.orderaction)
}

// optional string instrumentid = 4 [default = ""];
bool PyAT_OrderData::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PyAT_OrderData::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000008u;
}
void PyAT_OrderData::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PyAT_OrderData::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrumentid();
}
 const ::std::string& PyAT_OrderData::instrumentid() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.instrumentid)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderData::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.instrumentid)
}
 void PyAT_OrderData::set_instrumentid(const char* value) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PyAT_OrderData.instrumentid)
}
 void PyAT_OrderData::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PyAT_OrderData.instrumentid)
}
 ::std::string* PyAT_OrderData::mutable_instrumentid() {
  set_has_instrumentid();
  // @@protoc_insertion_point(field_mutable:XT.PyAT_OrderData.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PyAT_OrderData::release_instrumentid() {
  // @@protoc_insertion_point(field_release:XT.PyAT_OrderData.instrumentid)
  clear_has_instrumentid();
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderData::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    set_has_instrumentid();
  } else {
    clear_has_instrumentid();
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:XT.PyAT_OrderData.instrumentid)
}

// optional int32 quantity = 5 [default = 0];
bool PyAT_OrderData::has_quantity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PyAT_OrderData::set_has_quantity() {
  _has_bits_[0] |= 0x00000010u;
}
void PyAT_OrderData::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000010u;
}
void PyAT_OrderData::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
 ::google::protobuf::int32 PyAT_OrderData::quantity() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.quantity)
  return quantity_;
}
 void PyAT_OrderData::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.quantity)
}

// optional int32 filledsz = 6 [default = 0];
bool PyAT_OrderData::has_filledsz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PyAT_OrderData::set_has_filledsz() {
  _has_bits_[0] |= 0x00000020u;
}
void PyAT_OrderData::clear_has_filledsz() {
  _has_bits_[0] &= ~0x00000020u;
}
void PyAT_OrderData::clear_filledsz() {
  filledsz_ = 0;
  clear_has_filledsz();
}
 ::google::protobuf::int32 PyAT_OrderData::filledsz() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.filledsz)
  return filledsz_;
}
 void PyAT_OrderData::set_filledsz(::google::protobuf::int32 value) {
  set_has_filledsz();
  filledsz_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.filledsz)
}

// optional double avgfillprice = 7 [default = 0];
bool PyAT_OrderData::has_avgfillprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PyAT_OrderData::set_has_avgfillprice() {
  _has_bits_[0] |= 0x00000040u;
}
void PyAT_OrderData::clear_has_avgfillprice() {
  _has_bits_[0] &= ~0x00000040u;
}
void PyAT_OrderData::clear_avgfillprice() {
  avgfillprice_ = 0;
  clear_has_avgfillprice();
}
 double PyAT_OrderData::avgfillprice() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.avgfillprice)
  return avgfillprice_;
}
 void PyAT_OrderData::set_avgfillprice(double value) {
  set_has_avgfillprice();
  avgfillprice_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.avgfillprice)
}

// optional bool goodtillcanceled = 8 [default = true];
bool PyAT_OrderData::has_goodtillcanceled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PyAT_OrderData::set_has_goodtillcanceled() {
  _has_bits_[0] |= 0x00000080u;
}
void PyAT_OrderData::clear_has_goodtillcanceled() {
  _has_bits_[0] &= ~0x00000080u;
}
void PyAT_OrderData::clear_goodtillcanceled() {
  goodtillcanceled_ = true;
  clear_has_goodtillcanceled();
}
 bool PyAT_OrderData::goodtillcanceled() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.goodtillcanceled)
  return goodtillcanceled_;
}
 void PyAT_OrderData::set_goodtillcanceled(bool value) {
  set_has_goodtillcanceled();
  goodtillcanceled_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.goodtillcanceled)
}

// optional double commissions = 9 [default = 0];
bool PyAT_OrderData::has_commissions() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PyAT_OrderData::set_has_commissions() {
  _has_bits_[0] |= 0x00000100u;
}
void PyAT_OrderData::clear_has_commissions() {
  _has_bits_[0] &= ~0x00000100u;
}
void PyAT_OrderData::clear_commissions() {
  commissions_ = 0;
  clear_has_commissions();
}
 double PyAT_OrderData::commissions() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.commissions)
  return commissions_;
}
 void PyAT_OrderData::set_commissions(double value) {
  set_has_commissions();
  commissions_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.commissions)
}

// optional bool allornone = 10 [default = false];
bool PyAT_OrderData::has_allornone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PyAT_OrderData::set_has_allornone() {
  _has_bits_[0] |= 0x00000200u;
}
void PyAT_OrderData::clear_has_allornone() {
  _has_bits_[0] &= ~0x00000200u;
}
void PyAT_OrderData::clear_allornone() {
  allornone_ = false;
  clear_has_allornone();
}
 bool PyAT_OrderData::allornone() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.allornone)
  return allornone_;
}
 void PyAT_OrderData::set_allornone(bool value) {
  set_has_allornone();
  allornone_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.allornone)
}

// optional int32 orderstate = 11 [default = 0];
bool PyAT_OrderData::has_orderstate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PyAT_OrderData::set_has_orderstate() {
  _has_bits_[0] |= 0x00000400u;
}
void PyAT_OrderData::clear_has_orderstate() {
  _has_bits_[0] &= ~0x00000400u;
}
void PyAT_OrderData::clear_orderstate() {
  orderstate_ = 0;
  clear_has_orderstate();
}
 ::google::protobuf::int32 PyAT_OrderData::orderstate() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.orderstate)
  return orderstate_;
}
 void PyAT_OrderData::set_orderstate(::google::protobuf::int32 value) {
  set_has_orderstate();
  orderstate_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.orderstate)
}

// optional string submitdatetime = 12 [default = ""];
bool PyAT_OrderData::has_submitdatetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PyAT_OrderData::set_has_submitdatetime() {
  _has_bits_[0] |= 0x00000800u;
}
void PyAT_OrderData::clear_has_submitdatetime() {
  _has_bits_[0] &= ~0x00000800u;
}
void PyAT_OrderData::clear_submitdatetime() {
  submitdatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_submitdatetime();
}
 const ::std::string& PyAT_OrderData::submitdatetime() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.submitdatetime)
  return submitdatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderData::set_submitdatetime(const ::std::string& value) {
  set_has_submitdatetime();
  submitdatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.submitdatetime)
}
 void PyAT_OrderData::set_submitdatetime(const char* value) {
  set_has_submitdatetime();
  submitdatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PyAT_OrderData.submitdatetime)
}
 void PyAT_OrderData::set_submitdatetime(const char* value, size_t size) {
  set_has_submitdatetime();
  submitdatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PyAT_OrderData.submitdatetime)
}
 ::std::string* PyAT_OrderData::mutable_submitdatetime() {
  set_has_submitdatetime();
  // @@protoc_insertion_point(field_mutable:XT.PyAT_OrderData.submitdatetime)
  return submitdatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PyAT_OrderData::release_submitdatetime() {
  // @@protoc_insertion_point(field_release:XT.PyAT_OrderData.submitdatetime)
  clear_has_submitdatetime();
  return submitdatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderData::set_allocated_submitdatetime(::std::string* submitdatetime) {
  if (submitdatetime != NULL) {
    set_has_submitdatetime();
  } else {
    clear_has_submitdatetime();
  }
  submitdatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), submitdatetime);
  // @@protoc_insertion_point(field_set_allocated:XT.PyAT_OrderData.submitdatetime)
}

// optional double executionprice = 20 [default = 0];
bool PyAT_OrderData::has_executionprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PyAT_OrderData::set_has_executionprice() {
  _has_bits_[0] |= 0x00001000u;
}
void PyAT_OrderData::clear_has_executionprice() {
  _has_bits_[0] &= ~0x00001000u;
}
void PyAT_OrderData::clear_executionprice() {
  executionprice_ = 0;
  clear_has_executionprice();
}
 double PyAT_OrderData::executionprice() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.executionprice)
  return executionprice_;
}
 void PyAT_OrderData::set_executionprice(double value) {
  set_has_executionprice();
  executionprice_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.executionprice)
}

// optional int32 executionquantity = 21 [default = 0];
bool PyAT_OrderData::has_executionquantity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PyAT_OrderData::set_has_executionquantity() {
  _has_bits_[0] |= 0x00002000u;
}
void PyAT_OrderData::clear_has_executionquantity() {
  _has_bits_[0] &= ~0x00002000u;
}
void PyAT_OrderData::clear_executionquantity() {
  executionquantity_ = 0;
  clear_has_executionquantity();
}
 ::google::protobuf::int32 PyAT_OrderData::executionquantity() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.executionquantity)
  return executionquantity_;
}
 void PyAT_OrderData::set_executionquantity(::google::protobuf::int32 value) {
  set_has_executionquantity();
  executionquantity_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.executionquantity)
}

// optional double executioncommission = 22 [default = 0];
bool PyAT_OrderData::has_executioncommission() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PyAT_OrderData::set_has_executioncommission() {
  _has_bits_[0] |= 0x00004000u;
}
void PyAT_OrderData::clear_has_executioncommission() {
  _has_bits_[0] &= ~0x00004000u;
}
void PyAT_OrderData::clear_executioncommission() {
  executioncommission_ = 0;
  clear_has_executioncommission();
}
 double PyAT_OrderData::executioncommission() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.executioncommission)
  return executioncommission_;
}
 void PyAT_OrderData::set_executioncommission(double value) {
  set_has_executioncommission();
  executioncommission_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.executioncommission)
}

// optional string executiondatetime = 23 [default = ""];
bool PyAT_OrderData::has_executiondatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PyAT_OrderData::set_has_executiondatetime() {
  _has_bits_[0] |= 0x00008000u;
}
void PyAT_OrderData::clear_has_executiondatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
void PyAT_OrderData::clear_executiondatetime() {
  executiondatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_executiondatetime();
}
 const ::std::string& PyAT_OrderData::executiondatetime() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.executiondatetime)
  return executiondatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderData::set_executiondatetime(const ::std::string& value) {
  set_has_executiondatetime();
  executiondatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.executiondatetime)
}
 void PyAT_OrderData::set_executiondatetime(const char* value) {
  set_has_executiondatetime();
  executiondatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XT.PyAT_OrderData.executiondatetime)
}
 void PyAT_OrderData::set_executiondatetime(const char* value, size_t size) {
  set_has_executiondatetime();
  executiondatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XT.PyAT_OrderData.executiondatetime)
}
 ::std::string* PyAT_OrderData::mutable_executiondatetime() {
  set_has_executiondatetime();
  // @@protoc_insertion_point(field_mutable:XT.PyAT_OrderData.executiondatetime)
  return executiondatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PyAT_OrderData::release_executiondatetime() {
  // @@protoc_insertion_point(field_release:XT.PyAT_OrderData.executiondatetime)
  clear_has_executiondatetime();
  return executiondatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PyAT_OrderData::set_allocated_executiondatetime(::std::string* executiondatetime) {
  if (executiondatetime != NULL) {
    set_has_executiondatetime();
  } else {
    clear_has_executiondatetime();
  }
  executiondatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executiondatetime);
  // @@protoc_insertion_point(field_set_allocated:XT.PyAT_OrderData.executiondatetime)
}

// optional int32 xtoid = 30 [default = 0];
bool PyAT_OrderData::has_xtoid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PyAT_OrderData::set_has_xtoid() {
  _has_bits_[0] |= 0x00010000u;
}
void PyAT_OrderData::clear_has_xtoid() {
  _has_bits_[0] &= ~0x00010000u;
}
void PyAT_OrderData::clear_xtoid() {
  xtoid_ = 0;
  clear_has_xtoid();
}
 ::google::protobuf::int32 PyAT_OrderData::xtoid() const {
  // @@protoc_insertion_point(field_get:XT.PyAT_OrderData.xtoid)
  return xtoid_;
}
 void PyAT_OrderData::set_xtoid(::google::protobuf::int32 value) {
  set_has_xtoid();
  xtoid_ = value;
  // @@protoc_insertion_point(field_set:XT.PyAT_OrderData.xtoid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace XT

// @@protoc_insertion_point(global_scope)
