// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IBEnum.proto

#ifndef PROTOBUF_IBEnum_2eproto__INCLUDED
#define PROTOBUF_IBEnum_2eproto__INCLUDED

#include <string>
#include "XTConfig.h"
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace IB {

// Internal implementation detail -- do not call these.
void XT_COMMON_API protobuf_AddDesc_IBEnum_2eproto();
void protobuf_AssignDesc_IBEnum_2eproto();
void protobuf_ShutdownFile_IBEnum_2eproto();

class IBAuctionStrategy;
class IBFaDataType;
class IBLegOpenClose;
class IBMarketDataType;
class IBOriginType;
class IBTickType;

enum IBFaDataType_enumtype {
  IBFaDataType_enumtype_Unknown = 0,
  IBFaDataType_enumtype_GROUPS = 1,
  IBFaDataType_enumtype_PROFILES = 2,
  IBFaDataType_enumtype_ALIASES = 3
};
XT_COMMON_API bool IBFaDataType_enumtype_IsValid(int value);
const IBFaDataType_enumtype IBFaDataType_enumtype_enumtype_MIN = IBFaDataType_enumtype_Unknown;
const IBFaDataType_enumtype IBFaDataType_enumtype_enumtype_MAX = IBFaDataType_enumtype_ALIASES;
const int IBFaDataType_enumtype_enumtype_ARRAYSIZE = IBFaDataType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* IBFaDataType_enumtype_descriptor();
inline const ::std::string& IBFaDataType_enumtype_Name(IBFaDataType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    IBFaDataType_enumtype_descriptor(), value);
}
inline bool IBFaDataType_enumtype_Parse(
    const ::std::string& name, IBFaDataType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IBFaDataType_enumtype>(
    IBFaDataType_enumtype_descriptor(), name, value);
}
enum IBMarketDataType_enumtype {
  IBMarketDataType_enumtype_Unknown = 0,
  IBMarketDataType_enumtype_REALTIME = 1,
  IBMarketDataType_enumtype_FROZEN = 2
};
XT_COMMON_API bool IBMarketDataType_enumtype_IsValid(int value);
const IBMarketDataType_enumtype IBMarketDataType_enumtype_enumtype_MIN = IBMarketDataType_enumtype_Unknown;
const IBMarketDataType_enumtype IBMarketDataType_enumtype_enumtype_MAX = IBMarketDataType_enumtype_FROZEN;
const int IBMarketDataType_enumtype_enumtype_ARRAYSIZE = IBMarketDataType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* IBMarketDataType_enumtype_descriptor();
inline const ::std::string& IBMarketDataType_enumtype_Name(IBMarketDataType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    IBMarketDataType_enumtype_descriptor(), value);
}
inline bool IBMarketDataType_enumtype_Parse(
    const ::std::string& name, IBMarketDataType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IBMarketDataType_enumtype>(
    IBMarketDataType_enumtype_descriptor(), name, value);
}
enum IBLegOpenClose_enumtype {
  IBLegOpenClose_enumtype_SAME_POS = 0,
  IBLegOpenClose_enumtype_OPEN_POS = 1,
  IBLegOpenClose_enumtype_CLOSE_POS = 2,
  IBLegOpenClose_enumtype_UNKNOWN_POS = 3
};
XT_COMMON_API bool IBLegOpenClose_enumtype_IsValid(int value);
const IBLegOpenClose_enumtype IBLegOpenClose_enumtype_enumtype_MIN = IBLegOpenClose_enumtype_SAME_POS;
const IBLegOpenClose_enumtype IBLegOpenClose_enumtype_enumtype_MAX = IBLegOpenClose_enumtype_UNKNOWN_POS;
const int IBLegOpenClose_enumtype_enumtype_ARRAYSIZE = IBLegOpenClose_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* IBLegOpenClose_enumtype_descriptor();
inline const ::std::string& IBLegOpenClose_enumtype_Name(IBLegOpenClose_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    IBLegOpenClose_enumtype_descriptor(), value);
}
inline bool IBLegOpenClose_enumtype_Parse(
    const ::std::string& name, IBLegOpenClose_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IBLegOpenClose_enumtype>(
    IBLegOpenClose_enumtype_descriptor(), name, value);
}
enum IBTickType_enumtype {
  IBTickType_enumtype_BID_SIZE = 0,
  IBTickType_enumtype_BID = 1,
  IBTickType_enumtype_ASK = 2,
  IBTickType_enumtype_ASK_SIZE = 3,
  IBTickType_enumtype_LAST = 4,
  IBTickType_enumtype_LAST_SIZE = 5,
  IBTickType_enumtype_HIGH = 6,
  IBTickType_enumtype_LOW = 7,
  IBTickType_enumtype_VOLUME = 8,
  IBTickType_enumtype_CLOSE = 9,
  IBTickType_enumtype_BID_OPTION_COMPUTATION = 10,
  IBTickType_enumtype_ASK_OPTION_COMPUTATION = 11,
  IBTickType_enumtype_LAST_OPTION_COMPUTATION = 12,
  IBTickType_enumtype_MODEL_OPTION = 13,
  IBTickType_enumtype_OPEN = 14,
  IBTickType_enumtype_LOW_13_WEEK = 15,
  IBTickType_enumtype_HIGH_13_WEEK = 16,
  IBTickType_enumtype_LOW_26_WEEK = 17,
  IBTickType_enumtype_HIGH_26_WEEK = 18,
  IBTickType_enumtype_LOW_52_WEEK = 19,
  IBTickType_enumtype_HIGH_52_WEEK = 20,
  IBTickType_enumtype_AVG_VOLUME = 21,
  IBTickType_enumtype_OPEN_INTEREST = 22,
  IBTickType_enumtype_OPTION_HISTORICAL_VOL = 23,
  IBTickType_enumtype_OPTION_IMPLIED_VOL = 24,
  IBTickType_enumtype_OPTION_BID_EXCH = 25,
  IBTickType_enumtype_OPTION_ASK_EXCH = 26,
  IBTickType_enumtype_OPTION_CALL_OPEN_INTEREST = 27,
  IBTickType_enumtype_OPTION_PUT_OPEN_INTEREST = 28,
  IBTickType_enumtype_OPTION_CALL_VOLUME = 29,
  IBTickType_enumtype_OPTION_PUT_VOLUME = 30,
  IBTickType_enumtype_INDEX_FUTURE_PREMIUM = 31,
  IBTickType_enumtype_BID_EXCH = 32,
  IBTickType_enumtype_ASK_EXCH = 33,
  IBTickType_enumtype_AUCTION_VOLUME = 34,
  IBTickType_enumtype_AUCTION_PRICE = 35,
  IBTickType_enumtype_AUCTION_IMBALANCE = 36,
  IBTickType_enumtype_MARK_PRICE = 37,
  IBTickType_enumtype_BID_EFP_COMPUTATION = 38,
  IBTickType_enumtype_ASK_EFP_COMPUTATION = 39,
  IBTickType_enumtype_LAST_EFP_COMPUTATION = 40,
  IBTickType_enumtype_OPEN_EFP_COMPUTATION = 41,
  IBTickType_enumtype_HIGH_EFP_COMPUTATION = 42,
  IBTickType_enumtype_LOW_EFP_COMPUTATION = 43,
  IBTickType_enumtype_CLOSE_EFP_COMPUTATION = 44,
  IBTickType_enumtype_LAST_TIMESTAMP = 45,
  IBTickType_enumtype_SHORTABLE = 46,
  IBTickType_enumtype_FUNDAMENTAL_RATIOS = 47,
  IBTickType_enumtype_RT_VOLUME = 48,
  IBTickType_enumtype_HALTED = 49,
  IBTickType_enumtype_BID_YIELD = 50,
  IBTickType_enumtype_ASK_YIELD = 51,
  IBTickType_enumtype_LAST_YIELD = 52,
  IBTickType_enumtype_CUST_OPTION_COMPUTATION = 53,
  IBTickType_enumtype_TRADE_COUNT = 54,
  IBTickType_enumtype_TRADE_RATE = 55,
  IBTickType_enumtype_VOLUME_RATE = 56,
  IBTickType_enumtype_LAST_RTH_TRADE = 57,
  IBTickType_enumtype_NOT_SET = 58
};
XT_COMMON_API bool IBTickType_enumtype_IsValid(int value);
const IBTickType_enumtype IBTickType_enumtype_enumtype_MIN = IBTickType_enumtype_BID_SIZE;
const IBTickType_enumtype IBTickType_enumtype_enumtype_MAX = IBTickType_enumtype_NOT_SET;
const int IBTickType_enumtype_enumtype_ARRAYSIZE = IBTickType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* IBTickType_enumtype_descriptor();
inline const ::std::string& IBTickType_enumtype_Name(IBTickType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    IBTickType_enumtype_descriptor(), value);
}
inline bool IBTickType_enumtype_Parse(
    const ::std::string& name, IBTickType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IBTickType_enumtype>(
    IBTickType_enumtype_descriptor(), name, value);
}
enum IBOriginType_enumtype {
  IBOriginType_enumtype_CUSTOMER = 0,
  IBOriginType_enumtype_FIRM = 1
};
XT_COMMON_API bool IBOriginType_enumtype_IsValid(int value);
const IBOriginType_enumtype IBOriginType_enumtype_enumtype_MIN = IBOriginType_enumtype_CUSTOMER;
const IBOriginType_enumtype IBOriginType_enumtype_enumtype_MAX = IBOriginType_enumtype_FIRM;
const int IBOriginType_enumtype_enumtype_ARRAYSIZE = IBOriginType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* IBOriginType_enumtype_descriptor();
inline const ::std::string& IBOriginType_enumtype_Name(IBOriginType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    IBOriginType_enumtype_descriptor(), value);
}
inline bool IBOriginType_enumtype_Parse(
    const ::std::string& name, IBOriginType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IBOriginType_enumtype>(
    IBOriginType_enumtype_descriptor(), name, value);
}
enum IBAuctionStrategy_enumtype {
  IBAuctionStrategy_enumtype_AUCTION_UNSET = 0,
  IBAuctionStrategy_enumtype_AUCTION_MATCH = 1,
  IBAuctionStrategy_enumtype_AUCTION_IMPROVEMENT = 2,
  IBAuctionStrategy_enumtype_AUCTION_TRANSPARENT = 3
};
XT_COMMON_API bool IBAuctionStrategy_enumtype_IsValid(int value);
const IBAuctionStrategy_enumtype IBAuctionStrategy_enumtype_enumtype_MIN = IBAuctionStrategy_enumtype_AUCTION_UNSET;
const IBAuctionStrategy_enumtype IBAuctionStrategy_enumtype_enumtype_MAX = IBAuctionStrategy_enumtype_AUCTION_TRANSPARENT;
const int IBAuctionStrategy_enumtype_enumtype_ARRAYSIZE = IBAuctionStrategy_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* IBAuctionStrategy_enumtype_descriptor();
inline const ::std::string& IBAuctionStrategy_enumtype_Name(IBAuctionStrategy_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    IBAuctionStrategy_enumtype_descriptor(), value);
}
inline bool IBAuctionStrategy_enumtype_Parse(
    const ::std::string& name, IBAuctionStrategy_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IBAuctionStrategy_enumtype>(
    IBAuctionStrategy_enumtype_descriptor(), name, value);
}
// ===================================================================

class XT_COMMON_API IBFaDataType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBFaDataType) */ {
 public:
  IBFaDataType();
  virtual ~IBFaDataType();

  IBFaDataType(const IBFaDataType& from);

  inline IBFaDataType& operator=(const IBFaDataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBFaDataType& default_instance();

  void Swap(IBFaDataType* other);

  // implements Message ----------------------------------------------

  inline IBFaDataType* New() const { return New(NULL); }

  IBFaDataType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBFaDataType& from);
  void MergeFrom(const IBFaDataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBFaDataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IBFaDataType_enumtype enumtype;
  static const enumtype Unknown =
    IBFaDataType_enumtype_Unknown;
  static const enumtype GROUPS =
    IBFaDataType_enumtype_GROUPS;
  static const enumtype PROFILES =
    IBFaDataType_enumtype_PROFILES;
  static const enumtype ALIASES =
    IBFaDataType_enumtype_ALIASES;
  static inline bool enumtype_IsValid(int value) {
    return IBFaDataType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    IBFaDataType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    IBFaDataType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    IBFaDataType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return IBFaDataType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return IBFaDataType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return IBFaDataType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IB.IBFaDataType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBEnum_2eproto();
  friend void protobuf_AssignDesc_IBEnum_2eproto();
  friend void protobuf_ShutdownFile_IBEnum_2eproto();

  void InitAsDefaultInstance();
  static IBFaDataType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBMarketDataType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBMarketDataType) */ {
 public:
  IBMarketDataType();
  virtual ~IBMarketDataType();

  IBMarketDataType(const IBMarketDataType& from);

  inline IBMarketDataType& operator=(const IBMarketDataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBMarketDataType& default_instance();

  void Swap(IBMarketDataType* other);

  // implements Message ----------------------------------------------

  inline IBMarketDataType* New() const { return New(NULL); }

  IBMarketDataType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBMarketDataType& from);
  void MergeFrom(const IBMarketDataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBMarketDataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IBMarketDataType_enumtype enumtype;
  static const enumtype Unknown =
    IBMarketDataType_enumtype_Unknown;
  static const enumtype REALTIME =
    IBMarketDataType_enumtype_REALTIME;
  static const enumtype FROZEN =
    IBMarketDataType_enumtype_FROZEN;
  static inline bool enumtype_IsValid(int value) {
    return IBMarketDataType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    IBMarketDataType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    IBMarketDataType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    IBMarketDataType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return IBMarketDataType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return IBMarketDataType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return IBMarketDataType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IB.IBMarketDataType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBEnum_2eproto();
  friend void protobuf_AssignDesc_IBEnum_2eproto();
  friend void protobuf_ShutdownFile_IBEnum_2eproto();

  void InitAsDefaultInstance();
  static IBMarketDataType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBLegOpenClose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBLegOpenClose) */ {
 public:
  IBLegOpenClose();
  virtual ~IBLegOpenClose();

  IBLegOpenClose(const IBLegOpenClose& from);

  inline IBLegOpenClose& operator=(const IBLegOpenClose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBLegOpenClose& default_instance();

  void Swap(IBLegOpenClose* other);

  // implements Message ----------------------------------------------

  inline IBLegOpenClose* New() const { return New(NULL); }

  IBLegOpenClose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBLegOpenClose& from);
  void MergeFrom(const IBLegOpenClose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBLegOpenClose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IBLegOpenClose_enumtype enumtype;
  static const enumtype SAME_POS =
    IBLegOpenClose_enumtype_SAME_POS;
  static const enumtype OPEN_POS =
    IBLegOpenClose_enumtype_OPEN_POS;
  static const enumtype CLOSE_POS =
    IBLegOpenClose_enumtype_CLOSE_POS;
  static const enumtype UNKNOWN_POS =
    IBLegOpenClose_enumtype_UNKNOWN_POS;
  static inline bool enumtype_IsValid(int value) {
    return IBLegOpenClose_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    IBLegOpenClose_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    IBLegOpenClose_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    IBLegOpenClose_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return IBLegOpenClose_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return IBLegOpenClose_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return IBLegOpenClose_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IB.IBLegOpenClose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBEnum_2eproto();
  friend void protobuf_AssignDesc_IBEnum_2eproto();
  friend void protobuf_ShutdownFile_IBEnum_2eproto();

  void InitAsDefaultInstance();
  static IBLegOpenClose* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBTickType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBTickType) */ {
 public:
  IBTickType();
  virtual ~IBTickType();

  IBTickType(const IBTickType& from);

  inline IBTickType& operator=(const IBTickType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBTickType& default_instance();

  void Swap(IBTickType* other);

  // implements Message ----------------------------------------------

  inline IBTickType* New() const { return New(NULL); }

  IBTickType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBTickType& from);
  void MergeFrom(const IBTickType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBTickType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IBTickType_enumtype enumtype;
  static const enumtype BID_SIZE =
    IBTickType_enumtype_BID_SIZE;
  static const enumtype BID =
    IBTickType_enumtype_BID;
  static const enumtype ASK =
    IBTickType_enumtype_ASK;
  static const enumtype ASK_SIZE =
    IBTickType_enumtype_ASK_SIZE;
  static const enumtype LAST =
    IBTickType_enumtype_LAST;
  static const enumtype LAST_SIZE =
    IBTickType_enumtype_LAST_SIZE;
  static const enumtype HIGH =
    IBTickType_enumtype_HIGH;
  static const enumtype LOW =
    IBTickType_enumtype_LOW;
  static const enumtype VOLUME =
    IBTickType_enumtype_VOLUME;
  static const enumtype CLOSE =
    IBTickType_enumtype_CLOSE;
  static const enumtype BID_OPTION_COMPUTATION =
    IBTickType_enumtype_BID_OPTION_COMPUTATION;
  static const enumtype ASK_OPTION_COMPUTATION =
    IBTickType_enumtype_ASK_OPTION_COMPUTATION;
  static const enumtype LAST_OPTION_COMPUTATION =
    IBTickType_enumtype_LAST_OPTION_COMPUTATION;
  static const enumtype MODEL_OPTION =
    IBTickType_enumtype_MODEL_OPTION;
  static const enumtype OPEN =
    IBTickType_enumtype_OPEN;
  static const enumtype LOW_13_WEEK =
    IBTickType_enumtype_LOW_13_WEEK;
  static const enumtype HIGH_13_WEEK =
    IBTickType_enumtype_HIGH_13_WEEK;
  static const enumtype LOW_26_WEEK =
    IBTickType_enumtype_LOW_26_WEEK;
  static const enumtype HIGH_26_WEEK =
    IBTickType_enumtype_HIGH_26_WEEK;
  static const enumtype LOW_52_WEEK =
    IBTickType_enumtype_LOW_52_WEEK;
  static const enumtype HIGH_52_WEEK =
    IBTickType_enumtype_HIGH_52_WEEK;
  static const enumtype AVG_VOLUME =
    IBTickType_enumtype_AVG_VOLUME;
  static const enumtype OPEN_INTEREST =
    IBTickType_enumtype_OPEN_INTEREST;
  static const enumtype OPTION_HISTORICAL_VOL =
    IBTickType_enumtype_OPTION_HISTORICAL_VOL;
  static const enumtype OPTION_IMPLIED_VOL =
    IBTickType_enumtype_OPTION_IMPLIED_VOL;
  static const enumtype OPTION_BID_EXCH =
    IBTickType_enumtype_OPTION_BID_EXCH;
  static const enumtype OPTION_ASK_EXCH =
    IBTickType_enumtype_OPTION_ASK_EXCH;
  static const enumtype OPTION_CALL_OPEN_INTEREST =
    IBTickType_enumtype_OPTION_CALL_OPEN_INTEREST;
  static const enumtype OPTION_PUT_OPEN_INTEREST =
    IBTickType_enumtype_OPTION_PUT_OPEN_INTEREST;
  static const enumtype OPTION_CALL_VOLUME =
    IBTickType_enumtype_OPTION_CALL_VOLUME;
  static const enumtype OPTION_PUT_VOLUME =
    IBTickType_enumtype_OPTION_PUT_VOLUME;
  static const enumtype INDEX_FUTURE_PREMIUM =
    IBTickType_enumtype_INDEX_FUTURE_PREMIUM;
  static const enumtype BID_EXCH =
    IBTickType_enumtype_BID_EXCH;
  static const enumtype ASK_EXCH =
    IBTickType_enumtype_ASK_EXCH;
  static const enumtype AUCTION_VOLUME =
    IBTickType_enumtype_AUCTION_VOLUME;
  static const enumtype AUCTION_PRICE =
    IBTickType_enumtype_AUCTION_PRICE;
  static const enumtype AUCTION_IMBALANCE =
    IBTickType_enumtype_AUCTION_IMBALANCE;
  static const enumtype MARK_PRICE =
    IBTickType_enumtype_MARK_PRICE;
  static const enumtype BID_EFP_COMPUTATION =
    IBTickType_enumtype_BID_EFP_COMPUTATION;
  static const enumtype ASK_EFP_COMPUTATION =
    IBTickType_enumtype_ASK_EFP_COMPUTATION;
  static const enumtype LAST_EFP_COMPUTATION =
    IBTickType_enumtype_LAST_EFP_COMPUTATION;
  static const enumtype OPEN_EFP_COMPUTATION =
    IBTickType_enumtype_OPEN_EFP_COMPUTATION;
  static const enumtype HIGH_EFP_COMPUTATION =
    IBTickType_enumtype_HIGH_EFP_COMPUTATION;
  static const enumtype LOW_EFP_COMPUTATION =
    IBTickType_enumtype_LOW_EFP_COMPUTATION;
  static const enumtype CLOSE_EFP_COMPUTATION =
    IBTickType_enumtype_CLOSE_EFP_COMPUTATION;
  static const enumtype LAST_TIMESTAMP =
    IBTickType_enumtype_LAST_TIMESTAMP;
  static const enumtype SHORTABLE =
    IBTickType_enumtype_SHORTABLE;
  static const enumtype FUNDAMENTAL_RATIOS =
    IBTickType_enumtype_FUNDAMENTAL_RATIOS;
  static const enumtype RT_VOLUME =
    IBTickType_enumtype_RT_VOLUME;
  static const enumtype HALTED =
    IBTickType_enumtype_HALTED;
  static const enumtype BID_YIELD =
    IBTickType_enumtype_BID_YIELD;
  static const enumtype ASK_YIELD =
    IBTickType_enumtype_ASK_YIELD;
  static const enumtype LAST_YIELD =
    IBTickType_enumtype_LAST_YIELD;
  static const enumtype CUST_OPTION_COMPUTATION =
    IBTickType_enumtype_CUST_OPTION_COMPUTATION;
  static const enumtype TRADE_COUNT =
    IBTickType_enumtype_TRADE_COUNT;
  static const enumtype TRADE_RATE =
    IBTickType_enumtype_TRADE_RATE;
  static const enumtype VOLUME_RATE =
    IBTickType_enumtype_VOLUME_RATE;
  static const enumtype LAST_RTH_TRADE =
    IBTickType_enumtype_LAST_RTH_TRADE;
  static const enumtype NOT_SET =
    IBTickType_enumtype_NOT_SET;
  static inline bool enumtype_IsValid(int value) {
    return IBTickType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    IBTickType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    IBTickType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    IBTickType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return IBTickType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return IBTickType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return IBTickType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IB.IBTickType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBEnum_2eproto();
  friend void protobuf_AssignDesc_IBEnum_2eproto();
  friend void protobuf_ShutdownFile_IBEnum_2eproto();

  void InitAsDefaultInstance();
  static IBTickType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBOriginType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBOriginType) */ {
 public:
  IBOriginType();
  virtual ~IBOriginType();

  IBOriginType(const IBOriginType& from);

  inline IBOriginType& operator=(const IBOriginType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBOriginType& default_instance();

  void Swap(IBOriginType* other);

  // implements Message ----------------------------------------------

  inline IBOriginType* New() const { return New(NULL); }

  IBOriginType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBOriginType& from);
  void MergeFrom(const IBOriginType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBOriginType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IBOriginType_enumtype enumtype;
  static const enumtype CUSTOMER =
    IBOriginType_enumtype_CUSTOMER;
  static const enumtype FIRM =
    IBOriginType_enumtype_FIRM;
  static inline bool enumtype_IsValid(int value) {
    return IBOriginType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    IBOriginType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    IBOriginType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    IBOriginType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return IBOriginType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return IBOriginType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return IBOriginType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IB.IBOriginType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBEnum_2eproto();
  friend void protobuf_AssignDesc_IBEnum_2eproto();
  friend void protobuf_ShutdownFile_IBEnum_2eproto();

  void InitAsDefaultInstance();
  static IBOriginType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API IBAuctionStrategy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IB.IBAuctionStrategy) */ {
 public:
  IBAuctionStrategy();
  virtual ~IBAuctionStrategy();

  IBAuctionStrategy(const IBAuctionStrategy& from);

  inline IBAuctionStrategy& operator=(const IBAuctionStrategy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IBAuctionStrategy& default_instance();

  void Swap(IBAuctionStrategy* other);

  // implements Message ----------------------------------------------

  inline IBAuctionStrategy* New() const { return New(NULL); }

  IBAuctionStrategy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IBAuctionStrategy& from);
  void MergeFrom(const IBAuctionStrategy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IBAuctionStrategy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IBAuctionStrategy_enumtype enumtype;
  static const enumtype AUCTION_UNSET =
    IBAuctionStrategy_enumtype_AUCTION_UNSET;
  static const enumtype AUCTION_MATCH =
    IBAuctionStrategy_enumtype_AUCTION_MATCH;
  static const enumtype AUCTION_IMPROVEMENT =
    IBAuctionStrategy_enumtype_AUCTION_IMPROVEMENT;
  static const enumtype AUCTION_TRANSPARENT =
    IBAuctionStrategy_enumtype_AUCTION_TRANSPARENT;
  static inline bool enumtype_IsValid(int value) {
    return IBAuctionStrategy_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    IBAuctionStrategy_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    IBAuctionStrategy_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    IBAuctionStrategy_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return IBAuctionStrategy_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return IBAuctionStrategy_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return IBAuctionStrategy_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IB.IBAuctionStrategy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_IBEnum_2eproto();
  friend void protobuf_AssignDesc_IBEnum_2eproto();
  friend void protobuf_ShutdownFile_IBEnum_2eproto();

  void InitAsDefaultInstance();
  static IBAuctionStrategy* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IBFaDataType

// -------------------------------------------------------------------

// IBMarketDataType

// -------------------------------------------------------------------

// IBLegOpenClose

// -------------------------------------------------------------------

// IBTickType

// -------------------------------------------------------------------

// IBOriginType

// -------------------------------------------------------------------

// IBAuctionStrategy

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::IB::IBFaDataType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IB::IBFaDataType_enumtype>() {
  return ::IB::IBFaDataType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::IB::IBMarketDataType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IB::IBMarketDataType_enumtype>() {
  return ::IB::IBMarketDataType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::IB::IBLegOpenClose_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IB::IBLegOpenClose_enumtype>() {
  return ::IB::IBLegOpenClose_enumtype_descriptor();
}
template <> struct is_proto_enum< ::IB::IBTickType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IB::IBTickType_enumtype>() {
  return ::IB::IBTickType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::IB::IBOriginType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IB::IBOriginType_enumtype>() {
  return ::IB::IBOriginType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::IB::IBAuctionStrategy_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IB::IBAuctionStrategy_enumtype>() {
  return ::IB::IBAuctionStrategy_enumtype_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IBEnum_2eproto__INCLUDED
