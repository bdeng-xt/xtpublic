// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MYCData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MYCData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MYC {

namespace {

const ::google::protobuf::Descriptor* MYC_OrderError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_OrderError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_OrderError_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_SmartExecutionError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_SmartExecutionError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_SmartExecutionError_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_Direction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_Direction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_Direction_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_OpenClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_OpenClose_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_OpenClose_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_InvestorTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_InvestorTypes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_InvestorTypes_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_OrderType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_OrderType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_OrderType_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_OrderStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_OrderStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_OrderStatus_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_TIF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_TIF_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_TIF_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_Currency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_Currency_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_Currency_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_Exchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_Exchange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_Exchange_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_FeedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_FeedType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MYC_FeedType_enumtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_contract_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_contract_reflection_ = NULL;
const ::google::protobuf::Descriptor* MYC_account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_account_reflection_ = NULL;
const ::google::protobuf::Descriptor* MYC_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* MYC_config_AccountsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_config_ContractsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MYC_future_quote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_future_quote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MYC_stock_quote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_stock_quote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MYC_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MYC_response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MYCData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MYCData_2eproto() {
  protobuf_AddDesc_MYCData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MYCData.proto");
  GOOGLE_CHECK(file != NULL);
  MYC_OrderError_descriptor_ = file->message_type(0);
  static const int MYC_OrderError_offsets_[1] = {
  };
  MYC_OrderError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_OrderError_descriptor_,
      MYC_OrderError::default_instance_,
      MYC_OrderError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OrderError, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_OrderError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OrderError, _internal_metadata_),
      -1);
  MYC_OrderError_enumtype_descriptor_ = MYC_OrderError_descriptor_->enum_type(0);
  MYC_SmartExecutionError_descriptor_ = file->message_type(1);
  static const int MYC_SmartExecutionError_offsets_[1] = {
  };
  MYC_SmartExecutionError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_SmartExecutionError_descriptor_,
      MYC_SmartExecutionError::default_instance_,
      MYC_SmartExecutionError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_SmartExecutionError, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_SmartExecutionError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_SmartExecutionError, _internal_metadata_),
      -1);
  MYC_SmartExecutionError_enumtype_descriptor_ = MYC_SmartExecutionError_descriptor_->enum_type(0);
  MYC_Direction_descriptor_ = file->message_type(2);
  static const int MYC_Direction_offsets_[1] = {
  };
  MYC_Direction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_Direction_descriptor_,
      MYC_Direction::default_instance_,
      MYC_Direction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_Direction, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_Direction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_Direction, _internal_metadata_),
      -1);
  MYC_Direction_enumtype_descriptor_ = MYC_Direction_descriptor_->enum_type(0);
  MYC_OpenClose_descriptor_ = file->message_type(3);
  static const int MYC_OpenClose_offsets_[1] = {
  };
  MYC_OpenClose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_OpenClose_descriptor_,
      MYC_OpenClose::default_instance_,
      MYC_OpenClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OpenClose, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_OpenClose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OpenClose, _internal_metadata_),
      -1);
  MYC_OpenClose_enumtype_descriptor_ = MYC_OpenClose_descriptor_->enum_type(0);
  MYC_InvestorTypes_descriptor_ = file->message_type(4);
  static const int MYC_InvestorTypes_offsets_[1] = {
  };
  MYC_InvestorTypes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_InvestorTypes_descriptor_,
      MYC_InvestorTypes::default_instance_,
      MYC_InvestorTypes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_InvestorTypes, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_InvestorTypes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_InvestorTypes, _internal_metadata_),
      -1);
  MYC_InvestorTypes_enumtype_descriptor_ = MYC_InvestorTypes_descriptor_->enum_type(0);
  MYC_OrderType_descriptor_ = file->message_type(5);
  static const int MYC_OrderType_offsets_[1] = {
  };
  MYC_OrderType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_OrderType_descriptor_,
      MYC_OrderType::default_instance_,
      MYC_OrderType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OrderType, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_OrderType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OrderType, _internal_metadata_),
      -1);
  MYC_OrderType_enumtype_descriptor_ = MYC_OrderType_descriptor_->enum_type(0);
  MYC_OrderStatus_descriptor_ = file->message_type(6);
  static const int MYC_OrderStatus_offsets_[1] = {
  };
  MYC_OrderStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_OrderStatus_descriptor_,
      MYC_OrderStatus::default_instance_,
      MYC_OrderStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OrderStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_OrderStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_OrderStatus, _internal_metadata_),
      -1);
  MYC_OrderStatus_enumtype_descriptor_ = MYC_OrderStatus_descriptor_->enum_type(0);
  MYC_TIF_descriptor_ = file->message_type(7);
  static const int MYC_TIF_offsets_[1] = {
  };
  MYC_TIF_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_TIF_descriptor_,
      MYC_TIF::default_instance_,
      MYC_TIF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_TIF, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_TIF),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_TIF, _internal_metadata_),
      -1);
  MYC_TIF_enumtype_descriptor_ = MYC_TIF_descriptor_->enum_type(0);
  MYC_Currency_descriptor_ = file->message_type(8);
  static const int MYC_Currency_offsets_[1] = {
  };
  MYC_Currency_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_Currency_descriptor_,
      MYC_Currency::default_instance_,
      MYC_Currency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_Currency, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_Currency),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_Currency, _internal_metadata_),
      -1);
  MYC_Currency_enumtype_descriptor_ = MYC_Currency_descriptor_->enum_type(0);
  MYC_Exchange_descriptor_ = file->message_type(9);
  static const int MYC_Exchange_offsets_[1] = {
  };
  MYC_Exchange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_Exchange_descriptor_,
      MYC_Exchange::default_instance_,
      MYC_Exchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_Exchange, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_Exchange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_Exchange, _internal_metadata_),
      -1);
  MYC_Exchange_enumtype_descriptor_ = MYC_Exchange_descriptor_->enum_type(0);
  MYC_FeedType_descriptor_ = file->message_type(10);
  static const int MYC_FeedType_offsets_[1] = {
  };
  MYC_FeedType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_FeedType_descriptor_,
      MYC_FeedType::default_instance_,
      MYC_FeedType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_FeedType, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_FeedType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_FeedType, _internal_metadata_),
      -1);
  MYC_FeedType_enumtype_descriptor_ = MYC_FeedType_descriptor_->enum_type(0);
  MYC_contract_descriptor_ = file->message_type(11);
  static const int MYC_contract_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, exch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, max_accum_open_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, max_cancel_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, expiration_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, yesterday_pos_long_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, yesterday_pos_long_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, yesterday_pos_short_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, yesterday_pos_short_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, today_pos_long_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, today_pos_long_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, today_pos_short_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, today_pos_short_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, fee_by_lot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, exchange_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, yes_exchange_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, broker_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, stamp_tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, acc_transfer_fee_),
  };
  MYC_contract_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_contract_descriptor_,
      MYC_contract::default_instance_,
      MYC_contract_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_contract),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_contract, _internal_metadata_),
      -1);
  MYC_account_descriptor_ = file->message_type(12);
  static const int MYC_account_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_account, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_account, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_account, cash_asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_account, cash_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_account, exch_rate_),
  };
  MYC_account_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_account_descriptor_,
      MYC_account::default_instance_,
      MYC_account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_account, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_account),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_account, _internal_metadata_),
      -1);
  MYC_config_descriptor_ = file->message_type(13);
  static const int MYC_config_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, trading_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, day_night_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, contracts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, param_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, output_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, st_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, st_name_),
  };
  MYC_config_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_config_descriptor_,
      MYC_config::default_instance_,
      MYC_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_config),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_config, _internal_metadata_),
      -1);
  MYC_config_AccountsEntry_descriptor_ = MYC_config_descriptor_->nested_type(0);
  MYC_config_ContractsEntry_descriptor_ = MYC_config_descriptor_->nested_type(1);
  MYC_future_quote_descriptor_ = file->message_type(14);
  static const int MYC_future_quote_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, feed_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, int_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, pre_close_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, pre_settle_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, pre_open_interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, open_interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, open_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, high_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, low_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, avg_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, last_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, total_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, total_notional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, upper_limit_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, lower_limit_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, close_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, settle_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, total_buy_ordsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, total_sell_ordsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, weighted_buy_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, weighted_sell_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_bid_size1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_ask_size1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_bid_size2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_ask_size2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_bid_size3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_ask_size3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_bid_size4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_ask_size4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_bid_size5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, implied_ask_size5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bv1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, ap1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, av1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bv2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, ap2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, av2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bp3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bv3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, ap3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, av3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bp4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, ap4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, av4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bp5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, bv5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, ap5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, av5_),
  };
  MYC_future_quote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_future_quote_descriptor_,
      MYC_future_quote::default_instance_,
      MYC_future_quote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_future_quote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_future_quote, _internal_metadata_),
      -1);
  MYC_stock_quote_descriptor_ = file->message_type(15);
  static const int MYC_stock_quote_offsets_[46] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, wind_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, ticker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, action_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, exch_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, pre_close_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, open_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, high_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, low_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, last_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, num_of_trades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, total_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, total_notional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, total_bid_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, total_ask_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, weighted_avg_bp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, weighted_avg_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, iopv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, yield_to_maturity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, upper_limit_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, lower_limit_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, pe1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, pe2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bv1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, ap1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, av1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bv2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, ap2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, av2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bp3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bv3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, ap3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, av3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bp4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, ap4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, av4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bp5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, bv5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, ap5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, av5_),
  };
  MYC_stock_quote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_stock_quote_descriptor_,
      MYC_stock_quote::default_instance_,
      MYC_stock_quote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_stock_quote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_stock_quote, _internal_metadata_),
      -1);
  MYC_response_descriptor_ = file->message_type(16);
  static const int MYC_response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, open_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, exe_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, exe_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, error_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, error_info_),
  };
  MYC_response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MYC_response_descriptor_,
      MYC_response::default_instance_,
      MYC_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, _has_bits_[0]),
      -1,
      -1,
      sizeof(MYC_response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MYC_response, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MYCData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_OrderError_descriptor_, &MYC_OrderError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_SmartExecutionError_descriptor_, &MYC_SmartExecutionError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_Direction_descriptor_, &MYC_Direction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_OpenClose_descriptor_, &MYC_OpenClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_InvestorTypes_descriptor_, &MYC_InvestorTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_OrderType_descriptor_, &MYC_OrderType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_OrderStatus_descriptor_, &MYC_OrderStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_TIF_descriptor_, &MYC_TIF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_Currency_descriptor_, &MYC_Currency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_Exchange_descriptor_, &MYC_Exchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_FeedType_descriptor_, &MYC_FeedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_contract_descriptor_, &MYC_contract::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_account_descriptor_, &MYC_account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_config_descriptor_, &MYC_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MYC_config_AccountsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::MYC::MYC_account,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MYC_config_AccountsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MYC_config_ContractsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::MYC::MYC_contract,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MYC_config_ContractsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_future_quote_descriptor_, &MYC_future_quote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_stock_quote_descriptor_, &MYC_stock_quote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MYC_response_descriptor_, &MYC_response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MYCData_2eproto() {
  delete MYC_OrderError::default_instance_;
  delete MYC_OrderError_reflection_;
  delete MYC_SmartExecutionError::default_instance_;
  delete MYC_SmartExecutionError_reflection_;
  delete MYC_Direction::default_instance_;
  delete MYC_Direction_reflection_;
  delete MYC_OpenClose::default_instance_;
  delete MYC_OpenClose_reflection_;
  delete MYC_InvestorTypes::default_instance_;
  delete MYC_InvestorTypes_reflection_;
  delete MYC_OrderType::default_instance_;
  delete MYC_OrderType_reflection_;
  delete MYC_OrderStatus::default_instance_;
  delete MYC_OrderStatus_reflection_;
  delete MYC_TIF::default_instance_;
  delete MYC_TIF_reflection_;
  delete MYC_Currency::default_instance_;
  delete MYC_Currency_reflection_;
  delete MYC_Exchange::default_instance_;
  delete MYC_Exchange_reflection_;
  delete MYC_FeedType::default_instance_;
  delete MYC_FeedType_reflection_;
  delete MYC_contract::default_instance_;
  delete MYC_contract_reflection_;
  delete MYC_account::default_instance_;
  delete MYC_account_reflection_;
  delete MYC_config::default_instance_;
  delete MYC_config_reflection_;
  delete MYC_future_quote::default_instance_;
  delete MYC_future_quote_reflection_;
  delete MYC_stock_quote::default_instance_;
  delete MYC_stock_quote_reflection_;
  delete MYC_response::default_instance_;
  delete MYC_response_reflection_;
}

void protobuf_AddDesc_MYCData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MYCData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMYCData.proto\022\003MYC\"\317\002\n\016MYC_OrderError\""
    "\274\002\n\010enumtype\022\010\n\004None\020\000\022)\n\034ERROR_OPEN_POS"
    "_IS_NOT_ENOUGH\020\377\377\377\377\377\377\377\377\377\001\022 \n\023ERROR_SELF_"
    "MATCHING\020\376\377\377\377\377\377\377\377\377\001\0220\n#ERROR_REACH_MAX_A"
    "CCUMULATE_OPEN_VOL\020\375\377\377\377\377\377\377\377\377\001\022$\n\027ERROR_C"
    "ANCEL_ORDER_FAIL\020\374\377\377\377\377\377\377\377\377\001\022+\n\036ERROR_CAN"
    "CEL_ORDER_REACH_LIMIT\020\373\377\377\377\377\377\377\377\377\001\022%\n\030ERRO"
    "R_CASH_IS_NOT_ENOUGH\020\372\377\377\377\377\377\377\377\377\001\022-\n ERROR"
    "_PRE_LONG_POS_IS_NOT_ENOUGH\020\371\377\377\377\377\377\377\377\377\001\"}"
    "\n\027MYC_SmartExecutionError\"b\n\010enumtype\022\010\n"
    "\004None\020\000\022\"\n\025ERROR_SE_FAIL_GENERAL\020\233\377\377\377\377\377\377"
    "\377\377\001\022(\n\033ERROR_SE_INPUT_CHECK_FAILED\020\232\377\377\377\377"
    "\377\377\377\377\001\":\n\rMYC_Direction\")\n\010enumtype\022\007\n\003BU"
    "Y\020\000\022\010\n\004SELL\020\001\022\n\n\006CANCEL\020\002\"N\n\rMYC_OpenClo"
    "se\"=\n\010enumtype\022\010\n\004OPEN\020\000\022\t\n\005CLOSE\020\001\022\r\n\tC"
    "LOSE_TOD\020\002\022\r\n\tCLOSE_YES\020\003\"M\n\021MYC_Investo"
    "rTypes\"8\n\010enumtype\022\016\n\nSPECULATOR\020\000\022\n\n\006HE"
    "DGER\020\001\022\020\n\014ARBITRAGEURS\020\002\"<\n\rMYC_OrderTyp"
    "e\"+\n\010enumtype\022\t\n\005LIMIT\020\000\022\n\n\006MARKET\020\001\022\010\n\004"
    "STOP\020\002\"\263\001\n\017MYC_OrderStatus\"\237\001\n\010enumtype\022"
    "\013\n\007SUCCEED\020\000\022\021\n\004INIT\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tENTRU"
    "STED\020\001\022\n\n\006PARTED\020\002\022\014\n\010CANCELED\020\003\022\014\n\010REJE"
    "CTED\020\004\022\023\n\017CANCEL_REJECTED\020\005\022\021\n\rINTERREJE"
    "CTED\020\006\022\024\n\020UNDEFINED_STATUS\020\007\"K\n\007MYC_TIF\""
    "@\n\010enumtype\022\007\n\003DAY\020\000\022\007\n\003FAK\020\001\022\007\n\003IOC\020\002\022\007"
    "\n\003FOK\020\003\022\007\n\003GTD\020\004\022\007\n\003GTC\020\005\"\317\001\n\014MYC_Curren"
    "cy\"\276\001\n\010enumtype\022\007\n\003CNY\020\000\022\007\n\003USD\020\001\022\007\n\003HKD"
    "\020\002\022\007\n\003EUR\020\003\022\007\n\003JPY\020\004\022\007\n\003GBP\020\005\022\007\n\003AUD\020\006\022\007"
    "\n\003CAD\020\007\022\007\n\003SEK\020\010\022\007\n\003NZD\020\t\022\007\n\003MXN\020\n\022\007\n\003SG"
    "D\020\013\022\007\n\003NOK\020\014\022\007\n\003KRW\020\r\022\007\n\003TRY\020\016\022\007\n\003RUB\020\017\022"
    "\007\n\003INR\020\020\022\007\n\003BRL\020\021\022\007\n\003ZAR\020\022\022\007\n\003CNH\020\023\"\256\001\n\014"
    "MYC_Exchange\"\235\001\n\010enumtype\022\010\n\004None\020\000\022\010\n\004S"
    "ZSE\0200\022\007\n\003SSE\0201\022\010\n\004HKEX\0202\022\010\n\004SHFE\020A\022\t\n\005CF"
    "FEX\020G\022\007\n\003DCE\020B\022\010\n\004CZCE\020C\022\007\n\003SGE\020D\022\007\n\003SGX"
    "\020S\022\010\n\004CBOT\020F\022\007\n\003CME\020M\022\007\n\003LME\020L\022\t\n\005COMEX\020"
    "O\022\t\n\005NYMEX\020N\"\200\001\n\014MYC_FeedType\"p\n\010enumtyp"
    "e\022\t\n\005CFFEX\020\000\022\007\n\003DCE\020\001\022\010\n\004SHFE\020\006\022\010\n\004CZCE\020"
    "\007\022\014\n\010SZSE_SSE\020\t\022\020\n\014SZSE_SSE_IDX\020\n\022\007\n\003CTP"
    "\020\014\022\007\n\003SGE\020\026\022\n\n\006ESUNNY\020\031\"\276\004\n\014MYC_contract"
    "\022\016\n\006symbol\030\001 \001(\t\022\014\n\004exch\030\002 \001(\005\022\032\n\022max_ac"
    "cum_open_vol\030\003 \001(\005\022\030\n\020max_cancel_limit\030\004"
    " \001(\005\022\027\n\017expiration_date\030\005 \001(\005\022\021\n\ttick_si"
    "ze\030\006 \001(\001\022\020\n\010multiple\030\007 \001(\001\022\017\n\007account\030\010 "
    "\001(\t\022!\n\031yesterday_pos_long_volume\030\t \001(\005\022 "
    "\n\030yesterday_pos_long_price\030\n \001(\001\022\"\n\032yest"
    "erday_pos_short_volume\030\013 \001(\005\022!\n\031yesterda"
    "y_pos_short_price\030\014 \001(\001\022\035\n\025today_pos_lon"
    "g_volume\030\r \001(\005\022\034\n\024today_pos_long_price\030\016"
    " \001(\001\022\036\n\026today_pos_short_volume\030\017 \001(\005\022\035\n\025"
    "today_pos_short_price\030\020 \001(\001\022\022\n\nfee_by_lo"
    "t\030\021 \001(\005\022\024\n\014exchange_fee\030\022 \001(\001\022\030\n\020yes_exc"
    "hange_fee\030\023 \001(\001\022\022\n\nbroker_fee\030\024 \001(\001\022\021\n\ts"
    "tamp_tax\030\025 \001(\001\022\030\n\020acc_transfer_fee\030\026 \001(\001"
    "\"o\n\013MYC_account\022\017\n\007account\030\001 \001(\t\022\020\n\010curr"
    "ency\030\002 \001(\005\022\022\n\ncash_asset\030\003 \001(\001\022\026\n\016cash_a"
    "vailable\030\004 \001(\001\022\021\n\texch_rate\030\005 \001(\001\"\364\002\n\nMY"
    "C_config\022\024\n\014trading_date\030\001 \001(\005\022\021\n\tday_ni"
    "ght\030\002 \001(\005\022/\n\010accounts\030\003 \003(\0132\035.MYC.MYC_co"
    "nfig.AccountsEntry\0221\n\tcontracts\030\004 \003(\0132\036."
    "MYC.MYC_config.ContractsEntry\022\027\n\017param_f"
    "ile_path\030\005 \001(\t\022\030\n\020output_file_path\030\006 \001(\t"
    "\022\r\n\005st_id\030\007 \001(\005\022\017\n\007st_name\030\010 \001(\t\032A\n\rAcco"
    "untsEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020."
    "MYC.MYC_account:\0028\001\032C\n\016ContractsEntry\022\013\n"
    "\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.MYC.MYC_cont"
    "ract:\0028\001\"\341\010\n\020MYC_future_quote\022\021\n\tfeed_ty"
    "pe\030\001 \001(\005\022\016\n\006symbol\030\002 \001(\t\022\020\n\010exchange\030\003 \001"
    "(\005\022\020\n\010int_time\030\004 \001(\005\022\024\n\014pre_close_px\030\005 \001"
    "(\001\022\025\n\rpre_settle_px\030\006 \001(\001\022\031\n\021pre_open_in"
    "terest\030\007 \001(\001\022\025\n\ropen_interest\030\010 \001(\001\022\017\n\007o"
    "pen_px\030\t \001(\001\022\017\n\007high_px\030\n \001(\001\022\016\n\006low_px\030"
    "\013 \001(\001\022\016\n\006avg_px\030\014 \001(\001\022\017\n\007last_px\030\r \001(\001\022\021"
    "\n\ttotal_vol\030\022 \001(\003\022\026\n\016total_notional\030\023 \001("
    "\001\022\026\n\016upper_limit_px\030\024 \001(\001\022\026\n\016lower_limit"
    "_px\030\025 \001(\001\022\020\n\010close_px\030\026 \001(\001\022\021\n\tsettle_px"
    "\030\027 \001(\001\022\031\n\021total_buy_ordsize\030\032 \001(\005\022\032\n\022tot"
    "al_sell_ordsize\030\033 \001(\005\022\027\n\017weighted_buy_px"
    "\030\034 \001(\001\022\030\n\020weighted_sell_px\030\035 \001(\001\022\034\n\021impl"
    "ied_bid_size1\030\037 \001(\005:\0010\022\034\n\021implied_ask_si"
    "ze1\030  \001(\005:\0010\022\034\n\021implied_bid_size2\030! \001(\005:"
    "\0010\022\034\n\021implied_ask_size2\030\" \001(\005:\0010\022\034\n\021impl"
    "ied_bid_size3\030# \001(\005:\0010\022\034\n\021implied_ask_si"
    "ze3\030$ \001(\005:\0010\022\034\n\021implied_bid_size4\030% \001(\005:"
    "\0010\022\034\n\021implied_ask_size4\030& \001(\005:\0010\022\034\n\021impl"
    "ied_bid_size5\030\' \001(\005:\0010\022\034\n\021implied_ask_si"
    "ze5\030( \001(\005:\0010\022\016\n\003bp1\030) \001(\001:\0010\022\016\n\003bv1\030* \001("
    "\005:\0010\022\016\n\003ap1\030+ \001(\001:\0010\022\016\n\003av1\030, \001(\005:\0010\022\016\n\003"
    "bp2\030- \001(\001:\0010\022\016\n\003bv2\030. \001(\005:\0010\022\016\n\003ap2\030/ \001("
    "\001:\0010\022\016\n\003av2\0300 \001(\005:\0010\022\016\n\003bp3\0301 \001(\001:\0010\022\016\n\003"
    "bv3\0302 \001(\005:\0010\022\016\n\003ap3\0303 \001(\001:\0010\022\016\n\003av3\0304 \001("
    "\005:\0010\022\016\n\003bp4\0305 \001(\001:\0010\022\016\n\003bv4\0306 \001(\005:\0010\022\016\n\003"
    "ap4\0307 \001(\001:\0010\022\016\n\003av4\0308 \001(\005:\0010\022\016\n\003bp5\0309 \001("
    "\001:\0010\022\016\n\003bv5\030: \001(\005:\0010\022\016\n\003ap5\030; \001(\001:\0010\022\016\n\003"
    "av5\030< \001(\005:\0010\"\316\006\n\017MYC_stock_quote\022\021\n\twind"
    "_code\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\naction_da"
    "y\030\003 \001(\005\022\023\n\013trading_day\030\004 \001(\005\022\021\n\texch_tim"
    "e\030\005 \001(\005\022\016\n\006status\030\006 \001(\005\022\024\n\014pre_close_px\030"
    "\007 \001(\001\022\017\n\007open_px\030\010 \001(\001\022\017\n\007high_px\030\t \001(\001\022"
    "\016\n\006low_px\030\n \001(\001\022\017\n\007last_px\030\013 \001(\001\022\025\n\rnum_"
    "of_trades\030\020 \001(\005\022\021\n\ttotal_vol\030\022 \001(\003\022\026\n\016to"
    "tal_notional\030\023 \001(\001\022\025\n\rtotal_bid_vol\030\024 \001("
    "\003\022\025\n\rtotal_ask_vol\030\025 \001(\003\022\027\n\017weighted_avg"
    "_bp\030\026 \001(\001\022\027\n\017weighted_avg_ap\030\027 \001(\001\022\014\n\004IO"
    "PV\030\030 \001(\001\022\031\n\021yield_to_maturity\030\031 \001(\001\022\026\n\016u"
    "pper_limit_px\030\032 \001(\001\022\026\n\016lower_limit_px\030\033 "
    "\001(\001\022\016\n\006prefix\030\034 \001(\t\022\013\n\003PE1\030\035 \001(\001\022\013\n\003PE2\030"
    "\036 \001(\001\022\016\n\006change\030\037 \001(\005\022\016\n\003bp1\030) \001(\001:\0010\022\016\n"
    "\003bv1\030* \001(\005:\0010\022\016\n\003ap1\030+ \001(\001:\0010\022\016\n\003av1\030, \001"
    "(\005:\0010\022\016\n\003bp2\030- \001(\001:\0010\022\016\n\003bv2\030. \001(\005:\0010\022\016\n"
    "\003ap2\030/ \001(\001:\0010\022\016\n\003av2\0300 \001(\005:\0010\022\016\n\003bp3\0301 \001"
    "(\001:\0010\022\016\n\003bv3\0302 \001(\005:\0010\022\016\n\003ap3\0303 \001(\001:\0010\022\016\n"
    "\003av3\0304 \001(\005:\0010\022\016\n\003bp4\0305 \001(\001:\0010\022\016\n\003bv4\0306 \001"
    "(\005:\0010\022\016\n\003ap4\0307 \001(\001:\0010\022\016\n\003av4\0308 \001(\005:\0010\022\016\n"
    "\003bp5\0309 \001(\001:\0010\022\016\n\003bv5\030: \001(\005:\0010\022\016\n\003ap5\030; \001"
    "(\001:\0010\022\016\n\003av5\030< \001(\005:\0010\"\264\001\n\014MYC_response\022\020"
    "\n\010order_id\030\001 \001(\003\022\016\n\006symbol\030\002 \001(\t\022\021\n\tdire"
    "ction\030\003 \001(\005\022\022\n\nopen_close\030\004 \001(\005\022\021\n\texe_p"
    "rice\030\005 \001(\001\022\022\n\nexe_volume\030\006 \001(\005\022\016\n\006status"
    "\030\007 \001(\005\022\020\n\010error_no\030\010 \001(\005\022\022\n\nerror_info\030\t"
    " \001(\t", 4764);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MYCData.proto", &protobuf_RegisterTypes);
  MYC_OrderError::default_instance_ = new MYC_OrderError();
  MYC_SmartExecutionError::default_instance_ = new MYC_SmartExecutionError();
  MYC_Direction::default_instance_ = new MYC_Direction();
  MYC_OpenClose::default_instance_ = new MYC_OpenClose();
  MYC_InvestorTypes::default_instance_ = new MYC_InvestorTypes();
  MYC_OrderType::default_instance_ = new MYC_OrderType();
  MYC_OrderStatus::default_instance_ = new MYC_OrderStatus();
  MYC_TIF::default_instance_ = new MYC_TIF();
  MYC_Currency::default_instance_ = new MYC_Currency();
  MYC_Exchange::default_instance_ = new MYC_Exchange();
  MYC_FeedType::default_instance_ = new MYC_FeedType();
  MYC_contract::default_instance_ = new MYC_contract();
  MYC_account::default_instance_ = new MYC_account();
  MYC_config::default_instance_ = new MYC_config();
  MYC_future_quote::default_instance_ = new MYC_future_quote();
  MYC_stock_quote::default_instance_ = new MYC_stock_quote();
  MYC_response::default_instance_ = new MYC_response();
  MYC_OrderError::default_instance_->InitAsDefaultInstance();
  MYC_SmartExecutionError::default_instance_->InitAsDefaultInstance();
  MYC_Direction::default_instance_->InitAsDefaultInstance();
  MYC_OpenClose::default_instance_->InitAsDefaultInstance();
  MYC_InvestorTypes::default_instance_->InitAsDefaultInstance();
  MYC_OrderType::default_instance_->InitAsDefaultInstance();
  MYC_OrderStatus::default_instance_->InitAsDefaultInstance();
  MYC_TIF::default_instance_->InitAsDefaultInstance();
  MYC_Currency::default_instance_->InitAsDefaultInstance();
  MYC_Exchange::default_instance_->InitAsDefaultInstance();
  MYC_FeedType::default_instance_->InitAsDefaultInstance();
  MYC_contract::default_instance_->InitAsDefaultInstance();
  MYC_account::default_instance_->InitAsDefaultInstance();
  MYC_config::default_instance_->InitAsDefaultInstance();
  MYC_future_quote::default_instance_->InitAsDefaultInstance();
  MYC_stock_quote::default_instance_->InitAsDefaultInstance();
  MYC_response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MYCData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MYCData_2eproto {
  StaticDescriptorInitializer_MYCData_2eproto() {
    protobuf_AddDesc_MYCData_2eproto();
  }
} static_descriptor_initializer_MYCData_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_OrderError_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OrderError_enumtype_descriptor_;
}
bool MYC_OrderError_enumtype_IsValid(int value) {
  switch(value) {
    case -7:
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_OrderError_enumtype MYC_OrderError::None;
const MYC_OrderError_enumtype MYC_OrderError::ERROR_OPEN_POS_IS_NOT_ENOUGH;
const MYC_OrderError_enumtype MYC_OrderError::ERROR_SELF_MATCHING;
const MYC_OrderError_enumtype MYC_OrderError::ERROR_REACH_MAX_ACCUMULATE_OPEN_VOL;
const MYC_OrderError_enumtype MYC_OrderError::ERROR_CANCEL_ORDER_FAIL;
const MYC_OrderError_enumtype MYC_OrderError::ERROR_CANCEL_ORDER_REACH_LIMIT;
const MYC_OrderError_enumtype MYC_OrderError::ERROR_CASH_IS_NOT_ENOUGH;
const MYC_OrderError_enumtype MYC_OrderError::ERROR_PRE_LONG_POS_IS_NOT_ENOUGH;
const MYC_OrderError_enumtype MYC_OrderError::enumtype_MIN;
const MYC_OrderError_enumtype MYC_OrderError::enumtype_MAX;
const int MYC_OrderError::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_OrderError::MYC_OrderError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_OrderError)
}

void MYC_OrderError::InitAsDefaultInstance() {
}

MYC_OrderError::MYC_OrderError(const MYC_OrderError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_OrderError)
}

void MYC_OrderError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_OrderError::~MYC_OrderError() {
  // @@protoc_insertion_point(destructor:MYC.MYC_OrderError)
  SharedDtor();
}

void MYC_OrderError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_OrderError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_OrderError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OrderError_descriptor_;
}

const MYC_OrderError& MYC_OrderError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_OrderError* MYC_OrderError::default_instance_ = NULL;

MYC_OrderError* MYC_OrderError::New(::google::protobuf::Arena* arena) const {
  MYC_OrderError* n = new MYC_OrderError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_OrderError::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_OrderError)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_OrderError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_OrderError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_OrderError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_OrderError)
  return false;
#undef DO_
}

void MYC_OrderError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_OrderError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_OrderError)
}

::google::protobuf::uint8* MYC_OrderError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_OrderError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_OrderError)
  return target;
}

int MYC_OrderError::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_OrderError)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_OrderError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_OrderError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_OrderError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_OrderError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_OrderError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_OrderError)
    MergeFrom(*source);
  }
}

void MYC_OrderError::MergeFrom(const MYC_OrderError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_OrderError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_OrderError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_OrderError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_OrderError::CopyFrom(const MYC_OrderError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_OrderError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_OrderError::IsInitialized() const {

  return true;
}

void MYC_OrderError::Swap(MYC_OrderError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_OrderError::InternalSwap(MYC_OrderError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_OrderError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_OrderError_descriptor_;
  metadata.reflection = MYC_OrderError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_OrderError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_SmartExecutionError_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_SmartExecutionError_enumtype_descriptor_;
}
bool MYC_SmartExecutionError_enumtype_IsValid(int value) {
  switch(value) {
    case -102:
    case -101:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_SmartExecutionError_enumtype MYC_SmartExecutionError::None;
const MYC_SmartExecutionError_enumtype MYC_SmartExecutionError::ERROR_SE_FAIL_GENERAL;
const MYC_SmartExecutionError_enumtype MYC_SmartExecutionError::ERROR_SE_INPUT_CHECK_FAILED;
const MYC_SmartExecutionError_enumtype MYC_SmartExecutionError::enumtype_MIN;
const MYC_SmartExecutionError_enumtype MYC_SmartExecutionError::enumtype_MAX;
const int MYC_SmartExecutionError::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_SmartExecutionError::MYC_SmartExecutionError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_SmartExecutionError)
}

void MYC_SmartExecutionError::InitAsDefaultInstance() {
}

MYC_SmartExecutionError::MYC_SmartExecutionError(const MYC_SmartExecutionError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_SmartExecutionError)
}

void MYC_SmartExecutionError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_SmartExecutionError::~MYC_SmartExecutionError() {
  // @@protoc_insertion_point(destructor:MYC.MYC_SmartExecutionError)
  SharedDtor();
}

void MYC_SmartExecutionError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_SmartExecutionError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_SmartExecutionError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_SmartExecutionError_descriptor_;
}

const MYC_SmartExecutionError& MYC_SmartExecutionError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_SmartExecutionError* MYC_SmartExecutionError::default_instance_ = NULL;

MYC_SmartExecutionError* MYC_SmartExecutionError::New(::google::protobuf::Arena* arena) const {
  MYC_SmartExecutionError* n = new MYC_SmartExecutionError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_SmartExecutionError::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_SmartExecutionError)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_SmartExecutionError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_SmartExecutionError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_SmartExecutionError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_SmartExecutionError)
  return false;
#undef DO_
}

void MYC_SmartExecutionError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_SmartExecutionError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_SmartExecutionError)
}

::google::protobuf::uint8* MYC_SmartExecutionError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_SmartExecutionError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_SmartExecutionError)
  return target;
}

int MYC_SmartExecutionError::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_SmartExecutionError)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_SmartExecutionError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_SmartExecutionError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_SmartExecutionError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_SmartExecutionError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_SmartExecutionError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_SmartExecutionError)
    MergeFrom(*source);
  }
}

void MYC_SmartExecutionError::MergeFrom(const MYC_SmartExecutionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_SmartExecutionError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_SmartExecutionError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_SmartExecutionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_SmartExecutionError::CopyFrom(const MYC_SmartExecutionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_SmartExecutionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_SmartExecutionError::IsInitialized() const {

  return true;
}

void MYC_SmartExecutionError::Swap(MYC_SmartExecutionError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_SmartExecutionError::InternalSwap(MYC_SmartExecutionError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_SmartExecutionError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_SmartExecutionError_descriptor_;
  metadata.reflection = MYC_SmartExecutionError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_SmartExecutionError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_Direction_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_Direction_enumtype_descriptor_;
}
bool MYC_Direction_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_Direction_enumtype MYC_Direction::BUY;
const MYC_Direction_enumtype MYC_Direction::SELL;
const MYC_Direction_enumtype MYC_Direction::CANCEL;
const MYC_Direction_enumtype MYC_Direction::enumtype_MIN;
const MYC_Direction_enumtype MYC_Direction::enumtype_MAX;
const int MYC_Direction::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_Direction::MYC_Direction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_Direction)
}

void MYC_Direction::InitAsDefaultInstance() {
}

MYC_Direction::MYC_Direction(const MYC_Direction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_Direction)
}

void MYC_Direction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_Direction::~MYC_Direction() {
  // @@protoc_insertion_point(destructor:MYC.MYC_Direction)
  SharedDtor();
}

void MYC_Direction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_Direction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_Direction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_Direction_descriptor_;
}

const MYC_Direction& MYC_Direction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_Direction* MYC_Direction::default_instance_ = NULL;

MYC_Direction* MYC_Direction::New(::google::protobuf::Arena* arena) const {
  MYC_Direction* n = new MYC_Direction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_Direction)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_Direction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_Direction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_Direction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_Direction)
  return false;
#undef DO_
}

void MYC_Direction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_Direction)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_Direction)
}

::google::protobuf::uint8* MYC_Direction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_Direction)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_Direction)
  return target;
}

int MYC_Direction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_Direction)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_Direction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_Direction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_Direction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_Direction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_Direction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_Direction)
    MergeFrom(*source);
  }
}

void MYC_Direction::MergeFrom(const MYC_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_Direction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_Direction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_Direction::CopyFrom(const MYC_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_Direction::IsInitialized() const {

  return true;
}

void MYC_Direction::Swap(MYC_Direction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_Direction::InternalSwap(MYC_Direction* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_Direction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_Direction_descriptor_;
  metadata.reflection = MYC_Direction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_Direction

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_OpenClose_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OpenClose_enumtype_descriptor_;
}
bool MYC_OpenClose_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_OpenClose_enumtype MYC_OpenClose::OPEN;
const MYC_OpenClose_enumtype MYC_OpenClose::CLOSE;
const MYC_OpenClose_enumtype MYC_OpenClose::CLOSE_TOD;
const MYC_OpenClose_enumtype MYC_OpenClose::CLOSE_YES;
const MYC_OpenClose_enumtype MYC_OpenClose::enumtype_MIN;
const MYC_OpenClose_enumtype MYC_OpenClose::enumtype_MAX;
const int MYC_OpenClose::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_OpenClose::MYC_OpenClose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_OpenClose)
}

void MYC_OpenClose::InitAsDefaultInstance() {
}

MYC_OpenClose::MYC_OpenClose(const MYC_OpenClose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_OpenClose)
}

void MYC_OpenClose::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_OpenClose::~MYC_OpenClose() {
  // @@protoc_insertion_point(destructor:MYC.MYC_OpenClose)
  SharedDtor();
}

void MYC_OpenClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_OpenClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_OpenClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OpenClose_descriptor_;
}

const MYC_OpenClose& MYC_OpenClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_OpenClose* MYC_OpenClose::default_instance_ = NULL;

MYC_OpenClose* MYC_OpenClose::New(::google::protobuf::Arena* arena) const {
  MYC_OpenClose* n = new MYC_OpenClose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_OpenClose::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_OpenClose)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_OpenClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_OpenClose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_OpenClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_OpenClose)
  return false;
#undef DO_
}

void MYC_OpenClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_OpenClose)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_OpenClose)
}

::google::protobuf::uint8* MYC_OpenClose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_OpenClose)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_OpenClose)
  return target;
}

int MYC_OpenClose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_OpenClose)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_OpenClose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_OpenClose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_OpenClose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_OpenClose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_OpenClose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_OpenClose)
    MergeFrom(*source);
  }
}

void MYC_OpenClose::MergeFrom(const MYC_OpenClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_OpenClose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_OpenClose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_OpenClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_OpenClose::CopyFrom(const MYC_OpenClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_OpenClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_OpenClose::IsInitialized() const {

  return true;
}

void MYC_OpenClose::Swap(MYC_OpenClose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_OpenClose::InternalSwap(MYC_OpenClose* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_OpenClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_OpenClose_descriptor_;
  metadata.reflection = MYC_OpenClose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_OpenClose

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_InvestorTypes_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_InvestorTypes_enumtype_descriptor_;
}
bool MYC_InvestorTypes_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_InvestorTypes_enumtype MYC_InvestorTypes::SPECULATOR;
const MYC_InvestorTypes_enumtype MYC_InvestorTypes::HEDGER;
const MYC_InvestorTypes_enumtype MYC_InvestorTypes::ARBITRAGEURS;
const MYC_InvestorTypes_enumtype MYC_InvestorTypes::enumtype_MIN;
const MYC_InvestorTypes_enumtype MYC_InvestorTypes::enumtype_MAX;
const int MYC_InvestorTypes::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_InvestorTypes::MYC_InvestorTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_InvestorTypes)
}

void MYC_InvestorTypes::InitAsDefaultInstance() {
}

MYC_InvestorTypes::MYC_InvestorTypes(const MYC_InvestorTypes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_InvestorTypes)
}

void MYC_InvestorTypes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_InvestorTypes::~MYC_InvestorTypes() {
  // @@protoc_insertion_point(destructor:MYC.MYC_InvestorTypes)
  SharedDtor();
}

void MYC_InvestorTypes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_InvestorTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_InvestorTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_InvestorTypes_descriptor_;
}

const MYC_InvestorTypes& MYC_InvestorTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_InvestorTypes* MYC_InvestorTypes::default_instance_ = NULL;

MYC_InvestorTypes* MYC_InvestorTypes::New(::google::protobuf::Arena* arena) const {
  MYC_InvestorTypes* n = new MYC_InvestorTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_InvestorTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_InvestorTypes)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_InvestorTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_InvestorTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_InvestorTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_InvestorTypes)
  return false;
#undef DO_
}

void MYC_InvestorTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_InvestorTypes)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_InvestorTypes)
}

::google::protobuf::uint8* MYC_InvestorTypes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_InvestorTypes)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_InvestorTypes)
  return target;
}

int MYC_InvestorTypes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_InvestorTypes)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_InvestorTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_InvestorTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_InvestorTypes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_InvestorTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_InvestorTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_InvestorTypes)
    MergeFrom(*source);
  }
}

void MYC_InvestorTypes::MergeFrom(const MYC_InvestorTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_InvestorTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_InvestorTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_InvestorTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_InvestorTypes::CopyFrom(const MYC_InvestorTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_InvestorTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_InvestorTypes::IsInitialized() const {

  return true;
}

void MYC_InvestorTypes::Swap(MYC_InvestorTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_InvestorTypes::InternalSwap(MYC_InvestorTypes* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_InvestorTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_InvestorTypes_descriptor_;
  metadata.reflection = MYC_InvestorTypes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_InvestorTypes

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_OrderType_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OrderType_enumtype_descriptor_;
}
bool MYC_OrderType_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_OrderType_enumtype MYC_OrderType::LIMIT;
const MYC_OrderType_enumtype MYC_OrderType::MARKET;
const MYC_OrderType_enumtype MYC_OrderType::STOP;
const MYC_OrderType_enumtype MYC_OrderType::enumtype_MIN;
const MYC_OrderType_enumtype MYC_OrderType::enumtype_MAX;
const int MYC_OrderType::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_OrderType::MYC_OrderType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_OrderType)
}

void MYC_OrderType::InitAsDefaultInstance() {
}

MYC_OrderType::MYC_OrderType(const MYC_OrderType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_OrderType)
}

void MYC_OrderType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_OrderType::~MYC_OrderType() {
  // @@protoc_insertion_point(destructor:MYC.MYC_OrderType)
  SharedDtor();
}

void MYC_OrderType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_OrderType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_OrderType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OrderType_descriptor_;
}

const MYC_OrderType& MYC_OrderType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_OrderType* MYC_OrderType::default_instance_ = NULL;

MYC_OrderType* MYC_OrderType::New(::google::protobuf::Arena* arena) const {
  MYC_OrderType* n = new MYC_OrderType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_OrderType::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_OrderType)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_OrderType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_OrderType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_OrderType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_OrderType)
  return false;
#undef DO_
}

void MYC_OrderType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_OrderType)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_OrderType)
}

::google::protobuf::uint8* MYC_OrderType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_OrderType)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_OrderType)
  return target;
}

int MYC_OrderType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_OrderType)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_OrderType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_OrderType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_OrderType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_OrderType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_OrderType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_OrderType)
    MergeFrom(*source);
  }
}

void MYC_OrderType::MergeFrom(const MYC_OrderType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_OrderType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_OrderType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_OrderType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_OrderType::CopyFrom(const MYC_OrderType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_OrderType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_OrderType::IsInitialized() const {

  return true;
}

void MYC_OrderType::Swap(MYC_OrderType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_OrderType::InternalSwap(MYC_OrderType* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_OrderType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_OrderType_descriptor_;
  metadata.reflection = MYC_OrderType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_OrderType

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_OrderStatus_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OrderStatus_enumtype_descriptor_;
}
bool MYC_OrderStatus_enumtype_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_OrderStatus_enumtype MYC_OrderStatus::SUCCEED;
const MYC_OrderStatus_enumtype MYC_OrderStatus::INIT;
const MYC_OrderStatus_enumtype MYC_OrderStatus::ENTRUSTED;
const MYC_OrderStatus_enumtype MYC_OrderStatus::PARTED;
const MYC_OrderStatus_enumtype MYC_OrderStatus::CANCELED;
const MYC_OrderStatus_enumtype MYC_OrderStatus::REJECTED;
const MYC_OrderStatus_enumtype MYC_OrderStatus::CANCEL_REJECTED;
const MYC_OrderStatus_enumtype MYC_OrderStatus::INTERREJECTED;
const MYC_OrderStatus_enumtype MYC_OrderStatus::UNDEFINED_STATUS;
const MYC_OrderStatus_enumtype MYC_OrderStatus::enumtype_MIN;
const MYC_OrderStatus_enumtype MYC_OrderStatus::enumtype_MAX;
const int MYC_OrderStatus::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_OrderStatus::MYC_OrderStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_OrderStatus)
}

void MYC_OrderStatus::InitAsDefaultInstance() {
}

MYC_OrderStatus::MYC_OrderStatus(const MYC_OrderStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_OrderStatus)
}

void MYC_OrderStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_OrderStatus::~MYC_OrderStatus() {
  // @@protoc_insertion_point(destructor:MYC.MYC_OrderStatus)
  SharedDtor();
}

void MYC_OrderStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_OrderStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_OrderStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_OrderStatus_descriptor_;
}

const MYC_OrderStatus& MYC_OrderStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_OrderStatus* MYC_OrderStatus::default_instance_ = NULL;

MYC_OrderStatus* MYC_OrderStatus::New(::google::protobuf::Arena* arena) const {
  MYC_OrderStatus* n = new MYC_OrderStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_OrderStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_OrderStatus)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_OrderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_OrderStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_OrderStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_OrderStatus)
  return false;
#undef DO_
}

void MYC_OrderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_OrderStatus)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_OrderStatus)
}

::google::protobuf::uint8* MYC_OrderStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_OrderStatus)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_OrderStatus)
  return target;
}

int MYC_OrderStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_OrderStatus)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_OrderStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_OrderStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_OrderStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_OrderStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_OrderStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_OrderStatus)
    MergeFrom(*source);
  }
}

void MYC_OrderStatus::MergeFrom(const MYC_OrderStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_OrderStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_OrderStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_OrderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_OrderStatus::CopyFrom(const MYC_OrderStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_OrderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_OrderStatus::IsInitialized() const {

  return true;
}

void MYC_OrderStatus::Swap(MYC_OrderStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_OrderStatus::InternalSwap(MYC_OrderStatus* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_OrderStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_OrderStatus_descriptor_;
  metadata.reflection = MYC_OrderStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_OrderStatus

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_TIF_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_TIF_enumtype_descriptor_;
}
bool MYC_TIF_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_TIF_enumtype MYC_TIF::DAY;
const MYC_TIF_enumtype MYC_TIF::FAK;
const MYC_TIF_enumtype MYC_TIF::IOC;
const MYC_TIF_enumtype MYC_TIF::FOK;
const MYC_TIF_enumtype MYC_TIF::GTD;
const MYC_TIF_enumtype MYC_TIF::GTC;
const MYC_TIF_enumtype MYC_TIF::enumtype_MIN;
const MYC_TIF_enumtype MYC_TIF::enumtype_MAX;
const int MYC_TIF::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_TIF::MYC_TIF()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_TIF)
}

void MYC_TIF::InitAsDefaultInstance() {
}

MYC_TIF::MYC_TIF(const MYC_TIF& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_TIF)
}

void MYC_TIF::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_TIF::~MYC_TIF() {
  // @@protoc_insertion_point(destructor:MYC.MYC_TIF)
  SharedDtor();
}

void MYC_TIF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_TIF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_TIF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_TIF_descriptor_;
}

const MYC_TIF& MYC_TIF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_TIF* MYC_TIF::default_instance_ = NULL;

MYC_TIF* MYC_TIF::New(::google::protobuf::Arena* arena) const {
  MYC_TIF* n = new MYC_TIF;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_TIF::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_TIF)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_TIF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_TIF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_TIF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_TIF)
  return false;
#undef DO_
}

void MYC_TIF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_TIF)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_TIF)
}

::google::protobuf::uint8* MYC_TIF::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_TIF)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_TIF)
  return target;
}

int MYC_TIF::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_TIF)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_TIF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_TIF)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_TIF* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_TIF>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_TIF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_TIF)
    MergeFrom(*source);
  }
}

void MYC_TIF::MergeFrom(const MYC_TIF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_TIF)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_TIF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_TIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_TIF::CopyFrom(const MYC_TIF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_TIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_TIF::IsInitialized() const {

  return true;
}

void MYC_TIF::Swap(MYC_TIF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_TIF::InternalSwap(MYC_TIF* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_TIF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_TIF_descriptor_;
  metadata.reflection = MYC_TIF_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_TIF

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_Currency_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_Currency_enumtype_descriptor_;
}
bool MYC_Currency_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_Currency_enumtype MYC_Currency::CNY;
const MYC_Currency_enumtype MYC_Currency::USD;
const MYC_Currency_enumtype MYC_Currency::HKD;
const MYC_Currency_enumtype MYC_Currency::EUR;
const MYC_Currency_enumtype MYC_Currency::JPY;
const MYC_Currency_enumtype MYC_Currency::GBP;
const MYC_Currency_enumtype MYC_Currency::AUD;
const MYC_Currency_enumtype MYC_Currency::CAD;
const MYC_Currency_enumtype MYC_Currency::SEK;
const MYC_Currency_enumtype MYC_Currency::NZD;
const MYC_Currency_enumtype MYC_Currency::MXN;
const MYC_Currency_enumtype MYC_Currency::SGD;
const MYC_Currency_enumtype MYC_Currency::NOK;
const MYC_Currency_enumtype MYC_Currency::KRW;
const MYC_Currency_enumtype MYC_Currency::TRY;
const MYC_Currency_enumtype MYC_Currency::RUB;
const MYC_Currency_enumtype MYC_Currency::INR;
const MYC_Currency_enumtype MYC_Currency::BRL;
const MYC_Currency_enumtype MYC_Currency::ZAR;
const MYC_Currency_enumtype MYC_Currency::CNH;
const MYC_Currency_enumtype MYC_Currency::enumtype_MIN;
const MYC_Currency_enumtype MYC_Currency::enumtype_MAX;
const int MYC_Currency::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_Currency::MYC_Currency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_Currency)
}

void MYC_Currency::InitAsDefaultInstance() {
}

MYC_Currency::MYC_Currency(const MYC_Currency& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_Currency)
}

void MYC_Currency::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_Currency::~MYC_Currency() {
  // @@protoc_insertion_point(destructor:MYC.MYC_Currency)
  SharedDtor();
}

void MYC_Currency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_Currency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_Currency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_Currency_descriptor_;
}

const MYC_Currency& MYC_Currency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_Currency* MYC_Currency::default_instance_ = NULL;

MYC_Currency* MYC_Currency::New(::google::protobuf::Arena* arena) const {
  MYC_Currency* n = new MYC_Currency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_Currency)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_Currency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_Currency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_Currency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_Currency)
  return false;
#undef DO_
}

void MYC_Currency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_Currency)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_Currency)
}

::google::protobuf::uint8* MYC_Currency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_Currency)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_Currency)
  return target;
}

int MYC_Currency::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_Currency)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_Currency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_Currency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_Currency* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_Currency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_Currency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_Currency)
    MergeFrom(*source);
  }
}

void MYC_Currency::MergeFrom(const MYC_Currency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_Currency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_Currency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_Currency::CopyFrom(const MYC_Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_Currency::IsInitialized() const {

  return true;
}

void MYC_Currency::Swap(MYC_Currency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_Currency::InternalSwap(MYC_Currency* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_Currency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_Currency_descriptor_;
  metadata.reflection = MYC_Currency_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_Currency

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_Exchange_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_Exchange_enumtype_descriptor_;
}
bool MYC_Exchange_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 48:
    case 49:
    case 50:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 71:
    case 76:
    case 77:
    case 78:
    case 79:
    case 83:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_Exchange_enumtype MYC_Exchange::None;
const MYC_Exchange_enumtype MYC_Exchange::SZSE;
const MYC_Exchange_enumtype MYC_Exchange::SSE;
const MYC_Exchange_enumtype MYC_Exchange::HKEX;
const MYC_Exchange_enumtype MYC_Exchange::SHFE;
const MYC_Exchange_enumtype MYC_Exchange::CFFEX;
const MYC_Exchange_enumtype MYC_Exchange::DCE;
const MYC_Exchange_enumtype MYC_Exchange::CZCE;
const MYC_Exchange_enumtype MYC_Exchange::SGE;
const MYC_Exchange_enumtype MYC_Exchange::SGX;
const MYC_Exchange_enumtype MYC_Exchange::CBOT;
const MYC_Exchange_enumtype MYC_Exchange::CME;
const MYC_Exchange_enumtype MYC_Exchange::LME;
const MYC_Exchange_enumtype MYC_Exchange::COMEX;
const MYC_Exchange_enumtype MYC_Exchange::NYMEX;
const MYC_Exchange_enumtype MYC_Exchange::enumtype_MIN;
const MYC_Exchange_enumtype MYC_Exchange::enumtype_MAX;
const int MYC_Exchange::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_Exchange::MYC_Exchange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_Exchange)
}

void MYC_Exchange::InitAsDefaultInstance() {
}

MYC_Exchange::MYC_Exchange(const MYC_Exchange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_Exchange)
}

void MYC_Exchange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_Exchange::~MYC_Exchange() {
  // @@protoc_insertion_point(destructor:MYC.MYC_Exchange)
  SharedDtor();
}

void MYC_Exchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_Exchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_Exchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_Exchange_descriptor_;
}

const MYC_Exchange& MYC_Exchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_Exchange* MYC_Exchange::default_instance_ = NULL;

MYC_Exchange* MYC_Exchange::New(::google::protobuf::Arena* arena) const {
  MYC_Exchange* n = new MYC_Exchange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_Exchange)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_Exchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_Exchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_Exchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_Exchange)
  return false;
#undef DO_
}

void MYC_Exchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_Exchange)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_Exchange)
}

::google::protobuf::uint8* MYC_Exchange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_Exchange)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_Exchange)
  return target;
}

int MYC_Exchange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_Exchange)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_Exchange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_Exchange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_Exchange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_Exchange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_Exchange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_Exchange)
    MergeFrom(*source);
  }
}

void MYC_Exchange::MergeFrom(const MYC_Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_Exchange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_Exchange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_Exchange::CopyFrom(const MYC_Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_Exchange::IsInitialized() const {

  return true;
}

void MYC_Exchange::Swap(MYC_Exchange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_Exchange::InternalSwap(MYC_Exchange* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_Exchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_Exchange_descriptor_;
  metadata.reflection = MYC_Exchange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_Exchange

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MYC_FeedType_enumtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_FeedType_enumtype_descriptor_;
}
bool MYC_FeedType_enumtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 6:
    case 7:
    case 9:
    case 10:
    case 12:
    case 22:
    case 25:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MYC_FeedType_enumtype MYC_FeedType::CFFEX;
const MYC_FeedType_enumtype MYC_FeedType::DCE;
const MYC_FeedType_enumtype MYC_FeedType::SHFE;
const MYC_FeedType_enumtype MYC_FeedType::CZCE;
const MYC_FeedType_enumtype MYC_FeedType::SZSE_SSE;
const MYC_FeedType_enumtype MYC_FeedType::SZSE_SSE_IDX;
const MYC_FeedType_enumtype MYC_FeedType::CTP;
const MYC_FeedType_enumtype MYC_FeedType::SGE;
const MYC_FeedType_enumtype MYC_FeedType::ESUNNY;
const MYC_FeedType_enumtype MYC_FeedType::enumtype_MIN;
const MYC_FeedType_enumtype MYC_FeedType::enumtype_MAX;
const int MYC_FeedType::enumtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_FeedType::MYC_FeedType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_FeedType)
}

void MYC_FeedType::InitAsDefaultInstance() {
}

MYC_FeedType::MYC_FeedType(const MYC_FeedType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_FeedType)
}

void MYC_FeedType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_FeedType::~MYC_FeedType() {
  // @@protoc_insertion_point(destructor:MYC.MYC_FeedType)
  SharedDtor();
}

void MYC_FeedType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MYC_FeedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_FeedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_FeedType_descriptor_;
}

const MYC_FeedType& MYC_FeedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_FeedType* MYC_FeedType::default_instance_ = NULL;

MYC_FeedType* MYC_FeedType::New(::google::protobuf::Arena* arena) const {
  MYC_FeedType* n = new MYC_FeedType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_FeedType::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_FeedType)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_FeedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_FeedType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_FeedType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_FeedType)
  return false;
#undef DO_
}

void MYC_FeedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_FeedType)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_FeedType)
}

::google::protobuf::uint8* MYC_FeedType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_FeedType)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_FeedType)
  return target;
}

int MYC_FeedType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_FeedType)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_FeedType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_FeedType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_FeedType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_FeedType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_FeedType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_FeedType)
    MergeFrom(*source);
  }
}

void MYC_FeedType::MergeFrom(const MYC_FeedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_FeedType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_FeedType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_FeedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_FeedType::CopyFrom(const MYC_FeedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_FeedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_FeedType::IsInitialized() const {

  return true;
}

void MYC_FeedType::Swap(MYC_FeedType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_FeedType::InternalSwap(MYC_FeedType* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_FeedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_FeedType_descriptor_;
  metadata.reflection = MYC_FeedType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_FeedType

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MYC_contract::kSymbolFieldNumber;
const int MYC_contract::kExchFieldNumber;
const int MYC_contract::kMaxAccumOpenVolFieldNumber;
const int MYC_contract::kMaxCancelLimitFieldNumber;
const int MYC_contract::kExpirationDateFieldNumber;
const int MYC_contract::kTickSizeFieldNumber;
const int MYC_contract::kMultipleFieldNumber;
const int MYC_contract::kAccountFieldNumber;
const int MYC_contract::kYesterdayPosLongVolumeFieldNumber;
const int MYC_contract::kYesterdayPosLongPriceFieldNumber;
const int MYC_contract::kYesterdayPosShortVolumeFieldNumber;
const int MYC_contract::kYesterdayPosShortPriceFieldNumber;
const int MYC_contract::kTodayPosLongVolumeFieldNumber;
const int MYC_contract::kTodayPosLongPriceFieldNumber;
const int MYC_contract::kTodayPosShortVolumeFieldNumber;
const int MYC_contract::kTodayPosShortPriceFieldNumber;
const int MYC_contract::kFeeByLotFieldNumber;
const int MYC_contract::kExchangeFeeFieldNumber;
const int MYC_contract::kYesExchangeFeeFieldNumber;
const int MYC_contract::kBrokerFeeFieldNumber;
const int MYC_contract::kStampTaxFieldNumber;
const int MYC_contract::kAccTransferFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_contract::MYC_contract()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_contract)
}

void MYC_contract::InitAsDefaultInstance() {
}

MYC_contract::MYC_contract(const MYC_contract& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_contract)
}

void MYC_contract::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exch_ = 0;
  max_accum_open_vol_ = 0;
  max_cancel_limit_ = 0;
  expiration_date_ = 0;
  tick_size_ = 0;
  multiple_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yesterday_pos_long_volume_ = 0;
  yesterday_pos_long_price_ = 0;
  yesterday_pos_short_volume_ = 0;
  yesterday_pos_short_price_ = 0;
  today_pos_long_volume_ = 0;
  today_pos_long_price_ = 0;
  today_pos_short_volume_ = 0;
  today_pos_short_price_ = 0;
  fee_by_lot_ = 0;
  exchange_fee_ = 0;
  yes_exchange_fee_ = 0;
  broker_fee_ = 0;
  stamp_tax_ = 0;
  acc_transfer_fee_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_contract::~MYC_contract() {
  // @@protoc_insertion_point(destructor:MYC.MYC_contract)
  SharedDtor();
}

void MYC_contract::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MYC_contract::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_contract::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_contract_descriptor_;
}

const MYC_contract& MYC_contract::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_contract* MYC_contract::default_instance_ = NULL;

MYC_contract* MYC_contract::New(::google::protobuf::Arena* arena) const {
  MYC_contract* n = new MYC_contract;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_contract::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_contract)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MYC_contract, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MYC_contract*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(exch_, multiple_);
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(yesterday_pos_long_price_, today_pos_short_price_);
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(exchange_fee_, fee_by_lot_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_contract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_contract)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_contract.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exch;
        break;
      }

      // optional int32 exch = 2;
      case 2: {
        if (tag == 16) {
         parse_exch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exch_)));
          set_has_exch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_accum_open_vol;
        break;
      }

      // optional int32 max_accum_open_vol = 3;
      case 3: {
        if (tag == 24) {
         parse_max_accum_open_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_accum_open_vol_)));
          set_has_max_accum_open_vol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_cancel_limit;
        break;
      }

      // optional int32 max_cancel_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_max_cancel_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cancel_limit_)));
          set_has_max_cancel_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expiration_date;
        break;
      }

      // optional int32 expiration_date = 5;
      case 5: {
        if (tag == 40) {
         parse_expiration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiration_date_)));
          set_has_expiration_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_tick_size;
        break;
      }

      // optional double tick_size = 6;
      case 6: {
        if (tag == 49) {
         parse_tick_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tick_size_)));
          set_has_tick_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_multiple;
        break;
      }

      // optional double multiple = 7;
      case 7: {
        if (tag == 57) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_account;
        break;
      }

      // optional string account = 8;
      case 8: {
        if (tag == 66) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_contract.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_yesterday_pos_long_volume;
        break;
      }

      // optional int32 yesterday_pos_long_volume = 9;
      case 9: {
        if (tag == 72) {
         parse_yesterday_pos_long_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yesterday_pos_long_volume_)));
          set_has_yesterday_pos_long_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_yesterday_pos_long_price;
        break;
      }

      // optional double yesterday_pos_long_price = 10;
      case 10: {
        if (tag == 81) {
         parse_yesterday_pos_long_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yesterday_pos_long_price_)));
          set_has_yesterday_pos_long_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_yesterday_pos_short_volume;
        break;
      }

      // optional int32 yesterday_pos_short_volume = 11;
      case 11: {
        if (tag == 88) {
         parse_yesterday_pos_short_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yesterday_pos_short_volume_)));
          set_has_yesterday_pos_short_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_yesterday_pos_short_price;
        break;
      }

      // optional double yesterday_pos_short_price = 12;
      case 12: {
        if (tag == 97) {
         parse_yesterday_pos_short_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yesterday_pos_short_price_)));
          set_has_yesterday_pos_short_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_today_pos_long_volume;
        break;
      }

      // optional int32 today_pos_long_volume = 13;
      case 13: {
        if (tag == 104) {
         parse_today_pos_long_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_pos_long_volume_)));
          set_has_today_pos_long_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_today_pos_long_price;
        break;
      }

      // optional double today_pos_long_price = 14;
      case 14: {
        if (tag == 113) {
         parse_today_pos_long_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &today_pos_long_price_)));
          set_has_today_pos_long_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_today_pos_short_volume;
        break;
      }

      // optional int32 today_pos_short_volume = 15;
      case 15: {
        if (tag == 120) {
         parse_today_pos_short_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_pos_short_volume_)));
          set_has_today_pos_short_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_today_pos_short_price;
        break;
      }

      // optional double today_pos_short_price = 16;
      case 16: {
        if (tag == 129) {
         parse_today_pos_short_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &today_pos_short_price_)));
          set_has_today_pos_short_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fee_by_lot;
        break;
      }

      // optional int32 fee_by_lot = 17;
      case 17: {
        if (tag == 136) {
         parse_fee_by_lot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fee_by_lot_)));
          set_has_fee_by_lot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_exchange_fee;
        break;
      }

      // optional double exchange_fee = 18;
      case 18: {
        if (tag == 145) {
         parse_exchange_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchange_fee_)));
          set_has_exchange_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_yes_exchange_fee;
        break;
      }

      // optional double yes_exchange_fee = 19;
      case 19: {
        if (tag == 153) {
         parse_yes_exchange_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yes_exchange_fee_)));
          set_has_yes_exchange_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_broker_fee;
        break;
      }

      // optional double broker_fee = 20;
      case 20: {
        if (tag == 161) {
         parse_broker_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &broker_fee_)));
          set_has_broker_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_stamp_tax;
        break;
      }

      // optional double stamp_tax = 21;
      case 21: {
        if (tag == 169) {
         parse_stamp_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stamp_tax_)));
          set_has_stamp_tax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_acc_transfer_fee;
        break;
      }

      // optional double acc_transfer_fee = 22;
      case 22: {
        if (tag == 177) {
         parse_acc_transfer_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_transfer_fee_)));
          set_has_acc_transfer_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_contract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_contract)
  return false;
#undef DO_
}

void MYC_contract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_contract)
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_contract.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional int32 exch = 2;
  if (has_exch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exch(), output);
  }

  // optional int32 max_accum_open_vol = 3;
  if (has_max_accum_open_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_accum_open_vol(), output);
  }

  // optional int32 max_cancel_limit = 4;
  if (has_max_cancel_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_cancel_limit(), output);
  }

  // optional int32 expiration_date = 5;
  if (has_expiration_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expiration_date(), output);
  }

  // optional double tick_size = 6;
  if (has_tick_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tick_size(), output);
  }

  // optional double multiple = 7;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->multiple(), output);
  }

  // optional string account = 8;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_contract.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->account(), output);
  }

  // optional int32 yesterday_pos_long_volume = 9;
  if (has_yesterday_pos_long_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->yesterday_pos_long_volume(), output);
  }

  // optional double yesterday_pos_long_price = 10;
  if (has_yesterday_pos_long_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->yesterday_pos_long_price(), output);
  }

  // optional int32 yesterday_pos_short_volume = 11;
  if (has_yesterday_pos_short_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->yesterday_pos_short_volume(), output);
  }

  // optional double yesterday_pos_short_price = 12;
  if (has_yesterday_pos_short_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->yesterday_pos_short_price(), output);
  }

  // optional int32 today_pos_long_volume = 13;
  if (has_today_pos_long_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->today_pos_long_volume(), output);
  }

  // optional double today_pos_long_price = 14;
  if (has_today_pos_long_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->today_pos_long_price(), output);
  }

  // optional int32 today_pos_short_volume = 15;
  if (has_today_pos_short_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->today_pos_short_volume(), output);
  }

  // optional double today_pos_short_price = 16;
  if (has_today_pos_short_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->today_pos_short_price(), output);
  }

  // optional int32 fee_by_lot = 17;
  if (has_fee_by_lot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->fee_by_lot(), output);
  }

  // optional double exchange_fee = 18;
  if (has_exchange_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->exchange_fee(), output);
  }

  // optional double yes_exchange_fee = 19;
  if (has_yes_exchange_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->yes_exchange_fee(), output);
  }

  // optional double broker_fee = 20;
  if (has_broker_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->broker_fee(), output);
  }

  // optional double stamp_tax = 21;
  if (has_stamp_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->stamp_tax(), output);
  }

  // optional double acc_transfer_fee = 22;
  if (has_acc_transfer_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->acc_transfer_fee(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_contract)
}

::google::protobuf::uint8* MYC_contract::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_contract)
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_contract.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional int32 exch = 2;
  if (has_exch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exch(), target);
  }

  // optional int32 max_accum_open_vol = 3;
  if (has_max_accum_open_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_accum_open_vol(), target);
  }

  // optional int32 max_cancel_limit = 4;
  if (has_max_cancel_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_cancel_limit(), target);
  }

  // optional int32 expiration_date = 5;
  if (has_expiration_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expiration_date(), target);
  }

  // optional double tick_size = 6;
  if (has_tick_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tick_size(), target);
  }

  // optional double multiple = 7;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->multiple(), target);
  }

  // optional string account = 8;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_contract.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->account(), target);
  }

  // optional int32 yesterday_pos_long_volume = 9;
  if (has_yesterday_pos_long_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->yesterday_pos_long_volume(), target);
  }

  // optional double yesterday_pos_long_price = 10;
  if (has_yesterday_pos_long_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->yesterday_pos_long_price(), target);
  }

  // optional int32 yesterday_pos_short_volume = 11;
  if (has_yesterday_pos_short_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->yesterday_pos_short_volume(), target);
  }

  // optional double yesterday_pos_short_price = 12;
  if (has_yesterday_pos_short_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->yesterday_pos_short_price(), target);
  }

  // optional int32 today_pos_long_volume = 13;
  if (has_today_pos_long_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->today_pos_long_volume(), target);
  }

  // optional double today_pos_long_price = 14;
  if (has_today_pos_long_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->today_pos_long_price(), target);
  }

  // optional int32 today_pos_short_volume = 15;
  if (has_today_pos_short_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->today_pos_short_volume(), target);
  }

  // optional double today_pos_short_price = 16;
  if (has_today_pos_short_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->today_pos_short_price(), target);
  }

  // optional int32 fee_by_lot = 17;
  if (has_fee_by_lot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->fee_by_lot(), target);
  }

  // optional double exchange_fee = 18;
  if (has_exchange_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->exchange_fee(), target);
  }

  // optional double yes_exchange_fee = 19;
  if (has_yes_exchange_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->yes_exchange_fee(), target);
  }

  // optional double broker_fee = 20;
  if (has_broker_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->broker_fee(), target);
  }

  // optional double stamp_tax = 21;
  if (has_stamp_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->stamp_tax(), target);
  }

  // optional double acc_transfer_fee = 22;
  if (has_acc_transfer_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->acc_transfer_fee(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_contract)
  return target;
}

int MYC_contract::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_contract)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 exch = 2;
    if (has_exch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exch());
    }

    // optional int32 max_accum_open_vol = 3;
    if (has_max_accum_open_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_accum_open_vol());
    }

    // optional int32 max_cancel_limit = 4;
    if (has_max_cancel_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cancel_limit());
    }

    // optional int32 expiration_date = 5;
    if (has_expiration_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expiration_date());
    }

    // optional double tick_size = 6;
    if (has_tick_size()) {
      total_size += 1 + 8;
    }

    // optional double multiple = 7;
    if (has_multiple()) {
      total_size += 1 + 8;
    }

    // optional string account = 8;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 yesterday_pos_long_volume = 9;
    if (has_yesterday_pos_long_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yesterday_pos_long_volume());
    }

    // optional double yesterday_pos_long_price = 10;
    if (has_yesterday_pos_long_price()) {
      total_size += 1 + 8;
    }

    // optional int32 yesterday_pos_short_volume = 11;
    if (has_yesterday_pos_short_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yesterday_pos_short_volume());
    }

    // optional double yesterday_pos_short_price = 12;
    if (has_yesterday_pos_short_price()) {
      total_size += 1 + 8;
    }

    // optional int32 today_pos_long_volume = 13;
    if (has_today_pos_long_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_pos_long_volume());
    }

    // optional double today_pos_long_price = 14;
    if (has_today_pos_long_price()) {
      total_size += 1 + 8;
    }

    // optional int32 today_pos_short_volume = 15;
    if (has_today_pos_short_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_pos_short_volume());
    }

    // optional double today_pos_short_price = 16;
    if (has_today_pos_short_price()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 fee_by_lot = 17;
    if (has_fee_by_lot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fee_by_lot());
    }

    // optional double exchange_fee = 18;
    if (has_exchange_fee()) {
      total_size += 2 + 8;
    }

    // optional double yes_exchange_fee = 19;
    if (has_yes_exchange_fee()) {
      total_size += 2 + 8;
    }

    // optional double broker_fee = 20;
    if (has_broker_fee()) {
      total_size += 2 + 8;
    }

    // optional double stamp_tax = 21;
    if (has_stamp_tax()) {
      total_size += 2 + 8;
    }

    // optional double acc_transfer_fee = 22;
    if (has_acc_transfer_fee()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_contract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_contract)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_contract* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_contract>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_contract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_contract)
    MergeFrom(*source);
  }
}

void MYC_contract::MergeFrom(const MYC_contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_contract)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_exch()) {
      set_exch(from.exch());
    }
    if (from.has_max_accum_open_vol()) {
      set_max_accum_open_vol(from.max_accum_open_vol());
    }
    if (from.has_max_cancel_limit()) {
      set_max_cancel_limit(from.max_cancel_limit());
    }
    if (from.has_expiration_date()) {
      set_expiration_date(from.expiration_date());
    }
    if (from.has_tick_size()) {
      set_tick_size(from.tick_size());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yesterday_pos_long_volume()) {
      set_yesterday_pos_long_volume(from.yesterday_pos_long_volume());
    }
    if (from.has_yesterday_pos_long_price()) {
      set_yesterday_pos_long_price(from.yesterday_pos_long_price());
    }
    if (from.has_yesterday_pos_short_volume()) {
      set_yesterday_pos_short_volume(from.yesterday_pos_short_volume());
    }
    if (from.has_yesterday_pos_short_price()) {
      set_yesterday_pos_short_price(from.yesterday_pos_short_price());
    }
    if (from.has_today_pos_long_volume()) {
      set_today_pos_long_volume(from.today_pos_long_volume());
    }
    if (from.has_today_pos_long_price()) {
      set_today_pos_long_price(from.today_pos_long_price());
    }
    if (from.has_today_pos_short_volume()) {
      set_today_pos_short_volume(from.today_pos_short_volume());
    }
    if (from.has_today_pos_short_price()) {
      set_today_pos_short_price(from.today_pos_short_price());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fee_by_lot()) {
      set_fee_by_lot(from.fee_by_lot());
    }
    if (from.has_exchange_fee()) {
      set_exchange_fee(from.exchange_fee());
    }
    if (from.has_yes_exchange_fee()) {
      set_yes_exchange_fee(from.yes_exchange_fee());
    }
    if (from.has_broker_fee()) {
      set_broker_fee(from.broker_fee());
    }
    if (from.has_stamp_tax()) {
      set_stamp_tax(from.stamp_tax());
    }
    if (from.has_acc_transfer_fee()) {
      set_acc_transfer_fee(from.acc_transfer_fee());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_contract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_contract::CopyFrom(const MYC_contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_contract::IsInitialized() const {

  return true;
}

void MYC_contract::Swap(MYC_contract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_contract::InternalSwap(MYC_contract* other) {
  symbol_.Swap(&other->symbol_);
  std::swap(exch_, other->exch_);
  std::swap(max_accum_open_vol_, other->max_accum_open_vol_);
  std::swap(max_cancel_limit_, other->max_cancel_limit_);
  std::swap(expiration_date_, other->expiration_date_);
  std::swap(tick_size_, other->tick_size_);
  std::swap(multiple_, other->multiple_);
  account_.Swap(&other->account_);
  std::swap(yesterday_pos_long_volume_, other->yesterday_pos_long_volume_);
  std::swap(yesterday_pos_long_price_, other->yesterday_pos_long_price_);
  std::swap(yesterday_pos_short_volume_, other->yesterday_pos_short_volume_);
  std::swap(yesterday_pos_short_price_, other->yesterday_pos_short_price_);
  std::swap(today_pos_long_volume_, other->today_pos_long_volume_);
  std::swap(today_pos_long_price_, other->today_pos_long_price_);
  std::swap(today_pos_short_volume_, other->today_pos_short_volume_);
  std::swap(today_pos_short_price_, other->today_pos_short_price_);
  std::swap(fee_by_lot_, other->fee_by_lot_);
  std::swap(exchange_fee_, other->exchange_fee_);
  std::swap(yes_exchange_fee_, other->yes_exchange_fee_);
  std::swap(broker_fee_, other->broker_fee_);
  std::swap(stamp_tax_, other->stamp_tax_);
  std::swap(acc_transfer_fee_, other->acc_transfer_fee_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_contract::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_contract_descriptor_;
  metadata.reflection = MYC_contract_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_contract

// optional string symbol = 1;
bool MYC_contract::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MYC_contract::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
void MYC_contract::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
void MYC_contract::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
 const ::std::string& MYC_contract::symbol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_contract::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.symbol)
}
 void MYC_contract::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_contract.symbol)
}
 void MYC_contract::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_contract.symbol)
}
 ::std::string* MYC_contract::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_contract.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_contract::release_symbol() {
  // @@protoc_insertion_point(field_release:MYC.MYC_contract.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_contract::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_contract.symbol)
}

// optional int32 exch = 2;
bool MYC_contract::has_exch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MYC_contract::set_has_exch() {
  _has_bits_[0] |= 0x00000002u;
}
void MYC_contract::clear_has_exch() {
  _has_bits_[0] &= ~0x00000002u;
}
void MYC_contract::clear_exch() {
  exch_ = 0;
  clear_has_exch();
}
 ::google::protobuf::int32 MYC_contract::exch() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.exch)
  return exch_;
}
 void MYC_contract::set_exch(::google::protobuf::int32 value) {
  set_has_exch();
  exch_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.exch)
}

// optional int32 max_accum_open_vol = 3;
bool MYC_contract::has_max_accum_open_vol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MYC_contract::set_has_max_accum_open_vol() {
  _has_bits_[0] |= 0x00000004u;
}
void MYC_contract::clear_has_max_accum_open_vol() {
  _has_bits_[0] &= ~0x00000004u;
}
void MYC_contract::clear_max_accum_open_vol() {
  max_accum_open_vol_ = 0;
  clear_has_max_accum_open_vol();
}
 ::google::protobuf::int32 MYC_contract::max_accum_open_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.max_accum_open_vol)
  return max_accum_open_vol_;
}
 void MYC_contract::set_max_accum_open_vol(::google::protobuf::int32 value) {
  set_has_max_accum_open_vol();
  max_accum_open_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.max_accum_open_vol)
}

// optional int32 max_cancel_limit = 4;
bool MYC_contract::has_max_cancel_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MYC_contract::set_has_max_cancel_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void MYC_contract::clear_has_max_cancel_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void MYC_contract::clear_max_cancel_limit() {
  max_cancel_limit_ = 0;
  clear_has_max_cancel_limit();
}
 ::google::protobuf::int32 MYC_contract::max_cancel_limit() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.max_cancel_limit)
  return max_cancel_limit_;
}
 void MYC_contract::set_max_cancel_limit(::google::protobuf::int32 value) {
  set_has_max_cancel_limit();
  max_cancel_limit_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.max_cancel_limit)
}

// optional int32 expiration_date = 5;
bool MYC_contract::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MYC_contract::set_has_expiration_date() {
  _has_bits_[0] |= 0x00000010u;
}
void MYC_contract::clear_has_expiration_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void MYC_contract::clear_expiration_date() {
  expiration_date_ = 0;
  clear_has_expiration_date();
}
 ::google::protobuf::int32 MYC_contract::expiration_date() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.expiration_date)
  return expiration_date_;
}
 void MYC_contract::set_expiration_date(::google::protobuf::int32 value) {
  set_has_expiration_date();
  expiration_date_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.expiration_date)
}

// optional double tick_size = 6;
bool MYC_contract::has_tick_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MYC_contract::set_has_tick_size() {
  _has_bits_[0] |= 0x00000020u;
}
void MYC_contract::clear_has_tick_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void MYC_contract::clear_tick_size() {
  tick_size_ = 0;
  clear_has_tick_size();
}
 double MYC_contract::tick_size() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.tick_size)
  return tick_size_;
}
 void MYC_contract::set_tick_size(double value) {
  set_has_tick_size();
  tick_size_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.tick_size)
}

// optional double multiple = 7;
bool MYC_contract::has_multiple() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MYC_contract::set_has_multiple() {
  _has_bits_[0] |= 0x00000040u;
}
void MYC_contract::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000040u;
}
void MYC_contract::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
 double MYC_contract::multiple() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.multiple)
  return multiple_;
}
 void MYC_contract::set_multiple(double value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.multiple)
}

// optional string account = 8;
bool MYC_contract::has_account() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MYC_contract::set_has_account() {
  _has_bits_[0] |= 0x00000080u;
}
void MYC_contract::clear_has_account() {
  _has_bits_[0] &= ~0x00000080u;
}
void MYC_contract::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& MYC_contract::account() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_contract::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.account)
}
 void MYC_contract::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_contract.account)
}
 void MYC_contract::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_contract.account)
}
 ::std::string* MYC_contract::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_contract.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_contract::release_account() {
  // @@protoc_insertion_point(field_release:MYC.MYC_contract.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_contract::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_contract.account)
}

// optional int32 yesterday_pos_long_volume = 9;
bool MYC_contract::has_yesterday_pos_long_volume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MYC_contract::set_has_yesterday_pos_long_volume() {
  _has_bits_[0] |= 0x00000100u;
}
void MYC_contract::clear_has_yesterday_pos_long_volume() {
  _has_bits_[0] &= ~0x00000100u;
}
void MYC_contract::clear_yesterday_pos_long_volume() {
  yesterday_pos_long_volume_ = 0;
  clear_has_yesterday_pos_long_volume();
}
 ::google::protobuf::int32 MYC_contract::yesterday_pos_long_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_long_volume)
  return yesterday_pos_long_volume_;
}
 void MYC_contract::set_yesterday_pos_long_volume(::google::protobuf::int32 value) {
  set_has_yesterday_pos_long_volume();
  yesterday_pos_long_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_long_volume)
}

// optional double yesterday_pos_long_price = 10;
bool MYC_contract::has_yesterday_pos_long_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MYC_contract::set_has_yesterday_pos_long_price() {
  _has_bits_[0] |= 0x00000200u;
}
void MYC_contract::clear_has_yesterday_pos_long_price() {
  _has_bits_[0] &= ~0x00000200u;
}
void MYC_contract::clear_yesterday_pos_long_price() {
  yesterday_pos_long_price_ = 0;
  clear_has_yesterday_pos_long_price();
}
 double MYC_contract::yesterday_pos_long_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_long_price)
  return yesterday_pos_long_price_;
}
 void MYC_contract::set_yesterday_pos_long_price(double value) {
  set_has_yesterday_pos_long_price();
  yesterday_pos_long_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_long_price)
}

// optional int32 yesterday_pos_short_volume = 11;
bool MYC_contract::has_yesterday_pos_short_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MYC_contract::set_has_yesterday_pos_short_volume() {
  _has_bits_[0] |= 0x00000400u;
}
void MYC_contract::clear_has_yesterday_pos_short_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
void MYC_contract::clear_yesterday_pos_short_volume() {
  yesterday_pos_short_volume_ = 0;
  clear_has_yesterday_pos_short_volume();
}
 ::google::protobuf::int32 MYC_contract::yesterday_pos_short_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_short_volume)
  return yesterday_pos_short_volume_;
}
 void MYC_contract::set_yesterday_pos_short_volume(::google::protobuf::int32 value) {
  set_has_yesterday_pos_short_volume();
  yesterday_pos_short_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_short_volume)
}

// optional double yesterday_pos_short_price = 12;
bool MYC_contract::has_yesterday_pos_short_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MYC_contract::set_has_yesterday_pos_short_price() {
  _has_bits_[0] |= 0x00000800u;
}
void MYC_contract::clear_has_yesterday_pos_short_price() {
  _has_bits_[0] &= ~0x00000800u;
}
void MYC_contract::clear_yesterday_pos_short_price() {
  yesterday_pos_short_price_ = 0;
  clear_has_yesterday_pos_short_price();
}
 double MYC_contract::yesterday_pos_short_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yesterday_pos_short_price)
  return yesterday_pos_short_price_;
}
 void MYC_contract::set_yesterday_pos_short_price(double value) {
  set_has_yesterday_pos_short_price();
  yesterday_pos_short_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yesterday_pos_short_price)
}

// optional int32 today_pos_long_volume = 13;
bool MYC_contract::has_today_pos_long_volume() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MYC_contract::set_has_today_pos_long_volume() {
  _has_bits_[0] |= 0x00001000u;
}
void MYC_contract::clear_has_today_pos_long_volume() {
  _has_bits_[0] &= ~0x00001000u;
}
void MYC_contract::clear_today_pos_long_volume() {
  today_pos_long_volume_ = 0;
  clear_has_today_pos_long_volume();
}
 ::google::protobuf::int32 MYC_contract::today_pos_long_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_long_volume)
  return today_pos_long_volume_;
}
 void MYC_contract::set_today_pos_long_volume(::google::protobuf::int32 value) {
  set_has_today_pos_long_volume();
  today_pos_long_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_long_volume)
}

// optional double today_pos_long_price = 14;
bool MYC_contract::has_today_pos_long_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MYC_contract::set_has_today_pos_long_price() {
  _has_bits_[0] |= 0x00002000u;
}
void MYC_contract::clear_has_today_pos_long_price() {
  _has_bits_[0] &= ~0x00002000u;
}
void MYC_contract::clear_today_pos_long_price() {
  today_pos_long_price_ = 0;
  clear_has_today_pos_long_price();
}
 double MYC_contract::today_pos_long_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_long_price)
  return today_pos_long_price_;
}
 void MYC_contract::set_today_pos_long_price(double value) {
  set_has_today_pos_long_price();
  today_pos_long_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_long_price)
}

// optional int32 today_pos_short_volume = 15;
bool MYC_contract::has_today_pos_short_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MYC_contract::set_has_today_pos_short_volume() {
  _has_bits_[0] |= 0x00004000u;
}
void MYC_contract::clear_has_today_pos_short_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
void MYC_contract::clear_today_pos_short_volume() {
  today_pos_short_volume_ = 0;
  clear_has_today_pos_short_volume();
}
 ::google::protobuf::int32 MYC_contract::today_pos_short_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_short_volume)
  return today_pos_short_volume_;
}
 void MYC_contract::set_today_pos_short_volume(::google::protobuf::int32 value) {
  set_has_today_pos_short_volume();
  today_pos_short_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_short_volume)
}

// optional double today_pos_short_price = 16;
bool MYC_contract::has_today_pos_short_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MYC_contract::set_has_today_pos_short_price() {
  _has_bits_[0] |= 0x00008000u;
}
void MYC_contract::clear_has_today_pos_short_price() {
  _has_bits_[0] &= ~0x00008000u;
}
void MYC_contract::clear_today_pos_short_price() {
  today_pos_short_price_ = 0;
  clear_has_today_pos_short_price();
}
 double MYC_contract::today_pos_short_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.today_pos_short_price)
  return today_pos_short_price_;
}
 void MYC_contract::set_today_pos_short_price(double value) {
  set_has_today_pos_short_price();
  today_pos_short_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.today_pos_short_price)
}

// optional int32 fee_by_lot = 17;
bool MYC_contract::has_fee_by_lot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MYC_contract::set_has_fee_by_lot() {
  _has_bits_[0] |= 0x00010000u;
}
void MYC_contract::clear_has_fee_by_lot() {
  _has_bits_[0] &= ~0x00010000u;
}
void MYC_contract::clear_fee_by_lot() {
  fee_by_lot_ = 0;
  clear_has_fee_by_lot();
}
 ::google::protobuf::int32 MYC_contract::fee_by_lot() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.fee_by_lot)
  return fee_by_lot_;
}
 void MYC_contract::set_fee_by_lot(::google::protobuf::int32 value) {
  set_has_fee_by_lot();
  fee_by_lot_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.fee_by_lot)
}

// optional double exchange_fee = 18;
bool MYC_contract::has_exchange_fee() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MYC_contract::set_has_exchange_fee() {
  _has_bits_[0] |= 0x00020000u;
}
void MYC_contract::clear_has_exchange_fee() {
  _has_bits_[0] &= ~0x00020000u;
}
void MYC_contract::clear_exchange_fee() {
  exchange_fee_ = 0;
  clear_has_exchange_fee();
}
 double MYC_contract::exchange_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.exchange_fee)
  return exchange_fee_;
}
 void MYC_contract::set_exchange_fee(double value) {
  set_has_exchange_fee();
  exchange_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.exchange_fee)
}

// optional double yes_exchange_fee = 19;
bool MYC_contract::has_yes_exchange_fee() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MYC_contract::set_has_yes_exchange_fee() {
  _has_bits_[0] |= 0x00040000u;
}
void MYC_contract::clear_has_yes_exchange_fee() {
  _has_bits_[0] &= ~0x00040000u;
}
void MYC_contract::clear_yes_exchange_fee() {
  yes_exchange_fee_ = 0;
  clear_has_yes_exchange_fee();
}
 double MYC_contract::yes_exchange_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.yes_exchange_fee)
  return yes_exchange_fee_;
}
 void MYC_contract::set_yes_exchange_fee(double value) {
  set_has_yes_exchange_fee();
  yes_exchange_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.yes_exchange_fee)
}

// optional double broker_fee = 20;
bool MYC_contract::has_broker_fee() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MYC_contract::set_has_broker_fee() {
  _has_bits_[0] |= 0x00080000u;
}
void MYC_contract::clear_has_broker_fee() {
  _has_bits_[0] &= ~0x00080000u;
}
void MYC_contract::clear_broker_fee() {
  broker_fee_ = 0;
  clear_has_broker_fee();
}
 double MYC_contract::broker_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.broker_fee)
  return broker_fee_;
}
 void MYC_contract::set_broker_fee(double value) {
  set_has_broker_fee();
  broker_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.broker_fee)
}

// optional double stamp_tax = 21;
bool MYC_contract::has_stamp_tax() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void MYC_contract::set_has_stamp_tax() {
  _has_bits_[0] |= 0x00100000u;
}
void MYC_contract::clear_has_stamp_tax() {
  _has_bits_[0] &= ~0x00100000u;
}
void MYC_contract::clear_stamp_tax() {
  stamp_tax_ = 0;
  clear_has_stamp_tax();
}
 double MYC_contract::stamp_tax() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.stamp_tax)
  return stamp_tax_;
}
 void MYC_contract::set_stamp_tax(double value) {
  set_has_stamp_tax();
  stamp_tax_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.stamp_tax)
}

// optional double acc_transfer_fee = 22;
bool MYC_contract::has_acc_transfer_fee() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void MYC_contract::set_has_acc_transfer_fee() {
  _has_bits_[0] |= 0x00200000u;
}
void MYC_contract::clear_has_acc_transfer_fee() {
  _has_bits_[0] &= ~0x00200000u;
}
void MYC_contract::clear_acc_transfer_fee() {
  acc_transfer_fee_ = 0;
  clear_has_acc_transfer_fee();
}
 double MYC_contract::acc_transfer_fee() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_contract.acc_transfer_fee)
  return acc_transfer_fee_;
}
 void MYC_contract::set_acc_transfer_fee(double value) {
  set_has_acc_transfer_fee();
  acc_transfer_fee_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_contract.acc_transfer_fee)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MYC_account::kAccountFieldNumber;
const int MYC_account::kCurrencyFieldNumber;
const int MYC_account::kCashAssetFieldNumber;
const int MYC_account::kCashAvailableFieldNumber;
const int MYC_account::kExchRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_account::MYC_account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_account)
}

void MYC_account::InitAsDefaultInstance() {
}

MYC_account::MYC_account(const MYC_account& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_account)
}

void MYC_account::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_ = 0;
  cash_asset_ = 0;
  cash_available_ = 0;
  exch_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_account::~MYC_account() {
  // @@protoc_insertion_point(destructor:MYC.MYC_account)
  SharedDtor();
}

void MYC_account::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MYC_account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_account_descriptor_;
}

const MYC_account& MYC_account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_account* MYC_account::default_instance_ = NULL;

MYC_account* MYC_account::New(::google::protobuf::Arena* arena) const {
  MYC_account* n = new MYC_account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_account::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_account)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MYC_account, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MYC_account*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(cash_asset_, currency_);
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_account.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }

      // optional int32 currency = 2;
      case 2: {
        if (tag == 16) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cash_asset;
        break;
      }

      // optional double cash_asset = 3;
      case 3: {
        if (tag == 25) {
         parse_cash_asset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_asset_)));
          set_has_cash_asset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_cash_available;
        break;
      }

      // optional double cash_available = 4;
      case 4: {
        if (tag == 33) {
         parse_cash_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_available_)));
          set_has_cash_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_exch_rate;
        break;
      }

      // optional double exch_rate = 5;
      case 5: {
        if (tag == 41) {
         parse_exch_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exch_rate_)));
          set_has_exch_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_account)
  return false;
#undef DO_
}

void MYC_account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_account)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_account.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional int32 currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency(), output);
  }

  // optional double cash_asset = 3;
  if (has_cash_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cash_asset(), output);
  }

  // optional double cash_available = 4;
  if (has_cash_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cash_available(), output);
  }

  // optional double exch_rate = 5;
  if (has_exch_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->exch_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_account)
}

::google::protobuf::uint8* MYC_account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_account)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_account.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional int32 currency = 2;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency(), target);
  }

  // optional double cash_asset = 3;
  if (has_cash_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cash_asset(), target);
  }

  // optional double cash_available = 4;
  if (has_cash_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cash_available(), target);
  }

  // optional double exch_rate = 5;
  if (has_exch_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->exch_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_account)
  return target;
}

int MYC_account::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_account)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional double cash_asset = 3;
    if (has_cash_asset()) {
      total_size += 1 + 8;
    }

    // optional double cash_available = 4;
    if (has_cash_available()) {
      total_size += 1 + 8;
    }

    // optional double exch_rate = 5;
    if (has_exch_rate()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_account)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_account* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_account)
    MergeFrom(*source);
  }
}

void MYC_account::MergeFrom(const MYC_account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_account)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_cash_asset()) {
      set_cash_asset(from.cash_asset());
    }
    if (from.has_cash_available()) {
      set_cash_available(from.cash_available());
    }
    if (from.has_exch_rate()) {
      set_exch_rate(from.exch_rate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_account::CopyFrom(const MYC_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_account::IsInitialized() const {

  return true;
}

void MYC_account::Swap(MYC_account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_account::InternalSwap(MYC_account* other) {
  account_.Swap(&other->account_);
  std::swap(currency_, other->currency_);
  std::swap(cash_asset_, other->cash_asset_);
  std::swap(cash_available_, other->cash_available_);
  std::swap(exch_rate_, other->exch_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_account_descriptor_;
  metadata.reflection = MYC_account_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_account

// optional string account = 1;
bool MYC_account::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MYC_account::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void MYC_account::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void MYC_account::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& MYC_account::account() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_account::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_account.account)
}
 void MYC_account::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_account.account)
}
 void MYC_account::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_account.account)
}
 ::std::string* MYC_account::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_account.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_account::release_account() {
  // @@protoc_insertion_point(field_release:MYC.MYC_account.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_account::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_account.account)
}

// optional int32 currency = 2;
bool MYC_account::has_currency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MYC_account::set_has_currency() {
  _has_bits_[0] |= 0x00000002u;
}
void MYC_account::clear_has_currency() {
  _has_bits_[0] &= ~0x00000002u;
}
void MYC_account::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
 ::google::protobuf::int32 MYC_account::currency() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.currency)
  return currency_;
}
 void MYC_account::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.currency)
}

// optional double cash_asset = 3;
bool MYC_account::has_cash_asset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MYC_account::set_has_cash_asset() {
  _has_bits_[0] |= 0x00000004u;
}
void MYC_account::clear_has_cash_asset() {
  _has_bits_[0] &= ~0x00000004u;
}
void MYC_account::clear_cash_asset() {
  cash_asset_ = 0;
  clear_has_cash_asset();
}
 double MYC_account::cash_asset() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.cash_asset)
  return cash_asset_;
}
 void MYC_account::set_cash_asset(double value) {
  set_has_cash_asset();
  cash_asset_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.cash_asset)
}

// optional double cash_available = 4;
bool MYC_account::has_cash_available() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MYC_account::set_has_cash_available() {
  _has_bits_[0] |= 0x00000008u;
}
void MYC_account::clear_has_cash_available() {
  _has_bits_[0] &= ~0x00000008u;
}
void MYC_account::clear_cash_available() {
  cash_available_ = 0;
  clear_has_cash_available();
}
 double MYC_account::cash_available() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.cash_available)
  return cash_available_;
}
 void MYC_account::set_cash_available(double value) {
  set_has_cash_available();
  cash_available_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.cash_available)
}

// optional double exch_rate = 5;
bool MYC_account::has_exch_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MYC_account::set_has_exch_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void MYC_account::clear_has_exch_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void MYC_account::clear_exch_rate() {
  exch_rate_ = 0;
  clear_has_exch_rate();
}
 double MYC_account::exch_rate() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_account.exch_rate)
  return exch_rate_;
}
 void MYC_account::set_exch_rate(double value) {
  set_has_exch_rate();
  exch_rate_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_account.exch_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MYC_config::kTradingDateFieldNumber;
const int MYC_config::kDayNightFieldNumber;
const int MYC_config::kAccountsFieldNumber;
const int MYC_config::kContractsFieldNumber;
const int MYC_config::kParamFilePathFieldNumber;
const int MYC_config::kOutputFilePathFieldNumber;
const int MYC_config::kStIdFieldNumber;
const int MYC_config::kStNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_config::MYC_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_config)
}

void MYC_config::InitAsDefaultInstance() {
}

MYC_config::MYC_config(const MYC_config& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_config)
}

void MYC_config::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trading_date_ = 0;
  day_night_ = 0;
  accounts_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  accounts_.SetEntryDescriptor(
      &::MYC::MYC_config_AccountsEntry_descriptor_);
  contracts_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  contracts_.SetEntryDescriptor(
      &::MYC::MYC_config_ContractsEntry_descriptor_);
  param_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  st_id_ = 0;
  st_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_config::~MYC_config() {
  // @@protoc_insertion_point(destructor:MYC.MYC_config)
  SharedDtor();
}

void MYC_config::SharedDtor() {
  param_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  st_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MYC_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_config_descriptor_;
}

const MYC_config& MYC_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_config* MYC_config::default_instance_ = NULL;

MYC_config* MYC_config::New(::google::protobuf::Arena* arena) const {
  MYC_config* n = new MYC_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_config::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_config)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MYC_config, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MYC_config*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 243u) {
    ZR_(trading_date_, day_night_);
    if (has_param_file_path()) {
      param_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_output_file_path()) {
      output_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    st_id_ = 0;
    if (has_st_name()) {
      st_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  accounts_.Clear();
  contracts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trading_date = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_date_)));
          set_has_trading_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day_night;
        break;
      }

      // optional int32 day_night = 2;
      case 2: {
        if (tag == 16) {
         parse_day_night:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_night_)));
          set_has_day_night();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accounts;
        break;
      }

      // map<string, .MYC.MYC_account> accounts = 3;
      case 3: {
        if (tag == 26) {
         parse_accounts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_accounts:
          MYC_config_AccountsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::MYC::MYC_account,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::MYC::MYC_account > > parser(&accounts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_config.AccountsEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_accounts;
        if (input->ExpectTag(34)) goto parse_loop_contracts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .MYC.MYC_contract> contracts = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_contracts:
          MYC_config_ContractsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::MYC::MYC_contract,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract > > parser(&contracts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_config.ContractsEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_contracts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_param_file_path;
        break;
      }

      // optional string param_file_path = 5;
      case 5: {
        if (tag == 42) {
         parse_param_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_file_path().data(), this->param_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_config.param_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_output_file_path;
        break;
      }

      // optional string output_file_path = 6;
      case 6: {
        if (tag == 50) {
         parse_output_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_file_path().data(), this->output_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_config.output_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_st_id;
        break;
      }

      // optional int32 st_id = 7;
      case 7: {
        if (tag == 56) {
         parse_st_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &st_id_)));
          set_has_st_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_st_name;
        break;
      }

      // optional string st_name = 8;
      case 8: {
        if (tag == 66) {
         parse_st_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_st_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->st_name().data(), this->st_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_config.st_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_config)
  return false;
#undef DO_
}

void MYC_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_config)
  // optional int32 trading_date = 1;
  if (has_trading_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trading_date(), output);
  }

  // optional int32 day_night = 2;
  if (has_day_night()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day_night(), output);
  }

  // map<string, .MYC.MYC_account> accounts = 3;
  if (!this->accounts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MYC.MYC_config.AccountsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->accounts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->accounts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::const_iterator
          it = this->accounts().begin();
          it != this->accounts().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MYC_config_AccountsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(accounts_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MYC_config_AccountsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::const_iterator
          it = this->accounts().begin();
          it != this->accounts().end(); ++it) {
        entry.reset(accounts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .MYC.MYC_contract> contracts = 4;
  if (!this->contracts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MYC.MYC_config.ContractsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->contracts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->contracts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::const_iterator
          it = this->contracts().begin();
          it != this->contracts().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MYC_config_ContractsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(contracts_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MYC_config_ContractsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::const_iterator
          it = this->contracts().begin();
          it != this->contracts().end(); ++it) {
        entry.reset(contracts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string param_file_path = 5;
  if (has_param_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_file_path().data(), this->param_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_config.param_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->param_file_path(), output);
  }

  // optional string output_file_path = 6;
  if (has_output_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file_path().data(), this->output_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_config.output_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->output_file_path(), output);
  }

  // optional int32 st_id = 7;
  if (has_st_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->st_id(), output);
  }

  // optional string st_name = 8;
  if (has_st_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->st_name().data(), this->st_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_config.st_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->st_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_config)
}

::google::protobuf::uint8* MYC_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_config)
  // optional int32 trading_date = 1;
  if (has_trading_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trading_date(), target);
  }

  // optional int32 day_night = 2;
  if (has_day_night()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day_night(), target);
  }

  // map<string, .MYC.MYC_account> accounts = 3;
  if (!this->accounts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MYC.MYC_config.AccountsEntry.key");
      }
    };

    if (deterministic &&
        this->accounts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->accounts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::const_iterator
          it = this->accounts().begin();
          it != this->accounts().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MYC_config_AccountsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(accounts_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MYC_config_AccountsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::const_iterator
          it = this->accounts().begin();
          it != this->accounts().end(); ++it) {
        entry.reset(accounts_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .MYC.MYC_contract> contracts = 4;
  if (!this->contracts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MYC.MYC_config.ContractsEntry.key");
      }
    };

    if (deterministic &&
        this->contracts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->contracts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::const_iterator
          it = this->contracts().begin();
          it != this->contracts().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MYC_config_ContractsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(contracts_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MYC_config_ContractsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::const_iterator
          it = this->contracts().begin();
          it != this->contracts().end(); ++it) {
        entry.reset(contracts_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string param_file_path = 5;
  if (has_param_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_file_path().data(), this->param_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_config.param_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->param_file_path(), target);
  }

  // optional string output_file_path = 6;
  if (has_output_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file_path().data(), this->output_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_config.output_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->output_file_path(), target);
  }

  // optional int32 st_id = 7;
  if (has_st_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->st_id(), target);
  }

  // optional string st_name = 8;
  if (has_st_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->st_name().data(), this->st_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_config.st_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->st_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_config)
  return target;
}

int MYC_config::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_config)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 243u) {
    // optional int32 trading_date = 1;
    if (has_trading_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trading_date());
    }

    // optional int32 day_night = 2;
    if (has_day_night()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_night());
    }

    // optional string param_file_path = 5;
    if (has_param_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_file_path());
    }

    // optional string output_file_path = 6;
    if (has_output_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_file_path());
    }

    // optional int32 st_id = 7;
    if (has_st_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->st_id());
    }

    // optional string st_name = 8;
    if (has_st_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->st_name());
    }

  }
  // map<string, .MYC.MYC_account> accounts = 3;
  total_size += 1 * this->accounts_size();
  {
    ::google::protobuf::scoped_ptr<MYC_config_AccountsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::MYC::MYC_account >::const_iterator
        it = this->accounts().begin();
        it != this->accounts().end(); ++it) {
      entry.reset(accounts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .MYC.MYC_contract> contracts = 4;
  total_size += 1 * this->contracts_size();
  {
    ::google::protobuf::scoped_ptr<MYC_config_ContractsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >::const_iterator
        it = this->contracts().begin();
        it != this->contracts().end(); ++it) {
      entry.reset(contracts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_config* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_config)
    MergeFrom(*source);
  }
}

void MYC_config::MergeFrom(const MYC_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  accounts_.MergeFrom(from.accounts_);
  contracts_.MergeFrom(from.contracts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_date()) {
      set_trading_date(from.trading_date());
    }
    if (from.has_day_night()) {
      set_day_night(from.day_night());
    }
    if (from.has_param_file_path()) {
      set_has_param_file_path();
      param_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_file_path_);
    }
    if (from.has_output_file_path()) {
      set_has_output_file_path();
      output_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_file_path_);
    }
    if (from.has_st_id()) {
      set_st_id(from.st_id());
    }
    if (from.has_st_name()) {
      set_has_st_name();
      st_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.st_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_config::CopyFrom(const MYC_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_config::IsInitialized() const {

  return true;
}

void MYC_config::Swap(MYC_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_config::InternalSwap(MYC_config* other) {
  std::swap(trading_date_, other->trading_date_);
  std::swap(day_night_, other->day_night_);
  accounts_.Swap(&other->accounts_);
  contracts_.Swap(&other->contracts_);
  param_file_path_.Swap(&other->param_file_path_);
  output_file_path_.Swap(&other->output_file_path_);
  std::swap(st_id_, other->st_id_);
  st_name_.Swap(&other->st_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_config_descriptor_;
  metadata.reflection = MYC_config_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_config

// optional int32 trading_date = 1;
bool MYC_config::has_trading_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MYC_config::set_has_trading_date() {
  _has_bits_[0] |= 0x00000001u;
}
void MYC_config::clear_has_trading_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void MYC_config::clear_trading_date() {
  trading_date_ = 0;
  clear_has_trading_date();
}
 ::google::protobuf::int32 MYC_config::trading_date() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.trading_date)
  return trading_date_;
}
 void MYC_config::set_trading_date(::google::protobuf::int32 value) {
  set_has_trading_date();
  trading_date_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_config.trading_date)
}

// optional int32 day_night = 2;
bool MYC_config::has_day_night() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MYC_config::set_has_day_night() {
  _has_bits_[0] |= 0x00000002u;
}
void MYC_config::clear_has_day_night() {
  _has_bits_[0] &= ~0x00000002u;
}
void MYC_config::clear_day_night() {
  day_night_ = 0;
  clear_has_day_night();
}
 ::google::protobuf::int32 MYC_config::day_night() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.day_night)
  return day_night_;
}
 void MYC_config::set_day_night(::google::protobuf::int32 value) {
  set_has_day_night();
  day_night_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_config.day_night)
}

// map<string, .MYC.MYC_account> accounts = 3;
int MYC_config::accounts_size() const {
  return accounts_.size();
}
void MYC_config::clear_accounts() {
  accounts_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >&
MYC_config::accounts() const {
  // @@protoc_insertion_point(field_map:MYC.MYC_config.accounts)
  return accounts_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::MYC::MYC_account >*
MYC_config::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_map:MYC.MYC_config.accounts)
  return accounts_.MutableMap();
}

// map<string, .MYC.MYC_contract> contracts = 4;
int MYC_config::contracts_size() const {
  return contracts_.size();
}
void MYC_config::clear_contracts() {
  contracts_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >&
MYC_config::contracts() const {
  // @@protoc_insertion_point(field_map:MYC.MYC_config.contracts)
  return contracts_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::MYC::MYC_contract >*
MYC_config::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_map:MYC.MYC_config.contracts)
  return contracts_.MutableMap();
}

// optional string param_file_path = 5;
bool MYC_config::has_param_file_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MYC_config::set_has_param_file_path() {
  _has_bits_[0] |= 0x00000010u;
}
void MYC_config::clear_has_param_file_path() {
  _has_bits_[0] &= ~0x00000010u;
}
void MYC_config::clear_param_file_path() {
  param_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_file_path();
}
 const ::std::string& MYC_config::param_file_path() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.param_file_path)
  return param_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_config::set_param_file_path(const ::std::string& value) {
  set_has_param_file_path();
  param_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_config.param_file_path)
}
 void MYC_config::set_param_file_path(const char* value) {
  set_has_param_file_path();
  param_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_config.param_file_path)
}
 void MYC_config::set_param_file_path(const char* value, size_t size) {
  set_has_param_file_path();
  param_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_config.param_file_path)
}
 ::std::string* MYC_config::mutable_param_file_path() {
  set_has_param_file_path();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_config.param_file_path)
  return param_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_config::release_param_file_path() {
  // @@protoc_insertion_point(field_release:MYC.MYC_config.param_file_path)
  clear_has_param_file_path();
  return param_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_config::set_allocated_param_file_path(::std::string* param_file_path) {
  if (param_file_path != NULL) {
    set_has_param_file_path();
  } else {
    clear_has_param_file_path();
  }
  param_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_file_path);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_config.param_file_path)
}

// optional string output_file_path = 6;
bool MYC_config::has_output_file_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MYC_config::set_has_output_file_path() {
  _has_bits_[0] |= 0x00000020u;
}
void MYC_config::clear_has_output_file_path() {
  _has_bits_[0] &= ~0x00000020u;
}
void MYC_config::clear_output_file_path() {
  output_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_file_path();
}
 const ::std::string& MYC_config::output_file_path() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.output_file_path)
  return output_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_config::set_output_file_path(const ::std::string& value) {
  set_has_output_file_path();
  output_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_config.output_file_path)
}
 void MYC_config::set_output_file_path(const char* value) {
  set_has_output_file_path();
  output_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_config.output_file_path)
}
 void MYC_config::set_output_file_path(const char* value, size_t size) {
  set_has_output_file_path();
  output_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_config.output_file_path)
}
 ::std::string* MYC_config::mutable_output_file_path() {
  set_has_output_file_path();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_config.output_file_path)
  return output_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_config::release_output_file_path() {
  // @@protoc_insertion_point(field_release:MYC.MYC_config.output_file_path)
  clear_has_output_file_path();
  return output_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_config::set_allocated_output_file_path(::std::string* output_file_path) {
  if (output_file_path != NULL) {
    set_has_output_file_path();
  } else {
    clear_has_output_file_path();
  }
  output_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_file_path);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_config.output_file_path)
}

// optional int32 st_id = 7;
bool MYC_config::has_st_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MYC_config::set_has_st_id() {
  _has_bits_[0] |= 0x00000040u;
}
void MYC_config::clear_has_st_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void MYC_config::clear_st_id() {
  st_id_ = 0;
  clear_has_st_id();
}
 ::google::protobuf::int32 MYC_config::st_id() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.st_id)
  return st_id_;
}
 void MYC_config::set_st_id(::google::protobuf::int32 value) {
  set_has_st_id();
  st_id_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_config.st_id)
}

// optional string st_name = 8;
bool MYC_config::has_st_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MYC_config::set_has_st_name() {
  _has_bits_[0] |= 0x00000080u;
}
void MYC_config::clear_has_st_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void MYC_config::clear_st_name() {
  st_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_st_name();
}
 const ::std::string& MYC_config::st_name() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_config.st_name)
  return st_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_config::set_st_name(const ::std::string& value) {
  set_has_st_name();
  st_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_config.st_name)
}
 void MYC_config::set_st_name(const char* value) {
  set_has_st_name();
  st_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_config.st_name)
}
 void MYC_config::set_st_name(const char* value, size_t size) {
  set_has_st_name();
  st_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_config.st_name)
}
 ::std::string* MYC_config::mutable_st_name() {
  set_has_st_name();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_config.st_name)
  return st_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_config::release_st_name() {
  // @@protoc_insertion_point(field_release:MYC.MYC_config.st_name)
  clear_has_st_name();
  return st_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_config::set_allocated_st_name(::std::string* st_name) {
  if (st_name != NULL) {
    set_has_st_name();
  } else {
    clear_has_st_name();
  }
  st_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), st_name);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_config.st_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MYC_future_quote::kFeedTypeFieldNumber;
const int MYC_future_quote::kSymbolFieldNumber;
const int MYC_future_quote::kExchangeFieldNumber;
const int MYC_future_quote::kIntTimeFieldNumber;
const int MYC_future_quote::kPreClosePxFieldNumber;
const int MYC_future_quote::kPreSettlePxFieldNumber;
const int MYC_future_quote::kPreOpenInterestFieldNumber;
const int MYC_future_quote::kOpenInterestFieldNumber;
const int MYC_future_quote::kOpenPxFieldNumber;
const int MYC_future_quote::kHighPxFieldNumber;
const int MYC_future_quote::kLowPxFieldNumber;
const int MYC_future_quote::kAvgPxFieldNumber;
const int MYC_future_quote::kLastPxFieldNumber;
const int MYC_future_quote::kTotalVolFieldNumber;
const int MYC_future_quote::kTotalNotionalFieldNumber;
const int MYC_future_quote::kUpperLimitPxFieldNumber;
const int MYC_future_quote::kLowerLimitPxFieldNumber;
const int MYC_future_quote::kClosePxFieldNumber;
const int MYC_future_quote::kSettlePxFieldNumber;
const int MYC_future_quote::kTotalBuyOrdsizeFieldNumber;
const int MYC_future_quote::kTotalSellOrdsizeFieldNumber;
const int MYC_future_quote::kWeightedBuyPxFieldNumber;
const int MYC_future_quote::kWeightedSellPxFieldNumber;
const int MYC_future_quote::kImpliedBidSize1FieldNumber;
const int MYC_future_quote::kImpliedAskSize1FieldNumber;
const int MYC_future_quote::kImpliedBidSize2FieldNumber;
const int MYC_future_quote::kImpliedAskSize2FieldNumber;
const int MYC_future_quote::kImpliedBidSize3FieldNumber;
const int MYC_future_quote::kImpliedAskSize3FieldNumber;
const int MYC_future_quote::kImpliedBidSize4FieldNumber;
const int MYC_future_quote::kImpliedAskSize4FieldNumber;
const int MYC_future_quote::kImpliedBidSize5FieldNumber;
const int MYC_future_quote::kImpliedAskSize5FieldNumber;
const int MYC_future_quote::kBp1FieldNumber;
const int MYC_future_quote::kBv1FieldNumber;
const int MYC_future_quote::kAp1FieldNumber;
const int MYC_future_quote::kAv1FieldNumber;
const int MYC_future_quote::kBp2FieldNumber;
const int MYC_future_quote::kBv2FieldNumber;
const int MYC_future_quote::kAp2FieldNumber;
const int MYC_future_quote::kAv2FieldNumber;
const int MYC_future_quote::kBp3FieldNumber;
const int MYC_future_quote::kBv3FieldNumber;
const int MYC_future_quote::kAp3FieldNumber;
const int MYC_future_quote::kAv3FieldNumber;
const int MYC_future_quote::kBp4FieldNumber;
const int MYC_future_quote::kBv4FieldNumber;
const int MYC_future_quote::kAp4FieldNumber;
const int MYC_future_quote::kAv4FieldNumber;
const int MYC_future_quote::kBp5FieldNumber;
const int MYC_future_quote::kBv5FieldNumber;
const int MYC_future_quote::kAp5FieldNumber;
const int MYC_future_quote::kAv5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_future_quote::MYC_future_quote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_future_quote)
}

void MYC_future_quote::InitAsDefaultInstance() {
}

MYC_future_quote::MYC_future_quote(const MYC_future_quote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_future_quote)
}

void MYC_future_quote::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  feed_type_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
  int_time_ = 0;
  pre_close_px_ = 0;
  pre_settle_px_ = 0;
  pre_open_interest_ = 0;
  open_interest_ = 0;
  open_px_ = 0;
  high_px_ = 0;
  low_px_ = 0;
  avg_px_ = 0;
  last_px_ = 0;
  total_vol_ = GOOGLE_LONGLONG(0);
  total_notional_ = 0;
  upper_limit_px_ = 0;
  lower_limit_px_ = 0;
  close_px_ = 0;
  settle_px_ = 0;
  total_buy_ordsize_ = 0;
  total_sell_ordsize_ = 0;
  weighted_buy_px_ = 0;
  weighted_sell_px_ = 0;
  implied_bid_size1_ = 0;
  implied_ask_size1_ = 0;
  implied_bid_size2_ = 0;
  implied_ask_size2_ = 0;
  implied_bid_size3_ = 0;
  implied_ask_size3_ = 0;
  implied_bid_size4_ = 0;
  implied_ask_size4_ = 0;
  implied_bid_size5_ = 0;
  implied_ask_size5_ = 0;
  bp1_ = 0;
  bv1_ = 0;
  ap1_ = 0;
  av1_ = 0;
  bp2_ = 0;
  bv2_ = 0;
  ap2_ = 0;
  av2_ = 0;
  bp3_ = 0;
  bv3_ = 0;
  ap3_ = 0;
  av3_ = 0;
  bp4_ = 0;
  bv4_ = 0;
  ap4_ = 0;
  av4_ = 0;
  bp5_ = 0;
  bv5_ = 0;
  ap5_ = 0;
  av5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_future_quote::~MYC_future_quote() {
  // @@protoc_insertion_point(destructor:MYC.MYC_future_quote)
  SharedDtor();
}

void MYC_future_quote::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MYC_future_quote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_future_quote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_future_quote_descriptor_;
}

const MYC_future_quote& MYC_future_quote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_future_quote* MYC_future_quote::default_instance_ = NULL;

MYC_future_quote* MYC_future_quote::New(::google::protobuf::Arena* arena) const {
  MYC_future_quote* n = new MYC_future_quote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_future_quote::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_future_quote)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MYC_future_quote, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MYC_future_quote*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(feed_type_, open_interest_);
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    int_time_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(open_px_, avg_px_);
    ZR_(last_px_, upper_limit_px_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(lower_limit_px_, weighted_sell_px_);
    total_buy_ordsize_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(implied_ask_size1_, implied_bid_size5_);
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(bp1_, ap2_);
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ZR_(bp3_, ap4_);
  }
  if (_has_bits_[48 / 32] & 2031616u) {
    ZR_(bp5_, av5_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_future_quote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_future_quote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 feed_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_type_)));
          set_has_feed_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional string symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_future_quote.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exchange;
        break;
      }

      // optional int32 exchange = 3;
      case 3: {
        if (tag == 24) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_int_time;
        break;
      }

      // optional int32 int_time = 4;
      case 4: {
        if (tag == 32) {
         parse_int_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_time_)));
          set_has_int_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_pre_close_px;
        break;
      }

      // optional double pre_close_px = 5;
      case 5: {
        if (tag == 41) {
         parse_pre_close_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_close_px_)));
          set_has_pre_close_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_pre_settle_px;
        break;
      }

      // optional double pre_settle_px = 6;
      case 6: {
        if (tag == 49) {
         parse_pre_settle_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settle_px_)));
          set_has_pre_settle_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_pre_open_interest;
        break;
      }

      // optional double pre_open_interest = 7;
      case 7: {
        if (tag == 57) {
         parse_pre_open_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_open_interest_)));
          set_has_pre_open_interest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_open_interest;
        break;
      }

      // optional double open_interest = 8;
      case 8: {
        if (tag == 65) {
         parse_open_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_interest_)));
          set_has_open_interest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_open_px;
        break;
      }

      // optional double open_px = 9;
      case 9: {
        if (tag == 73) {
         parse_open_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_px_)));
          set_has_open_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_high_px;
        break;
      }

      // optional double high_px = 10;
      case 10: {
        if (tag == 81) {
         parse_high_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_px_)));
          set_has_high_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_low_px;
        break;
      }

      // optional double low_px = 11;
      case 11: {
        if (tag == 89) {
         parse_low_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_px_)));
          set_has_low_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_avg_px;
        break;
      }

      // optional double avg_px = 12;
      case 12: {
        if (tag == 97) {
         parse_avg_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_px_)));
          set_has_avg_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_last_px;
        break;
      }

      // optional double last_px = 13;
      case 13: {
        if (tag == 105) {
         parse_last_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_px_)));
          set_has_last_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_total_vol;
        break;
      }

      // optional int64 total_vol = 18;
      case 18: {
        if (tag == 144) {
         parse_total_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_vol_)));
          set_has_total_vol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_total_notional;
        break;
      }

      // optional double total_notional = 19;
      case 19: {
        if (tag == 153) {
         parse_total_notional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_notional_)));
          set_has_total_notional();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_upper_limit_px;
        break;
      }

      // optional double upper_limit_px = 20;
      case 20: {
        if (tag == 161) {
         parse_upper_limit_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_limit_px_)));
          set_has_upper_limit_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_lower_limit_px;
        break;
      }

      // optional double lower_limit_px = 21;
      case 21: {
        if (tag == 169) {
         parse_lower_limit_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_limit_px_)));
          set_has_lower_limit_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_close_px;
        break;
      }

      // optional double close_px = 22;
      case 22: {
        if (tag == 177) {
         parse_close_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_px_)));
          set_has_close_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_settle_px;
        break;
      }

      // optional double settle_px = 23;
      case 23: {
        if (tag == 185) {
         parse_settle_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settle_px_)));
          set_has_settle_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_total_buy_ordsize;
        break;
      }

      // optional int32 total_buy_ordsize = 26;
      case 26: {
        if (tag == 208) {
         parse_total_buy_ordsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_buy_ordsize_)));
          set_has_total_buy_ordsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_total_sell_ordsize;
        break;
      }

      // optional int32 total_sell_ordsize = 27;
      case 27: {
        if (tag == 216) {
         parse_total_sell_ordsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_sell_ordsize_)));
          set_has_total_sell_ordsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_weighted_buy_px;
        break;
      }

      // optional double weighted_buy_px = 28;
      case 28: {
        if (tag == 225) {
         parse_weighted_buy_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weighted_buy_px_)));
          set_has_weighted_buy_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_weighted_sell_px;
        break;
      }

      // optional double weighted_sell_px = 29;
      case 29: {
        if (tag == 233) {
         parse_weighted_sell_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weighted_sell_px_)));
          set_has_weighted_sell_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_implied_bid_size1;
        break;
      }

      // optional int32 implied_bid_size1 = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_implied_bid_size1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_bid_size1_)));
          set_has_implied_bid_size1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_implied_ask_size1;
        break;
      }

      // optional int32 implied_ask_size1 = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_implied_ask_size1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_ask_size1_)));
          set_has_implied_ask_size1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_implied_bid_size2;
        break;
      }

      // optional int32 implied_bid_size2 = 33 [default = 0];
      case 33: {
        if (tag == 264) {
         parse_implied_bid_size2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_bid_size2_)));
          set_has_implied_bid_size2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_implied_ask_size2;
        break;
      }

      // optional int32 implied_ask_size2 = 34 [default = 0];
      case 34: {
        if (tag == 272) {
         parse_implied_ask_size2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_ask_size2_)));
          set_has_implied_ask_size2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_implied_bid_size3;
        break;
      }

      // optional int32 implied_bid_size3 = 35 [default = 0];
      case 35: {
        if (tag == 280) {
         parse_implied_bid_size3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_bid_size3_)));
          set_has_implied_bid_size3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_implied_ask_size3;
        break;
      }

      // optional int32 implied_ask_size3 = 36 [default = 0];
      case 36: {
        if (tag == 288) {
         parse_implied_ask_size3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_ask_size3_)));
          set_has_implied_ask_size3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_implied_bid_size4;
        break;
      }

      // optional int32 implied_bid_size4 = 37 [default = 0];
      case 37: {
        if (tag == 296) {
         parse_implied_bid_size4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_bid_size4_)));
          set_has_implied_bid_size4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_implied_ask_size4;
        break;
      }

      // optional int32 implied_ask_size4 = 38 [default = 0];
      case 38: {
        if (tag == 304) {
         parse_implied_ask_size4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_ask_size4_)));
          set_has_implied_ask_size4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_implied_bid_size5;
        break;
      }

      // optional int32 implied_bid_size5 = 39 [default = 0];
      case 39: {
        if (tag == 312) {
         parse_implied_bid_size5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_bid_size5_)));
          set_has_implied_bid_size5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_implied_ask_size5;
        break;
      }

      // optional int32 implied_ask_size5 = 40 [default = 0];
      case 40: {
        if (tag == 320) {
         parse_implied_ask_size5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implied_ask_size5_)));
          set_has_implied_ask_size5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_bp1;
        break;
      }

      // optional double bp1 = 41 [default = 0];
      case 41: {
        if (tag == 329) {
         parse_bp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp1_)));
          set_has_bp1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_bv1;
        break;
      }

      // optional int32 bv1 = 42 [default = 0];
      case 42: {
        if (tag == 336) {
         parse_bv1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv1_)));
          set_has_bv1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(345)) goto parse_ap1;
        break;
      }

      // optional double ap1 = 43 [default = 0];
      case 43: {
        if (tag == 345) {
         parse_ap1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap1_)));
          set_has_ap1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_av1;
        break;
      }

      // optional int32 av1 = 44 [default = 0];
      case 44: {
        if (tag == 352) {
         parse_av1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av1_)));
          set_has_av1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(361)) goto parse_bp2;
        break;
      }

      // optional double bp2 = 45 [default = 0];
      case 45: {
        if (tag == 361) {
         parse_bp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp2_)));
          set_has_bp2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_bv2;
        break;
      }

      // optional int32 bv2 = 46 [default = 0];
      case 46: {
        if (tag == 368) {
         parse_bv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv2_)));
          set_has_bv2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(377)) goto parse_ap2;
        break;
      }

      // optional double ap2 = 47 [default = 0];
      case 47: {
        if (tag == 377) {
         parse_ap2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap2_)));
          set_has_ap2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_av2;
        break;
      }

      // optional int32 av2 = 48 [default = 0];
      case 48: {
        if (tag == 384) {
         parse_av2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av2_)));
          set_has_av2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(393)) goto parse_bp3;
        break;
      }

      // optional double bp3 = 49 [default = 0];
      case 49: {
        if (tag == 393) {
         parse_bp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp3_)));
          set_has_bp3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_bv3;
        break;
      }

      // optional int32 bv3 = 50 [default = 0];
      case 50: {
        if (tag == 400) {
         parse_bv3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv3_)));
          set_has_bv3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(409)) goto parse_ap3;
        break;
      }

      // optional double ap3 = 51 [default = 0];
      case 51: {
        if (tag == 409) {
         parse_ap3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap3_)));
          set_has_ap3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_av3;
        break;
      }

      // optional int32 av3 = 52 [default = 0];
      case 52: {
        if (tag == 416) {
         parse_av3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av3_)));
          set_has_av3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(425)) goto parse_bp4;
        break;
      }

      // optional double bp4 = 53 [default = 0];
      case 53: {
        if (tag == 425) {
         parse_bp4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp4_)));
          set_has_bp4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_bv4;
        break;
      }

      // optional int32 bv4 = 54 [default = 0];
      case 54: {
        if (tag == 432) {
         parse_bv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv4_)));
          set_has_bv4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(441)) goto parse_ap4;
        break;
      }

      // optional double ap4 = 55 [default = 0];
      case 55: {
        if (tag == 441) {
         parse_ap4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap4_)));
          set_has_ap4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_av4;
        break;
      }

      // optional int32 av4 = 56 [default = 0];
      case 56: {
        if (tag == 448) {
         parse_av4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av4_)));
          set_has_av4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(457)) goto parse_bp5;
        break;
      }

      // optional double bp5 = 57 [default = 0];
      case 57: {
        if (tag == 457) {
         parse_bp5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp5_)));
          set_has_bp5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_bv5;
        break;
      }

      // optional int32 bv5 = 58 [default = 0];
      case 58: {
        if (tag == 464) {
         parse_bv5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv5_)));
          set_has_bv5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(473)) goto parse_ap5;
        break;
      }

      // optional double ap5 = 59 [default = 0];
      case 59: {
        if (tag == 473) {
         parse_ap5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap5_)));
          set_has_ap5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_av5;
        break;
      }

      // optional int32 av5 = 60 [default = 0];
      case 60: {
        if (tag == 480) {
         parse_av5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av5_)));
          set_has_av5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_future_quote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_future_quote)
  return false;
#undef DO_
}

void MYC_future_quote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_future_quote)
  // optional int32 feed_type = 1;
  if (has_feed_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feed_type(), output);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_future_quote.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional int32 exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exchange(), output);
  }

  // optional int32 int_time = 4;
  if (has_int_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->int_time(), output);
  }

  // optional double pre_close_px = 5;
  if (has_pre_close_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pre_close_px(), output);
  }

  // optional double pre_settle_px = 6;
  if (has_pre_settle_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pre_settle_px(), output);
  }

  // optional double pre_open_interest = 7;
  if (has_pre_open_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pre_open_interest(), output);
  }

  // optional double open_interest = 8;
  if (has_open_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->open_interest(), output);
  }

  // optional double open_px = 9;
  if (has_open_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->open_px(), output);
  }

  // optional double high_px = 10;
  if (has_high_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->high_px(), output);
  }

  // optional double low_px = 11;
  if (has_low_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->low_px(), output);
  }

  // optional double avg_px = 12;
  if (has_avg_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->avg_px(), output);
  }

  // optional double last_px = 13;
  if (has_last_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->last_px(), output);
  }

  // optional int64 total_vol = 18;
  if (has_total_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->total_vol(), output);
  }

  // optional double total_notional = 19;
  if (has_total_notional()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->total_notional(), output);
  }

  // optional double upper_limit_px = 20;
  if (has_upper_limit_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->upper_limit_px(), output);
  }

  // optional double lower_limit_px = 21;
  if (has_lower_limit_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->lower_limit_px(), output);
  }

  // optional double close_px = 22;
  if (has_close_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->close_px(), output);
  }

  // optional double settle_px = 23;
  if (has_settle_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->settle_px(), output);
  }

  // optional int32 total_buy_ordsize = 26;
  if (has_total_buy_ordsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->total_buy_ordsize(), output);
  }

  // optional int32 total_sell_ordsize = 27;
  if (has_total_sell_ordsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->total_sell_ordsize(), output);
  }

  // optional double weighted_buy_px = 28;
  if (has_weighted_buy_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->weighted_buy_px(), output);
  }

  // optional double weighted_sell_px = 29;
  if (has_weighted_sell_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->weighted_sell_px(), output);
  }

  // optional int32 implied_bid_size1 = 31 [default = 0];
  if (has_implied_bid_size1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->implied_bid_size1(), output);
  }

  // optional int32 implied_ask_size1 = 32 [default = 0];
  if (has_implied_ask_size1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->implied_ask_size1(), output);
  }

  // optional int32 implied_bid_size2 = 33 [default = 0];
  if (has_implied_bid_size2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->implied_bid_size2(), output);
  }

  // optional int32 implied_ask_size2 = 34 [default = 0];
  if (has_implied_ask_size2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->implied_ask_size2(), output);
  }

  // optional int32 implied_bid_size3 = 35 [default = 0];
  if (has_implied_bid_size3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->implied_bid_size3(), output);
  }

  // optional int32 implied_ask_size3 = 36 [default = 0];
  if (has_implied_ask_size3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->implied_ask_size3(), output);
  }

  // optional int32 implied_bid_size4 = 37 [default = 0];
  if (has_implied_bid_size4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->implied_bid_size4(), output);
  }

  // optional int32 implied_ask_size4 = 38 [default = 0];
  if (has_implied_ask_size4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->implied_ask_size4(), output);
  }

  // optional int32 implied_bid_size5 = 39 [default = 0];
  if (has_implied_bid_size5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->implied_bid_size5(), output);
  }

  // optional int32 implied_ask_size5 = 40 [default = 0];
  if (has_implied_ask_size5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->implied_ask_size5(), output);
  }

  // optional double bp1 = 41 [default = 0];
  if (has_bp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->bp1(), output);
  }

  // optional int32 bv1 = 42 [default = 0];
  if (has_bv1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->bv1(), output);
  }

  // optional double ap1 = 43 [default = 0];
  if (has_ap1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->ap1(), output);
  }

  // optional int32 av1 = 44 [default = 0];
  if (has_av1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->av1(), output);
  }

  // optional double bp2 = 45 [default = 0];
  if (has_bp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->bp2(), output);
  }

  // optional int32 bv2 = 46 [default = 0];
  if (has_bv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->bv2(), output);
  }

  // optional double ap2 = 47 [default = 0];
  if (has_ap2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->ap2(), output);
  }

  // optional int32 av2 = 48 [default = 0];
  if (has_av2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->av2(), output);
  }

  // optional double bp3 = 49 [default = 0];
  if (has_bp3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(49, this->bp3(), output);
  }

  // optional int32 bv3 = 50 [default = 0];
  if (has_bv3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->bv3(), output);
  }

  // optional double ap3 = 51 [default = 0];
  if (has_ap3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->ap3(), output);
  }

  // optional int32 av3 = 52 [default = 0];
  if (has_av3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->av3(), output);
  }

  // optional double bp4 = 53 [default = 0];
  if (has_bp4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->bp4(), output);
  }

  // optional int32 bv4 = 54 [default = 0];
  if (has_bv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->bv4(), output);
  }

  // optional double ap4 = 55 [default = 0];
  if (has_ap4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->ap4(), output);
  }

  // optional int32 av4 = 56 [default = 0];
  if (has_av4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->av4(), output);
  }

  // optional double bp5 = 57 [default = 0];
  if (has_bp5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(57, this->bp5(), output);
  }

  // optional int32 bv5 = 58 [default = 0];
  if (has_bv5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->bv5(), output);
  }

  // optional double ap5 = 59 [default = 0];
  if (has_ap5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(59, this->ap5(), output);
  }

  // optional int32 av5 = 60 [default = 0];
  if (has_av5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->av5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_future_quote)
}

::google::protobuf::uint8* MYC_future_quote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_future_quote)
  // optional int32 feed_type = 1;
  if (has_feed_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feed_type(), target);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_future_quote.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional int32 exchange = 3;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exchange(), target);
  }

  // optional int32 int_time = 4;
  if (has_int_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->int_time(), target);
  }

  // optional double pre_close_px = 5;
  if (has_pre_close_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pre_close_px(), target);
  }

  // optional double pre_settle_px = 6;
  if (has_pre_settle_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pre_settle_px(), target);
  }

  // optional double pre_open_interest = 7;
  if (has_pre_open_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pre_open_interest(), target);
  }

  // optional double open_interest = 8;
  if (has_open_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->open_interest(), target);
  }

  // optional double open_px = 9;
  if (has_open_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->open_px(), target);
  }

  // optional double high_px = 10;
  if (has_high_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->high_px(), target);
  }

  // optional double low_px = 11;
  if (has_low_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->low_px(), target);
  }

  // optional double avg_px = 12;
  if (has_avg_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->avg_px(), target);
  }

  // optional double last_px = 13;
  if (has_last_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->last_px(), target);
  }

  // optional int64 total_vol = 18;
  if (has_total_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->total_vol(), target);
  }

  // optional double total_notional = 19;
  if (has_total_notional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->total_notional(), target);
  }

  // optional double upper_limit_px = 20;
  if (has_upper_limit_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->upper_limit_px(), target);
  }

  // optional double lower_limit_px = 21;
  if (has_lower_limit_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->lower_limit_px(), target);
  }

  // optional double close_px = 22;
  if (has_close_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->close_px(), target);
  }

  // optional double settle_px = 23;
  if (has_settle_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->settle_px(), target);
  }

  // optional int32 total_buy_ordsize = 26;
  if (has_total_buy_ordsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->total_buy_ordsize(), target);
  }

  // optional int32 total_sell_ordsize = 27;
  if (has_total_sell_ordsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->total_sell_ordsize(), target);
  }

  // optional double weighted_buy_px = 28;
  if (has_weighted_buy_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->weighted_buy_px(), target);
  }

  // optional double weighted_sell_px = 29;
  if (has_weighted_sell_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->weighted_sell_px(), target);
  }

  // optional int32 implied_bid_size1 = 31 [default = 0];
  if (has_implied_bid_size1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->implied_bid_size1(), target);
  }

  // optional int32 implied_ask_size1 = 32 [default = 0];
  if (has_implied_ask_size1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->implied_ask_size1(), target);
  }

  // optional int32 implied_bid_size2 = 33 [default = 0];
  if (has_implied_bid_size2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->implied_bid_size2(), target);
  }

  // optional int32 implied_ask_size2 = 34 [default = 0];
  if (has_implied_ask_size2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->implied_ask_size2(), target);
  }

  // optional int32 implied_bid_size3 = 35 [default = 0];
  if (has_implied_bid_size3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->implied_bid_size3(), target);
  }

  // optional int32 implied_ask_size3 = 36 [default = 0];
  if (has_implied_ask_size3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->implied_ask_size3(), target);
  }

  // optional int32 implied_bid_size4 = 37 [default = 0];
  if (has_implied_bid_size4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->implied_bid_size4(), target);
  }

  // optional int32 implied_ask_size4 = 38 [default = 0];
  if (has_implied_ask_size4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->implied_ask_size4(), target);
  }

  // optional int32 implied_bid_size5 = 39 [default = 0];
  if (has_implied_bid_size5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->implied_bid_size5(), target);
  }

  // optional int32 implied_ask_size5 = 40 [default = 0];
  if (has_implied_ask_size5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->implied_ask_size5(), target);
  }

  // optional double bp1 = 41 [default = 0];
  if (has_bp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->bp1(), target);
  }

  // optional int32 bv1 = 42 [default = 0];
  if (has_bv1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->bv1(), target);
  }

  // optional double ap1 = 43 [default = 0];
  if (has_ap1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->ap1(), target);
  }

  // optional int32 av1 = 44 [default = 0];
  if (has_av1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->av1(), target);
  }

  // optional double bp2 = 45 [default = 0];
  if (has_bp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->bp2(), target);
  }

  // optional int32 bv2 = 46 [default = 0];
  if (has_bv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->bv2(), target);
  }

  // optional double ap2 = 47 [default = 0];
  if (has_ap2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->ap2(), target);
  }

  // optional int32 av2 = 48 [default = 0];
  if (has_av2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->av2(), target);
  }

  // optional double bp3 = 49 [default = 0];
  if (has_bp3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(49, this->bp3(), target);
  }

  // optional int32 bv3 = 50 [default = 0];
  if (has_bv3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->bv3(), target);
  }

  // optional double ap3 = 51 [default = 0];
  if (has_ap3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->ap3(), target);
  }

  // optional int32 av3 = 52 [default = 0];
  if (has_av3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->av3(), target);
  }

  // optional double bp4 = 53 [default = 0];
  if (has_bp4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->bp4(), target);
  }

  // optional int32 bv4 = 54 [default = 0];
  if (has_bv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->bv4(), target);
  }

  // optional double ap4 = 55 [default = 0];
  if (has_ap4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->ap4(), target);
  }

  // optional int32 av4 = 56 [default = 0];
  if (has_av4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->av4(), target);
  }

  // optional double bp5 = 57 [default = 0];
  if (has_bp5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(57, this->bp5(), target);
  }

  // optional int32 bv5 = 58 [default = 0];
  if (has_bv5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->bv5(), target);
  }

  // optional double ap5 = 59 [default = 0];
  if (has_ap5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(59, this->ap5(), target);
  }

  // optional int32 av5 = 60 [default = 0];
  if (has_av5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->av5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_future_quote)
  return target;
}

int MYC_future_quote::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_future_quote)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 feed_type = 1;
    if (has_feed_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed_type());
    }

    // optional string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }

    // optional int32 int_time = 4;
    if (has_int_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_time());
    }

    // optional double pre_close_px = 5;
    if (has_pre_close_px()) {
      total_size += 1 + 8;
    }

    // optional double pre_settle_px = 6;
    if (has_pre_settle_px()) {
      total_size += 1 + 8;
    }

    // optional double pre_open_interest = 7;
    if (has_pre_open_interest()) {
      total_size += 1 + 8;
    }

    // optional double open_interest = 8;
    if (has_open_interest()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double open_px = 9;
    if (has_open_px()) {
      total_size += 1 + 8;
    }

    // optional double high_px = 10;
    if (has_high_px()) {
      total_size += 1 + 8;
    }

    // optional double low_px = 11;
    if (has_low_px()) {
      total_size += 1 + 8;
    }

    // optional double avg_px = 12;
    if (has_avg_px()) {
      total_size += 1 + 8;
    }

    // optional double last_px = 13;
    if (has_last_px()) {
      total_size += 1 + 8;
    }

    // optional int64 total_vol = 18;
    if (has_total_vol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_vol());
    }

    // optional double total_notional = 19;
    if (has_total_notional()) {
      total_size += 2 + 8;
    }

    // optional double upper_limit_px = 20;
    if (has_upper_limit_px()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double lower_limit_px = 21;
    if (has_lower_limit_px()) {
      total_size += 2 + 8;
    }

    // optional double close_px = 22;
    if (has_close_px()) {
      total_size += 2 + 8;
    }

    // optional double settle_px = 23;
    if (has_settle_px()) {
      total_size += 2 + 8;
    }

    // optional int32 total_buy_ordsize = 26;
    if (has_total_buy_ordsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_buy_ordsize());
    }

    // optional int32 total_sell_ordsize = 27;
    if (has_total_sell_ordsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_sell_ordsize());
    }

    // optional double weighted_buy_px = 28;
    if (has_weighted_buy_px()) {
      total_size += 2 + 8;
    }

    // optional double weighted_sell_px = 29;
    if (has_weighted_sell_px()) {
      total_size += 2 + 8;
    }

    // optional int32 implied_bid_size1 = 31 [default = 0];
    if (has_implied_bid_size1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_bid_size1());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 implied_ask_size1 = 32 [default = 0];
    if (has_implied_ask_size1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_ask_size1());
    }

    // optional int32 implied_bid_size2 = 33 [default = 0];
    if (has_implied_bid_size2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_bid_size2());
    }

    // optional int32 implied_ask_size2 = 34 [default = 0];
    if (has_implied_ask_size2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_ask_size2());
    }

    // optional int32 implied_bid_size3 = 35 [default = 0];
    if (has_implied_bid_size3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_bid_size3());
    }

    // optional int32 implied_ask_size3 = 36 [default = 0];
    if (has_implied_ask_size3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_ask_size3());
    }

    // optional int32 implied_bid_size4 = 37 [default = 0];
    if (has_implied_bid_size4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_bid_size4());
    }

    // optional int32 implied_ask_size4 = 38 [default = 0];
    if (has_implied_ask_size4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_ask_size4());
    }

    // optional int32 implied_bid_size5 = 39 [default = 0];
    if (has_implied_bid_size5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_bid_size5());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 implied_ask_size5 = 40 [default = 0];
    if (has_implied_ask_size5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implied_ask_size5());
    }

    // optional double bp1 = 41 [default = 0];
    if (has_bp1()) {
      total_size += 2 + 8;
    }

    // optional int32 bv1 = 42 [default = 0];
    if (has_bv1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv1());
    }

    // optional double ap1 = 43 [default = 0];
    if (has_ap1()) {
      total_size += 2 + 8;
    }

    // optional int32 av1 = 44 [default = 0];
    if (has_av1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av1());
    }

    // optional double bp2 = 45 [default = 0];
    if (has_bp2()) {
      total_size += 2 + 8;
    }

    // optional int32 bv2 = 46 [default = 0];
    if (has_bv2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv2());
    }

    // optional double ap2 = 47 [default = 0];
    if (has_ap2()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional int32 av2 = 48 [default = 0];
    if (has_av2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av2());
    }

    // optional double bp3 = 49 [default = 0];
    if (has_bp3()) {
      total_size += 2 + 8;
    }

    // optional int32 bv3 = 50 [default = 0];
    if (has_bv3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv3());
    }

    // optional double ap3 = 51 [default = 0];
    if (has_ap3()) {
      total_size += 2 + 8;
    }

    // optional int32 av3 = 52 [default = 0];
    if (has_av3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av3());
    }

    // optional double bp4 = 53 [default = 0];
    if (has_bp4()) {
      total_size += 2 + 8;
    }

    // optional int32 bv4 = 54 [default = 0];
    if (has_bv4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv4());
    }

    // optional double ap4 = 55 [default = 0];
    if (has_ap4()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[48 / 32] & 2031616u) {
    // optional int32 av4 = 56 [default = 0];
    if (has_av4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av4());
    }

    // optional double bp5 = 57 [default = 0];
    if (has_bp5()) {
      total_size += 2 + 8;
    }

    // optional int32 bv5 = 58 [default = 0];
    if (has_bv5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv5());
    }

    // optional double ap5 = 59 [default = 0];
    if (has_ap5()) {
      total_size += 2 + 8;
    }

    // optional int32 av5 = 60 [default = 0];
    if (has_av5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av5());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_future_quote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_future_quote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_future_quote* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_future_quote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_future_quote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_future_quote)
    MergeFrom(*source);
  }
}

void MYC_future_quote::MergeFrom(const MYC_future_quote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_future_quote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feed_type()) {
      set_feed_type(from.feed_type());
    }
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_int_time()) {
      set_int_time(from.int_time());
    }
    if (from.has_pre_close_px()) {
      set_pre_close_px(from.pre_close_px());
    }
    if (from.has_pre_settle_px()) {
      set_pre_settle_px(from.pre_settle_px());
    }
    if (from.has_pre_open_interest()) {
      set_pre_open_interest(from.pre_open_interest());
    }
    if (from.has_open_interest()) {
      set_open_interest(from.open_interest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_open_px()) {
      set_open_px(from.open_px());
    }
    if (from.has_high_px()) {
      set_high_px(from.high_px());
    }
    if (from.has_low_px()) {
      set_low_px(from.low_px());
    }
    if (from.has_avg_px()) {
      set_avg_px(from.avg_px());
    }
    if (from.has_last_px()) {
      set_last_px(from.last_px());
    }
    if (from.has_total_vol()) {
      set_total_vol(from.total_vol());
    }
    if (from.has_total_notional()) {
      set_total_notional(from.total_notional());
    }
    if (from.has_upper_limit_px()) {
      set_upper_limit_px(from.upper_limit_px());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lower_limit_px()) {
      set_lower_limit_px(from.lower_limit_px());
    }
    if (from.has_close_px()) {
      set_close_px(from.close_px());
    }
    if (from.has_settle_px()) {
      set_settle_px(from.settle_px());
    }
    if (from.has_total_buy_ordsize()) {
      set_total_buy_ordsize(from.total_buy_ordsize());
    }
    if (from.has_total_sell_ordsize()) {
      set_total_sell_ordsize(from.total_sell_ordsize());
    }
    if (from.has_weighted_buy_px()) {
      set_weighted_buy_px(from.weighted_buy_px());
    }
    if (from.has_weighted_sell_px()) {
      set_weighted_sell_px(from.weighted_sell_px());
    }
    if (from.has_implied_bid_size1()) {
      set_implied_bid_size1(from.implied_bid_size1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_implied_ask_size1()) {
      set_implied_ask_size1(from.implied_ask_size1());
    }
    if (from.has_implied_bid_size2()) {
      set_implied_bid_size2(from.implied_bid_size2());
    }
    if (from.has_implied_ask_size2()) {
      set_implied_ask_size2(from.implied_ask_size2());
    }
    if (from.has_implied_bid_size3()) {
      set_implied_bid_size3(from.implied_bid_size3());
    }
    if (from.has_implied_ask_size3()) {
      set_implied_ask_size3(from.implied_ask_size3());
    }
    if (from.has_implied_bid_size4()) {
      set_implied_bid_size4(from.implied_bid_size4());
    }
    if (from.has_implied_ask_size4()) {
      set_implied_ask_size4(from.implied_ask_size4());
    }
    if (from.has_implied_bid_size5()) {
      set_implied_bid_size5(from.implied_bid_size5());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_implied_ask_size5()) {
      set_implied_ask_size5(from.implied_ask_size5());
    }
    if (from.has_bp1()) {
      set_bp1(from.bp1());
    }
    if (from.has_bv1()) {
      set_bv1(from.bv1());
    }
    if (from.has_ap1()) {
      set_ap1(from.ap1());
    }
    if (from.has_av1()) {
      set_av1(from.av1());
    }
    if (from.has_bp2()) {
      set_bp2(from.bp2());
    }
    if (from.has_bv2()) {
      set_bv2(from.bv2());
    }
    if (from.has_ap2()) {
      set_ap2(from.ap2());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_av2()) {
      set_av2(from.av2());
    }
    if (from.has_bp3()) {
      set_bp3(from.bp3());
    }
    if (from.has_bv3()) {
      set_bv3(from.bv3());
    }
    if (from.has_ap3()) {
      set_ap3(from.ap3());
    }
    if (from.has_av3()) {
      set_av3(from.av3());
    }
    if (from.has_bp4()) {
      set_bp4(from.bp4());
    }
    if (from.has_bv4()) {
      set_bv4(from.bv4());
    }
    if (from.has_ap4()) {
      set_ap4(from.ap4());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_av4()) {
      set_av4(from.av4());
    }
    if (from.has_bp5()) {
      set_bp5(from.bp5());
    }
    if (from.has_bv5()) {
      set_bv5(from.bv5());
    }
    if (from.has_ap5()) {
      set_ap5(from.ap5());
    }
    if (from.has_av5()) {
      set_av5(from.av5());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_future_quote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_future_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_future_quote::CopyFrom(const MYC_future_quote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_future_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_future_quote::IsInitialized() const {

  return true;
}

void MYC_future_quote::Swap(MYC_future_quote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_future_quote::InternalSwap(MYC_future_quote* other) {
  std::swap(feed_type_, other->feed_type_);
  symbol_.Swap(&other->symbol_);
  std::swap(exchange_, other->exchange_);
  std::swap(int_time_, other->int_time_);
  std::swap(pre_close_px_, other->pre_close_px_);
  std::swap(pre_settle_px_, other->pre_settle_px_);
  std::swap(pre_open_interest_, other->pre_open_interest_);
  std::swap(open_interest_, other->open_interest_);
  std::swap(open_px_, other->open_px_);
  std::swap(high_px_, other->high_px_);
  std::swap(low_px_, other->low_px_);
  std::swap(avg_px_, other->avg_px_);
  std::swap(last_px_, other->last_px_);
  std::swap(total_vol_, other->total_vol_);
  std::swap(total_notional_, other->total_notional_);
  std::swap(upper_limit_px_, other->upper_limit_px_);
  std::swap(lower_limit_px_, other->lower_limit_px_);
  std::swap(close_px_, other->close_px_);
  std::swap(settle_px_, other->settle_px_);
  std::swap(total_buy_ordsize_, other->total_buy_ordsize_);
  std::swap(total_sell_ordsize_, other->total_sell_ordsize_);
  std::swap(weighted_buy_px_, other->weighted_buy_px_);
  std::swap(weighted_sell_px_, other->weighted_sell_px_);
  std::swap(implied_bid_size1_, other->implied_bid_size1_);
  std::swap(implied_ask_size1_, other->implied_ask_size1_);
  std::swap(implied_bid_size2_, other->implied_bid_size2_);
  std::swap(implied_ask_size2_, other->implied_ask_size2_);
  std::swap(implied_bid_size3_, other->implied_bid_size3_);
  std::swap(implied_ask_size3_, other->implied_ask_size3_);
  std::swap(implied_bid_size4_, other->implied_bid_size4_);
  std::swap(implied_ask_size4_, other->implied_ask_size4_);
  std::swap(implied_bid_size5_, other->implied_bid_size5_);
  std::swap(implied_ask_size5_, other->implied_ask_size5_);
  std::swap(bp1_, other->bp1_);
  std::swap(bv1_, other->bv1_);
  std::swap(ap1_, other->ap1_);
  std::swap(av1_, other->av1_);
  std::swap(bp2_, other->bp2_);
  std::swap(bv2_, other->bv2_);
  std::swap(ap2_, other->ap2_);
  std::swap(av2_, other->av2_);
  std::swap(bp3_, other->bp3_);
  std::swap(bv3_, other->bv3_);
  std::swap(ap3_, other->ap3_);
  std::swap(av3_, other->av3_);
  std::swap(bp4_, other->bp4_);
  std::swap(bv4_, other->bv4_);
  std::swap(ap4_, other->ap4_);
  std::swap(av4_, other->av4_);
  std::swap(bp5_, other->bp5_);
  std::swap(bv5_, other->bv5_);
  std::swap(ap5_, other->ap5_);
  std::swap(av5_, other->av5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_future_quote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_future_quote_descriptor_;
  metadata.reflection = MYC_future_quote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_future_quote

// optional int32 feed_type = 1;
bool MYC_future_quote::has_feed_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MYC_future_quote::set_has_feed_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MYC_future_quote::clear_has_feed_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MYC_future_quote::clear_feed_type() {
  feed_type_ = 0;
  clear_has_feed_type();
}
 ::google::protobuf::int32 MYC_future_quote::feed_type() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.feed_type)
  return feed_type_;
}
 void MYC_future_quote::set_feed_type(::google::protobuf::int32 value) {
  set_has_feed_type();
  feed_type_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.feed_type)
}

// optional string symbol = 2;
bool MYC_future_quote::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MYC_future_quote::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
void MYC_future_quote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
void MYC_future_quote::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
 const ::std::string& MYC_future_quote::symbol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_future_quote::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.symbol)
}
 void MYC_future_quote::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_future_quote.symbol)
}
 void MYC_future_quote::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_future_quote.symbol)
}
 ::std::string* MYC_future_quote::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_future_quote.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_future_quote::release_symbol() {
  // @@protoc_insertion_point(field_release:MYC.MYC_future_quote.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_future_quote::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_future_quote.symbol)
}

// optional int32 exchange = 3;
bool MYC_future_quote::has_exchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MYC_future_quote::set_has_exchange() {
  _has_bits_[0] |= 0x00000004u;
}
void MYC_future_quote::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000004u;
}
void MYC_future_quote::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
 ::google::protobuf::int32 MYC_future_quote::exchange() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.exchange)
  return exchange_;
}
 void MYC_future_quote::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.exchange)
}

// optional int32 int_time = 4;
bool MYC_future_quote::has_int_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MYC_future_quote::set_has_int_time() {
  _has_bits_[0] |= 0x00000008u;
}
void MYC_future_quote::clear_has_int_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void MYC_future_quote::clear_int_time() {
  int_time_ = 0;
  clear_has_int_time();
}
 ::google::protobuf::int32 MYC_future_quote::int_time() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.int_time)
  return int_time_;
}
 void MYC_future_quote::set_int_time(::google::protobuf::int32 value) {
  set_has_int_time();
  int_time_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.int_time)
}

// optional double pre_close_px = 5;
bool MYC_future_quote::has_pre_close_px() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MYC_future_quote::set_has_pre_close_px() {
  _has_bits_[0] |= 0x00000010u;
}
void MYC_future_quote::clear_has_pre_close_px() {
  _has_bits_[0] &= ~0x00000010u;
}
void MYC_future_quote::clear_pre_close_px() {
  pre_close_px_ = 0;
  clear_has_pre_close_px();
}
 double MYC_future_quote::pre_close_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.pre_close_px)
  return pre_close_px_;
}
 void MYC_future_quote::set_pre_close_px(double value) {
  set_has_pre_close_px();
  pre_close_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.pre_close_px)
}

// optional double pre_settle_px = 6;
bool MYC_future_quote::has_pre_settle_px() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MYC_future_quote::set_has_pre_settle_px() {
  _has_bits_[0] |= 0x00000020u;
}
void MYC_future_quote::clear_has_pre_settle_px() {
  _has_bits_[0] &= ~0x00000020u;
}
void MYC_future_quote::clear_pre_settle_px() {
  pre_settle_px_ = 0;
  clear_has_pre_settle_px();
}
 double MYC_future_quote::pre_settle_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.pre_settle_px)
  return pre_settle_px_;
}
 void MYC_future_quote::set_pre_settle_px(double value) {
  set_has_pre_settle_px();
  pre_settle_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.pre_settle_px)
}

// optional double pre_open_interest = 7;
bool MYC_future_quote::has_pre_open_interest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MYC_future_quote::set_has_pre_open_interest() {
  _has_bits_[0] |= 0x00000040u;
}
void MYC_future_quote::clear_has_pre_open_interest() {
  _has_bits_[0] &= ~0x00000040u;
}
void MYC_future_quote::clear_pre_open_interest() {
  pre_open_interest_ = 0;
  clear_has_pre_open_interest();
}
 double MYC_future_quote::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.pre_open_interest)
  return pre_open_interest_;
}
 void MYC_future_quote::set_pre_open_interest(double value) {
  set_has_pre_open_interest();
  pre_open_interest_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.pre_open_interest)
}

// optional double open_interest = 8;
bool MYC_future_quote::has_open_interest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MYC_future_quote::set_has_open_interest() {
  _has_bits_[0] |= 0x00000080u;
}
void MYC_future_quote::clear_has_open_interest() {
  _has_bits_[0] &= ~0x00000080u;
}
void MYC_future_quote::clear_open_interest() {
  open_interest_ = 0;
  clear_has_open_interest();
}
 double MYC_future_quote::open_interest() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.open_interest)
  return open_interest_;
}
 void MYC_future_quote::set_open_interest(double value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.open_interest)
}

// optional double open_px = 9;
bool MYC_future_quote::has_open_px() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MYC_future_quote::set_has_open_px() {
  _has_bits_[0] |= 0x00000100u;
}
void MYC_future_quote::clear_has_open_px() {
  _has_bits_[0] &= ~0x00000100u;
}
void MYC_future_quote::clear_open_px() {
  open_px_ = 0;
  clear_has_open_px();
}
 double MYC_future_quote::open_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.open_px)
  return open_px_;
}
 void MYC_future_quote::set_open_px(double value) {
  set_has_open_px();
  open_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.open_px)
}

// optional double high_px = 10;
bool MYC_future_quote::has_high_px() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MYC_future_quote::set_has_high_px() {
  _has_bits_[0] |= 0x00000200u;
}
void MYC_future_quote::clear_has_high_px() {
  _has_bits_[0] &= ~0x00000200u;
}
void MYC_future_quote::clear_high_px() {
  high_px_ = 0;
  clear_has_high_px();
}
 double MYC_future_quote::high_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.high_px)
  return high_px_;
}
 void MYC_future_quote::set_high_px(double value) {
  set_has_high_px();
  high_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.high_px)
}

// optional double low_px = 11;
bool MYC_future_quote::has_low_px() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MYC_future_quote::set_has_low_px() {
  _has_bits_[0] |= 0x00000400u;
}
void MYC_future_quote::clear_has_low_px() {
  _has_bits_[0] &= ~0x00000400u;
}
void MYC_future_quote::clear_low_px() {
  low_px_ = 0;
  clear_has_low_px();
}
 double MYC_future_quote::low_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.low_px)
  return low_px_;
}
 void MYC_future_quote::set_low_px(double value) {
  set_has_low_px();
  low_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.low_px)
}

// optional double avg_px = 12;
bool MYC_future_quote::has_avg_px() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MYC_future_quote::set_has_avg_px() {
  _has_bits_[0] |= 0x00000800u;
}
void MYC_future_quote::clear_has_avg_px() {
  _has_bits_[0] &= ~0x00000800u;
}
void MYC_future_quote::clear_avg_px() {
  avg_px_ = 0;
  clear_has_avg_px();
}
 double MYC_future_quote::avg_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.avg_px)
  return avg_px_;
}
 void MYC_future_quote::set_avg_px(double value) {
  set_has_avg_px();
  avg_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.avg_px)
}

// optional double last_px = 13;
bool MYC_future_quote::has_last_px() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MYC_future_quote::set_has_last_px() {
  _has_bits_[0] |= 0x00001000u;
}
void MYC_future_quote::clear_has_last_px() {
  _has_bits_[0] &= ~0x00001000u;
}
void MYC_future_quote::clear_last_px() {
  last_px_ = 0;
  clear_has_last_px();
}
 double MYC_future_quote::last_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.last_px)
  return last_px_;
}
 void MYC_future_quote::set_last_px(double value) {
  set_has_last_px();
  last_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.last_px)
}

// optional int64 total_vol = 18;
bool MYC_future_quote::has_total_vol() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MYC_future_quote::set_has_total_vol() {
  _has_bits_[0] |= 0x00002000u;
}
void MYC_future_quote::clear_has_total_vol() {
  _has_bits_[0] &= ~0x00002000u;
}
void MYC_future_quote::clear_total_vol() {
  total_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_vol();
}
 ::google::protobuf::int64 MYC_future_quote::total_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_vol)
  return total_vol_;
}
 void MYC_future_quote::set_total_vol(::google::protobuf::int64 value) {
  set_has_total_vol();
  total_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_vol)
}

// optional double total_notional = 19;
bool MYC_future_quote::has_total_notional() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MYC_future_quote::set_has_total_notional() {
  _has_bits_[0] |= 0x00004000u;
}
void MYC_future_quote::clear_has_total_notional() {
  _has_bits_[0] &= ~0x00004000u;
}
void MYC_future_quote::clear_total_notional() {
  total_notional_ = 0;
  clear_has_total_notional();
}
 double MYC_future_quote::total_notional() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_notional)
  return total_notional_;
}
 void MYC_future_quote::set_total_notional(double value) {
  set_has_total_notional();
  total_notional_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_notional)
}

// optional double upper_limit_px = 20;
bool MYC_future_quote::has_upper_limit_px() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MYC_future_quote::set_has_upper_limit_px() {
  _has_bits_[0] |= 0x00008000u;
}
void MYC_future_quote::clear_has_upper_limit_px() {
  _has_bits_[0] &= ~0x00008000u;
}
void MYC_future_quote::clear_upper_limit_px() {
  upper_limit_px_ = 0;
  clear_has_upper_limit_px();
}
 double MYC_future_quote::upper_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.upper_limit_px)
  return upper_limit_px_;
}
 void MYC_future_quote::set_upper_limit_px(double value) {
  set_has_upper_limit_px();
  upper_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.upper_limit_px)
}

// optional double lower_limit_px = 21;
bool MYC_future_quote::has_lower_limit_px() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MYC_future_quote::set_has_lower_limit_px() {
  _has_bits_[0] |= 0x00010000u;
}
void MYC_future_quote::clear_has_lower_limit_px() {
  _has_bits_[0] &= ~0x00010000u;
}
void MYC_future_quote::clear_lower_limit_px() {
  lower_limit_px_ = 0;
  clear_has_lower_limit_px();
}
 double MYC_future_quote::lower_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.lower_limit_px)
  return lower_limit_px_;
}
 void MYC_future_quote::set_lower_limit_px(double value) {
  set_has_lower_limit_px();
  lower_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.lower_limit_px)
}

// optional double close_px = 22;
bool MYC_future_quote::has_close_px() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MYC_future_quote::set_has_close_px() {
  _has_bits_[0] |= 0x00020000u;
}
void MYC_future_quote::clear_has_close_px() {
  _has_bits_[0] &= ~0x00020000u;
}
void MYC_future_quote::clear_close_px() {
  close_px_ = 0;
  clear_has_close_px();
}
 double MYC_future_quote::close_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.close_px)
  return close_px_;
}
 void MYC_future_quote::set_close_px(double value) {
  set_has_close_px();
  close_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.close_px)
}

// optional double settle_px = 23;
bool MYC_future_quote::has_settle_px() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MYC_future_quote::set_has_settle_px() {
  _has_bits_[0] |= 0x00040000u;
}
void MYC_future_quote::clear_has_settle_px() {
  _has_bits_[0] &= ~0x00040000u;
}
void MYC_future_quote::clear_settle_px() {
  settle_px_ = 0;
  clear_has_settle_px();
}
 double MYC_future_quote::settle_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.settle_px)
  return settle_px_;
}
 void MYC_future_quote::set_settle_px(double value) {
  set_has_settle_px();
  settle_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.settle_px)
}

// optional int32 total_buy_ordsize = 26;
bool MYC_future_quote::has_total_buy_ordsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MYC_future_quote::set_has_total_buy_ordsize() {
  _has_bits_[0] |= 0x00080000u;
}
void MYC_future_quote::clear_has_total_buy_ordsize() {
  _has_bits_[0] &= ~0x00080000u;
}
void MYC_future_quote::clear_total_buy_ordsize() {
  total_buy_ordsize_ = 0;
  clear_has_total_buy_ordsize();
}
 ::google::protobuf::int32 MYC_future_quote::total_buy_ordsize() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_buy_ordsize)
  return total_buy_ordsize_;
}
 void MYC_future_quote::set_total_buy_ordsize(::google::protobuf::int32 value) {
  set_has_total_buy_ordsize();
  total_buy_ordsize_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_buy_ordsize)
}

// optional int32 total_sell_ordsize = 27;
bool MYC_future_quote::has_total_sell_ordsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void MYC_future_quote::set_has_total_sell_ordsize() {
  _has_bits_[0] |= 0x00100000u;
}
void MYC_future_quote::clear_has_total_sell_ordsize() {
  _has_bits_[0] &= ~0x00100000u;
}
void MYC_future_quote::clear_total_sell_ordsize() {
  total_sell_ordsize_ = 0;
  clear_has_total_sell_ordsize();
}
 ::google::protobuf::int32 MYC_future_quote::total_sell_ordsize() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.total_sell_ordsize)
  return total_sell_ordsize_;
}
 void MYC_future_quote::set_total_sell_ordsize(::google::protobuf::int32 value) {
  set_has_total_sell_ordsize();
  total_sell_ordsize_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.total_sell_ordsize)
}

// optional double weighted_buy_px = 28;
bool MYC_future_quote::has_weighted_buy_px() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void MYC_future_quote::set_has_weighted_buy_px() {
  _has_bits_[0] |= 0x00200000u;
}
void MYC_future_quote::clear_has_weighted_buy_px() {
  _has_bits_[0] &= ~0x00200000u;
}
void MYC_future_quote::clear_weighted_buy_px() {
  weighted_buy_px_ = 0;
  clear_has_weighted_buy_px();
}
 double MYC_future_quote::weighted_buy_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.weighted_buy_px)
  return weighted_buy_px_;
}
 void MYC_future_quote::set_weighted_buy_px(double value) {
  set_has_weighted_buy_px();
  weighted_buy_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.weighted_buy_px)
}

// optional double weighted_sell_px = 29;
bool MYC_future_quote::has_weighted_sell_px() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void MYC_future_quote::set_has_weighted_sell_px() {
  _has_bits_[0] |= 0x00400000u;
}
void MYC_future_quote::clear_has_weighted_sell_px() {
  _has_bits_[0] &= ~0x00400000u;
}
void MYC_future_quote::clear_weighted_sell_px() {
  weighted_sell_px_ = 0;
  clear_has_weighted_sell_px();
}
 double MYC_future_quote::weighted_sell_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.weighted_sell_px)
  return weighted_sell_px_;
}
 void MYC_future_quote::set_weighted_sell_px(double value) {
  set_has_weighted_sell_px();
  weighted_sell_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.weighted_sell_px)
}

// optional int32 implied_bid_size1 = 31 [default = 0];
bool MYC_future_quote::has_implied_bid_size1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void MYC_future_quote::set_has_implied_bid_size1() {
  _has_bits_[0] |= 0x00800000u;
}
void MYC_future_quote::clear_has_implied_bid_size1() {
  _has_bits_[0] &= ~0x00800000u;
}
void MYC_future_quote::clear_implied_bid_size1() {
  implied_bid_size1_ = 0;
  clear_has_implied_bid_size1();
}
 ::google::protobuf::int32 MYC_future_quote::implied_bid_size1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size1)
  return implied_bid_size1_;
}
 void MYC_future_quote::set_implied_bid_size1(::google::protobuf::int32 value) {
  set_has_implied_bid_size1();
  implied_bid_size1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size1)
}

// optional int32 implied_ask_size1 = 32 [default = 0];
bool MYC_future_quote::has_implied_ask_size1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void MYC_future_quote::set_has_implied_ask_size1() {
  _has_bits_[0] |= 0x01000000u;
}
void MYC_future_quote::clear_has_implied_ask_size1() {
  _has_bits_[0] &= ~0x01000000u;
}
void MYC_future_quote::clear_implied_ask_size1() {
  implied_ask_size1_ = 0;
  clear_has_implied_ask_size1();
}
 ::google::protobuf::int32 MYC_future_quote::implied_ask_size1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size1)
  return implied_ask_size1_;
}
 void MYC_future_quote::set_implied_ask_size1(::google::protobuf::int32 value) {
  set_has_implied_ask_size1();
  implied_ask_size1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size1)
}

// optional int32 implied_bid_size2 = 33 [default = 0];
bool MYC_future_quote::has_implied_bid_size2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void MYC_future_quote::set_has_implied_bid_size2() {
  _has_bits_[0] |= 0x02000000u;
}
void MYC_future_quote::clear_has_implied_bid_size2() {
  _has_bits_[0] &= ~0x02000000u;
}
void MYC_future_quote::clear_implied_bid_size2() {
  implied_bid_size2_ = 0;
  clear_has_implied_bid_size2();
}
 ::google::protobuf::int32 MYC_future_quote::implied_bid_size2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size2)
  return implied_bid_size2_;
}
 void MYC_future_quote::set_implied_bid_size2(::google::protobuf::int32 value) {
  set_has_implied_bid_size2();
  implied_bid_size2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size2)
}

// optional int32 implied_ask_size2 = 34 [default = 0];
bool MYC_future_quote::has_implied_ask_size2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void MYC_future_quote::set_has_implied_ask_size2() {
  _has_bits_[0] |= 0x04000000u;
}
void MYC_future_quote::clear_has_implied_ask_size2() {
  _has_bits_[0] &= ~0x04000000u;
}
void MYC_future_quote::clear_implied_ask_size2() {
  implied_ask_size2_ = 0;
  clear_has_implied_ask_size2();
}
 ::google::protobuf::int32 MYC_future_quote::implied_ask_size2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size2)
  return implied_ask_size2_;
}
 void MYC_future_quote::set_implied_ask_size2(::google::protobuf::int32 value) {
  set_has_implied_ask_size2();
  implied_ask_size2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size2)
}

// optional int32 implied_bid_size3 = 35 [default = 0];
bool MYC_future_quote::has_implied_bid_size3() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void MYC_future_quote::set_has_implied_bid_size3() {
  _has_bits_[0] |= 0x08000000u;
}
void MYC_future_quote::clear_has_implied_bid_size3() {
  _has_bits_[0] &= ~0x08000000u;
}
void MYC_future_quote::clear_implied_bid_size3() {
  implied_bid_size3_ = 0;
  clear_has_implied_bid_size3();
}
 ::google::protobuf::int32 MYC_future_quote::implied_bid_size3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size3)
  return implied_bid_size3_;
}
 void MYC_future_quote::set_implied_bid_size3(::google::protobuf::int32 value) {
  set_has_implied_bid_size3();
  implied_bid_size3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size3)
}

// optional int32 implied_ask_size3 = 36 [default = 0];
bool MYC_future_quote::has_implied_ask_size3() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void MYC_future_quote::set_has_implied_ask_size3() {
  _has_bits_[0] |= 0x10000000u;
}
void MYC_future_quote::clear_has_implied_ask_size3() {
  _has_bits_[0] &= ~0x10000000u;
}
void MYC_future_quote::clear_implied_ask_size3() {
  implied_ask_size3_ = 0;
  clear_has_implied_ask_size3();
}
 ::google::protobuf::int32 MYC_future_quote::implied_ask_size3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size3)
  return implied_ask_size3_;
}
 void MYC_future_quote::set_implied_ask_size3(::google::protobuf::int32 value) {
  set_has_implied_ask_size3();
  implied_ask_size3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size3)
}

// optional int32 implied_bid_size4 = 37 [default = 0];
bool MYC_future_quote::has_implied_bid_size4() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void MYC_future_quote::set_has_implied_bid_size4() {
  _has_bits_[0] |= 0x20000000u;
}
void MYC_future_quote::clear_has_implied_bid_size4() {
  _has_bits_[0] &= ~0x20000000u;
}
void MYC_future_quote::clear_implied_bid_size4() {
  implied_bid_size4_ = 0;
  clear_has_implied_bid_size4();
}
 ::google::protobuf::int32 MYC_future_quote::implied_bid_size4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size4)
  return implied_bid_size4_;
}
 void MYC_future_quote::set_implied_bid_size4(::google::protobuf::int32 value) {
  set_has_implied_bid_size4();
  implied_bid_size4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size4)
}

// optional int32 implied_ask_size4 = 38 [default = 0];
bool MYC_future_quote::has_implied_ask_size4() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void MYC_future_quote::set_has_implied_ask_size4() {
  _has_bits_[0] |= 0x40000000u;
}
void MYC_future_quote::clear_has_implied_ask_size4() {
  _has_bits_[0] &= ~0x40000000u;
}
void MYC_future_quote::clear_implied_ask_size4() {
  implied_ask_size4_ = 0;
  clear_has_implied_ask_size4();
}
 ::google::protobuf::int32 MYC_future_quote::implied_ask_size4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size4)
  return implied_ask_size4_;
}
 void MYC_future_quote::set_implied_ask_size4(::google::protobuf::int32 value) {
  set_has_implied_ask_size4();
  implied_ask_size4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size4)
}

// optional int32 implied_bid_size5 = 39 [default = 0];
bool MYC_future_quote::has_implied_bid_size5() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void MYC_future_quote::set_has_implied_bid_size5() {
  _has_bits_[0] |= 0x80000000u;
}
void MYC_future_quote::clear_has_implied_bid_size5() {
  _has_bits_[0] &= ~0x80000000u;
}
void MYC_future_quote::clear_implied_bid_size5() {
  implied_bid_size5_ = 0;
  clear_has_implied_bid_size5();
}
 ::google::protobuf::int32 MYC_future_quote::implied_bid_size5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_bid_size5)
  return implied_bid_size5_;
}
 void MYC_future_quote::set_implied_bid_size5(::google::protobuf::int32 value) {
  set_has_implied_bid_size5();
  implied_bid_size5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_bid_size5)
}

// optional int32 implied_ask_size5 = 40 [default = 0];
bool MYC_future_quote::has_implied_ask_size5() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void MYC_future_quote::set_has_implied_ask_size5() {
  _has_bits_[1] |= 0x00000001u;
}
void MYC_future_quote::clear_has_implied_ask_size5() {
  _has_bits_[1] &= ~0x00000001u;
}
void MYC_future_quote::clear_implied_ask_size5() {
  implied_ask_size5_ = 0;
  clear_has_implied_ask_size5();
}
 ::google::protobuf::int32 MYC_future_quote::implied_ask_size5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.implied_ask_size5)
  return implied_ask_size5_;
}
 void MYC_future_quote::set_implied_ask_size5(::google::protobuf::int32 value) {
  set_has_implied_ask_size5();
  implied_ask_size5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.implied_ask_size5)
}

// optional double bp1 = 41 [default = 0];
bool MYC_future_quote::has_bp1() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void MYC_future_quote::set_has_bp1() {
  _has_bits_[1] |= 0x00000002u;
}
void MYC_future_quote::clear_has_bp1() {
  _has_bits_[1] &= ~0x00000002u;
}
void MYC_future_quote::clear_bp1() {
  bp1_ = 0;
  clear_has_bp1();
}
 double MYC_future_quote::bp1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp1)
  return bp1_;
}
 void MYC_future_quote::set_bp1(double value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp1)
}

// optional int32 bv1 = 42 [default = 0];
bool MYC_future_quote::has_bv1() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void MYC_future_quote::set_has_bv1() {
  _has_bits_[1] |= 0x00000004u;
}
void MYC_future_quote::clear_has_bv1() {
  _has_bits_[1] &= ~0x00000004u;
}
void MYC_future_quote::clear_bv1() {
  bv1_ = 0;
  clear_has_bv1();
}
 ::google::protobuf::int32 MYC_future_quote::bv1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv1)
  return bv1_;
}
 void MYC_future_quote::set_bv1(::google::protobuf::int32 value) {
  set_has_bv1();
  bv1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv1)
}

// optional double ap1 = 43 [default = 0];
bool MYC_future_quote::has_ap1() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void MYC_future_quote::set_has_ap1() {
  _has_bits_[1] |= 0x00000008u;
}
void MYC_future_quote::clear_has_ap1() {
  _has_bits_[1] &= ~0x00000008u;
}
void MYC_future_quote::clear_ap1() {
  ap1_ = 0;
  clear_has_ap1();
}
 double MYC_future_quote::ap1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap1)
  return ap1_;
}
 void MYC_future_quote::set_ap1(double value) {
  set_has_ap1();
  ap1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap1)
}

// optional int32 av1 = 44 [default = 0];
bool MYC_future_quote::has_av1() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void MYC_future_quote::set_has_av1() {
  _has_bits_[1] |= 0x00000010u;
}
void MYC_future_quote::clear_has_av1() {
  _has_bits_[1] &= ~0x00000010u;
}
void MYC_future_quote::clear_av1() {
  av1_ = 0;
  clear_has_av1();
}
 ::google::protobuf::int32 MYC_future_quote::av1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av1)
  return av1_;
}
 void MYC_future_quote::set_av1(::google::protobuf::int32 value) {
  set_has_av1();
  av1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av1)
}

// optional double bp2 = 45 [default = 0];
bool MYC_future_quote::has_bp2() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void MYC_future_quote::set_has_bp2() {
  _has_bits_[1] |= 0x00000020u;
}
void MYC_future_quote::clear_has_bp2() {
  _has_bits_[1] &= ~0x00000020u;
}
void MYC_future_quote::clear_bp2() {
  bp2_ = 0;
  clear_has_bp2();
}
 double MYC_future_quote::bp2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp2)
  return bp2_;
}
 void MYC_future_quote::set_bp2(double value) {
  set_has_bp2();
  bp2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp2)
}

// optional int32 bv2 = 46 [default = 0];
bool MYC_future_quote::has_bv2() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void MYC_future_quote::set_has_bv2() {
  _has_bits_[1] |= 0x00000040u;
}
void MYC_future_quote::clear_has_bv2() {
  _has_bits_[1] &= ~0x00000040u;
}
void MYC_future_quote::clear_bv2() {
  bv2_ = 0;
  clear_has_bv2();
}
 ::google::protobuf::int32 MYC_future_quote::bv2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv2)
  return bv2_;
}
 void MYC_future_quote::set_bv2(::google::protobuf::int32 value) {
  set_has_bv2();
  bv2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv2)
}

// optional double ap2 = 47 [default = 0];
bool MYC_future_quote::has_ap2() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void MYC_future_quote::set_has_ap2() {
  _has_bits_[1] |= 0x00000080u;
}
void MYC_future_quote::clear_has_ap2() {
  _has_bits_[1] &= ~0x00000080u;
}
void MYC_future_quote::clear_ap2() {
  ap2_ = 0;
  clear_has_ap2();
}
 double MYC_future_quote::ap2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap2)
  return ap2_;
}
 void MYC_future_quote::set_ap2(double value) {
  set_has_ap2();
  ap2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap2)
}

// optional int32 av2 = 48 [default = 0];
bool MYC_future_quote::has_av2() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void MYC_future_quote::set_has_av2() {
  _has_bits_[1] |= 0x00000100u;
}
void MYC_future_quote::clear_has_av2() {
  _has_bits_[1] &= ~0x00000100u;
}
void MYC_future_quote::clear_av2() {
  av2_ = 0;
  clear_has_av2();
}
 ::google::protobuf::int32 MYC_future_quote::av2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av2)
  return av2_;
}
 void MYC_future_quote::set_av2(::google::protobuf::int32 value) {
  set_has_av2();
  av2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av2)
}

// optional double bp3 = 49 [default = 0];
bool MYC_future_quote::has_bp3() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void MYC_future_quote::set_has_bp3() {
  _has_bits_[1] |= 0x00000200u;
}
void MYC_future_quote::clear_has_bp3() {
  _has_bits_[1] &= ~0x00000200u;
}
void MYC_future_quote::clear_bp3() {
  bp3_ = 0;
  clear_has_bp3();
}
 double MYC_future_quote::bp3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp3)
  return bp3_;
}
 void MYC_future_quote::set_bp3(double value) {
  set_has_bp3();
  bp3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp3)
}

// optional int32 bv3 = 50 [default = 0];
bool MYC_future_quote::has_bv3() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void MYC_future_quote::set_has_bv3() {
  _has_bits_[1] |= 0x00000400u;
}
void MYC_future_quote::clear_has_bv3() {
  _has_bits_[1] &= ~0x00000400u;
}
void MYC_future_quote::clear_bv3() {
  bv3_ = 0;
  clear_has_bv3();
}
 ::google::protobuf::int32 MYC_future_quote::bv3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv3)
  return bv3_;
}
 void MYC_future_quote::set_bv3(::google::protobuf::int32 value) {
  set_has_bv3();
  bv3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv3)
}

// optional double ap3 = 51 [default = 0];
bool MYC_future_quote::has_ap3() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void MYC_future_quote::set_has_ap3() {
  _has_bits_[1] |= 0x00000800u;
}
void MYC_future_quote::clear_has_ap3() {
  _has_bits_[1] &= ~0x00000800u;
}
void MYC_future_quote::clear_ap3() {
  ap3_ = 0;
  clear_has_ap3();
}
 double MYC_future_quote::ap3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap3)
  return ap3_;
}
 void MYC_future_quote::set_ap3(double value) {
  set_has_ap3();
  ap3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap3)
}

// optional int32 av3 = 52 [default = 0];
bool MYC_future_quote::has_av3() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void MYC_future_quote::set_has_av3() {
  _has_bits_[1] |= 0x00001000u;
}
void MYC_future_quote::clear_has_av3() {
  _has_bits_[1] &= ~0x00001000u;
}
void MYC_future_quote::clear_av3() {
  av3_ = 0;
  clear_has_av3();
}
 ::google::protobuf::int32 MYC_future_quote::av3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av3)
  return av3_;
}
 void MYC_future_quote::set_av3(::google::protobuf::int32 value) {
  set_has_av3();
  av3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av3)
}

// optional double bp4 = 53 [default = 0];
bool MYC_future_quote::has_bp4() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void MYC_future_quote::set_has_bp4() {
  _has_bits_[1] |= 0x00002000u;
}
void MYC_future_quote::clear_has_bp4() {
  _has_bits_[1] &= ~0x00002000u;
}
void MYC_future_quote::clear_bp4() {
  bp4_ = 0;
  clear_has_bp4();
}
 double MYC_future_quote::bp4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp4)
  return bp4_;
}
 void MYC_future_quote::set_bp4(double value) {
  set_has_bp4();
  bp4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp4)
}

// optional int32 bv4 = 54 [default = 0];
bool MYC_future_quote::has_bv4() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void MYC_future_quote::set_has_bv4() {
  _has_bits_[1] |= 0x00004000u;
}
void MYC_future_quote::clear_has_bv4() {
  _has_bits_[1] &= ~0x00004000u;
}
void MYC_future_quote::clear_bv4() {
  bv4_ = 0;
  clear_has_bv4();
}
 ::google::protobuf::int32 MYC_future_quote::bv4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv4)
  return bv4_;
}
 void MYC_future_quote::set_bv4(::google::protobuf::int32 value) {
  set_has_bv4();
  bv4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv4)
}

// optional double ap4 = 55 [default = 0];
bool MYC_future_quote::has_ap4() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void MYC_future_quote::set_has_ap4() {
  _has_bits_[1] |= 0x00008000u;
}
void MYC_future_quote::clear_has_ap4() {
  _has_bits_[1] &= ~0x00008000u;
}
void MYC_future_quote::clear_ap4() {
  ap4_ = 0;
  clear_has_ap4();
}
 double MYC_future_quote::ap4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap4)
  return ap4_;
}
 void MYC_future_quote::set_ap4(double value) {
  set_has_ap4();
  ap4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap4)
}

// optional int32 av4 = 56 [default = 0];
bool MYC_future_quote::has_av4() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void MYC_future_quote::set_has_av4() {
  _has_bits_[1] |= 0x00010000u;
}
void MYC_future_quote::clear_has_av4() {
  _has_bits_[1] &= ~0x00010000u;
}
void MYC_future_quote::clear_av4() {
  av4_ = 0;
  clear_has_av4();
}
 ::google::protobuf::int32 MYC_future_quote::av4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av4)
  return av4_;
}
 void MYC_future_quote::set_av4(::google::protobuf::int32 value) {
  set_has_av4();
  av4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av4)
}

// optional double bp5 = 57 [default = 0];
bool MYC_future_quote::has_bp5() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void MYC_future_quote::set_has_bp5() {
  _has_bits_[1] |= 0x00020000u;
}
void MYC_future_quote::clear_has_bp5() {
  _has_bits_[1] &= ~0x00020000u;
}
void MYC_future_quote::clear_bp5() {
  bp5_ = 0;
  clear_has_bp5();
}
 double MYC_future_quote::bp5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bp5)
  return bp5_;
}
 void MYC_future_quote::set_bp5(double value) {
  set_has_bp5();
  bp5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bp5)
}

// optional int32 bv5 = 58 [default = 0];
bool MYC_future_quote::has_bv5() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void MYC_future_quote::set_has_bv5() {
  _has_bits_[1] |= 0x00040000u;
}
void MYC_future_quote::clear_has_bv5() {
  _has_bits_[1] &= ~0x00040000u;
}
void MYC_future_quote::clear_bv5() {
  bv5_ = 0;
  clear_has_bv5();
}
 ::google::protobuf::int32 MYC_future_quote::bv5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.bv5)
  return bv5_;
}
 void MYC_future_quote::set_bv5(::google::protobuf::int32 value) {
  set_has_bv5();
  bv5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.bv5)
}

// optional double ap5 = 59 [default = 0];
bool MYC_future_quote::has_ap5() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void MYC_future_quote::set_has_ap5() {
  _has_bits_[1] |= 0x00080000u;
}
void MYC_future_quote::clear_has_ap5() {
  _has_bits_[1] &= ~0x00080000u;
}
void MYC_future_quote::clear_ap5() {
  ap5_ = 0;
  clear_has_ap5();
}
 double MYC_future_quote::ap5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.ap5)
  return ap5_;
}
 void MYC_future_quote::set_ap5(double value) {
  set_has_ap5();
  ap5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.ap5)
}

// optional int32 av5 = 60 [default = 0];
bool MYC_future_quote::has_av5() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void MYC_future_quote::set_has_av5() {
  _has_bits_[1] |= 0x00100000u;
}
void MYC_future_quote::clear_has_av5() {
  _has_bits_[1] &= ~0x00100000u;
}
void MYC_future_quote::clear_av5() {
  av5_ = 0;
  clear_has_av5();
}
 ::google::protobuf::int32 MYC_future_quote::av5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_future_quote.av5)
  return av5_;
}
 void MYC_future_quote::set_av5(::google::protobuf::int32 value) {
  set_has_av5();
  av5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_future_quote.av5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MYC_stock_quote::kWindCodeFieldNumber;
const int MYC_stock_quote::kTickerFieldNumber;
const int MYC_stock_quote::kActionDayFieldNumber;
const int MYC_stock_quote::kTradingDayFieldNumber;
const int MYC_stock_quote::kExchTimeFieldNumber;
const int MYC_stock_quote::kStatusFieldNumber;
const int MYC_stock_quote::kPreClosePxFieldNumber;
const int MYC_stock_quote::kOpenPxFieldNumber;
const int MYC_stock_quote::kHighPxFieldNumber;
const int MYC_stock_quote::kLowPxFieldNumber;
const int MYC_stock_quote::kLastPxFieldNumber;
const int MYC_stock_quote::kNumOfTradesFieldNumber;
const int MYC_stock_quote::kTotalVolFieldNumber;
const int MYC_stock_quote::kTotalNotionalFieldNumber;
const int MYC_stock_quote::kTotalBidVolFieldNumber;
const int MYC_stock_quote::kTotalAskVolFieldNumber;
const int MYC_stock_quote::kWeightedAvgBpFieldNumber;
const int MYC_stock_quote::kWeightedAvgApFieldNumber;
const int MYC_stock_quote::kIOPVFieldNumber;
const int MYC_stock_quote::kYieldToMaturityFieldNumber;
const int MYC_stock_quote::kUpperLimitPxFieldNumber;
const int MYC_stock_quote::kLowerLimitPxFieldNumber;
const int MYC_stock_quote::kPrefixFieldNumber;
const int MYC_stock_quote::kPE1FieldNumber;
const int MYC_stock_quote::kPE2FieldNumber;
const int MYC_stock_quote::kChangeFieldNumber;
const int MYC_stock_quote::kBp1FieldNumber;
const int MYC_stock_quote::kBv1FieldNumber;
const int MYC_stock_quote::kAp1FieldNumber;
const int MYC_stock_quote::kAv1FieldNumber;
const int MYC_stock_quote::kBp2FieldNumber;
const int MYC_stock_quote::kBv2FieldNumber;
const int MYC_stock_quote::kAp2FieldNumber;
const int MYC_stock_quote::kAv2FieldNumber;
const int MYC_stock_quote::kBp3FieldNumber;
const int MYC_stock_quote::kBv3FieldNumber;
const int MYC_stock_quote::kAp3FieldNumber;
const int MYC_stock_quote::kAv3FieldNumber;
const int MYC_stock_quote::kBp4FieldNumber;
const int MYC_stock_quote::kBv4FieldNumber;
const int MYC_stock_quote::kAp4FieldNumber;
const int MYC_stock_quote::kAv4FieldNumber;
const int MYC_stock_quote::kBp5FieldNumber;
const int MYC_stock_quote::kBv5FieldNumber;
const int MYC_stock_quote::kAp5FieldNumber;
const int MYC_stock_quote::kAv5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_stock_quote::MYC_stock_quote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_stock_quote)
}

void MYC_stock_quote::InitAsDefaultInstance() {
}

MYC_stock_quote::MYC_stock_quote(const MYC_stock_quote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_stock_quote)
}

void MYC_stock_quote::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wind_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_day_ = 0;
  trading_day_ = 0;
  exch_time_ = 0;
  status_ = 0;
  pre_close_px_ = 0;
  open_px_ = 0;
  high_px_ = 0;
  low_px_ = 0;
  last_px_ = 0;
  num_of_trades_ = 0;
  total_vol_ = GOOGLE_LONGLONG(0);
  total_notional_ = 0;
  total_bid_vol_ = GOOGLE_LONGLONG(0);
  total_ask_vol_ = GOOGLE_LONGLONG(0);
  weighted_avg_bp_ = 0;
  weighted_avg_ap_ = 0;
  iopv_ = 0;
  yield_to_maturity_ = 0;
  upper_limit_px_ = 0;
  lower_limit_px_ = 0;
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pe1_ = 0;
  pe2_ = 0;
  change_ = 0;
  bp1_ = 0;
  bv1_ = 0;
  ap1_ = 0;
  av1_ = 0;
  bp2_ = 0;
  bv2_ = 0;
  ap2_ = 0;
  av2_ = 0;
  bp3_ = 0;
  bv3_ = 0;
  ap3_ = 0;
  av3_ = 0;
  bp4_ = 0;
  bv4_ = 0;
  ap4_ = 0;
  av4_ = 0;
  bp5_ = 0;
  bv5_ = 0;
  ap5_ = 0;
  av5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_stock_quote::~MYC_stock_quote() {
  // @@protoc_insertion_point(destructor:MYC.MYC_stock_quote)
  SharedDtor();
}

void MYC_stock_quote::SharedDtor() {
  wind_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MYC_stock_quote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_stock_quote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_stock_quote_descriptor_;
}

const MYC_stock_quote& MYC_stock_quote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_stock_quote* MYC_stock_quote::default_instance_ = NULL;

MYC_stock_quote* MYC_stock_quote::New(::google::protobuf::Arena* arena) const {
  MYC_stock_quote* n = new MYC_stock_quote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_stock_quote::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_stock_quote)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MYC_stock_quote, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MYC_stock_quote*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(action_day_, open_px_);
    if (has_wind_code()) {
      wind_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ticker()) {
      ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(high_px_, total_ask_vol_);
    num_of_trades_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(weighted_avg_bp_, iopv_);
    ZR_(yield_to_maturity_, lower_limit_px_);
    if (has_prefix()) {
      prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pe1_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(pe2_, bp2_);
    change_ = 0;
    bv2_ = 0;
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(av2_, bp4_);
    ap2_ = 0;
    bv4_ = 0;
  }
  if (_has_bits_[40 / 32] & 16128u) {
    ZR_(av4_, av5_);
    ap4_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_stock_quote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_stock_quote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wind_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wind_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wind_code().data(), this->wind_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_stock_quote.wind_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ticker;
        break;
      }

      // optional string ticker = 2;
      case 2: {
        if (tag == 18) {
         parse_ticker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticker().data(), this->ticker().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_stock_quote.ticker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action_day;
        break;
      }

      // optional int32 action_day = 3;
      case 3: {
        if (tag == 24) {
         parse_action_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_day_)));
          set_has_action_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trading_day;
        break;
      }

      // optional int32 trading_day = 4;
      case 4: {
        if (tag == 32) {
         parse_trading_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_exch_time;
        break;
      }

      // optional int32 exch_time = 5;
      case 5: {
        if (tag == 40) {
         parse_exch_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exch_time_)));
          set_has_exch_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional int32 status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_pre_close_px;
        break;
      }

      // optional double pre_close_px = 7;
      case 7: {
        if (tag == 57) {
         parse_pre_close_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_close_px_)));
          set_has_pre_close_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_open_px;
        break;
      }

      // optional double open_px = 8;
      case 8: {
        if (tag == 65) {
         parse_open_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_px_)));
          set_has_open_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_high_px;
        break;
      }

      // optional double high_px = 9;
      case 9: {
        if (tag == 73) {
         parse_high_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_px_)));
          set_has_high_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_low_px;
        break;
      }

      // optional double low_px = 10;
      case 10: {
        if (tag == 81) {
         parse_low_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_px_)));
          set_has_low_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_last_px;
        break;
      }

      // optional double last_px = 11;
      case 11: {
        if (tag == 89) {
         parse_last_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_px_)));
          set_has_last_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_num_of_trades;
        break;
      }

      // optional int32 num_of_trades = 16;
      case 16: {
        if (tag == 128) {
         parse_num_of_trades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_trades_)));
          set_has_num_of_trades();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_total_vol;
        break;
      }

      // optional int64 total_vol = 18;
      case 18: {
        if (tag == 144) {
         parse_total_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_vol_)));
          set_has_total_vol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_total_notional;
        break;
      }

      // optional double total_notional = 19;
      case 19: {
        if (tag == 153) {
         parse_total_notional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_notional_)));
          set_has_total_notional();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_total_bid_vol;
        break;
      }

      // optional int64 total_bid_vol = 20;
      case 20: {
        if (tag == 160) {
         parse_total_bid_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bid_vol_)));
          set_has_total_bid_vol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_total_ask_vol;
        break;
      }

      // optional int64 total_ask_vol = 21;
      case 21: {
        if (tag == 168) {
         parse_total_ask_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_ask_vol_)));
          set_has_total_ask_vol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_weighted_avg_bp;
        break;
      }

      // optional double weighted_avg_bp = 22;
      case 22: {
        if (tag == 177) {
         parse_weighted_avg_bp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weighted_avg_bp_)));
          set_has_weighted_avg_bp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_weighted_avg_ap;
        break;
      }

      // optional double weighted_avg_ap = 23;
      case 23: {
        if (tag == 185) {
         parse_weighted_avg_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weighted_avg_ap_)));
          set_has_weighted_avg_ap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_IOPV;
        break;
      }

      // optional double IOPV = 24;
      case 24: {
        if (tag == 193) {
         parse_IOPV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iopv_)));
          set_has_iopv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_yield_to_maturity;
        break;
      }

      // optional double yield_to_maturity = 25;
      case 25: {
        if (tag == 201) {
         parse_yield_to_maturity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_to_maturity_)));
          set_has_yield_to_maturity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_upper_limit_px;
        break;
      }

      // optional double upper_limit_px = 26;
      case 26: {
        if (tag == 209) {
         parse_upper_limit_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_limit_px_)));
          set_has_upper_limit_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_lower_limit_px;
        break;
      }

      // optional double lower_limit_px = 27;
      case 27: {
        if (tag == 217) {
         parse_lower_limit_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_limit_px_)));
          set_has_lower_limit_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_prefix;
        break;
      }

      // optional string prefix = 28;
      case 28: {
        if (tag == 226) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_stock_quote.prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_PE1;
        break;
      }

      // optional double PE1 = 29;
      case 29: {
        if (tag == 233) {
         parse_PE1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pe1_)));
          set_has_pe1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_PE2;
        break;
      }

      // optional double PE2 = 30;
      case 30: {
        if (tag == 241) {
         parse_PE2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pe2_)));
          set_has_pe2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_change;
        break;
      }

      // optional int32 change = 31;
      case 31: {
        if (tag == 248) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_bp1;
        break;
      }

      // optional double bp1 = 41 [default = 0];
      case 41: {
        if (tag == 329) {
         parse_bp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp1_)));
          set_has_bp1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_bv1;
        break;
      }

      // optional int32 bv1 = 42 [default = 0];
      case 42: {
        if (tag == 336) {
         parse_bv1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv1_)));
          set_has_bv1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(345)) goto parse_ap1;
        break;
      }

      // optional double ap1 = 43 [default = 0];
      case 43: {
        if (tag == 345) {
         parse_ap1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap1_)));
          set_has_ap1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_av1;
        break;
      }

      // optional int32 av1 = 44 [default = 0];
      case 44: {
        if (tag == 352) {
         parse_av1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av1_)));
          set_has_av1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(361)) goto parse_bp2;
        break;
      }

      // optional double bp2 = 45 [default = 0];
      case 45: {
        if (tag == 361) {
         parse_bp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp2_)));
          set_has_bp2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_bv2;
        break;
      }

      // optional int32 bv2 = 46 [default = 0];
      case 46: {
        if (tag == 368) {
         parse_bv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv2_)));
          set_has_bv2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(377)) goto parse_ap2;
        break;
      }

      // optional double ap2 = 47 [default = 0];
      case 47: {
        if (tag == 377) {
         parse_ap2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap2_)));
          set_has_ap2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_av2;
        break;
      }

      // optional int32 av2 = 48 [default = 0];
      case 48: {
        if (tag == 384) {
         parse_av2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av2_)));
          set_has_av2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(393)) goto parse_bp3;
        break;
      }

      // optional double bp3 = 49 [default = 0];
      case 49: {
        if (tag == 393) {
         parse_bp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp3_)));
          set_has_bp3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_bv3;
        break;
      }

      // optional int32 bv3 = 50 [default = 0];
      case 50: {
        if (tag == 400) {
         parse_bv3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv3_)));
          set_has_bv3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(409)) goto parse_ap3;
        break;
      }

      // optional double ap3 = 51 [default = 0];
      case 51: {
        if (tag == 409) {
         parse_ap3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap3_)));
          set_has_ap3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_av3;
        break;
      }

      // optional int32 av3 = 52 [default = 0];
      case 52: {
        if (tag == 416) {
         parse_av3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av3_)));
          set_has_av3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(425)) goto parse_bp4;
        break;
      }

      // optional double bp4 = 53 [default = 0];
      case 53: {
        if (tag == 425) {
         parse_bp4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp4_)));
          set_has_bp4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_bv4;
        break;
      }

      // optional int32 bv4 = 54 [default = 0];
      case 54: {
        if (tag == 432) {
         parse_bv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv4_)));
          set_has_bv4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(441)) goto parse_ap4;
        break;
      }

      // optional double ap4 = 55 [default = 0];
      case 55: {
        if (tag == 441) {
         parse_ap4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap4_)));
          set_has_ap4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_av4;
        break;
      }

      // optional int32 av4 = 56 [default = 0];
      case 56: {
        if (tag == 448) {
         parse_av4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av4_)));
          set_has_av4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(457)) goto parse_bp5;
        break;
      }

      // optional double bp5 = 57 [default = 0];
      case 57: {
        if (tag == 457) {
         parse_bp5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp5_)));
          set_has_bp5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_bv5;
        break;
      }

      // optional int32 bv5 = 58 [default = 0];
      case 58: {
        if (tag == 464) {
         parse_bv5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bv5_)));
          set_has_bv5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(473)) goto parse_ap5;
        break;
      }

      // optional double ap5 = 59 [default = 0];
      case 59: {
        if (tag == 473) {
         parse_ap5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap5_)));
          set_has_ap5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_av5;
        break;
      }

      // optional int32 av5 = 60 [default = 0];
      case 60: {
        if (tag == 480) {
         parse_av5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &av5_)));
          set_has_av5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_stock_quote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_stock_quote)
  return false;
#undef DO_
}

void MYC_stock_quote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_stock_quote)
  // optional string wind_code = 1;
  if (has_wind_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wind_code().data(), this->wind_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_stock_quote.wind_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wind_code(), output);
  }

  // optional string ticker = 2;
  if (has_ticker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticker().data(), this->ticker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_stock_quote.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticker(), output);
  }

  // optional int32 action_day = 3;
  if (has_action_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_day(), output);
  }

  // optional int32 trading_day = 4;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->trading_day(), output);
  }

  // optional int32 exch_time = 5;
  if (has_exch_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exch_time(), output);
  }

  // optional int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // optional double pre_close_px = 7;
  if (has_pre_close_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pre_close_px(), output);
  }

  // optional double open_px = 8;
  if (has_open_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->open_px(), output);
  }

  // optional double high_px = 9;
  if (has_high_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->high_px(), output);
  }

  // optional double low_px = 10;
  if (has_low_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->low_px(), output);
  }

  // optional double last_px = 11;
  if (has_last_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->last_px(), output);
  }

  // optional int32 num_of_trades = 16;
  if (has_num_of_trades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->num_of_trades(), output);
  }

  // optional int64 total_vol = 18;
  if (has_total_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->total_vol(), output);
  }

  // optional double total_notional = 19;
  if (has_total_notional()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->total_notional(), output);
  }

  // optional int64 total_bid_vol = 20;
  if (has_total_bid_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->total_bid_vol(), output);
  }

  // optional int64 total_ask_vol = 21;
  if (has_total_ask_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->total_ask_vol(), output);
  }

  // optional double weighted_avg_bp = 22;
  if (has_weighted_avg_bp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->weighted_avg_bp(), output);
  }

  // optional double weighted_avg_ap = 23;
  if (has_weighted_avg_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->weighted_avg_ap(), output);
  }

  // optional double IOPV = 24;
  if (has_iopv()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->iopv(), output);
  }

  // optional double yield_to_maturity = 25;
  if (has_yield_to_maturity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->yield_to_maturity(), output);
  }

  // optional double upper_limit_px = 26;
  if (has_upper_limit_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->upper_limit_px(), output);
  }

  // optional double lower_limit_px = 27;
  if (has_lower_limit_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->lower_limit_px(), output);
  }

  // optional string prefix = 28;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_stock_quote.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->prefix(), output);
  }

  // optional double PE1 = 29;
  if (has_pe1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->pe1(), output);
  }

  // optional double PE2 = 30;
  if (has_pe2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->pe2(), output);
  }

  // optional int32 change = 31;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->change(), output);
  }

  // optional double bp1 = 41 [default = 0];
  if (has_bp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->bp1(), output);
  }

  // optional int32 bv1 = 42 [default = 0];
  if (has_bv1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->bv1(), output);
  }

  // optional double ap1 = 43 [default = 0];
  if (has_ap1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->ap1(), output);
  }

  // optional int32 av1 = 44 [default = 0];
  if (has_av1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->av1(), output);
  }

  // optional double bp2 = 45 [default = 0];
  if (has_bp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->bp2(), output);
  }

  // optional int32 bv2 = 46 [default = 0];
  if (has_bv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->bv2(), output);
  }

  // optional double ap2 = 47 [default = 0];
  if (has_ap2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->ap2(), output);
  }

  // optional int32 av2 = 48 [default = 0];
  if (has_av2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->av2(), output);
  }

  // optional double bp3 = 49 [default = 0];
  if (has_bp3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(49, this->bp3(), output);
  }

  // optional int32 bv3 = 50 [default = 0];
  if (has_bv3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->bv3(), output);
  }

  // optional double ap3 = 51 [default = 0];
  if (has_ap3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->ap3(), output);
  }

  // optional int32 av3 = 52 [default = 0];
  if (has_av3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->av3(), output);
  }

  // optional double bp4 = 53 [default = 0];
  if (has_bp4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->bp4(), output);
  }

  // optional int32 bv4 = 54 [default = 0];
  if (has_bv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->bv4(), output);
  }

  // optional double ap4 = 55 [default = 0];
  if (has_ap4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->ap4(), output);
  }

  // optional int32 av4 = 56 [default = 0];
  if (has_av4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->av4(), output);
  }

  // optional double bp5 = 57 [default = 0];
  if (has_bp5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(57, this->bp5(), output);
  }

  // optional int32 bv5 = 58 [default = 0];
  if (has_bv5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->bv5(), output);
  }

  // optional double ap5 = 59 [default = 0];
  if (has_ap5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(59, this->ap5(), output);
  }

  // optional int32 av5 = 60 [default = 0];
  if (has_av5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->av5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_stock_quote)
}

::google::protobuf::uint8* MYC_stock_quote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_stock_quote)
  // optional string wind_code = 1;
  if (has_wind_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wind_code().data(), this->wind_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_stock_quote.wind_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wind_code(), target);
  }

  // optional string ticker = 2;
  if (has_ticker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticker().data(), this->ticker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_stock_quote.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticker(), target);
  }

  // optional int32 action_day = 3;
  if (has_action_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_day(), target);
  }

  // optional int32 trading_day = 4;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->trading_day(), target);
  }

  // optional int32 exch_time = 5;
  if (has_exch_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exch_time(), target);
  }

  // optional int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // optional double pre_close_px = 7;
  if (has_pre_close_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pre_close_px(), target);
  }

  // optional double open_px = 8;
  if (has_open_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->open_px(), target);
  }

  // optional double high_px = 9;
  if (has_high_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->high_px(), target);
  }

  // optional double low_px = 10;
  if (has_low_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->low_px(), target);
  }

  // optional double last_px = 11;
  if (has_last_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->last_px(), target);
  }

  // optional int32 num_of_trades = 16;
  if (has_num_of_trades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->num_of_trades(), target);
  }

  // optional int64 total_vol = 18;
  if (has_total_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->total_vol(), target);
  }

  // optional double total_notional = 19;
  if (has_total_notional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->total_notional(), target);
  }

  // optional int64 total_bid_vol = 20;
  if (has_total_bid_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->total_bid_vol(), target);
  }

  // optional int64 total_ask_vol = 21;
  if (has_total_ask_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->total_ask_vol(), target);
  }

  // optional double weighted_avg_bp = 22;
  if (has_weighted_avg_bp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->weighted_avg_bp(), target);
  }

  // optional double weighted_avg_ap = 23;
  if (has_weighted_avg_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->weighted_avg_ap(), target);
  }

  // optional double IOPV = 24;
  if (has_iopv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->iopv(), target);
  }

  // optional double yield_to_maturity = 25;
  if (has_yield_to_maturity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->yield_to_maturity(), target);
  }

  // optional double upper_limit_px = 26;
  if (has_upper_limit_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->upper_limit_px(), target);
  }

  // optional double lower_limit_px = 27;
  if (has_lower_limit_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->lower_limit_px(), target);
  }

  // optional string prefix = 28;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_stock_quote.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->prefix(), target);
  }

  // optional double PE1 = 29;
  if (has_pe1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->pe1(), target);
  }

  // optional double PE2 = 30;
  if (has_pe2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->pe2(), target);
  }

  // optional int32 change = 31;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->change(), target);
  }

  // optional double bp1 = 41 [default = 0];
  if (has_bp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->bp1(), target);
  }

  // optional int32 bv1 = 42 [default = 0];
  if (has_bv1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->bv1(), target);
  }

  // optional double ap1 = 43 [default = 0];
  if (has_ap1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->ap1(), target);
  }

  // optional int32 av1 = 44 [default = 0];
  if (has_av1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->av1(), target);
  }

  // optional double bp2 = 45 [default = 0];
  if (has_bp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->bp2(), target);
  }

  // optional int32 bv2 = 46 [default = 0];
  if (has_bv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->bv2(), target);
  }

  // optional double ap2 = 47 [default = 0];
  if (has_ap2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->ap2(), target);
  }

  // optional int32 av2 = 48 [default = 0];
  if (has_av2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->av2(), target);
  }

  // optional double bp3 = 49 [default = 0];
  if (has_bp3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(49, this->bp3(), target);
  }

  // optional int32 bv3 = 50 [default = 0];
  if (has_bv3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->bv3(), target);
  }

  // optional double ap3 = 51 [default = 0];
  if (has_ap3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->ap3(), target);
  }

  // optional int32 av3 = 52 [default = 0];
  if (has_av3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->av3(), target);
  }

  // optional double bp4 = 53 [default = 0];
  if (has_bp4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->bp4(), target);
  }

  // optional int32 bv4 = 54 [default = 0];
  if (has_bv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->bv4(), target);
  }

  // optional double ap4 = 55 [default = 0];
  if (has_ap4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->ap4(), target);
  }

  // optional int32 av4 = 56 [default = 0];
  if (has_av4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->av4(), target);
  }

  // optional double bp5 = 57 [default = 0];
  if (has_bp5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(57, this->bp5(), target);
  }

  // optional int32 bv5 = 58 [default = 0];
  if (has_bv5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->bv5(), target);
  }

  // optional double ap5 = 59 [default = 0];
  if (has_ap5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(59, this->ap5(), target);
  }

  // optional int32 av5 = 60 [default = 0];
  if (has_av5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->av5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_stock_quote)
  return target;
}

int MYC_stock_quote::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_stock_quote)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string wind_code = 1;
    if (has_wind_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wind_code());
    }

    // optional string ticker = 2;
    if (has_ticker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticker());
    }

    // optional int32 action_day = 3;
    if (has_action_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_day());
    }

    // optional int32 trading_day = 4;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trading_day());
    }

    // optional int32 exch_time = 5;
    if (has_exch_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exch_time());
    }

    // optional int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional double pre_close_px = 7;
    if (has_pre_close_px()) {
      total_size += 1 + 8;
    }

    // optional double open_px = 8;
    if (has_open_px()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double high_px = 9;
    if (has_high_px()) {
      total_size += 1 + 8;
    }

    // optional double low_px = 10;
    if (has_low_px()) {
      total_size += 1 + 8;
    }

    // optional double last_px = 11;
    if (has_last_px()) {
      total_size += 1 + 8;
    }

    // optional int32 num_of_trades = 16;
    if (has_num_of_trades()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_of_trades());
    }

    // optional int64 total_vol = 18;
    if (has_total_vol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_vol());
    }

    // optional double total_notional = 19;
    if (has_total_notional()) {
      total_size += 2 + 8;
    }

    // optional int64 total_bid_vol = 20;
    if (has_total_bid_vol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_bid_vol());
    }

    // optional int64 total_ask_vol = 21;
    if (has_total_ask_vol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_ask_vol());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double weighted_avg_bp = 22;
    if (has_weighted_avg_bp()) {
      total_size += 2 + 8;
    }

    // optional double weighted_avg_ap = 23;
    if (has_weighted_avg_ap()) {
      total_size += 2 + 8;
    }

    // optional double IOPV = 24;
    if (has_iopv()) {
      total_size += 2 + 8;
    }

    // optional double yield_to_maturity = 25;
    if (has_yield_to_maturity()) {
      total_size += 2 + 8;
    }

    // optional double upper_limit_px = 26;
    if (has_upper_limit_px()) {
      total_size += 2 + 8;
    }

    // optional double lower_limit_px = 27;
    if (has_lower_limit_px()) {
      total_size += 2 + 8;
    }

    // optional string prefix = 28;
    if (has_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional double PE1 = 29;
    if (has_pe1()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double PE2 = 30;
    if (has_pe2()) {
      total_size += 2 + 8;
    }

    // optional int32 change = 31;
    if (has_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // optional double bp1 = 41 [default = 0];
    if (has_bp1()) {
      total_size += 2 + 8;
    }

    // optional int32 bv1 = 42 [default = 0];
    if (has_bv1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv1());
    }

    // optional double ap1 = 43 [default = 0];
    if (has_ap1()) {
      total_size += 2 + 8;
    }

    // optional int32 av1 = 44 [default = 0];
    if (has_av1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av1());
    }

    // optional double bp2 = 45 [default = 0];
    if (has_bp2()) {
      total_size += 2 + 8;
    }

    // optional int32 bv2 = 46 [default = 0];
    if (has_bv2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv2());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional double ap2 = 47 [default = 0];
    if (has_ap2()) {
      total_size += 2 + 8;
    }

    // optional int32 av2 = 48 [default = 0];
    if (has_av2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av2());
    }

    // optional double bp3 = 49 [default = 0];
    if (has_bp3()) {
      total_size += 2 + 8;
    }

    // optional int32 bv3 = 50 [default = 0];
    if (has_bv3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv3());
    }

    // optional double ap3 = 51 [default = 0];
    if (has_ap3()) {
      total_size += 2 + 8;
    }

    // optional int32 av3 = 52 [default = 0];
    if (has_av3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av3());
    }

    // optional double bp4 = 53 [default = 0];
    if (has_bp4()) {
      total_size += 2 + 8;
    }

    // optional int32 bv4 = 54 [default = 0];
    if (has_bv4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv4());
    }

  }
  if (_has_bits_[40 / 32] & 16128u) {
    // optional double ap4 = 55 [default = 0];
    if (has_ap4()) {
      total_size += 2 + 8;
    }

    // optional int32 av4 = 56 [default = 0];
    if (has_av4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av4());
    }

    // optional double bp5 = 57 [default = 0];
    if (has_bp5()) {
      total_size += 2 + 8;
    }

    // optional int32 bv5 = 58 [default = 0];
    if (has_bv5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bv5());
    }

    // optional double ap5 = 59 [default = 0];
    if (has_ap5()) {
      total_size += 2 + 8;
    }

    // optional int32 av5 = 60 [default = 0];
    if (has_av5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->av5());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_stock_quote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_stock_quote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_stock_quote* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_stock_quote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_stock_quote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_stock_quote)
    MergeFrom(*source);
  }
}

void MYC_stock_quote::MergeFrom(const MYC_stock_quote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_stock_quote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wind_code()) {
      set_has_wind_code();
      wind_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wind_code_);
    }
    if (from.has_ticker()) {
      set_has_ticker();
      ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
    }
    if (from.has_action_day()) {
      set_action_day(from.action_day());
    }
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_exch_time()) {
      set_exch_time(from.exch_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_pre_close_px()) {
      set_pre_close_px(from.pre_close_px());
    }
    if (from.has_open_px()) {
      set_open_px(from.open_px());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_high_px()) {
      set_high_px(from.high_px());
    }
    if (from.has_low_px()) {
      set_low_px(from.low_px());
    }
    if (from.has_last_px()) {
      set_last_px(from.last_px());
    }
    if (from.has_num_of_trades()) {
      set_num_of_trades(from.num_of_trades());
    }
    if (from.has_total_vol()) {
      set_total_vol(from.total_vol());
    }
    if (from.has_total_notional()) {
      set_total_notional(from.total_notional());
    }
    if (from.has_total_bid_vol()) {
      set_total_bid_vol(from.total_bid_vol());
    }
    if (from.has_total_ask_vol()) {
      set_total_ask_vol(from.total_ask_vol());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_weighted_avg_bp()) {
      set_weighted_avg_bp(from.weighted_avg_bp());
    }
    if (from.has_weighted_avg_ap()) {
      set_weighted_avg_ap(from.weighted_avg_ap());
    }
    if (from.has_iopv()) {
      set_iopv(from.iopv());
    }
    if (from.has_yield_to_maturity()) {
      set_yield_to_maturity(from.yield_to_maturity());
    }
    if (from.has_upper_limit_px()) {
      set_upper_limit_px(from.upper_limit_px());
    }
    if (from.has_lower_limit_px()) {
      set_lower_limit_px(from.lower_limit_px());
    }
    if (from.has_prefix()) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (from.has_pe1()) {
      set_pe1(from.pe1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pe2()) {
      set_pe2(from.pe2());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_bp1()) {
      set_bp1(from.bp1());
    }
    if (from.has_bv1()) {
      set_bv1(from.bv1());
    }
    if (from.has_ap1()) {
      set_ap1(from.ap1());
    }
    if (from.has_av1()) {
      set_av1(from.av1());
    }
    if (from.has_bp2()) {
      set_bp2(from.bp2());
    }
    if (from.has_bv2()) {
      set_bv2(from.bv2());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ap2()) {
      set_ap2(from.ap2());
    }
    if (from.has_av2()) {
      set_av2(from.av2());
    }
    if (from.has_bp3()) {
      set_bp3(from.bp3());
    }
    if (from.has_bv3()) {
      set_bv3(from.bv3());
    }
    if (from.has_ap3()) {
      set_ap3(from.ap3());
    }
    if (from.has_av3()) {
      set_av3(from.av3());
    }
    if (from.has_bp4()) {
      set_bp4(from.bp4());
    }
    if (from.has_bv4()) {
      set_bv4(from.bv4());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_ap4()) {
      set_ap4(from.ap4());
    }
    if (from.has_av4()) {
      set_av4(from.av4());
    }
    if (from.has_bp5()) {
      set_bp5(from.bp5());
    }
    if (from.has_bv5()) {
      set_bv5(from.bv5());
    }
    if (from.has_ap5()) {
      set_ap5(from.ap5());
    }
    if (from.has_av5()) {
      set_av5(from.av5());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_stock_quote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_stock_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_stock_quote::CopyFrom(const MYC_stock_quote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_stock_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_stock_quote::IsInitialized() const {

  return true;
}

void MYC_stock_quote::Swap(MYC_stock_quote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_stock_quote::InternalSwap(MYC_stock_quote* other) {
  wind_code_.Swap(&other->wind_code_);
  ticker_.Swap(&other->ticker_);
  std::swap(action_day_, other->action_day_);
  std::swap(trading_day_, other->trading_day_);
  std::swap(exch_time_, other->exch_time_);
  std::swap(status_, other->status_);
  std::swap(pre_close_px_, other->pre_close_px_);
  std::swap(open_px_, other->open_px_);
  std::swap(high_px_, other->high_px_);
  std::swap(low_px_, other->low_px_);
  std::swap(last_px_, other->last_px_);
  std::swap(num_of_trades_, other->num_of_trades_);
  std::swap(total_vol_, other->total_vol_);
  std::swap(total_notional_, other->total_notional_);
  std::swap(total_bid_vol_, other->total_bid_vol_);
  std::swap(total_ask_vol_, other->total_ask_vol_);
  std::swap(weighted_avg_bp_, other->weighted_avg_bp_);
  std::swap(weighted_avg_ap_, other->weighted_avg_ap_);
  std::swap(iopv_, other->iopv_);
  std::swap(yield_to_maturity_, other->yield_to_maturity_);
  std::swap(upper_limit_px_, other->upper_limit_px_);
  std::swap(lower_limit_px_, other->lower_limit_px_);
  prefix_.Swap(&other->prefix_);
  std::swap(pe1_, other->pe1_);
  std::swap(pe2_, other->pe2_);
  std::swap(change_, other->change_);
  std::swap(bp1_, other->bp1_);
  std::swap(bv1_, other->bv1_);
  std::swap(ap1_, other->ap1_);
  std::swap(av1_, other->av1_);
  std::swap(bp2_, other->bp2_);
  std::swap(bv2_, other->bv2_);
  std::swap(ap2_, other->ap2_);
  std::swap(av2_, other->av2_);
  std::swap(bp3_, other->bp3_);
  std::swap(bv3_, other->bv3_);
  std::swap(ap3_, other->ap3_);
  std::swap(av3_, other->av3_);
  std::swap(bp4_, other->bp4_);
  std::swap(bv4_, other->bv4_);
  std::swap(ap4_, other->ap4_);
  std::swap(av4_, other->av4_);
  std::swap(bp5_, other->bp5_);
  std::swap(bv5_, other->bv5_);
  std::swap(ap5_, other->ap5_);
  std::swap(av5_, other->av5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_stock_quote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_stock_quote_descriptor_;
  metadata.reflection = MYC_stock_quote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_stock_quote

// optional string wind_code = 1;
bool MYC_stock_quote::has_wind_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MYC_stock_quote::set_has_wind_code() {
  _has_bits_[0] |= 0x00000001u;
}
void MYC_stock_quote::clear_has_wind_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void MYC_stock_quote::clear_wind_code() {
  wind_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wind_code();
}
 const ::std::string& MYC_stock_quote::wind_code() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.wind_code)
  return wind_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_stock_quote::set_wind_code(const ::std::string& value) {
  set_has_wind_code();
  wind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.wind_code)
}
 void MYC_stock_quote::set_wind_code(const char* value) {
  set_has_wind_code();
  wind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_stock_quote.wind_code)
}
 void MYC_stock_quote::set_wind_code(const char* value, size_t size) {
  set_has_wind_code();
  wind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_stock_quote.wind_code)
}
 ::std::string* MYC_stock_quote::mutable_wind_code() {
  set_has_wind_code();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_stock_quote.wind_code)
  return wind_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_stock_quote::release_wind_code() {
  // @@protoc_insertion_point(field_release:MYC.MYC_stock_quote.wind_code)
  clear_has_wind_code();
  return wind_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_stock_quote::set_allocated_wind_code(::std::string* wind_code) {
  if (wind_code != NULL) {
    set_has_wind_code();
  } else {
    clear_has_wind_code();
  }
  wind_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wind_code);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_stock_quote.wind_code)
}

// optional string ticker = 2;
bool MYC_stock_quote::has_ticker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MYC_stock_quote::set_has_ticker() {
  _has_bits_[0] |= 0x00000002u;
}
void MYC_stock_quote::clear_has_ticker() {
  _has_bits_[0] &= ~0x00000002u;
}
void MYC_stock_quote::clear_ticker() {
  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticker();
}
 const ::std::string& MYC_stock_quote::ticker() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ticker)
  return ticker_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_stock_quote::set_ticker(const ::std::string& value) {
  set_has_ticker();
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ticker)
}
 void MYC_stock_quote::set_ticker(const char* value) {
  set_has_ticker();
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_stock_quote.ticker)
}
 void MYC_stock_quote::set_ticker(const char* value, size_t size) {
  set_has_ticker();
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_stock_quote.ticker)
}
 ::std::string* MYC_stock_quote::mutable_ticker() {
  set_has_ticker();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_stock_quote.ticker)
  return ticker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_stock_quote::release_ticker() {
  // @@protoc_insertion_point(field_release:MYC.MYC_stock_quote.ticker)
  clear_has_ticker();
  return ticker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_stock_quote::set_allocated_ticker(::std::string* ticker) {
  if (ticker != NULL) {
    set_has_ticker();
  } else {
    clear_has_ticker();
  }
  ticker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticker);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_stock_quote.ticker)
}

// optional int32 action_day = 3;
bool MYC_stock_quote::has_action_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MYC_stock_quote::set_has_action_day() {
  _has_bits_[0] |= 0x00000004u;
}
void MYC_stock_quote::clear_has_action_day() {
  _has_bits_[0] &= ~0x00000004u;
}
void MYC_stock_quote::clear_action_day() {
  action_day_ = 0;
  clear_has_action_day();
}
 ::google::protobuf::int32 MYC_stock_quote::action_day() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.action_day)
  return action_day_;
}
 void MYC_stock_quote::set_action_day(::google::protobuf::int32 value) {
  set_has_action_day();
  action_day_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.action_day)
}

// optional int32 trading_day = 4;
bool MYC_stock_quote::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MYC_stock_quote::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
void MYC_stock_quote::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
void MYC_stock_quote::clear_trading_day() {
  trading_day_ = 0;
  clear_has_trading_day();
}
 ::google::protobuf::int32 MYC_stock_quote::trading_day() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.trading_day)
  return trading_day_;
}
 void MYC_stock_quote::set_trading_day(::google::protobuf::int32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.trading_day)
}

// optional int32 exch_time = 5;
bool MYC_stock_quote::has_exch_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MYC_stock_quote::set_has_exch_time() {
  _has_bits_[0] |= 0x00000010u;
}
void MYC_stock_quote::clear_has_exch_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void MYC_stock_quote::clear_exch_time() {
  exch_time_ = 0;
  clear_has_exch_time();
}
 ::google::protobuf::int32 MYC_stock_quote::exch_time() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.exch_time)
  return exch_time_;
}
 void MYC_stock_quote::set_exch_time(::google::protobuf::int32 value) {
  set_has_exch_time();
  exch_time_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.exch_time)
}

// optional int32 status = 6;
bool MYC_stock_quote::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MYC_stock_quote::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void MYC_stock_quote::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void MYC_stock_quote::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 MYC_stock_quote::status() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.status)
  return status_;
}
 void MYC_stock_quote::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.status)
}

// optional double pre_close_px = 7;
bool MYC_stock_quote::has_pre_close_px() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MYC_stock_quote::set_has_pre_close_px() {
  _has_bits_[0] |= 0x00000040u;
}
void MYC_stock_quote::clear_has_pre_close_px() {
  _has_bits_[0] &= ~0x00000040u;
}
void MYC_stock_quote::clear_pre_close_px() {
  pre_close_px_ = 0;
  clear_has_pre_close_px();
}
 double MYC_stock_quote::pre_close_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.pre_close_px)
  return pre_close_px_;
}
 void MYC_stock_quote::set_pre_close_px(double value) {
  set_has_pre_close_px();
  pre_close_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.pre_close_px)
}

// optional double open_px = 8;
bool MYC_stock_quote::has_open_px() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MYC_stock_quote::set_has_open_px() {
  _has_bits_[0] |= 0x00000080u;
}
void MYC_stock_quote::clear_has_open_px() {
  _has_bits_[0] &= ~0x00000080u;
}
void MYC_stock_quote::clear_open_px() {
  open_px_ = 0;
  clear_has_open_px();
}
 double MYC_stock_quote::open_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.open_px)
  return open_px_;
}
 void MYC_stock_quote::set_open_px(double value) {
  set_has_open_px();
  open_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.open_px)
}

// optional double high_px = 9;
bool MYC_stock_quote::has_high_px() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MYC_stock_quote::set_has_high_px() {
  _has_bits_[0] |= 0x00000100u;
}
void MYC_stock_quote::clear_has_high_px() {
  _has_bits_[0] &= ~0x00000100u;
}
void MYC_stock_quote::clear_high_px() {
  high_px_ = 0;
  clear_has_high_px();
}
 double MYC_stock_quote::high_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.high_px)
  return high_px_;
}
 void MYC_stock_quote::set_high_px(double value) {
  set_has_high_px();
  high_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.high_px)
}

// optional double low_px = 10;
bool MYC_stock_quote::has_low_px() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MYC_stock_quote::set_has_low_px() {
  _has_bits_[0] |= 0x00000200u;
}
void MYC_stock_quote::clear_has_low_px() {
  _has_bits_[0] &= ~0x00000200u;
}
void MYC_stock_quote::clear_low_px() {
  low_px_ = 0;
  clear_has_low_px();
}
 double MYC_stock_quote::low_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.low_px)
  return low_px_;
}
 void MYC_stock_quote::set_low_px(double value) {
  set_has_low_px();
  low_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.low_px)
}

// optional double last_px = 11;
bool MYC_stock_quote::has_last_px() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MYC_stock_quote::set_has_last_px() {
  _has_bits_[0] |= 0x00000400u;
}
void MYC_stock_quote::clear_has_last_px() {
  _has_bits_[0] &= ~0x00000400u;
}
void MYC_stock_quote::clear_last_px() {
  last_px_ = 0;
  clear_has_last_px();
}
 double MYC_stock_quote::last_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.last_px)
  return last_px_;
}
 void MYC_stock_quote::set_last_px(double value) {
  set_has_last_px();
  last_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.last_px)
}

// optional int32 num_of_trades = 16;
bool MYC_stock_quote::has_num_of_trades() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MYC_stock_quote::set_has_num_of_trades() {
  _has_bits_[0] |= 0x00000800u;
}
void MYC_stock_quote::clear_has_num_of_trades() {
  _has_bits_[0] &= ~0x00000800u;
}
void MYC_stock_quote::clear_num_of_trades() {
  num_of_trades_ = 0;
  clear_has_num_of_trades();
}
 ::google::protobuf::int32 MYC_stock_quote::num_of_trades() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.num_of_trades)
  return num_of_trades_;
}
 void MYC_stock_quote::set_num_of_trades(::google::protobuf::int32 value) {
  set_has_num_of_trades();
  num_of_trades_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.num_of_trades)
}

// optional int64 total_vol = 18;
bool MYC_stock_quote::has_total_vol() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MYC_stock_quote::set_has_total_vol() {
  _has_bits_[0] |= 0x00001000u;
}
void MYC_stock_quote::clear_has_total_vol() {
  _has_bits_[0] &= ~0x00001000u;
}
void MYC_stock_quote::clear_total_vol() {
  total_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_vol();
}
 ::google::protobuf::int64 MYC_stock_quote::total_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_vol)
  return total_vol_;
}
 void MYC_stock_quote::set_total_vol(::google::protobuf::int64 value) {
  set_has_total_vol();
  total_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_vol)
}

// optional double total_notional = 19;
bool MYC_stock_quote::has_total_notional() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MYC_stock_quote::set_has_total_notional() {
  _has_bits_[0] |= 0x00002000u;
}
void MYC_stock_quote::clear_has_total_notional() {
  _has_bits_[0] &= ~0x00002000u;
}
void MYC_stock_quote::clear_total_notional() {
  total_notional_ = 0;
  clear_has_total_notional();
}
 double MYC_stock_quote::total_notional() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_notional)
  return total_notional_;
}
 void MYC_stock_quote::set_total_notional(double value) {
  set_has_total_notional();
  total_notional_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_notional)
}

// optional int64 total_bid_vol = 20;
bool MYC_stock_quote::has_total_bid_vol() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MYC_stock_quote::set_has_total_bid_vol() {
  _has_bits_[0] |= 0x00004000u;
}
void MYC_stock_quote::clear_has_total_bid_vol() {
  _has_bits_[0] &= ~0x00004000u;
}
void MYC_stock_quote::clear_total_bid_vol() {
  total_bid_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_bid_vol();
}
 ::google::protobuf::int64 MYC_stock_quote::total_bid_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_bid_vol)
  return total_bid_vol_;
}
 void MYC_stock_quote::set_total_bid_vol(::google::protobuf::int64 value) {
  set_has_total_bid_vol();
  total_bid_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_bid_vol)
}

// optional int64 total_ask_vol = 21;
bool MYC_stock_quote::has_total_ask_vol() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MYC_stock_quote::set_has_total_ask_vol() {
  _has_bits_[0] |= 0x00008000u;
}
void MYC_stock_quote::clear_has_total_ask_vol() {
  _has_bits_[0] &= ~0x00008000u;
}
void MYC_stock_quote::clear_total_ask_vol() {
  total_ask_vol_ = GOOGLE_LONGLONG(0);
  clear_has_total_ask_vol();
}
 ::google::protobuf::int64 MYC_stock_quote::total_ask_vol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.total_ask_vol)
  return total_ask_vol_;
}
 void MYC_stock_quote::set_total_ask_vol(::google::protobuf::int64 value) {
  set_has_total_ask_vol();
  total_ask_vol_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.total_ask_vol)
}

// optional double weighted_avg_bp = 22;
bool MYC_stock_quote::has_weighted_avg_bp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MYC_stock_quote::set_has_weighted_avg_bp() {
  _has_bits_[0] |= 0x00010000u;
}
void MYC_stock_quote::clear_has_weighted_avg_bp() {
  _has_bits_[0] &= ~0x00010000u;
}
void MYC_stock_quote::clear_weighted_avg_bp() {
  weighted_avg_bp_ = 0;
  clear_has_weighted_avg_bp();
}
 double MYC_stock_quote::weighted_avg_bp() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.weighted_avg_bp)
  return weighted_avg_bp_;
}
 void MYC_stock_quote::set_weighted_avg_bp(double value) {
  set_has_weighted_avg_bp();
  weighted_avg_bp_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.weighted_avg_bp)
}

// optional double weighted_avg_ap = 23;
bool MYC_stock_quote::has_weighted_avg_ap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MYC_stock_quote::set_has_weighted_avg_ap() {
  _has_bits_[0] |= 0x00020000u;
}
void MYC_stock_quote::clear_has_weighted_avg_ap() {
  _has_bits_[0] &= ~0x00020000u;
}
void MYC_stock_quote::clear_weighted_avg_ap() {
  weighted_avg_ap_ = 0;
  clear_has_weighted_avg_ap();
}
 double MYC_stock_quote::weighted_avg_ap() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.weighted_avg_ap)
  return weighted_avg_ap_;
}
 void MYC_stock_quote::set_weighted_avg_ap(double value) {
  set_has_weighted_avg_ap();
  weighted_avg_ap_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.weighted_avg_ap)
}

// optional double IOPV = 24;
bool MYC_stock_quote::has_iopv() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MYC_stock_quote::set_has_iopv() {
  _has_bits_[0] |= 0x00040000u;
}
void MYC_stock_quote::clear_has_iopv() {
  _has_bits_[0] &= ~0x00040000u;
}
void MYC_stock_quote::clear_iopv() {
  iopv_ = 0;
  clear_has_iopv();
}
 double MYC_stock_quote::iopv() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.IOPV)
  return iopv_;
}
 void MYC_stock_quote::set_iopv(double value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.IOPV)
}

// optional double yield_to_maturity = 25;
bool MYC_stock_quote::has_yield_to_maturity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MYC_stock_quote::set_has_yield_to_maturity() {
  _has_bits_[0] |= 0x00080000u;
}
void MYC_stock_quote::clear_has_yield_to_maturity() {
  _has_bits_[0] &= ~0x00080000u;
}
void MYC_stock_quote::clear_yield_to_maturity() {
  yield_to_maturity_ = 0;
  clear_has_yield_to_maturity();
}
 double MYC_stock_quote::yield_to_maturity() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.yield_to_maturity)
  return yield_to_maturity_;
}
 void MYC_stock_quote::set_yield_to_maturity(double value) {
  set_has_yield_to_maturity();
  yield_to_maturity_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.yield_to_maturity)
}

// optional double upper_limit_px = 26;
bool MYC_stock_quote::has_upper_limit_px() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void MYC_stock_quote::set_has_upper_limit_px() {
  _has_bits_[0] |= 0x00100000u;
}
void MYC_stock_quote::clear_has_upper_limit_px() {
  _has_bits_[0] &= ~0x00100000u;
}
void MYC_stock_quote::clear_upper_limit_px() {
  upper_limit_px_ = 0;
  clear_has_upper_limit_px();
}
 double MYC_stock_quote::upper_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.upper_limit_px)
  return upper_limit_px_;
}
 void MYC_stock_quote::set_upper_limit_px(double value) {
  set_has_upper_limit_px();
  upper_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.upper_limit_px)
}

// optional double lower_limit_px = 27;
bool MYC_stock_quote::has_lower_limit_px() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void MYC_stock_quote::set_has_lower_limit_px() {
  _has_bits_[0] |= 0x00200000u;
}
void MYC_stock_quote::clear_has_lower_limit_px() {
  _has_bits_[0] &= ~0x00200000u;
}
void MYC_stock_quote::clear_lower_limit_px() {
  lower_limit_px_ = 0;
  clear_has_lower_limit_px();
}
 double MYC_stock_quote::lower_limit_px() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.lower_limit_px)
  return lower_limit_px_;
}
 void MYC_stock_quote::set_lower_limit_px(double value) {
  set_has_lower_limit_px();
  lower_limit_px_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.lower_limit_px)
}

// optional string prefix = 28;
bool MYC_stock_quote::has_prefix() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void MYC_stock_quote::set_has_prefix() {
  _has_bits_[0] |= 0x00400000u;
}
void MYC_stock_quote::clear_has_prefix() {
  _has_bits_[0] &= ~0x00400000u;
}
void MYC_stock_quote::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
 const ::std::string& MYC_stock_quote::prefix() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_stock_quote::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.prefix)
}
 void MYC_stock_quote::set_prefix(const char* value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_stock_quote.prefix)
}
 void MYC_stock_quote::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_stock_quote.prefix)
}
 ::std::string* MYC_stock_quote::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_stock_quote.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_stock_quote::release_prefix() {
  // @@protoc_insertion_point(field_release:MYC.MYC_stock_quote.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_stock_quote::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_stock_quote.prefix)
}

// optional double PE1 = 29;
bool MYC_stock_quote::has_pe1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void MYC_stock_quote::set_has_pe1() {
  _has_bits_[0] |= 0x00800000u;
}
void MYC_stock_quote::clear_has_pe1() {
  _has_bits_[0] &= ~0x00800000u;
}
void MYC_stock_quote::clear_pe1() {
  pe1_ = 0;
  clear_has_pe1();
}
 double MYC_stock_quote::pe1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.PE1)
  return pe1_;
}
 void MYC_stock_quote::set_pe1(double value) {
  set_has_pe1();
  pe1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.PE1)
}

// optional double PE2 = 30;
bool MYC_stock_quote::has_pe2() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void MYC_stock_quote::set_has_pe2() {
  _has_bits_[0] |= 0x01000000u;
}
void MYC_stock_quote::clear_has_pe2() {
  _has_bits_[0] &= ~0x01000000u;
}
void MYC_stock_quote::clear_pe2() {
  pe2_ = 0;
  clear_has_pe2();
}
 double MYC_stock_quote::pe2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.PE2)
  return pe2_;
}
 void MYC_stock_quote::set_pe2(double value) {
  set_has_pe2();
  pe2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.PE2)
}

// optional int32 change = 31;
bool MYC_stock_quote::has_change() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void MYC_stock_quote::set_has_change() {
  _has_bits_[0] |= 0x02000000u;
}
void MYC_stock_quote::clear_has_change() {
  _has_bits_[0] &= ~0x02000000u;
}
void MYC_stock_quote::clear_change() {
  change_ = 0;
  clear_has_change();
}
 ::google::protobuf::int32 MYC_stock_quote::change() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.change)
  return change_;
}
 void MYC_stock_quote::set_change(::google::protobuf::int32 value) {
  set_has_change();
  change_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.change)
}

// optional double bp1 = 41 [default = 0];
bool MYC_stock_quote::has_bp1() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void MYC_stock_quote::set_has_bp1() {
  _has_bits_[0] |= 0x04000000u;
}
void MYC_stock_quote::clear_has_bp1() {
  _has_bits_[0] &= ~0x04000000u;
}
void MYC_stock_quote::clear_bp1() {
  bp1_ = 0;
  clear_has_bp1();
}
 double MYC_stock_quote::bp1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp1)
  return bp1_;
}
 void MYC_stock_quote::set_bp1(double value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp1)
}

// optional int32 bv1 = 42 [default = 0];
bool MYC_stock_quote::has_bv1() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void MYC_stock_quote::set_has_bv1() {
  _has_bits_[0] |= 0x08000000u;
}
void MYC_stock_quote::clear_has_bv1() {
  _has_bits_[0] &= ~0x08000000u;
}
void MYC_stock_quote::clear_bv1() {
  bv1_ = 0;
  clear_has_bv1();
}
 ::google::protobuf::int32 MYC_stock_quote::bv1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv1)
  return bv1_;
}
 void MYC_stock_quote::set_bv1(::google::protobuf::int32 value) {
  set_has_bv1();
  bv1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv1)
}

// optional double ap1 = 43 [default = 0];
bool MYC_stock_quote::has_ap1() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void MYC_stock_quote::set_has_ap1() {
  _has_bits_[0] |= 0x10000000u;
}
void MYC_stock_quote::clear_has_ap1() {
  _has_bits_[0] &= ~0x10000000u;
}
void MYC_stock_quote::clear_ap1() {
  ap1_ = 0;
  clear_has_ap1();
}
 double MYC_stock_quote::ap1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap1)
  return ap1_;
}
 void MYC_stock_quote::set_ap1(double value) {
  set_has_ap1();
  ap1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap1)
}

// optional int32 av1 = 44 [default = 0];
bool MYC_stock_quote::has_av1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void MYC_stock_quote::set_has_av1() {
  _has_bits_[0] |= 0x20000000u;
}
void MYC_stock_quote::clear_has_av1() {
  _has_bits_[0] &= ~0x20000000u;
}
void MYC_stock_quote::clear_av1() {
  av1_ = 0;
  clear_has_av1();
}
 ::google::protobuf::int32 MYC_stock_quote::av1() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av1)
  return av1_;
}
 void MYC_stock_quote::set_av1(::google::protobuf::int32 value) {
  set_has_av1();
  av1_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av1)
}

// optional double bp2 = 45 [default = 0];
bool MYC_stock_quote::has_bp2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void MYC_stock_quote::set_has_bp2() {
  _has_bits_[0] |= 0x40000000u;
}
void MYC_stock_quote::clear_has_bp2() {
  _has_bits_[0] &= ~0x40000000u;
}
void MYC_stock_quote::clear_bp2() {
  bp2_ = 0;
  clear_has_bp2();
}
 double MYC_stock_quote::bp2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp2)
  return bp2_;
}
 void MYC_stock_quote::set_bp2(double value) {
  set_has_bp2();
  bp2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp2)
}

// optional int32 bv2 = 46 [default = 0];
bool MYC_stock_quote::has_bv2() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void MYC_stock_quote::set_has_bv2() {
  _has_bits_[0] |= 0x80000000u;
}
void MYC_stock_quote::clear_has_bv2() {
  _has_bits_[0] &= ~0x80000000u;
}
void MYC_stock_quote::clear_bv2() {
  bv2_ = 0;
  clear_has_bv2();
}
 ::google::protobuf::int32 MYC_stock_quote::bv2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv2)
  return bv2_;
}
 void MYC_stock_quote::set_bv2(::google::protobuf::int32 value) {
  set_has_bv2();
  bv2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv2)
}

// optional double ap2 = 47 [default = 0];
bool MYC_stock_quote::has_ap2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void MYC_stock_quote::set_has_ap2() {
  _has_bits_[1] |= 0x00000001u;
}
void MYC_stock_quote::clear_has_ap2() {
  _has_bits_[1] &= ~0x00000001u;
}
void MYC_stock_quote::clear_ap2() {
  ap2_ = 0;
  clear_has_ap2();
}
 double MYC_stock_quote::ap2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap2)
  return ap2_;
}
 void MYC_stock_quote::set_ap2(double value) {
  set_has_ap2();
  ap2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap2)
}

// optional int32 av2 = 48 [default = 0];
bool MYC_stock_quote::has_av2() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void MYC_stock_quote::set_has_av2() {
  _has_bits_[1] |= 0x00000002u;
}
void MYC_stock_quote::clear_has_av2() {
  _has_bits_[1] &= ~0x00000002u;
}
void MYC_stock_quote::clear_av2() {
  av2_ = 0;
  clear_has_av2();
}
 ::google::protobuf::int32 MYC_stock_quote::av2() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av2)
  return av2_;
}
 void MYC_stock_quote::set_av2(::google::protobuf::int32 value) {
  set_has_av2();
  av2_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av2)
}

// optional double bp3 = 49 [default = 0];
bool MYC_stock_quote::has_bp3() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void MYC_stock_quote::set_has_bp3() {
  _has_bits_[1] |= 0x00000004u;
}
void MYC_stock_quote::clear_has_bp3() {
  _has_bits_[1] &= ~0x00000004u;
}
void MYC_stock_quote::clear_bp3() {
  bp3_ = 0;
  clear_has_bp3();
}
 double MYC_stock_quote::bp3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp3)
  return bp3_;
}
 void MYC_stock_quote::set_bp3(double value) {
  set_has_bp3();
  bp3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp3)
}

// optional int32 bv3 = 50 [default = 0];
bool MYC_stock_quote::has_bv3() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void MYC_stock_quote::set_has_bv3() {
  _has_bits_[1] |= 0x00000008u;
}
void MYC_stock_quote::clear_has_bv3() {
  _has_bits_[1] &= ~0x00000008u;
}
void MYC_stock_quote::clear_bv3() {
  bv3_ = 0;
  clear_has_bv3();
}
 ::google::protobuf::int32 MYC_stock_quote::bv3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv3)
  return bv3_;
}
 void MYC_stock_quote::set_bv3(::google::protobuf::int32 value) {
  set_has_bv3();
  bv3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv3)
}

// optional double ap3 = 51 [default = 0];
bool MYC_stock_quote::has_ap3() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void MYC_stock_quote::set_has_ap3() {
  _has_bits_[1] |= 0x00000010u;
}
void MYC_stock_quote::clear_has_ap3() {
  _has_bits_[1] &= ~0x00000010u;
}
void MYC_stock_quote::clear_ap3() {
  ap3_ = 0;
  clear_has_ap3();
}
 double MYC_stock_quote::ap3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap3)
  return ap3_;
}
 void MYC_stock_quote::set_ap3(double value) {
  set_has_ap3();
  ap3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap3)
}

// optional int32 av3 = 52 [default = 0];
bool MYC_stock_quote::has_av3() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void MYC_stock_quote::set_has_av3() {
  _has_bits_[1] |= 0x00000020u;
}
void MYC_stock_quote::clear_has_av3() {
  _has_bits_[1] &= ~0x00000020u;
}
void MYC_stock_quote::clear_av3() {
  av3_ = 0;
  clear_has_av3();
}
 ::google::protobuf::int32 MYC_stock_quote::av3() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av3)
  return av3_;
}
 void MYC_stock_quote::set_av3(::google::protobuf::int32 value) {
  set_has_av3();
  av3_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av3)
}

// optional double bp4 = 53 [default = 0];
bool MYC_stock_quote::has_bp4() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void MYC_stock_quote::set_has_bp4() {
  _has_bits_[1] |= 0x00000040u;
}
void MYC_stock_quote::clear_has_bp4() {
  _has_bits_[1] &= ~0x00000040u;
}
void MYC_stock_quote::clear_bp4() {
  bp4_ = 0;
  clear_has_bp4();
}
 double MYC_stock_quote::bp4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp4)
  return bp4_;
}
 void MYC_stock_quote::set_bp4(double value) {
  set_has_bp4();
  bp4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp4)
}

// optional int32 bv4 = 54 [default = 0];
bool MYC_stock_quote::has_bv4() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void MYC_stock_quote::set_has_bv4() {
  _has_bits_[1] |= 0x00000080u;
}
void MYC_stock_quote::clear_has_bv4() {
  _has_bits_[1] &= ~0x00000080u;
}
void MYC_stock_quote::clear_bv4() {
  bv4_ = 0;
  clear_has_bv4();
}
 ::google::protobuf::int32 MYC_stock_quote::bv4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv4)
  return bv4_;
}
 void MYC_stock_quote::set_bv4(::google::protobuf::int32 value) {
  set_has_bv4();
  bv4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv4)
}

// optional double ap4 = 55 [default = 0];
bool MYC_stock_quote::has_ap4() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void MYC_stock_quote::set_has_ap4() {
  _has_bits_[1] |= 0x00000100u;
}
void MYC_stock_quote::clear_has_ap4() {
  _has_bits_[1] &= ~0x00000100u;
}
void MYC_stock_quote::clear_ap4() {
  ap4_ = 0;
  clear_has_ap4();
}
 double MYC_stock_quote::ap4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap4)
  return ap4_;
}
 void MYC_stock_quote::set_ap4(double value) {
  set_has_ap4();
  ap4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap4)
}

// optional int32 av4 = 56 [default = 0];
bool MYC_stock_quote::has_av4() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void MYC_stock_quote::set_has_av4() {
  _has_bits_[1] |= 0x00000200u;
}
void MYC_stock_quote::clear_has_av4() {
  _has_bits_[1] &= ~0x00000200u;
}
void MYC_stock_quote::clear_av4() {
  av4_ = 0;
  clear_has_av4();
}
 ::google::protobuf::int32 MYC_stock_quote::av4() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av4)
  return av4_;
}
 void MYC_stock_quote::set_av4(::google::protobuf::int32 value) {
  set_has_av4();
  av4_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av4)
}

// optional double bp5 = 57 [default = 0];
bool MYC_stock_quote::has_bp5() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void MYC_stock_quote::set_has_bp5() {
  _has_bits_[1] |= 0x00000400u;
}
void MYC_stock_quote::clear_has_bp5() {
  _has_bits_[1] &= ~0x00000400u;
}
void MYC_stock_quote::clear_bp5() {
  bp5_ = 0;
  clear_has_bp5();
}
 double MYC_stock_quote::bp5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bp5)
  return bp5_;
}
 void MYC_stock_quote::set_bp5(double value) {
  set_has_bp5();
  bp5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bp5)
}

// optional int32 bv5 = 58 [default = 0];
bool MYC_stock_quote::has_bv5() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void MYC_stock_quote::set_has_bv5() {
  _has_bits_[1] |= 0x00000800u;
}
void MYC_stock_quote::clear_has_bv5() {
  _has_bits_[1] &= ~0x00000800u;
}
void MYC_stock_quote::clear_bv5() {
  bv5_ = 0;
  clear_has_bv5();
}
 ::google::protobuf::int32 MYC_stock_quote::bv5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.bv5)
  return bv5_;
}
 void MYC_stock_quote::set_bv5(::google::protobuf::int32 value) {
  set_has_bv5();
  bv5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.bv5)
}

// optional double ap5 = 59 [default = 0];
bool MYC_stock_quote::has_ap5() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void MYC_stock_quote::set_has_ap5() {
  _has_bits_[1] |= 0x00001000u;
}
void MYC_stock_quote::clear_has_ap5() {
  _has_bits_[1] &= ~0x00001000u;
}
void MYC_stock_quote::clear_ap5() {
  ap5_ = 0;
  clear_has_ap5();
}
 double MYC_stock_quote::ap5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.ap5)
  return ap5_;
}
 void MYC_stock_quote::set_ap5(double value) {
  set_has_ap5();
  ap5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.ap5)
}

// optional int32 av5 = 60 [default = 0];
bool MYC_stock_quote::has_av5() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void MYC_stock_quote::set_has_av5() {
  _has_bits_[1] |= 0x00002000u;
}
void MYC_stock_quote::clear_has_av5() {
  _has_bits_[1] &= ~0x00002000u;
}
void MYC_stock_quote::clear_av5() {
  av5_ = 0;
  clear_has_av5();
}
 ::google::protobuf::int32 MYC_stock_quote::av5() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_stock_quote.av5)
  return av5_;
}
 void MYC_stock_quote::set_av5(::google::protobuf::int32 value) {
  set_has_av5();
  av5_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_stock_quote.av5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MYC_response::kOrderIdFieldNumber;
const int MYC_response::kSymbolFieldNumber;
const int MYC_response::kDirectionFieldNumber;
const int MYC_response::kOpenCloseFieldNumber;
const int MYC_response::kExePriceFieldNumber;
const int MYC_response::kExeVolumeFieldNumber;
const int MYC_response::kStatusFieldNumber;
const int MYC_response::kErrorNoFieldNumber;
const int MYC_response::kErrorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MYC_response::MYC_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MYC.MYC_response)
}

void MYC_response::InitAsDefaultInstance() {
}

MYC_response::MYC_response(const MYC_response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MYC.MYC_response)
}

void MYC_response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  order_id_ = GOOGLE_LONGLONG(0);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  open_close_ = 0;
  exe_price_ = 0;
  exe_volume_ = 0;
  status_ = 0;
  error_no_ = 0;
  error_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MYC_response::~MYC_response() {
  // @@protoc_insertion_point(destructor:MYC.MYC_response)
  SharedDtor();
}

void MYC_response::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MYC_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MYC_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MYC_response_descriptor_;
}

const MYC_response& MYC_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MYCData_2eproto();
  return *default_instance_;
}

MYC_response* MYC_response::default_instance_ = NULL;

MYC_response* MYC_response::New(::google::protobuf::Arena* arena) const {
  MYC_response* n = new MYC_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MYC_response::Clear() {
// @@protoc_insertion_point(message_clear_start:MYC.MYC_response)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MYC_response, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MYC_response*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(direction_, status_);
    order_id_ = GOOGLE_LONGLONG(0);
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    error_no_ = 0;
  }
  if (has_error_info()) {
    error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MYC_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MYC.MYC_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 order_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional string symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_response.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional int32 direction = 3;
      case 3: {
        if (tag == 24) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open_close;
        break;
      }

      // optional int32 open_close = 4;
      case 4: {
        if (tag == 32) {
         parse_open_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_close_)));
          set_has_open_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_exe_price;
        break;
      }

      // optional double exe_price = 5;
      case 5: {
        if (tag == 41) {
         parse_exe_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exe_price_)));
          set_has_exe_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exe_volume;
        break;
      }

      // optional int32 exe_volume = 6;
      case 6: {
        if (tag == 48) {
         parse_exe_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exe_volume_)));
          set_has_exe_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_error_no;
        break;
      }

      // optional int32 error_no = 8;
      case 8: {
        if (tag == 64) {
         parse_error_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_no_)));
          set_has_error_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_error_info;
        break;
      }

      // optional string error_info = 9;
      case 9: {
        if (tag == 74) {
         parse_error_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_info().data(), this->error_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MYC.MYC_response.error_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MYC.MYC_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MYC.MYC_response)
  return false;
#undef DO_
}

void MYC_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MYC.MYC_response)
  // optional int64 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->order_id(), output);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_response.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // optional int32 open_close = 4;
  if (has_open_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->open_close(), output);
  }

  // optional double exe_price = 5;
  if (has_exe_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->exe_price(), output);
  }

  // optional int32 exe_volume = 6;
  if (has_exe_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exe_volume(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  // optional int32 error_no = 8;
  if (has_error_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->error_no(), output);
  }

  // optional string error_info = 9;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_info().data(), this->error_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_response.error_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->error_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MYC.MYC_response)
}

::google::protobuf::uint8* MYC_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MYC.MYC_response)
  // optional int64 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->order_id(), target);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_response.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // optional int32 open_close = 4;
  if (has_open_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->open_close(), target);
  }

  // optional double exe_price = 5;
  if (has_exe_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->exe_price(), target);
  }

  // optional int32 exe_volume = 6;
  if (has_exe_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exe_volume(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  // optional int32 error_no = 8;
  if (has_error_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->error_no(), target);
  }

  // optional string error_info = 9;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_info().data(), this->error_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MYC.MYC_response.error_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->error_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MYC.MYC_response)
  return target;
}

int MYC_response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MYC.MYC_response)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_id());
    }

    // optional string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional int32 open_close = 4;
    if (has_open_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_close());
    }

    // optional double exe_price = 5;
    if (has_exe_price()) {
      total_size += 1 + 8;
    }

    // optional int32 exe_volume = 6;
    if (has_exe_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exe_volume());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 error_no = 8;
    if (has_error_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_no());
    }

  }
  // optional string error_info = 9;
  if (has_error_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_info());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MYC_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MYC.MYC_response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MYC_response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MYC_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MYC.MYC_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MYC.MYC_response)
    MergeFrom(*source);
  }
}

void MYC_response::MergeFrom(const MYC_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MYC.MYC_response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_open_close()) {
      set_open_close(from.open_close());
    }
    if (from.has_exe_price()) {
      set_exe_price(from.exe_price());
    }
    if (from.has_exe_volume()) {
      set_exe_volume(from.exe_volume());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_no()) {
      set_error_no(from.error_no());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error_info()) {
      set_has_error_info();
      error_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_info_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MYC_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MYC.MYC_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MYC_response::CopyFrom(const MYC_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MYC.MYC_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MYC_response::IsInitialized() const {

  return true;
}

void MYC_response::Swap(MYC_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MYC_response::InternalSwap(MYC_response* other) {
  std::swap(order_id_, other->order_id_);
  symbol_.Swap(&other->symbol_);
  std::swap(direction_, other->direction_);
  std::swap(open_close_, other->open_close_);
  std::swap(exe_price_, other->exe_price_);
  std::swap(exe_volume_, other->exe_volume_);
  std::swap(status_, other->status_);
  std::swap(error_no_, other->error_no_);
  error_info_.Swap(&other->error_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MYC_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MYC_response_descriptor_;
  metadata.reflection = MYC_response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MYC_response

// optional int64 order_id = 1;
bool MYC_response::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MYC_response::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MYC_response::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MYC_response::clear_order_id() {
  order_id_ = GOOGLE_LONGLONG(0);
  clear_has_order_id();
}
 ::google::protobuf::int64 MYC_response::order_id() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.order_id)
  return order_id_;
}
 void MYC_response::set_order_id(::google::protobuf::int64 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.order_id)
}

// optional string symbol = 2;
bool MYC_response::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MYC_response::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
void MYC_response::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
void MYC_response::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
 const ::std::string& MYC_response::symbol() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_response::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_response.symbol)
}
 void MYC_response::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_response.symbol)
}
 void MYC_response::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_response.symbol)
}
 ::std::string* MYC_response::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_response.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_response::release_symbol() {
  // @@protoc_insertion_point(field_release:MYC.MYC_response.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_response::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_response.symbol)
}

// optional int32 direction = 3;
bool MYC_response::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MYC_response::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void MYC_response::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void MYC_response::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 MYC_response::direction() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.direction)
  return direction_;
}
 void MYC_response::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.direction)
}

// optional int32 open_close = 4;
bool MYC_response::has_open_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MYC_response::set_has_open_close() {
  _has_bits_[0] |= 0x00000008u;
}
void MYC_response::clear_has_open_close() {
  _has_bits_[0] &= ~0x00000008u;
}
void MYC_response::clear_open_close() {
  open_close_ = 0;
  clear_has_open_close();
}
 ::google::protobuf::int32 MYC_response::open_close() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.open_close)
  return open_close_;
}
 void MYC_response::set_open_close(::google::protobuf::int32 value) {
  set_has_open_close();
  open_close_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.open_close)
}

// optional double exe_price = 5;
bool MYC_response::has_exe_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MYC_response::set_has_exe_price() {
  _has_bits_[0] |= 0x00000010u;
}
void MYC_response::clear_has_exe_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void MYC_response::clear_exe_price() {
  exe_price_ = 0;
  clear_has_exe_price();
}
 double MYC_response::exe_price() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.exe_price)
  return exe_price_;
}
 void MYC_response::set_exe_price(double value) {
  set_has_exe_price();
  exe_price_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.exe_price)
}

// optional int32 exe_volume = 6;
bool MYC_response::has_exe_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MYC_response::set_has_exe_volume() {
  _has_bits_[0] |= 0x00000020u;
}
void MYC_response::clear_has_exe_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
void MYC_response::clear_exe_volume() {
  exe_volume_ = 0;
  clear_has_exe_volume();
}
 ::google::protobuf::int32 MYC_response::exe_volume() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.exe_volume)
  return exe_volume_;
}
 void MYC_response::set_exe_volume(::google::protobuf::int32 value) {
  set_has_exe_volume();
  exe_volume_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.exe_volume)
}

// optional int32 status = 7;
bool MYC_response::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MYC_response::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
void MYC_response::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void MYC_response::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 MYC_response::status() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.status)
  return status_;
}
 void MYC_response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.status)
}

// optional int32 error_no = 8;
bool MYC_response::has_error_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MYC_response::set_has_error_no() {
  _has_bits_[0] |= 0x00000080u;
}
void MYC_response::clear_has_error_no() {
  _has_bits_[0] &= ~0x00000080u;
}
void MYC_response::clear_error_no() {
  error_no_ = 0;
  clear_has_error_no();
}
 ::google::protobuf::int32 MYC_response::error_no() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.error_no)
  return error_no_;
}
 void MYC_response::set_error_no(::google::protobuf::int32 value) {
  set_has_error_no();
  error_no_ = value;
  // @@protoc_insertion_point(field_set:MYC.MYC_response.error_no)
}

// optional string error_info = 9;
bool MYC_response::has_error_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MYC_response::set_has_error_info() {
  _has_bits_[0] |= 0x00000100u;
}
void MYC_response::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000100u;
}
void MYC_response::clear_error_info() {
  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_info();
}
 const ::std::string& MYC_response::error_info() const {
  // @@protoc_insertion_point(field_get:MYC.MYC_response.error_info)
  return error_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_response::set_error_info(const ::std::string& value) {
  set_has_error_info();
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MYC.MYC_response.error_info)
}
 void MYC_response::set_error_info(const char* value) {
  set_has_error_info();
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MYC.MYC_response.error_info)
}
 void MYC_response::set_error_info(const char* value, size_t size) {
  set_has_error_info();
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MYC.MYC_response.error_info)
}
 ::std::string* MYC_response::mutable_error_info() {
  set_has_error_info();
  // @@protoc_insertion_point(field_mutable:MYC.MYC_response.error_info)
  return error_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MYC_response::release_error_info() {
  // @@protoc_insertion_point(field_release:MYC.MYC_response.error_info)
  clear_has_error_info();
  return error_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MYC_response::set_allocated_error_info(::std::string* error_info) {
  if (error_info != NULL) {
    set_has_error_info();
  } else {
    clear_has_error_info();
  }
  error_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_info);
  // @@protoc_insertion_point(field_set_allocated:MYC.MYC_response.error_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MYC

// @@protoc_insertion_point(global_scope)
