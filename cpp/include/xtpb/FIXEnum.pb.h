// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FIXEnum.proto

#ifndef PROTOBUF_FIXEnum_2eproto__INCLUDED
#define PROTOBUF_FIXEnum_2eproto__INCLUDED

#include <string>
#include "XTConfig.h"
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace XT {

// Internal implementation detail -- do not call these.
void XT_COMMON_API protobuf_AddDesc_FIXEnum_2eproto();
void protobuf_AssignDesc_FIXEnum_2eproto();
void protobuf_ShutdownFile_FIXEnum_2eproto();

class MessageType;
class ProductType;

enum MessageType_enumtype {
  MessageType_enumtype_Heartbeat = 0,
  MessageType_enumtype_TestRequest = 1,
  MessageType_enumtype_ResendRequest = 2,
  MessageType_enumtype_Reject = 3,
  MessageType_enumtype_SequenceReset = 4,
  MessageType_enumtype_Logout = 5,
  MessageType_enumtype_IOI = 6,
  MessageType_enumtype_Advertisement = 7,
  MessageType_enumtype_ExecutionReport = 8,
  MessageType_enumtype_OrderCancelReject = 9,
  MessageType_enumtype_Logon = 10,
  MessageType_enumtype_News = 11,
  MessageType_enumtype_Email = 12,
  MessageType_enumtype_NewOrderSingle = 13,
  MessageType_enumtype_NewOrderList = 14,
  MessageType_enumtype_OrderCancelRequest = 15,
  MessageType_enumtype_OrderCancelReplaceRequest = 16,
  MessageType_enumtype_OrderStatusRequest = 17,
  MessageType_enumtype_AllocationInstruction = 18,
  MessageType_enumtype_ListCancelRequest = 19,
  MessageType_enumtype_ListExecute = 20,
  MessageType_enumtype_ListStatusRequest = 21,
  MessageType_enumtype_ListStatus = 22,
  MessageType_enumtype_AllocationInstructionAck = 23,
  MessageType_enumtype_DontKnowTrade = 24,
  MessageType_enumtype_QuoteRequest = 25,
  MessageType_enumtype_Quote = 26,
  MessageType_enumtype_SettlementInstructions = 27,
  MessageType_enumtype_MarketDataRequest = 28,
  MessageType_enumtype_MarketDataSnapshotFullRefresh = 29,
  MessageType_enumtype_MarketDataIncrementalRefresh = 30,
  MessageType_enumtype_MarketDataRequestReject = 31,
  MessageType_enumtype_QuoteCancel = 32,
  MessageType_enumtype_QuoteStatusRequest = 33,
  MessageType_enumtype_MassQuoteAcknowledgement = 34,
  MessageType_enumtype_SecurityDefinitionRequest = 35,
  MessageType_enumtype_SecurityDefinition = 36,
  MessageType_enumtype_SecurityStatusRequest = 37,
  MessageType_enumtype_SecurityStatus = 38,
  MessageType_enumtype_TradingSessionStatusRequest = 39,
  MessageType_enumtype_TradingSessionStatus = 40,
  MessageType_enumtype_MassQuote = 41,
  MessageType_enumtype_BusinessMessageReject = 42,
  MessageType_enumtype_BidRequest = 43,
  MessageType_enumtype_BidResponse = 44,
  MessageType_enumtype_ListStrikePrice = 45,
  MessageType_enumtype_XMLnonFIX = 46,
  MessageType_enumtype_RegistrationInstructions = 47,
  MessageType_enumtype_RegistrationInstructionsResponse = 48,
  MessageType_enumtype_OrderMassCancelRequest = 49,
  MessageType_enumtype_OrderMassCancelReport = 50,
  MessageType_enumtype_NewOrderCross = 51,
  MessageType_enumtype_CrossOrderCancelReplaceRequest = 52,
  MessageType_enumtype_CrossOrderCancelRequest = 53,
  MessageType_enumtype_SecurityTypeRequest = 54,
  MessageType_enumtype_SecurityTypes = 55,
  MessageType_enumtype_SecurityListRequest = 56,
  MessageType_enumtype_SecurityList = 57,
  MessageType_enumtype_DerivativeSecurityListRequest = 58,
  MessageType_enumtype_DerivativeSecurityList = 59,
  MessageType_enumtype_NewOrderMultileg = 60,
  MessageType_enumtype_MultilegOrderCancelReplace = 61,
  MessageType_enumtype_TradeCaptureReportRequest = 62,
  MessageType_enumtype_TradeCaptureReport = 63,
  MessageType_enumtype_OrderMassStatusRequest = 64,
  MessageType_enumtype_QuoteRequestReject = 65,
  MessageType_enumtype_RFQRequest = 66,
  MessageType_enumtype_QuoteStatusReport = 67,
  MessageType_enumtype_QuoteResponse = 68,
  MessageType_enumtype_Confirmation = 69,
  MessageType_enumtype_PositionMaintenanceRequest = 70,
  MessageType_enumtype_PositionMaintenanceReport = 71,
  MessageType_enumtype_RequestForPositions = 72,
  MessageType_enumtype_RequestForPositionsAck = 73,
  MessageType_enumtype_PositionReport = 74,
  MessageType_enumtype_TradeCaptureReportRequestAck = 75,
  MessageType_enumtype_TradeCaptureReportAck = 76,
  MessageType_enumtype_AllocationReport = 77,
  MessageType_enumtype_AllocationReportAck = 78,
  MessageType_enumtype_ConfirmationAck = 79,
  MessageType_enumtype_SettlementInstructionRequest = 80,
  MessageType_enumtype_AssignmentReport = 81,
  MessageType_enumtype_CollateralRequest = 82,
  MessageType_enumtype_CollateralAssignment = 83,
  MessageType_enumtype_CollateralResponse = 84,
  MessageType_enumtype_CollateralReport = 85,
  MessageType_enumtype_CollateralInquiry = 86,
  MessageType_enumtype_NetworkCounterpartySystemStatusRequest = 87,
  MessageType_enumtype_NetworkCounterpartySystemStatusResponse = 88,
  MessageType_enumtype_UserRequest = 89,
  MessageType_enumtype_UserResponse = 90,
  MessageType_enumtype_CollateralInquiryAck = 91,
  MessageType_enumtype_ConfirmationRequest = 92
};
XT_COMMON_API bool MessageType_enumtype_IsValid(int value);
const MessageType_enumtype MessageType_enumtype_enumtype_MIN = MessageType_enumtype_Heartbeat;
const MessageType_enumtype MessageType_enumtype_enumtype_MAX = MessageType_enumtype_ConfirmationRequest;
const int MessageType_enumtype_enumtype_ARRAYSIZE = MessageType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* MessageType_enumtype_descriptor();
inline const ::std::string& MessageType_enumtype_Name(MessageType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_enumtype_descriptor(), value);
}
inline bool MessageType_enumtype_Parse(
    const ::std::string& name, MessageType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType_enumtype>(
    MessageType_enumtype_descriptor(), name, value);
}
enum ProductType_enumtype {
  ProductType_enumtype_Unknown = 0,
  ProductType_enumtype_AGENCY = 1,
  ProductType_enumtype_COMMODITY = 2,
  ProductType_enumtype_CORPORATE = 3,
  ProductType_enumtype_CURRENCY = 4,
  ProductType_enumtype_EQUITY = 5,
  ProductType_enumtype_GOVERNMENT = 6,
  ProductType_enumtype_INDEX = 7,
  ProductType_enumtype_LOAN = 8,
  ProductType_enumtype_MONEYMARKET = 9,
  ProductType_enumtype_MORTGAGE = 10,
  ProductType_enumtype_MUNICIPAL = 11,
  ProductType_enumtype_OTHER = 12,
  ProductType_enumtype_FINANCING = 13
};
XT_COMMON_API bool ProductType_enumtype_IsValid(int value);
const ProductType_enumtype ProductType_enumtype_enumtype_MIN = ProductType_enumtype_Unknown;
const ProductType_enumtype ProductType_enumtype_enumtype_MAX = ProductType_enumtype_FINANCING;
const int ProductType_enumtype_enumtype_ARRAYSIZE = ProductType_enumtype_enumtype_MAX + 1;

XT_COMMON_API const ::google::protobuf::EnumDescriptor* ProductType_enumtype_descriptor();
inline const ::std::string& ProductType_enumtype_Name(ProductType_enumtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProductType_enumtype_descriptor(), value);
}
inline bool ProductType_enumtype_Parse(
    const ::std::string& name, ProductType_enumtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProductType_enumtype>(
    ProductType_enumtype_descriptor(), name, value);
}
// ===================================================================

class XT_COMMON_API MessageType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.MessageType) */ {
 public:
  MessageType();
  virtual ~MessageType();

  MessageType(const MessageType& from);

  inline MessageType& operator=(const MessageType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageType& default_instance();

  void Swap(MessageType* other);

  // implements Message ----------------------------------------------

  inline MessageType* New() const { return New(NULL); }

  MessageType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageType& from);
  void MergeFrom(const MessageType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MessageType_enumtype enumtype;
  static const enumtype Heartbeat =
    MessageType_enumtype_Heartbeat;
  static const enumtype TestRequest =
    MessageType_enumtype_TestRequest;
  static const enumtype ResendRequest =
    MessageType_enumtype_ResendRequest;
  static const enumtype Reject =
    MessageType_enumtype_Reject;
  static const enumtype SequenceReset =
    MessageType_enumtype_SequenceReset;
  static const enumtype Logout =
    MessageType_enumtype_Logout;
  static const enumtype IOI =
    MessageType_enumtype_IOI;
  static const enumtype Advertisement =
    MessageType_enumtype_Advertisement;
  static const enumtype ExecutionReport =
    MessageType_enumtype_ExecutionReport;
  static const enumtype OrderCancelReject =
    MessageType_enumtype_OrderCancelReject;
  static const enumtype Logon =
    MessageType_enumtype_Logon;
  static const enumtype News =
    MessageType_enumtype_News;
  static const enumtype Email =
    MessageType_enumtype_Email;
  static const enumtype NewOrderSingle =
    MessageType_enumtype_NewOrderSingle;
  static const enumtype NewOrderList =
    MessageType_enumtype_NewOrderList;
  static const enumtype OrderCancelRequest =
    MessageType_enumtype_OrderCancelRequest;
  static const enumtype OrderCancelReplaceRequest =
    MessageType_enumtype_OrderCancelReplaceRequest;
  static const enumtype OrderStatusRequest =
    MessageType_enumtype_OrderStatusRequest;
  static const enumtype AllocationInstruction =
    MessageType_enumtype_AllocationInstruction;
  static const enumtype ListCancelRequest =
    MessageType_enumtype_ListCancelRequest;
  static const enumtype ListExecute =
    MessageType_enumtype_ListExecute;
  static const enumtype ListStatusRequest =
    MessageType_enumtype_ListStatusRequest;
  static const enumtype ListStatus =
    MessageType_enumtype_ListStatus;
  static const enumtype AllocationInstructionAck =
    MessageType_enumtype_AllocationInstructionAck;
  static const enumtype DontKnowTrade =
    MessageType_enumtype_DontKnowTrade;
  static const enumtype QuoteRequest =
    MessageType_enumtype_QuoteRequest;
  static const enumtype Quote =
    MessageType_enumtype_Quote;
  static const enumtype SettlementInstructions =
    MessageType_enumtype_SettlementInstructions;
  static const enumtype MarketDataRequest =
    MessageType_enumtype_MarketDataRequest;
  static const enumtype MarketDataSnapshotFullRefresh =
    MessageType_enumtype_MarketDataSnapshotFullRefresh;
  static const enumtype MarketDataIncrementalRefresh =
    MessageType_enumtype_MarketDataIncrementalRefresh;
  static const enumtype MarketDataRequestReject =
    MessageType_enumtype_MarketDataRequestReject;
  static const enumtype QuoteCancel =
    MessageType_enumtype_QuoteCancel;
  static const enumtype QuoteStatusRequest =
    MessageType_enumtype_QuoteStatusRequest;
  static const enumtype MassQuoteAcknowledgement =
    MessageType_enumtype_MassQuoteAcknowledgement;
  static const enumtype SecurityDefinitionRequest =
    MessageType_enumtype_SecurityDefinitionRequest;
  static const enumtype SecurityDefinition =
    MessageType_enumtype_SecurityDefinition;
  static const enumtype SecurityStatusRequest =
    MessageType_enumtype_SecurityStatusRequest;
  static const enumtype SecurityStatus =
    MessageType_enumtype_SecurityStatus;
  static const enumtype TradingSessionStatusRequest =
    MessageType_enumtype_TradingSessionStatusRequest;
  static const enumtype TradingSessionStatus =
    MessageType_enumtype_TradingSessionStatus;
  static const enumtype MassQuote =
    MessageType_enumtype_MassQuote;
  static const enumtype BusinessMessageReject =
    MessageType_enumtype_BusinessMessageReject;
  static const enumtype BidRequest =
    MessageType_enumtype_BidRequest;
  static const enumtype BidResponse =
    MessageType_enumtype_BidResponse;
  static const enumtype ListStrikePrice =
    MessageType_enumtype_ListStrikePrice;
  static const enumtype XMLnonFIX =
    MessageType_enumtype_XMLnonFIX;
  static const enumtype RegistrationInstructions =
    MessageType_enumtype_RegistrationInstructions;
  static const enumtype RegistrationInstructionsResponse =
    MessageType_enumtype_RegistrationInstructionsResponse;
  static const enumtype OrderMassCancelRequest =
    MessageType_enumtype_OrderMassCancelRequest;
  static const enumtype OrderMassCancelReport =
    MessageType_enumtype_OrderMassCancelReport;
  static const enumtype NewOrderCross =
    MessageType_enumtype_NewOrderCross;
  static const enumtype CrossOrderCancelReplaceRequest =
    MessageType_enumtype_CrossOrderCancelReplaceRequest;
  static const enumtype CrossOrderCancelRequest =
    MessageType_enumtype_CrossOrderCancelRequest;
  static const enumtype SecurityTypeRequest =
    MessageType_enumtype_SecurityTypeRequest;
  static const enumtype SecurityTypes =
    MessageType_enumtype_SecurityTypes;
  static const enumtype SecurityListRequest =
    MessageType_enumtype_SecurityListRequest;
  static const enumtype SecurityList =
    MessageType_enumtype_SecurityList;
  static const enumtype DerivativeSecurityListRequest =
    MessageType_enumtype_DerivativeSecurityListRequest;
  static const enumtype DerivativeSecurityList =
    MessageType_enumtype_DerivativeSecurityList;
  static const enumtype NewOrderMultileg =
    MessageType_enumtype_NewOrderMultileg;
  static const enumtype MultilegOrderCancelReplace =
    MessageType_enumtype_MultilegOrderCancelReplace;
  static const enumtype TradeCaptureReportRequest =
    MessageType_enumtype_TradeCaptureReportRequest;
  static const enumtype TradeCaptureReport =
    MessageType_enumtype_TradeCaptureReport;
  static const enumtype OrderMassStatusRequest =
    MessageType_enumtype_OrderMassStatusRequest;
  static const enumtype QuoteRequestReject =
    MessageType_enumtype_QuoteRequestReject;
  static const enumtype RFQRequest =
    MessageType_enumtype_RFQRequest;
  static const enumtype QuoteStatusReport =
    MessageType_enumtype_QuoteStatusReport;
  static const enumtype QuoteResponse =
    MessageType_enumtype_QuoteResponse;
  static const enumtype Confirmation =
    MessageType_enumtype_Confirmation;
  static const enumtype PositionMaintenanceRequest =
    MessageType_enumtype_PositionMaintenanceRequest;
  static const enumtype PositionMaintenanceReport =
    MessageType_enumtype_PositionMaintenanceReport;
  static const enumtype RequestForPositions =
    MessageType_enumtype_RequestForPositions;
  static const enumtype RequestForPositionsAck =
    MessageType_enumtype_RequestForPositionsAck;
  static const enumtype PositionReport =
    MessageType_enumtype_PositionReport;
  static const enumtype TradeCaptureReportRequestAck =
    MessageType_enumtype_TradeCaptureReportRequestAck;
  static const enumtype TradeCaptureReportAck =
    MessageType_enumtype_TradeCaptureReportAck;
  static const enumtype AllocationReport =
    MessageType_enumtype_AllocationReport;
  static const enumtype AllocationReportAck =
    MessageType_enumtype_AllocationReportAck;
  static const enumtype ConfirmationAck =
    MessageType_enumtype_ConfirmationAck;
  static const enumtype SettlementInstructionRequest =
    MessageType_enumtype_SettlementInstructionRequest;
  static const enumtype AssignmentReport =
    MessageType_enumtype_AssignmentReport;
  static const enumtype CollateralRequest =
    MessageType_enumtype_CollateralRequest;
  static const enumtype CollateralAssignment =
    MessageType_enumtype_CollateralAssignment;
  static const enumtype CollateralResponse =
    MessageType_enumtype_CollateralResponse;
  static const enumtype CollateralReport =
    MessageType_enumtype_CollateralReport;
  static const enumtype CollateralInquiry =
    MessageType_enumtype_CollateralInquiry;
  static const enumtype NetworkCounterpartySystemStatusRequest =
    MessageType_enumtype_NetworkCounterpartySystemStatusRequest;
  static const enumtype NetworkCounterpartySystemStatusResponse =
    MessageType_enumtype_NetworkCounterpartySystemStatusResponse;
  static const enumtype UserRequest =
    MessageType_enumtype_UserRequest;
  static const enumtype UserResponse =
    MessageType_enumtype_UserResponse;
  static const enumtype CollateralInquiryAck =
    MessageType_enumtype_CollateralInquiryAck;
  static const enumtype ConfirmationRequest =
    MessageType_enumtype_ConfirmationRequest;
  static inline bool enumtype_IsValid(int value) {
    return MessageType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    MessageType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    MessageType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    MessageType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return MessageType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return MessageType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return MessageType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.MessageType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_FIXEnum_2eproto();
  friend void protobuf_AssignDesc_FIXEnum_2eproto();
  friend void protobuf_ShutdownFile_FIXEnum_2eproto();

  void InitAsDefaultInstance();
  static MessageType* default_instance_;
};
// -------------------------------------------------------------------

class XT_COMMON_API ProductType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XT.ProductType) */ {
 public:
  ProductType();
  virtual ~ProductType();

  ProductType(const ProductType& from);

  inline ProductType& operator=(const ProductType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductType& default_instance();

  void Swap(ProductType* other);

  // implements Message ----------------------------------------------

  inline ProductType* New() const { return New(NULL); }

  ProductType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductType& from);
  void MergeFrom(const ProductType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProductType_enumtype enumtype;
  static const enumtype Unknown =
    ProductType_enumtype_Unknown;
  static const enumtype AGENCY =
    ProductType_enumtype_AGENCY;
  static const enumtype COMMODITY =
    ProductType_enumtype_COMMODITY;
  static const enumtype CORPORATE =
    ProductType_enumtype_CORPORATE;
  static const enumtype CURRENCY =
    ProductType_enumtype_CURRENCY;
  static const enumtype EQUITY =
    ProductType_enumtype_EQUITY;
  static const enumtype GOVERNMENT =
    ProductType_enumtype_GOVERNMENT;
  static const enumtype INDEX =
    ProductType_enumtype_INDEX;
  static const enumtype LOAN =
    ProductType_enumtype_LOAN;
  static const enumtype MONEYMARKET =
    ProductType_enumtype_MONEYMARKET;
  static const enumtype MORTGAGE =
    ProductType_enumtype_MORTGAGE;
  static const enumtype MUNICIPAL =
    ProductType_enumtype_MUNICIPAL;
  static const enumtype OTHER =
    ProductType_enumtype_OTHER;
  static const enumtype FINANCING =
    ProductType_enumtype_FINANCING;
  static inline bool enumtype_IsValid(int value) {
    return ProductType_enumtype_IsValid(value);
  }
  static const enumtype enumtype_MIN =
    ProductType_enumtype_enumtype_MIN;
  static const enumtype enumtype_MAX =
    ProductType_enumtype_enumtype_MAX;
  static const int enumtype_ARRAYSIZE =
    ProductType_enumtype_enumtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumtype_descriptor() {
    return ProductType_enumtype_descriptor();
  }
  static inline const ::std::string& enumtype_Name(enumtype value) {
    return ProductType_enumtype_Name(value);
  }
  static inline bool enumtype_Parse(const ::std::string& name,
      enumtype* value) {
    return ProductType_enumtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XT.ProductType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void XT_COMMON_API protobuf_AddDesc_FIXEnum_2eproto();
  friend void protobuf_AssignDesc_FIXEnum_2eproto();
  friend void protobuf_ShutdownFile_FIXEnum_2eproto();

  void InitAsDefaultInstance();
  static ProductType* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageType

// -------------------------------------------------------------------

// ProductType

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XT

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::XT::MessageType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::MessageType_enumtype>() {
  return ::XT::MessageType_enumtype_descriptor();
}
template <> struct is_proto_enum< ::XT::ProductType_enumtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XT::ProductType_enumtype>() {
  return ::XT::ProductType_enumtype_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FIXEnum_2eproto__INCLUDED
